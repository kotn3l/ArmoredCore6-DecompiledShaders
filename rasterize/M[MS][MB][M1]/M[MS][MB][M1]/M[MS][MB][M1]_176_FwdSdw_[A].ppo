#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1436;
float _4100;
float _4101;
float _4102;
float _4103;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4112 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4123 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4134 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[24u].y) + _423) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4145 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _448 = (_441 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _449 = (_441 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _450 = (_441 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[24u].y) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4156 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    float _527 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _521;
    float _530 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _522;
    float _533 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _523;
    float _540 = ((_521 - _527) * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) + _527;
    float _541 = ((_522 - _530) * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) + _530;
    float _542 = ((_523 - _533) * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) + _533;
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _577 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _594 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _596 = _594.x;
    float _597 = _594.y;
    float _598 = _594.z;
    float _605 = ((_577.x - _596) * _441) + _596;
    float _606 = ((_577.y - _597) * _441) + _597;
    float _607 = ((_577.z - _598) * _441) + _598;
    vec4 _619 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _632 = ((_619.z - _607) * _514) + _607;
    float _635 = ((((_619.x - _605) * _514) + _605) * 2.0) + (-1.0);
    float _636 = ((((_619.y - _606) * _514) + _606) * 2.0) + (-1.0);
    float _637 = dot(vec2(_635, _636), vec2(_635, _636));
    float _4167 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _642 = sqrt(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))));
    float _647 = _635 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_554.x * 2.0) + (-1.0)));
    float _648 = _636 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_554.y * 2.0) + (-1.0)));
    vec4 _661 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _675 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _677 = _675.x;
    float _678 = 1.0 - _677;
    float _704 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_677 - _678) * cbMtdParam._m0[24u].w) + _678) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4178 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _705 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _713 = ((((cbMtdParam._m0[10u].x - _540) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _705) + _540;
    float _714 = ((((cbMtdParam._m0[10u].y - _541) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _705) + _541;
    float _715 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _542)) * _705) + _542;
    vec4 _727 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _741 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _743 = _741.x;
    float _761 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _743) * _441) + _743;
    float _779 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _308) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _309) + cbTextureTilingScale._m0[21u].w)).x - _761) * _514) + _761;
    float _783 = ((_727.x - _779) * cbMtdParam._m0[19u].z) + _779;
    float _785 = _783 - (_783 * _705);
    float _790 = (((_554.z - _632) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _632;
    float _794 = ((cbMtdParam._m0[23u].y - _790) * _705) + _790;
    vec4 _813 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _819 = (_813.x * 2.0) + (-1.0);
    float _820 = (_813.y * 2.0) + (-1.0);
    float _821 = dot(vec2(_819, _820), vec2(_819, _820));
    float _4189 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _837 = (_705 * (((cbMtdParam._m0[22u].z * _647) - _647) + _819)) + _647;
    float _838 = (_705 * (((cbMtdParam._m0[22u].z * _648) - _648) + _820)) + _648;
    float _839 = (_705 * (sqrt(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) - _642)) + _642;
    float _843 = cbMtdParam._m0[22u].x + _661.w;
    float _846 = fma(_839, _257 * NORMAL.x, fma(_838, _264 * TANGENT.x, (_250 * _242) * _837));
    float _849 = fma(_839, _257 * NORMAL.y, fma(_838, _264 * TANGENT.y, (_250 * _243) * _837));
    float _852 = fma(_839, _257 * NORMAL.z, fma(_838, _264 * TANGENT.z, (_250 * _244) * _837));
    float _856 = inversesqrt(dot(vec3(_846, _849, _852), vec3(_846, _849, _852)));
    float _857 = _856 * _846;
    float _858 = _856 * _849;
    float _859 = _856 * _852;
    float _4200 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _860 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _4211 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4222 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4233 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4244 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4255 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _865 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _879 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _929 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _919);
    float _930 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _919);
    float _931 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _919);
    float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
    float _936 = _929 * _935;
    float _937 = _930 * _935;
    float _938 = _931 * _935;
    vec4 _943 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _945 = _943.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1117 = sqrt(((_929 * _929) + (_930 * _930)) + (_931 * _931));
        float _1123 = (cbMatDynParam._m0[5u].x * _1117) + cbMatDynParam._m0[5u].y;
        float _4266 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1128 = (cbMatDynParam._m0[5u].z * _1117) + cbMatDynParam._m0[5u].w;
        float _4277 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) - _1124)) + _1124) < ((_945 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _956 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _957 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _975 = fma(_859, cbSceneParam._m0[5u].z, fma(_858, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _857));
    float _978 = fma(_859, cbSceneParam._m0[6u].z, fma(_858, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _857));
    float _981 = fma(_859, cbSceneParam._m0[7u].z, fma(_858, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _857));
    uint _994 = _289 + 9u;
    uint _995 = _994 + uint(cbMatDynParam._m0[0u].w);
    float _1001 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * cbInstanceData._m0[_995].x;
    float _1002 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * cbInstanceData._m0[_995].y;
    float _1003 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * cbInstanceData._m0[_995].z;
    float _4288 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _4299 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _4310 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _1007 = 1.0 - _865;
    float _1008 = _1004 * _1007;
    float _1009 = _1005 * _1007;
    float _1010 = _1006 * _1007;
    float _1015 = (_1004 + (-0.039999999105930328369140625)) * _865;
    float _1016 = (_1005 + (-0.039999999105930328369140625)) * _865;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _865;
    float _1018 = _1015 + 0.039999999105930328369140625;
    float _1020 = _1016 + 0.039999999105930328369140625;
    float _1021 = _1017 + 0.039999999105930328369140625;
    vec4 _1030 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _956, cbSceneParam._m0[86u].y * _957));
    float _1034 = ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * TEXCOORD_5.w) * _1030.x;
    float _1035 = dot(vec3(_857, _858, _859), vec3(_936, _937, _938));
    float _1038 = _1035 * 2.0;
    float _1042 = (_1038 * _857) - _936;
    float _1043 = (_1038 * _858) - _937;
    float _1044 = (_1038 * _859) - _938;
    float _1048 = abs(dot(vec3(_936, _937, _938), vec3(_857, _858, _859)));
    float _4321 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1050 = sqrt(_860);
    float _1063 = exp2((_1050 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1050 * 3.0));
    float _1069 = (1.0 - _1063) * ((_1050 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1070 = _1063 * _1050;
    float _1098 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1106 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1435;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1160 = fma(_1106, cbModelParam._m0[26u].z, fma(_1102, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1098));
        float _1164 = fma(_1106, cbModelParam._m0[27u].z, fma(_1102, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1098));
        float _1168 = fma(_1106, cbModelParam._m0[28u].z, fma(_1102, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1098));
        float _1193 = _1098 + _857;
        float _1194 = _1102 + _858;
        float _1195 = _1106 + _859;
        float _1205 = fma(_1195, cbModelParam._m0[26u].z, fma(_1194, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1193)) - _1160;
        float _1206 = fma(_1195, cbModelParam._m0[27u].z, fma(_1194, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1193)) - _1164;
        float _1207 = fma(_1195, cbModelParam._m0[28u].z, fma(_1194, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1193)) - _1168;
        float _1211 = inversesqrt(dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207)));
        float _1224 = ((_1211 * _1205) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1160 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1211 * _1206) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1164 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1211 * _1207) / cbModelParam._m0[34u].z) + ((((((_1168 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        float _1263 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1229.x + (-0.5));
        float _1265 = _1263 * (_1229.y + (-0.5));
        float _1266 = _1263 * (_1229.z + (-0.5));
        float _1273 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1236.x + (-0.5));
        float _1275 = _1273 * (_1236.y + (-0.5));
        float _1276 = _1273 * (_1236.z + (-0.5));
        float _1283 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1243.x + (-0.5));
        float _1285 = _1283 * (_1243.y + (-0.5));
        float _1286 = _1283 * (_1243.z + (-0.5));
        float _1293 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1250.x + (-0.5));
        float _1295 = _1293 * (_1250.y + (-0.5));
        float _1296 = _1293 * (_1250.z + (-0.5));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = _1264 * 0.5;
        float _1301 = _1274 * 0.5;
        float _1302 = _1284 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1317 = (dot(vec3(_857, _858, _859), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1327 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4369 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1329 + 1.0))) + _1334) * _1297;
        float _1344 = _1265 * 0.5;
        float _1345 = _1275 * 0.5;
        float _1346 = _1285 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_857, _858, _859), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4380 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4391 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4402 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_1371 + 1.0))) + _1376) * _1298;
        float _1386 = _1266 * 0.5;
        float _1387 = _1276 * 0.5;
        float _1388 = _1286 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_857, _858, _859), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4413 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4424 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4435 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_1413 + 1.0))) + _1418) * _1299;
        _1435 = _1266;
        _1437 = _1265;
        _1438 = _1264;
        _1439 = _1276;
        _1440 = _1275;
        _1441 = _1274;
        _1442 = _1286;
        _1443 = _1285;
        _1444 = _1284;
        _1445 = _1299;
        _1446 = _1298;
        _1447 = _1297;
        _1448 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
    }
    else
    {
        _1435 = _1436;
        _1437 = _1436;
        _1438 = _1436;
        _1439 = _1436;
        _1440 = _1436;
        _1441 = _1436;
        _1442 = _1436;
        _1443 = _1436;
        _1444 = _1436;
        _1445 = _1436;
        _1446 = _1436;
        _1447 = _1436;
        _1448 = 0.0;
        _1449 = 0.0;
        _1450 = 0.0;
    }
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1477 = fma(_1106, cbModelParam._m0[30u].z, fma(_1102, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1098));
        float _1481 = fma(_1106, cbModelParam._m0[31u].z, fma(_1102, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1098));
        float _1485 = fma(_1106, cbModelParam._m0[32u].z, fma(_1102, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1098));
        float _1508 = _1098 + _857;
        float _1509 = _1102 + _858;
        float _1510 = _1106 + _859;
        float _1520 = fma(_1510, cbModelParam._m0[30u].z, fma(_1509, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1508)) - _1477;
        float _1521 = fma(_1510, cbModelParam._m0[31u].z, fma(_1509, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1508)) - _1481;
        float _1522 = fma(_1510, cbModelParam._m0[32u].z, fma(_1509, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1508)) - _1485;
        float _1526 = inversesqrt(dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522)));
        float _1539 = ((_1526 * _1520) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1477 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1540 = ((_1526 * _1521) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1481 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1541 = ((_1526 * _1522) / cbModelParam._m0[35u].z) + ((((((_1485 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        float _1576 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1543.x + (-0.5));
        float _1578 = _1576 * (_1543.y + (-0.5));
        float _1579 = _1576 * (_1543.z + (-0.5));
        float _1586 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1550.x + (-0.5));
        float _1588 = _1586 * (_1550.y + (-0.5));
        float _1589 = _1586 * (_1550.z + (-0.5));
        float _1596 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1557.x + (-0.5));
        float _1598 = _1596 * (_1557.y + (-0.5));
        float _1599 = _1596 * (_1557.z + (-0.5));
        float _1606 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1564.x + (-0.5));
        float _1608 = _1606 * (_1564.y + (-0.5));
        float _1609 = _1606 * (_1564.z + (-0.5));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1613 = _1577 * 0.5;
        float _1614 = _1587 * 0.5;
        float _1615 = _1597 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_857, _858, _859), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4476 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4487 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4498 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_1640 + 1.0))) + _1645) * _1610;
        float _1655 = _1578 * 0.5;
        float _1656 = _1588 * 0.5;
        float _1657 = _1598 * 0.5;
        float _1658 = dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657));
        float _1663 = (_1658 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1658);
        float _1671 = (dot(vec3(_857, _858, _859), vec3(_1663 * _1655, _1663 * _1656, _1663 * _1657)) + 1.0) * 0.5;
        float _4509 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1680 = sqrt(((_1656 * _1656) + (_1655 * _1655)) + (_1657 * _1657)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4520 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _1682 = _1681 * 2.0;
        float _1686 = (1.0 - _1681) / (_1681 + 1.0);
        float _4531 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _1696 = ((((1.0 - _1687) * (_1682 + 2.0)) * exp2(log2(isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_1682 + 1.0))) + _1687) * _1611;
        float _1697 = _1579 * 0.5;
        float _1698 = _1589 * 0.5;
        float _1699 = _1599 * 0.5;
        float _1700 = dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699));
        float _1705 = (_1700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1700);
        float _1713 = (dot(vec3(_857, _858, _859), vec3(_1705 * _1697, _1705 * _1698, _1705 * _1699)) + 1.0) * 0.5;
        float _4542 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1722 = sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699)) / (_1612 + 9.9999997473787516355514526367188e-06);
        float _4553 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _1724 = _1723 * 2.0;
        float _1728 = (1.0 - _1723) / (_1723 + 1.0);
        float _4564 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _1738 = ((((1.0 - _1729) * (_1724 + 2.0)) * exp2(log2(isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_1724 + 1.0))) + _1729) * _1612;
        _1746 = _1579;
        _1747 = _1578;
        _1748 = _1577;
        _1749 = _1589;
        _1750 = _1588;
        _1751 = _1587;
        _1752 = _1599;
        _1753 = _1598;
        _1754 = _1597;
        _1755 = _1612;
        _1756 = _1611;
        _1757 = _1610;
        _1758 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
        _1759 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)));
        _1760 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)));
    }
    else
    {
        _1746 = _1436;
        _1747 = _1436;
        _1748 = _1436;
        _1749 = _1436;
        _1750 = _1436;
        _1751 = _1436;
        _1752 = _1436;
        _1753 = _1436;
        _1754 = _1436;
        _1755 = _1436;
        _1756 = _1436;
        _1757 = _1436;
        _1758 = 0.0;
        _1759 = 0.0;
        _1760 = 0.0;
    }
    float _1770 = (cbModelParam._m0[1u].x * (_1758 - _1448)) + _1448;
    float _1771 = (cbModelParam._m0[1u].x * (_1759 - _1449)) + _1449;
    float _1772 = (cbModelParam._m0[1u].x * (_1760 - _1450)) + _1450;
    float _1793 = fma(_1772, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1770 * cbSceneParam._m0[89u].x));
    float _1796 = fma(_1772, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1770 * cbSceneParam._m0[90u].x));
    float _1799 = fma(_1772, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1770));
    float _1814 = _1042 * 0.5;
    float _1815 = _1043 * 0.5;
    float _1816 = _1044 * 0.5;
    float _1817 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1748, _1751, _1754, _1757));
    float _1820 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1747, _1750, _1753, _1756));
    float _1823 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1746, _1749, _1752, _1755));
    float _1857;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1830 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1435, _1439, _1442, _1445));
        float _1834 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1437, _1440, _1443, _1446));
        float _1838 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1438, _1441, _1444, _1447));
        float _1845 = dot(vec4(cbModelParam._m0[39u]), vec4(_1814, _1815, _1816, 1.0));
        _1857 = dot(vec3(isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1845) ? 0.0 : (isnan(0.0) ? _1845 : max(0.0, _1845))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1857 = 1.0;
    }
    float _1868;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1859 = dot(vec4(cbModelParam._m0[40u]), vec4(_1814, _1815, _1816, 1.0));
        _1868 = dot(vec3(isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1859) ? 0.0 : (isnan(0.0) ? _1859 : max(0.0, _1859))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1868 = 1.0;
    }
    float _1872 = (_1868 * cbModelParam._m0[1u].x) + (_1857 * (1.0 - cbModelParam._m0[1u].x));
    float _1882 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _860);
    float _1883 = isnan(_1882) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1882 : min(cbModelParam._m0[25u].z, _1882));
    float _1965;
    float _1967;
    float _1969;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1932 = fma(_1106, cbModelParam._m0[13u].z, fma(_1102, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1098)) + cbModelParam._m0[13u].w;
        float _1936 = fma(_1106, cbModelParam._m0[14u].z, fma(_1102, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1098)) + cbModelParam._m0[14u].w;
        float _1940 = fma(_1106, cbModelParam._m0[15u].z, fma(_1102, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1098)) + cbModelParam._m0[15u].w;
        float _1943 = fma(_1044, cbModelParam._m0[13u].z, fma(_1043, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1042));
        float _1946 = fma(_1044, cbModelParam._m0[14u].z, fma(_1043, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1042));
        float _1949 = fma(_1044, cbModelParam._m0[15u].z, fma(_1043, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1042));
        float _1977;
        if (_1943 > 0.0)
        {
            _1977 = abs((1.0 - _1932) / _1943);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1932 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1977 = frontier_phi_17_15_ladder;
        }
        float _2149;
        if (_1946 > 0.0)
        {
            _2149 = abs((1.0 - _1936) / _1946);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1936 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2149 = frontier_phi_26_22_ladder;
        }
        float _2444;
        if (_1949 > 0.0)
        {
            _2444 = abs((1.0 - _1940) / _1949);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1940 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2444 = frontier_phi_38_33_ladder;
        }
        float _2446 = isnan(_2149) ? _1977 : (isnan(_1977) ? _2149 : min(_1977, _2149));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1943) + _1932;
        float _2452 = (_2447 * _1946) + _1936;
        float _2453 = (_2447 * _1949) + _1940;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2456 = (-1.0) - _2454;
        float _2458 = _2454 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2453 > _2458) || ((_2453 < _2456) || ((_2452 > _2458) || ((_2452 < _2456) || ((_2451 < _2456) || (_2451 > _2458))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2598 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2453, cbModelParam._m0[9u].z, fma(_2452, cbModelParam._m0[9u].y, _2451 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2453, cbModelParam._m0[10u].z, fma(_2452, cbModelParam._m0[10u].y, _2451 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2453, cbModelParam._m0[11u].z, fma(_2452, cbModelParam._m0[11u].y, _2451 * cbModelParam._m0[11u].x))), _1883);
            frontier_phi_16_38_ladder = _2598.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2598.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2598.x * cbModelParam._m0[1u].y;
        }
        _1965 = frontier_phi_16_38_ladder_2;
        _1967 = frontier_phi_16_38_ladder_1;
        _1969 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1953 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1042, _1043, _1044), _1883);
        _1965 = _1953.x * cbModelParam._m0[1u].y;
        _1967 = _1953.y * cbModelParam._m0[1u].y;
        _1969 = _1953.z * cbModelParam._m0[1u].y;
    }
    float _1973 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _860);
    float _1974 = isnan(_1973) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1973 : min(cbModelParam._m0[25u].w, _1973));
    float _2064;
    float _2066;
    float _2068;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2028 = fma(_1106, cbModelParam._m0[21u].z, fma(_1102, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1098)) + cbModelParam._m0[21u].w;
        float _2032 = fma(_1106, cbModelParam._m0[22u].z, fma(_1102, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1098)) + cbModelParam._m0[22u].w;
        float _2036 = fma(_1106, cbModelParam._m0[23u].z, fma(_1102, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1098)) + cbModelParam._m0[23u].w;
        float _2039 = fma(_1044, cbModelParam._m0[21u].z, fma(_1043, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1042));
        float _2042 = fma(_1044, cbModelParam._m0[22u].z, fma(_1043, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1042));
        float _2045 = fma(_1044, cbModelParam._m0[23u].z, fma(_1043, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1042));
        float _2154;
        if (_2039 > 0.0)
        {
            _2154 = abs((1.0 - _2028) / _2039);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2028 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2154 = frontier_phi_28_24_ladder;
        }
        float _2471;
        if (_2042 > 0.0)
        {
            _2471 = abs((1.0 - _2032) / _2042);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2032 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2471 = frontier_phi_40_35_ladder;
        }
        float _2809;
        if (_2045 > 0.0)
        {
            _2809 = abs((1.0 - _2036) / _2045);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2036 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2809 = frontier_phi_50_47_ladder;
        }
        float _2811 = isnan(_2471) ? _2154 : (isnan(_2154) ? _2471 : min(_2154, _2471));
        float _2812 = isnan(_2809) ? _2811 : (isnan(_2811) ? _2809 : min(_2811, _2809));
        float _2816 = (_2812 * _2039) + _2028;
        float _2817 = (_2812 * _2042) + _2032;
        float _2818 = (_2812 * _2045) + _2036;
        float _2819 = _2812 * 9.9999997473787516355514526367188e-05;
        float _2820 = (-1.0) - _2819;
        float _2822 = _2819 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2818 > _2822) || ((_2818 < _2820) || ((_2817 > _2822) || ((_2817 < _2820) || ((_2816 < _2820) || (_2816 > _2822))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2940 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2818, cbModelParam._m0[17u].z, fma(_2817, cbModelParam._m0[17u].y, _2816 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2818, cbModelParam._m0[18u].z, fma(_2817, cbModelParam._m0[18u].y, _2816 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2818, cbModelParam._m0[19u].z, fma(_2817, cbModelParam._m0[19u].y, _2816 * cbModelParam._m0[19u].x))), _1974);
            frontier_phi_25_50_ladder = _2940.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2940.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2940.x * cbModelParam._m0[1u].z;
        }
        _2064 = frontier_phi_25_50_ladder_2;
        _2066 = frontier_phi_25_50_ladder_1;
        _2068 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2048 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1042, _1043, _1044), _1974);
        _2064 = _2048.x * cbModelParam._m0[1u].z;
        _2066 = _2048.y * cbModelParam._m0[1u].z;
        _2068 = _2048.z * cbModelParam._m0[1u].z;
    }
    float _2081 = (((_1069 * _1018) + _1070) * _1034) * ((cbModelParam._m0[1u].w * (_2064 - _1965)) + _1965);
    float _2083 = (((_1069 * _1020) + _1070) * _1034) * ((cbModelParam._m0[1u].w * (_2066 - _1967)) + _1967);
    float _2085 = (((_1069 * _1021) + _1070) * _1034) * ((cbModelParam._m0[1u].w * (_2068 - _1969)) + _1969);
    float _2088 = fma(_2085, cbSceneParam._m0[89u].z, fma(_2083, cbSceneParam._m0[89u].y, _2081 * cbSceneParam._m0[89u].x));
    float _2091 = fma(_2085, cbSceneParam._m0[90u].z, fma(_2083, cbSceneParam._m0[90u].y, _2081 * cbSceneParam._m0[90u].x));
    float _2094 = fma(_2085, cbSceneParam._m0[91u].z, fma(_2083, cbSceneParam._m0[91u].y, _2081 * cbSceneParam._m0[91u].x));
    float _2128 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2132 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2136 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2140 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2141 = _2128 / _2140;
    float _2142 = _2132 / _2140;
    float _2143 = _2136 / _2140;
    float _2290;
    float _2291;
    float _2292;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2170 = ((uint(_2143 > cbSceneParam._m0[59u].y) + uint(_2143 > cbSceneParam._m0[59u].x)) + uint(_2143 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2171 = _2170 + 43u;
        uint _2179 = _2170 + 44u;
        uint _2187 = _2170 + 45u;
        uint _2195 = _2170 + 46u;
        float _2206 = fma(_2140, cbSceneParam._m0[_2171].w, fma(_2136, cbSceneParam._m0[_2171].z, fma(_2132, cbSceneParam._m0[_2171].y, _2128 * cbSceneParam._m0[_2171].x)));
        float _2210 = fma(_2140, cbSceneParam._m0[_2179].w, fma(_2136, cbSceneParam._m0[_2179].z, fma(_2132, cbSceneParam._m0[_2179].y, _2128 * cbSceneParam._m0[_2179].x)));
        float _2218 = fma(_2140, cbSceneParam._m0[_2195].w, fma(_2136, cbSceneParam._m0[_2195].z, fma(_2132, cbSceneParam._m0[_2195].y, _2128 * cbSceneParam._m0[_2195].x)));
        float _2223 = cbSceneParam._m0[33u].z * _2218;
        float _2225 = cbSceneParam._m0[33u].w * _2218;
        float _2228 = fma(_2140, cbSceneParam._m0[_2187].w, fma(_2136, cbSceneParam._m0[_2187].z, fma(_2132, cbSceneParam._m0[_2187].y, _2128 * cbSceneParam._m0[_2187].x))) / _2218;
        float _2276 = (cbSceneParam._m0[33u].x - sqrt(((_2142 * _2142) + (_2141 * _2141)) + (_2143 * _2143))) * cbSceneParam._m0[33u].y;
        float _4690 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2283 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2223 + _2206) / _2218, (_2225 + _2210) / _2218), _2228), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2225 + _2206) / _2218, (_2210 - _2223) / _2218), _2228), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2206 - _2223) / _2218, (_2210 - _2225) / _2218), _2228), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2206 - _2225) / _2218, (_2223 + _2210) / _2218), _2228), 0.0)).x), vec4(0.25)));
        _2290 = 1.0 - (_2283 * cbSceneParam._m0[34u].x);
        _2291 = 1.0 - (_2283 * cbSceneParam._m0[34u].y);
        _2292 = 1.0 - (_2283 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2290 = 1.0;
        _2291 = 1.0;
        _2292 = 1.0;
    }
    float _2356;
    float _2358;
    float _2360;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2344 = fma(_2140, cbSceneParam._m0[63u].w, fma(_2136, cbSceneParam._m0[63u].z, fma(_2132, cbSceneParam._m0[63u].y, _2128 * cbSceneParam._m0[63u].x)));
        float _2345 = fma(_2140, cbSceneParam._m0[60u].w, fma(_2136, cbSceneParam._m0[60u].z, fma(_2132, cbSceneParam._m0[60u].y, _2128 * cbSceneParam._m0[60u].x))) / _2344;
        float _2346 = fma(_2140, cbSceneParam._m0[61u].w, fma(_2136, cbSceneParam._m0[61u].z, fma(_2132, cbSceneParam._m0[61u].y, _2128 * cbSceneParam._m0[61u].x))) / _2344;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2345 >= cbSceneParam._m0[64u].x) && (_2346 >= cbSceneParam._m0[64u].y)) && (_2345 <= cbSceneParam._m0[64u].z)) && (_2346 <= cbSceneParam._m0[64u].w))
        {
            float _2484 = fma(_2140, cbSceneParam._m0[62u].w, fma(_2136, cbSceneParam._m0[62u].z, fma(_2132, cbSceneParam._m0[62u].y, _2128 * cbSceneParam._m0[62u].x))) / _2344;
            float _2488 = isnan(cbSceneParam._m0[41u].w) ? _2484 : (isnan(_2484) ? cbSceneParam._m0[41u].w : max(_2484, cbSceneParam._m0[41u].w));
            float _2531 = (cbSceneParam._m0[33u].x - sqrt(((_2142 * _2142) + (_2141 * _2141)) + (_2143 * _2143))) * cbSceneParam._m0[33u].y;
            float _4706 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
            float _2538 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2345, cbSceneParam._m0[33u].w + _2346), _2488), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2345, _2346 - cbSceneParam._m0[33u].z), _2488), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2345 - cbSceneParam._m0[33u].z, _2346 - cbSceneParam._m0[33u].w), _2488), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2345 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2346), _2488), 0.0)).x), vec4(0.25)));
            float _2542 = 1.0 - (_2538 * cbSceneParam._m0[34u].x);
            float _2543 = 1.0 - (_2538 * cbSceneParam._m0[34u].y);
            float _2544 = 1.0 - (_2538 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2544) ? _2292 : (isnan(_2292) ? _2544 : min(_2292, _2544));
            frontier_phi_37_36_ladder_1 = isnan(_2543) ? _2291 : (isnan(_2291) ? _2543 : min(_2291, _2543));
            frontier_phi_37_36_ladder_2 = isnan(_2542) ? _2290 : (isnan(_2290) ? _2542 : min(_2290, _2542));
        }
        else
        {
            frontier_phi_37_36_ladder = _2292;
            frontier_phi_37_36_ladder_1 = _2291;
            frontier_phi_37_36_ladder_2 = _2290;
        }
        _2356 = frontier_phi_37_36_ladder_2;
        _2358 = frontier_phi_37_36_ladder_1;
        _2360 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2356 = _2290;
        _2358 = _2291;
        _2360 = _2292;
    }
    uvec4 _2365 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2367 = _2365.x * 14u;
    uint _2368 = _2367 + 13u;
    float _2375 = _1034 + (-1.0);
    float _2380 = (cbLight._m0[_2368].x * _2375) + 1.0;
    float _2381 = (cbLight._m0[_2368].y * _2375) + 1.0;
    float _2382 = (cbLight._m0[_2368].z * _2375) + 1.0;
    float _2383 = (cbLight._m0[_2368].w * _2375) + 1.0;
    uint _2384 = _2367 + 5u;
    float _2390 = isnan(1.0) ? _2381 : (isnan(_2381) ? 1.0 : min(_2381, 1.0));
    uint _2394 = _2367 + 4u;
    float _2403 = isnan(1.0) ? _2380 : (isnan(_2380) ? 1.0 : min(_2380, 1.0));
    uint _2407 = _2367 | 1u;
    float _2418 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_857, _858, _859));
    float _2421 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_857, _858, _859));
    float _4742 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _4753 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2426 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * 0.3183098733425140380859375;
    float _2428 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * 0.3183098733425140380859375;
    float _2435 = ((cbLight._m0[_2384].x * _2390) * _2428) + (((cbLight._m0[_2394].x * _2356) * _2403) * _2426);
    float _2436 = ((_2390 * cbLight._m0[_2384].y) * _2428) + (((cbLight._m0[_2394].y * _2358) * _2403) * _2426);
    float _2437 = ((_2390 * cbLight._m0[_2384].z) * _2428) + (((cbLight._m0[_2394].z * _2360) * _2403) * _2426);
    uvec4 _2441 = floatBitsToUint(cbLight._m0[_2367 + 12u]);
    bool _2443 = _2441.x == 0u;
    float _2545;
    float _2547;
    float _2549;
    if (_2443)
    {
        _2545 = _2435;
        _2547 = _2436;
        _2549 = _2437;
    }
    else
    {
        uint _2553 = _2367 + 6u;
        float _2569 = (dot(vec3(cbLight._m0[_2367 + 2u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2570 = _2569 * _2569;
        float _4764 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2571 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2572 = isnan(1.0) ? _2382 : (isnan(_2382) ? 1.0 : min(_2382, 1.0));
        _2545 = (((cbLight._m0[_2553].x * 0.3183098733425140380859375) * _2571) * _2572) + _2435;
        _2547 = (((cbLight._m0[_2553].y * 0.3183098733425140380859375) * _2571) * _2572) + _2436;
        _2549 = (((cbLight._m0[_2553].z * 0.3183098733425140380859375) * _2571) * _2572) + _2437;
    }
    bool _2552 = _2441.y == 0u;
    float _2607;
    float _2609;
    float _2611;
    if (_2552)
    {
        _2607 = _2545;
        _2609 = _2547;
        _2611 = _2549;
    }
    else
    {
        uint _2780 = _2367 + 7u;
        float _2796 = (dot(vec3(cbLight._m0[_2367 + 3u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2797 = _2796 * _2796;
        float _4780 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2798 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2799 = isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0));
        _2607 = (((cbLight._m0[_2780].x * 0.3183098733425140380859375) * _2798) * _2799) + _2545;
        _2609 = (((cbLight._m0[_2780].y * 0.3183098733425140380859375) * _2798) * _2799) + _2547;
        _2611 = (((cbLight._m0[_2780].z * 0.3183098733425140380859375) * _2798) * _2799) + _2549;
    }
    uint _2614 = _2367 + 8u;
    float _2627 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2367].w)) * _860) * 0.949999988079071044921875);
    float _2628 = _2627 * _2627;
    float _2629 = cbLight._m0[_2367].x + _936;
    float _2630 = cbLight._m0[_2367].y + _937;
    float _2631 = cbLight._m0[_2367].z + _938;
    float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
    float _2636 = _2635 * _2629;
    float _2637 = _2635 * _2630;
    float _2638 = _2635 * _2631;
    float _2639 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2367].xyz));
    float _4796 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
    float _4807 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _2643 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
    float _2644 = dot(vec3(_857, _858, _859), vec3(_2636, _2637, _2638));
    float _4818 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2647 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
    float _2648 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_2636, _2637, _2638));
    float _4829 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2652 = _2628 * _2628;
    float _2656 = ((_2647 * _2647) * (_2652 + (-1.0))) + 1.0;
    float _2664 = exp2(log2(1.0 - (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) * 5.0);
    float _2665 = 0.959999978542327880859375 - _1015;
    float _2667 = 0.959999978542327880859375 - _1016;
    float _2668 = 0.959999978542327880859375 - _1017;
    float _2675 = 1.0 - _2628;
    float _2686 = (0.5 / (((_2643 * ((_2642 * _2675) + _2628)) + 9.9999999392252902907785028219223e-09) + (((_2643 * _2675) + _2628) * _2642))) * _2642;
    float _4840 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2688 = (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2652 / ((_2656 * _2656) * 3.141590118408203125));
    uint _2702 = _2367 + 9u;
    float _2713 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _860) * 0.949999988079071044921875);
    float _2714 = _2713 * _2713;
    float _2715 = cbLight._m0[_2407].x + _936;
    float _2716 = cbLight._m0[_2407].y + _937;
    float _2717 = cbLight._m0[_2407].z + _938;
    float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
    float _2722 = _2721 * _2715;
    float _2723 = _2721 * _2716;
    float _2724 = _2721 * _2717;
    float _2725 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2407].xyz));
    float _4851 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2728 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
    float _2729 = dot(vec3(_857, _858, _859), vec3(_2722, _2723, _2724));
    float _4862 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2732 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
    float _2733 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2722, _2723, _2724));
    float _4873 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2737 = _2714 * _2714;
    float _2741 = ((_2732 * _2732) * (_2737 + (-1.0))) + 1.0;
    float _2748 = exp2(log2(1.0 - (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) * 5.0);
    float _2755 = 1.0 - _2714;
    float _2765 = (0.5 / (((_2643 * ((_2728 * _2755) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2643 * _2755) + _2714) * _2728))) * _2728;
    float _4884 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
    float _2767 = (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2737 / ((_2741 * _2741) * 3.141590118408203125));
    float _2777 = (((((_2748 * _2665) + _1018) * cbLight._m0[_2702].x) * _2767) * _2390) + ((((cbLight._m0[_2614].x * _2356) * ((_2664 * _2665) + _1018)) * _2688) * _2403);
    float _2778 = (((((_2748 * _2667) + _1020) * cbLight._m0[_2702].y) * _2767) * _2390) + ((((cbLight._m0[_2614].y * _2358) * ((_2664 * _2667) + _1020)) * _2688) * _2403);
    float _2779 = (((((_2748 * _2668) + _1021) * cbLight._m0[_2702].z) * _2767) * _2390) + ((((cbLight._m0[_2614].z * _2360) * ((_2664 * _2668) + _1021)) * _2688) * _2403);
    float _2835;
    float _2837;
    float _2839;
    if (_2443)
    {
        _2835 = _2777;
        _2837 = _2778;
        _2839 = _2779;
    }
    else
    {
        uint _2841 = _2367 + 2u;
        uint _2845 = _2367 + 10u;
        float _2859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2841].w)) * _860) * 0.949999988079071044921875);
        float _2860 = _2859 * _2859;
        float _2861 = cbLight._m0[_2841].x + _936;
        float _2862 = cbLight._m0[_2841].y + _937;
        float _2863 = cbLight._m0[_2841].z + _938;
        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
        float _2868 = _2867 * _2861;
        float _2869 = _2867 * _2862;
        float _2870 = _2867 * _2863;
        float _2871 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2841].xyz));
        float _4895 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2874 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2875 = dot(vec3(_857, _858, _859), vec3(_2868, _2869, _2870));
        float _4906 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2878 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
        float _2879 = dot(vec3(cbLight._m0[_2841].xyz), vec3(_2868, _2869, _2870));
        float _4917 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        float _2883 = _2860 * _2860;
        float _2887 = ((_2878 * _2878) * (_2883 + (-1.0))) + 1.0;
        float _2894 = exp2(log2(1.0 - (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) * 5.0);
        float _2901 = 1.0 - _2860;
        float _2911 = (0.5 / (((_2643 * ((_2874 * _2901) + _2860)) + 9.9999999392252902907785028219223e-09) + (((_2643 * _2901) + _2860) * _2874))) * _2874;
        float _4928 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2913 = (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2883 / ((_2887 * _2887) * 3.141590118408203125));
        float _2914 = isnan(1.0) ? _2382 : (isnan(_2382) ? 1.0 : min(_2382, 1.0));
        _2835 = (((((_2894 * _2665) + _1018) * cbLight._m0[_2845].x) * _2913) * _2914) + _2777;
        _2837 = (((((_2894 * _2667) + _1020) * cbLight._m0[_2845].y) * _2913) * _2914) + _2778;
        _2839 = (((((_2894 * _2668) + _1021) * cbLight._m0[_2845].z) * _2913) * _2914) + _2779;
    }
    float _2945;
    float _2947;
    float _2949;
    if (_2552)
    {
        _2945 = _2835;
        _2947 = _2837;
        _2949 = _2839;
    }
    else
    {
        uint _2956 = _2367 + 3u;
        uint _2960 = _2367 + 11u;
        float _2974 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2956].w)) * _860) * 0.949999988079071044921875);
        float _2975 = _2974 * _2974;
        float _2976 = cbLight._m0[_2956].x + _936;
        float _2977 = cbLight._m0[_2956].y + _937;
        float _2978 = cbLight._m0[_2956].z + _938;
        float _2982 = inversesqrt(dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978)));
        float _2983 = _2982 * _2976;
        float _2984 = _2982 * _2977;
        float _2985 = _2982 * _2978;
        float _2986 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2956].xyz));
        float _4944 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
        float _2989 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
        float _2990 = dot(vec3(_857, _858, _859), vec3(_2983, _2984, _2985));
        float _4955 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        float _2993 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
        float _2994 = dot(vec3(cbLight._m0[_2956].xyz), vec3(_2983, _2984, _2985));
        float _4966 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
        float _2998 = _2975 * _2975;
        float _3002 = ((_2993 * _2993) * (_2998 + (-1.0))) + 1.0;
        float _3009 = exp2(log2(1.0 - (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) * 5.0);
        float _3016 = 1.0 - _2975;
        float _3026 = (0.5 / (((_2643 * ((_2989 * _3016) + _2975)) + 9.9999999392252902907785028219223e-09) + (((_2643 * _3016) + _2975) * _2989))) * _2989;
        float _4977 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
        float _3028 = (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0))) * (_2998 / ((_3002 * _3002) * 3.141590118408203125));
        float _3029 = isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0));
        _2945 = (((((_3009 * _2665) + _1018) * cbLight._m0[_2960].x) * _3028) * _3029) + _2835;
        _2947 = (((((_3009 * _2667) + _1020) * cbLight._m0[_2960].y) * _3028) * _3029) + _2837;
        _2949 = (((((_3009 * _2668) + _1021) * cbLight._m0[_2960].z) * _3028) * _3029) + _2839;
    }
    float _3095;
    float _3097;
    float _3099;
    float _3101;
    float _3103;
    float _3105;
    if (_2365.y == 0u)
    {
        uvec4 _3050 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3051 = _3050.x;
        uint _3062 = uint((float(_3050.y) * floor(float(uint(cbSceneParam._m0[85u].y * _957) / _3051))) + floor(float(uint(cbSceneParam._m0[85u].x * _956) / _3051)));
        float _3072 = (log2(_2143 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3073 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
        uint _3076 = uint(isnan(14.0) ? _3073 : (isnan(_3073) ? 14.0 : min(_3073, 14.0)));
        uvec4 _3081 = texelFetch(g_lightClusterGridBuffer, int(((_3076 << 2u) + (_3062 << 6u)) >> 2u));
        uint _3082 = _3081.x;
        uint _3083 = _3050.z;
        float _3162;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        if (((((1u << ((_3083 >> 4u) & 15u)) + 4294967295u) & _3082) == 0u) || ((_3083 & 240u) == 0u))
        {
            _3162 = 0.0;
            _3164 = 0.0;
            _3166 = 0.0;
            _3168 = 0.0;
            _3170 = 0.0;
            _3172 = 0.0;
        }
        else
        {
            float _3163;
            float _3165;
            float _3167;
            float _3169;
            float _3171;
            float _3173;
            float _3315 = 0.0;
            float _3316 = 0.0;
            float _3317 = 0.0;
            float _3318 = 0.0;
            float _3319 = 0.0;
            float _3320 = 0.0;
            uint _3321 = 0u;
            uint _3330;
            bool _3331;
            for (;;)
            {
                _3330 = texelFetch(g_lightClassification, int((((_3076 << 5u) + (_3062 << 9u)) + (_3321 << 2u)) >> 2u)).x;
                _3331 = _3330 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3331)
                {
                    frontier_phi_71_pred = _3320;
                    frontier_phi_71_pred_1 = _3319;
                    frontier_phi_71_pred_2 = _3318;
                    frontier_phi_71_pred_3 = _3317;
                    frontier_phi_71_pred_4 = _3316;
                    frontier_phi_71_pred_5 = _3315;
                }
                else
                {
                    float _3460;
                    float _3461;
                    float _3462;
                    float _3463;
                    float _3464;
                    float _3465;
                    uint _3466;
                    _3460 = _3315;
                    _3461 = _3316;
                    _3462 = _3317;
                    _3463 = _3318;
                    _3464 = _3319;
                    _3465 = _3320;
                    _3466 = _3330;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    for (;;)
                    {
                        uint _3470 = uint(findLSB(_3466)) + (_3321 << 5u);
                        uint _3467 = (_3466 + 4294967295u) & _3466;
                        uint _3472 = _3470 * 48u;
                        vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3472)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 3u)).x));
                        uint _3492 = (_3470 * 48u) + 4u;
                        vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3492)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 3u)).x));
                        uint _3511 = (_3470 * 48u) + 8u;
                        vec3 _3522 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3511)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 2u)).x));
                        float _3526 = _3486.x - _2141;
                        float _3527 = _3486.y - _2142;
                        float _3528 = _3486.z - _2143;
                        float _3529 = dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528));
                        float _3532 = inversesqrt(_3529);
                        float _3533 = _3532 * _3526;
                        float _3534 = _3532 * _3527;
                        float _3535 = _3532 * _3528;
                        float _3536 = dot(vec3(_975, _978, _981), vec3(_3533, _3534, _3535));
                        float _3541 = 1.0 - (_3529 * _3486.w);
                        float _5003 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3542 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                        float _3543 = sqrt(_3529) * _3505.w;
                        float _3546 = 1.39999997615814208984375 / (_3543 + 1.39999997615814208984375);
                        float _3547 = _3546 * _3546;
                        float _3550 = ((1.0 - _3547) * _3536) + _3547;
                        float _3553 = _3543 * _3543;
                        float _3557 = ((isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0))) * _3542) / ((_3553 * 0.699999988079071044921875) + 1.0);
                        float _3561 = (-0.0) - _2141;
                        float _3562 = (-0.0) - _2142;
                        float _3563 = (-0.0) - _2143;
                        float _3567 = inversesqrt(dot(vec3(_3561, _3562, _3563), vec3(_3561, _3562, _3563)));
                        float _3568 = _3567 * _3561;
                        float _3569 = _3567 * _3562;
                        float _3570 = _3567 * _3563;
                        float _3577 = exp2(log2(1.0 / ((_3553 * 3.5) + 5.0)) * 0.25);
                        float _3578 = 1.0 - _1050;
                        float _3585 = sqrt(1.0 - ((1.0 - (_3578 * _3578)) * (1.0 - (_3577 * _3577))));
                        float _3586 = _3585 * _3585;
                        float _3587 = _3586 * _3586;
                        float _3588 = _3568 + _3533;
                        float _3589 = _3569 + _3534;
                        float _3590 = _3570 + _3535;
                        float _3594 = inversesqrt(dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590)));
                        float _3598 = dot(vec3(_975, _978, _981), vec3(_3568, _3569, _3570));
                        float _5019 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3601 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                        float _3602 = dot(vec3(_975, _978, _981), vec3(_3594 * _3588, _3594 * _3589, _3594 * _3590));
                        float _5030 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                        float _3605 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                        float _3609 = ((_3605 * _3605) * (_3587 + (-1.0))) + 1.0;
                        float _3610 = _3546 * _3586;
                        float _3611 = _3610 * _3610;
                        float _3614 = ((1.0 - _3611) * _3536) + _3611;
                        float _5041 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                        float _3615 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                        float _3616 = 1.0 - _3586;
                        float _3626 = (0.5 / (((_3615 * ((_3601 * _3616) + _3586)) + 9.9999999392252902907785028219223e-09) + (((_3615 * _3616) + _3586) * _3601))) * _3615;
                        float _5052 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                        float _3637 = (((_3587 * 3.1415927410125732421875) * (isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0)))) / ((_3609 * _3609) * ((_3553 * 2.1991131305694580078125) + 3.141590118408203125))) * _3542;
                        _3390 = (_3557 * _3505.x) + _3463;
                        _3391 = (_3557 * _3505.y) + _3464;
                        _3392 = (_3557 * _3505.z) + _3465;
                        _3387 = (_3637 * _3522.x) + _3460;
                        _3388 = (_3637 * _3522.y) + _3461;
                        _3389 = (_3637 * _3522.z) + _3462;
                        if (_3467 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3460 = _3387;
                            _3461 = _3388;
                            _3462 = _3389;
                            _3463 = _3390;
                            _3464 = _3391;
                            _3465 = _3392;
                            _3466 = _3467;
                        }
                    }
                    frontier_phi_71_pred = _3392;
                    frontier_phi_71_pred_1 = _3391;
                    frontier_phi_71_pred_2 = _3390;
                    frontier_phi_71_pred_3 = _3389;
                    frontier_phi_71_pred_4 = _3388;
                    frontier_phi_71_pred_5 = _3387;
                }
                _3173 = frontier_phi_71_pred;
                _3171 = frontier_phi_71_pred_1;
                _3169 = frontier_phi_71_pred_2;
                _3167 = frontier_phi_71_pred_3;
                _3165 = frontier_phi_71_pred_4;
                _3163 = frontier_phi_71_pred_5;
                uint _3322 = _3321 + 1u;
                if (_3322 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3315 = _3163;
                    _3316 = _3165;
                    _3317 = _3167;
                    _3318 = _3169;
                    _3319 = _3171;
                    _3320 = _3173;
                    _3321 = _3322;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3162 = _3163;
            _3164 = _3165;
            _3166 = _3167;
            _3168 = _3169;
            _3170 = _3171;
            _3172 = _3173;
        }
        uvec4 _3176 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3177 = _3176.z;
        uint _3179 = (_3177 >> 8u) & 15u;
        float _3283;
        float _3285;
        float _3287;
        float _3289;
        float _3291;
        float _3293;
        if (((4294967295u << _3179) & _3082) == 0u)
        {
            _3283 = _3162;
            _3285 = _3164;
            _3287 = _3166;
            _3289 = _3168;
            _3291 = _3170;
            _3293 = _3172;
        }
        else
        {
            float _3308 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
            float _3309 = _3308 * _2141;
            float _3310 = _3308 * _2142;
            float _3311 = _3308 * _2143;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3179 < ((_3177 >> 12u) & 15u))
            {
                float _3284;
                float _3286;
                float _3288;
                float _3290;
                float _3292;
                float _3294;
                float _3443 = _3162;
                float _3444 = _3164;
                float _3445 = _3166;
                float _3446 = _3168;
                float _3447 = _3170;
                float _3448 = _3172;
                uint _3449 = _3179;
                uint _3458;
                bool _3459;
                for (;;)
                {
                    _3458 = texelFetch(g_lightClassification, int((((_3076 << 5u) + (_3062 << 9u)) + (_3449 << 2u)) >> 2u)).x;
                    _3459 = _3458 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3459)
                    {
                        frontier_phi_82_pred = _3448;
                        frontier_phi_82_pred_1 = _3447;
                        frontier_phi_82_pred_2 = _3446;
                        frontier_phi_82_pred_3 = _3445;
                        frontier_phi_82_pred_4 = _3444;
                        frontier_phi_82_pred_5 = _3443;
                    }
                    else
                    {
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3944;
                        float _3945;
                        float _3946;
                        float _3947;
                        float _3948;
                        float _3949;
                        float _3664 = _3443;
                        float _3665 = _3444;
                        float _3666 = _3445;
                        float _3667 = _3446;
                        float _3668 = _3447;
                        float _3669 = _3448;
                        uint _3670 = _3458;
                        uint _3671;
                        vec4 _3696;
                        float _3697;
                        vec4 _3712;
                        vec3 _3724;
                        vec4 _3739;
                        vec4 _3754;
                        float _3800;
                        bool _3801;
                        for (;;)
                        {
                            uint _3681 = ((_3449 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3670));
                            _3671 = (_3670 + 4294967295u) & _3670;
                            uint _3683 = _3681 * 40u;
                            _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            _3697 = _3696.w;
                            uint _3699 = (_3681 * 40u) + 4u;
                            _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3714 = (_3681 * 40u) + 8u;
                            _3724 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x));
                            uint _3726 = (_3681 * 40u) + 16u;
                            _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            uint _3741 = (_3681 * 40u) + 20u;
                            _3754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 3u)).x));
                            uint _3756 = (_3681 * 40u) + 24u;
                            vec4 _3769 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 3u)).x));
                            uint _3775 = (_3681 * 40u) + 28u;
                            vec4 _3788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 3u)).x));
                            _3800 = fma(_2143, _3788.z, fma(_2142, _3788.y, _3788.x * _2141)) + _3788.w;
                            _3801 = !((fma(_2143, _3769.z, fma(_2142, _3769.y, _3769.x * _2141)) + _3769.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3801)
                            {
                                float _3828 = _3696.x - _2141;
                                float _3829 = _3696.y - _2142;
                                float _3830 = _3696.z - _2143;
                                float _3831 = dot(vec3(_3828, _3829, _3830), vec3(_3828, _3829, _3830));
                                float _3834 = inversesqrt(_3831);
                                float _3835 = _3834 * _3828;
                                float _3836 = _3834 * _3829;
                                float _3837 = _3834 * _3830;
                                float _3841 = 1.0 - (_3831 / (_3697 * _3697));
                                float _5063 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3842 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                                float _3846 = sqrt(_3831) * _3712.w;
                                float _3848 = 1.39999997615814208984375 / (_3846 + 1.39999997615814208984375);
                                float _3849 = _3848 * _3848;
                                float _3852 = ((1.0 - _3849) * dot(vec3(_3835, _3836, _3837), vec3(_975, _978, _981))) + _3849;
                                float _3855 = _3846 * _3846;
                                float _3859 = (fma(_2143, _3739.z, fma(_2142, _3739.y, _3739.x * _2141)) + _3739.w) / _3800;
                                float _3860 = (fma(_2143, _3754.z, fma(_2142, _3754.y, _3754.x * _2141)) + _3754.w) / _3800;
                                float _3864 = 1.0 - dot(vec2(_3859, _3860), vec2(_3859, _3860));
                                float _5079 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3865 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                                float _3866 = _3865 * (((isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0))) * _3842) / ((_3855 * 0.699999988079071044921875) + 1.0));
                                float _3878 = exp2(log2(1.0 / ((_3855 * 3.5) + 5.0)) * 0.25);
                                float _3879 = 1.0 - _1050;
                                float _3886 = sqrt(1.0 - ((1.0 - (_3879 * _3879)) * (1.0 - (_3878 * _3878))));
                                float _3887 = _3886 * _3886;
                                float _3888 = _3887 * _3887;
                                float _3889 = _3835 - _3309;
                                float _3890 = _3836 - _3310;
                                float _3891 = _3837 - _3311;
                                float _3895 = inversesqrt(dot(vec3(_3889, _3890, _3891), vec3(_3889, _3890, _3891)));
                                float _3899 = dot(vec3(_975, _978, _981), vec3((-0.0) - _3309, (-0.0) - _3310, (-0.0) - _3311));
                                float _5090 = isnan(0.0) ? _3899 : (isnan(_3899) ? 0.0 : max(_3899, 0.0));
                                float _3902 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                                float _3903 = dot(vec3(_975, _978, _981), vec3(_3895 * _3889, _3895 * _3890, _3895 * _3891));
                                float _5101 = isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0));
                                float _3906 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
                                float _3910 = ((_3906 * _3906) * (_3888 + (-1.0))) + 1.0;
                                float _3911 = _3848 * _3887;
                                float _3912 = _3911 * _3911;
                                float _3918 = ((1.0 - _3912) * dot(vec3(_975, _978, _981), vec3(_3835, _3836, _3837))) + _3912;
                                float _5112 = isnan(0.0) ? _3918 : (isnan(_3918) ? 0.0 : max(_3918, 0.0));
                                float _3919 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
                                float _3920 = 1.0 - _3887;
                                float _3930 = (0.5 / (((_3919 * ((_3902 * _3920) + _3887)) + 9.9999999392252902907785028219223e-09) + (((_3919 * _3920) + _3887) * _3902))) * _3919;
                                float _5123 = isnan(0.0) ? _3930 : (isnan(_3930) ? 0.0 : max(_3930, 0.0));
                                float _3940 = (_3865 * _3842) * (((_3888 * 3.1415927410125732421875) * (isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0)))) / ((_3910 * _3910) * ((_3855 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3866 * _3712.z;
                                frontier_phi_88_pred_1 = _3866 * _3712.y;
                                frontier_phi_88_pred_2 = _3866 * _3712.x;
                                frontier_phi_88_pred_3 = _3940 * _3724.z;
                                frontier_phi_88_pred_4 = _3940 * _3724.y;
                                frontier_phi_88_pred_5 = _3940 * _3724.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3949 = frontier_phi_88_pred;
                            _3948 = frontier_phi_88_pred_1;
                            _3947 = frontier_phi_88_pred_2;
                            _3946 = frontier_phi_88_pred_3;
                            _3945 = frontier_phi_88_pred_4;
                            _3944 = frontier_phi_88_pred_5;
                            _3654 = _3947 + _3667;
                            _3655 = _3948 + _3668;
                            _3656 = _3949 + _3669;
                            _3651 = _3944 + _3664;
                            _3652 = _3945 + _3665;
                            _3653 = _3946 + _3666;
                            if (_3671 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3664 = _3651;
                                _3665 = _3652;
                                _3666 = _3653;
                                _3667 = _3654;
                                _3668 = _3655;
                                _3669 = _3656;
                                _3670 = _3671;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3656;
                        frontier_phi_82_pred_1 = _3655;
                        frontier_phi_82_pred_2 = _3654;
                        frontier_phi_82_pred_3 = _3653;
                        frontier_phi_82_pred_4 = _3652;
                        frontier_phi_82_pred_5 = _3651;
                    }
                    _3294 = frontier_phi_82_pred;
                    _3292 = frontier_phi_82_pred_1;
                    _3290 = frontier_phi_82_pred_2;
                    _3288 = frontier_phi_82_pred_3;
                    _3286 = frontier_phi_82_pred_4;
                    _3284 = frontier_phi_82_pred_5;
                    uint _3450 = _3449 + 1u;
                    if (_3450 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3443 = _3284;
                        _3444 = _3286;
                        _3445 = _3288;
                        _3446 = _3290;
                        _3447 = _3292;
                        _3448 = _3294;
                        _3449 = _3450;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3290;
                frontier_phi_63_64_ladder_1 = _3294;
                frontier_phi_63_64_ladder_2 = _3292;
                frontier_phi_63_64_ladder_3 = _3288;
                frontier_phi_63_64_ladder_4 = _3286;
                frontier_phi_63_64_ladder_5 = _3284;
            }
            else
            {
                frontier_phi_63_64_ladder = _3168;
                frontier_phi_63_64_ladder_1 = _3172;
                frontier_phi_63_64_ladder_2 = _3170;
                frontier_phi_63_64_ladder_3 = _3166;
                frontier_phi_63_64_ladder_4 = _3164;
                frontier_phi_63_64_ladder_5 = _3162;
            }
            _3283 = frontier_phi_63_64_ladder_5;
            _3285 = frontier_phi_63_64_ladder_4;
            _3287 = frontier_phi_63_64_ladder_3;
            _3289 = frontier_phi_63_64_ladder;
            _3291 = frontier_phi_63_64_ladder_2;
            _3293 = frontier_phi_63_64_ladder_1;
        }
        float _3298 = isnan(1.0) ? _1034 : (isnan(_1034) ? 1.0 : min(_1034, 1.0));
        _3095 = (_3298 * _3289) + _2607;
        _3097 = (_3298 * _3291) + _2609;
        _3099 = (_3298 * _3293) + _2611;
        _3101 = ((_3283 * _1018) * _3298) + _2945;
        _3103 = ((_3285 * _1020) * _3298) + _2947;
        _3105 = ((_3287 * _1021) * _3298) + _2949;
    }
    else
    {
        _3095 = _2607;
        _3097 = _2609;
        _3099 = _2611;
        _3101 = _2945;
        _3103 = _2947;
        _3105 = _2949;
    }
    float _5139 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _5150 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _5161 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _3122 = ((isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0))) * (_3095 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1034))) + ((_3101 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1872)) * cbPerFrame._m0[3u].x);
    float _3123 = ((isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0))) * (_3097 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1034))) + ((_3103 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1872)) * cbPerFrame._m0[3u].x);
    float _3124 = ((isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0))) * (_3099 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1034))) + ((_3105 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1872)) * cbPerFrame._m0[3u].x);
    uint _3125 = _289 + 6u;
    float _3133 = _956 / cbSceneParam._m0[86u].x;
    float _3134 = _957 / cbSceneParam._m0[86u].y;
    vec4 _3148 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3133, _3134, (log2((isnan(cbSceneParam._m0[77u].w) ? _879 : (isnan(_879) ? cbSceneParam._m0[77u].w : min(_879, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3150 = _3148.x;
    float _3151 = _3148.y;
    float _3152 = _3148.z;
    float _3153 = _3148.w;
    float _3225;
    float _3227;
    float _3229;
    float _3231;
    if (_879 > cbSceneParam._m0[78u].w)
    {
        float _3187 = isnan(_879) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _879 : min(cbSceneParam._m0[80u].w, _879));
        float _3188 = _3187 / _879;
        float _3199 = _3188 * _929;
        float _3200 = _930 * _3188;
        float _3201 = (-0.0) - _3200;
        float _3203 = _3188 * _931;
        float _3205 = (cbSceneParam._m0[77u].w * _3201) / _3187;
        float _3206 = _3205 + cbSceneParam._m0[79u].w;
        float _3207 = cbSceneParam._m0[79u].w - _3200;
        float _3213 = sqrt(((_3199 * _3199) + (_3200 * _3200)) + (_3203 * _3203));
        float _3216 = (1.0 - (cbSceneParam._m0[77u].w / _3187)) * _3213;
        float _3221 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3223 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3400;
        if (abs((_3201 - _3205) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3400 = ((((_3206 > 0.0) ? exp2(_3221 * _3206) : (2.0 - exp2(_3223 * _3206))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3216;
        }
        else
        {
            float _3344 = 1.0 / cbSceneParam._m0[80u].x;
            float _3345 = isnan(_3207) ? _3206 : (isnan(_3206) ? _3207 : max(_3206, _3207));
            float _3346 = isnan(_3207) ? _3206 : (isnan(_3206) ? _3207 : min(_3206, _3207));
            float _3355 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : min(_3345, 0.0));
            float _3356 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : min(_3346, 0.0));
            _3400 = ((abs(_3213 / _3201) * cbSceneParam._m0[80u].y) * ((((_3355 - _3356) * 2.0) - ((exp2(_3221 * (isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0)))) - exp2(_3221 * (isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0))))) * _3344)) - ((exp2(_3223 * _3355) - exp2(_3223 * _3356)) * _3344))) + (_3216 * cbSceneParam._m0[80u].z);
        }
        vec4 _3402 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3133, _3134, 1.0), 0.0);
        float _3411 = exp2((_3400 * (-1.44269502162933349609375)) * (1.0 - _3402.w));
        float _3412 = log2(_3411);
        float _3428 = log2(_3153);
        _3225 = (exp2(_3428 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3412 * cbSceneParam._m0[78u].x)) * _3402.x) / cbSceneParam._m0[78u].x)) + _3150;
        _3227 = (exp2(_3428 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3412 * cbSceneParam._m0[78u].y)) * _3402.y) / cbSceneParam._m0[78u].y)) + _3151;
        _3229 = (exp2(_3428 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3412 * cbSceneParam._m0[78u].z)) * _3402.z) / cbSceneParam._m0[78u].z)) + _3152;
        _3231 = _3411 * _3153;
    }
    else
    {
        _3225 = _3150;
        _3227 = _3151;
        _3229 = _3152;
        _3231 = _3153;
    }
    bool _3438;
    vec4 _3241;
    vec4 _3263;
    float _3265;
    float _3269;
    float _3270;
    float _3271;
    float _3272;
    bool _3282;
    for (;;)
    {
        _3241 = cbMatDynParam._m0[0u];
        float _3243 = roundEven(_3241.y);
        bool _3244 = _3243 == 3.0;
        float _3245 = log2(_3231);
        float _3252 = exp2(_3245 * cbSceneParam._m0[78u].x) * _3122;
        float _3253 = exp2(_3245 * cbSceneParam._m0[78u].y) * _3123;
        float _3254 = exp2(_3245 * cbSceneParam._m0[78u].z) * _3124;
        float _3261 = _945 + (-0.5);
        _3263 = cbMtdParam._m0[1u];
        _3265 = _3263.y * _3261;
        float _3268 = (_3243 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3269 = _3268 * (_3244 ? _3252 : (_3252 + (cbSceneParam._m0[72u].w * _3225)));
        _3270 = _3268 * (_3244 ? _3253 : (_3253 + (cbSceneParam._m0[72u].w * _3227)));
        _3271 = _3268 * (_3244 ? _3254 : (_3254 + (cbSceneParam._m0[72u].w * _3229)));
        _3272 = _3261 * 0.999000012874603271484375;
        _3282 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3282)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3272) < 0.5)
            {
                _3438 = true;
                break;
            }
        }
        uint _3379 = _994 + uint(_3241.w);
        if ((cbInstanceData._m0[_3379].w < 1.0) && ((cbInstanceData._m0[_3379].w + _3272) < 0.5))
        {
            _3438 = true;
            break;
        }
        if ((_3265 + 1.0) < _3263.x)
        {
            _3438 = true;
            break;
        }
        _3438 = false;
        break;
    }
    float _3642;
    if (_3438)
    {
        discard_state = true;
        _3642 = 0.0;
    }
    else
    {
        _3642 = cbInstanceData._m0[_3125].w;
    }
    SV_Target.x = _3269;
    SV_Target.y = _3270;
    SV_Target.z = _3271;
    SV_Target.w = _3642;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3125].w;
    discard_exit();
}


