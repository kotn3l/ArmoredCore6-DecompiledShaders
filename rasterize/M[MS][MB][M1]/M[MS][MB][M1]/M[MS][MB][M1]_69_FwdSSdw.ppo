#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1211;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[24u].y) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3564 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _395 = (_388 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _396 = (_388 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _397 = (_388 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _410 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _452 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    float _465 = ((_435.z - _456) * _388) + _456;
    float _468 = ((((_435.x - _454) * _388) + _454) * 2.0) + (-1.0);
    float _469 = ((((_435.y - _455) * _388) + _455) * 2.0) + (-1.0);
    float _470 = dot(vec2(_468, _469), vec2(_468, _469));
    float _3575 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))));
    float _480 = _468 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_410.x * 2.0) + (-1.0)));
    float _481 = _469 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_410.y * 2.0) + (-1.0)));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _510 = _508.x;
    float _511 = 1.0 - _510;
    float _539 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_510 - _511) * cbMtdParam._m0[24u].w) + _511) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3586 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _548 = ((((cbMtdParam._m0[10u].x - _395) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _540) + _395;
    float _549 = ((((cbMtdParam._m0[10u].y - _396) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _540) + _396;
    float _550 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _397)) * _540) + _397;
    vec4 _562 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _576 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _578 = _576.x;
    float _596 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _578) * _388) + _578;
    float _600 = ((_562.x - _596) * cbMtdParam._m0[19u].z) + _596;
    float _602 = _600 - (_600 * _540);
    float _607 = (((_410.z - _465) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _465;
    float _611 = ((cbMtdParam._m0[23u].y - _607) * _540) + _607;
    vec4 _630 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _636 = (_630.x * 2.0) + (-1.0);
    float _637 = (_630.y * 2.0) + (-1.0);
    float _638 = dot(vec2(_636, _637), vec2(_636, _637));
    float _3597 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _654 = (_540 * (((cbMtdParam._m0[22u].z * _480) - _480) + _636)) + _480;
    float _655 = (_540 * (((cbMtdParam._m0[22u].z * _481) - _481) + _637)) + _481;
    float _656 = (_540 * (sqrt(1.0 - (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) - _475)) + _475;
    float _658 = cbMtdParam._m0[22u].x + _494.w;
    float _661 = fma(_656, _238 * NORMAL.x, fma(_655, _245 * TANGENT.x, (_231 * _223) * _654));
    float _664 = fma(_656, _238 * NORMAL.y, fma(_655, _245 * TANGENT.y, (_231 * _224) * _654));
    float _667 = fma(_656, _238 * NORMAL.z, fma(_655, _245 * TANGENT.z, (_231 * _225) * _654));
    float _671 = inversesqrt(dot(vec3(_661, _664, _667), vec3(_661, _664, _667)));
    float _672 = _671 * _661;
    float _673 = _671 * _664;
    float _674 = _671 * _667;
    float _3608 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _675 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3630 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3641 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _3652 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3663 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _680 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _694 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _744 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _734);
    float _745 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _734);
    float _746 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _734);
    float _750 = inversesqrt(dot(vec3(_744, _745, _746), vec3(_744, _745, _746)));
    float _751 = _744 * _750;
    float _752 = _745 * _750;
    float _753 = _746 * _750;
    float _759 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _760 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _778 = fma(_674, cbSceneParam._m0[5u].z, fma(_673, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _672));
    float _781 = fma(_674, cbSceneParam._m0[6u].z, fma(_673, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _672));
    float _784 = fma(_674, cbSceneParam._m0[7u].z, fma(_673, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _672));
    uint _798 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _804 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_798].x;
    float _805 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_798].y;
    float _806 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_798].z;
    float _3674 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _3696 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _810 = 1.0 - _680;
    float _811 = _807 * _810;
    float _812 = _808 * _810;
    float _813 = _809 * _810;
    float _818 = (_807 + (-0.039999999105930328369140625)) * _680;
    float _819 = (_808 + (-0.039999999105930328369140625)) * _680;
    float _820 = (_809 + (-0.039999999105930328369140625)) * _680;
    float _821 = _818 + 0.039999999105930328369140625;
    float _823 = _819 + 0.039999999105930328369140625;
    float _824 = _820 + 0.039999999105930328369140625;
    vec4 _833 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _759, cbSceneParam._m0[86u].y * _760));
    float _837 = ((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * TEXCOORD_5.w) * _833.x;
    float _838 = dot(vec3(_672, _673, _674), vec3(_751, _752, _753));
    float _841 = _838 * 2.0;
    float _845 = (_841 * _672) - _751;
    float _846 = (_841 * _673) - _752;
    float _847 = (_841 * _674) - _753;
    float _851 = abs(dot(vec3(_751, _752, _753), vec3(_672, _673, _674)));
    float _3707 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _853 = sqrt(_675);
    float _866 = exp2((_853 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_853 * 3.0));
    float _872 = (1.0 - _866) * ((_853 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _873 = _866 * _853;
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1210;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _935 = fma(_909, cbModelParam._m0[26u].z, fma(_905, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _901));
        float _939 = fma(_909, cbModelParam._m0[27u].z, fma(_905, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _901));
        float _943 = fma(_909, cbModelParam._m0[28u].z, fma(_905, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _901));
        float _968 = _901 + _672;
        float _969 = _905 + _673;
        float _970 = _909 + _674;
        float _980 = fma(_970, cbModelParam._m0[26u].z, fma(_969, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _968)) - _935;
        float _981 = fma(_970, cbModelParam._m0[27u].z, fma(_969, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _968)) - _939;
        float _982 = fma(_970, cbModelParam._m0[28u].z, fma(_969, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _968)) - _943;
        float _986 = inversesqrt(dot(vec3(_980, _981, _982), vec3(_980, _981, _982)));
        float _999 = ((_986 * _980) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_935 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_986 * _981) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_939 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_986 * _982) / cbModelParam._m0[34u].z) + ((((((_943 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        float _1038 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1004.x + (-0.5));
        float _1040 = _1038 * (_1004.y + (-0.5));
        float _1041 = _1038 * (_1004.z + (-0.5));
        float _1048 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1011.x + (-0.5));
        float _1050 = _1048 * (_1011.y + (-0.5));
        float _1051 = _1048 * (_1011.z + (-0.5));
        float _1058 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1018.x + (-0.5));
        float _1060 = _1058 * (_1018.y + (-0.5));
        float _1061 = _1058 * (_1018.z + (-0.5));
        float _1068 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1025.x + (-0.5));
        float _1070 = _1068 * (_1025.y + (-0.5));
        float _1071 = _1068 * (_1025.z + (-0.5));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = _1039 * 0.5;
        float _1076 = _1049 * 0.5;
        float _1077 = _1059 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1092 = (dot(vec3(_672, _673, _674), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1102 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3755 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1104 + 1.0))) + _1109) * _1072;
        float _1119 = _1040 * 0.5;
        float _1120 = _1050 * 0.5;
        float _1121 = _1060 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_672, _673, _674), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3788 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1146 + 1.0))) + _1151) * _1073;
        float _1161 = _1041 * 0.5;
        float _1162 = _1051 * 0.5;
        float _1163 = _1061 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_672, _673, _674), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3821 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1188 + 1.0))) + _1193) * _1074;
        _1210 = _1041;
        _1212 = _1040;
        _1213 = _1039;
        _1214 = _1051;
        _1215 = _1050;
        _1216 = _1049;
        _1217 = _1061;
        _1218 = _1060;
        _1219 = _1059;
        _1220 = _1074;
        _1221 = _1073;
        _1222 = _1072;
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
    }
    else
    {
        _1210 = _1211;
        _1212 = _1211;
        _1213 = _1211;
        _1214 = _1211;
        _1215 = _1211;
        _1216 = _1211;
        _1217 = _1211;
        _1218 = _1211;
        _1219 = _1211;
        _1220 = _1211;
        _1221 = _1211;
        _1222 = _1211;
        _1223 = 0.0;
        _1224 = 0.0;
        _1225 = 0.0;
    }
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1250 = fma(_909, cbModelParam._m0[30u].z, fma(_905, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _901));
        float _1254 = fma(_909, cbModelParam._m0[31u].z, fma(_905, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _901));
        float _1258 = fma(_909, cbModelParam._m0[32u].z, fma(_905, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _901));
        float _1281 = _901 + _672;
        float _1282 = _905 + _673;
        float _1283 = _909 + _674;
        float _1293 = fma(_1283, cbModelParam._m0[30u].z, fma(_1282, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1281)) - _1250;
        float _1294 = fma(_1283, cbModelParam._m0[31u].z, fma(_1282, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1281)) - _1254;
        float _1295 = fma(_1283, cbModelParam._m0[32u].z, fma(_1282, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1281)) - _1258;
        float _1299 = inversesqrt(dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295)));
        float _1312 = ((_1299 * _1293) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1250 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1299 * _1294) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1254 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1314 = ((_1299 * _1295) / cbModelParam._m0[35u].z) + ((((((_1258 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        float _1349 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1316.x + (-0.5));
        float _1351 = _1349 * (_1316.y + (-0.5));
        float _1352 = _1349 * (_1316.z + (-0.5));
        float _1359 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1323.x + (-0.5));
        float _1361 = _1359 * (_1323.y + (-0.5));
        float _1362 = _1359 * (_1323.z + (-0.5));
        float _1369 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1330.x + (-0.5));
        float _1371 = _1369 * (_1330.y + (-0.5));
        float _1372 = _1369 * (_1330.z + (-0.5));
        float _1379 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1337.x + (-0.5));
        float _1381 = _1379 * (_1337.y + (-0.5));
        float _1382 = _1379 * (_1337.z + (-0.5));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = _1350 * 0.5;
        float _1387 = _1360 * 0.5;
        float _1388 = _1370 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_672, _673, _674), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3884 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1413 + 1.0))) + _1418) * _1383;
        float _1428 = _1351 * 0.5;
        float _1429 = _1361 * 0.5;
        float _1430 = _1371 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_672, _673, _674), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _3917 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1455 + 1.0))) + _1460) * _1384;
        float _1470 = _1352 * 0.5;
        float _1471 = _1362 * 0.5;
        float _1472 = _1372 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_672, _673, _674), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _3950 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1497 + 1.0))) + _1502) * _1385;
        _1519 = _1352;
        _1520 = _1351;
        _1521 = _1350;
        _1522 = _1362;
        _1523 = _1361;
        _1524 = _1360;
        _1525 = _1372;
        _1526 = _1371;
        _1527 = _1370;
        _1528 = _1385;
        _1529 = _1384;
        _1530 = _1383;
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1532 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1533 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
    }
    else
    {
        _1519 = _1211;
        _1520 = _1211;
        _1521 = _1211;
        _1522 = _1211;
        _1523 = _1211;
        _1524 = _1211;
        _1525 = _1211;
        _1526 = _1211;
        _1527 = _1211;
        _1528 = _1211;
        _1529 = _1211;
        _1530 = _1211;
        _1531 = 0.0;
        _1532 = 0.0;
        _1533 = 0.0;
    }
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1223)) + _1223;
    float _1544 = (cbModelParam._m0[1u].x * (_1532 - _1224)) + _1224;
    float _1545 = (cbModelParam._m0[1u].x * (_1533 - _1225)) + _1225;
    float _1566 = fma(_1545, cbSceneParam._m0[89u].z, fma(_1544, cbSceneParam._m0[89u].y, _1543 * cbSceneParam._m0[89u].x));
    float _1569 = fma(_1545, cbSceneParam._m0[90u].z, fma(_1544, cbSceneParam._m0[90u].y, _1543 * cbSceneParam._m0[90u].x));
    float _1572 = fma(_1545, cbSceneParam._m0[91u].z, fma(_1544, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1543));
    float _1587 = _845 * 0.5;
    float _1588 = _846 * 0.5;
    float _1589 = _847 * 0.5;
    float _1590 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1521, _1524, _1527, _1530));
    float _1593 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1520, _1523, _1526, _1529));
    float _1596 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1630;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1603 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1210, _1214, _1217, _1220));
        float _1607 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1212, _1215, _1218, _1221));
        float _1611 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1213, _1216, _1219, _1222));
        float _1618 = dot(vec4(cbModelParam._m0[39u]), vec4(_1587, _1588, _1589, 1.0));
        _1630 = dot(vec3(isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1630 = 1.0;
    }
    float _1641;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1632 = dot(vec4(cbModelParam._m0[40u]), vec4(_1587, _1588, _1589, 1.0));
        _1641 = dot(vec3(isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1641 = 1.0;
    }
    float _1645 = (_1641 * cbModelParam._m0[1u].x) + (_1630 * (1.0 - cbModelParam._m0[1u].x));
    float _1655 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _675);
    float _1656 = isnan(_1655) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1655 : min(cbModelParam._m0[25u].z, _1655));
    float _1738;
    float _1740;
    float _1742;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1705 = fma(_909, cbModelParam._m0[13u].z, fma(_905, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901)) + cbModelParam._m0[13u].w;
        float _1709 = fma(_909, cbModelParam._m0[14u].z, fma(_905, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901)) + cbModelParam._m0[14u].w;
        float _1713 = fma(_909, cbModelParam._m0[15u].z, fma(_905, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901)) + cbModelParam._m0[15u].w;
        float _1716 = fma(_847, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845));
        float _1719 = fma(_847, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845));
        float _1722 = fma(_847, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845));
        float _1750;
        if (_1716 > 0.0)
        {
            _1750 = abs((1.0 - _1705) / _1716);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1705 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1750 = frontier_phi_14_12_ladder;
        }
        float _1975;
        if (_1719 > 0.0)
        {
            _1975 = abs((1.0 - _1709) / _1719);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1709 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1975 = frontier_phi_23_19_ladder;
        }
        float _2232;
        if (_1722 > 0.0)
        {
            _2232 = abs((1.0 - _1713) / _1722);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1713 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2232 = frontier_phi_35_30_ladder;
        }
        float _2234 = isnan(_1975) ? _1750 : (isnan(_1750) ? _1975 : min(_1750, _1975));
        float _2235 = isnan(_2232) ? _2234 : (isnan(_2234) ? _2232 : min(_2234, _2232));
        float _2239 = (_2235 * _1716) + _1705;
        float _2240 = (_2235 * _1719) + _1709;
        float _2241 = (_2235 * _1722) + _1713;
        float _2242 = _2235 * 9.9999997473787516355514526367188e-05;
        float _2244 = (-1.0) - _2242;
        float _2246 = _2242 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2241 > _2246) || ((_2241 < _2244) || ((_2240 > _2246) || ((_2240 < _2244) || ((_2239 < _2244) || (_2239 > _2246))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2241, cbModelParam._m0[9u].z, fma(_2240, cbModelParam._m0[9u].y, _2239 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2241, cbModelParam._m0[10u].z, fma(_2240, cbModelParam._m0[10u].y, _2239 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2241, cbModelParam._m0[11u].z, fma(_2240, cbModelParam._m0[11u].y, _2239 * cbModelParam._m0[11u].x))), _1656);
            frontier_phi_13_35_ladder = _2369.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2369.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2369.x * cbModelParam._m0[1u].y;
        }
        _1738 = frontier_phi_13_35_ladder_2;
        _1740 = frontier_phi_13_35_ladder_1;
        _1742 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1726 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_845, _846, _847), _1656);
        _1738 = _1726.x * cbModelParam._m0[1u].y;
        _1740 = _1726.y * cbModelParam._m0[1u].y;
        _1742 = _1726.z * cbModelParam._m0[1u].y;
    }
    float _1746 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _675);
    float _1747 = isnan(_1746) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1746 : min(cbModelParam._m0[25u].w, _1746));
    float _1838;
    float _1840;
    float _1842;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1802 = fma(_909, cbModelParam._m0[21u].z, fma(_905, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901)) + cbModelParam._m0[21u].w;
        float _1806 = fma(_909, cbModelParam._m0[22u].z, fma(_905, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901)) + cbModelParam._m0[22u].w;
        float _1810 = fma(_909, cbModelParam._m0[23u].z, fma(_905, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901)) + cbModelParam._m0[23u].w;
        float _1813 = fma(_847, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845));
        float _1816 = fma(_847, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845));
        float _1819 = fma(_847, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845));
        float _1980;
        if (_1813 > 0.0)
        {
            _1980 = abs((1.0 - _1802) / _1813);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1802 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1980 = frontier_phi_25_21_ladder;
        }
        float _2259;
        if (_1816 > 0.0)
        {
            _2259 = abs((1.0 - _1806) / _1816);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1806 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2259 = frontier_phi_37_32_ladder;
        }
        float _2472;
        if (_1819 > 0.0)
        {
            _2472 = abs((1.0 - _1810) / _1819);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1810 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2472 = frontier_phi_46_43_ladder;
        }
        float _2474 = isnan(_2259) ? _1980 : (isnan(_1980) ? _2259 : min(_1980, _2259));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1813) + _1802;
        float _2480 = (_2475 * _1816) + _1806;
        float _2481 = (_2475 * _1819) + _1810;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2482;
        float _2485 = _2482 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2481 > _2485) || ((_2481 < _2483) || ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 < _2483) || (_2479 > _2485))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2680 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2481, cbModelParam._m0[17u].z, fma(_2480, cbModelParam._m0[17u].y, _2479 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2481, cbModelParam._m0[18u].z, fma(_2480, cbModelParam._m0[18u].y, _2479 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2481, cbModelParam._m0[19u].z, fma(_2480, cbModelParam._m0[19u].y, _2479 * cbModelParam._m0[19u].x))), _1747);
            frontier_phi_22_46_ladder = _2680.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2680.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2680.x * cbModelParam._m0[1u].z;
        }
        _1838 = frontier_phi_22_46_ladder_2;
        _1840 = frontier_phi_22_46_ladder_1;
        _1842 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1822 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_845, _846, _847), _1747);
        _1838 = _1822.x * cbModelParam._m0[1u].z;
        _1840 = _1822.y * cbModelParam._m0[1u].z;
        _1842 = _1822.z * cbModelParam._m0[1u].z;
    }
    float _1855 = (((_872 * _821) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1838 - _1738)) + _1738);
    float _1857 = (((_872 * _823) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1840 - _1740)) + _1740);
    float _1859 = (((_872 * _824) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1842 - _1742)) + _1742);
    float _1862 = fma(_1859, cbSceneParam._m0[89u].z, fma(_1857, cbSceneParam._m0[89u].y, _1855 * cbSceneParam._m0[89u].x));
    float _1865 = fma(_1859, cbSceneParam._m0[90u].z, fma(_1857, cbSceneParam._m0[90u].y, _1855 * cbSceneParam._m0[90u].x));
    float _1868 = fma(_1859, cbSceneParam._m0[91u].z, fma(_1857, cbSceneParam._m0[91u].y, _1855 * cbSceneParam._m0[91u].x));
    vec4 _1876 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_759, _760));
    float _1878 = _1876.w;
    float _1890 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1878);
    float _1891 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1878);
    float _1892 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1878);
    uvec4 _1896 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1898 = _1896.x * 14u;
    uint _1899 = _1898 + 13u;
    float _1906 = _837 + (-1.0);
    float _1911 = (cbLight._m0[_1899].x * _1906) + 1.0;
    float _1912 = (cbLight._m0[_1899].y * _1906) + 1.0;
    float _1913 = (cbLight._m0[_1899].z * _1906) + 1.0;
    float _1914 = (cbLight._m0[_1899].w * _1906) + 1.0;
    uint _1915 = _1898 + 5u;
    float _1921 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
    uint _1925 = _1898 + 4u;
    float _1934 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
    uint _1938 = _1898 | 1u;
    float _1949 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_672, _673, _674));
    float _1952 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_672, _673, _674));
    float _4086 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _4097 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1957 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.3183098733425140380859375;
    float _1959 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.3183098733425140380859375;
    float _1966 = ((cbLight._m0[_1915].x * _1921) * _1959) + (((cbLight._m0[_1925].x * _1890) * _1934) * _1957);
    float _1967 = ((_1921 * cbLight._m0[_1915].y) * _1959) + (((cbLight._m0[_1925].y * _1891) * _1934) * _1957);
    float _1968 = ((_1921 * cbLight._m0[_1915].z) * _1959) + (((cbLight._m0[_1925].z * _1892) * _1934) * _1957);
    uvec4 _1972 = floatBitsToUint(cbLight._m0[_1898 + 12u]);
    bool _1974 = _1972.x == 0u;
    float _1985;
    float _1987;
    float _1989;
    if (_1974)
    {
        _1985 = _1966;
        _1987 = _1967;
        _1989 = _1968;
    }
    else
    {
        uint _1993 = _1898 + 6u;
        float _2009 = (dot(vec3(cbLight._m0[_1898 + 2u].xyz), vec3(_672, _673, _674)) * 0.5) + 0.5;
        float _2010 = _2009 * _2009;
        float _4108 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2011 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2012 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
        _1985 = (((cbLight._m0[_1993].x * 0.3183098733425140380859375) * _2011) * _2012) + _1966;
        _1987 = (((cbLight._m0[_1993].y * 0.3183098733425140380859375) * _2011) * _2012) + _1967;
        _1989 = (((cbLight._m0[_1993].z * 0.3183098733425140380859375) * _2011) * _2012) + _1968;
    }
    bool _1992 = _1972.y == 0u;
    float _2030;
    float _2032;
    float _2034;
    if (_1992)
    {
        _2030 = _1985;
        _2032 = _1987;
        _2034 = _1989;
    }
    else
    {
        uint _2203 = _1898 + 7u;
        float _2219 = (dot(vec3(cbLight._m0[_1898 + 3u].xyz), vec3(_672, _673, _674)) * 0.5) + 0.5;
        float _2220 = _2219 * _2219;
        float _4124 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2221 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2222 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _2030 = (((cbLight._m0[_2203].x * 0.3183098733425140380859375) * _2221) * _2222) + _1985;
        _2032 = (((cbLight._m0[_2203].y * 0.3183098733425140380859375) * _2221) * _2222) + _1987;
        _2034 = (((cbLight._m0[_2203].z * 0.3183098733425140380859375) * _2221) * _2222) + _1989;
    }
    uint _2037 = _1898 + 8u;
    float _2050 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _675) * 0.949999988079071044921875);
    float _2051 = _2050 * _2050;
    float _2052 = cbLight._m0[_1898].x + _751;
    float _2053 = cbLight._m0[_1898].y + _752;
    float _2054 = cbLight._m0[_1898].z + _753;
    float _2058 = inversesqrt(dot(vec3(_2052, _2053, _2054), vec3(_2052, _2053, _2054)));
    float _2059 = _2058 * _2052;
    float _2060 = _2058 * _2053;
    float _2061 = _2058 * _2054;
    float _2062 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_1898].xyz));
    float _4140 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2065 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _2066 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2067 = dot(vec3(_672, _673, _674), vec3(_2059, _2060, _2061));
    float _4162 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2071 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_2059, _2060, _2061));
    float _4173 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2075 = _2051 * _2051;
    float _2079 = ((_2070 * _2070) * (_2075 + (-1.0))) + 1.0;
    float _2087 = exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0);
    float _2088 = 0.959999978542327880859375 - _818;
    float _2090 = 0.959999978542327880859375 - _819;
    float _2091 = 0.959999978542327880859375 - _820;
    float _2098 = 1.0 - _2051;
    float _2109 = (0.5 / (((_2066 * ((_2065 * _2098) + _2051)) + 9.9999999392252902907785028219223e-09) + (((_2066 * _2098) + _2051) * _2065))) * _2065;
    float _4184 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2111 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2075 / ((_2079 * _2079) * 3.141590118408203125));
    uint _2125 = _1898 + 9u;
    float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1938].w)) * _675) * 0.949999988079071044921875);
    float _2137 = _2136 * _2136;
    float _2138 = cbLight._m0[_1938].x + _751;
    float _2139 = cbLight._m0[_1938].y + _752;
    float _2140 = cbLight._m0[_1938].z + _753;
    float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
    float _2145 = _2144 * _2138;
    float _2146 = _2144 * _2139;
    float _2147 = _2144 * _2140;
    float _2148 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_1938].xyz));
    float _4195 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2152 = dot(vec3(_672, _673, _674), vec3(_2145, _2146, _2147));
    float _4206 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2156 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_2145, _2146, _2147));
    float _4217 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2160 = _2137 * _2137;
    float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
    float _2171 = exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0);
    float _2178 = 1.0 - _2137;
    float _2188 = (0.5 / (((_2066 * ((_2151 * _2178) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_2066 * _2178) + _2137) * _2151))) * _2151;
    float _4228 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2190 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
    float _2200 = (((((_2171 * _2088) + _821) * cbLight._m0[_2125].x) * _2190) * _1921) + ((((cbLight._m0[_2037].x * _1890) * ((_2087 * _2088) + _821)) * _2111) * _1934);
    float _2201 = (((((_2171 * _2090) + _823) * cbLight._m0[_2125].y) * _2190) * _1921) + ((((cbLight._m0[_2037].y * _1891) * ((_2087 * _2090) + _823)) * _2111) * _1934);
    float _2202 = (((((_2171 * _2091) + _824) * cbLight._m0[_2125].z) * _2190) * _1921) + ((((cbLight._m0[_2037].z * _1892) * ((_2087 * _2091) + _824)) * _2111) * _1934);
    float _2264;
    float _2266;
    float _2268;
    if (_1974)
    {
        _2264 = _2200;
        _2266 = _2201;
        _2268 = _2202;
    }
    else
    {
        uint _2270 = _1898 + 2u;
        uint _2274 = _1898 + 10u;
        float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _675) * 0.949999988079071044921875);
        float _2289 = _2288 * _2288;
        float _2290 = cbLight._m0[_2270].x + _751;
        float _2291 = cbLight._m0[_2270].y + _752;
        float _2292 = cbLight._m0[_2270].z + _753;
        float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
        float _2297 = _2296 * _2290;
        float _2298 = _2296 * _2291;
        float _2299 = _2296 * _2292;
        float _2300 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2270].xyz));
        float _4239 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2304 = dot(vec3(_672, _673, _674), vec3(_2297, _2298, _2299));
        float _4250 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2308 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2297, _2298, _2299));
        float _4261 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2312 = _2289 * _2289;
        float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
        float _2323 = exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0);
        float _2330 = 1.0 - _2289;
        float _2340 = (0.5 / (((_2066 * ((_2303 * _2330) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2066 * _2330) + _2289) * _2303))) * _2303;
        float _4272 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2342 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
        float _2343 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
        _2264 = (((((_2323 * _2088) + _821) * cbLight._m0[_2274].x) * _2342) * _2343) + _2200;
        _2266 = (((((_2323 * _2090) + _823) * cbLight._m0[_2274].y) * _2342) * _2343) + _2201;
        _2268 = (((((_2323 * _2091) + _824) * cbLight._m0[_2274].z) * _2342) * _2343) + _2202;
    }
    float _2378;
    float _2380;
    float _2382;
    if (_1992)
    {
        _2378 = _2264;
        _2380 = _2266;
        _2382 = _2268;
    }
    else
    {
        uint _2389 = _1898 + 3u;
        uint _2393 = _1898 + 11u;
        float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _675) * 0.949999988079071044921875);
        float _2408 = _2407 * _2407;
        float _2409 = cbLight._m0[_2389].x + _751;
        float _2410 = cbLight._m0[_2389].y + _752;
        float _2411 = cbLight._m0[_2389].z + _753;
        float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
        float _2416 = _2415 * _2409;
        float _2417 = _2415 * _2410;
        float _2418 = _2415 * _2411;
        float _2419 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2389].xyz));
        float _4288 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2423 = dot(vec3(_672, _673, _674), vec3(_2416, _2417, _2418));
        float _4299 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2427 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2416, _2417, _2418));
        float _4310 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2431 = _2408 * _2408;
        float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
        float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0);
        float _2449 = 1.0 - _2408;
        float _2459 = (0.5 / (((_2066 * ((_2422 * _2449) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2066 * _2449) + _2408) * _2422))) * _2422;
        float _4321 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2461 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
        float _2462 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _2378 = (((((_2442 * _2088) + _821) * cbLight._m0[_2393].x) * _2461) * _2462) + _2264;
        _2380 = (((((_2442 * _2090) + _823) * cbLight._m0[_2393].y) * _2461) * _2462) + _2266;
        _2382 = (((((_2442 * _2091) + _824) * cbLight._m0[_2393].z) * _2461) * _2462) + _2268;
    }
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    if (_1896.y == 0u)
    {
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2537;
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2537;
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2537;
        uvec4 _2552 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2553 = _2552.x;
        uint _2564 = uint((float(_2552.y) * floor(float(uint(cbSceneParam._m0[85u].y * _760) / _2553))) + floor(float(uint(cbSceneParam._m0[85u].x * _759) / _2553)));
        float _2574 = (log2(_2540 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2575 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        uint _2578 = uint(isnan(14.0) ? _2575 : (isnan(_2575) ? 14.0 : min(_2575, 14.0)));
        uvec4 _2583 = texelFetch(g_lightClusterGridBuffer, int(((_2578 << 2u) + (_2564 << 6u)) >> 2u));
        uint _2584 = _2583.x;
        uint _2585 = _2552.z;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((((1u << ((_2585 >> 4u) & 15u)) + 4294967295u) & _2584) == 0u) || ((_2585 & 240u) == 0u))
        {
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
        }
        else
        {
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            uint _2836 = 0u;
            uint _2845;
            bool _2846;
            for (;;)
            {
                _2845 = texelFetch(g_lightClassification, int((((_2578 << 5u) + (_2564 << 9u)) + (_2836 << 2u)) >> 2u)).x;
                _2846 = _2845 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2846)
                {
                    frontier_phi_61_pred = _2830;
                    frontier_phi_61_pred_1 = _2835;
                    frontier_phi_61_pred_2 = _2834;
                    frontier_phi_61_pred_3 = _2833;
                    frontier_phi_61_pred_4 = _2832;
                    frontier_phi_61_pred_5 = _2831;
                }
                else
                {
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    uint _2960;
                    _2954 = _2830;
                    _2955 = _2831;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2834;
                    _2959 = _2835;
                    _2960 = _2845;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    for (;;)
                    {
                        uint _2964 = uint(findLSB(_2960)) + (_2836 << 5u);
                        uint _2961 = (_2960 + 4294967295u) & _2960;
                        uint _2966 = _2964 * 48u;
                        vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 3u)).x));
                        uint _2986 = (_2964 * 48u) + 4u;
                        vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 3u)).x));
                        uint _3005 = (_2964 * 48u) + 8u;
                        vec3 _3016 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 2u)).x));
                        float _3020 = _2980.x - _2538;
                        float _3021 = _2980.y - _2539;
                        float _3022 = _2980.z - _2540;
                        float _3023 = dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022));
                        float _3026 = inversesqrt(_3023);
                        float _3027 = _3026 * _3020;
                        float _3028 = _3026 * _3021;
                        float _3029 = _3026 * _3022;
                        float _3030 = dot(vec3(_778, _781, _784), vec3(_3027, _3028, _3029));
                        float _3035 = 1.0 - (_3023 * _2980.w);
                        float _4347 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3036 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3037 = sqrt(_3023) * _2999.w;
                        float _3040 = 1.39999997615814208984375 / (_3037 + 1.39999997615814208984375);
                        float _3041 = _3040 * _3040;
                        float _3044 = ((1.0 - _3041) * _3030) + _3041;
                        float _3047 = _3037 * _3037;
                        float _3051 = ((isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))) * _3036) / ((_3047 * 0.699999988079071044921875) + 1.0);
                        float _3055 = (-0.0) - _2538;
                        float _3056 = (-0.0) - _2539;
                        float _3057 = (-0.0) - _2540;
                        float _3061 = inversesqrt(dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057)));
                        float _3062 = _3061 * _3055;
                        float _3063 = _3061 * _3056;
                        float _3064 = _3061 * _3057;
                        float _3072 = exp2(log2(1.0 / ((_3047 * 3.5) + 5.0)) * 0.25);
                        float _3073 = 1.0 - _853;
                        float _3080 = sqrt(1.0 - ((1.0 - (_3073 * _3073)) * (1.0 - (_3072 * _3072))));
                        float _3081 = _3080 * _3080;
                        float _3082 = _3081 * _3081;
                        float _3083 = _3062 + _3027;
                        float _3084 = _3063 + _3028;
                        float _3085 = _3064 + _3029;
                        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                        float _3093 = dot(vec3(_778, _781, _784), vec3(_3062, _3063, _3064));
                        float _4363 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3096 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3097 = dot(vec3(_778, _781, _784), vec3(_3089 * _3083, _3089 * _3084, _3089 * _3085));
                        float _4374 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3100 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3104 = ((_3100 * _3100) * (_3082 + (-1.0))) + 1.0;
                        float _3105 = _3040 * _3081;
                        float _3106 = _3105 * _3105;
                        float _3109 = ((1.0 - _3106) * _3030) + _3106;
                        float _4385 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3110 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3111 = 1.0 - _3081;
                        float _3121 = (0.5 / (((_3110 * ((_3096 * _3111) + _3081)) + 9.9999999392252902907785028219223e-09) + (((_3110 * _3111) + _3081) * _3096))) * _3110;
                        float _4396 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3132 = (((_3082 * 3.1415927410125732421875) * (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) / ((_3104 * _3104) * ((_3047 * 2.1991131305694580078125) + 3.141590118408203125))) * _3036;
                        _2889 = (_3051 * _2999.x) + _2957;
                        _2890 = (_3051 * _2999.y) + _2958;
                        _2891 = (_3051 * _2999.z) + _2959;
                        _2886 = (_3132 * _3016.x) + _2954;
                        _2887 = (_3132 * _3016.y) + _2955;
                        _2888 = (_3132 * _3016.z) + _2956;
                        if (_2961 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2954 = _2886;
                            _2955 = _2887;
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2890;
                            _2959 = _2891;
                            _2960 = _2961;
                        }
                    }
                    frontier_phi_61_pred = _2886;
                    frontier_phi_61_pred_1 = _2891;
                    frontier_phi_61_pred_2 = _2890;
                    frontier_phi_61_pred_3 = _2889;
                    frontier_phi_61_pred_4 = _2888;
                    frontier_phi_61_pred_5 = _2887;
                }
                _2686 = frontier_phi_61_pred;
                _2696 = frontier_phi_61_pred_1;
                _2694 = frontier_phi_61_pred_2;
                _2692 = frontier_phi_61_pred_3;
                _2690 = frontier_phi_61_pred_4;
                _2688 = frontier_phi_61_pred_5;
                uint _2837 = _2836 + 1u;
                if (_2837 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2830 = _2686;
                    _2831 = _2688;
                    _2832 = _2690;
                    _2833 = _2692;
                    _2834 = _2694;
                    _2835 = _2696;
                    _2836 = _2837;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
        }
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.z;
        uint _2702 = (_2700 >> 8u) & 15u;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        if (((4294967295u << _2702) & _2584) == 0u)
        {
            _2798 = _2685;
            _2800 = _2687;
            _2802 = _2689;
            _2804 = _2691;
            _2806 = _2693;
            _2808 = _2695;
        }
        else
        {
            float _2823 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
            float _2824 = _2823 * _2538;
            float _2825 = _2823 * _2539;
            float _2826 = _2823 * _2540;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2702 < ((_2700 >> 12u) & 15u))
            {
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2937 = _2685;
                float _2938 = _2687;
                float _2939 = _2689;
                float _2940 = _2691;
                float _2941 = _2693;
                float _2942 = _2695;
                uint _2943 = _2702;
                uint _2952;
                bool _2953;
                for (;;)
                {
                    _2952 = texelFetch(g_lightClassification, int((((_2578 << 5u) + (_2564 << 9u)) + (_2943 << 2u)) >> 2u)).x;
                    _2953 = _2952 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2953)
                    {
                        frontier_phi_67_pred = _2940;
                        frontier_phi_67_pred_1 = _2941;
                        frontier_phi_67_pred_2 = _2942;
                        frontier_phi_67_pred_3 = _2939;
                        frontier_phi_67_pred_4 = _2938;
                        frontier_phi_67_pred_5 = _2937;
                    }
                    else
                    {
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3150 = _2937;
                        float _3151 = _2938;
                        float _3152 = _2939;
                        float _3153 = _2940;
                        float _3154 = _2941;
                        float _3155 = _2942;
                        uint _3156 = _2952;
                        uint _3157;
                        vec4 _3182;
                        float _3183;
                        vec4 _3198;
                        vec3 _3210;
                        vec4 _3225;
                        vec4 _3240;
                        float _3286;
                        bool _3287;
                        for (;;)
                        {
                            uint _3167 = ((_2943 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3156));
                            _3157 = (_3156 + 4294967295u) & _3156;
                            uint _3169 = _3167 * 40u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            _3183 = _3182.w;
                            uint _3185 = (_3167 * 40u) + 4u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3200 = (_3167 * 40u) + 8u;
                            _3210 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x));
                            uint _3212 = (_3167 * 40u) + 16u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3227 = (_3167 * 40u) + 20u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3167 * 40u) + 24u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3261 = (_3167 * 40u) + 28u;
                            vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            _3286 = fma(_2540, _3274.z, fma(_2539, _3274.y, _3274.x * _2538)) + _3274.w;
                            _3287 = !((fma(_2540, _3255.z, fma(_2539, _3255.y, _3255.x * _2538)) + _3255.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3287)
                            {
                                float _3314 = _3182.x - _2538;
                                float _3315 = _3182.y - _2539;
                                float _3316 = _3182.z - _2540;
                                float _3317 = dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316));
                                float _3320 = inversesqrt(_3317);
                                float _3321 = _3320 * _3314;
                                float _3322 = _3320 * _3315;
                                float _3323 = _3320 * _3316;
                                float _3327 = 1.0 - (_3317 / (_3183 * _3183));
                                float _4407 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3332 = sqrt(_3317) * _3198.w;
                                float _3334 = 1.39999997615814208984375 / (_3332 + 1.39999997615814208984375);
                                float _3335 = _3334 * _3334;
                                float _3338 = ((1.0 - _3335) * dot(vec3(_3321, _3322, _3323), vec3(_778, _781, _784))) + _3335;
                                float _3341 = _3332 * _3332;
                                float _3345 = (fma(_2540, _3225.z, fma(_2539, _3225.y, _3225.x * _2538)) + _3225.w) / _3286;
                                float _3346 = (fma(_2540, _3240.z, fma(_2539, _3240.y, _3240.x * _2538)) + _3240.w) / _3286;
                                float _3350 = 1.0 - dot(vec2(_3345, _3346), vec2(_3345, _3346));
                                float _4423 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3352 = _3351 * (((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) * _3328) / ((_3341 * 0.699999988079071044921875) + 1.0));
                                float _3364 = exp2(log2(1.0 / ((_3341 * 3.5) + 5.0)) * 0.25);
                                float _3365 = 1.0 - _853;
                                float _3372 = sqrt(1.0 - ((1.0 - (_3365 * _3365)) * (1.0 - (_3364 * _3364))));
                                float _3373 = _3372 * _3372;
                                float _3374 = _3373 * _3373;
                                float _3375 = _3321 - _2824;
                                float _3376 = _3322 - _2825;
                                float _3377 = _3323 - _2826;
                                float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                                float _3385 = dot(vec3(_778, _781, _784), vec3((-0.0) - _2824, (-0.0) - _2825, (-0.0) - _2826));
                                float _4434 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3389 = dot(vec3(_778, _781, _784), vec3(_3381 * _3375, _3381 * _3376, _3381 * _3377));
                                float _4445 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3396 = ((_3392 * _3392) * (_3374 + (-1.0))) + 1.0;
                                float _3397 = _3334 * _3373;
                                float _3398 = _3397 * _3397;
                                float _3404 = ((1.0 - _3398) * dot(vec3(_778, _781, _784), vec3(_3321, _3322, _3323))) + _3398;
                                float _4456 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3405 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3406 = 1.0 - _3373;
                                float _3416 = (0.5 / (((_3405 * ((_3388 * _3406) + _3373)) + 9.9999999392252902907785028219223e-09) + (((_3405 * _3406) + _3373) * _3388))) * _3405;
                                float _4467 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3426 = (_3351 * _3328) * (((_3374 * 3.1415927410125732421875) * (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) / ((_3396 * _3396) * ((_3341 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3426 * _3210.x;
                                frontier_phi_73_pred_1 = _3426 * _3210.y;
                                frontier_phi_73_pred_2 = _3352 * _3198.z;
                                frontier_phi_73_pred_3 = _3352 * _3198.y;
                                frontier_phi_73_pred_4 = _3352 * _3198.x;
                                frontier_phi_73_pred_5 = _3426 * _3210.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3430 = frontier_phi_73_pred;
                            _3431 = frontier_phi_73_pred_1;
                            _3435 = frontier_phi_73_pred_2;
                            _3434 = frontier_phi_73_pred_3;
                            _3433 = frontier_phi_73_pred_4;
                            _3432 = frontier_phi_73_pred_5;
                            _3140 = _3433 + _3153;
                            _3141 = _3434 + _3154;
                            _3142 = _3435 + _3155;
                            _3137 = _3430 + _3150;
                            _3138 = _3431 + _3151;
                            _3139 = _3432 + _3152;
                            if (_3157 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3157;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3140;
                        frontier_phi_67_pred_1 = _3141;
                        frontier_phi_67_pred_2 = _3142;
                        frontier_phi_67_pred_3 = _3139;
                        frontier_phi_67_pred_4 = _3138;
                        frontier_phi_67_pred_5 = _3137;
                    }
                    _2805 = frontier_phi_67_pred;
                    _2807 = frontier_phi_67_pred_1;
                    _2809 = frontier_phi_67_pred_2;
                    _2803 = frontier_phi_67_pred_3;
                    _2801 = frontier_phi_67_pred_4;
                    _2799 = frontier_phi_67_pred_5;
                    uint _2944 = _2943 + 1u;
                    if (_2944 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2937 = _2799;
                        _2938 = _2801;
                        _2939 = _2803;
                        _2940 = _2805;
                        _2941 = _2807;
                        _2942 = _2809;
                        _2943 = _2944;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2807;
                frontier_phi_55_56_ladder_1 = _2809;
                frontier_phi_55_56_ladder_2 = _2805;
                frontier_phi_55_56_ladder_3 = _2803;
                frontier_phi_55_56_ladder_4 = _2801;
                frontier_phi_55_56_ladder_5 = _2799;
            }
            else
            {
                frontier_phi_55_56_ladder = _2693;
                frontier_phi_55_56_ladder_1 = _2695;
                frontier_phi_55_56_ladder_2 = _2691;
                frontier_phi_55_56_ladder_3 = _2689;
                frontier_phi_55_56_ladder_4 = _2687;
                frontier_phi_55_56_ladder_5 = _2685;
            }
            _2798 = frontier_phi_55_56_ladder_5;
            _2800 = frontier_phi_55_56_ladder_4;
            _2802 = frontier_phi_55_56_ladder_3;
            _2804 = frontier_phi_55_56_ladder_2;
            _2806 = frontier_phi_55_56_ladder;
            _2808 = frontier_phi_55_56_ladder_1;
        }
        float _2813 = isnan(1.0) ? _837 : (isnan(_837) ? 1.0 : min(_837, 1.0));
        _2597 = (_2813 * _2804) + _2030;
        _2599 = (_2813 * _2806) + _2032;
        _2601 = (_2813 * _2808) + _2034;
        _2603 = ((_2798 * _821) * _2813) + _2378;
        _2605 = ((_2800 * _823) * _2813) + _2380;
        _2607 = ((_2802 * _824) * _2813) + _2382;
    }
    else
    {
        _2597 = _2030;
        _2599 = _2032;
        _2601 = _2034;
        _2603 = _2378;
        _2605 = _2380;
        _2607 = _2382;
    }
    float _4483 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4494 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4505 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    uint _2627 = _251 + 6u;
    float _2635 = _759 / cbSceneParam._m0[86u].x;
    float _2636 = _760 / cbSceneParam._m0[86u].y;
    vec4 _2650 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2635, _2636, (log2((isnan(cbSceneParam._m0[77u].w) ? _694 : (isnan(_694) ? cbSceneParam._m0[77u].w : min(_694, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2652 = _2650.x;
    float _2653 = _2650.y;
    float _2654 = _2650.z;
    float _2655 = _2650.w;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_694 > cbSceneParam._m0[78u].w)
    {
        float _2710 = isnan(_694) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _694 : min(cbSceneParam._m0[80u].w, _694));
        float _2711 = _2710 / _694;
        float _2722 = _2711 * _744;
        float _2723 = _745 * _2711;
        float _2724 = (-0.0) - _2723;
        float _2726 = _2711 * _746;
        float _2728 = (cbSceneParam._m0[77u].w * _2724) / _2710;
        float _2729 = _2728 + cbSceneParam._m0[79u].w;
        float _2730 = cbSceneParam._m0[79u].w - _2723;
        float _2736 = sqrt(((_2722 * _2722) + (_2723 * _2723)) + (_2726 * _2726));
        float _2739 = (1.0 - (cbSceneParam._m0[77u].w / _2710)) * _2736;
        float _2744 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2746 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2899;
        if (abs((_2724 - _2728) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2899 = ((((_2729 > 0.0) ? exp2(_2744 * _2729) : (2.0 - exp2(_2746 * _2729))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2739;
        }
        else
        {
            float _2859 = 1.0 / cbSceneParam._m0[80u].x;
            float _2860 = isnan(_2730) ? _2729 : (isnan(_2729) ? _2730 : max(_2729, _2730));
            float _2861 = isnan(_2730) ? _2729 : (isnan(_2729) ? _2730 : min(_2729, _2730));
            float _2870 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : min(_2860, 0.0));
            float _2871 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : min(_2861, 0.0));
            _2899 = ((abs(_2736 / _2724) * cbSceneParam._m0[80u].y) * ((((_2870 - _2871) * 2.0) - ((exp2(_2744 * (isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0)))) - exp2(_2744 * (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))))) * _2859)) - ((exp2(_2746 * _2870) - exp2(_2746 * _2871)) * _2859))) + (_2739 * cbSceneParam._m0[80u].z);
        }
        vec4 _2901 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2635, _2636, 1.0), 0.0);
        float _2910 = exp2((_2899 * (-1.44269502162933349609375)) * (1.0 - _2901.w));
        float _2911 = log2(_2910);
        float _2927 = log2(_2655);
        _2748 = (exp2(_2927 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].x)) * _2901.x) / cbSceneParam._m0[78u].x)) + _2652;
        _2750 = (exp2(_2927 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].y)) * _2901.y) / cbSceneParam._m0[78u].y)) + _2653;
        _2752 = (exp2(_2927 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].z)) * _2901.z) / cbSceneParam._m0[78u].z)) + _2654;
        _2754 = _2910 * _2655;
    }
    else
    {
        _2748 = _2652;
        _2750 = _2653;
        _2752 = _2654;
        _2754 = _2655;
    }
    float _2766 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2767 = _2766 == 3.0;
    float _2768 = log2(_2754);
    float _2775 = exp2(_2768 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2597 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _837))) + ((_2603 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1645)) * cbPerFrame._m0[3u].x));
    float _2776 = exp2(_2768 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2599 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _837))) + ((_2605 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1645)) * cbPerFrame._m0[3u].x));
    float _2777 = exp2(_2768 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2601 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _837))) + ((_2607 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1645)) * cbPerFrame._m0[3u].x));
    float _2786 = (_2766 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2786 * (_2767 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2748)));
    SV_Target.y = _2786 * (_2767 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2750)));
    SV_Target.z = _2786 * (_2767 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2752)));
    SV_Target.w = cbInstanceData._m0[_2627].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2627].w;
}


