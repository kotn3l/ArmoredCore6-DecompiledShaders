#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1237;
float _3643;
float _3644;
float _3645;
float _3646;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = _286.x * cbMtdParam._m0[9u].x;
    float _293 = _286.y * cbMtdParam._m0[9u].y;
    float _294 = _286.z * cbMtdParam._m0[9u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _342 = _338.z;
    float _346 = (_338.x * 2.0) + (-1.0);
    float _347 = (_338.y * 2.0) + (-1.0);
    float _348 = dot(vec2(_346, _347), vec2(_346, _347));
    float _3655 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _354 = sqrt(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))));
    float _359 = _346 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_312.x * 2.0) + (-1.0)));
    float _360 = _347 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_312.y * 2.0) + (-1.0)));
    float _363 = fma(_354, _235, fma(_360, _242, _359 * _228));
    float _366 = fma(_354, _236, fma(_360, _243, _359 * _229));
    float _369 = fma(_354, _237, fma(_360, _244, _359 * _230));
    float _373 = inversesqrt(dot(vec3(_363, _366, _369), vec3(_363, _366, _369)));
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _411 = _409.x;
    float _412 = 1.0 - _411;
    float _419 = ((_411 - _412) * cbMtdParam._m0[24u].z) + _412;
    float _421 = (cbMtdParam._m0[19u].x + dot(vec4(_373 * _363, _373 * _366, _373 * _369, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_419 * cbMtdParam._m0[21u].z);
    float _3666 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _424 = (-0.0) - cbMtdParam._m0[24u].x;
    float _426 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _427 = isnan(1.0) ? _426 : (isnan(_426) ? 1.0 : min(_426, 1.0));
    float _434 = _422 - ((_422 * TEXCOORD_8.x) * _427);
    float _435 = _422 - ((_422 * TEXCOORD_8.y) * _427);
    float _436 = _422 - ((_422 * TEXCOORD_8.z) * _427);
    float _443 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _447 = ((isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : min(_443, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _455 = (_447 - (((_419 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _447))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3697 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _460 = ((_434 * (cbMtdParam._m0[17u].x - _292)) * _456) + _292;
    float _461 = ((_435 * (cbMtdParam._m0[17u].y - _293)) * _456) + _293;
    float _462 = ((_436 * (cbMtdParam._m0[17u].z - _294)) * _456) + _294;
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _476 = _474.x;
    float _477 = 1.0 - _476;
    float _506 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_476 - _477) * cbMtdParam._m0[24u].w) + _477) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3708 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _515 = ((((cbMtdParam._m0[10u].x - _460) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _507) + _460;
    float _516 = ((((cbMtdParam._m0[10u].y - _461) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _507) + _461;
    float _517 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _462)) * _507) + _462;
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _532 = _530.x;
    float _535 = _532 - ((_532 * _434) * _456);
    float _537 = _535 - (_535 * _507);
    float _542 = (((_312.z - _342) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _342;
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _563 = (_556.x * 2.0) + (-1.0);
    float _564 = (_556.y * 2.0) + (-1.0);
    float _565 = dot(vec2(_563, _564), vec2(_563, _564));
    float _3719 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _574 = (((_556.z - _542) * _434) * _456) + _542;
    float _577 = ((cbMtdParam._m0[23u].y - _574) * _507) + _574;
    vec4 _596 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _602 = (_596.x * 2.0) + (-1.0);
    float _603 = (_596.y * 2.0) + (-1.0);
    float _604 = dot(vec2(_602, _603), vec2(_602, _603));
    float _3730 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _624 = (((cbMtdParam._m0[21u].x * _359) + ((_563 - _359) * _434)) * _456) + _359;
    float _625 = (((cbMtdParam._m0[21u].x * _360) + ((_564 - _360) * _435)) * _456) + _360;
    float _626 = (((sqrt(1.0 - (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) - _354) * _436) * _456) + _354;
    float _637 = (((_602 - _624) + (_624 * cbMtdParam._m0[22u].z)) * _507) + _624;
    float _638 = (((_603 - _625) + (_625 * cbMtdParam._m0[22u].z)) * _507) + _625;
    float _639 = ((sqrt(1.0 - (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) - _626) * _507) + _626;
    float _641 = cbMtdParam._m0[22u].x + _338.w;
    float _644 = fma(_639, _235, fma(_638, _242, _637 * _228));
    float _647 = fma(_639, _236, fma(_638, _243, _637 * _229));
    float _650 = fma(_639, _237, fma(_638, _244, _637 * _230));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _3741 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _658 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3763 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3774 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3785 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3796 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _663 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _677 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _727 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _717);
    float _728 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _717);
    float _729 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _717);
    float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
    float _734 = _727 * _733;
    float _735 = _728 * _733;
    float _736 = _729 * _733;
    vec4 _741 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _743 = _741.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _918 = sqrt(((_727 * _727) + (_728 * _728)) + (_729 * _729));
        float _924 = (cbMatDynParam._m0[5u].x * _918) + cbMatDynParam._m0[5u].y;
        float _3807 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _929 = (cbMatDynParam._m0[5u].z * _918) + cbMatDynParam._m0[5u].w;
        float _3818 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) - _925)) + _925) < ((_743 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _755 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _756 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _776 = fma(_657, cbSceneParam._m0[5u].z, fma(_656, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _655));
    float _779 = fma(_657, cbSceneParam._m0[6u].z, fma(_656, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _655));
    float _782 = fma(_657, cbSceneParam._m0[7u].z, fma(_656, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _655));
    uint _795 = _247 + 9u;
    uint _796 = _795 + uint(cbMatDynParam._m0[0u].w);
    float _802 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_796].x;
    float _803 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_796].y;
    float _804 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_796].z;
    float _3829 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _808 = 1.0 - _663;
    float _809 = _805 * _808;
    float _810 = _806 * _808;
    float _811 = _807 * _808;
    float _816 = (_805 + (-0.039999999105930328369140625)) * _663;
    float _817 = (_806 + (-0.039999999105930328369140625)) * _663;
    float _818 = (_807 + (-0.039999999105930328369140625)) * _663;
    float _819 = _816 + 0.039999999105930328369140625;
    float _821 = _817 + 0.039999999105930328369140625;
    float _822 = _818 + 0.039999999105930328369140625;
    vec4 _831 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _755, cbSceneParam._m0[86u].y * _756));
    float _835 = ((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * TEXCOORD_5.w) * _831.x;
    float _836 = dot(vec3(_655, _656, _657), vec3(_734, _735, _736));
    float _839 = _836 * 2.0;
    float _843 = (_839 * _655) - _734;
    float _844 = (_839 * _656) - _735;
    float _845 = (_839 * _657) - _736;
    float _849 = abs(dot(vec3(_734, _735, _736), vec3(_655, _656, _657)));
    float _3862 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _851 = sqrt(_658);
    float _864 = exp2((_851 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_851 * 3.0));
    float _870 = (1.0 - _864) * ((_851 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _871 = _864 * _851;
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1236;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _961 = fma(_907, cbModelParam._m0[26u].z, fma(_903, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _899));
        float _965 = fma(_907, cbModelParam._m0[27u].z, fma(_903, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _899));
        float _969 = fma(_907, cbModelParam._m0[28u].z, fma(_903, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _899));
        float _994 = _899 + _655;
        float _995 = _903 + _656;
        float _996 = _907 + _657;
        float _1006 = fma(_996, cbModelParam._m0[26u].z, fma(_995, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _994)) - _961;
        float _1007 = fma(_996, cbModelParam._m0[27u].z, fma(_995, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _994)) - _965;
        float _1008 = fma(_996, cbModelParam._m0[28u].z, fma(_995, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _994)) - _969;
        float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
        float _1025 = ((_1012 * _1006) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_961 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1012 * _1007) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_965 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1012 * _1008) / cbModelParam._m0[34u].z) + ((((((_969 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        float _1064 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1030.x + (-0.5));
        float _1066 = _1064 * (_1030.y + (-0.5));
        float _1067 = _1064 * (_1030.z + (-0.5));
        float _1074 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1037.x + (-0.5));
        float _1076 = _1074 * (_1037.y + (-0.5));
        float _1077 = _1074 * (_1037.z + (-0.5));
        float _1084 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1044.x + (-0.5));
        float _1086 = _1084 * (_1044.y + (-0.5));
        float _1087 = _1084 * (_1044.z + (-0.5));
        float _1094 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1051.x + (-0.5));
        float _1096 = _1094 * (_1051.y + (-0.5));
        float _1097 = _1094 * (_1051.z + (-0.5));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = _1065 * 0.5;
        float _1102 = _1075 * 0.5;
        float _1103 = _1085 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1118 = (dot(vec3(_655, _656, _657), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1128 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3910 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1130 + 1.0))) + _1135) * _1098;
        float _1145 = _1066 * 0.5;
        float _1146 = _1076 * 0.5;
        float _1147 = _1086 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_655, _656, _657), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3943 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1172 + 1.0))) + _1177) * _1099;
        float _1187 = _1067 * 0.5;
        float _1188 = _1077 * 0.5;
        float _1189 = _1087 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_655, _656, _657), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3976 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1214 + 1.0))) + _1219) * _1100;
        _1236 = _1067;
        _1238 = _1066;
        _1239 = _1065;
        _1240 = _1077;
        _1241 = _1076;
        _1242 = _1075;
        _1243 = _1087;
        _1244 = _1086;
        _1245 = _1085;
        _1246 = _1100;
        _1247 = _1099;
        _1248 = _1098;
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
    }
    else
    {
        _1236 = _1237;
        _1238 = _1237;
        _1239 = _1237;
        _1240 = _1237;
        _1241 = _1237;
        _1242 = _1237;
        _1243 = _1237;
        _1244 = _1237;
        _1245 = _1237;
        _1246 = _1237;
        _1247 = _1237;
        _1248 = _1237;
        _1249 = 0.0;
        _1250 = 0.0;
        _1251 = 0.0;
    }
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1279 = fma(_907, cbModelParam._m0[30u].z, fma(_903, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _899));
        float _1283 = fma(_907, cbModelParam._m0[31u].z, fma(_903, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _899));
        float _1287 = fma(_907, cbModelParam._m0[32u].z, fma(_903, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _899));
        float _1310 = _899 + _655;
        float _1311 = _903 + _656;
        float _1312 = _907 + _657;
        float _1322 = fma(_1312, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1310)) - _1279;
        float _1323 = fma(_1312, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1310)) - _1283;
        float _1324 = fma(_1312, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1310)) - _1287;
        float _1328 = inversesqrt(dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324)));
        float _1341 = ((_1328 * _1322) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1279 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1328 * _1323) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1283 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1328 * _1324) / cbModelParam._m0[35u].z) + ((((((_1287 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        float _1378 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1345.x + (-0.5));
        float _1380 = _1378 * (_1345.y + (-0.5));
        float _1381 = _1378 * (_1345.z + (-0.5));
        float _1388 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1352.x + (-0.5));
        float _1390 = _1388 * (_1352.y + (-0.5));
        float _1391 = _1388 * (_1352.z + (-0.5));
        float _1398 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1359.x + (-0.5));
        float _1400 = _1398 * (_1359.y + (-0.5));
        float _1401 = _1398 * (_1359.z + (-0.5));
        float _1408 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1366.x + (-0.5));
        float _1410 = _1408 * (_1366.y + (-0.5));
        float _1411 = _1408 * (_1366.z + (-0.5));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = _1379 * 0.5;
        float _1416 = _1389 * 0.5;
        float _1417 = _1399 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_655, _656, _657), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4039 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1442 + 1.0))) + _1447) * _1412;
        float _1457 = _1380 * 0.5;
        float _1458 = _1390 * 0.5;
        float _1459 = _1400 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_655, _656, _657), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4072 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1484 + 1.0))) + _1489) * _1413;
        float _1499 = _1381 * 0.5;
        float _1500 = _1391 * 0.5;
        float _1501 = _1401 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_655, _656, _657), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4105 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1526 + 1.0))) + _1531) * _1414;
        _1548 = _1381;
        _1549 = _1380;
        _1550 = _1379;
        _1551 = _1391;
        _1552 = _1390;
        _1553 = _1389;
        _1554 = _1401;
        _1555 = _1400;
        _1556 = _1399;
        _1557 = _1414;
        _1558 = _1413;
        _1559 = _1412;
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
    }
    else
    {
        _1548 = _1237;
        _1549 = _1237;
        _1550 = _1237;
        _1551 = _1237;
        _1552 = _1237;
        _1553 = _1237;
        _1554 = _1237;
        _1555 = _1237;
        _1556 = _1237;
        _1557 = _1237;
        _1558 = _1237;
        _1559 = _1237;
        _1560 = 0.0;
        _1561 = 0.0;
        _1562 = 0.0;
    }
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1249)) + _1249;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1250)) + _1250;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1251)) + _1251;
    float _1595 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1572));
    float _1616 = _843 * 0.5;
    float _1617 = _844 * 0.5;
    float _1618 = _845 * 0.5;
    float _1619 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1622 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1625 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1659;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1632 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1236, _1240, _1243, _1246));
        float _1636 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1238, _1241, _1244, _1247));
        float _1640 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1239, _1242, _1245, _1248));
        float _1647 = dot(vec4(cbModelParam._m0[39u]), vec4(_1616, _1617, _1618, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1670;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1661 = dot(vec4(cbModelParam._m0[40u]), vec4(_1616, _1617, _1618, 1.0));
        _1670 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1670 = 1.0;
    }
    float _1674 = (_1670 * cbModelParam._m0[1u].x) + (_1659 * (1.0 - cbModelParam._m0[1u].x));
    float _1684 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _658);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1684 : min(cbModelParam._m0[25u].z, _1684));
    float _1766;
    float _1768;
    float _1770;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1733 = fma(_907, cbModelParam._m0[13u].z, fma(_903, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _899)) + cbModelParam._m0[13u].w;
        float _1737 = fma(_907, cbModelParam._m0[14u].z, fma(_903, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _899)) + cbModelParam._m0[14u].w;
        float _1741 = fma(_907, cbModelParam._m0[15u].z, fma(_903, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _899)) + cbModelParam._m0[15u].w;
        float _1744 = fma(_845, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _843));
        float _1747 = fma(_845, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _843));
        float _1750 = fma(_845, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _843));
        float _1778;
        if (_1744 > 0.0)
        {
            _1778 = abs((1.0 - _1733) / _1744);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1733 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1778 = frontier_phi_17_15_ladder;
        }
        float _2003;
        if (_1747 > 0.0)
        {
            _2003 = abs((1.0 - _1737) / _1747);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1737 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2003 = frontier_phi_26_22_ladder;
        }
        float _2260;
        if (_1750 > 0.0)
        {
            _2260 = abs((1.0 - _1741) / _1750);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1741 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2260 = frontier_phi_38_33_ladder;
        }
        float _2262 = isnan(_2003) ? _1778 : (isnan(_1778) ? _2003 : min(_1778, _2003));
        float _2263 = isnan(_2260) ? _2262 : (isnan(_2262) ? _2260 : min(_2262, _2260));
        float _2267 = (_2263 * _1744) + _1733;
        float _2268 = (_2263 * _1747) + _1737;
        float _2269 = (_2263 * _1750) + _1741;
        float _2270 = _2263 * 9.9999997473787516355514526367188e-05;
        float _2272 = (-1.0) - _2270;
        float _2274 = _2270 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2269 > _2274) || ((_2269 < _2272) || ((_2268 > _2274) || ((_2268 < _2272) || ((_2267 < _2272) || (_2267 > _2274))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2269, cbModelParam._m0[9u].z, fma(_2268, cbModelParam._m0[9u].y, _2267 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2269, cbModelParam._m0[10u].z, fma(_2268, cbModelParam._m0[10u].y, _2267 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2269, cbModelParam._m0[11u].z, fma(_2268, cbModelParam._m0[11u].y, _2267 * cbModelParam._m0[11u].x))), _1685);
            frontier_phi_16_38_ladder = _2397.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2397.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2397.x * cbModelParam._m0[1u].y;
        }
        _1766 = frontier_phi_16_38_ladder_2;
        _1768 = frontier_phi_16_38_ladder_1;
        _1770 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1754 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_843, _844, _845), _1685);
        _1766 = _1754.x * cbModelParam._m0[1u].y;
        _1768 = _1754.y * cbModelParam._m0[1u].y;
        _1770 = _1754.z * cbModelParam._m0[1u].y;
    }
    float _1774 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _658);
    float _1775 = isnan(_1774) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1774 : min(cbModelParam._m0[25u].w, _1774));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1829 = fma(_907, cbModelParam._m0[21u].z, fma(_903, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _899)) + cbModelParam._m0[21u].w;
        float _1833 = fma(_907, cbModelParam._m0[22u].z, fma(_903, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _899)) + cbModelParam._m0[22u].w;
        float _1837 = fma(_907, cbModelParam._m0[23u].z, fma(_903, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _899)) + cbModelParam._m0[23u].w;
        float _1840 = fma(_845, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _843));
        float _1843 = fma(_845, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _843));
        float _1846 = fma(_845, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _843));
        float _2008;
        if (_1840 > 0.0)
        {
            _2008 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2008 = frontier_phi_28_24_ladder;
        }
        float _2287;
        if (_1843 > 0.0)
        {
            _2287 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2287 = frontier_phi_40_35_ladder;
        }
        float _2500;
        if (_1846 > 0.0)
        {
            _2500 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2500 = frontier_phi_49_46_ladder;
        }
        float _2502 = isnan(_2287) ? _2008 : (isnan(_2008) ? _2287 : min(_2008, _2287));
        float _2503 = isnan(_2500) ? _2502 : (isnan(_2502) ? _2500 : min(_2502, _2500));
        float _2507 = (_2503 * _1840) + _1829;
        float _2508 = (_2503 * _1843) + _1833;
        float _2509 = (_2503 * _1846) + _1837;
        float _2510 = _2503 * 9.9999997473787516355514526367188e-05;
        float _2511 = (-1.0) - _2510;
        float _2513 = _2510 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2509 > _2513) || ((_2509 < _2511) || ((_2508 > _2513) || ((_2508 < _2511) || ((_2507 < _2511) || (_2507 > _2513))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2708 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2509, cbModelParam._m0[17u].z, fma(_2508, cbModelParam._m0[17u].y, _2507 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2509, cbModelParam._m0[18u].z, fma(_2508, cbModelParam._m0[18u].y, _2507 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2509, cbModelParam._m0[19u].z, fma(_2508, cbModelParam._m0[19u].y, _2507 * cbModelParam._m0[19u].x))), _1775);
            frontier_phi_25_49_ladder = _2708.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2708.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2708.x * cbModelParam._m0[1u].z;
        }
        _1865 = frontier_phi_25_49_ladder_2;
        _1867 = frontier_phi_25_49_ladder_1;
        _1869 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_843, _844, _845), _1775);
        _1865 = _1849.x * cbModelParam._m0[1u].z;
        _1867 = _1849.y * cbModelParam._m0[1u].z;
        _1869 = _1849.z * cbModelParam._m0[1u].z;
    }
    float _1882 = (((_870 * _819) + _871) * _835) * ((cbModelParam._m0[1u].w * (_1865 - _1766)) + _1766);
    float _1884 = (((_870 * _821) + _871) * _835) * ((cbModelParam._m0[1u].w * (_1867 - _1768)) + _1768);
    float _1886 = (((_870 * _822) + _871) * _835) * ((cbModelParam._m0[1u].w * (_1869 - _1770)) + _1770);
    float _1889 = fma(_1886, cbSceneParam._m0[89u].z, fma(_1884, cbSceneParam._m0[89u].y, _1882 * cbSceneParam._m0[89u].x));
    float _1892 = fma(_1886, cbSceneParam._m0[90u].z, fma(_1884, cbSceneParam._m0[90u].y, _1882 * cbSceneParam._m0[90u].x));
    float _1895 = fma(_1886, cbSceneParam._m0[91u].z, fma(_1884, cbSceneParam._m0[91u].y, _1882 * cbSceneParam._m0[91u].x));
    vec4 _1903 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_755, _756));
    float _1905 = _1903.w;
    float _1917 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1905);
    float _1918 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1905);
    float _1919 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1905);
    uvec4 _1923 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1925 = _1923.x * 14u;
    uint _1926 = _1925 + 13u;
    float _1933 = _835 + (-1.0);
    float _1938 = (cbLight._m0[_1926].x * _1933) + 1.0;
    float _1939 = (cbLight._m0[_1926].y * _1933) + 1.0;
    float _1940 = (cbLight._m0[_1926].z * _1933) + 1.0;
    float _1941 = (cbLight._m0[_1926].w * _1933) + 1.0;
    uint _1942 = _1925 + 5u;
    float _1948 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
    uint _1952 = _1925 + 4u;
    float _1962 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
    uint _1966 = _1925 | 1u;
    float _1977 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_655, _656, _657));
    float _1980 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_655, _656, _657));
    float _4241 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _4252 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1985 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * 0.3183098733425140380859375;
    float _1987 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * 0.3183098733425140380859375;
    float _1994 = ((cbLight._m0[_1942].x * _1948) * _1987) + (((cbLight._m0[_1952].x * _1917) * _1962) * _1985);
    float _1995 = ((_1948 * cbLight._m0[_1942].y) * _1987) + (((cbLight._m0[_1952].y * _1918) * _1962) * _1985);
    float _1996 = ((_1948 * cbLight._m0[_1942].z) * _1987) + (((cbLight._m0[_1952].z * _1919) * _1962) * _1985);
    uvec4 _2000 = floatBitsToUint(cbLight._m0[_1925 + 12u]);
    bool _2002 = _2000.x == 0u;
    float _2013;
    float _2015;
    float _2017;
    if (_2002)
    {
        _2013 = _1994;
        _2015 = _1995;
        _2017 = _1996;
    }
    else
    {
        uint _2021 = _1925 + 6u;
        float _2037 = (dot(vec3(cbLight._m0[_1925 + 2u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2038 = _2037 * _2037;
        float _4263 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2039 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2040 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
        _2013 = (((cbLight._m0[_2021].x * 0.3183098733425140380859375) * _2039) * _2040) + _1994;
        _2015 = (((cbLight._m0[_2021].y * 0.3183098733425140380859375) * _2039) * _2040) + _1995;
        _2017 = (((cbLight._m0[_2021].z * 0.3183098733425140380859375) * _2039) * _2040) + _1996;
    }
    bool _2020 = _2000.y == 0u;
    float _2058;
    float _2060;
    float _2062;
    if (_2020)
    {
        _2058 = _2013;
        _2060 = _2015;
        _2062 = _2017;
    }
    else
    {
        uint _2231 = _1925 + 7u;
        float _2247 = (dot(vec3(cbLight._m0[_1925 + 3u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2248 = _2247 * _2247;
        float _4279 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2249 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2250 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2058 = (((cbLight._m0[_2231].x * 0.3183098733425140380859375) * _2249) * _2250) + _2013;
        _2060 = (((cbLight._m0[_2231].y * 0.3183098733425140380859375) * _2249) * _2250) + _2015;
        _2062 = (((cbLight._m0[_2231].z * 0.3183098733425140380859375) * _2249) * _2250) + _2017;
    }
    uint _2065 = _1925 + 8u;
    float _2078 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1925].w)) * _658) * 0.949999988079071044921875);
    float _2079 = _2078 * _2078;
    float _2080 = cbLight._m0[_1925].x + _734;
    float _2081 = cbLight._m0[_1925].y + _735;
    float _2082 = cbLight._m0[_1925].z + _736;
    float _2086 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
    float _2087 = _2086 * _2080;
    float _2088 = _2086 * _2081;
    float _2089 = _2086 * _2082;
    float _2090 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_1925].xyz));
    float _4295 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _4306 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _2094 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2095 = dot(vec3(_655, _656, _657), vec3(_2087, _2088, _2089));
    float _4317 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2099 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_2087, _2088, _2089));
    float _4328 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2103 = _2079 * _2079;
    float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
    float _2115 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
    float _2116 = 0.959999978542327880859375 - _816;
    float _2118 = 0.959999978542327880859375 - _817;
    float _2119 = 0.959999978542327880859375 - _818;
    float _2126 = 1.0 - _2079;
    float _2137 = (0.5 / (((_2094 * ((_2093 * _2126) + _2079)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2126) + _2079) * _2093))) * _2093;
    float _4339 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2139 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
    uint _2153 = _1925 + 9u;
    float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _658) * 0.949999988079071044921875);
    float _2165 = _2164 * _2164;
    float _2166 = cbLight._m0[_1966].x + _734;
    float _2167 = cbLight._m0[_1966].y + _735;
    float _2168 = cbLight._m0[_1966].z + _736;
    float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
    float _2173 = _2172 * _2166;
    float _2174 = _2172 * _2167;
    float _2175 = _2172 * _2168;
    float _2176 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_1966].xyz));
    float _4350 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2180 = dot(vec3(_655, _656, _657), vec3(_2173, _2174, _2175));
    float _4361 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2184 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_2173, _2174, _2175));
    float _4372 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2188 = _2165 * _2165;
    float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
    float _2199 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
    float _2206 = 1.0 - _2165;
    float _2216 = (0.5 / (((_2094 * ((_2179 * _2206) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2206) + _2165) * _2179))) * _2179;
    float _4383 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2218 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
    float _2228 = (((((_2199 * _2116) + _819) * cbLight._m0[_2153].x) * _2218) * _1948) + ((((cbLight._m0[_2065].x * _1917) * ((_2115 * _2116) + _819)) * _2139) * _1962);
    float _2229 = (((((_2199 * _2118) + _821) * cbLight._m0[_2153].y) * _2218) * _1948) + ((((cbLight._m0[_2065].y * _1918) * ((_2115 * _2118) + _821)) * _2139) * _1962);
    float _2230 = (((((_2199 * _2119) + _822) * cbLight._m0[_2153].z) * _2218) * _1948) + ((((cbLight._m0[_2065].z * _1919) * ((_2115 * _2119) + _822)) * _2139) * _1962);
    float _2292;
    float _2294;
    float _2296;
    if (_2002)
    {
        _2292 = _2228;
        _2294 = _2229;
        _2296 = _2230;
    }
    else
    {
        uint _2298 = _1925 + 2u;
        uint _2302 = _1925 + 10u;
        float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _658) * 0.949999988079071044921875);
        float _2317 = _2316 * _2316;
        float _2318 = cbLight._m0[_2298].x + _734;
        float _2319 = cbLight._m0[_2298].y + _735;
        float _2320 = cbLight._m0[_2298].z + _736;
        float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
        float _2325 = _2324 * _2318;
        float _2326 = _2324 * _2319;
        float _2327 = _2324 * _2320;
        float _2328 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2298].xyz));
        float _4394 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2332 = dot(vec3(_655, _656, _657), vec3(_2325, _2326, _2327));
        float _4405 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2336 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2325, _2326, _2327));
        float _4416 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2340 = _2317 * _2317;
        float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
        float _2351 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
        float _2358 = 1.0 - _2317;
        float _2368 = (0.5 / (((_2094 * ((_2331 * _2358) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2358) + _2317) * _2331))) * _2331;
        float _4427 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2370 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
        float _2371 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
        _2292 = (((((_2351 * _2116) + _819) * cbLight._m0[_2302].x) * _2370) * _2371) + _2228;
        _2294 = (((((_2351 * _2118) + _821) * cbLight._m0[_2302].y) * _2370) * _2371) + _2229;
        _2296 = (((((_2351 * _2119) + _822) * cbLight._m0[_2302].z) * _2370) * _2371) + _2230;
    }
    float _2406;
    float _2408;
    float _2410;
    if (_2020)
    {
        _2406 = _2292;
        _2408 = _2294;
        _2410 = _2296;
    }
    else
    {
        uint _2417 = _1925 + 3u;
        uint _2421 = _1925 + 11u;
        float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _658) * 0.949999988079071044921875);
        float _2436 = _2435 * _2435;
        float _2437 = cbLight._m0[_2417].x + _734;
        float _2438 = cbLight._m0[_2417].y + _735;
        float _2439 = cbLight._m0[_2417].z + _736;
        float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
        float _2444 = _2443 * _2437;
        float _2445 = _2443 * _2438;
        float _2446 = _2443 * _2439;
        float _2447 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2417].xyz));
        float _4443 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2451 = dot(vec3(_655, _656, _657), vec3(_2444, _2445, _2446));
        float _4454 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2455 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2444, _2445, _2446));
        float _4465 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2459 = _2436 * _2436;
        float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
        float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
        float _2477 = 1.0 - _2436;
        float _2487 = (0.5 / (((_2094 * ((_2450 * _2477) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2477) + _2436) * _2450))) * _2450;
        float _4476 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2489 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
        float _2490 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2406 = (((((_2470 * _2116) + _819) * cbLight._m0[_2421].x) * _2489) * _2490) + _2292;
        _2408 = (((((_2470 * _2118) + _821) * cbLight._m0[_2421].y) * _2489) * _2490) + _2294;
        _2410 = (((((_2470 * _2119) + _822) * cbLight._m0[_2421].z) * _2489) * _2490) + _2296;
    }
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    if (_1923.y == 0u)
    {
        float _2565 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2565;
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2565;
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2565;
        uvec4 _2580 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2581 = _2580.x;
        uint _2592 = uint((float(_2580.y) * floor(float(uint(cbSceneParam._m0[85u].y * _756) / _2581))) + floor(float(uint(cbSceneParam._m0[85u].x * _755) / _2581)));
        float _2602 = (log2(_2568 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2603 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        uint _2606 = uint(isnan(14.0) ? _2603 : (isnan(_2603) ? 14.0 : min(_2603, 14.0)));
        uvec4 _2611 = texelFetch(g_lightClusterGridBuffer, int(((_2606 << 2u) + (_2592 << 6u)) >> 2u));
        uint _2612 = _2611.x;
        uint _2613 = _2580.z;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((((1u << ((_2613 >> 4u) & 15u)) + 4294967295u) & _2612) == 0u) || ((_2613 & 240u) == 0u))
        {
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
        }
        else
        {
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            uint _2871 = 0u;
            uint _2880;
            bool _2881;
            for (;;)
            {
                _2880 = texelFetch(g_lightClassification, int((((_2606 << 5u) + (_2592 << 9u)) + (_2871 << 2u)) >> 2u)).x;
                _2881 = _2880 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2881)
                {
                    frontier_phi_66_pred = _2865;
                    frontier_phi_66_pred_1 = _2870;
                    frontier_phi_66_pred_2 = _2869;
                    frontier_phi_66_pred_3 = _2868;
                    frontier_phi_66_pred_4 = _2867;
                    frontier_phi_66_pred_5 = _2866;
                }
                else
                {
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    uint _3016;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2870;
                    _3016 = _2880;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    for (;;)
                    {
                        uint _3020 = uint(findLSB(_3016)) + (_2871 << 5u);
                        uint _3017 = (_3016 + 4294967295u) & _3016;
                        uint _3022 = _3020 * 48u;
                        vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 3u)).x));
                        uint _3042 = (_3020 * 48u) + 4u;
                        vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3042)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 3u)).x));
                        uint _3061 = (_3020 * 48u) + 8u;
                        vec3 _3072 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x));
                        float _3076 = _3036.x - _2566;
                        float _3077 = _3036.y - _2567;
                        float _3078 = _3036.z - _2568;
                        float _3079 = dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078));
                        float _3082 = inversesqrt(_3079);
                        float _3083 = _3082 * _3076;
                        float _3084 = _3082 * _3077;
                        float _3085 = _3082 * _3078;
                        float _3086 = dot(vec3(_776, _779, _782), vec3(_3083, _3084, _3085));
                        float _3091 = 1.0 - (_3079 * _3036.w);
                        float _4502 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3092 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3093 = sqrt(_3079) * _3055.w;
                        float _3096 = 1.39999997615814208984375 / (_3093 + 1.39999997615814208984375);
                        float _3097 = _3096 * _3096;
                        float _3100 = ((1.0 - _3097) * _3086) + _3097;
                        float _3103 = _3093 * _3093;
                        float _3107 = ((isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0))) * _3092) / ((_3103 * 0.699999988079071044921875) + 1.0);
                        float _3111 = (-0.0) - _2566;
                        float _3112 = (-0.0) - _2567;
                        float _3113 = (-0.0) - _2568;
                        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                        float _3118 = _3117 * _3111;
                        float _3119 = _3117 * _3112;
                        float _3120 = _3117 * _3113;
                        float _3128 = exp2(log2(1.0 / ((_3103 * 3.5) + 5.0)) * 0.25);
                        float _3129 = 1.0 - _851;
                        float _3136 = sqrt(1.0 - ((1.0 - (_3129 * _3129)) * (1.0 - (_3128 * _3128))));
                        float _3137 = _3136 * _3136;
                        float _3138 = _3137 * _3137;
                        float _3139 = _3118 + _3083;
                        float _3140 = _3119 + _3084;
                        float _3141 = _3120 + _3085;
                        float _3145 = inversesqrt(dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141)));
                        float _3149 = dot(vec3(_776, _779, _782), vec3(_3118, _3119, _3120));
                        float _4518 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3152 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3153 = dot(vec3(_776, _779, _782), vec3(_3145 * _3139, _3145 * _3140, _3145 * _3141));
                        float _4529 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3156 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3160 = ((_3156 * _3156) * (_3138 + (-1.0))) + 1.0;
                        float _3161 = _3096 * _3137;
                        float _3162 = _3161 * _3161;
                        float _3165 = ((1.0 - _3162) * _3086) + _3162;
                        float _4540 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3166 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3167 = 1.0 - _3137;
                        float _3177 = (0.5 / (((_3166 * ((_3152 * _3167) + _3137)) + 9.9999999392252902907785028219223e-09) + (((_3166 * _3167) + _3137) * _3152))) * _3166;
                        float _4551 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3188 = (((_3138 * 3.1415927410125732421875) * (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) / ((_3160 * _3160) * ((_3103 * 2.1991131305694580078125) + 3.141590118408203125))) * _3092;
                        _2940 = (_3107 * _3055.x) + _3013;
                        _2941 = (_3107 * _3055.y) + _3014;
                        _2942 = (_3107 * _3055.z) + _3015;
                        _2937 = (_3188 * _3072.x) + _3010;
                        _2938 = (_3188 * _3072.y) + _3011;
                        _2939 = (_3188 * _3072.z) + _3012;
                        if (_3017 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3010 = _2937;
                            _3011 = _2938;
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _2941;
                            _3015 = _2942;
                            _3016 = _3017;
                        }
                    }
                    frontier_phi_66_pred = _2937;
                    frontier_phi_66_pred_1 = _2942;
                    frontier_phi_66_pred_2 = _2941;
                    frontier_phi_66_pred_3 = _2940;
                    frontier_phi_66_pred_4 = _2939;
                    frontier_phi_66_pred_5 = _2938;
                }
                _2714 = frontier_phi_66_pred;
                _2724 = frontier_phi_66_pred_1;
                _2722 = frontier_phi_66_pred_2;
                _2720 = frontier_phi_66_pred_3;
                _2718 = frontier_phi_66_pred_4;
                _2716 = frontier_phi_66_pred_5;
                uint _2872 = _2871 + 1u;
                if (_2872 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2865 = _2714;
                    _2866 = _2716;
                    _2867 = _2718;
                    _2868 = _2720;
                    _2869 = _2722;
                    _2870 = _2724;
                    _2871 = _2872;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
        }
        uvec4 _2727 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2728 = _2727.z;
        uint _2730 = (_2728 >> 8u) & 15u;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        if (((4294967295u << _2730) & _2612) == 0u)
        {
            _2833 = _2713;
            _2835 = _2715;
            _2837 = _2717;
            _2839 = _2719;
            _2841 = _2721;
            _2843 = _2723;
        }
        else
        {
            float _2858 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
            float _2859 = _2858 * _2566;
            float _2860 = _2858 * _2567;
            float _2861 = _2858 * _2568;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2730 < ((_2728 >> 12u) & 15u))
            {
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2993 = _2713;
                float _2994 = _2715;
                float _2995 = _2717;
                float _2996 = _2719;
                float _2997 = _2721;
                float _2998 = _2723;
                uint _2999 = _2730;
                uint _3008;
                bool _3009;
                for (;;)
                {
                    _3008 = texelFetch(g_lightClassification, int((((_2606 << 5u) + (_2592 << 9u)) + (_2999 << 2u)) >> 2u)).x;
                    _3009 = _3008 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3009)
                    {
                        frontier_phi_77_pred = _2998;
                        frontier_phi_77_pred_1 = _2997;
                        frontier_phi_77_pred_2 = _2996;
                        frontier_phi_77_pred_3 = _2995;
                        frontier_phi_77_pred_4 = _2994;
                        frontier_phi_77_pred_5 = _2993;
                    }
                    else
                    {
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3215 = _2993;
                        float _3216 = _2994;
                        float _3217 = _2995;
                        float _3218 = _2996;
                        float _3219 = _2997;
                        float _3220 = _2998;
                        uint _3221 = _3008;
                        uint _3222;
                        vec4 _3247;
                        float _3248;
                        vec4 _3263;
                        vec3 _3275;
                        vec4 _3291;
                        vec4 _3306;
                        float _3352;
                        bool _3353;
                        for (;;)
                        {
                            uint _3232 = ((_2999 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3221));
                            _3222 = (_3221 + 4294967295u) & _3221;
                            uint _3234 = _3232 * 40u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            _3248 = _3247.w;
                            uint _3250 = (_3232 * 40u) + 4u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3265 = (_3232 * 40u) + 8u;
                            _3275 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x));
                            uint _3278 = (_3232 * 40u) + 16u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3293 = (_3232 * 40u) + 20u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3308 = (_3232 * 40u) + 24u;
                            vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3327 = (_3232 * 40u) + 28u;
                            vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            _3352 = fma(_2568, _3340.z, fma(_2567, _3340.y, _3340.x * _2566)) + _3340.w;
                            _3353 = !((fma(_2568, _3321.z, fma(_2567, _3321.y, _3321.x * _2566)) + _3321.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3353)
                            {
                                float _3380 = _3247.x - _2566;
                                float _3381 = _3247.y - _2567;
                                float _3382 = _3247.z - _2568;
                                float _3383 = dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382));
                                float _3386 = inversesqrt(_3383);
                                float _3387 = _3386 * _3380;
                                float _3388 = _3386 * _3381;
                                float _3389 = _3386 * _3382;
                                float _3393 = 1.0 - (_3383 / (_3248 * _3248));
                                float _4562 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3398 = sqrt(_3383) * _3263.w;
                                float _3400 = 1.39999997615814208984375 / (_3398 + 1.39999997615814208984375);
                                float _3401 = _3400 * _3400;
                                float _3404 = ((1.0 - _3401) * dot(vec3(_3387, _3388, _3389), vec3(_776, _779, _782))) + _3401;
                                float _3407 = _3398 * _3398;
                                float _3411 = (fma(_2568, _3291.z, fma(_2567, _3291.y, _3291.x * _2566)) + _3291.w) / _3352;
                                float _3412 = (fma(_2568, _3306.z, fma(_2567, _3306.y, _3306.x * _2566)) + _3306.w) / _3352;
                                float _3416 = 1.0 - dot(vec2(_3411, _3412), vec2(_3411, _3412));
                                float _4578 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3417 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3418 = _3417 * (((isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0))) * _3394) / ((_3407 * 0.699999988079071044921875) + 1.0));
                                float _3430 = exp2(log2(1.0 / ((_3407 * 3.5) + 5.0)) * 0.25);
                                float _3431 = 1.0 - _851;
                                float _3438 = sqrt(1.0 - ((1.0 - (_3431 * _3431)) * (1.0 - (_3430 * _3430))));
                                float _3439 = _3438 * _3438;
                                float _3440 = _3439 * _3439;
                                float _3441 = _3387 - _2859;
                                float _3442 = _3388 - _2860;
                                float _3443 = _3389 - _2861;
                                float _3447 = inversesqrt(dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443)));
                                float _3451 = dot(vec3(_776, _779, _782), vec3((-0.0) - _2859, (-0.0) - _2860, (-0.0) - _2861));
                                float _4589 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3454 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3455 = dot(vec3(_776, _779, _782), vec3(_3447 * _3441, _3447 * _3442, _3447 * _3443));
                                float _4600 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3458 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3462 = ((_3458 * _3458) * (_3440 + (-1.0))) + 1.0;
                                float _3463 = _3400 * _3439;
                                float _3464 = _3463 * _3463;
                                float _3470 = ((1.0 - _3464) * dot(vec3(_776, _779, _782), vec3(_3387, _3388, _3389))) + _3464;
                                float _4611 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3471 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3472 = 1.0 - _3439;
                                float _3482 = (0.5 / (((_3471 * ((_3454 * _3472) + _3439)) + 9.9999999392252902907785028219223e-09) + (((_3471 * _3472) + _3439) * _3454))) * _3471;
                                float _4622 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3492 = (_3417 * _3394) * (((_3440 * 3.1415927410125732421875) * (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) / ((_3462 * _3462) * ((_3407 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3418 * _3263.y;
                                frontier_phi_83_pred_1 = _3418 * _3263.x;
                                frontier_phi_83_pred_2 = _3492 * _3275.z;
                                frontier_phi_83_pred_3 = _3492 * _3275.y;
                                frontier_phi_83_pred_4 = _3492 * _3275.x;
                                frontier_phi_83_pred_5 = _3418 * _3263.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3500 = frontier_phi_83_pred;
                            _3499 = frontier_phi_83_pred_1;
                            _3498 = frontier_phi_83_pred_2;
                            _3497 = frontier_phi_83_pred_3;
                            _3496 = frontier_phi_83_pred_4;
                            _3501 = frontier_phi_83_pred_5;
                            _3205 = _3499 + _3218;
                            _3206 = _3500 + _3219;
                            _3207 = _3501 + _3220;
                            _3202 = _3496 + _3215;
                            _3203 = _3497 + _3216;
                            _3204 = _3498 + _3217;
                            if (_3222 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3222;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3207;
                        frontier_phi_77_pred_1 = _3206;
                        frontier_phi_77_pred_2 = _3205;
                        frontier_phi_77_pred_3 = _3204;
                        frontier_phi_77_pred_4 = _3203;
                        frontier_phi_77_pred_5 = _3202;
                    }
                    _2844 = frontier_phi_77_pred;
                    _2842 = frontier_phi_77_pred_1;
                    _2840 = frontier_phi_77_pred_2;
                    _2838 = frontier_phi_77_pred_3;
                    _2836 = frontier_phi_77_pred_4;
                    _2834 = frontier_phi_77_pred_5;
                    uint _3000 = _2999 + 1u;
                    if (_3000 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2993 = _2834;
                        _2994 = _2836;
                        _2995 = _2838;
                        _2996 = _2840;
                        _2997 = _2842;
                        _2998 = _2844;
                        _2999 = _3000;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2838;
                frontier_phi_58_59_ladder_1 = _2844;
                frontier_phi_58_59_ladder_2 = _2842;
                frontier_phi_58_59_ladder_3 = _2840;
                frontier_phi_58_59_ladder_4 = _2836;
                frontier_phi_58_59_ladder_5 = _2834;
            }
            else
            {
                frontier_phi_58_59_ladder = _2717;
                frontier_phi_58_59_ladder_1 = _2723;
                frontier_phi_58_59_ladder_2 = _2721;
                frontier_phi_58_59_ladder_3 = _2719;
                frontier_phi_58_59_ladder_4 = _2715;
                frontier_phi_58_59_ladder_5 = _2713;
            }
            _2833 = frontier_phi_58_59_ladder_5;
            _2835 = frontier_phi_58_59_ladder_4;
            _2837 = frontier_phi_58_59_ladder;
            _2839 = frontier_phi_58_59_ladder_3;
            _2841 = frontier_phi_58_59_ladder_2;
            _2843 = frontier_phi_58_59_ladder_1;
        }
        float _2848 = isnan(1.0) ? _835 : (isnan(_835) ? 1.0 : min(_835, 1.0));
        _2625 = (_2848 * _2839) + _2058;
        _2627 = (_2848 * _2841) + _2060;
        _2629 = (_2848 * _2843) + _2062;
        _2631 = ((_2833 * _819) * _2848) + _2406;
        _2633 = ((_2835 * _821) * _2848) + _2408;
        _2635 = ((_2837 * _822) * _2848) + _2410;
    }
    else
    {
        _2625 = _2058;
        _2627 = _2060;
        _2629 = _2062;
        _2631 = _2406;
        _2633 = _2408;
        _2635 = _2410;
    }
    float _4638 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4649 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4660 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _2652 = ((isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2625 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _835))) + ((_2631 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    float _2653 = ((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2627 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _835))) + ((_2633 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    float _2654 = ((isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2629 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _835))) + ((_2635 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    uint _2655 = _247 + 6u;
    float _2663 = _755 / cbSceneParam._m0[86u].x;
    float _2664 = _756 / cbSceneParam._m0[86u].y;
    vec4 _2678 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, (log2((isnan(cbSceneParam._m0[77u].w) ? _677 : (isnan(_677) ? cbSceneParam._m0[77u].w : min(_677, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2680 = _2678.x;
    float _2681 = _2678.y;
    float _2682 = _2678.z;
    float _2683 = _2678.w;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    if (_677 > cbSceneParam._m0[78u].w)
    {
        float _2738 = isnan(_677) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _677 : min(cbSceneParam._m0[80u].w, _677));
        float _2739 = _2738 / _677;
        float _2750 = _2739 * _727;
        float _2751 = _728 * _2739;
        float _2752 = (-0.0) - _2751;
        float _2753 = _2739 * _729;
        float _2755 = (cbSceneParam._m0[77u].w * _2752) / _2738;
        float _2756 = _2755 + cbSceneParam._m0[79u].w;
        float _2757 = cbSceneParam._m0[79u].w - _2751;
        float _2763 = sqrt(((_2750 * _2750) + (_2751 * _2751)) + (_2753 * _2753));
        float _2766 = (1.0 - (cbSceneParam._m0[77u].w / _2738)) * _2763;
        float _2771 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2773 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2950;
        if (abs((_2752 - _2755) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2950 = ((((_2756 > 0.0) ? exp2(_2771 * _2756) : (2.0 - exp2(_2773 * _2756))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2766;
        }
        else
        {
            float _2894 = 1.0 / cbSceneParam._m0[80u].x;
            float _2895 = isnan(_2757) ? _2756 : (isnan(_2756) ? _2757 : max(_2756, _2757));
            float _2896 = isnan(_2757) ? _2756 : (isnan(_2756) ? _2757 : min(_2756, _2757));
            float _2905 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : min(_2895, 0.0));
            float _2906 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : min(_2896, 0.0));
            _2950 = ((abs(_2763 / _2752) * cbSceneParam._m0[80u].y) * ((((_2905 - _2906) * 2.0) - ((exp2(_2771 * (isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0)))) - exp2(_2771 * (isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0))))) * _2894)) - ((exp2(_2773 * _2905) - exp2(_2773 * _2906)) * _2894))) + (_2766 * cbSceneParam._m0[80u].z);
        }
        vec4 _2952 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, 1.0), 0.0);
        float _2961 = exp2((_2950 * (-1.44269502162933349609375)) * (1.0 - _2952.w));
        float _2962 = log2(_2961);
        float _2978 = log2(_2683);
        _2775 = (exp2(_2978 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2962 * cbSceneParam._m0[78u].x)) * _2952.x) / cbSceneParam._m0[78u].x)) + _2680;
        _2777 = (exp2(_2978 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2962 * cbSceneParam._m0[78u].y)) * _2952.y) / cbSceneParam._m0[78u].y)) + _2681;
        _2779 = (exp2(_2978 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2962 * cbSceneParam._m0[78u].z)) * _2952.z) / cbSceneParam._m0[78u].z)) + _2682;
        _2781 = _2961 * _2683;
    }
    else
    {
        _2775 = _2680;
        _2777 = _2681;
        _2779 = _2682;
        _2781 = _2683;
    }
    bool _2988;
    vec4 _2791;
    vec4 _2813;
    float _2815;
    float _2819;
    float _2820;
    float _2821;
    float _2822;
    bool _2832;
    for (;;)
    {
        _2791 = cbMatDynParam._m0[0u];
        float _2793 = roundEven(_2791.y);
        bool _2794 = _2793 == 3.0;
        float _2795 = log2(_2781);
        float _2802 = exp2(_2795 * cbSceneParam._m0[78u].x) * _2652;
        float _2803 = exp2(_2795 * cbSceneParam._m0[78u].y) * _2653;
        float _2804 = exp2(_2795 * cbSceneParam._m0[78u].z) * _2654;
        float _2811 = _743 + (-0.5);
        _2813 = cbMtdParam._m0[1u];
        _2815 = _2813.y * _2811;
        float _2818 = (_2793 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2819 = _2818 * (_2794 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2775)));
        _2820 = _2818 * (_2794 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2777)));
        _2821 = _2818 * (_2794 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2779)));
        _2822 = _2811 * 0.999000012874603271484375;
        _2832 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2832)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _2822) < 0.5)
            {
                _2988 = true;
                break;
            }
        }
        uint _2929 = _795 + uint(_2791.w);
        if ((cbInstanceData._m0[_2929].w < 1.0) && ((cbInstanceData._m0[_2929].w + _2822) < 0.5))
        {
            _2988 = true;
            break;
        }
        if ((_2815 + 1.0) < _2813.x)
        {
            _2988 = true;
            break;
        }
        _2988 = false;
        break;
    }
    float _3193;
    if (_2988)
    {
        discard_state = true;
        _3193 = 0.0;
    }
    else
    {
        _3193 = cbInstanceData._m0[_2655].w;
    }
    SV_Target.x = _2819;
    SV_Target.y = _2820;
    SV_Target.z = _2821;
    SV_Target.w = _3193;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2655].w;
    discard_exit();
}


