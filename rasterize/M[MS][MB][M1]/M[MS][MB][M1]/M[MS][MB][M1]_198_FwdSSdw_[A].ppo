#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1399;
float _3801;
float _3802;
float _3803;
float _3804;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _256 + 1u;
    uint _266 = _256 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _365 = _363.x;
    float _377 = dot(vec4(_365, _363.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _394 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_365 - _377) * cbMtdParam._m0[24u].y) + _377) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3813 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _402 = (_395 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _403 = (_395 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _404 = (_395 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _453 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _467 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_443 - _453) * cbMtdParam._m0[24u].y) + _453) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3824 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _475 = (_468 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402;
    float _476 = (_468 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403;
    float _477 = (_468 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404;
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _555 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _557 = _555.x;
    float _558 = _555.y;
    float _559 = _555.z;
    float _566 = ((_538.x - _557) * _395) + _557;
    float _567 = ((_538.y - _558) * _395) + _558;
    float _568 = ((_538.z - _559) * _395) + _559;
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _593 = ((_580.z - _568) * _468) + _568;
    float _596 = ((((_580.x - _566) * _468) + _566) * 2.0) + (-1.0);
    float _597 = ((((_580.y - _567) * _468) + _567) * 2.0) + (-1.0);
    float _598 = dot(vec2(_596, _597), vec2(_596, _597));
    float _3835 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _603 = sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))));
    vec4 _617 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _642 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _644 = _642.x;
    float _645 = 1.0 - _644;
    float _658 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_644 - _645) * cbMtdParam._m0[24u].z) + _645) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3846 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _659 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _666 = (_659 * ((_496.x * cbMtdParam._m0[18u].x) - _475)) + _475;
    float _667 = (_659 * ((_496.y * cbMtdParam._m0[18u].y) - _476)) + _476;
    float _668 = (_659 * ((_496.z * cbMtdParam._m0[18u].z) - _477)) + _477;
    vec4 _680 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _694 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _696 = _694.x;
    float _714 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _696) * _395) + _696;
    float _731 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _714) * _468) + _714;
    float _735 = ((_680.x - _731) * cbMtdParam._m0[19u].z) + _731;
    float _737 = _735 - (_735 * _659);
    float _742 = (((_515.z - _593) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _593;
    float _746 = ((_617.z - _742) * cbMtdParam._m0[19u].w) + _742;
    vec4 _759 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _766 = (_759.x * 2.0) + (-1.0);
    float _767 = (_759.y * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _3857 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _776 = (_659 * (_759.z - _746)) + _746;
    float _785 = (_596 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_515.x * 2.0) + (-1.0)))) + (((_617.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _786 = (_597 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_515.y * 2.0) + (-1.0)))) + (((_617.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _798 = (((_766 - _785) + (cbMtdParam._m0[21u].x * _785)) * _659) + _785;
    float _799 = (((_767 - _786) + (cbMtdParam._m0[21u].x * _786)) * _659) + _786;
    float _800 = (_659 * (sqrt(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) - _603)) + _603;
    float _805 = cbMtdParam._m0[22u].x + _617.w;
    float _808 = fma(_800, _243 * NORMAL.x, fma(_799, _250 * TANGENT.x, (_236 * _228) * _798));
    float _811 = fma(_800, _243 * NORMAL.y, fma(_799, _250 * TANGENT.y, (_236 * _229) * _798));
    float _814 = fma(_800, _243 * NORMAL.z, fma(_799, _250 * TANGENT.z, (_236 * _230) * _798));
    float _818 = inversesqrt(dot(vec3(_808, _811, _814), vec3(_808, _811, _814)));
    float _819 = _818 * _808;
    float _820 = _818 * _811;
    float _821 = _818 * _814;
    float _3868 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _822 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _3890 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3901 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3912 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3923 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _827 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _841 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _892 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _882);
    float _893 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _882);
    float _894 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _882);
    float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
    float _899 = _892 * _898;
    float _900 = _893 * _898;
    float _901 = _894 * _898;
    vec4 _906 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _908 = _906.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1080 = sqrt(((_892 * _892) + (_893 * _893)) + (_894 * _894));
        float _1086 = (cbMatDynParam._m0[5u].x * _1080) + cbMatDynParam._m0[5u].y;
        float _3934 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1091 = (cbMatDynParam._m0[5u].z * _1080) + cbMatDynParam._m0[5u].w;
        float _3945 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) - _1087)) + _1087) < ((_908 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _919 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _920 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _938 = fma(_821, cbSceneParam._m0[5u].z, fma(_820, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _819));
    float _941 = fma(_821, cbSceneParam._m0[6u].z, fma(_820, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _819));
    float _944 = fma(_821, cbSceneParam._m0[7u].z, fma(_820, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _819));
    uint _957 = _256 + 9u;
    uint _958 = _957 + uint(cbMatDynParam._m0[0u].w);
    float _964 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_958].x;
    float _965 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_958].y;
    float _966 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_958].z;
    float _3956 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _970 = 1.0 - _827;
    float _971 = _967 * _970;
    float _972 = _968 * _970;
    float _973 = _969 * _970;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _827;
    float _979 = (_968 + (-0.039999999105930328369140625)) * _827;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _827;
    float _981 = _978 + 0.039999999105930328369140625;
    float _983 = _979 + 0.039999999105930328369140625;
    float _984 = _980 + 0.039999999105930328369140625;
    vec4 _993 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _919, cbSceneParam._m0[86u].y * _920));
    float _997 = ((isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * TEXCOORD_5.w) * _993.x;
    float _998 = dot(vec3(_819, _820, _821), vec3(_899, _900, _901));
    float _1001 = _998 * 2.0;
    float _1005 = (_1001 * _819) - _899;
    float _1006 = (_1001 * _820) - _900;
    float _1007 = (_1001 * _821) - _901;
    float _1011 = abs(dot(vec3(_899, _900, _901), vec3(_819, _820, _821)));
    float _3989 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1013 = sqrt(_822);
    float _1026 = exp2((_1013 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1013 * 3.0));
    float _1032 = (1.0 - _1026) * ((_1013 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1033 = _1026 * _1013;
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1398;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1123 = fma(_1069, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061));
        float _1127 = fma(_1069, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061));
        float _1131 = fma(_1069, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061));
        float _1156 = _1061 + _819;
        float _1157 = _1065 + _820;
        float _1158 = _1069 + _821;
        float _1168 = fma(_1158, cbModelParam._m0[26u].z, fma(_1157, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1156)) - _1123;
        float _1169 = fma(_1158, cbModelParam._m0[27u].z, fma(_1157, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1156)) - _1127;
        float _1170 = fma(_1158, cbModelParam._m0[28u].z, fma(_1157, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1156)) - _1131;
        float _1174 = inversesqrt(dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170)));
        float _1187 = ((_1174 * _1168) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1123 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1174 * _1169) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1127 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1174 * _1170) / cbModelParam._m0[34u].z) + ((((((_1131 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1226 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1192.x + (-0.5));
        float _1228 = _1226 * (_1192.y + (-0.5));
        float _1229 = _1226 * (_1192.z + (-0.5));
        float _1236 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1199.x + (-0.5));
        float _1238 = _1236 * (_1199.y + (-0.5));
        float _1239 = _1236 * (_1199.z + (-0.5));
        float _1246 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1206.x + (-0.5));
        float _1248 = _1246 * (_1206.y + (-0.5));
        float _1249 = _1246 * (_1206.z + (-0.5));
        float _1256 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1213.x + (-0.5));
        float _1258 = _1256 * (_1213.y + (-0.5));
        float _1259 = _1256 * (_1213.z + (-0.5));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = _1227 * 0.5;
        float _1264 = _1237 * 0.5;
        float _1265 = _1247 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1280 = (dot(vec3(_819, _820, _821), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1290 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4037 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1292 + 1.0))) + _1297) * _1260;
        float _1307 = _1228 * 0.5;
        float _1308 = _1238 * 0.5;
        float _1309 = _1248 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_819, _820, _821), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4070 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1334 + 1.0))) + _1339) * _1261;
        float _1349 = _1229 * 0.5;
        float _1350 = _1239 * 0.5;
        float _1351 = _1249 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_819, _820, _821), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4103 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1376 + 1.0))) + _1381) * _1262;
        _1398 = _1229;
        _1400 = _1228;
        _1401 = _1227;
        _1402 = _1239;
        _1403 = _1238;
        _1404 = _1237;
        _1405 = _1249;
        _1406 = _1248;
        _1407 = _1247;
        _1408 = _1262;
        _1409 = _1261;
        _1410 = _1260;
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
    }
    else
    {
        _1398 = _1399;
        _1400 = _1399;
        _1401 = _1399;
        _1402 = _1399;
        _1403 = _1399;
        _1404 = _1399;
        _1405 = _1399;
        _1406 = _1399;
        _1407 = _1399;
        _1408 = _1399;
        _1409 = _1399;
        _1410 = _1399;
        _1411 = 0.0;
        _1412 = 0.0;
        _1413 = 0.0;
    }
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1440 = fma(_1069, cbModelParam._m0[30u].z, fma(_1065, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061));
        float _1444 = fma(_1069, cbModelParam._m0[31u].z, fma(_1065, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061));
        float _1448 = fma(_1069, cbModelParam._m0[32u].z, fma(_1065, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061));
        float _1471 = _1061 + _819;
        float _1472 = _1065 + _820;
        float _1473 = _1069 + _821;
        float _1483 = fma(_1473, cbModelParam._m0[30u].z, fma(_1472, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1471)) - _1440;
        float _1484 = fma(_1473, cbModelParam._m0[31u].z, fma(_1472, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1471)) - _1444;
        float _1485 = fma(_1473, cbModelParam._m0[32u].z, fma(_1472, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1471)) - _1448;
        float _1489 = inversesqrt(dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485)));
        float _1502 = ((_1489 * _1483) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1440 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1503 = ((_1489 * _1484) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1444 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1504 = ((_1489 * _1485) / cbModelParam._m0[35u].z) + ((((((_1448 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        float _1539 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1506.x + (-0.5));
        float _1541 = _1539 * (_1506.y + (-0.5));
        float _1542 = _1539 * (_1506.z + (-0.5));
        float _1549 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1513.x + (-0.5));
        float _1551 = _1549 * (_1513.y + (-0.5));
        float _1552 = _1549 * (_1513.z + (-0.5));
        float _1559 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1520.x + (-0.5));
        float _1561 = _1559 * (_1520.y + (-0.5));
        float _1562 = _1559 * (_1520.z + (-0.5));
        float _1569 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1527.x + (-0.5));
        float _1571 = _1569 * (_1527.y + (-0.5));
        float _1572 = _1569 * (_1527.z + (-0.5));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = _1540 * 0.5;
        float _1577 = _1550 * 0.5;
        float _1578 = _1560 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_819, _820, _821), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4166 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1603 + 1.0))) + _1608) * _1573;
        float _1618 = _1541 * 0.5;
        float _1619 = _1551 * 0.5;
        float _1620 = _1561 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_819, _820, _821), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4199 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1645 + 1.0))) + _1650) * _1574;
        float _1660 = _1542 * 0.5;
        float _1661 = _1552 * 0.5;
        float _1662 = _1562 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_819, _820, _821), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4232 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1687 + 1.0))) + _1692) * _1575;
        _1709 = _1542;
        _1710 = _1541;
        _1711 = _1540;
        _1712 = _1552;
        _1713 = _1551;
        _1714 = _1550;
        _1715 = _1562;
        _1716 = _1561;
        _1717 = _1560;
        _1718 = _1575;
        _1719 = _1574;
        _1720 = _1573;
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
    }
    else
    {
        _1709 = _1399;
        _1710 = _1399;
        _1711 = _1399;
        _1712 = _1399;
        _1713 = _1399;
        _1714 = _1399;
        _1715 = _1399;
        _1716 = _1399;
        _1717 = _1399;
        _1718 = _1399;
        _1719 = _1399;
        _1720 = _1399;
        _1721 = 0.0;
        _1722 = 0.0;
        _1723 = 0.0;
    }
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1411)) + _1411;
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1412)) + _1412;
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1413)) + _1413;
    float _1756 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1733 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1733 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1733));
    float _1777 = _1005 * 0.5;
    float _1778 = _1006 * 0.5;
    float _1779 = _1007 * 0.5;
    float _1780 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1783 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1786 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1820;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1793 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1398, _1402, _1405, _1408));
        float _1797 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1400, _1403, _1406, _1409));
        float _1801 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1401, _1404, _1407, _1410));
        float _1808 = dot(vec4(cbModelParam._m0[39u]), vec4(_1777, _1778, _1779, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1831;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1822 = dot(vec4(cbModelParam._m0[40u]), vec4(_1777, _1778, _1779, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1835 = (_1831 * cbModelParam._m0[1u].x) + (_1820 * (1.0 - cbModelParam._m0[1u].x));
    float _1845 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _822);
    float _1846 = isnan(_1845) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1845 : min(cbModelParam._m0[25u].z, _1845));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1893 = fma(_1069, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061)) + cbModelParam._m0[13u].w;
        float _1897 = fma(_1069, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061)) + cbModelParam._m0[14u].w;
        float _1901 = fma(_1069, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061)) + cbModelParam._m0[15u].w;
        float _1904 = fma(_1007, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005));
        float _1907 = fma(_1007, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005));
        float _1910 = fma(_1007, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005));
        float _1938;
        if (_1904 > 0.0)
        {
            _1938 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1938 = frontier_phi_17_15_ladder;
        }
        float _2161;
        if (_1907 > 0.0)
        {
            _2161 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2161 = frontier_phi_26_22_ladder;
        }
        float _2418;
        if (_1910 > 0.0)
        {
            _2418 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2418 = frontier_phi_38_33_ladder;
        }
        float _2420 = isnan(_2161) ? _1938 : (isnan(_1938) ? _2161 : min(_1938, _2161));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1904) + _1893;
        float _2426 = (_2421 * _1907) + _1897;
        float _2427 = (_2421 * _1910) + _1901;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2428;
        float _2432 = _2428 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 > _2432) || ((_2426 < _2430) || ((_2425 < _2430) || (_2425 > _2432))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2427, cbModelParam._m0[9u].z, fma(_2426, cbModelParam._m0[9u].y, _2425 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2427, cbModelParam._m0[10u].z, fma(_2426, cbModelParam._m0[10u].y, _2425 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2427, cbModelParam._m0[11u].z, fma(_2426, cbModelParam._m0[11u].y, _2425 * cbModelParam._m0[11u].x))), _1846);
            frontier_phi_16_38_ladder = _2555.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2555.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2555.x * cbModelParam._m0[1u].y;
        }
        _1926 = frontier_phi_16_38_ladder_2;
        _1928 = frontier_phi_16_38_ladder_1;
        _1930 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1005, _1006, _1007), _1846);
        _1926 = _1914.x * cbModelParam._m0[1u].y;
        _1928 = _1914.y * cbModelParam._m0[1u].y;
        _1930 = _1914.z * cbModelParam._m0[1u].y;
    }
    float _1934 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _822);
    float _1935 = isnan(_1934) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1934 : min(cbModelParam._m0[25u].w, _1934));
    float _2024;
    float _2026;
    float _2028;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1988 = fma(_1069, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061)) + cbModelParam._m0[21u].w;
        float _1992 = fma(_1069, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061)) + cbModelParam._m0[22u].w;
        float _1996 = fma(_1069, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061)) + cbModelParam._m0[23u].w;
        float _1999 = fma(_1007, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005));
        float _2002 = fma(_1007, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005));
        float _2005 = fma(_1007, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005));
        float _2166;
        if (_1999 > 0.0)
        {
            _2166 = abs((1.0 - _1988) / _1999);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1988 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2166 = frontier_phi_28_24_ladder;
        }
        float _2445;
        if (_2002 > 0.0)
        {
            _2445 = abs((1.0 - _1992) / _2002);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1992 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2445 = frontier_phi_40_35_ladder;
        }
        float _2658;
        if (_2005 > 0.0)
        {
            _2658 = abs((1.0 - _1996) / _2005);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1996 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2658 = frontier_phi_49_46_ladder;
        }
        float _2660 = isnan(_2445) ? _2166 : (isnan(_2166) ? _2445 : min(_2166, _2445));
        float _2661 = isnan(_2658) ? _2660 : (isnan(_2660) ? _2658 : min(_2660, _2658));
        float _2665 = (_2661 * _1999) + _1988;
        float _2666 = (_2661 * _2002) + _1992;
        float _2667 = (_2661 * _2005) + _1996;
        float _2668 = _2661 * 9.9999997473787516355514526367188e-05;
        float _2669 = (-1.0) - _2668;
        float _2671 = _2668 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2667 > _2671) || ((_2667 < _2669) || ((_2666 > _2671) || ((_2666 < _2669) || ((_2665 < _2669) || (_2665 > _2671))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2667, cbModelParam._m0[17u].z, fma(_2666, cbModelParam._m0[17u].y, _2665 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2667, cbModelParam._m0[18u].z, fma(_2666, cbModelParam._m0[18u].y, _2665 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2667, cbModelParam._m0[19u].z, fma(_2666, cbModelParam._m0[19u].y, _2665 * cbModelParam._m0[19u].x))), _1935);
            frontier_phi_25_49_ladder = _2866.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2866.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2866.x * cbModelParam._m0[1u].z;
        }
        _2024 = frontier_phi_25_49_ladder_2;
        _2026 = frontier_phi_25_49_ladder_1;
        _2028 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2008 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1005, _1006, _1007), _1935);
        _2024 = _2008.x * cbModelParam._m0[1u].z;
        _2026 = _2008.y * cbModelParam._m0[1u].z;
        _2028 = _2008.z * cbModelParam._m0[1u].z;
    }
    float _2041 = (((_1032 * _981) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2024 - _1926)) + _1926);
    float _2043 = (((_1032 * _983) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2026 - _1928)) + _1928);
    float _2045 = (((_1032 * _984) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2028 - _1930)) + _1930);
    float _2048 = fma(_2045, cbSceneParam._m0[89u].z, fma(_2043, cbSceneParam._m0[89u].y, _2041 * cbSceneParam._m0[89u].x));
    float _2051 = fma(_2045, cbSceneParam._m0[90u].z, fma(_2043, cbSceneParam._m0[90u].y, _2041 * cbSceneParam._m0[90u].x));
    float _2054 = fma(_2045, cbSceneParam._m0[91u].z, fma(_2043, cbSceneParam._m0[91u].y, _2041 * cbSceneParam._m0[91u].x));
    vec4 _2062 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_919, _920));
    float _2064 = _2062.w;
    float _2076 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2064);
    float _2077 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2064);
    float _2078 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2064);
    uvec4 _2082 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2084 = _2082.x * 14u;
    uint _2085 = _2084 + 13u;
    float _2092 = _997 + (-1.0);
    float _2097 = (cbLight._m0[_2085].x * _2092) + 1.0;
    float _2098 = (cbLight._m0[_2085].y * _2092) + 1.0;
    float _2099 = (cbLight._m0[_2085].z * _2092) + 1.0;
    float _2100 = (cbLight._m0[_2085].w * _2092) + 1.0;
    uint _2101 = _2084 + 5u;
    float _2107 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
    uint _2111 = _2084 + 4u;
    float _2120 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
    uint _2124 = _2084 | 1u;
    float _2135 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_819, _820, _821));
    float _2138 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_819, _820, _821));
    float _4368 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _4379 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2143 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 0.3183098733425140380859375;
    float _2145 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * 0.3183098733425140380859375;
    float _2152 = ((cbLight._m0[_2101].x * _2107) * _2145) + (((cbLight._m0[_2111].x * _2076) * _2120) * _2143);
    float _2153 = ((_2107 * cbLight._m0[_2101].y) * _2145) + (((cbLight._m0[_2111].y * _2077) * _2120) * _2143);
    float _2154 = ((_2107 * cbLight._m0[_2101].z) * _2145) + (((cbLight._m0[_2111].z * _2078) * _2120) * _2143);
    uvec4 _2158 = floatBitsToUint(cbLight._m0[_2084 + 12u]);
    bool _2160 = _2158.x == 0u;
    float _2171;
    float _2173;
    float _2175;
    if (_2160)
    {
        _2171 = _2152;
        _2173 = _2153;
        _2175 = _2154;
    }
    else
    {
        uint _2179 = _2084 + 6u;
        float _2195 = (dot(vec3(cbLight._m0[_2084 + 2u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2196 = _2195 * _2195;
        float _4390 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2197 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2198 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2171 = (((cbLight._m0[_2179].x * 0.3183098733425140380859375) * _2197) * _2198) + _2152;
        _2173 = (((cbLight._m0[_2179].y * 0.3183098733425140380859375) * _2197) * _2198) + _2153;
        _2175 = (((cbLight._m0[_2179].z * 0.3183098733425140380859375) * _2197) * _2198) + _2154;
    }
    bool _2178 = _2158.y == 0u;
    float _2216;
    float _2218;
    float _2220;
    if (_2178)
    {
        _2216 = _2171;
        _2218 = _2173;
        _2220 = _2175;
    }
    else
    {
        uint _2389 = _2084 + 7u;
        float _2405 = (dot(vec3(cbLight._m0[_2084 + 3u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2406 = _2405 * _2405;
        float _4406 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2407 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2408 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2216 = (((cbLight._m0[_2389].x * 0.3183098733425140380859375) * _2407) * _2408) + _2171;
        _2218 = (((cbLight._m0[_2389].y * 0.3183098733425140380859375) * _2407) * _2408) + _2173;
        _2220 = (((cbLight._m0[_2389].z * 0.3183098733425140380859375) * _2407) * _2408) + _2175;
    }
    uint _2223 = _2084 + 8u;
    float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _822) * 0.949999988079071044921875);
    float _2237 = _2236 * _2236;
    float _2238 = cbLight._m0[_2084].x + _899;
    float _2239 = cbLight._m0[_2084].y + _900;
    float _2240 = cbLight._m0[_2084].z + _901;
    float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
    float _2245 = _2244 * _2238;
    float _2246 = _2244 * _2239;
    float _2247 = _2244 * _2240;
    float _2248 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2084].xyz));
    float _4422 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _4433 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2252 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2253 = dot(vec3(_819, _820, _821), vec3(_2245, _2246, _2247));
    float _4444 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2257 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2245, _2246, _2247));
    float _4455 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2261 = _2237 * _2237;
    float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
    float _2273 = exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0);
    float _2274 = 0.959999978542327880859375 - _978;
    float _2276 = 0.959999978542327880859375 - _979;
    float _2277 = 0.959999978542327880859375 - _980;
    float _2284 = 1.0 - _2237;
    float _2295 = (0.5 / (((_2252 * ((_2251 * _2284) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2284) + _2237) * _2251))) * _2251;
    float _4466 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2297 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
    uint _2311 = _2084 + 9u;
    float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _822) * 0.949999988079071044921875);
    float _2323 = _2322 * _2322;
    float _2324 = cbLight._m0[_2124].x + _899;
    float _2325 = cbLight._m0[_2124].y + _900;
    float _2326 = cbLight._m0[_2124].z + _901;
    float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
    float _2331 = _2330 * _2324;
    float _2332 = _2330 * _2325;
    float _2333 = _2330 * _2326;
    float _2334 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2124].xyz));
    float _4477 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2338 = dot(vec3(_819, _820, _821), vec3(_2331, _2332, _2333));
    float _4488 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2331, _2332, _2333));
    float _4499 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2323 * _2323;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
    float _2364 = 1.0 - _2323;
    float _2374 = (0.5 / (((_2252 * ((_2337 * _2364) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2364) + _2323) * _2337))) * _2337;
    float _4510 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2376 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    float _2386 = (((((_2357 * _2274) + _981) * cbLight._m0[_2311].x) * _2376) * _2107) + ((((cbLight._m0[_2223].x * _2076) * ((_2273 * _2274) + _981)) * _2297) * _2120);
    float _2387 = (((((_2357 * _2276) + _983) * cbLight._m0[_2311].y) * _2376) * _2107) + ((((cbLight._m0[_2223].y * _2077) * ((_2273 * _2276) + _983)) * _2297) * _2120);
    float _2388 = (((((_2357 * _2277) + _984) * cbLight._m0[_2311].z) * _2376) * _2107) + ((((cbLight._m0[_2223].z * _2078) * ((_2273 * _2277) + _984)) * _2297) * _2120);
    float _2450;
    float _2452;
    float _2454;
    if (_2160)
    {
        _2450 = _2386;
        _2452 = _2387;
        _2454 = _2388;
    }
    else
    {
        uint _2456 = _2084 + 2u;
        uint _2460 = _2084 + 10u;
        float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _822) * 0.949999988079071044921875);
        float _2475 = _2474 * _2474;
        float _2476 = cbLight._m0[_2456].x + _899;
        float _2477 = cbLight._m0[_2456].y + _900;
        float _2478 = cbLight._m0[_2456].z + _901;
        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
        float _2483 = _2482 * _2476;
        float _2484 = _2482 * _2477;
        float _2485 = _2482 * _2478;
        float _2486 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2456].xyz));
        float _4521 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2490 = dot(vec3(_819, _820, _821), vec3(_2483, _2484, _2485));
        float _4532 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2494 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2483, _2484, _2485));
        float _4543 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2498 = _2475 * _2475;
        float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
        float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
        float _2516 = 1.0 - _2475;
        float _2526 = (0.5 / (((_2252 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2516) + _2475) * _2489))) * _2489;
        float _4554 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2450 = (((((_2509 * _2274) + _981) * cbLight._m0[_2460].x) * _2528) * _2529) + _2386;
        _2452 = (((((_2509 * _2276) + _983) * cbLight._m0[_2460].y) * _2528) * _2529) + _2387;
        _2454 = (((((_2509 * _2277) + _984) * cbLight._m0[_2460].z) * _2528) * _2529) + _2388;
    }
    float _2564;
    float _2566;
    float _2568;
    if (_2178)
    {
        _2564 = _2450;
        _2566 = _2452;
        _2568 = _2454;
    }
    else
    {
        uint _2575 = _2084 + 3u;
        uint _2579 = _2084 + 11u;
        float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2575].w)) * _822) * 0.949999988079071044921875);
        float _2594 = _2593 * _2593;
        float _2595 = cbLight._m0[_2575].x + _899;
        float _2596 = cbLight._m0[_2575].y + _900;
        float _2597 = cbLight._m0[_2575].z + _901;
        float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
        float _2602 = _2601 * _2595;
        float _2603 = _2601 * _2596;
        float _2604 = _2601 * _2597;
        float _2605 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2575].xyz));
        float _4570 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2609 = dot(vec3(_819, _820, _821), vec3(_2602, _2603, _2604));
        float _4581 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2613 = dot(vec3(cbLight._m0[_2575].xyz), vec3(_2602, _2603, _2604));
        float _4592 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2617 = _2594 * _2594;
        float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
        float _2628 = exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0);
        float _2635 = 1.0 - _2594;
        float _2645 = (0.5 / (((_2252 * ((_2608 * _2635) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2635) + _2594) * _2608))) * _2608;
        float _4603 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2564 = (((((_2628 * _2274) + _981) * cbLight._m0[_2579].x) * _2647) * _2648) + _2450;
        _2566 = (((((_2628 * _2276) + _983) * cbLight._m0[_2579].y) * _2647) * _2648) + _2452;
        _2568 = (((((_2628 * _2277) + _984) * cbLight._m0[_2579].z) * _2647) * _2648) + _2454;
    }
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    if (_2082.y == 0u)
    {
        float _2723 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2724 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2723;
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2723;
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2723;
        uvec4 _2738 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2739 = _2738.x;
        uint _2750 = uint((float(_2738.y) * floor(float(uint(cbSceneParam._m0[85u].y * _920) / _2739))) + floor(float(uint(cbSceneParam._m0[85u].x * _919) / _2739)));
        float _2760 = (log2(_2726 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2761 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        uint _2764 = uint(isnan(14.0) ? _2761 : (isnan(_2761) ? 14.0 : min(_2761, 14.0)));
        uvec4 _2769 = texelFetch(g_lightClusterGridBuffer, int(((_2764 << 2u) + (_2750 << 6u)) >> 2u));
        uint _2770 = _2769.x;
        uint _2771 = _2738.z;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((((1u << ((_2771 >> 4u) & 15u)) + 4294967295u) & _2770) == 0u) || ((_2771 & 240u) == 0u))
        {
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
        }
        else
        {
            float _2872;
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            uint _3030 = 0u;
            uint _3039;
            bool _3040;
            for (;;)
            {
                _3039 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3030 << 2u)) >> 2u)).x;
                _3040 = _3039 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3040)
                {
                    frontier_phi_66_pred = _3024;
                    frontier_phi_66_pred_1 = _3029;
                    frontier_phi_66_pred_2 = _3028;
                    frontier_phi_66_pred_3 = _3027;
                    frontier_phi_66_pred_4 = _3026;
                    frontier_phi_66_pred_5 = _3025;
                }
                else
                {
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    uint _3175;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3039;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    for (;;)
                    {
                        uint _3179 = uint(findLSB(_3175)) + (_3030 << 5u);
                        uint _3176 = (_3175 + 4294967295u) & _3175;
                        uint _3181 = _3179 * 48u;
                        vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3201 = (_3179 * 48u) + 4u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 3u)).x));
                        uint _3220 = (_3179 * 48u) + 8u;
                        vec3 _3231 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x));
                        float _3235 = _3195.x - _2724;
                        float _3236 = _3195.y - _2725;
                        float _3237 = _3195.z - _2726;
                        float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                        float _3241 = inversesqrt(_3238);
                        float _3242 = _3241 * _3235;
                        float _3243 = _3241 * _3236;
                        float _3244 = _3241 * _3237;
                        float _3245 = dot(vec3(_938, _941, _944), vec3(_3242, _3243, _3244));
                        float _3250 = 1.0 - (_3238 * _3195.w);
                        float _4629 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3251 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3252 = sqrt(_3238) * _3214.w;
                        float _3255 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                        float _3256 = _3255 * _3255;
                        float _3259 = ((1.0 - _3256) * _3245) + _3256;
                        float _3262 = _3252 * _3252;
                        float _3266 = ((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3251) / ((_3262 * 0.699999988079071044921875) + 1.0);
                        float _3270 = (-0.0) - _2724;
                        float _3271 = (-0.0) - _2725;
                        float _3272 = (-0.0) - _2726;
                        float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                        float _3277 = _3276 * _3270;
                        float _3278 = _3276 * _3271;
                        float _3279 = _3276 * _3272;
                        float _3287 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                        float _3288 = 1.0 - _1013;
                        float _3295 = sqrt(1.0 - ((1.0 - (_3288 * _3288)) * (1.0 - (_3287 * _3287))));
                        float _3296 = _3295 * _3295;
                        float _3297 = _3296 * _3296;
                        float _3298 = _3277 + _3242;
                        float _3299 = _3278 + _3243;
                        float _3300 = _3279 + _3244;
                        float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                        float _3308 = dot(vec3(_938, _941, _944), vec3(_3277, _3278, _3279));
                        float _4645 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3311 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3312 = dot(vec3(_938, _941, _944), vec3(_3304 * _3298, _3304 * _3299, _3304 * _3300));
                        float _4656 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3315 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3319 = ((_3315 * _3315) * (_3297 + (-1.0))) + 1.0;
                        float _3320 = _3255 * _3296;
                        float _3321 = _3320 * _3320;
                        float _3324 = ((1.0 - _3321) * _3245) + _3321;
                        float _4667 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3325 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3326 = 1.0 - _3296;
                        float _3336 = (0.5 / (((_3325 * ((_3311 * _3326) + _3296)) + 9.9999999392252902907785028219223e-09) + (((_3325 * _3326) + _3296) * _3311))) * _3325;
                        float _4678 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3347 = (((_3297 * 3.1415927410125732421875) * (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) / ((_3319 * _3319) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125))) * _3251;
                        _3099 = (_3266 * _3214.x) + _3172;
                        _3100 = (_3266 * _3214.y) + _3173;
                        _3101 = (_3266 * _3214.z) + _3174;
                        _3096 = (_3347 * _3231.x) + _3169;
                        _3097 = (_3347 * _3231.y) + _3170;
                        _3098 = (_3347 * _3231.z) + _3171;
                        if (_3176 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3176;
                        }
                    }
                    frontier_phi_66_pred = _3096;
                    frontier_phi_66_pred_1 = _3101;
                    frontier_phi_66_pred_2 = _3100;
                    frontier_phi_66_pred_3 = _3099;
                    frontier_phi_66_pred_4 = _3098;
                    frontier_phi_66_pred_5 = _3097;
                }
                _2872 = frontier_phi_66_pred;
                _2882 = frontier_phi_66_pred_1;
                _2880 = frontier_phi_66_pred_2;
                _2878 = frontier_phi_66_pred_3;
                _2876 = frontier_phi_66_pred_4;
                _2874 = frontier_phi_66_pred_5;
                uint _3031 = _3030 + 1u;
                if (_3031 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3024 = _2872;
                    _3025 = _2874;
                    _3026 = _2876;
                    _3027 = _2878;
                    _3028 = _2880;
                    _3029 = _2882;
                    _3030 = _3031;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
        }
        uvec4 _2885 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2886 = _2885.z;
        uint _2888 = (_2886 >> 8u) & 15u;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        if (((4294967295u << _2888) & _2770) == 0u)
        {
            _2992 = _2871;
            _2994 = _2873;
            _2996 = _2875;
            _2998 = _2877;
            _3000 = _2879;
            _3002 = _2881;
        }
        else
        {
            float _3017 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
            float _3018 = _3017 * _2724;
            float _3019 = _3017 * _2725;
            float _3020 = _3017 * _2726;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2888 < ((_2886 >> 12u) & 15u))
            {
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3152 = _2871;
                float _3153 = _2873;
                float _3154 = _2875;
                float _3155 = _2877;
                float _3156 = _2879;
                float _3157 = _2881;
                uint _3158 = _2888;
                uint _3167;
                bool _3168;
                for (;;)
                {
                    _3167 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3158 << 2u)) >> 2u)).x;
                    _3168 = _3167 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3168)
                    {
                        frontier_phi_77_pred = _3157;
                        frontier_phi_77_pred_1 = _3156;
                        frontier_phi_77_pred_2 = _3155;
                        frontier_phi_77_pred_3 = _3154;
                        frontier_phi_77_pred_4 = _3153;
                        frontier_phi_77_pred_5 = _3152;
                    }
                    else
                    {
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3374 = _3152;
                        float _3375 = _3153;
                        float _3376 = _3154;
                        float _3377 = _3155;
                        float _3378 = _3156;
                        float _3379 = _3157;
                        uint _3380 = _3167;
                        uint _3381;
                        vec4 _3406;
                        float _3407;
                        vec4 _3422;
                        vec3 _3434;
                        vec4 _3449;
                        vec4 _3464;
                        float _3510;
                        bool _3511;
                        for (;;)
                        {
                            uint _3391 = ((_3158 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3380));
                            _3381 = (_3380 + 4294967295u) & _3380;
                            uint _3393 = _3391 * 40u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            _3407 = _3406.w;
                            uint _3409 = (_3391 * 40u) + 4u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3424 = (_3391 * 40u) + 8u;
                            _3434 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x));
                            uint _3436 = (_3391 * 40u) + 16u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3451 = (_3391 * 40u) + 20u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3466 = (_3391 * 40u) + 24u;
                            vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3485 = (_3391 * 40u) + 28u;
                            vec4 _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            _3510 = fma(_2726, _3498.z, fma(_2725, _3498.y, _3498.x * _2724)) + _3498.w;
                            _3511 = !((fma(_2726, _3479.z, fma(_2725, _3479.y, _3479.x * _2724)) + _3479.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3511)
                            {
                                float _3538 = _3406.x - _2724;
                                float _3539 = _3406.y - _2725;
                                float _3540 = _3406.z - _2726;
                                float _3541 = dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540));
                                float _3544 = inversesqrt(_3541);
                                float _3545 = _3544 * _3538;
                                float _3546 = _3544 * _3539;
                                float _3547 = _3544 * _3540;
                                float _3551 = 1.0 - (_3541 / (_3407 * _3407));
                                float _4689 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3556 = sqrt(_3541) * _3422.w;
                                float _3558 = 1.39999997615814208984375 / (_3556 + 1.39999997615814208984375);
                                float _3559 = _3558 * _3558;
                                float _3562 = ((1.0 - _3559) * dot(vec3(_3545, _3546, _3547), vec3(_938, _941, _944))) + _3559;
                                float _3565 = _3556 * _3556;
                                float _3569 = (fma(_2726, _3449.z, fma(_2725, _3449.y, _3449.x * _2724)) + _3449.w) / _3510;
                                float _3570 = (fma(_2726, _3464.z, fma(_2725, _3464.y, _3464.x * _2724)) + _3464.w) / _3510;
                                float _3574 = 1.0 - dot(vec2(_3569, _3570), vec2(_3569, _3570));
                                float _4705 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3575 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3576 = _3575 * (((isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0))) * _3552) / ((_3565 * 0.699999988079071044921875) + 1.0));
                                float _3588 = exp2(log2(1.0 / ((_3565 * 3.5) + 5.0)) * 0.25);
                                float _3589 = 1.0 - _1013;
                                float _3596 = sqrt(1.0 - ((1.0 - (_3589 * _3589)) * (1.0 - (_3588 * _3588))));
                                float _3597 = _3596 * _3596;
                                float _3598 = _3597 * _3597;
                                float _3599 = _3545 - _3018;
                                float _3600 = _3546 - _3019;
                                float _3601 = _3547 - _3020;
                                float _3605 = inversesqrt(dot(vec3(_3599, _3600, _3601), vec3(_3599, _3600, _3601)));
                                float _3609 = dot(vec3(_938, _941, _944), vec3((-0.0) - _3018, (-0.0) - _3019, (-0.0) - _3020));
                                float _4716 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3612 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3613 = dot(vec3(_938, _941, _944), vec3(_3605 * _3599, _3605 * _3600, _3605 * _3601));
                                float _4727 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3616 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3620 = ((_3616 * _3616) * (_3598 + (-1.0))) + 1.0;
                                float _3621 = _3558 * _3597;
                                float _3622 = _3621 * _3621;
                                float _3628 = ((1.0 - _3622) * dot(vec3(_938, _941, _944), vec3(_3545, _3546, _3547))) + _3622;
                                float _4738 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3630 = 1.0 - _3597;
                                float _3640 = (0.5 / (((_3629 * ((_3612 * _3630) + _3597)) + 9.9999999392252902907785028219223e-09) + (((_3629 * _3630) + _3597) * _3612))) * _3629;
                                float _4749 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3650 = (_3575 * _3552) * (((_3598 * 3.1415927410125732421875) * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) / ((_3620 * _3620) * ((_3565 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3576 * _3422.y;
                                frontier_phi_83_pred_1 = _3576 * _3422.x;
                                frontier_phi_83_pred_2 = _3650 * _3434.z;
                                frontier_phi_83_pred_3 = _3650 * _3434.y;
                                frontier_phi_83_pred_4 = _3650 * _3434.x;
                                frontier_phi_83_pred_5 = _3576 * _3422.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3658 = frontier_phi_83_pred;
                            _3657 = frontier_phi_83_pred_1;
                            _3656 = frontier_phi_83_pred_2;
                            _3655 = frontier_phi_83_pred_3;
                            _3654 = frontier_phi_83_pred_4;
                            _3659 = frontier_phi_83_pred_5;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            _3366 = _3659 + _3379;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            _3363 = _3656 + _3376;
                            if (_3381 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3381;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3366;
                        frontier_phi_77_pred_1 = _3365;
                        frontier_phi_77_pred_2 = _3364;
                        frontier_phi_77_pred_3 = _3363;
                        frontier_phi_77_pred_4 = _3362;
                        frontier_phi_77_pred_5 = _3361;
                    }
                    _3003 = frontier_phi_77_pred;
                    _3001 = frontier_phi_77_pred_1;
                    _2999 = frontier_phi_77_pred_2;
                    _2997 = frontier_phi_77_pred_3;
                    _2995 = frontier_phi_77_pred_4;
                    _2993 = frontier_phi_77_pred_5;
                    uint _3159 = _3158 + 1u;
                    if (_3159 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3152 = _2993;
                        _3153 = _2995;
                        _3154 = _2997;
                        _3155 = _2999;
                        _3156 = _3001;
                        _3157 = _3003;
                        _3158 = _3159;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2997;
                frontier_phi_58_59_ladder_1 = _3003;
                frontier_phi_58_59_ladder_2 = _3001;
                frontier_phi_58_59_ladder_3 = _2999;
                frontier_phi_58_59_ladder_4 = _2995;
                frontier_phi_58_59_ladder_5 = _2993;
            }
            else
            {
                frontier_phi_58_59_ladder = _2875;
                frontier_phi_58_59_ladder_1 = _2881;
                frontier_phi_58_59_ladder_2 = _2879;
                frontier_phi_58_59_ladder_3 = _2877;
                frontier_phi_58_59_ladder_4 = _2873;
                frontier_phi_58_59_ladder_5 = _2871;
            }
            _2992 = frontier_phi_58_59_ladder_5;
            _2994 = frontier_phi_58_59_ladder_4;
            _2996 = frontier_phi_58_59_ladder;
            _2998 = frontier_phi_58_59_ladder_3;
            _3000 = frontier_phi_58_59_ladder_2;
            _3002 = frontier_phi_58_59_ladder_1;
        }
        float _3007 = isnan(1.0) ? _997 : (isnan(_997) ? 1.0 : min(_997, 1.0));
        _2783 = (_3007 * _2998) + _2216;
        _2785 = (_3007 * _3000) + _2218;
        _2787 = (_3007 * _3002) + _2220;
        _2789 = ((_2992 * _981) * _3007) + _2564;
        _2791 = ((_2994 * _983) * _3007) + _2566;
        _2793 = ((_2996 * _984) * _3007) + _2568;
    }
    else
    {
        _2783 = _2216;
        _2785 = _2218;
        _2787 = _2220;
        _2789 = _2564;
        _2791 = _2566;
        _2793 = _2568;
    }
    float _4765 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4776 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4787 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _2810 = ((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2783 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _997))) + ((_2789 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    float _2811 = ((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2785 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _997))) + ((_2791 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    float _2812 = ((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2787 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _997))) + ((_2793 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    uint _2813 = _256 + 6u;
    float _2821 = _919 / cbSceneParam._m0[86u].x;
    float _2822 = _920 / cbSceneParam._m0[86u].y;
    vec4 _2836 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, (log2((isnan(cbSceneParam._m0[77u].w) ? _841 : (isnan(_841) ? cbSceneParam._m0[77u].w : min(_841, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2838 = _2836.x;
    float _2839 = _2836.y;
    float _2840 = _2836.z;
    float _2841 = _2836.w;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    if (_841 > cbSceneParam._m0[78u].w)
    {
        float _2896 = isnan(_841) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _841 : min(cbSceneParam._m0[80u].w, _841));
        float _2897 = _2896 / _841;
        float _2908 = _2897 * _892;
        float _2909 = _893 * _2897;
        float _2910 = (-0.0) - _2909;
        float _2912 = _2897 * _894;
        float _2914 = (cbSceneParam._m0[77u].w * _2910) / _2896;
        float _2915 = _2914 + cbSceneParam._m0[79u].w;
        float _2916 = cbSceneParam._m0[79u].w - _2909;
        float _2922 = sqrt(((_2908 * _2908) + (_2909 * _2909)) + (_2912 * _2912));
        float _2925 = (1.0 - (cbSceneParam._m0[77u].w / _2896)) * _2922;
        float _2930 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2932 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3109;
        if (abs((_2910 - _2914) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3109 = ((((_2915 > 0.0) ? exp2(_2930 * _2915) : (2.0 - exp2(_2932 * _2915))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2925;
        }
        else
        {
            float _3053 = 1.0 / cbSceneParam._m0[80u].x;
            float _3054 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : max(_2915, _2916));
            float _3055 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : min(_2915, _2916));
            float _3064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : min(_3054, 0.0));
            float _3065 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : min(_3055, 0.0));
            _3109 = ((abs(_2922 / _2910) * cbSceneParam._m0[80u].y) * ((((_3064 - _3065) * 2.0) - ((exp2(_2930 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0)))) - exp2(_2930 * (isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0))))) * _3053)) - ((exp2(_2932 * _3064) - exp2(_2932 * _3065)) * _3053))) + (_2925 * cbSceneParam._m0[80u].z);
        }
        vec4 _3111 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, 1.0), 0.0);
        float _3120 = exp2((_3109 * (-1.44269502162933349609375)) * (1.0 - _3111.w));
        float _3121 = log2(_3120);
        float _3137 = log2(_2841);
        _2934 = (exp2(_3137 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].x)) * _3111.x) / cbSceneParam._m0[78u].x)) + _2838;
        _2936 = (exp2(_3137 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].y)) * _3111.y) / cbSceneParam._m0[78u].y)) + _2839;
        _2938 = (exp2(_3137 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].z)) * _3111.z) / cbSceneParam._m0[78u].z)) + _2840;
        _2940 = _3120 * _2841;
    }
    else
    {
        _2934 = _2838;
        _2936 = _2839;
        _2938 = _2840;
        _2940 = _2841;
    }
    bool _3147;
    vec4 _2950;
    vec4 _2972;
    float _2974;
    float _2978;
    float _2979;
    float _2980;
    float _2981;
    bool _2991;
    for (;;)
    {
        _2950 = cbMatDynParam._m0[0u];
        float _2952 = roundEven(_2950.y);
        bool _2953 = _2952 == 3.0;
        float _2954 = log2(_2940);
        float _2961 = exp2(_2954 * cbSceneParam._m0[78u].x) * _2810;
        float _2962 = exp2(_2954 * cbSceneParam._m0[78u].y) * _2811;
        float _2963 = exp2(_2954 * cbSceneParam._m0[78u].z) * _2812;
        float _2970 = _908 + (-0.5);
        _2972 = cbMtdParam._m0[1u];
        _2974 = _2972.y * _2970;
        float _2977 = (_2952 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2978 = _2977 * (_2953 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2934)));
        _2979 = _2977 * (_2953 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2936)));
        _2980 = _2977 * (_2953 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2938)));
        _2981 = _2970 * 0.999000012874603271484375;
        _2991 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2991)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _2981) < 0.5)
            {
                _3147 = true;
                break;
            }
        }
        uint _3088 = _957 + uint(_2950.w);
        if ((cbInstanceData._m0[_3088].w < 1.0) && ((cbInstanceData._m0[_3088].w + _2981) < 0.5))
        {
            _3147 = true;
            break;
        }
        if ((_2974 + 1.0) < _2972.x)
        {
            _3147 = true;
            break;
        }
        _3147 = false;
        break;
    }
    float _3352;
    if (_3147)
    {
        discard_state = true;
        _3352 = 0.0;
    }
    else
    {
        _3352 = cbInstanceData._m0[_2813].w;
    }
    SV_Target.x = _2978;
    SV_Target.y = _2979;
    SV_Target.z = _2980;
    SV_Target.w = _3352;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2813].w;
    discard_exit();
}


