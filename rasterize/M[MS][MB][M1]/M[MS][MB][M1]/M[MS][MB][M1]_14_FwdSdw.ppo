#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1019;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _270.x * cbMtdParam._m0[9u].x;
    float _277 = _270.y * cbMtdParam._m0[9u].y;
    float _278 = _270.z * cbMtdParam._m0[9u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _250) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _251) + cbTextureTilingScale._m0[20u].w));
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _326 = _322.z;
    float _330 = (_322.x * 2.0) + (-1.0);
    float _331 = (_322.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_330, _331), vec2(_330, _331));
    float _3632 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _338 = sqrt(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))));
    float _343 = _330 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_296.x * 2.0) + (-1.0)));
    float _344 = _331 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_296.y * 2.0) + (-1.0)));
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _363 = _361.x;
    float _364 = 1.0 - _363;
    float _380 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_363 - _364) * cbMtdParam._m0[24u].z) + _364) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3643 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _388 = (_381 * (cbMtdParam._m0[17u].x - _276)) + _276;
    float _389 = (_381 * (cbMtdParam._m0[17u].y - _277)) + _277;
    float _390 = (_381 * (cbMtdParam._m0[17u].z - _278)) + _278;
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _405 = _403.x;
    float _407 = _405 - (_405 * _381);
    float _412 = (((_296.z - _326) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _326;
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _432 = (_425.x * 2.0) + (-1.0);
    float _433 = (_425.y * 2.0) + (-1.0);
    float _434 = dot(vec2(_432, _433), vec2(_432, _433));
    float _3654 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _442 = (_381 * (_425.z - _412)) + _412;
    float _454 = (((_432 - _343) + (cbMtdParam._m0[21u].x * _343)) * _381) + _343;
    float _455 = (((_433 - _344) + (cbMtdParam._m0[21u].x * _344)) * _381) + _344;
    float _456 = (_381 * (sqrt(1.0 - (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) - _338)) + _338;
    float _461 = cbMtdParam._m0[22u].x + _322.w;
    float _464 = fma(_456, _217 * NORMAL.x, fma(_455, _224 * TANGENT.x, (_210 * _202) * _454));
    float _467 = fma(_456, _217 * NORMAL.y, fma(_455, _224 * TANGENT.y, (_210 * _203) * _454));
    float _470 = fma(_456, _217 * NORMAL.z, fma(_455, _224 * TANGENT.z, (_210 * _204) * _454));
    float _474 = inversesqrt(dot(vec3(_464, _467, _470), vec3(_464, _467, _470)));
    float _475 = _474 * _464;
    float _476 = _474 * _467;
    float _477 = _474 * _470;
    float _3665 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _478 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3687 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3698 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3709 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3720 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _483 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _497 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _548 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _538);
    float _549 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _538);
    float _550 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _538);
    float _554 = inversesqrt(dot(vec3(_548, _549, _550), vec3(_548, _549, _550)));
    float _555 = _548 * _554;
    float _556 = _549 * _554;
    float _557 = _550 * _554;
    float _563 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _564 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _585 = fma(_477, cbSceneParam._m0[5u].z, fma(_476, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _475));
    float _588 = fma(_477, cbSceneParam._m0[6u].z, fma(_476, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _475));
    float _591 = fma(_477, cbSceneParam._m0[7u].z, fma(_476, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _475));
    uint _605 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _611 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_605].x;
    float _612 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_605].y;
    float _613 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_605].z;
    float _3731 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _617 = 1.0 - _483;
    float _618 = _614 * _617;
    float _619 = _615 * _617;
    float _620 = _616 * _617;
    float _625 = (_614 + (-0.039999999105930328369140625)) * _483;
    float _626 = (_615 + (-0.039999999105930328369140625)) * _483;
    float _627 = (_616 + (-0.039999999105930328369140625)) * _483;
    float _628 = _625 + 0.039999999105930328369140625;
    float _630 = _626 + 0.039999999105930328369140625;
    float _631 = _627 + 0.039999999105930328369140625;
    vec4 _640 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _563, cbSceneParam._m0[86u].y * _564));
    float _644 = ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * TEXCOORD_5.w) * _640.x;
    float _645 = dot(vec3(_475, _476, _477), vec3(_555, _556, _557));
    float _648 = _645 * 2.0;
    float _652 = (_648 * _475) - _555;
    float _653 = (_648 * _476) - _556;
    float _654 = (_648 * _477) - _557;
    float _658 = abs(dot(vec3(_555, _556, _557), vec3(_475, _476, _477)));
    float _3764 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _660 = sqrt(_478);
    float _673 = exp2((_660 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_660 * 3.0));
    float _679 = (1.0 - _673) * ((_660 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _680 = _673 * _660;
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1018;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _743 = fma(_716, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _708));
        float _747 = fma(_716, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _708));
        float _751 = fma(_716, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _708));
        float _776 = _708 + _475;
        float _777 = _712 + _476;
        float _778 = _716 + _477;
        float _788 = fma(_778, cbModelParam._m0[26u].z, fma(_777, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _776)) - _743;
        float _789 = fma(_778, cbModelParam._m0[27u].z, fma(_777, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _776)) - _747;
        float _790 = fma(_778, cbModelParam._m0[28u].z, fma(_777, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _776)) - _751;
        float _794 = inversesqrt(dot(vec3(_788, _789, _790), vec3(_788, _789, _790)));
        float _807 = ((_794 * _788) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_743 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_794 * _789) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_747 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _809 = ((_794 * _790) / cbModelParam._m0[34u].z) + ((((((_751 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        float _846 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_812.x + (-0.5));
        float _848 = _846 * (_812.y + (-0.5));
        float _849 = _846 * (_812.z + (-0.5));
        float _856 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_819.x + (-0.5));
        float _858 = _856 * (_819.y + (-0.5));
        float _859 = _856 * (_819.z + (-0.5));
        float _866 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_826.x + (-0.5));
        float _868 = _866 * (_826.y + (-0.5));
        float _869 = _866 * (_826.z + (-0.5));
        float _876 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_833.x + (-0.5));
        float _878 = _876 * (_833.y + (-0.5));
        float _879 = _876 * (_833.z + (-0.5));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = _847 * 0.5;
        float _884 = _857 * 0.5;
        float _885 = _867 * 0.5;
        float _886 = dot(vec3(_883, _884, _885), vec3(_883, _884, _885));
        float _891 = (_886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_886);
        float _900 = (dot(vec3(_475, _476, _477), vec3(_891 * _883, _891 * _884, _891 * _885)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _910 = sqrt(((_884 * _884) + (_883 * _883)) + (_885 * _885)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _912 = _911 * 2.0;
        float _916 = (1.0 - _911) / (_911 + 1.0);
        float _3812 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _926 = ((((1.0 - _917) * (_912 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_912 + 1.0))) + _917) * _880;
        float _927 = _848 * 0.5;
        float _928 = _858 * 0.5;
        float _929 = _868 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _943 = (dot(vec3(_475, _476, _477), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _952 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3845 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_954 + 1.0))) + _959) * _881;
        float _969 = _849 * 0.5;
        float _970 = _859 * 0.5;
        float _971 = _869 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _985 = (dot(vec3(_475, _476, _477), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _994 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3878 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_996 + 1.0))) + _1001) * _882;
        _1018 = _849;
        _1020 = _848;
        _1021 = _847;
        _1022 = _859;
        _1023 = _858;
        _1024 = _857;
        _1025 = _869;
        _1026 = _868;
        _1027 = _867;
        _1028 = _882;
        _1029 = _881;
        _1030 = _880;
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
    }
    else
    {
        _1018 = _1019;
        _1020 = _1019;
        _1021 = _1019;
        _1022 = _1019;
        _1023 = _1019;
        _1024 = _1019;
        _1025 = _1019;
        _1026 = _1019;
        _1027 = _1019;
        _1028 = _1019;
        _1029 = _1019;
        _1030 = _1019;
        _1031 = 0.0;
        _1032 = 0.0;
        _1033 = 0.0;
    }
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1058 = fma(_716, cbModelParam._m0[30u].z, fma(_712, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _708));
        float _1062 = fma(_716, cbModelParam._m0[31u].z, fma(_712, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _708));
        float _1066 = fma(_716, cbModelParam._m0[32u].z, fma(_712, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _708));
        float _1089 = _708 + _475;
        float _1090 = _712 + _476;
        float _1091 = _716 + _477;
        float _1101 = fma(_1091, cbModelParam._m0[30u].z, fma(_1090, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1089)) - _1058;
        float _1102 = fma(_1091, cbModelParam._m0[31u].z, fma(_1090, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1089)) - _1062;
        float _1103 = fma(_1091, cbModelParam._m0[32u].z, fma(_1090, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1089)) - _1066;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1058 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1062 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[35u].z) + ((((((_1066 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1157 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1124.x + (-0.5));
        float _1159 = _1157 * (_1124.y + (-0.5));
        float _1160 = _1157 * (_1124.z + (-0.5));
        float _1167 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1131.x + (-0.5));
        float _1169 = _1167 * (_1131.y + (-0.5));
        float _1170 = _1167 * (_1131.z + (-0.5));
        float _1177 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1138.x + (-0.5));
        float _1179 = _1177 * (_1138.y + (-0.5));
        float _1180 = _1177 * (_1138.z + (-0.5));
        float _1187 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1145.x + (-0.5));
        float _1189 = _1187 * (_1145.y + (-0.5));
        float _1190 = _1187 * (_1145.z + (-0.5));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = _1158 * 0.5;
        float _1195 = _1168 * 0.5;
        float _1196 = _1178 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_475, _476, _477), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3941 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1221 + 1.0))) + _1226) * _1191;
        float _1236 = _1159 * 0.5;
        float _1237 = _1169 * 0.5;
        float _1238 = _1179 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_475, _476, _477), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3974 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1263 + 1.0))) + _1268) * _1192;
        float _1278 = _1160 * 0.5;
        float _1279 = _1170 * 0.5;
        float _1280 = _1180 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_475, _476, _477), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4007 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1305 + 1.0))) + _1310) * _1193;
        _1327 = _1160;
        _1328 = _1159;
        _1329 = _1158;
        _1330 = _1170;
        _1331 = _1169;
        _1332 = _1168;
        _1333 = _1180;
        _1334 = _1179;
        _1335 = _1178;
        _1336 = _1193;
        _1337 = _1192;
        _1338 = _1191;
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
    }
    else
    {
        _1327 = _1019;
        _1328 = _1019;
        _1329 = _1019;
        _1330 = _1019;
        _1331 = _1019;
        _1332 = _1019;
        _1333 = _1019;
        _1334 = _1019;
        _1335 = _1019;
        _1336 = _1019;
        _1337 = _1019;
        _1338 = _1019;
        _1339 = 0.0;
        _1340 = 0.0;
        _1341 = 0.0;
    }
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1031)) + _1031;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1032)) + _1032;
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1033)) + _1033;
    float _1374 = fma(_1353, cbSceneParam._m0[89u].z, fma(_1352, cbSceneParam._m0[89u].y, _1351 * cbSceneParam._m0[89u].x));
    float _1377 = fma(_1353, cbSceneParam._m0[90u].z, fma(_1352, cbSceneParam._m0[90u].y, _1351 * cbSceneParam._m0[90u].x));
    float _1380 = fma(_1353, cbSceneParam._m0[91u].z, fma(_1352, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1351));
    float _1395 = _652 * 0.5;
    float _1396 = _653 * 0.5;
    float _1397 = _654 * 0.5;
    float _1398 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1401 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1404 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1438;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1411 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1018, _1022, _1025, _1028));
        float _1415 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1419 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1021, _1024, _1027, _1030));
        float _1426 = dot(vec4(cbModelParam._m0[39u]), vec4(_1395, _1396, _1397, 1.0));
        _1438 = dot(vec3(isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1426) ? 0.0 : (isnan(0.0) ? _1426 : max(0.0, _1426))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1438 = 1.0;
    }
    float _1449;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1440 = dot(vec4(cbModelParam._m0[40u]), vec4(_1395, _1396, _1397, 1.0));
        _1449 = dot(vec3(isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1440) ? 0.0 : (isnan(0.0) ? _1440 : max(0.0, _1440))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1449 = 1.0;
    }
    float _1453 = (_1449 * cbModelParam._m0[1u].x) + (_1438 * (1.0 - cbModelParam._m0[1u].x));
    float _1463 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _478);
    float _1464 = isnan(_1463) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1463 : min(cbModelParam._m0[25u].z, _1463));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1512 = fma(_716, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _708)) + cbModelParam._m0[13u].w;
        float _1516 = fma(_716, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _708)) + cbModelParam._m0[14u].w;
        float _1520 = fma(_716, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _708)) + cbModelParam._m0[15u].w;
        float _1523 = fma(_654, cbModelParam._m0[13u].z, fma(_653, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _652));
        float _1526 = fma(_654, cbModelParam._m0[14u].z, fma(_653, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _652));
        float _1529 = fma(_654, cbModelParam._m0[15u].z, fma(_653, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _652));
        float _1557;
        if (_1523 > 0.0)
        {
            _1557 = abs((1.0 - _1512) / _1523);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1512 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1557 = frontier_phi_14_12_ladder;
        }
        float _1730;
        if (_1526 > 0.0)
        {
            _1730 = abs((1.0 - _1516) / _1526);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1516 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1730 = frontier_phi_23_19_ladder;
        }
        float _2026;
        if (_1529 > 0.0)
        {
            _2026 = abs((1.0 - _1520) / _1529);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1520 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2026 = frontier_phi_35_30_ladder;
        }
        float _2028 = isnan(_1730) ? _1557 : (isnan(_1557) ? _1730 : min(_1557, _1730));
        float _2029 = isnan(_2026) ? _2028 : (isnan(_2028) ? _2026 : min(_2028, _2026));
        float _2033 = (_2029 * _1523) + _1512;
        float _2034 = (_2029 * _1526) + _1516;
        float _2035 = (_2029 * _1529) + _1520;
        float _2036 = _2029 * 9.9999997473787516355514526367188e-05;
        float _2038 = (-1.0) - _2036;
        float _2040 = _2036 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2035 > _2040) || ((_2035 < _2038) || ((_2034 > _2040) || ((_2034 < _2038) || ((_2033 < _2038) || (_2033 > _2040))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2180 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2035, cbModelParam._m0[9u].z, fma(_2034, cbModelParam._m0[9u].y, _2033 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2035, cbModelParam._m0[10u].z, fma(_2034, cbModelParam._m0[10u].y, _2033 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2035, cbModelParam._m0[11u].z, fma(_2034, cbModelParam._m0[11u].y, _2033 * cbModelParam._m0[11u].x))), _1464);
            frontier_phi_13_35_ladder = _2180.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2180.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2180.x * cbModelParam._m0[1u].y;
        }
        _1545 = frontier_phi_13_35_ladder_2;
        _1547 = frontier_phi_13_35_ladder_1;
        _1549 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_652, _653, _654), _1464);
        _1545 = _1533.x * cbModelParam._m0[1u].y;
        _1547 = _1533.y * cbModelParam._m0[1u].y;
        _1549 = _1533.z * cbModelParam._m0[1u].y;
    }
    float _1553 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _478);
    float _1554 = isnan(_1553) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1553 : min(cbModelParam._m0[25u].w, _1553));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1609 = fma(_716, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _708)) + cbModelParam._m0[21u].w;
        float _1613 = fma(_716, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _708)) + cbModelParam._m0[22u].w;
        float _1617 = fma(_716, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _708)) + cbModelParam._m0[23u].w;
        float _1620 = fma(_654, cbModelParam._m0[21u].z, fma(_653, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _652));
        float _1623 = fma(_654, cbModelParam._m0[22u].z, fma(_653, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _652));
        float _1626 = fma(_654, cbModelParam._m0[23u].z, fma(_653, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _652));
        float _1735;
        if (_1620 > 0.0)
        {
            _1735 = abs((1.0 - _1609) / _1620);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1609 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1735 = frontier_phi_25_21_ladder;
        }
        float _2053;
        if (_1623 > 0.0)
        {
            _2053 = abs((1.0 - _1613) / _1623);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1613 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2053 = frontier_phi_37_32_ladder;
        }
        float _2391;
        if (_1626 > 0.0)
        {
            _2391 = abs((1.0 - _1617) / _1626);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1617 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2391 = frontier_phi_47_44_ladder;
        }
        float _2393 = isnan(_2053) ? _1735 : (isnan(_1735) ? _2053 : min(_1735, _2053));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1620) + _1609;
        float _2399 = (_2394 * _1623) + _1613;
        float _2400 = (_2394 * _1626) + _1617;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2402 = (-1.0) - _2401;
        float _2404 = _2401 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2400 > _2404) || ((_2400 < _2402) || ((_2399 > _2404) || ((_2399 < _2402) || ((_2398 < _2402) || (_2398 > _2404))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2522 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2400, cbModelParam._m0[17u].z, fma(_2399, cbModelParam._m0[17u].y, _2398 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2400, cbModelParam._m0[18u].z, fma(_2399, cbModelParam._m0[18u].y, _2398 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2400, cbModelParam._m0[19u].z, fma(_2399, cbModelParam._m0[19u].y, _2398 * cbModelParam._m0[19u].x))), _1554);
            frontier_phi_22_47_ladder = _2522.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2522.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2522.x * cbModelParam._m0[1u].z;
        }
        _1645 = frontier_phi_22_47_ladder_2;
        _1647 = frontier_phi_22_47_ladder_1;
        _1649 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_652, _653, _654), _1554);
        _1645 = _1629.x * cbModelParam._m0[1u].z;
        _1647 = _1629.y * cbModelParam._m0[1u].z;
        _1649 = _1629.z * cbModelParam._m0[1u].z;
    }
    float _1662 = (((_679 * _628) + _680) * _644) * ((cbModelParam._m0[1u].w * (_1645 - _1545)) + _1545);
    float _1664 = (((_679 * _630) + _680) * _644) * ((cbModelParam._m0[1u].w * (_1647 - _1547)) + _1547);
    float _1666 = (((_679 * _631) + _680) * _644) * ((cbModelParam._m0[1u].w * (_1649 - _1549)) + _1549);
    float _1669 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1664, cbSceneParam._m0[89u].y, _1662 * cbSceneParam._m0[89u].x));
    float _1672 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1664, cbSceneParam._m0[90u].y, _1662 * cbSceneParam._m0[90u].x));
    float _1675 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1664, cbSceneParam._m0[91u].y, _1662 * cbSceneParam._m0[91u].x));
    float _1709 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1713 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1717 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1721 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1722 = _1709 / _1721;
    float _1723 = _1713 / _1721;
    float _1724 = _1717 / _1721;
    float _1871;
    float _1872;
    float _1873;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1751 = ((uint(_1724 > cbSceneParam._m0[59u].y) + uint(_1724 > cbSceneParam._m0[59u].x)) + uint(_1724 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1752 = _1751 + 43u;
        uint _1760 = _1751 + 44u;
        uint _1768 = _1751 + 45u;
        uint _1776 = _1751 + 46u;
        float _1787 = fma(_1721, cbSceneParam._m0[_1752].w, fma(_1717, cbSceneParam._m0[_1752].z, fma(_1713, cbSceneParam._m0[_1752].y, _1709 * cbSceneParam._m0[_1752].x)));
        float _1791 = fma(_1721, cbSceneParam._m0[_1760].w, fma(_1717, cbSceneParam._m0[_1760].z, fma(_1713, cbSceneParam._m0[_1760].y, _1709 * cbSceneParam._m0[_1760].x)));
        float _1799 = fma(_1721, cbSceneParam._m0[_1776].w, fma(_1717, cbSceneParam._m0[_1776].z, fma(_1713, cbSceneParam._m0[_1776].y, _1709 * cbSceneParam._m0[_1776].x)));
        float _1804 = cbSceneParam._m0[33u].z * _1799;
        float _1806 = cbSceneParam._m0[33u].w * _1799;
        float _1809 = fma(_1721, cbSceneParam._m0[_1768].w, fma(_1717, cbSceneParam._m0[_1768].z, fma(_1713, cbSceneParam._m0[_1768].y, _1709 * cbSceneParam._m0[_1768].x))) / _1799;
        float _1857 = (cbSceneParam._m0[33u].x - sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724))) * cbSceneParam._m0[33u].y;
        float _4133 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1864 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1804 + _1787) / _1799, (_1806 + _1791) / _1799), _1809), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1806 + _1787) / _1799, (_1791 - _1804) / _1799), _1809), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1787 - _1804) / _1799, (_1791 - _1806) / _1799), _1809), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1787 - _1806) / _1799, (_1804 + _1791) / _1799), _1809), 0.0)).x), vec4(0.25)));
        _1871 = 1.0 - (_1864 * cbSceneParam._m0[34u].x);
        _1872 = 1.0 - (_1864 * cbSceneParam._m0[34u].y);
        _1873 = 1.0 - (_1864 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1871 = 1.0;
        _1872 = 1.0;
        _1873 = 1.0;
    }
    float _1937;
    float _1939;
    float _1941;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1925 = fma(_1721, cbSceneParam._m0[63u].w, fma(_1717, cbSceneParam._m0[63u].z, fma(_1713, cbSceneParam._m0[63u].y, _1709 * cbSceneParam._m0[63u].x)));
        float _1926 = fma(_1721, cbSceneParam._m0[60u].w, fma(_1717, cbSceneParam._m0[60u].z, fma(_1713, cbSceneParam._m0[60u].y, _1709 * cbSceneParam._m0[60u].x))) / _1925;
        float _1927 = fma(_1721, cbSceneParam._m0[61u].w, fma(_1717, cbSceneParam._m0[61u].z, fma(_1713, cbSceneParam._m0[61u].y, _1709 * cbSceneParam._m0[61u].x))) / _1925;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1926 >= cbSceneParam._m0[64u].x) && (_1927 >= cbSceneParam._m0[64u].y)) && (_1926 <= cbSceneParam._m0[64u].z)) && (_1927 <= cbSceneParam._m0[64u].w))
        {
            float _2066 = fma(_1721, cbSceneParam._m0[62u].w, fma(_1717, cbSceneParam._m0[62u].z, fma(_1713, cbSceneParam._m0[62u].y, _1709 * cbSceneParam._m0[62u].x))) / _1925;
            float _2070 = isnan(cbSceneParam._m0[41u].w) ? _2066 : (isnan(_2066) ? cbSceneParam._m0[41u].w : max(_2066, cbSceneParam._m0[41u].w));
            float _2113 = (cbSceneParam._m0[33u].x - sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724))) * cbSceneParam._m0[33u].y;
            float _4149 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
            float _2120 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1926, cbSceneParam._m0[33u].w + _1927), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1926, _1927 - cbSceneParam._m0[33u].z), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1926 - cbSceneParam._m0[33u].z, _1927 - cbSceneParam._m0[33u].w), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1926 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1927), _2070), 0.0)).x), vec4(0.25)));
            float _2124 = 1.0 - (_2120 * cbSceneParam._m0[34u].x);
            float _2125 = 1.0 - (_2120 * cbSceneParam._m0[34u].y);
            float _2126 = 1.0 - (_2120 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2126) ? _1873 : (isnan(_1873) ? _2126 : min(_1873, _2126));
            frontier_phi_34_33_ladder_1 = isnan(_2125) ? _1872 : (isnan(_1872) ? _2125 : min(_1872, _2125));
            frontier_phi_34_33_ladder_2 = isnan(_2124) ? _1871 : (isnan(_1871) ? _2124 : min(_1871, _2124));
        }
        else
        {
            frontier_phi_34_33_ladder = _1873;
            frontier_phi_34_33_ladder_1 = _1872;
            frontier_phi_34_33_ladder_2 = _1871;
        }
        _1937 = frontier_phi_34_33_ladder_2;
        _1939 = frontier_phi_34_33_ladder_1;
        _1941 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1937 = _1871;
        _1939 = _1872;
        _1941 = _1873;
    }
    uvec4 _1946 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1948 = _1946.x * 14u;
    uint _1949 = _1948 + 13u;
    float _1956 = _644 + (-1.0);
    float _1961 = (cbLight._m0[_1949].x * _1956) + 1.0;
    float _1962 = (cbLight._m0[_1949].y * _1956) + 1.0;
    float _1963 = (cbLight._m0[_1949].z * _1956) + 1.0;
    float _1964 = (cbLight._m0[_1949].w * _1956) + 1.0;
    uint _1965 = _1948 + 5u;
    float _1971 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
    uint _1975 = _1948 + 4u;
    float _1985 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
    uint _1989 = _1948 | 1u;
    float _2000 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_475, _476, _477));
    float _2003 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_475, _476, _477));
    float _4185 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _4196 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2008 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.3183098733425140380859375;
    float _2010 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.3183098733425140380859375;
    float _2017 = ((cbLight._m0[_1965].x * _1971) * _2010) + (((cbLight._m0[_1975].x * _1937) * _1985) * _2008);
    float _2018 = ((_1971 * cbLight._m0[_1965].y) * _2010) + (((cbLight._m0[_1975].y * _1939) * _1985) * _2008);
    float _2019 = ((_1971 * cbLight._m0[_1965].z) * _2010) + (((cbLight._m0[_1975].z * _1941) * _1985) * _2008);
    uvec4 _2023 = floatBitsToUint(cbLight._m0[_1948 + 12u]);
    bool _2025 = _2023.x == 0u;
    float _2127;
    float _2129;
    float _2131;
    if (_2025)
    {
        _2127 = _2017;
        _2129 = _2018;
        _2131 = _2019;
    }
    else
    {
        uint _2135 = _1948 + 6u;
        float _2151 = (dot(vec3(cbLight._m0[_1948 + 2u].xyz), vec3(_475, _476, _477)) * 0.5) + 0.5;
        float _2152 = _2151 * _2151;
        float _4207 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2153 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2154 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2127 = (((cbLight._m0[_2135].x * 0.3183098733425140380859375) * _2153) * _2154) + _2017;
        _2129 = (((cbLight._m0[_2135].y * 0.3183098733425140380859375) * _2153) * _2154) + _2018;
        _2131 = (((cbLight._m0[_2135].z * 0.3183098733425140380859375) * _2153) * _2154) + _2019;
    }
    bool _2134 = _2023.y == 0u;
    float _2189;
    float _2191;
    float _2193;
    if (_2134)
    {
        _2189 = _2127;
        _2191 = _2129;
        _2193 = _2131;
    }
    else
    {
        uint _2362 = _1948 + 7u;
        float _2378 = (dot(vec3(cbLight._m0[_1948 + 3u].xyz), vec3(_475, _476, _477)) * 0.5) + 0.5;
        float _2379 = _2378 * _2378;
        float _4223 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2380 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2381 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2189 = (((cbLight._m0[_2362].x * 0.3183098733425140380859375) * _2380) * _2381) + _2127;
        _2191 = (((cbLight._m0[_2362].y * 0.3183098733425140380859375) * _2380) * _2381) + _2129;
        _2193 = (((cbLight._m0[_2362].z * 0.3183098733425140380859375) * _2380) * _2381) + _2131;
    }
    uint _2196 = _1948 + 8u;
    float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _478) * 0.949999988079071044921875);
    float _2210 = _2209 * _2209;
    float _2211 = cbLight._m0[_1948].x + _555;
    float _2212 = cbLight._m0[_1948].y + _556;
    float _2213 = cbLight._m0[_1948].z + _557;
    float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
    float _2218 = _2217 * _2211;
    float _2219 = _2217 * _2212;
    float _2220 = _2217 * _2213;
    float _2221 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1948].xyz));
    float _4239 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _4250 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _2225 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2226 = dot(vec3(_475, _476, _477), vec3(_2218, _2219, _2220));
    float _4261 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2230 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_2218, _2219, _2220));
    float _4272 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = _2210 * _2210;
    float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
    float _2246 = exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0);
    float _2247 = 0.959999978542327880859375 - _625;
    float _2249 = 0.959999978542327880859375 - _626;
    float _2250 = 0.959999978542327880859375 - _627;
    float _2257 = 1.0 - _2210;
    float _2268 = (0.5 / (((_2225 * ((_2224 * _2257) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2257) + _2210) * _2224))) * _2224;
    float _4283 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2270 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
    uint _2284 = _1948 + 9u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _478) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_1989].x + _555;
    float _2298 = cbLight._m0[_1989].y + _556;
    float _2299 = cbLight._m0[_1989].z + _557;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1989].xyz));
    float _4294 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2311 = dot(vec3(_475, _476, _477), vec3(_2304, _2305, _2306));
    float _4305 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2315 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2304, _2305, _2306));
    float _4316 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2319 = _2296 * _2296;
    float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
    float _2330 = exp2(log2(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * 5.0);
    float _2337 = 1.0 - _2296;
    float _2347 = (0.5 / (((_2225 * ((_2310 * _2337) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2337) + _2296) * _2310))) * _2310;
    float _4327 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2349 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
    float _2359 = (((((_2330 * _2247) + _628) * cbLight._m0[_2284].x) * _2349) * _1971) + ((((cbLight._m0[_2196].x * _1937) * ((_2246 * _2247) + _628)) * _2270) * _1985);
    float _2360 = (((((_2330 * _2249) + _630) * cbLight._m0[_2284].y) * _2349) * _1971) + ((((cbLight._m0[_2196].y * _1939) * ((_2246 * _2249) + _630)) * _2270) * _1985);
    float _2361 = (((((_2330 * _2250) + _631) * cbLight._m0[_2284].z) * _2349) * _1971) + ((((cbLight._m0[_2196].z * _1941) * ((_2246 * _2250) + _631)) * _2270) * _1985);
    float _2417;
    float _2419;
    float _2421;
    if (_2025)
    {
        _2417 = _2359;
        _2419 = _2360;
        _2421 = _2361;
    }
    else
    {
        uint _2423 = _1948 + 2u;
        uint _2427 = _1948 + 10u;
        float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2423].w)) * _478) * 0.949999988079071044921875);
        float _2442 = _2441 * _2441;
        float _2443 = cbLight._m0[_2423].x + _555;
        float _2444 = cbLight._m0[_2423].y + _556;
        float _2445 = cbLight._m0[_2423].z + _557;
        float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
        float _2450 = _2449 * _2443;
        float _2451 = _2449 * _2444;
        float _2452 = _2449 * _2445;
        float _2453 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_2423].xyz));
        float _4338 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2457 = dot(vec3(_475, _476, _477), vec3(_2450, _2451, _2452));
        float _4349 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2461 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_2450, _2451, _2452));
        float _4360 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2465 = _2442 * _2442;
        float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
        float _2476 = exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0);
        float _2483 = 1.0 - _2442;
        float _2493 = (0.5 / (((_2225 * ((_2456 * _2483) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2483) + _2442) * _2456))) * _2456;
        float _4371 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2417 = (((((_2476 * _2247) + _628) * cbLight._m0[_2427].x) * _2495) * _2496) + _2359;
        _2419 = (((((_2476 * _2249) + _630) * cbLight._m0[_2427].y) * _2495) * _2496) + _2360;
        _2421 = (((((_2476 * _2250) + _631) * cbLight._m0[_2427].z) * _2495) * _2496) + _2361;
    }
    float _2527;
    float _2529;
    float _2531;
    if (_2134)
    {
        _2527 = _2417;
        _2529 = _2419;
        _2531 = _2421;
    }
    else
    {
        uint _2538 = _1948 + 3u;
        uint _2542 = _1948 + 11u;
        float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2538].w)) * _478) * 0.949999988079071044921875);
        float _2557 = _2556 * _2556;
        float _2558 = cbLight._m0[_2538].x + _555;
        float _2559 = cbLight._m0[_2538].y + _556;
        float _2560 = cbLight._m0[_2538].z + _557;
        float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
        float _2565 = _2564 * _2558;
        float _2566 = _2564 * _2559;
        float _2567 = _2564 * _2560;
        float _2568 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_2538].xyz));
        float _4387 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2572 = dot(vec3(_475, _476, _477), vec3(_2565, _2566, _2567));
        float _4398 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2576 = dot(vec3(cbLight._m0[_2538].xyz), vec3(_2565, _2566, _2567));
        float _4409 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2580 = _2557 * _2557;
        float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
        float _2591 = exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0);
        float _2598 = 1.0 - _2557;
        float _2608 = (0.5 / (((_2225 * ((_2571 * _2598) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2598) + _2557) * _2571))) * _2571;
        float _4420 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2610 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
        float _2611 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2527 = (((((_2591 * _2247) + _628) * cbLight._m0[_2542].x) * _2610) * _2611) + _2417;
        _2529 = (((((_2591 * _2249) + _630) * cbLight._m0[_2542].y) * _2610) * _2611) + _2419;
        _2531 = (((((_2591 * _2250) + _631) * cbLight._m0[_2542].z) * _2610) * _2611) + _2421;
    }
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    if (_1946.y == 0u)
    {
        uvec4 _2632 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2633 = _2632.x;
        uint _2644 = uint((float(_2632.y) * floor(float(uint(cbSceneParam._m0[85u].y * _564) / _2633))) + floor(float(uint(cbSceneParam._m0[85u].x * _563) / _2633)));
        float _2654 = (log2(_1724 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2655 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        uint _2658 = uint(isnan(14.0) ? _2655 : (isnan(_2655) ? 14.0 : min(_2655, 14.0)));
        uvec4 _2663 = texelFetch(g_lightClusterGridBuffer, int(((_2658 << 2u) + (_2644 << 6u)) >> 2u));
        uint _2664 = _2663.x;
        uint _2665 = _2632.z;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        if (((((1u << ((_2665 >> 4u) & 15u)) + 4294967295u) & _2664) == 0u) || ((_2665 & 240u) == 0u))
        {
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
        }
        else
        {
            float _2745;
            float _2747;
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            uint _2895 = 0u;
            uint _2904;
            bool _2905;
            for (;;)
            {
                _2904 = texelFetch(g_lightClassification, int((((_2658 << 5u) + (_2644 << 9u)) + (_2895 << 2u)) >> 2u)).x;
                _2905 = _2904 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2905)
                {
                    frontier_phi_66_pred = _2894;
                    frontier_phi_66_pred_1 = _2893;
                    frontier_phi_66_pred_2 = _2892;
                    frontier_phi_66_pred_3 = _2891;
                    frontier_phi_66_pred_4 = _2890;
                    frontier_phi_66_pred_5 = _2889;
                }
                else
                {
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    uint _3019;
                    _3013 = _2889;
                    _3014 = _2890;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2894;
                    _3019 = _2904;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    for (;;)
                    {
                        uint _3023 = uint(findLSB(_3019)) + (_2895 << 5u);
                        uint _3020 = (_3019 + 4294967295u) & _3019;
                        uint _3025 = _3023 * 48u;
                        vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3025)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 3u)).x));
                        uint _3045 = (_3023 * 48u) + 4u;
                        vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 3u)).x));
                        uint _3064 = (_3023 * 48u) + 8u;
                        vec3 _3075 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x));
                        float _3079 = _3039.x - _1722;
                        float _3080 = _3039.y - _1723;
                        float _3081 = _3039.z - _1724;
                        float _3082 = dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081));
                        float _3085 = inversesqrt(_3082);
                        float _3086 = _3085 * _3079;
                        float _3087 = _3085 * _3080;
                        float _3088 = _3085 * _3081;
                        float _3089 = dot(vec3(_585, _588, _591), vec3(_3086, _3087, _3088));
                        float _3094 = 1.0 - (_3082 * _3039.w);
                        float _4446 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3095 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3096 = sqrt(_3082) * _3058.w;
                        float _3099 = 1.39999997615814208984375 / (_3096 + 1.39999997615814208984375);
                        float _3100 = _3099 * _3099;
                        float _3103 = ((1.0 - _3100) * _3089) + _3100;
                        float _3106 = _3096 * _3096;
                        float _3110 = ((isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))) * _3095) / ((_3106 * 0.699999988079071044921875) + 1.0);
                        float _3114 = (-0.0) - _1722;
                        float _3115 = (-0.0) - _1723;
                        float _3116 = (-0.0) - _1724;
                        float _3120 = inversesqrt(dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116)));
                        float _3121 = _3120 * _3114;
                        float _3122 = _3120 * _3115;
                        float _3123 = _3120 * _3116;
                        float _3130 = exp2(log2(1.0 / ((_3106 * 3.5) + 5.0)) * 0.25);
                        float _3131 = 1.0 - _660;
                        float _3138 = sqrt(1.0 - ((1.0 - (_3131 * _3131)) * (1.0 - (_3130 * _3130))));
                        float _3139 = _3138 * _3138;
                        float _3140 = _3139 * _3139;
                        float _3141 = _3121 + _3086;
                        float _3142 = _3122 + _3087;
                        float _3143 = _3123 + _3088;
                        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                        float _3151 = dot(vec3(_585, _588, _591), vec3(_3121, _3122, _3123));
                        float _4462 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3154 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3155 = dot(vec3(_585, _588, _591), vec3(_3147 * _3141, _3147 * _3142, _3147 * _3143));
                        float _4473 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3158 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3162 = ((_3158 * _3158) * (_3140 + (-1.0))) + 1.0;
                        float _3163 = _3099 * _3139;
                        float _3164 = _3163 * _3163;
                        float _3167 = ((1.0 - _3164) * _3089) + _3164;
                        float _4484 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3169 = 1.0 - _3139;
                        float _3179 = (0.5 / (((_3168 * ((_3154 * _3169) + _3139)) + 9.9999999392252902907785028219223e-09) + (((_3168 * _3169) + _3139) * _3154))) * _3168;
                        float _4495 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3190 = (((_3140 * 3.1415927410125732421875) * (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) / ((_3162 * _3162) * ((_3106 * 2.1991131305694580078125) + 3.141590118408203125))) * _3095;
                        _2948 = (_3110 * _3058.x) + _3016;
                        _2949 = (_3110 * _3058.y) + _3017;
                        _2950 = (_3110 * _3058.z) + _3018;
                        _2945 = (_3190 * _3075.x) + _3013;
                        _2946 = (_3190 * _3075.y) + _3014;
                        _2947 = (_3190 * _3075.z) + _3015;
                        if (_3020 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _2950;
                            _3019 = _3020;
                        }
                    }
                    frontier_phi_66_pred = _2950;
                    frontier_phi_66_pred_1 = _2949;
                    frontier_phi_66_pred_2 = _2948;
                    frontier_phi_66_pred_3 = _2947;
                    frontier_phi_66_pred_4 = _2946;
                    frontier_phi_66_pred_5 = _2945;
                }
                _2755 = frontier_phi_66_pred;
                _2753 = frontier_phi_66_pred_1;
                _2751 = frontier_phi_66_pred_2;
                _2749 = frontier_phi_66_pred_3;
                _2747 = frontier_phi_66_pred_4;
                _2745 = frontier_phi_66_pred_5;
                uint _2896 = _2895 + 1u;
                if (_2896 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2889 = _2745;
                    _2890 = _2747;
                    _2891 = _2749;
                    _2892 = _2751;
                    _2893 = _2753;
                    _2894 = _2755;
                    _2895 = _2896;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
        }
        uvec4 _2758 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2759 = _2758.z;
        uint _2761 = (_2759 >> 8u) & 15u;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        if (((4294967295u << _2761) & _2664) == 0u)
        {
            _2857 = _2744;
            _2859 = _2746;
            _2861 = _2748;
            _2863 = _2750;
            _2865 = _2752;
            _2867 = _2754;
        }
        else
        {
            float _2882 = inversesqrt(dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724)));
            float _2883 = _2882 * _1722;
            float _2884 = _2882 * _1723;
            float _2885 = _2882 * _1724;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2761 < ((_2759 >> 12u) & 15u))
            {
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _2868;
                float _2996 = _2744;
                float _2997 = _2746;
                float _2998 = _2748;
                float _2999 = _2750;
                float _3000 = _2752;
                float _3001 = _2754;
                uint _3002 = _2761;
                uint _3011;
                bool _3012;
                for (;;)
                {
                    _3011 = texelFetch(g_lightClassification, int((((_2658 << 5u) + (_2644 << 9u)) + (_3002 << 2u)) >> 2u)).x;
                    _3012 = _3011 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3012)
                    {
                        frontier_phi_72_pred = _3001;
                        frontier_phi_72_pred_1 = _3000;
                        frontier_phi_72_pred_2 = _2999;
                        frontier_phi_72_pred_3 = _2998;
                        frontier_phi_72_pred_4 = _2997;
                        frontier_phi_72_pred_5 = _2996;
                    }
                    else
                    {
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3208 = _2996;
                        float _3209 = _2997;
                        float _3210 = _2998;
                        float _3211 = _2999;
                        float _3212 = _3000;
                        float _3213 = _3001;
                        uint _3214 = _3011;
                        uint _3215;
                        vec4 _3240;
                        float _3241;
                        vec4 _3256;
                        vec3 _3268;
                        vec4 _3284;
                        vec4 _3299;
                        float _3345;
                        bool _3346;
                        for (;;)
                        {
                            uint _3225 = ((_3002 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3214));
                            _3215 = (_3214 + 4294967295u) & _3214;
                            uint _3227 = _3225 * 40u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            _3241 = _3240.w;
                            uint _3243 = (_3225 * 40u) + 4u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3258 = (_3225 * 40u) + 8u;
                            _3268 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x));
                            uint _3271 = (_3225 * 40u) + 16u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3286 = (_3225 * 40u) + 20u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3301 = (_3225 * 40u) + 24u;
                            vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3320 = (_3225 * 40u) + 28u;
                            vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            _3345 = fma(_1724, _3333.z, fma(_1723, _3333.y, _3333.x * _1722)) + _3333.w;
                            _3346 = !((fma(_1724, _3314.z, fma(_1723, _3314.y, _3314.x * _1722)) + _3314.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3346)
                            {
                                float _3373 = _3240.x - _1722;
                                float _3374 = _3240.y - _1723;
                                float _3375 = _3240.z - _1724;
                                float _3376 = dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375));
                                float _3379 = inversesqrt(_3376);
                                float _3380 = _3379 * _3373;
                                float _3381 = _3379 * _3374;
                                float _3382 = _3379 * _3375;
                                float _3386 = 1.0 - (_3376 / (_3241 * _3241));
                                float _4506 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3391 = sqrt(_3376) * _3256.w;
                                float _3393 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                                float _3394 = _3393 * _3393;
                                float _3397 = ((1.0 - _3394) * dot(vec3(_3380, _3381, _3382), vec3(_585, _588, _591))) + _3394;
                                float _3400 = _3391 * _3391;
                                float _3404 = (fma(_1724, _3284.z, fma(_1723, _3284.y, _3284.x * _1722)) + _3284.w) / _3345;
                                float _3405 = (fma(_1724, _3299.z, fma(_1723, _3299.y, _3299.x * _1722)) + _3299.w) / _3345;
                                float _3409 = 1.0 - dot(vec2(_3404, _3405), vec2(_3404, _3405));
                                float _4522 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3411 = _3410 * (((isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0))) * _3387) / ((_3400 * 0.699999988079071044921875) + 1.0));
                                float _3423 = exp2(log2(1.0 / ((_3400 * 3.5) + 5.0)) * 0.25);
                                float _3424 = 1.0 - _660;
                                float _3431 = sqrt(1.0 - ((1.0 - (_3424 * _3424)) * (1.0 - (_3423 * _3423))));
                                float _3432 = _3431 * _3431;
                                float _3433 = _3432 * _3432;
                                float _3434 = _3380 - _2883;
                                float _3435 = _3381 - _2884;
                                float _3436 = _3382 - _2885;
                                float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                                float _3444 = dot(vec3(_585, _588, _591), vec3((-0.0) - _2883, (-0.0) - _2884, (-0.0) - _2885));
                                float _4533 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3448 = dot(vec3(_585, _588, _591), vec3(_3440 * _3434, _3440 * _3435, _3440 * _3436));
                                float _4544 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3451 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3455 = ((_3451 * _3451) * (_3433 + (-1.0))) + 1.0;
                                float _3456 = _3393 * _3432;
                                float _3457 = _3456 * _3456;
                                float _3463 = ((1.0 - _3457) * dot(vec3(_585, _588, _591), vec3(_3380, _3381, _3382))) + _3457;
                                float _4555 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3465 = 1.0 - _3432;
                                float _3475 = (0.5 / (((_3464 * ((_3447 * _3465) + _3432)) + 9.9999999392252902907785028219223e-09) + (((_3464 * _3465) + _3432) * _3447))) * _3464;
                                float _4566 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3485 = (_3410 * _3387) * (((_3433 * 3.1415927410125732421875) * (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) / ((_3455 * _3455) * ((_3400 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3411 * _3256.y;
                                frontier_phi_78_pred_1 = _3411 * _3256.x;
                                frontier_phi_78_pred_2 = _3485 * _3268.z;
                                frontier_phi_78_pred_3 = _3485 * _3268.y;
                                frontier_phi_78_pred_4 = _3485 * _3268.x;
                                frontier_phi_78_pred_5 = _3411 * _3256.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3493 = frontier_phi_78_pred;
                            _3492 = frontier_phi_78_pred_1;
                            _3491 = frontier_phi_78_pred_2;
                            _3490 = frontier_phi_78_pred_3;
                            _3489 = frontier_phi_78_pred_4;
                            _3494 = frontier_phi_78_pred_5;
                            _3198 = _3492 + _3211;
                            _3199 = _3493 + _3212;
                            _3200 = _3494 + _3213;
                            _3195 = _3489 + _3208;
                            _3196 = _3490 + _3209;
                            _3197 = _3491 + _3210;
                            if (_3215 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3215;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3200;
                        frontier_phi_72_pred_1 = _3199;
                        frontier_phi_72_pred_2 = _3198;
                        frontier_phi_72_pred_3 = _3197;
                        frontier_phi_72_pred_4 = _3196;
                        frontier_phi_72_pred_5 = _3195;
                    }
                    _2868 = frontier_phi_72_pred;
                    _2866 = frontier_phi_72_pred_1;
                    _2864 = frontier_phi_72_pred_2;
                    _2862 = frontier_phi_72_pred_3;
                    _2860 = frontier_phi_72_pred_4;
                    _2858 = frontier_phi_72_pred_5;
                    uint _3003 = _3002 + 1u;
                    if (_3003 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2996 = _2858;
                        _2997 = _2860;
                        _2998 = _2862;
                        _2999 = _2864;
                        _3000 = _2866;
                        _3001 = _2868;
                        _3002 = _3003;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2868;
                frontier_phi_60_61_ladder_1 = _2866;
                frontier_phi_60_61_ladder_2 = _2862;
                frontier_phi_60_61_ladder_3 = _2860;
                frontier_phi_60_61_ladder_4 = _2858;
                frontier_phi_60_61_ladder_5 = _2864;
            }
            else
            {
                frontier_phi_60_61_ladder = _2754;
                frontier_phi_60_61_ladder_1 = _2752;
                frontier_phi_60_61_ladder_2 = _2748;
                frontier_phi_60_61_ladder_3 = _2746;
                frontier_phi_60_61_ladder_4 = _2744;
                frontier_phi_60_61_ladder_5 = _2750;
            }
            _2857 = frontier_phi_60_61_ladder_4;
            _2859 = frontier_phi_60_61_ladder_3;
            _2861 = frontier_phi_60_61_ladder_2;
            _2863 = frontier_phi_60_61_ladder_5;
            _2865 = frontier_phi_60_61_ladder_1;
            _2867 = frontier_phi_60_61_ladder;
        }
        float _2872 = isnan(1.0) ? _644 : (isnan(_644) ? 1.0 : min(_644, 1.0));
        _2677 = (_2872 * _2863) + _2189;
        _2679 = (_2872 * _2865) + _2191;
        _2681 = (_2872 * _2867) + _2193;
        _2683 = ((_2857 * _628) * _2872) + _2527;
        _2685 = ((_2859 * _630) * _2872) + _2529;
        _2687 = ((_2861 * _631) * _2872) + _2531;
    }
    else
    {
        _2677 = _2189;
        _2679 = _2191;
        _2681 = _2193;
        _2683 = _2527;
        _2685 = _2529;
        _2687 = _2531;
    }
    float _4582 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _4593 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4604 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    uint _2707 = _230 + 6u;
    float _2715 = _563 / cbSceneParam._m0[86u].x;
    float _2716 = _564 / cbSceneParam._m0[86u].y;
    vec4 _2730 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2715, _2716, (log2((isnan(cbSceneParam._m0[77u].w) ? _497 : (isnan(_497) ? cbSceneParam._m0[77u].w : min(_497, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2732 = _2730.x;
    float _2733 = _2730.y;
    float _2734 = _2730.z;
    float _2735 = _2730.w;
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    if (_497 > cbSceneParam._m0[78u].w)
    {
        float _2769 = isnan(_497) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _497 : min(cbSceneParam._m0[80u].w, _497));
        float _2770 = _2769 / _497;
        float _2781 = _2770 * _548;
        float _2782 = _549 * _2770;
        float _2783 = (-0.0) - _2782;
        float _2785 = _2770 * _550;
        float _2787 = (cbSceneParam._m0[77u].w * _2783) / _2769;
        float _2788 = _2787 + cbSceneParam._m0[79u].w;
        float _2789 = cbSceneParam._m0[79u].w - _2782;
        float _2795 = sqrt(((_2781 * _2781) + (_2782 * _2782)) + (_2785 * _2785));
        float _2798 = (1.0 - (cbSceneParam._m0[77u].w / _2769)) * _2795;
        float _2803 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2805 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2958;
        if (abs((_2783 - _2787) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2958 = ((((_2788 > 0.0) ? exp2(_2803 * _2788) : (2.0 - exp2(_2805 * _2788))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2798;
        }
        else
        {
            float _2918 = 1.0 / cbSceneParam._m0[80u].x;
            float _2919 = isnan(_2789) ? _2788 : (isnan(_2788) ? _2789 : max(_2788, _2789));
            float _2920 = isnan(_2789) ? _2788 : (isnan(_2788) ? _2789 : min(_2788, _2789));
            float _2929 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : min(_2919, 0.0));
            float _2930 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : min(_2920, 0.0));
            _2958 = ((abs(_2795 / _2783) * cbSceneParam._m0[80u].y) * ((((_2929 - _2930) * 2.0) - ((exp2(_2803 * (isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0)))) - exp2(_2803 * (isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0))))) * _2918)) - ((exp2(_2805 * _2929) - exp2(_2805 * _2930)) * _2918))) + (_2798 * cbSceneParam._m0[80u].z);
        }
        vec4 _2960 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2715, _2716, 1.0), 0.0);
        float _2969 = exp2((_2958 * (-1.44269502162933349609375)) * (1.0 - _2960.w));
        float _2970 = log2(_2969);
        float _2986 = log2(_2735);
        _2807 = (exp2(_2986 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].x)) * _2960.x) / cbSceneParam._m0[78u].x)) + _2732;
        _2809 = (exp2(_2986 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].y)) * _2960.y) / cbSceneParam._m0[78u].y)) + _2733;
        _2811 = (exp2(_2986 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].z)) * _2960.z) / cbSceneParam._m0[78u].z)) + _2734;
        _2813 = _2969 * _2735;
    }
    else
    {
        _2807 = _2732;
        _2809 = _2733;
        _2811 = _2734;
        _2813 = _2735;
    }
    float _2825 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2826 = _2825 == 3.0;
    float _2827 = log2(_2813);
    float _2834 = exp2(_2827 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2677 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _644))) + ((_2683 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1453)) * cbPerFrame._m0[3u].x));
    float _2835 = exp2(_2827 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2679 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _644))) + ((_2685 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1453)) * cbPerFrame._m0[3u].x));
    float _2836 = exp2(_2827 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2681 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _644))) + ((_2687 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1453)) * cbPerFrame._m0[3u].x));
    float _2845 = (_2825 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2845 * (_2826 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2807)));
    SV_Target.y = _2845 * (_2826 ? _2835 : (_2835 + (cbSceneParam._m0[72u].w * _2809)));
    SV_Target.z = _2845 * (_2826 ? _2836 : (_2836 + (cbSceneParam._m0[72u].w * _2811)));
    SV_Target.w = cbInstanceData._m0[_2707].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2707].w;
}


