#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1461;
float _3841;
float _3842;
float _3843;
float _3844;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3853 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3864 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3875 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3886 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) + _453;
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    float _537 = ((_507.z - _528) * _434) + _528;
    float _540 = ((((_507.x - _526) * _434) + _526) * 2.0) + (-1.0);
    float _541 = ((((_507.y - _527) * _434) + _527) * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3897 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))));
    float _550 = _540 + ((((_480.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _551 = _541 + ((((_480.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _554 = fma(_547, _252, fma(_551, _259, _550 * _245));
    float _557 = fma(_547, _253, fma(_551, _260, _550 * _246));
    float _560 = fma(_547, _254, fma(_551, _261, _550 * _247));
    float _564 = inversesqrt(dot(vec3(_554, _557, _560), vec3(_554, _557, _560)));
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _606 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _608 = _606.x;
    float _609 = 1.0 - _608;
    float _613 = ((_608 - _609) * cbMtdParam._m0[24u].z) + _609;
    float _615 = (cbMtdParam._m0[19u].x + dot(vec4(_564 * _554, _564 * _557, _564 * _560, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_613 * cbMtdParam._m0[21u].z);
    float _3908 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _616 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _618 = (-0.0) - cbMtdParam._m0[24u].x;
    float _620 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _620 : (isnan(_620) ? 1.0 : min(_620, 1.0));
    float _628 = _616 - ((_616 * TEXCOORD_8.x) * _621);
    float _629 = _616 - ((_616 * TEXCOORD_8.y) * _621);
    float _630 = _616 - ((_616 * TEXCOORD_8.z) * _621);
    float _637 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _641 = ((isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : min(_637, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _649 = (_641 - (((_613 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _641))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3939 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _650 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _654 = ((_628 * (cbMtdParam._m0[17u].x - _460)) * _650) + _460;
    float _655 = ((_629 * (cbMtdParam._m0[17u].y - _461)) * _650) + _461;
    float _656 = ((_630 * (cbMtdParam._m0[17u].z - _462)) * _650) + _462;
    vec4 _668 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _670 = _668.x;
    float _671 = 1.0 - _670;
    float _696 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_670 - _671) * cbMtdParam._m0[24u].w) + _671) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3950 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _705 = ((((cbMtdParam._m0[10u].x - _654) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _697) + _654;
    float _706 = ((((cbMtdParam._m0[10u].y - _655) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _697) + _655;
    float _707 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _656)) * _697) + _656;
    vec4 _733 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _735 = _733.x;
    float _753 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _735) * _434) + _735;
    float _757 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _753) * cbMtdParam._m0[19u].z) + _753;
    float _760 = _757 - ((_650 * _628) * _757);
    float _762 = _760 - (_760 * _697);
    float _767 = (((_480.z - _537) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _537;
    vec4 _781 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _788 = (_781.x * 2.0) + (-1.0);
    float _789 = (_781.y * 2.0) + (-1.0);
    float _790 = dot(vec2(_788, _789), vec2(_788, _789));
    float _3961 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _799 = (((_781.z - _767) * _628) * _650) + _767;
    float _802 = ((cbMtdParam._m0[23u].y - _799) * _697) + _799;
    vec4 _821 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _827 = (_821.x * 2.0) + (-1.0);
    float _828 = (_821.y * 2.0) + (-1.0);
    float _829 = dot(vec2(_827, _828), vec2(_827, _828));
    float _3972 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _849 = (((cbMtdParam._m0[21u].x * _550) + ((_788 - _550) * _628)) * _650) + _550;
    float _850 = (((cbMtdParam._m0[21u].x * _551) + ((_789 - _551) * _629)) * _650) + _551;
    float _851 = (((sqrt(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) - _547) * _630) * _650) + _547;
    float _862 = (((_827 - _849) + (_849 * cbMtdParam._m0[22u].z)) * _697) + _849;
    float _863 = (((_828 - _850) + (_850 * cbMtdParam._m0[22u].z)) * _697) + _850;
    float _864 = ((sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) - _851) * _697) + _851;
    float _868 = cbMtdParam._m0[22u].x + _580.w;
    float _871 = fma(_864, _252, fma(_863, _259, _862 * _245));
    float _874 = fma(_864, _253, fma(_863, _260, _862 * _246));
    float _877 = fma(_864, _254, fma(_863, _261, _862 * _247));
    float _881 = inversesqrt(dot(vec3(_871, _874, _877), vec3(_871, _874, _877)));
    float _882 = _881 * _871;
    float _883 = _881 * _874;
    float _884 = _881 * _877;
    float _3983 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _885 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4005 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4016 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4027 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4038 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _890 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _904 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _954 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _944);
    float _955 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _944);
    float _956 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _944);
    float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
    float _961 = _954 * _960;
    float _962 = _955 * _960;
    float _963 = _956 * _960;
    vec4 _968 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _970 = _968.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1142 = sqrt(((_954 * _954) + (_955 * _955)) + (_956 * _956));
        float _1148 = (cbMatDynParam._m0[5u].x * _1142) + cbMatDynParam._m0[5u].y;
        float _4049 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1153 = (cbMatDynParam._m0[5u].z * _1142) + cbMatDynParam._m0[5u].w;
        float _4060 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) - _1149)) + _1149) < ((_970 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _981 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _982 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1000 = fma(_884, cbSceneParam._m0[5u].z, fma(_883, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _882));
    float _1003 = fma(_884, cbSceneParam._m0[6u].z, fma(_883, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _882));
    float _1006 = fma(_884, cbSceneParam._m0[7u].z, fma(_883, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _882));
    uint _1019 = _283 + 9u;
    uint _1020 = _1019 + uint(cbMatDynParam._m0[0u].w);
    float _1026 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * cbInstanceData._m0[_1020].x;
    float _1027 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_1020].y;
    float _1028 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * cbInstanceData._m0[_1020].z;
    float _4071 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1029 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1030 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _1032 = 1.0 - _890;
    float _1033 = _1029 * _1032;
    float _1034 = _1030 * _1032;
    float _1035 = _1031 * _1032;
    float _1040 = (_1029 + (-0.039999999105930328369140625)) * _890;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _890;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _890;
    float _1043 = _1040 + 0.039999999105930328369140625;
    float _1045 = _1041 + 0.039999999105930328369140625;
    float _1046 = _1042 + 0.039999999105930328369140625;
    vec4 _1055 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _981, cbSceneParam._m0[86u].y * _982));
    float _1059 = ((isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * TEXCOORD_5.w) * _1055.x;
    float _1060 = dot(vec3(_882, _883, _884), vec3(_961, _962, _963));
    float _1063 = _1060 * 2.0;
    float _1067 = (_1063 * _882) - _961;
    float _1068 = (_1063 * _883) - _962;
    float _1069 = (_1063 * _884) - _963;
    float _1073 = abs(dot(vec3(_961, _962, _963), vec3(_882, _883, _884)));
    float _4104 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1075 = sqrt(_885);
    float _1088 = exp2((_1075 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1075 * 3.0));
    float _1094 = (1.0 - _1088) * ((_1075 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1095 = _1088 * _1075;
    float _1123 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1460;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1185 = fma(_1131, cbModelParam._m0[26u].z, fma(_1127, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123));
        float _1189 = fma(_1131, cbModelParam._m0[27u].z, fma(_1127, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123));
        float _1193 = fma(_1131, cbModelParam._m0[28u].z, fma(_1127, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123));
        float _1218 = _1123 + _882;
        float _1219 = _1127 + _883;
        float _1220 = _1131 + _884;
        float _1230 = fma(_1220, cbModelParam._m0[26u].z, fma(_1219, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1218)) - _1185;
        float _1231 = fma(_1220, cbModelParam._m0[27u].z, fma(_1219, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1218)) - _1189;
        float _1232 = fma(_1220, cbModelParam._m0[28u].z, fma(_1219, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1218)) - _1193;
        float _1236 = inversesqrt(dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232)));
        float _1249 = ((_1236 * _1230) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1185 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1236 * _1231) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1189 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1236 * _1232) / cbModelParam._m0[34u].z) + ((((((_1193 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        float _1288 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1254.x + (-0.5));
        float _1290 = _1288 * (_1254.y + (-0.5));
        float _1291 = _1288 * (_1254.z + (-0.5));
        float _1298 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1261.x + (-0.5));
        float _1300 = _1298 * (_1261.y + (-0.5));
        float _1301 = _1298 * (_1261.z + (-0.5));
        float _1308 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1268.x + (-0.5));
        float _1310 = _1308 * (_1268.y + (-0.5));
        float _1311 = _1308 * (_1268.z + (-0.5));
        float _1318 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1275.x + (-0.5));
        float _1320 = _1318 * (_1275.y + (-0.5));
        float _1321 = _1318 * (_1275.z + (-0.5));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = _1289 * 0.5;
        float _1326 = _1299 * 0.5;
        float _1327 = _1309 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1342 = (dot(vec3(_882, _883, _884), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1352 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _4152 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1354 + 1.0))) + _1359) * _1322;
        float _1369 = _1290 * 0.5;
        float _1370 = _1300 * 0.5;
        float _1371 = _1310 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_882, _883, _884), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4185 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1396 + 1.0))) + _1401) * _1323;
        float _1411 = _1291 * 0.5;
        float _1412 = _1301 * 0.5;
        float _1413 = _1311 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_882, _883, _884), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4218 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1438 + 1.0))) + _1443) * _1324;
        _1460 = _1291;
        _1462 = _1290;
        _1463 = _1289;
        _1464 = _1301;
        _1465 = _1300;
        _1466 = _1299;
        _1467 = _1311;
        _1468 = _1310;
        _1469 = _1309;
        _1470 = _1324;
        _1471 = _1323;
        _1472 = _1322;
        _1473 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
    }
    else
    {
        _1460 = _1461;
        _1462 = _1461;
        _1463 = _1461;
        _1464 = _1461;
        _1465 = _1461;
        _1466 = _1461;
        _1467 = _1461;
        _1468 = _1461;
        _1469 = _1461;
        _1470 = _1461;
        _1471 = _1461;
        _1472 = _1461;
        _1473 = 0.0;
        _1474 = 0.0;
        _1475 = 0.0;
    }
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1503 = fma(_1131, cbModelParam._m0[30u].z, fma(_1127, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123));
        float _1507 = fma(_1131, cbModelParam._m0[31u].z, fma(_1127, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123));
        float _1511 = fma(_1131, cbModelParam._m0[32u].z, fma(_1127, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123));
        float _1534 = _1123 + _882;
        float _1535 = _1127 + _883;
        float _1536 = _1131 + _884;
        float _1546 = fma(_1536, cbModelParam._m0[30u].z, fma(_1535, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1534)) - _1503;
        float _1547 = fma(_1536, cbModelParam._m0[31u].z, fma(_1535, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1534)) - _1507;
        float _1548 = fma(_1536, cbModelParam._m0[32u].z, fma(_1535, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1534)) - _1511;
        float _1552 = inversesqrt(dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548)));
        float _1565 = ((_1552 * _1546) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1503 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1566 = ((_1552 * _1547) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1507 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1567 = ((_1552 * _1548) / cbModelParam._m0[35u].z) + ((((((_1511 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        float _1602 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1569.x + (-0.5));
        float _1604 = _1602 * (_1569.y + (-0.5));
        float _1605 = _1602 * (_1569.z + (-0.5));
        float _1612 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1576.x + (-0.5));
        float _1614 = _1612 * (_1576.y + (-0.5));
        float _1615 = _1612 * (_1576.z + (-0.5));
        float _1622 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1583.x + (-0.5));
        float _1624 = _1622 * (_1583.y + (-0.5));
        float _1625 = _1622 * (_1583.z + (-0.5));
        float _1632 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1590.x + (-0.5));
        float _1634 = _1632 * (_1590.y + (-0.5));
        float _1635 = _1632 * (_1590.z + (-0.5));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = _1603 * 0.5;
        float _1640 = _1613 * 0.5;
        float _1641 = _1623 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_882, _883, _884), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4281 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1666 + 1.0))) + _1671) * _1636;
        float _1681 = _1604 * 0.5;
        float _1682 = _1614 * 0.5;
        float _1683 = _1624 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_882, _883, _884), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4314 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1708 + 1.0))) + _1713) * _1637;
        float _1723 = _1605 * 0.5;
        float _1724 = _1615 * 0.5;
        float _1725 = _1625 * 0.5;
        float _1726 = dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725));
        float _1731 = (_1726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1726);
        float _1739 = (dot(vec3(_882, _883, _884), vec3(_1731 * _1723, _1731 * _1724, _1731 * _1725)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1748 = sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1750 = _1749 * 2.0;
        float _1754 = (1.0 - _1749) / (_1749 + 1.0);
        float _4347 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1764 = ((((1.0 - _1755) * (_1750 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1750 + 1.0))) + _1755) * _1638;
        _1772 = _1605;
        _1773 = _1604;
        _1774 = _1603;
        _1775 = _1615;
        _1776 = _1614;
        _1777 = _1613;
        _1778 = _1625;
        _1779 = _1624;
        _1780 = _1623;
        _1781 = _1638;
        _1782 = _1637;
        _1783 = _1636;
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
        _1786 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)));
    }
    else
    {
        _1772 = _1461;
        _1773 = _1461;
        _1774 = _1461;
        _1775 = _1461;
        _1776 = _1461;
        _1777 = _1461;
        _1778 = _1461;
        _1779 = _1461;
        _1780 = _1461;
        _1781 = _1461;
        _1782 = _1461;
        _1783 = _1461;
        _1784 = 0.0;
        _1785 = 0.0;
        _1786 = 0.0;
    }
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1473)) + _1473;
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1474)) + _1474;
    float _1798 = (cbModelParam._m0[1u].x * (_1786 - _1475)) + _1475;
    float _1819 = fma(_1798, cbSceneParam._m0[89u].z, fma(_1797, cbSceneParam._m0[89u].y, _1796 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1798, cbSceneParam._m0[90u].z, fma(_1797, cbSceneParam._m0[90u].y, _1796 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1798, cbSceneParam._m0[91u].z, fma(_1797, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1796));
    float _1840 = _1067 * 0.5;
    float _1841 = _1068 * 0.5;
    float _1842 = _1069 * 0.5;
    float _1843 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1846 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1849 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1883;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1856 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1460, _1464, _1467, _1470));
        float _1860 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1462, _1465, _1468, _1471));
        float _1864 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1463, _1466, _1469, _1472));
        float _1871 = dot(vec4(cbModelParam._m0[39u]), vec4(_1840, _1841, _1842, 1.0));
        _1883 = dot(vec3(isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1871) ? 0.0 : (isnan(0.0) ? _1871 : max(0.0, _1871))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1883 = 1.0;
    }
    float _1894;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1885 = dot(vec4(cbModelParam._m0[40u]), vec4(_1840, _1841, _1842, 1.0));
        _1894 = dot(vec3(isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1885) ? 0.0 : (isnan(0.0) ? _1885 : max(0.0, _1885))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1894 = 1.0;
    }
    float _1898 = (_1894 * cbModelParam._m0[1u].x) + (_1883 * (1.0 - cbModelParam._m0[1u].x));
    float _1908 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _885);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1908 : min(cbModelParam._m0[25u].z, _1908));
    float _1990;
    float _1992;
    float _1994;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1957 = fma(_1131, cbModelParam._m0[13u].z, fma(_1127, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1123)) + cbModelParam._m0[13u].w;
        float _1961 = fma(_1131, cbModelParam._m0[14u].z, fma(_1127, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1123)) + cbModelParam._m0[14u].w;
        float _1965 = fma(_1131, cbModelParam._m0[15u].z, fma(_1127, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1123)) + cbModelParam._m0[15u].w;
        float _1968 = fma(_1069, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067));
        float _1971 = fma(_1069, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067));
        float _1974 = fma(_1069, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067));
        float _2002;
        if (_1968 > 0.0)
        {
            _2002 = abs((1.0 - _1957) / _1968);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1957 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2002 = frontier_phi_17_15_ladder;
        }
        float _2205;
        if (_1971 > 0.0)
        {
            _2205 = abs((1.0 - _1961) / _1971);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1961 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2205 = frontier_phi_26_22_ladder;
        }
        float _2459;
        if (_1974 > 0.0)
        {
            _2459 = abs((1.0 - _1965) / _1974);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1965 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2459 = frontier_phi_38_33_ladder;
        }
        float _2461 = isnan(_2205) ? _2002 : (isnan(_2002) ? _2205 : min(_2002, _2205));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1968) + _1957;
        float _2467 = (_2462 * _1971) + _1961;
        float _2468 = (_2462 * _1974) + _1965;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2469;
        float _2473 = _2469 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 > _2473) || ((_2467 < _2471) || ((_2466 < _2471) || (_2466 > _2473))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2596 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2468, cbModelParam._m0[9u].z, fma(_2467, cbModelParam._m0[9u].y, _2466 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2468, cbModelParam._m0[10u].z, fma(_2467, cbModelParam._m0[10u].y, _2466 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2468, cbModelParam._m0[11u].z, fma(_2467, cbModelParam._m0[11u].y, _2466 * cbModelParam._m0[11u].x))), _1909);
            frontier_phi_16_38_ladder = _2596.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2596.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2596.x * cbModelParam._m0[1u].y;
        }
        _1990 = frontier_phi_16_38_ladder_2;
        _1992 = frontier_phi_16_38_ladder_1;
        _1994 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1978 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1067, _1068, _1069), _1909);
        _1990 = _1978.x * cbModelParam._m0[1u].y;
        _1992 = _1978.y * cbModelParam._m0[1u].y;
        _1994 = _1978.z * cbModelParam._m0[1u].y;
    }
    float _1998 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _885);
    float _1999 = isnan(_1998) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1998 : min(cbModelParam._m0[25u].w, _1998));
    float _2089;
    float _2091;
    float _2093;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2053 = fma(_1131, cbModelParam._m0[21u].z, fma(_1127, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1123)) + cbModelParam._m0[21u].w;
        float _2057 = fma(_1131, cbModelParam._m0[22u].z, fma(_1127, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1123)) + cbModelParam._m0[22u].w;
        float _2061 = fma(_1131, cbModelParam._m0[23u].z, fma(_1127, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1123)) + cbModelParam._m0[23u].w;
        float _2064 = fma(_1069, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067));
        float _2067 = fma(_1069, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067));
        float _2070 = fma(_1069, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067));
        float _2210;
        if (_2064 > 0.0)
        {
            _2210 = abs((1.0 - _2053) / _2064);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2053 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2210 = frontier_phi_28_24_ladder;
        }
        float _2486;
        if (_2067 > 0.0)
        {
            _2486 = abs((1.0 - _2057) / _2067);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2057 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2486 = frontier_phi_40_35_ladder;
        }
        float _2699;
        if (_2070 > 0.0)
        {
            _2699 = abs((1.0 - _2061) / _2070);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2061 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2699 = frontier_phi_49_46_ladder;
        }
        float _2701 = isnan(_2486) ? _2210 : (isnan(_2210) ? _2486 : min(_2210, _2486));
        float _2702 = isnan(_2699) ? _2701 : (isnan(_2701) ? _2699 : min(_2701, _2699));
        float _2706 = (_2702 * _2064) + _2053;
        float _2707 = (_2702 * _2067) + _2057;
        float _2708 = (_2702 * _2070) + _2061;
        float _2709 = _2702 * 9.9999997473787516355514526367188e-05;
        float _2710 = (-1.0) - _2709;
        float _2712 = _2709 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2708 > _2712) || ((_2708 < _2710) || ((_2707 > _2712) || ((_2707 < _2710) || ((_2706 < _2710) || (_2706 > _2712))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2708, cbModelParam._m0[17u].z, fma(_2707, cbModelParam._m0[17u].y, _2706 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2708, cbModelParam._m0[18u].z, fma(_2707, cbModelParam._m0[18u].y, _2706 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2708, cbModelParam._m0[19u].z, fma(_2707, cbModelParam._m0[19u].y, _2706 * cbModelParam._m0[19u].x))), _1999);
            frontier_phi_25_49_ladder = _2907.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2907.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2907.x * cbModelParam._m0[1u].z;
        }
        _2089 = frontier_phi_25_49_ladder_2;
        _2091 = frontier_phi_25_49_ladder_1;
        _2093 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2073 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1067, _1068, _1069), _1999);
        _2089 = _2073.x * cbModelParam._m0[1u].z;
        _2091 = _2073.y * cbModelParam._m0[1u].z;
        _2093 = _2073.z * cbModelParam._m0[1u].z;
    }
    float _2106 = (((_1094 * _1043) + _1095) * _1059) * ((cbModelParam._m0[1u].w * (_2089 - _1990)) + _1990);
    float _2108 = (((_1094 * _1045) + _1095) * _1059) * ((cbModelParam._m0[1u].w * (_2091 - _1992)) + _1992);
    float _2110 = (((_1094 * _1046) + _1095) * _1059) * ((cbModelParam._m0[1u].w * (_2093 - _1994)) + _1994);
    float _2113 = fma(_2110, cbSceneParam._m0[89u].z, fma(_2108, cbSceneParam._m0[89u].y, _2106 * cbSceneParam._m0[89u].x));
    float _2116 = fma(_2110, cbSceneParam._m0[90u].z, fma(_2108, cbSceneParam._m0[90u].y, _2106 * cbSceneParam._m0[90u].x));
    float _2119 = fma(_2110, cbSceneParam._m0[91u].z, fma(_2108, cbSceneParam._m0[91u].y, _2106 * cbSceneParam._m0[91u].x));
    uvec4 _2129 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2131 = _2129.x * 14u;
    uint _2132 = _2131 + 13u;
    float _2139 = _1059 + (-1.0);
    float _2144 = (cbLight._m0[_2132].x * _2139) + 1.0;
    float _2145 = (cbLight._m0[_2132].y * _2139) + 1.0;
    float _2146 = (cbLight._m0[_2132].z * _2139) + 1.0;
    float _2147 = (cbLight._m0[_2132].w * _2139) + 1.0;
    uint _2148 = _2131 + 5u;
    float _2154 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
    uint _2158 = _2131 + 4u;
    float _2164 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
    uint _2168 = _2131 | 1u;
    float _2179 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_882, _883, _884));
    float _2182 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_882, _883, _884));
    float _4483 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _4494 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2187 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * 0.3183098733425140380859375;
    float _2189 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * 0.3183098733425140380859375;
    float _2196 = ((cbLight._m0[_2148].x * _2154) * _2189) + ((cbLight._m0[_2158].x * _2164) * _2187);
    float _2197 = ((_2154 * cbLight._m0[_2148].y) * _2189) + ((_2164 * cbLight._m0[_2158].y) * _2187);
    float _2198 = ((_2154 * cbLight._m0[_2148].z) * _2189) + ((_2164 * cbLight._m0[_2158].z) * _2187);
    uvec4 _2202 = floatBitsToUint(cbLight._m0[_2131 + 12u]);
    bool _2204 = _2202.x == 0u;
    float _2215;
    float _2217;
    float _2219;
    if (_2204)
    {
        _2215 = _2196;
        _2217 = _2197;
        _2219 = _2198;
    }
    else
    {
        uint _2223 = _2131 + 6u;
        float _2239 = (dot(vec3(cbLight._m0[_2131 + 2u].xyz), vec3(_882, _883, _884)) * 0.5) + 0.5;
        float _2240 = _2239 * _2239;
        float _4505 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2241 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2242 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
        _2215 = (((cbLight._m0[_2223].x * 0.3183098733425140380859375) * _2241) * _2242) + _2196;
        _2217 = (((cbLight._m0[_2223].y * 0.3183098733425140380859375) * _2241) * _2242) + _2197;
        _2219 = (((cbLight._m0[_2223].z * 0.3183098733425140380859375) * _2241) * _2242) + _2198;
    }
    bool _2222 = _2202.y == 0u;
    float _2260;
    float _2262;
    float _2264;
    if (_2222)
    {
        _2260 = _2215;
        _2262 = _2217;
        _2264 = _2219;
    }
    else
    {
        uint _2430 = _2131 + 7u;
        float _2446 = (dot(vec3(cbLight._m0[_2131 + 3u].xyz), vec3(_882, _883, _884)) * 0.5) + 0.5;
        float _2447 = _2446 * _2446;
        float _4521 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2448 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2449 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2260 = (((cbLight._m0[_2430].x * 0.3183098733425140380859375) * _2448) * _2449) + _2215;
        _2262 = (((cbLight._m0[_2430].y * 0.3183098733425140380859375) * _2448) * _2449) + _2217;
        _2264 = (((cbLight._m0[_2430].z * 0.3183098733425140380859375) * _2448) * _2449) + _2219;
    }
    uint _2267 = _2131 + 8u;
    float _2280 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _885) * 0.949999988079071044921875);
    float _2281 = _2280 * _2280;
    float _2282 = cbLight._m0[_2131].x + _961;
    float _2283 = cbLight._m0[_2131].y + _962;
    float _2284 = cbLight._m0[_2131].z + _963;
    float _2288 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
    float _2289 = _2288 * _2282;
    float _2290 = _2288 * _2283;
    float _2291 = _2288 * _2284;
    float _2292 = dot(vec3(_882, _883, _884), vec3(cbLight._m0[_2131].xyz));
    float _4537 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _4548 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _2296 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2297 = dot(vec3(_882, _883, _884), vec3(_2289, _2290, _2291));
    float _4559 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2301 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2289, _2290, _2291));
    float _4570 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2305 = _2281 * _2281;
    float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
    float _2317 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
    float _2318 = 0.959999978542327880859375 - _1040;
    float _2320 = 0.959999978542327880859375 - _1041;
    float _2321 = 0.959999978542327880859375 - _1042;
    float _2328 = 1.0 - _2281;
    float _2339 = (0.5 / (((_2296 * ((_2295 * _2328) + _2281)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2328) + _2281) * _2295))) * _2295;
    float _4581 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2341 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
    uint _2352 = _2131 + 9u;
    float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _885) * 0.949999988079071044921875);
    float _2364 = _2363 * _2363;
    float _2365 = cbLight._m0[_2168].x + _961;
    float _2366 = cbLight._m0[_2168].y + _962;
    float _2367 = cbLight._m0[_2168].z + _963;
    float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
    float _2372 = _2371 * _2365;
    float _2373 = _2371 * _2366;
    float _2374 = _2371 * _2367;
    float _2375 = dot(vec3(_882, _883, _884), vec3(cbLight._m0[_2168].xyz));
    float _4592 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2379 = dot(vec3(_882, _883, _884), vec3(_2372, _2373, _2374));
    float _4603 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2383 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2372, _2373, _2374));
    float _4614 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2387 = _2364 * _2364;
    float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
    float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
    float _2405 = 1.0 - _2364;
    float _2415 = (0.5 / (((_2296 * ((_2378 * _2405) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2405) + _2364) * _2378))) * _2378;
    float _4625 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2417 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
    float _2427 = (((((_2398 * _2318) + _1043) * cbLight._m0[_2352].x) * _2417) * _2154) + (((((_2317 * _2318) + _1043) * cbLight._m0[_2267].x) * _2341) * _2164);
    float _2428 = (((((_2398 * _2320) + _1045) * cbLight._m0[_2352].y) * _2417) * _2154) + (((((_2317 * _2320) + _1045) * cbLight._m0[_2267].y) * _2341) * _2164);
    float _2429 = (((((_2398 * _2321) + _1046) * cbLight._m0[_2352].z) * _2417) * _2154) + (((((_2317 * _2321) + _1046) * cbLight._m0[_2267].z) * _2341) * _2164);
    float _2491;
    float _2493;
    float _2495;
    if (_2204)
    {
        _2491 = _2427;
        _2493 = _2428;
        _2495 = _2429;
    }
    else
    {
        uint _2497 = _2131 + 2u;
        uint _2501 = _2131 + 10u;
        float _2515 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2497].w)) * _885) * 0.949999988079071044921875);
        float _2516 = _2515 * _2515;
        float _2517 = cbLight._m0[_2497].x + _961;
        float _2518 = cbLight._m0[_2497].y + _962;
        float _2519 = cbLight._m0[_2497].z + _963;
        float _2523 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
        float _2524 = _2523 * _2517;
        float _2525 = _2523 * _2518;
        float _2526 = _2523 * _2519;
        float _2527 = dot(vec3(_882, _883, _884), vec3(cbLight._m0[_2497].xyz));
        float _4636 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2531 = dot(vec3(_882, _883, _884), vec3(_2524, _2525, _2526));
        float _4647 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2535 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_2524, _2525, _2526));
        float _4658 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2539 = _2516 * _2516;
        float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
        float _2550 = exp2(log2(1.0 - (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) * 5.0);
        float _2557 = 1.0 - _2516;
        float _2567 = (0.5 / (((_2296 * ((_2530 * _2557) + _2516)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2557) + _2516) * _2530))) * _2530;
        float _4669 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2569 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
        float _2570 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
        _2491 = (((((_2550 * _2318) + _1043) * cbLight._m0[_2501].x) * _2569) * _2570) + _2427;
        _2493 = (((((_2550 * _2320) + _1045) * cbLight._m0[_2501].y) * _2569) * _2570) + _2428;
        _2495 = (((((_2550 * _2321) + _1046) * cbLight._m0[_2501].z) * _2569) * _2570) + _2429;
    }
    float _2605;
    float _2607;
    float _2609;
    if (_2222)
    {
        _2605 = _2491;
        _2607 = _2493;
        _2609 = _2495;
    }
    else
    {
        uint _2616 = _2131 + 3u;
        uint _2620 = _2131 + 11u;
        float _2634 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2616].w)) * _885) * 0.949999988079071044921875);
        float _2635 = _2634 * _2634;
        float _2636 = cbLight._m0[_2616].x + _961;
        float _2637 = cbLight._m0[_2616].y + _962;
        float _2638 = cbLight._m0[_2616].z + _963;
        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
        float _2643 = _2642 * _2636;
        float _2644 = _2642 * _2637;
        float _2645 = _2642 * _2638;
        float _2646 = dot(vec3(_882, _883, _884), vec3(cbLight._m0[_2616].xyz));
        float _4685 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2650 = dot(vec3(_882, _883, _884), vec3(_2643, _2644, _2645));
        float _4696 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2654 = dot(vec3(cbLight._m0[_2616].xyz), vec3(_2643, _2644, _2645));
        float _4707 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2658 = _2635 * _2635;
        float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
        float _2669 = exp2(log2(1.0 - (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) * 5.0);
        float _2676 = 1.0 - _2635;
        float _2686 = (0.5 / (((_2296 * ((_2649 * _2676) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2676) + _2635) * _2649))) * _2649;
        float _4718 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2688 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
        float _2689 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2605 = (((((_2669 * _2318) + _1043) * cbLight._m0[_2620].x) * _2688) * _2689) + _2491;
        _2607 = (((((_2669 * _2320) + _1045) * cbLight._m0[_2620].y) * _2688) * _2689) + _2493;
        _2609 = (((((_2669 * _2321) + _1046) * cbLight._m0[_2620].z) * _2688) * _2689) + _2495;
    }
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    if (_2129.y == 0u)
    {
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2765 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2764;
        float _2766 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2764;
        float _2767 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2764;
        uvec4 _2779 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2780 = _2779.x;
        uint _2791 = uint((float(_2779.y) * floor(float(uint(cbSceneParam._m0[85u].y * _982) / _2780))) + floor(float(uint(cbSceneParam._m0[85u].x * _981) / _2780)));
        float _2801 = (log2(_2767 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2802 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        uint _2805 = uint(isnan(14.0) ? _2802 : (isnan(_2802) ? 14.0 : min(_2802, 14.0)));
        uvec4 _2810 = texelFetch(g_lightClusterGridBuffer, int(((_2805 << 2u) + (_2791 << 6u)) >> 2u));
        uint _2811 = _2810.x;
        uint _2812 = _2779.z;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        if (((((1u << ((_2812 >> 4u) & 15u)) + 4294967295u) & _2811) == 0u) || ((_2812 & 240u) == 0u))
        {
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
        }
        else
        {
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            uint _3070 = 0u;
            uint _3079;
            bool _3080;
            for (;;)
            {
                _3079 = texelFetch(g_lightClassification, int((((_2805 << 5u) + (_2791 << 9u)) + (_3070 << 2u)) >> 2u)).x;
                _3080 = _3079 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3080)
                {
                    frontier_phi_66_pred = _3064;
                    frontier_phi_66_pred_1 = _3069;
                    frontier_phi_66_pred_2 = _3068;
                    frontier_phi_66_pred_3 = _3067;
                    frontier_phi_66_pred_4 = _3066;
                    frontier_phi_66_pred_5 = _3065;
                }
                else
                {
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    uint _3215;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3079;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    for (;;)
                    {
                        uint _3219 = uint(findLSB(_3215)) + (_3070 << 5u);
                        uint _3216 = (_3215 + 4294967295u) & _3215;
                        uint _3221 = _3219 * 48u;
                        vec4 _3235 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 3u)).x));
                        uint _3241 = (_3219 * 48u) + 4u;
                        vec4 _3254 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 3u)).x));
                        uint _3260 = (_3219 * 48u) + 8u;
                        vec3 _3271 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x));
                        float _3275 = _3235.x - _2765;
                        float _3276 = _3235.y - _2766;
                        float _3277 = _3235.z - _2767;
                        float _3278 = dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277));
                        float _3281 = inversesqrt(_3278);
                        float _3282 = _3281 * _3275;
                        float _3283 = _3281 * _3276;
                        float _3284 = _3281 * _3277;
                        float _3285 = dot(vec3(_1000, _1003, _1006), vec3(_3282, _3283, _3284));
                        float _3290 = 1.0 - (_3278 * _3235.w);
                        float _4744 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3291 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                        float _3292 = sqrt(_3278) * _3254.w;
                        float _3295 = 1.39999997615814208984375 / (_3292 + 1.39999997615814208984375);
                        float _3296 = _3295 * _3295;
                        float _3299 = ((1.0 - _3296) * _3285) + _3296;
                        float _3302 = _3292 * _3292;
                        float _3306 = ((isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0))) * _3291) / ((_3302 * 0.699999988079071044921875) + 1.0);
                        float _3310 = (-0.0) - _2765;
                        float _3311 = (-0.0) - _2766;
                        float _3312 = (-0.0) - _2767;
                        float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                        float _3317 = _3316 * _3310;
                        float _3318 = _3316 * _3311;
                        float _3319 = _3316 * _3312;
                        float _3327 = exp2(log2(1.0 / ((_3302 * 3.5) + 5.0)) * 0.25);
                        float _3328 = 1.0 - _1075;
                        float _3335 = sqrt(1.0 - ((1.0 - (_3328 * _3328)) * (1.0 - (_3327 * _3327))));
                        float _3336 = _3335 * _3335;
                        float _3337 = _3336 * _3336;
                        float _3338 = _3317 + _3282;
                        float _3339 = _3318 + _3283;
                        float _3340 = _3319 + _3284;
                        float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
                        float _3348 = dot(vec3(_1000, _1003, _1006), vec3(_3317, _3318, _3319));
                        float _4760 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3351 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3352 = dot(vec3(_1000, _1003, _1006), vec3(_3344 * _3338, _3344 * _3339, _3344 * _3340));
                        float _4771 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3355 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3359 = ((_3355 * _3355) * (_3337 + (-1.0))) + 1.0;
                        float _3360 = _3295 * _3336;
                        float _3361 = _3360 * _3360;
                        float _3364 = ((1.0 - _3361) * _3285) + _3361;
                        float _4782 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3366 = 1.0 - _3336;
                        float _3376 = (0.5 / (((_3365 * ((_3351 * _3366) + _3336)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3336) * _3351))) * _3365;
                        float _4793 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3387 = (((_3337 * 3.1415927410125732421875) * (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0)))) / ((_3359 * _3359) * ((_3302 * 2.1991131305694580078125) + 3.141590118408203125))) * _3291;
                        _3139 = (_3306 * _3254.x) + _3212;
                        _3140 = (_3306 * _3254.y) + _3213;
                        _3141 = (_3306 * _3254.z) + _3214;
                        _3136 = (_3387 * _3271.x) + _3209;
                        _3137 = (_3387 * _3271.y) + _3210;
                        _3138 = (_3387 * _3271.z) + _3211;
                        if (_3216 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3216;
                        }
                    }
                    frontier_phi_66_pred = _3136;
                    frontier_phi_66_pred_1 = _3141;
                    frontier_phi_66_pred_2 = _3140;
                    frontier_phi_66_pred_3 = _3139;
                    frontier_phi_66_pred_4 = _3138;
                    frontier_phi_66_pred_5 = _3137;
                }
                _2913 = frontier_phi_66_pred;
                _2923 = frontier_phi_66_pred_1;
                _2921 = frontier_phi_66_pred_2;
                _2919 = frontier_phi_66_pred_3;
                _2917 = frontier_phi_66_pred_4;
                _2915 = frontier_phi_66_pred_5;
                uint _3071 = _3070 + 1u;
                if (_3071 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3064 = _2913;
                    _3065 = _2915;
                    _3066 = _2917;
                    _3067 = _2919;
                    _3068 = _2921;
                    _3069 = _2923;
                    _3070 = _3071;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
        }
        uvec4 _2926 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2927 = _2926.z;
        uint _2929 = (_2927 >> 8u) & 15u;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        if (((4294967295u << _2929) & _2811) == 0u)
        {
            _3032 = _2912;
            _3034 = _2914;
            _3036 = _2916;
            _3038 = _2918;
            _3040 = _2920;
            _3042 = _2922;
        }
        else
        {
            float _3057 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
            float _3058 = _3057 * _2765;
            float _3059 = _3057 * _2766;
            float _3060 = _3057 * _2767;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2929 < ((_2927 >> 12u) & 15u))
            {
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3192 = _2912;
                float _3193 = _2914;
                float _3194 = _2916;
                float _3195 = _2918;
                float _3196 = _2920;
                float _3197 = _2922;
                uint _3198 = _2929;
                uint _3207;
                bool _3208;
                for (;;)
                {
                    _3207 = texelFetch(g_lightClassification, int((((_2805 << 5u) + (_2791 << 9u)) + (_3198 << 2u)) >> 2u)).x;
                    _3208 = _3207 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3208)
                    {
                        frontier_phi_77_pred = _3197;
                        frontier_phi_77_pred_1 = _3196;
                        frontier_phi_77_pred_2 = _3195;
                        frontier_phi_77_pred_3 = _3194;
                        frontier_phi_77_pred_4 = _3193;
                        frontier_phi_77_pred_5 = _3192;
                    }
                    else
                    {
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3414 = _3192;
                        float _3415 = _3193;
                        float _3416 = _3194;
                        float _3417 = _3195;
                        float _3418 = _3196;
                        float _3419 = _3197;
                        uint _3420 = _3207;
                        uint _3421;
                        vec4 _3446;
                        float _3447;
                        vec4 _3462;
                        vec3 _3474;
                        vec4 _3489;
                        vec4 _3504;
                        float _3550;
                        bool _3551;
                        for (;;)
                        {
                            uint _3431 = ((_3198 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3420));
                            _3421 = (_3420 + 4294967295u) & _3420;
                            uint _3433 = _3431 * 40u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            _3447 = _3446.w;
                            uint _3449 = (_3431 * 40u) + 4u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3464 = (_3431 * 40u) + 8u;
                            _3474 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x));
                            uint _3476 = (_3431 * 40u) + 16u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3491 = (_3431 * 40u) + 20u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3506 = (_3431 * 40u) + 24u;
                            vec4 _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3525 = (_3431 * 40u) + 28u;
                            vec4 _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            _3550 = fma(_2767, _3538.z, fma(_2766, _3538.y, _3538.x * _2765)) + _3538.w;
                            _3551 = !((fma(_2767, _3519.z, fma(_2766, _3519.y, _3519.x * _2765)) + _3519.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3551)
                            {
                                float _3578 = _3446.x - _2765;
                                float _3579 = _3446.y - _2766;
                                float _3580 = _3446.z - _2767;
                                float _3581 = dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580));
                                float _3584 = inversesqrt(_3581);
                                float _3585 = _3584 * _3578;
                                float _3586 = _3584 * _3579;
                                float _3587 = _3584 * _3580;
                                float _3591 = 1.0 - (_3581 / (_3447 * _3447));
                                float _4804 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3596 = sqrt(_3581) * _3462.w;
                                float _3598 = 1.39999997615814208984375 / (_3596 + 1.39999997615814208984375);
                                float _3599 = _3598 * _3598;
                                float _3602 = ((1.0 - _3599) * dot(vec3(_3585, _3586, _3587), vec3(_1000, _1003, _1006))) + _3599;
                                float _3605 = _3596 * _3596;
                                float _3609 = (fma(_2767, _3489.z, fma(_2766, _3489.y, _3489.x * _2765)) + _3489.w) / _3550;
                                float _3610 = (fma(_2767, _3504.z, fma(_2766, _3504.y, _3504.x * _2765)) + _3504.w) / _3550;
                                float _3614 = 1.0 - dot(vec2(_3609, _3610), vec2(_3609, _3610));
                                float _4820 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3615 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3616 = _3615 * (((isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0))) * _3592) / ((_3605 * 0.699999988079071044921875) + 1.0));
                                float _3628 = exp2(log2(1.0 / ((_3605 * 3.5) + 5.0)) * 0.25);
                                float _3629 = 1.0 - _1075;
                                float _3636 = sqrt(1.0 - ((1.0 - (_3629 * _3629)) * (1.0 - (_3628 * _3628))));
                                float _3637 = _3636 * _3636;
                                float _3638 = _3637 * _3637;
                                float _3639 = _3585 - _3058;
                                float _3640 = _3586 - _3059;
                                float _3641 = _3587 - _3060;
                                float _3645 = inversesqrt(dot(vec3(_3639, _3640, _3641), vec3(_3639, _3640, _3641)));
                                float _3649 = dot(vec3(_1000, _1003, _1006), vec3((-0.0) - _3058, (-0.0) - _3059, (-0.0) - _3060));
                                float _4831 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3652 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3653 = dot(vec3(_1000, _1003, _1006), vec3(_3645 * _3639, _3645 * _3640, _3645 * _3641));
                                float _4842 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3656 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3660 = ((_3656 * _3656) * (_3638 + (-1.0))) + 1.0;
                                float _3661 = _3598 * _3637;
                                float _3662 = _3661 * _3661;
                                float _3668 = ((1.0 - _3662) * dot(vec3(_1000, _1003, _1006), vec3(_3585, _3586, _3587))) + _3662;
                                float _4853 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3670 = 1.0 - _3637;
                                float _3680 = (0.5 / (((_3669 * ((_3652 * _3670) + _3637)) + 9.9999999392252902907785028219223e-09) + (((_3669 * _3670) + _3637) * _3652))) * _3669;
                                float _4864 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3690 = (_3615 * _3592) * (((_3638 * 3.1415927410125732421875) * (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0)))) / ((_3660 * _3660) * ((_3605 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3616 * _3462.y;
                                frontier_phi_83_pred_1 = _3616 * _3462.x;
                                frontier_phi_83_pred_2 = _3690 * _3474.z;
                                frontier_phi_83_pred_3 = _3690 * _3474.y;
                                frontier_phi_83_pred_4 = _3690 * _3474.x;
                                frontier_phi_83_pred_5 = _3616 * _3462.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3698 = frontier_phi_83_pred;
                            _3697 = frontier_phi_83_pred_1;
                            _3696 = frontier_phi_83_pred_2;
                            _3695 = frontier_phi_83_pred_3;
                            _3694 = frontier_phi_83_pred_4;
                            _3699 = frontier_phi_83_pred_5;
                            _3404 = _3697 + _3417;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            _3401 = _3694 + _3414;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            if (_3421 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3421;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3406;
                        frontier_phi_77_pred_1 = _3405;
                        frontier_phi_77_pred_2 = _3404;
                        frontier_phi_77_pred_3 = _3403;
                        frontier_phi_77_pred_4 = _3402;
                        frontier_phi_77_pred_5 = _3401;
                    }
                    _3043 = frontier_phi_77_pred;
                    _3041 = frontier_phi_77_pred_1;
                    _3039 = frontier_phi_77_pred_2;
                    _3037 = frontier_phi_77_pred_3;
                    _3035 = frontier_phi_77_pred_4;
                    _3033 = frontier_phi_77_pred_5;
                    uint _3199 = _3198 + 1u;
                    if (_3199 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3192 = _3033;
                        _3193 = _3035;
                        _3194 = _3037;
                        _3195 = _3039;
                        _3196 = _3041;
                        _3197 = _3043;
                        _3198 = _3199;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3037;
                frontier_phi_58_59_ladder_1 = _3043;
                frontier_phi_58_59_ladder_2 = _3041;
                frontier_phi_58_59_ladder_3 = _3039;
                frontier_phi_58_59_ladder_4 = _3035;
                frontier_phi_58_59_ladder_5 = _3033;
            }
            else
            {
                frontier_phi_58_59_ladder = _2916;
                frontier_phi_58_59_ladder_1 = _2922;
                frontier_phi_58_59_ladder_2 = _2920;
                frontier_phi_58_59_ladder_3 = _2918;
                frontier_phi_58_59_ladder_4 = _2914;
                frontier_phi_58_59_ladder_5 = _2912;
            }
            _3032 = frontier_phi_58_59_ladder_5;
            _3034 = frontier_phi_58_59_ladder_4;
            _3036 = frontier_phi_58_59_ladder;
            _3038 = frontier_phi_58_59_ladder_3;
            _3040 = frontier_phi_58_59_ladder_2;
            _3042 = frontier_phi_58_59_ladder_1;
        }
        float _3047 = isnan(1.0) ? _1059 : (isnan(_1059) ? 1.0 : min(_1059, 1.0));
        _2824 = (_3047 * _3038) + _2260;
        _2826 = (_3047 * _3040) + _2262;
        _2828 = (_3047 * _3042) + _2264;
        _2830 = ((_3032 * _1043) * _3047) + _2605;
        _2832 = ((_3034 * _1045) * _3047) + _2607;
        _2834 = ((_3036 * _1046) * _3047) + _2609;
    }
    else
    {
        _2824 = _2260;
        _2826 = _2262;
        _2828 = _2264;
        _2830 = _2605;
        _2832 = _2607;
        _2834 = _2609;
    }
    float _4880 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _4891 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _4902 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _2851 = ((isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2824 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1059))) + ((_2830 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1898)) * cbPerFrame._m0[3u].x);
    float _2852 = ((isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2826 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1059))) + ((_2832 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1898)) * cbPerFrame._m0[3u].x);
    float _2853 = ((isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2828 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1059))) + ((_2834 + ((isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))) * _1898)) * cbPerFrame._m0[3u].x);
    uint _2854 = _283 + 6u;
    float _2862 = _981 / cbSceneParam._m0[86u].x;
    float _2863 = _982 / cbSceneParam._m0[86u].y;
    vec4 _2877 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2862, _2863, (log2((isnan(cbSceneParam._m0[77u].w) ? _904 : (isnan(_904) ? cbSceneParam._m0[77u].w : min(_904, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2879 = _2877.x;
    float _2880 = _2877.y;
    float _2881 = _2877.z;
    float _2882 = _2877.w;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    if (_904 > cbSceneParam._m0[78u].w)
    {
        float _2937 = isnan(_904) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _904 : min(cbSceneParam._m0[80u].w, _904));
        float _2938 = _2937 / _904;
        float _2949 = _2938 * _954;
        float _2950 = _955 * _2938;
        float _2951 = (-0.0) - _2950;
        float _2952 = _2938 * _956;
        float _2954 = (cbSceneParam._m0[77u].w * _2951) / _2937;
        float _2955 = _2954 + cbSceneParam._m0[79u].w;
        float _2956 = cbSceneParam._m0[79u].w - _2950;
        float _2962 = sqrt(((_2949 * _2949) + (_2950 * _2950)) + (_2952 * _2952));
        float _2965 = (1.0 - (cbSceneParam._m0[77u].w / _2937)) * _2962;
        float _2970 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2972 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3149;
        if (abs((_2951 - _2954) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3149 = ((((_2955 > 0.0) ? exp2(_2970 * _2955) : (2.0 - exp2(_2972 * _2955))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2965;
        }
        else
        {
            float _3093 = 1.0 / cbSceneParam._m0[80u].x;
            float _3094 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : max(_2955, _2956));
            float _3095 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : min(_2955, _2956));
            float _3104 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : min(_3094, 0.0));
            float _3105 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : min(_3095, 0.0));
            _3149 = ((abs(_2962 / _2951) * cbSceneParam._m0[80u].y) * ((((_3104 - _3105) * 2.0) - ((exp2(_2970 * (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0)))) - exp2(_2970 * (isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))))) * _3093)) - ((exp2(_2972 * _3104) - exp2(_2972 * _3105)) * _3093))) + (_2965 * cbSceneParam._m0[80u].z);
        }
        vec4 _3151 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2862, _2863, 1.0), 0.0);
        float _3160 = exp2((_3149 * (-1.44269502162933349609375)) * (1.0 - _3151.w));
        float _3161 = log2(_3160);
        float _3177 = log2(_2882);
        _2974 = (exp2(_3177 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].x)) * _3151.x) / cbSceneParam._m0[78u].x)) + _2879;
        _2976 = (exp2(_3177 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].y)) * _3151.y) / cbSceneParam._m0[78u].y)) + _2880;
        _2978 = (exp2(_3177 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].z)) * _3151.z) / cbSceneParam._m0[78u].z)) + _2881;
        _2980 = _3160 * _2882;
    }
    else
    {
        _2974 = _2879;
        _2976 = _2880;
        _2978 = _2881;
        _2980 = _2882;
    }
    bool _3187;
    vec4 _2990;
    vec4 _3012;
    float _3014;
    float _3018;
    float _3019;
    float _3020;
    float _3021;
    bool _3031;
    for (;;)
    {
        _2990 = cbMatDynParam._m0[0u];
        float _2992 = roundEven(_2990.y);
        bool _2993 = _2992 == 3.0;
        float _2994 = log2(_2980);
        float _3001 = exp2(_2994 * cbSceneParam._m0[78u].x) * _2851;
        float _3002 = exp2(_2994 * cbSceneParam._m0[78u].y) * _2852;
        float _3003 = exp2(_2994 * cbSceneParam._m0[78u].z) * _2853;
        float _3010 = _970 + (-0.5);
        _3012 = cbMtdParam._m0[1u];
        _3014 = _3012.y * _3010;
        float _3017 = (_2992 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3018 = _3017 * (_2993 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2974)));
        _3019 = _3017 * (_2993 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2976)));
        _3020 = _3017 * (_2993 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2978)));
        _3021 = _3010 * 0.999000012874603271484375;
        _3031 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3031)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3021) < 0.5)
            {
                _3187 = true;
                break;
            }
        }
        uint _3128 = _1019 + uint(_2990.w);
        if ((cbInstanceData._m0[_3128].w < 1.0) && ((cbInstanceData._m0[_3128].w + _3021) < 0.5))
        {
            _3187 = true;
            break;
        }
        if ((_3014 + 1.0) < _3012.x)
        {
            _3187 = true;
            break;
        }
        _3187 = false;
        break;
    }
    float _3392;
    if (_3187)
    {
        discard_state = true;
        _3392 = 0.0;
    }
    else
    {
        _3392 = cbInstanceData._m0[_2854].w;
    }
    SV_Target.x = _3018;
    SV_Target.y = _3019;
    SV_Target.z = _3020;
    SV_Target.w = _3392;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2854].w;
    discard_exit();
}


