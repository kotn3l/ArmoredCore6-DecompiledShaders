#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1383;
float _4045;
float _4046;
float _4047;
float _4048;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _372 = _370.x;
    float _384 = dot(vec4(_372, _370.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _401 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_372 - _384) * cbMtdParam._m0[24u].y) + _384) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4057 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _409 = (_402 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _410 = (_402 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _411 = (_402 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _450 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _284) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _285) + cbTextureTilingScale._m0[20u].w));
    vec4 _475 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _494 = _492.x;
    float _495 = _492.y;
    float _496 = _492.z;
    float _505 = ((_475.z - _496) * _402) + _496;
    float _508 = ((((_475.x - _494) * _402) + _494) * 2.0) + (-1.0);
    float _509 = ((((_475.y - _495) * _402) + _495) * 2.0) + (-1.0);
    float _510 = dot(vec2(_508, _509), vec2(_508, _509));
    float _4068 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _515 = sqrt(1.0 - (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))));
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _548 = _546.x;
    float _549 = 1.0 - _548;
    float _555 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _558 = ((isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : min(_555, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _567 = (_558 - ((((((_548 - _549) * cbMtdParam._m0[24u].z) + _549) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _558))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4089 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _575 = (_568 * ((_430.x * cbMtdParam._m0[18u].x) - _409)) + _409;
    float _576 = (_568 * ((_430.y * cbMtdParam._m0[18u].y) - _410)) + _410;
    float _577 = (_568 * ((_430.z * cbMtdParam._m0[18u].z) - _411)) + _411;
    vec4 _589 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _591 = _589.x;
    float _592 = 1.0 - _591;
    float _619 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_591 - _592) * cbMtdParam._m0[24u].w) + _592) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4100 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _628 = ((((cbMtdParam._m0[10u].x - _575) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _620) + _575;
    float _629 = ((((cbMtdParam._m0[10u].y - _576) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _620) + _576;
    float _630 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _577)) * _620) + _577;
    vec4 _642 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _656 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _658 = _656.x;
    float _676 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _658) * _402) + _658;
    float _680 = ((_642.x - _676) * cbMtdParam._m0[19u].z) + _676;
    float _682 = _680 - (_680 * _568);
    float _684 = _682 - (_682 * _620);
    float _689 = (((_450.z - _505) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _505;
    vec4 _703 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _710 = (_703.x * 2.0) + (-1.0);
    float _711 = (_703.y * 2.0) + (-1.0);
    float _712 = dot(vec2(_710, _711), vec2(_710, _711));
    float _4111 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _720 = (_568 * (_703.z - _689)) + _689;
    float _723 = ((cbMtdParam._m0[23u].y - _720) * _620) + _720;
    vec4 _742 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _748 = (_742.x * 2.0) + (-1.0);
    float _749 = (_742.y * 2.0) + (-1.0);
    float _750 = dot(vec2(_748, _749), vec2(_748, _749));
    float _4122 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _760 = _508 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_450.x * 2.0) + (-1.0)));
    float _761 = _509 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_450.y * 2.0) + (-1.0)));
    float _773 = (((_710 - _760) + (cbMtdParam._m0[21u].x * _760)) * _568) + _760;
    float _774 = (((_711 - _761) + (cbMtdParam._m0[21u].x * _761)) * _568) + _761;
    float _775 = (_568 * (sqrt(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) - _515)) + _515;
    float _786 = (((_748 - _773) + (_773 * cbMtdParam._m0[22u].z)) * _620) + _773;
    float _787 = (((_749 - _774) + (_774 * cbMtdParam._m0[22u].z)) * _620) + _774;
    float _788 = ((sqrt(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) - _775) * _620) + _775;
    float _790 = cbMtdParam._m0[22u].x + _528.w;
    float _793 = fma(_788, _252 * NORMAL.x, fma(_787, _259 * TANGENT.x, (_245 * _237) * _786));
    float _796 = fma(_788, _252 * NORMAL.y, fma(_787, _259 * TANGENT.y, (_245 * _238) * _786));
    float _799 = fma(_788, _252 * NORMAL.z, fma(_787, _259 * TANGENT.z, (_245 * _239) * _786));
    float _803 = inversesqrt(dot(vec3(_793, _796, _799), vec3(_793, _796, _799)));
    float _804 = _803 * _793;
    float _805 = _803 * _796;
    float _806 = _803 * _799;
    float _4133 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _807 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4155 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _4166 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _4177 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4188 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _812 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _826 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _876 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _866);
    float _877 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _866);
    float _878 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _866);
    float _882 = inversesqrt(dot(vec3(_876, _877, _878), vec3(_876, _877, _878)));
    float _883 = _876 * _882;
    float _884 = _877 * _882;
    float _885 = _878 * _882;
    vec4 _890 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _892 = _890.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1064 = sqrt(((_876 * _876) + (_877 * _877)) + (_878 * _878));
        float _1070 = (cbMatDynParam._m0[5u].x * _1064) + cbMatDynParam._m0[5u].y;
        float _4199 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1075 = (cbMatDynParam._m0[5u].z * _1064) + cbMatDynParam._m0[5u].w;
        float _4210 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) - _1071)) + _1071) < ((_892 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _903 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _904 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _922 = fma(_806, cbSceneParam._m0[5u].z, fma(_805, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _804));
    float _925 = fma(_806, cbSceneParam._m0[6u].z, fma(_805, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _804));
    float _928 = fma(_806, cbSceneParam._m0[7u].z, fma(_805, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _804));
    uint _941 = _265 + 9u;
    uint _942 = _941 + uint(cbMatDynParam._m0[0u].w);
    float _948 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_942].x;
    float _949 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_942].y;
    float _950 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * cbInstanceData._m0[_942].z;
    float _4221 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _4243 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _954 = 1.0 - _812;
    float _955 = _951 * _954;
    float _956 = _952 * _954;
    float _957 = _953 * _954;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _812;
    float _963 = (_952 + (-0.039999999105930328369140625)) * _812;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _812;
    float _965 = _962 + 0.039999999105930328369140625;
    float _967 = _963 + 0.039999999105930328369140625;
    float _968 = _964 + 0.039999999105930328369140625;
    vec4 _977 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _903, cbSceneParam._m0[86u].y * _904));
    float _981 = ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * TEXCOORD_5.w) * _977.x;
    float _982 = dot(vec3(_804, _805, _806), vec3(_883, _884, _885));
    float _985 = _982 * 2.0;
    float _989 = (_985 * _804) - _883;
    float _990 = (_985 * _805) - _884;
    float _991 = (_985 * _806) - _885;
    float _995 = abs(dot(vec3(_883, _884, _885), vec3(_804, _805, _806)));
    float _4254 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _997 = sqrt(_807);
    float _1010 = exp2((_997 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_997 * 3.0));
    float _1016 = (1.0 - _1010) * ((_997 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1017 = _1010 * _997;
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1382;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1107 = fma(_1053, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1045));
        float _1111 = fma(_1053, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1045));
        float _1115 = fma(_1053, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1045));
        float _1140 = _1045 + _804;
        float _1141 = _1049 + _805;
        float _1142 = _1053 + _806;
        float _1152 = fma(_1142, cbModelParam._m0[26u].z, fma(_1141, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1140)) - _1107;
        float _1153 = fma(_1142, cbModelParam._m0[27u].z, fma(_1141, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1140)) - _1111;
        float _1154 = fma(_1142, cbModelParam._m0[28u].z, fma(_1141, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1140)) - _1115;
        float _1158 = inversesqrt(dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154)));
        float _1171 = ((_1158 * _1152) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1107 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1158 * _1153) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1111 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1158 * _1154) / cbModelParam._m0[34u].z) + ((((((_1115 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        float _1210 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1176.x + (-0.5));
        float _1212 = _1210 * (_1176.y + (-0.5));
        float _1213 = _1210 * (_1176.z + (-0.5));
        float _1220 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1183.x + (-0.5));
        float _1222 = _1220 * (_1183.y + (-0.5));
        float _1223 = _1220 * (_1183.z + (-0.5));
        float _1230 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1190.x + (-0.5));
        float _1232 = _1230 * (_1190.y + (-0.5));
        float _1233 = _1230 * (_1190.z + (-0.5));
        float _1240 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1197.x + (-0.5));
        float _1242 = _1240 * (_1197.y + (-0.5));
        float _1243 = _1240 * (_1197.z + (-0.5));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = _1211 * 0.5;
        float _1248 = _1221 * 0.5;
        float _1249 = _1231 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1264 = (dot(vec3(_804, _805, _806), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1274 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4302 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1276 + 1.0))) + _1281) * _1244;
        float _1291 = _1212 * 0.5;
        float _1292 = _1222 * 0.5;
        float _1293 = _1232 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_804, _805, _806), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4335 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1318 + 1.0))) + _1323) * _1245;
        float _1333 = _1213 * 0.5;
        float _1334 = _1223 * 0.5;
        float _1335 = _1233 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_804, _805, _806), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4368 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1360 + 1.0))) + _1365) * _1246;
        _1382 = _1213;
        _1384 = _1212;
        _1385 = _1211;
        _1386 = _1223;
        _1387 = _1222;
        _1388 = _1221;
        _1389 = _1233;
        _1390 = _1232;
        _1391 = _1231;
        _1392 = _1246;
        _1393 = _1245;
        _1394 = _1244;
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
    }
    else
    {
        _1382 = _1383;
        _1384 = _1383;
        _1385 = _1383;
        _1386 = _1383;
        _1387 = _1383;
        _1388 = _1383;
        _1389 = _1383;
        _1390 = _1383;
        _1391 = _1383;
        _1392 = _1383;
        _1393 = _1383;
        _1394 = _1383;
        _1395 = 0.0;
        _1396 = 0.0;
        _1397 = 0.0;
    }
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1425 = fma(_1053, cbModelParam._m0[30u].z, fma(_1049, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1045));
        float _1429 = fma(_1053, cbModelParam._m0[31u].z, fma(_1049, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1045));
        float _1433 = fma(_1053, cbModelParam._m0[32u].z, fma(_1049, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1045));
        float _1456 = _1045 + _804;
        float _1457 = _1049 + _805;
        float _1458 = _1053 + _806;
        float _1468 = fma(_1458, cbModelParam._m0[30u].z, fma(_1457, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1456)) - _1425;
        float _1469 = fma(_1458, cbModelParam._m0[31u].z, fma(_1457, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1456)) - _1429;
        float _1470 = fma(_1458, cbModelParam._m0[32u].z, fma(_1457, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1456)) - _1433;
        float _1474 = inversesqrt(dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470)));
        float _1487 = ((_1474 * _1468) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1425 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1488 = ((_1474 * _1469) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1429 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1474 * _1470) / cbModelParam._m0[35u].z) + ((((((_1433 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1512 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        float _1524 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1491.x + (-0.5));
        float _1526 = _1524 * (_1491.y + (-0.5));
        float _1527 = _1524 * (_1491.z + (-0.5));
        float _1534 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1498.x + (-0.5));
        float _1536 = _1534 * (_1498.y + (-0.5));
        float _1537 = _1534 * (_1498.z + (-0.5));
        float _1544 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1505.x + (-0.5));
        float _1546 = _1544 * (_1505.y + (-0.5));
        float _1547 = _1544 * (_1505.z + (-0.5));
        float _1554 = exp2((_1512.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1512.x + (-0.5));
        float _1556 = _1554 * (_1512.y + (-0.5));
        float _1557 = _1554 * (_1512.z + (-0.5));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = _1525 * 0.5;
        float _1562 = _1535 * 0.5;
        float _1563 = _1545 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_804, _805, _806), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4431 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1588 + 1.0))) + _1593) * _1558;
        float _1603 = _1526 * 0.5;
        float _1604 = _1536 * 0.5;
        float _1605 = _1546 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_804, _805, _806), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4464 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1630 + 1.0))) + _1635) * _1559;
        float _1645 = _1527 * 0.5;
        float _1646 = _1537 * 0.5;
        float _1647 = _1547 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_804, _805, _806), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4475 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4486 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4497 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_1672 + 1.0))) + _1677) * _1560;
        _1694 = _1527;
        _1695 = _1526;
        _1696 = _1525;
        _1697 = _1537;
        _1698 = _1536;
        _1699 = _1535;
        _1700 = _1547;
        _1701 = _1546;
        _1702 = _1545;
        _1703 = _1560;
        _1704 = _1559;
        _1705 = _1558;
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
    }
    else
    {
        _1694 = _1383;
        _1695 = _1383;
        _1696 = _1383;
        _1697 = _1383;
        _1698 = _1383;
        _1699 = _1383;
        _1700 = _1383;
        _1701 = _1383;
        _1702 = _1383;
        _1703 = _1383;
        _1704 = _1383;
        _1705 = _1383;
        _1706 = 0.0;
        _1707 = 0.0;
        _1708 = 0.0;
    }
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1395)) + _1395;
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1396)) + _1396;
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1397)) + _1397;
    float _1741 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1719, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1744 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1719, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1747 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1719, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1718));
    float _1762 = _989 * 0.5;
    float _1763 = _990 * 0.5;
    float _1764 = _991 * 0.5;
    float _1765 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1768 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1771 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1805;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1778 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1382, _1386, _1389, _1392));
        float _1782 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1786 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1385, _1388, _1391, _1394));
        float _1793 = dot(vec4(cbModelParam._m0[39u]), vec4(_1762, _1763, _1764, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1793) ? 0.0 : (isnan(0.0) ? _1793 : max(0.0, _1793))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1816;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1807 = dot(vec4(cbModelParam._m0[40u]), vec4(_1762, _1763, _1764, 1.0));
        _1816 = dot(vec3(isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1807) ? 0.0 : (isnan(0.0) ? _1807 : max(0.0, _1807))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1816 = 1.0;
    }
    float _1820 = (_1816 * cbModelParam._m0[1u].x) + (_1805 * (1.0 - cbModelParam._m0[1u].x));
    float _1830 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _807);
    float _1831 = isnan(_1830) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1830 : min(cbModelParam._m0[25u].z, _1830));
    float _1911;
    float _1913;
    float _1915;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1878 = fma(_1053, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1045)) + cbModelParam._m0[13u].w;
        float _1882 = fma(_1053, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1045)) + cbModelParam._m0[14u].w;
        float _1886 = fma(_1053, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1045)) + cbModelParam._m0[15u].w;
        float _1889 = fma(_991, cbModelParam._m0[13u].z, fma(_990, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _989));
        float _1892 = fma(_991, cbModelParam._m0[14u].z, fma(_990, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _989));
        float _1895 = fma(_991, cbModelParam._m0[15u].z, fma(_990, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _989));
        float _1923;
        if (_1889 > 0.0)
        {
            _1923 = abs((1.0 - _1878) / _1889);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1878 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1923 = frontier_phi_17_15_ladder;
        }
        float _2094;
        if (_1892 > 0.0)
        {
            _2094 = abs((1.0 - _1882) / _1892);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1882 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2094 = frontier_phi_26_22_ladder;
        }
        float _2389;
        if (_1895 > 0.0)
        {
            _2389 = abs((1.0 - _1886) / _1895);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1886 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2389 = frontier_phi_38_33_ladder;
        }
        float _2391 = isnan(_2094) ? _1923 : (isnan(_1923) ? _2094 : min(_1923, _2094));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1889) + _1878;
        float _2397 = (_2392 * _1892) + _1882;
        float _2398 = (_2392 * _1895) + _1886;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2399;
        float _2403 = _2399 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 > _2403) || ((_2397 < _2401) || ((_2396 < _2401) || (_2396 > _2403))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2398, cbModelParam._m0[9u].z, fma(_2397, cbModelParam._m0[9u].y, _2396 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2398, cbModelParam._m0[10u].z, fma(_2397, cbModelParam._m0[10u].y, _2396 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2398, cbModelParam._m0[11u].z, fma(_2397, cbModelParam._m0[11u].y, _2396 * cbModelParam._m0[11u].x))), _1831);
            frontier_phi_16_38_ladder = _2543.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2543.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2543.x * cbModelParam._m0[1u].y;
        }
        _1911 = frontier_phi_16_38_ladder_2;
        _1913 = frontier_phi_16_38_ladder_1;
        _1915 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1899 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_989, _990, _991), _1831);
        _1911 = _1899.x * cbModelParam._m0[1u].y;
        _1913 = _1899.y * cbModelParam._m0[1u].y;
        _1915 = _1899.z * cbModelParam._m0[1u].y;
    }
    float _1919 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _807);
    float _1920 = isnan(_1919) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1919 : min(cbModelParam._m0[25u].w, _1919));
    float _2009;
    float _2011;
    float _2013;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1973 = fma(_1053, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1045)) + cbModelParam._m0[21u].w;
        float _1977 = fma(_1053, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1045)) + cbModelParam._m0[22u].w;
        float _1981 = fma(_1053, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1045)) + cbModelParam._m0[23u].w;
        float _1984 = fma(_991, cbModelParam._m0[21u].z, fma(_990, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _989));
        float _1987 = fma(_991, cbModelParam._m0[22u].z, fma(_990, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _989));
        float _1990 = fma(_991, cbModelParam._m0[23u].z, fma(_990, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _989));
        float _2099;
        if (_1984 > 0.0)
        {
            _2099 = abs((1.0 - _1973) / _1984);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1973 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2099 = frontier_phi_28_24_ladder;
        }
        float _2416;
        if (_1987 > 0.0)
        {
            _2416 = abs((1.0 - _1977) / _1987);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1977 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2416 = frontier_phi_40_35_ladder;
        }
        float _2754;
        if (_1990 > 0.0)
        {
            _2754 = abs((1.0 - _1981) / _1990);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1981 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2754 = frontier_phi_50_47_ladder;
        }
        float _2756 = isnan(_2416) ? _2099 : (isnan(_2099) ? _2416 : min(_2099, _2416));
        float _2757 = isnan(_2754) ? _2756 : (isnan(_2756) ? _2754 : min(_2756, _2754));
        float _2761 = (_2757 * _1984) + _1973;
        float _2762 = (_2757 * _1987) + _1977;
        float _2763 = (_2757 * _1990) + _1981;
        float _2764 = _2757 * 9.9999997473787516355514526367188e-05;
        float _2765 = (-1.0) - _2764;
        float _2767 = _2764 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2763 > _2767) || ((_2763 < _2765) || ((_2762 > _2767) || ((_2762 < _2765) || ((_2761 < _2765) || (_2761 > _2767))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2885 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2763, cbModelParam._m0[17u].z, fma(_2762, cbModelParam._m0[17u].y, _2761 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2763, cbModelParam._m0[18u].z, fma(_2762, cbModelParam._m0[18u].y, _2761 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2763, cbModelParam._m0[19u].z, fma(_2762, cbModelParam._m0[19u].y, _2761 * cbModelParam._m0[19u].x))), _1920);
            frontier_phi_25_50_ladder = _2885.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2885.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2885.x * cbModelParam._m0[1u].z;
        }
        _2009 = frontier_phi_25_50_ladder_2;
        _2011 = frontier_phi_25_50_ladder_1;
        _2013 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1993 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_989, _990, _991), _1920);
        _2009 = _1993.x * cbModelParam._m0[1u].z;
        _2011 = _1993.y * cbModelParam._m0[1u].z;
        _2013 = _1993.z * cbModelParam._m0[1u].z;
    }
    float _2026 = (((_1016 * _965) + _1017) * _981) * ((cbModelParam._m0[1u].w * (_2009 - _1911)) + _1911);
    float _2028 = (((_1016 * _967) + _1017) * _981) * ((cbModelParam._m0[1u].w * (_2011 - _1913)) + _1913);
    float _2030 = (((_1016 * _968) + _1017) * _981) * ((cbModelParam._m0[1u].w * (_2013 - _1915)) + _1915);
    float _2033 = fma(_2030, cbSceneParam._m0[89u].z, fma(_2028, cbSceneParam._m0[89u].y, _2026 * cbSceneParam._m0[89u].x));
    float _2036 = fma(_2030, cbSceneParam._m0[90u].z, fma(_2028, cbSceneParam._m0[90u].y, _2026 * cbSceneParam._m0[90u].x));
    float _2039 = fma(_2030, cbSceneParam._m0[91u].z, fma(_2028, cbSceneParam._m0[91u].y, _2026 * cbSceneParam._m0[91u].x));
    float _2073 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2077 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2081 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2085 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2086 = _2073 / _2085;
    float _2087 = _2077 / _2085;
    float _2088 = _2081 / _2085;
    float _2235;
    float _2236;
    float _2237;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2115 = ((uint(_2088 > cbSceneParam._m0[59u].y) + uint(_2088 > cbSceneParam._m0[59u].x)) + uint(_2088 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2116 = _2115 + 43u;
        uint _2124 = _2115 + 44u;
        uint _2132 = _2115 + 45u;
        uint _2140 = _2115 + 46u;
        float _2151 = fma(_2085, cbSceneParam._m0[_2116].w, fma(_2081, cbSceneParam._m0[_2116].z, fma(_2077, cbSceneParam._m0[_2116].y, _2073 * cbSceneParam._m0[_2116].x)));
        float _2155 = fma(_2085, cbSceneParam._m0[_2124].w, fma(_2081, cbSceneParam._m0[_2124].z, fma(_2077, cbSceneParam._m0[_2124].y, _2073 * cbSceneParam._m0[_2124].x)));
        float _2163 = fma(_2085, cbSceneParam._m0[_2140].w, fma(_2081, cbSceneParam._m0[_2140].z, fma(_2077, cbSceneParam._m0[_2140].y, _2073 * cbSceneParam._m0[_2140].x)));
        float _2168 = cbSceneParam._m0[33u].z * _2163;
        float _2170 = cbSceneParam._m0[33u].w * _2163;
        float _2173 = fma(_2085, cbSceneParam._m0[_2132].w, fma(_2081, cbSceneParam._m0[_2132].z, fma(_2077, cbSceneParam._m0[_2132].y, _2073 * cbSceneParam._m0[_2132].x))) / _2163;
        float _2221 = (cbSceneParam._m0[33u].x - sqrt(((_2087 * _2087) + (_2086 * _2086)) + (_2088 * _2088))) * cbSceneParam._m0[33u].y;
        float _4623 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2228 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 + _2151) / _2163, (_2170 + _2155) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 + _2151) / _2163, (_2155 - _2168) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 - _2168) / _2163, (_2155 - _2170) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 - _2170) / _2163, (_2168 + _2155) / _2163), _2173), 0.0)).x), vec4(0.25)));
        _2235 = 1.0 - (_2228 * cbSceneParam._m0[34u].x);
        _2236 = 1.0 - (_2228 * cbSceneParam._m0[34u].y);
        _2237 = 1.0 - (_2228 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2235 = 1.0;
        _2236 = 1.0;
        _2237 = 1.0;
    }
    float _2301;
    float _2303;
    float _2305;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2289 = fma(_2085, cbSceneParam._m0[63u].w, fma(_2081, cbSceneParam._m0[63u].z, fma(_2077, cbSceneParam._m0[63u].y, _2073 * cbSceneParam._m0[63u].x)));
        float _2290 = fma(_2085, cbSceneParam._m0[60u].w, fma(_2081, cbSceneParam._m0[60u].z, fma(_2077, cbSceneParam._m0[60u].y, _2073 * cbSceneParam._m0[60u].x))) / _2289;
        float _2291 = fma(_2085, cbSceneParam._m0[61u].w, fma(_2081, cbSceneParam._m0[61u].z, fma(_2077, cbSceneParam._m0[61u].y, _2073 * cbSceneParam._m0[61u].x))) / _2289;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2290 >= cbSceneParam._m0[64u].x) && (_2291 >= cbSceneParam._m0[64u].y)) && (_2290 <= cbSceneParam._m0[64u].z)) && (_2291 <= cbSceneParam._m0[64u].w))
        {
            float _2429 = fma(_2085, cbSceneParam._m0[62u].w, fma(_2081, cbSceneParam._m0[62u].z, fma(_2077, cbSceneParam._m0[62u].y, _2073 * cbSceneParam._m0[62u].x))) / _2289;
            float _2433 = isnan(cbSceneParam._m0[41u].w) ? _2429 : (isnan(_2429) ? cbSceneParam._m0[41u].w : max(_2429, cbSceneParam._m0[41u].w));
            float _2476 = (cbSceneParam._m0[33u].x - sqrt(((_2087 * _2087) + (_2086 * _2086)) + (_2088 * _2088))) * cbSceneParam._m0[33u].y;
            float _4639 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
            float _2483 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2290, cbSceneParam._m0[33u].w + _2291), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2290, _2291 - cbSceneParam._m0[33u].z), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2290 - cbSceneParam._m0[33u].z, _2291 - cbSceneParam._m0[33u].w), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2290 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2291), _2433), 0.0)).x), vec4(0.25)));
            float _2487 = 1.0 - (_2483 * cbSceneParam._m0[34u].x);
            float _2488 = 1.0 - (_2483 * cbSceneParam._m0[34u].y);
            float _2489 = 1.0 - (_2483 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2489) ? _2237 : (isnan(_2237) ? _2489 : min(_2237, _2489));
            frontier_phi_37_36_ladder_1 = isnan(_2488) ? _2236 : (isnan(_2236) ? _2488 : min(_2236, _2488));
            frontier_phi_37_36_ladder_2 = isnan(_2487) ? _2235 : (isnan(_2235) ? _2487 : min(_2235, _2487));
        }
        else
        {
            frontier_phi_37_36_ladder = _2237;
            frontier_phi_37_36_ladder_1 = _2236;
            frontier_phi_37_36_ladder_2 = _2235;
        }
        _2301 = frontier_phi_37_36_ladder_2;
        _2303 = frontier_phi_37_36_ladder_1;
        _2305 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2301 = _2235;
        _2303 = _2236;
        _2305 = _2237;
    }
    uvec4 _2310 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2312 = _2310.x * 14u;
    uint _2313 = _2312 + 13u;
    float _2320 = _981 + (-1.0);
    float _2325 = (cbLight._m0[_2313].x * _2320) + 1.0;
    float _2326 = (cbLight._m0[_2313].y * _2320) + 1.0;
    float _2327 = (cbLight._m0[_2313].z * _2320) + 1.0;
    float _2328 = (cbLight._m0[_2313].w * _2320) + 1.0;
    uint _2329 = _2312 + 5u;
    float _2335 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
    uint _2339 = _2312 + 4u;
    float _2348 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
    uint _2352 = _2312 | 1u;
    float _2363 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_804, _805, _806));
    float _2366 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_804, _805, _806));
    float _4675 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _4686 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2371 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * 0.3183098733425140380859375;
    float _2373 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * 0.3183098733425140380859375;
    float _2380 = ((cbLight._m0[_2329].x * _2335) * _2373) + (((cbLight._m0[_2339].x * _2301) * _2348) * _2371);
    float _2381 = ((_2335 * cbLight._m0[_2329].y) * _2373) + (((cbLight._m0[_2339].y * _2303) * _2348) * _2371);
    float _2382 = ((_2335 * cbLight._m0[_2329].z) * _2373) + (((cbLight._m0[_2339].z * _2305) * _2348) * _2371);
    uvec4 _2386 = floatBitsToUint(cbLight._m0[_2312 + 12u]);
    bool _2388 = _2386.x == 0u;
    float _2490;
    float _2492;
    float _2494;
    if (_2388)
    {
        _2490 = _2380;
        _2492 = _2381;
        _2494 = _2382;
    }
    else
    {
        uint _2498 = _2312 + 6u;
        float _2514 = (dot(vec3(cbLight._m0[_2312 + 2u].xyz), vec3(_804, _805, _806)) * 0.5) + 0.5;
        float _2515 = _2514 * _2514;
        float _4697 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2516 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2517 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2490 = (((cbLight._m0[_2498].x * 0.3183098733425140380859375) * _2516) * _2517) + _2380;
        _2492 = (((cbLight._m0[_2498].y * 0.3183098733425140380859375) * _2516) * _2517) + _2381;
        _2494 = (((cbLight._m0[_2498].z * 0.3183098733425140380859375) * _2516) * _2517) + _2382;
    }
    bool _2497 = _2386.y == 0u;
    float _2552;
    float _2554;
    float _2556;
    if (_2497)
    {
        _2552 = _2490;
        _2554 = _2492;
        _2556 = _2494;
    }
    else
    {
        uint _2725 = _2312 + 7u;
        float _2741 = (dot(vec3(cbLight._m0[_2312 + 3u].xyz), vec3(_804, _805, _806)) * 0.5) + 0.5;
        float _2742 = _2741 * _2741;
        float _4713 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2743 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2744 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2552 = (((cbLight._m0[_2725].x * 0.3183098733425140380859375) * _2743) * _2744) + _2490;
        _2554 = (((cbLight._m0[_2725].y * 0.3183098733425140380859375) * _2743) * _2744) + _2492;
        _2556 = (((cbLight._m0[_2725].z * 0.3183098733425140380859375) * _2743) * _2744) + _2494;
    }
    uint _2559 = _2312 + 8u;
    float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _807) * 0.949999988079071044921875);
    float _2573 = _2572 * _2572;
    float _2574 = cbLight._m0[_2312].x + _883;
    float _2575 = cbLight._m0[_2312].y + _884;
    float _2576 = cbLight._m0[_2312].z + _885;
    float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
    float _2581 = _2580 * _2574;
    float _2582 = _2580 * _2575;
    float _2583 = _2580 * _2576;
    float _2584 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2312].xyz));
    float _4729 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _4740 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _2588 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _2589 = dot(vec3(_804, _805, _806), vec3(_2581, _2582, _2583));
    float _4751 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2593 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2581, _2582, _2583));
    float _4762 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2597 = _2573 * _2573;
    float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
    float _2609 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
    float _2610 = 0.959999978542327880859375 - _962;
    float _2612 = 0.959999978542327880859375 - _963;
    float _2613 = 0.959999978542327880859375 - _964;
    float _2620 = 1.0 - _2573;
    float _2631 = (0.5 / (((_2588 * ((_2587 * _2620) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2620) + _2573) * _2587))) * _2587;
    float _4773 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2633 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
    uint _2647 = _2312 + 9u;
    float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _807) * 0.949999988079071044921875);
    float _2659 = _2658 * _2658;
    float _2660 = cbLight._m0[_2352].x + _883;
    float _2661 = cbLight._m0[_2352].y + _884;
    float _2662 = cbLight._m0[_2352].z + _885;
    float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
    float _2667 = _2666 * _2660;
    float _2668 = _2666 * _2661;
    float _2669 = _2666 * _2662;
    float _2670 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2352].xyz));
    float _4784 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2673 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
    float _2674 = dot(vec3(_804, _805, _806), vec3(_2667, _2668, _2669));
    float _4795 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2677 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
    float _2678 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2667, _2668, _2669));
    float _4806 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2682 = _2659 * _2659;
    float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
    float _2693 = exp2(log2(1.0 - (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) * 5.0);
    float _2700 = 1.0 - _2659;
    float _2710 = (0.5 / (((_2588 * ((_2673 * _2700) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2700) + _2659) * _2673))) * _2673;
    float _4817 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2712 = (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
    float _2722 = (((((_2693 * _2610) + _965) * cbLight._m0[_2647].x) * _2712) * _2335) + ((((cbLight._m0[_2559].x * _2301) * ((_2609 * _2610) + _965)) * _2633) * _2348);
    float _2723 = (((((_2693 * _2612) + _967) * cbLight._m0[_2647].y) * _2712) * _2335) + ((((cbLight._m0[_2559].y * _2303) * ((_2609 * _2612) + _967)) * _2633) * _2348);
    float _2724 = (((((_2693 * _2613) + _968) * cbLight._m0[_2647].z) * _2712) * _2335) + ((((cbLight._m0[_2559].z * _2305) * ((_2609 * _2613) + _968)) * _2633) * _2348);
    float _2780;
    float _2782;
    float _2784;
    if (_2388)
    {
        _2780 = _2722;
        _2782 = _2723;
        _2784 = _2724;
    }
    else
    {
        uint _2786 = _2312 + 2u;
        uint _2790 = _2312 + 10u;
        float _2804 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2786].w)) * _807) * 0.949999988079071044921875);
        float _2805 = _2804 * _2804;
        float _2806 = cbLight._m0[_2786].x + _883;
        float _2807 = cbLight._m0[_2786].y + _884;
        float _2808 = cbLight._m0[_2786].z + _885;
        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
        float _2813 = _2812 * _2806;
        float _2814 = _2812 * _2807;
        float _2815 = _2812 * _2808;
        float _2816 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2786].xyz));
        float _4828 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2820 = dot(vec3(_804, _805, _806), vec3(_2813, _2814, _2815));
        float _4839 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2823 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2824 = dot(vec3(cbLight._m0[_2786].xyz), vec3(_2813, _2814, _2815));
        float _4850 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2828 = _2805 * _2805;
        float _2832 = ((_2823 * _2823) * (_2828 + (-1.0))) + 1.0;
        float _2839 = exp2(log2(1.0 - (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) * 5.0);
        float _2846 = 1.0 - _2805;
        float _2856 = (0.5 / (((_2588 * ((_2819 * _2846) + _2805)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2846) + _2805) * _2819))) * _2819;
        float _4861 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2858 = (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2828 / ((_2832 * _2832) * 3.141590118408203125));
        float _2859 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2780 = (((((_2839 * _2610) + _965) * cbLight._m0[_2790].x) * _2858) * _2859) + _2722;
        _2782 = (((((_2839 * _2612) + _967) * cbLight._m0[_2790].y) * _2858) * _2859) + _2723;
        _2784 = (((((_2839 * _2613) + _968) * cbLight._m0[_2790].z) * _2858) * _2859) + _2724;
    }
    float _2890;
    float _2892;
    float _2894;
    if (_2497)
    {
        _2890 = _2780;
        _2892 = _2782;
        _2894 = _2784;
    }
    else
    {
        uint _2901 = _2312 + 3u;
        uint _2905 = _2312 + 11u;
        float _2919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2901].w)) * _807) * 0.949999988079071044921875);
        float _2920 = _2919 * _2919;
        float _2921 = cbLight._m0[_2901].x + _883;
        float _2922 = cbLight._m0[_2901].y + _884;
        float _2923 = cbLight._m0[_2901].z + _885;
        float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
        float _2928 = _2927 * _2921;
        float _2929 = _2927 * _2922;
        float _2930 = _2927 * _2923;
        float _2931 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2901].xyz));
        float _4877 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2934 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
        float _2935 = dot(vec3(_804, _805, _806), vec3(_2928, _2929, _2930));
        float _4888 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2938 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
        float _2939 = dot(vec3(cbLight._m0[_2901].xyz), vec3(_2928, _2929, _2930));
        float _4899 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2943 = _2920 * _2920;
        float _2947 = ((_2938 * _2938) * (_2943 + (-1.0))) + 1.0;
        float _2954 = exp2(log2(1.0 - (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) * 5.0);
        float _2961 = 1.0 - _2920;
        float _2971 = (0.5 / (((_2588 * ((_2934 * _2961) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2961) + _2920) * _2934))) * _2934;
        float _4910 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2973 = (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2943 / ((_2947 * _2947) * 3.141590118408203125));
        float _2974 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2890 = (((((_2954 * _2610) + _965) * cbLight._m0[_2905].x) * _2973) * _2974) + _2780;
        _2892 = (((((_2954 * _2612) + _967) * cbLight._m0[_2905].y) * _2973) * _2974) + _2782;
        _2894 = (((((_2954 * _2613) + _968) * cbLight._m0[_2905].z) * _2973) * _2974) + _2784;
    }
    float _3040;
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    if (_2310.y == 0u)
    {
        uvec4 _2995 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2996 = _2995.x;
        uint _3007 = uint((float(_2995.y) * floor(float(uint(cbSceneParam._m0[85u].y * _904) / _2996))) + floor(float(uint(cbSceneParam._m0[85u].x * _903) / _2996)));
        float _3017 = (log2(_2088 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3018 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
        uint _3021 = uint(isnan(14.0) ? _3018 : (isnan(_3018) ? 14.0 : min(_3018, 14.0)));
        uvec4 _3026 = texelFetch(g_lightClusterGridBuffer, int(((_3021 << 2u) + (_3007 << 6u)) >> 2u));
        uint _3027 = _3026.x;
        uint _3028 = _2995.z;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        if (((((1u << ((_3028 >> 4u) & 15u)) + 4294967295u) & _3027) == 0u) || ((_3028 & 240u) == 0u))
        {
            _3107 = 0.0;
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
        }
        else
        {
            float _3108;
            float _3110;
            float _3112;
            float _3114;
            float _3116;
            float _3118;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            uint _3266 = 0u;
            uint _3275;
            bool _3276;
            for (;;)
            {
                _3275 = texelFetch(g_lightClassification, int((((_3021 << 5u) + (_3007 << 9u)) + (_3266 << 2u)) >> 2u)).x;
                _3276 = _3275 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3276)
                {
                    frontier_phi_71_pred = _3265;
                    frontier_phi_71_pred_1 = _3264;
                    frontier_phi_71_pred_2 = _3263;
                    frontier_phi_71_pred_3 = _3262;
                    frontier_phi_71_pred_4 = _3261;
                    frontier_phi_71_pred_5 = _3260;
                }
                else
                {
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    uint _3411;
                    _3405 = _3260;
                    _3406 = _3261;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3275;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    for (;;)
                    {
                        uint _3415 = uint(findLSB(_3411)) + (_3266 << 5u);
                        uint _3412 = (_3411 + 4294967295u) & _3411;
                        uint _3417 = _3415 * 48u;
                        vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3417)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 3u)).x));
                        uint _3437 = (_3415 * 48u) + 4u;
                        vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3437)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 3u)).x));
                        uint _3456 = (_3415 * 48u) + 8u;
                        vec3 _3467 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3456)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 2u)).x));
                        float _3471 = _3431.x - _2086;
                        float _3472 = _3431.y - _2087;
                        float _3473 = _3431.z - _2088;
                        float _3474 = dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473));
                        float _3477 = inversesqrt(_3474);
                        float _3478 = _3477 * _3471;
                        float _3479 = _3477 * _3472;
                        float _3480 = _3477 * _3473;
                        float _3481 = dot(vec3(_922, _925, _928), vec3(_3478, _3479, _3480));
                        float _3486 = 1.0 - (_3474 * _3431.w);
                        float _4936 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3487 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3488 = sqrt(_3474) * _3450.w;
                        float _3491 = 1.39999997615814208984375 / (_3488 + 1.39999997615814208984375);
                        float _3492 = _3491 * _3491;
                        float _3495 = ((1.0 - _3492) * _3481) + _3492;
                        float _3498 = _3488 * _3488;
                        float _3502 = ((isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0))) * _3487) / ((_3498 * 0.699999988079071044921875) + 1.0);
                        float _3506 = (-0.0) - _2086;
                        float _3507 = (-0.0) - _2087;
                        float _3508 = (-0.0) - _2088;
                        float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                        float _3513 = _3512 * _3506;
                        float _3514 = _3512 * _3507;
                        float _3515 = _3512 * _3508;
                        float _3522 = exp2(log2(1.0 / ((_3498 * 3.5) + 5.0)) * 0.25);
                        float _3523 = 1.0 - _997;
                        float _3530 = sqrt(1.0 - ((1.0 - (_3523 * _3523)) * (1.0 - (_3522 * _3522))));
                        float _3531 = _3530 * _3530;
                        float _3532 = _3531 * _3531;
                        float _3533 = _3513 + _3478;
                        float _3534 = _3514 + _3479;
                        float _3535 = _3515 + _3480;
                        float _3539 = inversesqrt(dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535)));
                        float _3543 = dot(vec3(_922, _925, _928), vec3(_3513, _3514, _3515));
                        float _4952 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3546 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3547 = dot(vec3(_922, _925, _928), vec3(_3539 * _3533, _3539 * _3534, _3539 * _3535));
                        float _4963 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3550 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                        float _3554 = ((_3550 * _3550) * (_3532 + (-1.0))) + 1.0;
                        float _3555 = _3491 * _3531;
                        float _3556 = _3555 * _3555;
                        float _3559 = ((1.0 - _3556) * _3481) + _3556;
                        float _4974 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3560 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                        float _3561 = 1.0 - _3531;
                        float _3571 = (0.5 / (((_3560 * ((_3546 * _3561) + _3531)) + 9.9999999392252902907785028219223e-09) + (((_3560 * _3561) + _3531) * _3546))) * _3560;
                        float _4985 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                        float _3582 = (((_3532 * 3.1415927410125732421875) * (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0)))) / ((_3554 * _3554) * ((_3498 * 2.1991131305694580078125) + 3.141590118408203125))) * _3487;
                        _3335 = (_3502 * _3450.x) + _3408;
                        _3336 = (_3502 * _3450.y) + _3409;
                        _3337 = (_3502 * _3450.z) + _3410;
                        _3332 = (_3582 * _3467.x) + _3405;
                        _3333 = (_3582 * _3467.y) + _3406;
                        _3334 = (_3582 * _3467.z) + _3407;
                        if (_3412 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3405 = _3332;
                            _3406 = _3333;
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3412;
                        }
                    }
                    frontier_phi_71_pred = _3337;
                    frontier_phi_71_pred_1 = _3336;
                    frontier_phi_71_pred_2 = _3335;
                    frontier_phi_71_pred_3 = _3334;
                    frontier_phi_71_pred_4 = _3333;
                    frontier_phi_71_pred_5 = _3332;
                }
                _3118 = frontier_phi_71_pred;
                _3116 = frontier_phi_71_pred_1;
                _3114 = frontier_phi_71_pred_2;
                _3112 = frontier_phi_71_pred_3;
                _3110 = frontier_phi_71_pred_4;
                _3108 = frontier_phi_71_pred_5;
                uint _3267 = _3266 + 1u;
                if (_3267 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3260 = _3108;
                    _3261 = _3110;
                    _3262 = _3112;
                    _3263 = _3114;
                    _3264 = _3116;
                    _3265 = _3118;
                    _3266 = _3267;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3107 = _3108;
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
        }
        uvec4 _3121 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3122 = _3121.z;
        uint _3124 = (_3122 >> 8u) & 15u;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        if (((4294967295u << _3124) & _3027) == 0u)
        {
            _3228 = _3107;
            _3230 = _3109;
            _3232 = _3111;
            _3234 = _3113;
            _3236 = _3115;
            _3238 = _3117;
        }
        else
        {
            float _3253 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
            float _3254 = _3253 * _2086;
            float _3255 = _3253 * _2087;
            float _3256 = _3253 * _2088;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3124 < ((_3122 >> 12u) & 15u))
            {
                float _3229;
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3388 = _3107;
                float _3389 = _3109;
                float _3390 = _3111;
                float _3391 = _3113;
                float _3392 = _3115;
                float _3393 = _3117;
                uint _3394 = _3124;
                uint _3403;
                bool _3404;
                for (;;)
                {
                    _3403 = texelFetch(g_lightClassification, int((((_3021 << 5u) + (_3007 << 9u)) + (_3394 << 2u)) >> 2u)).x;
                    _3404 = _3403 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3404)
                    {
                        frontier_phi_82_pred = _3393;
                        frontier_phi_82_pred_1 = _3392;
                        frontier_phi_82_pred_2 = _3391;
                        frontier_phi_82_pred_3 = _3390;
                        frontier_phi_82_pred_4 = _3389;
                        frontier_phi_82_pred_5 = _3388;
                    }
                    else
                    {
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3894;
                        float _3609 = _3388;
                        float _3610 = _3389;
                        float _3611 = _3390;
                        float _3612 = _3391;
                        float _3613 = _3392;
                        float _3614 = _3393;
                        uint _3615 = _3403;
                        uint _3616;
                        vec4 _3641;
                        float _3642;
                        vec4 _3657;
                        vec3 _3669;
                        vec4 _3684;
                        vec4 _3699;
                        float _3745;
                        bool _3746;
                        for (;;)
                        {
                            uint _3626 = ((_3394 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3615));
                            _3616 = (_3615 + 4294967295u) & _3615;
                            uint _3628 = _3626 * 40u;
                            _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            _3642 = _3641.w;
                            uint _3644 = (_3626 * 40u) + 4u;
                            _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            uint _3659 = (_3626 * 40u) + 8u;
                            _3669 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x));
                            uint _3671 = (_3626 * 40u) + 16u;
                            _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            uint _3686 = (_3626 * 40u) + 20u;
                            _3699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 3u)).x));
                            uint _3701 = (_3626 * 40u) + 24u;
                            vec4 _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            uint _3720 = (_3626 * 40u) + 28u;
                            vec4 _3733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 3u)).x));
                            _3745 = fma(_2088, _3733.z, fma(_2087, _3733.y, _3733.x * _2086)) + _3733.w;
                            _3746 = !((fma(_2088, _3714.z, fma(_2087, _3714.y, _3714.x * _2086)) + _3714.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3746)
                            {
                                float _3773 = _3641.x - _2086;
                                float _3774 = _3641.y - _2087;
                                float _3775 = _3641.z - _2088;
                                float _3776 = dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775));
                                float _3779 = inversesqrt(_3776);
                                float _3780 = _3779 * _3773;
                                float _3781 = _3779 * _3774;
                                float _3782 = _3779 * _3775;
                                float _3786 = 1.0 - (_3776 / (_3642 * _3642));
                                float _4996 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3787 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3791 = sqrt(_3776) * _3657.w;
                                float _3793 = 1.39999997615814208984375 / (_3791 + 1.39999997615814208984375);
                                float _3794 = _3793 * _3793;
                                float _3797 = ((1.0 - _3794) * dot(vec3(_3780, _3781, _3782), vec3(_922, _925, _928))) + _3794;
                                float _3800 = _3791 * _3791;
                                float _3804 = (fma(_2088, _3684.z, fma(_2087, _3684.y, _3684.x * _2086)) + _3684.w) / _3745;
                                float _3805 = (fma(_2088, _3699.z, fma(_2087, _3699.y, _3699.x * _2086)) + _3699.w) / _3745;
                                float _3809 = 1.0 - dot(vec2(_3804, _3805), vec2(_3804, _3805));
                                float _5012 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3810 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3811 = _3810 * (((isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0))) * _3787) / ((_3800 * 0.699999988079071044921875) + 1.0));
                                float _3823 = exp2(log2(1.0 / ((_3800 * 3.5) + 5.0)) * 0.25);
                                float _3824 = 1.0 - _997;
                                float _3831 = sqrt(1.0 - ((1.0 - (_3824 * _3824)) * (1.0 - (_3823 * _3823))));
                                float _3832 = _3831 * _3831;
                                float _3833 = _3832 * _3832;
                                float _3834 = _3780 - _3254;
                                float _3835 = _3781 - _3255;
                                float _3836 = _3782 - _3256;
                                float _3840 = inversesqrt(dot(vec3(_3834, _3835, _3836), vec3(_3834, _3835, _3836)));
                                float _3844 = dot(vec3(_922, _925, _928), vec3((-0.0) - _3254, (-0.0) - _3255, (-0.0) - _3256));
                                float _5023 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3847 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3848 = dot(vec3(_922, _925, _928), vec3(_3840 * _3834, _3840 * _3835, _3840 * _3836));
                                float _5034 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3851 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3855 = ((_3851 * _3851) * (_3833 + (-1.0))) + 1.0;
                                float _3856 = _3793 * _3832;
                                float _3857 = _3856 * _3856;
                                float _3863 = ((1.0 - _3857) * dot(vec3(_922, _925, _928), vec3(_3780, _3781, _3782))) + _3857;
                                float _5045 = isnan(0.0) ? _3863 : (isnan(_3863) ? 0.0 : max(_3863, 0.0));
                                float _3864 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                                float _3865 = 1.0 - _3832;
                                float _3875 = (0.5 / (((_3864 * ((_3847 * _3865) + _3832)) + 9.9999999392252902907785028219223e-09) + (((_3864 * _3865) + _3832) * _3847))) * _3864;
                                float _5056 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3885 = (_3810 * _3787) * (((_3833 * 3.1415927410125732421875) * (isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0)))) / ((_3855 * _3855) * ((_3800 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3811 * _3657.z;
                                frontier_phi_88_pred_1 = _3811 * _3657.y;
                                frontier_phi_88_pred_2 = _3811 * _3657.x;
                                frontier_phi_88_pred_3 = _3885 * _3669.z;
                                frontier_phi_88_pred_4 = _3885 * _3669.y;
                                frontier_phi_88_pred_5 = _3885 * _3669.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3894 = frontier_phi_88_pred;
                            _3893 = frontier_phi_88_pred_1;
                            _3892 = frontier_phi_88_pred_2;
                            _3891 = frontier_phi_88_pred_3;
                            _3890 = frontier_phi_88_pred_4;
                            _3889 = frontier_phi_88_pred_5;
                            _3599 = _3892 + _3612;
                            _3600 = _3893 + _3613;
                            _3601 = _3894 + _3614;
                            _3596 = _3889 + _3609;
                            _3597 = _3890 + _3610;
                            _3598 = _3891 + _3611;
                            if (_3616 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3616;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3601;
                        frontier_phi_82_pred_1 = _3600;
                        frontier_phi_82_pred_2 = _3599;
                        frontier_phi_82_pred_3 = _3598;
                        frontier_phi_82_pred_4 = _3597;
                        frontier_phi_82_pred_5 = _3596;
                    }
                    _3239 = frontier_phi_82_pred;
                    _3237 = frontier_phi_82_pred_1;
                    _3235 = frontier_phi_82_pred_2;
                    _3233 = frontier_phi_82_pred_3;
                    _3231 = frontier_phi_82_pred_4;
                    _3229 = frontier_phi_82_pred_5;
                    uint _3395 = _3394 + 1u;
                    if (_3395 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3388 = _3229;
                        _3389 = _3231;
                        _3390 = _3233;
                        _3391 = _3235;
                        _3392 = _3237;
                        _3393 = _3239;
                        _3394 = _3395;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3235;
                frontier_phi_63_64_ladder_1 = _3239;
                frontier_phi_63_64_ladder_2 = _3237;
                frontier_phi_63_64_ladder_3 = _3233;
                frontier_phi_63_64_ladder_4 = _3231;
                frontier_phi_63_64_ladder_5 = _3229;
            }
            else
            {
                frontier_phi_63_64_ladder = _3113;
                frontier_phi_63_64_ladder_1 = _3117;
                frontier_phi_63_64_ladder_2 = _3115;
                frontier_phi_63_64_ladder_3 = _3111;
                frontier_phi_63_64_ladder_4 = _3109;
                frontier_phi_63_64_ladder_5 = _3107;
            }
            _3228 = frontier_phi_63_64_ladder_5;
            _3230 = frontier_phi_63_64_ladder_4;
            _3232 = frontier_phi_63_64_ladder_3;
            _3234 = frontier_phi_63_64_ladder;
            _3236 = frontier_phi_63_64_ladder_2;
            _3238 = frontier_phi_63_64_ladder_1;
        }
        float _3243 = isnan(1.0) ? _981 : (isnan(_981) ? 1.0 : min(_981, 1.0));
        _3040 = (_3243 * _3234) + _2552;
        _3042 = (_3243 * _3236) + _2554;
        _3044 = (_3243 * _3238) + _2556;
        _3046 = ((_3228 * _965) * _3243) + _2890;
        _3048 = ((_3230 * _967) * _3243) + _2892;
        _3050 = ((_3232 * _968) * _3243) + _2894;
    }
    else
    {
        _3040 = _2552;
        _3042 = _2554;
        _3044 = _2556;
        _3046 = _2890;
        _3048 = _2892;
        _3050 = _2894;
    }
    float _5072 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _5083 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _5094 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _3067 = ((isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_3040 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _981))) + ((_3046 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1820)) * cbPerFrame._m0[3u].x);
    float _3068 = ((isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0))) * (_3042 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _981))) + ((_3048 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1820)) * cbPerFrame._m0[3u].x);
    float _3069 = ((isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0))) * (_3044 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _981))) + ((_3050 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1820)) * cbPerFrame._m0[3u].x);
    uint _3070 = _265 + 6u;
    float _3078 = _903 / cbSceneParam._m0[86u].x;
    float _3079 = _904 / cbSceneParam._m0[86u].y;
    vec4 _3093 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3078, _3079, (log2((isnan(cbSceneParam._m0[77u].w) ? _826 : (isnan(_826) ? cbSceneParam._m0[77u].w : min(_826, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3095 = _3093.x;
    float _3096 = _3093.y;
    float _3097 = _3093.z;
    float _3098 = _3093.w;
    float _3170;
    float _3172;
    float _3174;
    float _3176;
    if (_826 > cbSceneParam._m0[78u].w)
    {
        float _3132 = isnan(_826) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _826 : min(cbSceneParam._m0[80u].w, _826));
        float _3133 = _3132 / _826;
        float _3144 = _3133 * _876;
        float _3145 = _877 * _3133;
        float _3146 = (-0.0) - _3145;
        float _3148 = _3133 * _878;
        float _3150 = (cbSceneParam._m0[77u].w * _3146) / _3132;
        float _3151 = _3150 + cbSceneParam._m0[79u].w;
        float _3152 = cbSceneParam._m0[79u].w - _3145;
        float _3158 = sqrt(((_3144 * _3144) + (_3145 * _3145)) + (_3148 * _3148));
        float _3161 = (1.0 - (cbSceneParam._m0[77u].w / _3132)) * _3158;
        float _3166 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3168 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3345;
        if (abs((_3146 - _3150) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3345 = ((((_3151 > 0.0) ? exp2(_3166 * _3151) : (2.0 - exp2(_3168 * _3151))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3161;
        }
        else
        {
            float _3289 = 1.0 / cbSceneParam._m0[80u].x;
            float _3290 = isnan(_3152) ? _3151 : (isnan(_3151) ? _3152 : max(_3151, _3152));
            float _3291 = isnan(_3152) ? _3151 : (isnan(_3151) ? _3152 : min(_3151, _3152));
            float _3300 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : min(_3290, 0.0));
            float _3301 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : min(_3291, 0.0));
            _3345 = ((abs(_3158 / _3146) * cbSceneParam._m0[80u].y) * ((((_3300 - _3301) * 2.0) - ((exp2(_3166 * (isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0)))) - exp2(_3166 * (isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))))) * _3289)) - ((exp2(_3168 * _3300) - exp2(_3168 * _3301)) * _3289))) + (_3161 * cbSceneParam._m0[80u].z);
        }
        vec4 _3347 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3078, _3079, 1.0), 0.0);
        float _3356 = exp2((_3345 * (-1.44269502162933349609375)) * (1.0 - _3347.w));
        float _3357 = log2(_3356);
        float _3373 = log2(_3098);
        _3170 = (exp2(_3373 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].x)) * _3347.x) / cbSceneParam._m0[78u].x)) + _3095;
        _3172 = (exp2(_3373 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].y)) * _3347.y) / cbSceneParam._m0[78u].y)) + _3096;
        _3174 = (exp2(_3373 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].z)) * _3347.z) / cbSceneParam._m0[78u].z)) + _3097;
        _3176 = _3356 * _3098;
    }
    else
    {
        _3170 = _3095;
        _3172 = _3096;
        _3174 = _3097;
        _3176 = _3098;
    }
    bool _3383;
    vec4 _3186;
    vec4 _3208;
    float _3210;
    float _3214;
    float _3215;
    float _3216;
    float _3217;
    bool _3227;
    for (;;)
    {
        _3186 = cbMatDynParam._m0[0u];
        float _3188 = roundEven(_3186.y);
        bool _3189 = _3188 == 3.0;
        float _3190 = log2(_3176);
        float _3197 = exp2(_3190 * cbSceneParam._m0[78u].x) * _3067;
        float _3198 = exp2(_3190 * cbSceneParam._m0[78u].y) * _3068;
        float _3199 = exp2(_3190 * cbSceneParam._m0[78u].z) * _3069;
        float _3206 = _892 + (-0.5);
        _3208 = cbMtdParam._m0[1u];
        _3210 = _3208.y * _3206;
        float _3213 = (_3188 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3214 = _3213 * (_3189 ? _3197 : (_3197 + (cbSceneParam._m0[72u].w * _3170)));
        _3215 = _3213 * (_3189 ? _3198 : (_3198 + (cbSceneParam._m0[72u].w * _3172)));
        _3216 = _3213 * (_3189 ? _3199 : (_3199 + (cbSceneParam._m0[72u].w * _3174)));
        _3217 = _3206 * 0.999000012874603271484375;
        _3227 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3227)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3217) < 0.5)
            {
                _3383 = true;
                break;
            }
        }
        uint _3324 = _941 + uint(_3186.w);
        if ((cbInstanceData._m0[_3324].w < 1.0) && ((cbInstanceData._m0[_3324].w + _3217) < 0.5))
        {
            _3383 = true;
            break;
        }
        if ((_3210 + 1.0) < _3208.x)
        {
            _3383 = true;
            break;
        }
        _3383 = false;
        break;
    }
    float _3587;
    if (_3383)
    {
        discard_state = true;
        _3587 = 0.0;
    }
    else
    {
        _3587 = cbInstanceData._m0[_3070].w;
    }
    SV_Target.x = _3214;
    SV_Target.y = _3215;
    SV_Target.z = _3216;
    SV_Target.w = _3587;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3070].w;
    discard_exit();
}


