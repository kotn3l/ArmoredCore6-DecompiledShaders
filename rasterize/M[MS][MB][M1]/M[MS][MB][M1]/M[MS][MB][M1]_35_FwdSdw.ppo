#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1251;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3861 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3872 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3883 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = _325.x * cbMtdParam._m0[9u].x;
    float _331 = _325.y * cbMtdParam._m0[9u].y;
    float _332 = _325.z * cbMtdParam._m0[9u].z;
    float _336 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _330;
    float _339 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _331;
    float _342 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _332;
    float _349 = ((_330 - _336) * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) + _336;
    float _350 = ((_331 - _339) * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) + _339;
    float _351 = ((_332 - _342) * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) + _342;
    vec4 _369 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _395 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _399 = _395.z;
    float _403 = (_395.x * 2.0) + (-1.0);
    float _404 = (_395.y * 2.0) + (-1.0);
    float _405 = dot(vec2(_403, _404), vec2(_403, _404));
    float _3894 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _410 = sqrt(1.0 - (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))));
    float _415 = _403 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_369.x * 2.0) + (-1.0)));
    float _416 = _404 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_369.y * 2.0) + (-1.0)));
    float _419 = fma(_410, _238, fma(_416, _245, _415 * _231));
    float _422 = fma(_410, _239, fma(_416, _246, _415 * _232));
    float _425 = fma(_410, _240, fma(_416, _247, _415 * _233));
    float _429 = inversesqrt(dot(vec3(_419, _422, _425), vec3(_419, _422, _425)));
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _467 = _465.x;
    float _468 = 1.0 - _467;
    float _475 = ((_467 - _468) * cbMtdParam._m0[24u].z) + _468;
    float _477 = (cbMtdParam._m0[19u].x + dot(vec4(_429 * _419, _429 * _422, _429 * _425, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_475 * cbMtdParam._m0[21u].z);
    float _3905 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _478 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _480 = (-0.0) - cbMtdParam._m0[24u].x;
    float _482 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _482 : (isnan(_482) ? 1.0 : min(_482, 1.0));
    float _490 = _478 - ((_478 * TEXCOORD_8.x) * _483);
    float _491 = _478 - ((_478 * TEXCOORD_8.y) * _483);
    float _492 = _478 - ((_478 * TEXCOORD_8.z) * _483);
    float _499 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _503 = ((isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : min(_499, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _511 = (_503 - (((_475 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _503))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3936 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _516 = ((_490 * (cbMtdParam._m0[17u].x - _349)) * _512) + _349;
    float _517 = ((_491 * (cbMtdParam._m0[17u].y - _350)) * _512) + _350;
    float _518 = ((_492 * (cbMtdParam._m0[17u].z - _351)) * _512) + _351;
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _532 = _530.x;
    float _533 = 1.0 - _532;
    float _560 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_532 - _533) * cbMtdParam._m0[24u].w) + _533) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3947 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _569 = ((((cbMtdParam._m0[10u].x - _516) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _561) + _516;
    float _570 = ((((cbMtdParam._m0[10u].y - _517) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _561) + _517;
    float _571 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _518)) * _561) + _518;
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _586 = _584.x;
    float _589 = _586 - ((_586 * _490) * _512);
    float _591 = _589 - (_589 * _561);
    float _596 = (((_369.z - _399) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _399;
    vec4 _610 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _617 = (_610.x * 2.0) + (-1.0);
    float _618 = (_610.y * 2.0) + (-1.0);
    float _619 = dot(vec2(_617, _618), vec2(_617, _618));
    float _3958 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _628 = (((_610.z - _596) * _490) * _512) + _596;
    float _631 = ((cbMtdParam._m0[23u].y - _628) * _561) + _628;
    vec4 _650 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _656 = (_650.x * 2.0) + (-1.0);
    float _657 = (_650.y * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _3969 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _678 = (((cbMtdParam._m0[21u].x * _415) + ((_617 - _415) * _490)) * _512) + _415;
    float _679 = (((cbMtdParam._m0[21u].x * _416) + ((_618 - _416) * _491)) * _512) + _416;
    float _680 = (((sqrt(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) - _410) * _492) * _512) + _410;
    float _691 = (((_656 - _678) + (_678 * cbMtdParam._m0[22u].z)) * _561) + _678;
    float _692 = (((_657 - _679) + (_679 * cbMtdParam._m0[22u].z)) * _561) + _679;
    float _693 = ((sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) - _680) * _561) + _680;
    float _695 = cbMtdParam._m0[22u].x + _395.w;
    float _698 = fma(_693, _238, fma(_692, _245, _691 * _231));
    float _701 = fma(_693, _239, fma(_692, _246, _691 * _232));
    float _704 = fma(_693, _240, fma(_692, _247, _691 * _233));
    float _708 = inversesqrt(dot(vec3(_698, _701, _704), vec3(_698, _701, _704)));
    float _709 = _708 * _698;
    float _710 = _708 * _701;
    float _711 = _708 * _704;
    float _3980 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _712 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4002 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4013 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _4024 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4035 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _717 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _731 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _781 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _771);
    float _782 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _771);
    float _783 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _771);
    float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
    float _788 = _781 * _787;
    float _789 = _782 * _787;
    float _790 = _783 * _787;
    float _796 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _797 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _818 = fma(_711, cbSceneParam._m0[5u].z, fma(_710, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _709));
    float _821 = fma(_711, cbSceneParam._m0[6u].z, fma(_710, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _709));
    float _824 = fma(_711, cbSceneParam._m0[7u].z, fma(_710, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _709));
    uint _838 = (_269 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _844 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_838].x;
    float _845 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_838].y;
    float _846 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_838].z;
    float _4046 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _850 = 1.0 - _717;
    float _851 = _847 * _850;
    float _852 = _848 * _850;
    float _853 = _849 * _850;
    float _858 = (_847 + (-0.039999999105930328369140625)) * _717;
    float _859 = (_848 + (-0.039999999105930328369140625)) * _717;
    float _860 = (_849 + (-0.039999999105930328369140625)) * _717;
    float _861 = _858 + 0.039999999105930328369140625;
    float _863 = _859 + 0.039999999105930328369140625;
    float _864 = _860 + 0.039999999105930328369140625;
    vec4 _873 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _796, cbSceneParam._m0[86u].y * _797));
    float _877 = ((isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * TEXCOORD_5.w) * _873.x;
    float _878 = dot(vec3(_709, _710, _711), vec3(_788, _789, _790));
    float _881 = _878 * 2.0;
    float _885 = (_881 * _709) - _788;
    float _886 = (_881 * _710) - _789;
    float _887 = (_881 * _711) - _790;
    float _891 = abs(dot(vec3(_788, _789, _790), vec3(_709, _710, _711)));
    float _4079 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _893 = sqrt(_712);
    float _906 = exp2((_893 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_893 * 3.0));
    float _912 = (1.0 - _906) * ((_893 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _913 = _906 * _893;
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1250;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _975 = fma(_949, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941));
        float _979 = fma(_949, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941));
        float _983 = fma(_949, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941));
        float _1008 = _941 + _709;
        float _1009 = _945 + _710;
        float _1010 = _949 + _711;
        float _1020 = fma(_1010, cbModelParam._m0[26u].z, fma(_1009, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1008)) - _975;
        float _1021 = fma(_1010, cbModelParam._m0[27u].z, fma(_1009, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1008)) - _979;
        float _1022 = fma(_1010, cbModelParam._m0[28u].z, fma(_1009, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1008)) - _983;
        float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
        float _1039 = ((_1026 * _1020) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_975 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1026 * _1021) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_979 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1026 * _1022) / cbModelParam._m0[34u].z) + ((((((_983 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        float _1078 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1044.x + (-0.5));
        float _1080 = _1078 * (_1044.y + (-0.5));
        float _1081 = _1078 * (_1044.z + (-0.5));
        float _1088 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1051.x + (-0.5));
        float _1090 = _1088 * (_1051.y + (-0.5));
        float _1091 = _1088 * (_1051.z + (-0.5));
        float _1098 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1058.x + (-0.5));
        float _1100 = _1098 * (_1058.y + (-0.5));
        float _1101 = _1098 * (_1058.z + (-0.5));
        float _1108 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1065.x + (-0.5));
        float _1110 = _1108 * (_1065.y + (-0.5));
        float _1111 = _1108 * (_1065.z + (-0.5));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = _1079 * 0.5;
        float _1116 = _1089 * 0.5;
        float _1117 = _1099 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1132 = (dot(vec3(_709, _710, _711), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1142 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _4127 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1144 + 1.0))) + _1149) * _1112;
        float _1159 = _1080 * 0.5;
        float _1160 = _1090 * 0.5;
        float _1161 = _1100 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_709, _710, _711), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _4160 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1186 + 1.0))) + _1191) * _1113;
        float _1201 = _1081 * 0.5;
        float _1202 = _1091 * 0.5;
        float _1203 = _1101 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_709, _710, _711), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _4193 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1228 + 1.0))) + _1233) * _1114;
        _1250 = _1081;
        _1252 = _1080;
        _1253 = _1079;
        _1254 = _1091;
        _1255 = _1090;
        _1256 = _1089;
        _1257 = _1101;
        _1258 = _1100;
        _1259 = _1099;
        _1260 = _1114;
        _1261 = _1113;
        _1262 = _1112;
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
    }
    else
    {
        _1250 = _1251;
        _1252 = _1251;
        _1253 = _1251;
        _1254 = _1251;
        _1255 = _1251;
        _1256 = _1251;
        _1257 = _1251;
        _1258 = _1251;
        _1259 = _1251;
        _1260 = _1251;
        _1261 = _1251;
        _1262 = _1251;
        _1263 = 0.0;
        _1264 = 0.0;
        _1265 = 0.0;
    }
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1290 = fma(_949, cbModelParam._m0[30u].z, fma(_945, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _941));
        float _1294 = fma(_949, cbModelParam._m0[31u].z, fma(_945, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _941));
        float _1298 = fma(_949, cbModelParam._m0[32u].z, fma(_945, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _941));
        float _1321 = _941 + _709;
        float _1322 = _945 + _710;
        float _1323 = _949 + _711;
        float _1333 = fma(_1323, cbModelParam._m0[30u].z, fma(_1322, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1321)) - _1290;
        float _1334 = fma(_1323, cbModelParam._m0[31u].z, fma(_1322, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1321)) - _1294;
        float _1335 = fma(_1323, cbModelParam._m0[32u].z, fma(_1322, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1321)) - _1298;
        float _1339 = inversesqrt(dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335)));
        float _1352 = ((_1339 * _1333) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1290 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1339 * _1334) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1294 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1354 = ((_1339 * _1335) / cbModelParam._m0[35u].z) + ((((((_1298 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        float _1389 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1356.x + (-0.5));
        float _1391 = _1389 * (_1356.y + (-0.5));
        float _1392 = _1389 * (_1356.z + (-0.5));
        float _1399 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1363.x + (-0.5));
        float _1401 = _1399 * (_1363.y + (-0.5));
        float _1402 = _1399 * (_1363.z + (-0.5));
        float _1409 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1370.x + (-0.5));
        float _1411 = _1409 * (_1370.y + (-0.5));
        float _1412 = _1409 * (_1370.z + (-0.5));
        float _1419 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1377.x + (-0.5));
        float _1421 = _1419 * (_1377.y + (-0.5));
        float _1422 = _1419 * (_1377.z + (-0.5));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = _1390 * 0.5;
        float _1427 = _1400 * 0.5;
        float _1428 = _1410 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_709, _710, _711), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4256 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1453 + 1.0))) + _1458) * _1423;
        float _1468 = _1391 * 0.5;
        float _1469 = _1401 * 0.5;
        float _1470 = _1411 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_709, _710, _711), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4289 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1495 + 1.0))) + _1500) * _1424;
        float _1510 = _1392 * 0.5;
        float _1511 = _1402 * 0.5;
        float _1512 = _1412 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_709, _710, _711), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4322 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1537 + 1.0))) + _1542) * _1425;
        _1559 = _1392;
        _1560 = _1391;
        _1561 = _1390;
        _1562 = _1402;
        _1563 = _1401;
        _1564 = _1400;
        _1565 = _1412;
        _1566 = _1411;
        _1567 = _1410;
        _1568 = _1425;
        _1569 = _1424;
        _1570 = _1423;
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1572 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
        _1573 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
    }
    else
    {
        _1559 = _1251;
        _1560 = _1251;
        _1561 = _1251;
        _1562 = _1251;
        _1563 = _1251;
        _1564 = _1251;
        _1565 = _1251;
        _1566 = _1251;
        _1567 = _1251;
        _1568 = _1251;
        _1569 = _1251;
        _1570 = _1251;
        _1571 = 0.0;
        _1572 = 0.0;
        _1573 = 0.0;
    }
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1263)) + _1263;
    float _1584 = (cbModelParam._m0[1u].x * (_1572 - _1264)) + _1264;
    float _1585 = (cbModelParam._m0[1u].x * (_1573 - _1265)) + _1265;
    float _1606 = fma(_1585, cbSceneParam._m0[89u].z, fma(_1584, cbSceneParam._m0[89u].y, _1583 * cbSceneParam._m0[89u].x));
    float _1609 = fma(_1585, cbSceneParam._m0[90u].z, fma(_1584, cbSceneParam._m0[90u].y, _1583 * cbSceneParam._m0[90u].x));
    float _1612 = fma(_1585, cbSceneParam._m0[91u].z, fma(_1584, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1583));
    float _1627 = _885 * 0.5;
    float _1628 = _886 * 0.5;
    float _1629 = _887 * 0.5;
    float _1630 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1561, _1564, _1567, _1570));
    float _1633 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1560, _1563, _1566, _1569));
    float _1636 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1670;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1643 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1250, _1254, _1257, _1260));
        float _1647 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1252, _1255, _1258, _1261));
        float _1651 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1253, _1256, _1259, _1262));
        float _1658 = dot(vec4(cbModelParam._m0[39u]), vec4(_1627, _1628, _1629, 1.0));
        _1670 = dot(vec3(isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1658) ? 0.0 : (isnan(0.0) ? _1658 : max(0.0, _1658))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1670 = 1.0;
    }
    float _1681;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1672 = dot(vec4(cbModelParam._m0[40u]), vec4(_1627, _1628, _1629, 1.0));
        _1681 = dot(vec3(isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1672) ? 0.0 : (isnan(0.0) ? _1672 : max(0.0, _1672))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1681 = 1.0;
    }
    float _1685 = (_1681 * cbModelParam._m0[1u].x) + (_1670 * (1.0 - cbModelParam._m0[1u].x));
    float _1695 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _712);
    float _1696 = isnan(_1695) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1695 : min(cbModelParam._m0[25u].z, _1695));
    float _1777;
    float _1779;
    float _1781;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1744 = fma(_949, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941)) + cbModelParam._m0[13u].w;
        float _1748 = fma(_949, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941)) + cbModelParam._m0[14u].w;
        float _1752 = fma(_949, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941)) + cbModelParam._m0[15u].w;
        float _1755 = fma(_887, cbModelParam._m0[13u].z, fma(_886, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885));
        float _1758 = fma(_887, cbModelParam._m0[14u].z, fma(_886, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885));
        float _1761 = fma(_887, cbModelParam._m0[15u].z, fma(_886, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885));
        float _1789;
        if (_1755 > 0.0)
        {
            _1789 = abs((1.0 - _1744) / _1755);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1744 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1789 = frontier_phi_14_12_ladder;
        }
        float _1961;
        if (_1758 > 0.0)
        {
            _1961 = abs((1.0 - _1748) / _1758);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1748 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1961 = frontier_phi_23_19_ladder;
        }
        float _2257;
        if (_1761 > 0.0)
        {
            _2257 = abs((1.0 - _1752) / _1761);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1752 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2257 = frontier_phi_35_30_ladder;
        }
        float _2259 = isnan(_1961) ? _1789 : (isnan(_1789) ? _1961 : min(_1789, _1961));
        float _2260 = isnan(_2257) ? _2259 : (isnan(_2259) ? _2257 : min(_2259, _2257));
        float _2264 = (_2260 * _1755) + _1744;
        float _2265 = (_2260 * _1758) + _1748;
        float _2266 = (_2260 * _1761) + _1752;
        float _2267 = _2260 * 9.9999997473787516355514526367188e-05;
        float _2269 = (-1.0) - _2267;
        float _2271 = _2267 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2266 > _2271) || ((_2266 < _2269) || ((_2265 > _2271) || ((_2265 < _2269) || ((_2264 < _2269) || (_2264 > _2271))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2411 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2266, cbModelParam._m0[9u].z, fma(_2265, cbModelParam._m0[9u].y, _2264 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2266, cbModelParam._m0[10u].z, fma(_2265, cbModelParam._m0[10u].y, _2264 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2266, cbModelParam._m0[11u].z, fma(_2265, cbModelParam._m0[11u].y, _2264 * cbModelParam._m0[11u].x))), _1696);
            frontier_phi_13_35_ladder = _2411.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2411.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2411.x * cbModelParam._m0[1u].y;
        }
        _1777 = frontier_phi_13_35_ladder_2;
        _1779 = frontier_phi_13_35_ladder_1;
        _1781 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_885, _886, _887), _1696);
        _1777 = _1765.x * cbModelParam._m0[1u].y;
        _1779 = _1765.y * cbModelParam._m0[1u].y;
        _1781 = _1765.z * cbModelParam._m0[1u].y;
    }
    float _1785 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _712);
    float _1786 = isnan(_1785) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1785 : min(cbModelParam._m0[25u].w, _1785));
    float _1876;
    float _1878;
    float _1880;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1840 = fma(_949, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941)) + cbModelParam._m0[21u].w;
        float _1844 = fma(_949, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941)) + cbModelParam._m0[22u].w;
        float _1848 = fma(_949, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941)) + cbModelParam._m0[23u].w;
        float _1851 = fma(_887, cbModelParam._m0[21u].z, fma(_886, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885));
        float _1854 = fma(_887, cbModelParam._m0[22u].z, fma(_886, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885));
        float _1857 = fma(_887, cbModelParam._m0[23u].z, fma(_886, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885));
        float _1966;
        if (_1851 > 0.0)
        {
            _1966 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1966 = frontier_phi_25_21_ladder;
        }
        float _2284;
        if (_1854 > 0.0)
        {
            _2284 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2284 = frontier_phi_37_32_ladder;
        }
        float _2622;
        if (_1857 > 0.0)
        {
            _2622 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2622 = frontier_phi_47_44_ladder;
        }
        float _2624 = isnan(_2284) ? _1966 : (isnan(_1966) ? _2284 : min(_1966, _2284));
        float _2625 = isnan(_2622) ? _2624 : (isnan(_2624) ? _2622 : min(_2624, _2622));
        float _2629 = (_2625 * _1851) + _1840;
        float _2630 = (_2625 * _1854) + _1844;
        float _2631 = (_2625 * _1857) + _1848;
        float _2632 = _2625 * 9.9999997473787516355514526367188e-05;
        float _2633 = (-1.0) - _2632;
        float _2635 = _2632 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2631 > _2635) || ((_2631 < _2633) || ((_2630 > _2635) || ((_2630 < _2633) || ((_2629 < _2633) || (_2629 > _2635))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2631, cbModelParam._m0[17u].z, fma(_2630, cbModelParam._m0[17u].y, _2629 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2631, cbModelParam._m0[18u].z, fma(_2630, cbModelParam._m0[18u].y, _2629 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2631, cbModelParam._m0[19u].z, fma(_2630, cbModelParam._m0[19u].y, _2629 * cbModelParam._m0[19u].x))), _1786);
            frontier_phi_22_47_ladder = _2753.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2753.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2753.x * cbModelParam._m0[1u].z;
        }
        _1876 = frontier_phi_22_47_ladder_2;
        _1878 = frontier_phi_22_47_ladder_1;
        _1880 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1860 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_885, _886, _887), _1786);
        _1876 = _1860.x * cbModelParam._m0[1u].z;
        _1878 = _1860.y * cbModelParam._m0[1u].z;
        _1880 = _1860.z * cbModelParam._m0[1u].z;
    }
    float _1893 = (((_912 * _861) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1876 - _1777)) + _1777);
    float _1895 = (((_912 * _863) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1878 - _1779)) + _1779);
    float _1897 = (((_912 * _864) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1880 - _1781)) + _1781);
    float _1900 = fma(_1897, cbSceneParam._m0[89u].z, fma(_1895, cbSceneParam._m0[89u].y, _1893 * cbSceneParam._m0[89u].x));
    float _1903 = fma(_1897, cbSceneParam._m0[90u].z, fma(_1895, cbSceneParam._m0[90u].y, _1893 * cbSceneParam._m0[90u].x));
    float _1906 = fma(_1897, cbSceneParam._m0[91u].z, fma(_1895, cbSceneParam._m0[91u].y, _1893 * cbSceneParam._m0[91u].x));
    float _1940 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1944 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1948 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1952 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1953 = _1940 / _1952;
    float _1954 = _1944 / _1952;
    float _1955 = _1948 / _1952;
    float _2102;
    float _2103;
    float _2104;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1982 = ((uint(_1955 > cbSceneParam._m0[59u].y) + uint(_1955 > cbSceneParam._m0[59u].x)) + uint(_1955 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1983 = _1982 + 43u;
        uint _1991 = _1982 + 44u;
        uint _1999 = _1982 + 45u;
        uint _2007 = _1982 + 46u;
        float _2018 = fma(_1952, cbSceneParam._m0[_1983].w, fma(_1948, cbSceneParam._m0[_1983].z, fma(_1944, cbSceneParam._m0[_1983].y, _1940 * cbSceneParam._m0[_1983].x)));
        float _2022 = fma(_1952, cbSceneParam._m0[_1991].w, fma(_1948, cbSceneParam._m0[_1991].z, fma(_1944, cbSceneParam._m0[_1991].y, _1940 * cbSceneParam._m0[_1991].x)));
        float _2030 = fma(_1952, cbSceneParam._m0[_2007].w, fma(_1948, cbSceneParam._m0[_2007].z, fma(_1944, cbSceneParam._m0[_2007].y, _1940 * cbSceneParam._m0[_2007].x)));
        float _2035 = cbSceneParam._m0[33u].z * _2030;
        float _2037 = cbSceneParam._m0[33u].w * _2030;
        float _2040 = fma(_1952, cbSceneParam._m0[_1999].w, fma(_1948, cbSceneParam._m0[_1999].z, fma(_1944, cbSceneParam._m0[_1999].y, _1940 * cbSceneParam._m0[_1999].x))) / _2030;
        float _2088 = (cbSceneParam._m0[33u].x - sqrt(((_1954 * _1954) + (_1953 * _1953)) + (_1955 * _1955))) * cbSceneParam._m0[33u].y;
        float _4448 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2095 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2035 + _2018) / _2030, (_2037 + _2022) / _2030), _2040), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2037 + _2018) / _2030, (_2022 - _2035) / _2030), _2040), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2018 - _2035) / _2030, (_2022 - _2037) / _2030), _2040), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2018 - _2037) / _2030, (_2035 + _2022) / _2030), _2040), 0.0)).x), vec4(0.25)));
        _2102 = 1.0 - (_2095 * cbSceneParam._m0[34u].x);
        _2103 = 1.0 - (_2095 * cbSceneParam._m0[34u].y);
        _2104 = 1.0 - (_2095 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2102 = 1.0;
        _2103 = 1.0;
        _2104 = 1.0;
    }
    float _2168;
    float _2170;
    float _2172;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2156 = fma(_1952, cbSceneParam._m0[63u].w, fma(_1948, cbSceneParam._m0[63u].z, fma(_1944, cbSceneParam._m0[63u].y, _1940 * cbSceneParam._m0[63u].x)));
        float _2157 = fma(_1952, cbSceneParam._m0[60u].w, fma(_1948, cbSceneParam._m0[60u].z, fma(_1944, cbSceneParam._m0[60u].y, _1940 * cbSceneParam._m0[60u].x))) / _2156;
        float _2158 = fma(_1952, cbSceneParam._m0[61u].w, fma(_1948, cbSceneParam._m0[61u].z, fma(_1944, cbSceneParam._m0[61u].y, _1940 * cbSceneParam._m0[61u].x))) / _2156;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2157 >= cbSceneParam._m0[64u].x) && (_2158 >= cbSceneParam._m0[64u].y)) && (_2157 <= cbSceneParam._m0[64u].z)) && (_2158 <= cbSceneParam._m0[64u].w))
        {
            float _2297 = fma(_1952, cbSceneParam._m0[62u].w, fma(_1948, cbSceneParam._m0[62u].z, fma(_1944, cbSceneParam._m0[62u].y, _1940 * cbSceneParam._m0[62u].x))) / _2156;
            float _2301 = isnan(cbSceneParam._m0[41u].w) ? _2297 : (isnan(_2297) ? cbSceneParam._m0[41u].w : max(_2297, cbSceneParam._m0[41u].w));
            float _2344 = (cbSceneParam._m0[33u].x - sqrt(((_1954 * _1954) + (_1953 * _1953)) + (_1955 * _1955))) * cbSceneParam._m0[33u].y;
            float _4464 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
            float _2351 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2157, cbSceneParam._m0[33u].w + _2158), _2301), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2157, _2158 - cbSceneParam._m0[33u].z), _2301), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2157 - cbSceneParam._m0[33u].z, _2158 - cbSceneParam._m0[33u].w), _2301), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2157 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2158), _2301), 0.0)).x), vec4(0.25)));
            float _2355 = 1.0 - (_2351 * cbSceneParam._m0[34u].x);
            float _2356 = 1.0 - (_2351 * cbSceneParam._m0[34u].y);
            float _2357 = 1.0 - (_2351 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2357) ? _2104 : (isnan(_2104) ? _2357 : min(_2104, _2357));
            frontier_phi_34_33_ladder_1 = isnan(_2356) ? _2103 : (isnan(_2103) ? _2356 : min(_2103, _2356));
            frontier_phi_34_33_ladder_2 = isnan(_2355) ? _2102 : (isnan(_2102) ? _2355 : min(_2102, _2355));
        }
        else
        {
            frontier_phi_34_33_ladder = _2104;
            frontier_phi_34_33_ladder_1 = _2103;
            frontier_phi_34_33_ladder_2 = _2102;
        }
        _2168 = frontier_phi_34_33_ladder_2;
        _2170 = frontier_phi_34_33_ladder_1;
        _2172 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2168 = _2102;
        _2170 = _2103;
        _2172 = _2104;
    }
    uvec4 _2177 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2179 = _2177.x * 14u;
    uint _2180 = _2179 + 13u;
    float _2187 = _877 + (-1.0);
    float _2192 = (cbLight._m0[_2180].x * _2187) + 1.0;
    float _2193 = (cbLight._m0[_2180].y * _2187) + 1.0;
    float _2194 = (cbLight._m0[_2180].z * _2187) + 1.0;
    float _2195 = (cbLight._m0[_2180].w * _2187) + 1.0;
    uint _2196 = _2179 + 5u;
    float _2202 = isnan(1.0) ? _2193 : (isnan(_2193) ? 1.0 : min(_2193, 1.0));
    uint _2206 = _2179 + 4u;
    float _2216 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
    uint _2220 = _2179 | 1u;
    float _2231 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_709, _710, _711));
    float _2234 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_709, _710, _711));
    float _4500 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _4511 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2239 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * 0.3183098733425140380859375;
    float _2241 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * 0.3183098733425140380859375;
    float _2248 = ((cbLight._m0[_2196].x * _2202) * _2241) + (((cbLight._m0[_2206].x * _2168) * _2216) * _2239);
    float _2249 = ((_2202 * cbLight._m0[_2196].y) * _2241) + (((cbLight._m0[_2206].y * _2170) * _2216) * _2239);
    float _2250 = ((_2202 * cbLight._m0[_2196].z) * _2241) + (((cbLight._m0[_2206].z * _2172) * _2216) * _2239);
    uvec4 _2254 = floatBitsToUint(cbLight._m0[_2179 + 12u]);
    bool _2256 = _2254.x == 0u;
    float _2358;
    float _2360;
    float _2362;
    if (_2256)
    {
        _2358 = _2248;
        _2360 = _2249;
        _2362 = _2250;
    }
    else
    {
        uint _2366 = _2179 + 6u;
        float _2382 = (dot(vec3(cbLight._m0[_2179 + 2u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2383 = _2382 * _2382;
        float _4522 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2384 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2385 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
        _2358 = (((cbLight._m0[_2366].x * 0.3183098733425140380859375) * _2384) * _2385) + _2248;
        _2360 = (((cbLight._m0[_2366].y * 0.3183098733425140380859375) * _2384) * _2385) + _2249;
        _2362 = (((cbLight._m0[_2366].z * 0.3183098733425140380859375) * _2384) * _2385) + _2250;
    }
    bool _2365 = _2254.y == 0u;
    float _2420;
    float _2422;
    float _2424;
    if (_2365)
    {
        _2420 = _2358;
        _2422 = _2360;
        _2424 = _2362;
    }
    else
    {
        uint _2593 = _2179 + 7u;
        float _2609 = (dot(vec3(cbLight._m0[_2179 + 3u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2610 = _2609 * _2609;
        float _4538 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2611 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2612 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
        _2420 = (((cbLight._m0[_2593].x * 0.3183098733425140380859375) * _2611) * _2612) + _2358;
        _2422 = (((cbLight._m0[_2593].y * 0.3183098733425140380859375) * _2611) * _2612) + _2360;
        _2424 = (((cbLight._m0[_2593].z * 0.3183098733425140380859375) * _2611) * _2612) + _2362;
    }
    uint _2427 = _2179 + 8u;
    float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2179].w)) * _712) * 0.949999988079071044921875);
    float _2441 = _2440 * _2440;
    float _2442 = cbLight._m0[_2179].x + _788;
    float _2443 = cbLight._m0[_2179].y + _789;
    float _2444 = cbLight._m0[_2179].z + _790;
    float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
    float _2449 = _2448 * _2442;
    float _2450 = _2448 * _2443;
    float _2451 = _2448 * _2444;
    float _2452 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2179].xyz));
    float _4554 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _4565 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _2456 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2457 = dot(vec3(_709, _710, _711), vec3(_2449, _2450, _2451));
    float _4576 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2461 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2449, _2450, _2451));
    float _4587 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2465 = _2441 * _2441;
    float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
    float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
    float _2478 = 0.959999978542327880859375 - _858;
    float _2480 = 0.959999978542327880859375 - _859;
    float _2481 = 0.959999978542327880859375 - _860;
    float _2488 = 1.0 - _2441;
    float _2499 = (0.5 / (((_2456 * ((_2455 * _2488) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2488) + _2441) * _2455))) * _2455;
    float _4598 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2501 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
    uint _2515 = _2179 + 9u;
    float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2220].w)) * _712) * 0.949999988079071044921875);
    float _2527 = _2526 * _2526;
    float _2528 = cbLight._m0[_2220].x + _788;
    float _2529 = cbLight._m0[_2220].y + _789;
    float _2530 = cbLight._m0[_2220].z + _790;
    float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
    float _2535 = _2534 * _2528;
    float _2536 = _2534 * _2529;
    float _2537 = _2534 * _2530;
    float _2538 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2220].xyz));
    float _4609 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2542 = dot(vec3(_709, _710, _711), vec3(_2535, _2536, _2537));
    float _4620 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2545 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2546 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_2535, _2536, _2537));
    float _4631 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2550 = _2527 * _2527;
    float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
    float _2561 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
    float _2568 = 1.0 - _2527;
    float _2578 = (0.5 / (((_2456 * ((_2541 * _2568) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2568) + _2527) * _2541))) * _2541;
    float _4642 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2580 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
    float _2590 = (((((_2561 * _2478) + _861) * cbLight._m0[_2515].x) * _2580) * _2202) + ((((cbLight._m0[_2427].x * _2168) * ((_2477 * _2478) + _861)) * _2501) * _2216);
    float _2591 = (((((_2561 * _2480) + _863) * cbLight._m0[_2515].y) * _2580) * _2202) + ((((cbLight._m0[_2427].y * _2170) * ((_2477 * _2480) + _863)) * _2501) * _2216);
    float _2592 = (((((_2561 * _2481) + _864) * cbLight._m0[_2515].z) * _2580) * _2202) + ((((cbLight._m0[_2427].z * _2172) * ((_2477 * _2481) + _864)) * _2501) * _2216);
    float _2648;
    float _2650;
    float _2652;
    if (_2256)
    {
        _2648 = _2590;
        _2650 = _2591;
        _2652 = _2592;
    }
    else
    {
        uint _2654 = _2179 + 2u;
        uint _2658 = _2179 + 10u;
        float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2654].w)) * _712) * 0.949999988079071044921875);
        float _2673 = _2672 * _2672;
        float _2674 = cbLight._m0[_2654].x + _788;
        float _2675 = cbLight._m0[_2654].y + _789;
        float _2676 = cbLight._m0[_2654].z + _790;
        float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
        float _2681 = _2680 * _2674;
        float _2682 = _2680 * _2675;
        float _2683 = _2680 * _2676;
        float _2684 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2654].xyz));
        float _4653 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2688 = dot(vec3(_709, _710, _711), vec3(_2681, _2682, _2683));
        float _4664 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2692 = dot(vec3(cbLight._m0[_2654].xyz), vec3(_2681, _2682, _2683));
        float _4675 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2696 = _2673 * _2673;
        float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
        float _2707 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
        float _2714 = 1.0 - _2673;
        float _2724 = (0.5 / (((_2456 * ((_2687 * _2714) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2714) + _2673) * _2687))) * _2687;
        float _4686 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2726 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
        float _2727 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
        _2648 = (((((_2707 * _2478) + _861) * cbLight._m0[_2658].x) * _2726) * _2727) + _2590;
        _2650 = (((((_2707 * _2480) + _863) * cbLight._m0[_2658].y) * _2726) * _2727) + _2591;
        _2652 = (((((_2707 * _2481) + _864) * cbLight._m0[_2658].z) * _2726) * _2727) + _2592;
    }
    float _2758;
    float _2760;
    float _2762;
    if (_2365)
    {
        _2758 = _2648;
        _2760 = _2650;
        _2762 = _2652;
    }
    else
    {
        uint _2769 = _2179 + 3u;
        uint _2773 = _2179 + 11u;
        float _2787 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2769].w)) * _712) * 0.949999988079071044921875);
        float _2788 = _2787 * _2787;
        float _2789 = cbLight._m0[_2769].x + _788;
        float _2790 = cbLight._m0[_2769].y + _789;
        float _2791 = cbLight._m0[_2769].z + _790;
        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
        float _2796 = _2795 * _2789;
        float _2797 = _2795 * _2790;
        float _2798 = _2795 * _2791;
        float _2799 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2769].xyz));
        float _4702 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2802 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2803 = dot(vec3(_709, _710, _711), vec3(_2796, _2797, _2798));
        float _4713 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2807 = dot(vec3(cbLight._m0[_2769].xyz), vec3(_2796, _2797, _2798));
        float _4724 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2811 = _2788 * _2788;
        float _2815 = ((_2806 * _2806) * (_2811 + (-1.0))) + 1.0;
        float _2822 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
        float _2829 = 1.0 - _2788;
        float _2839 = (0.5 / (((_2456 * ((_2802 * _2829) + _2788)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2829) + _2788) * _2802))) * _2802;
        float _4735 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2841 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2811 / ((_2815 * _2815) * 3.141590118408203125));
        float _2842 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
        _2758 = (((((_2822 * _2478) + _861) * cbLight._m0[_2773].x) * _2841) * _2842) + _2648;
        _2760 = (((((_2822 * _2480) + _863) * cbLight._m0[_2773].y) * _2841) * _2842) + _2650;
        _2762 = (((((_2822 * _2481) + _864) * cbLight._m0[_2773].z) * _2841) * _2842) + _2652;
    }
    float _2908;
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    if (_2177.y == 0u)
    {
        uvec4 _2863 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2864 = _2863.x;
        uint _2875 = uint((float(_2863.y) * floor(float(uint(cbSceneParam._m0[85u].y * _797) / _2864))) + floor(float(uint(cbSceneParam._m0[85u].x * _796) / _2864)));
        float _2885 = (log2(_1955 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2886 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        uint _2889 = uint(isnan(14.0) ? _2886 : (isnan(_2886) ? 14.0 : min(_2886, 14.0)));
        uvec4 _2894 = texelFetch(g_lightClusterGridBuffer, int(((_2889 << 2u) + (_2875 << 6u)) >> 2u));
        uint _2895 = _2894.x;
        uint _2896 = _2863.z;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        if (((((1u << ((_2896 >> 4u) & 15u)) + 4294967295u) & _2895) == 0u) || ((_2896 & 240u) == 0u))
        {
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
        }
        else
        {
            float _2976;
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            uint _3125 = 0u;
            uint _3134;
            bool _3135;
            for (;;)
            {
                _3134 = texelFetch(g_lightClassification, int((((_2889 << 5u) + (_2875 << 9u)) + (_3125 << 2u)) >> 2u)).x;
                _3135 = _3134 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3135)
                {
                    frontier_phi_66_pred = _3124;
                    frontier_phi_66_pred_1 = _3123;
                    frontier_phi_66_pred_2 = _3122;
                    frontier_phi_66_pred_3 = _3121;
                    frontier_phi_66_pred_4 = _3120;
                    frontier_phi_66_pred_5 = _3119;
                }
                else
                {
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    uint _3249;
                    _3243 = _3119;
                    _3244 = _3120;
                    _3245 = _3121;
                    _3246 = _3122;
                    _3247 = _3123;
                    _3248 = _3124;
                    _3249 = _3134;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    for (;;)
                    {
                        uint _3253 = uint(findLSB(_3249)) + (_3125 << 5u);
                        uint _3250 = (_3249 + 4294967295u) & _3249;
                        uint _3255 = _3253 * 48u;
                        vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 3u)).x));
                        uint _3275 = (_3253 * 48u) + 4u;
                        vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 3u)).x));
                        uint _3294 = (_3253 * 48u) + 8u;
                        vec3 _3305 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x));
                        float _3309 = _3269.x - _1953;
                        float _3310 = _3269.y - _1954;
                        float _3311 = _3269.z - _1955;
                        float _3312 = dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311));
                        float _3315 = inversesqrt(_3312);
                        float _3316 = _3315 * _3309;
                        float _3317 = _3315 * _3310;
                        float _3318 = _3315 * _3311;
                        float _3319 = dot(vec3(_818, _821, _824), vec3(_3316, _3317, _3318));
                        float _3324 = 1.0 - (_3312 * _3269.w);
                        float _4761 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3325 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3326 = sqrt(_3312) * _3288.w;
                        float _3329 = 1.39999997615814208984375 / (_3326 + 1.39999997615814208984375);
                        float _3330 = _3329 * _3329;
                        float _3333 = ((1.0 - _3330) * _3319) + _3330;
                        float _3336 = _3326 * _3326;
                        float _3340 = ((isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0))) * _3325) / ((_3336 * 0.699999988079071044921875) + 1.0);
                        float _3344 = (-0.0) - _1953;
                        float _3345 = (-0.0) - _1954;
                        float _3346 = (-0.0) - _1955;
                        float _3350 = inversesqrt(dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346)));
                        float _3351 = _3350 * _3344;
                        float _3352 = _3350 * _3345;
                        float _3353 = _3350 * _3346;
                        float _3360 = exp2(log2(1.0 / ((_3336 * 3.5) + 5.0)) * 0.25);
                        float _3361 = 1.0 - _893;
                        float _3368 = sqrt(1.0 - ((1.0 - (_3361 * _3361)) * (1.0 - (_3360 * _3360))));
                        float _3369 = _3368 * _3368;
                        float _3370 = _3369 * _3369;
                        float _3371 = _3351 + _3316;
                        float _3372 = _3352 + _3317;
                        float _3373 = _3353 + _3318;
                        float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                        float _3381 = dot(vec3(_818, _821, _824), vec3(_3351, _3352, _3353));
                        float _4777 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3384 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3385 = dot(vec3(_818, _821, _824), vec3(_3377 * _3371, _3377 * _3372, _3377 * _3373));
                        float _4788 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3388 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3392 = ((_3388 * _3388) * (_3370 + (-1.0))) + 1.0;
                        float _3393 = _3329 * _3369;
                        float _3394 = _3393 * _3393;
                        float _3397 = ((1.0 - _3394) * _3319) + _3394;
                        float _4799 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3398 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3399 = 1.0 - _3369;
                        float _3409 = (0.5 / (((_3398 * ((_3384 * _3399) + _3369)) + 9.9999999392252902907785028219223e-09) + (((_3398 * _3399) + _3369) * _3384))) * _3398;
                        float _4810 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3420 = (((_3370 * 3.1415927410125732421875) * (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) / ((_3392 * _3392) * ((_3336 * 2.1991131305694580078125) + 3.141590118408203125))) * _3325;
                        _3178 = (_3340 * _3288.x) + _3246;
                        _3179 = (_3340 * _3288.y) + _3247;
                        _3180 = (_3340 * _3288.z) + _3248;
                        _3175 = (_3420 * _3305.x) + _3243;
                        _3176 = (_3420 * _3305.y) + _3244;
                        _3177 = (_3420 * _3305.z) + _3245;
                        if (_3250 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3243 = _3175;
                            _3244 = _3176;
                            _3245 = _3177;
                            _3246 = _3178;
                            _3247 = _3179;
                            _3248 = _3180;
                            _3249 = _3250;
                        }
                    }
                    frontier_phi_66_pred = _3180;
                    frontier_phi_66_pred_1 = _3179;
                    frontier_phi_66_pred_2 = _3178;
                    frontier_phi_66_pred_3 = _3177;
                    frontier_phi_66_pred_4 = _3176;
                    frontier_phi_66_pred_5 = _3175;
                }
                _2986 = frontier_phi_66_pred;
                _2984 = frontier_phi_66_pred_1;
                _2982 = frontier_phi_66_pred_2;
                _2980 = frontier_phi_66_pred_3;
                _2978 = frontier_phi_66_pred_4;
                _2976 = frontier_phi_66_pred_5;
                uint _3126 = _3125 + 1u;
                if (_3126 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3119 = _2976;
                    _3120 = _2978;
                    _3121 = _2980;
                    _3122 = _2982;
                    _3123 = _2984;
                    _3124 = _2986;
                    _3125 = _3126;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
        }
        uvec4 _2989 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2990 = _2989.z;
        uint _2992 = (_2990 >> 8u) & 15u;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        if (((4294967295u << _2992) & _2895) == 0u)
        {
            _3087 = _2975;
            _3089 = _2977;
            _3091 = _2979;
            _3093 = _2981;
            _3095 = _2983;
            _3097 = _2985;
        }
        else
        {
            float _3112 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
            float _3113 = _3112 * _1953;
            float _3114 = _3112 * _1954;
            float _3115 = _3112 * _1955;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2992 < ((_2990 >> 12u) & 15u))
            {
                float _3088;
                float _3090;
                float _3092;
                float _3094;
                float _3096;
                float _3098;
                float _3226 = _2975;
                float _3227 = _2977;
                float _3228 = _2979;
                float _3229 = _2981;
                float _3230 = _2983;
                float _3231 = _2985;
                uint _3232 = _2992;
                uint _3241;
                bool _3242;
                for (;;)
                {
                    _3241 = texelFetch(g_lightClassification, int((((_2889 << 5u) + (_2875 << 9u)) + (_3232 << 2u)) >> 2u)).x;
                    _3242 = _3241 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3242)
                    {
                        frontier_phi_72_pred = _3231;
                        frontier_phi_72_pred_1 = _3230;
                        frontier_phi_72_pred_2 = _3229;
                        frontier_phi_72_pred_3 = _3228;
                        frontier_phi_72_pred_4 = _3227;
                        frontier_phi_72_pred_5 = _3226;
                    }
                    else
                    {
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3438 = _3226;
                        float _3439 = _3227;
                        float _3440 = _3228;
                        float _3441 = _3229;
                        float _3442 = _3230;
                        float _3443 = _3231;
                        uint _3444 = _3241;
                        uint _3445;
                        vec4 _3470;
                        float _3471;
                        vec4 _3486;
                        vec3 _3498;
                        vec4 _3513;
                        vec4 _3528;
                        float _3574;
                        bool _3575;
                        for (;;)
                        {
                            uint _3455 = ((_3232 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3444));
                            _3445 = (_3444 + 4294967295u) & _3444;
                            uint _3457 = _3455 * 40u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            _3471 = _3470.w;
                            uint _3473 = (_3455 * 40u) + 4u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3488 = (_3455 * 40u) + 8u;
                            _3498 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x));
                            uint _3500 = (_3455 * 40u) + 16u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3455 * 40u) + 20u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3455 * 40u) + 24u;
                            vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3549 = (_3455 * 40u) + 28u;
                            vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            _3574 = fma(_1955, _3562.z, fma(_1954, _3562.y, _3562.x * _1953)) + _3562.w;
                            _3575 = !((fma(_1955, _3543.z, fma(_1954, _3543.y, _3543.x * _1953)) + _3543.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3575)
                            {
                                float _3602 = _3470.x - _1953;
                                float _3603 = _3470.y - _1954;
                                float _3604 = _3470.z - _1955;
                                float _3605 = dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604));
                                float _3608 = inversesqrt(_3605);
                                float _3609 = _3608 * _3602;
                                float _3610 = _3608 * _3603;
                                float _3611 = _3608 * _3604;
                                float _3615 = 1.0 - (_3605 / (_3471 * _3471));
                                float _4821 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3620 = sqrt(_3605) * _3486.w;
                                float _3622 = 1.39999997615814208984375 / (_3620 + 1.39999997615814208984375);
                                float _3623 = _3622 * _3622;
                                float _3626 = ((1.0 - _3623) * dot(vec3(_3609, _3610, _3611), vec3(_818, _821, _824))) + _3623;
                                float _3629 = _3620 * _3620;
                                float _3633 = (fma(_1955, _3513.z, fma(_1954, _3513.y, _3513.x * _1953)) + _3513.w) / _3574;
                                float _3634 = (fma(_1955, _3528.z, fma(_1954, _3528.y, _3528.x * _1953)) + _3528.w) / _3574;
                                float _3638 = 1.0 - dot(vec2(_3633, _3634), vec2(_3633, _3634));
                                float _4837 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3640 = _3639 * (((isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0))) * _3616) / ((_3629 * 0.699999988079071044921875) + 1.0));
                                float _3652 = exp2(log2(1.0 / ((_3629 * 3.5) + 5.0)) * 0.25);
                                float _3653 = 1.0 - _893;
                                float _3660 = sqrt(1.0 - ((1.0 - (_3653 * _3653)) * (1.0 - (_3652 * _3652))));
                                float _3661 = _3660 * _3660;
                                float _3662 = _3661 * _3661;
                                float _3663 = _3609 - _3113;
                                float _3664 = _3610 - _3114;
                                float _3665 = _3611 - _3115;
                                float _3669 = inversesqrt(dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665)));
                                float _3673 = dot(vec3(_818, _821, _824), vec3((-0.0) - _3113, (-0.0) - _3114, (-0.0) - _3115));
                                float _4848 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3676 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3677 = dot(vec3(_818, _821, _824), vec3(_3669 * _3663, _3669 * _3664, _3669 * _3665));
                                float _4859 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3680 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3684 = ((_3680 * _3680) * (_3662 + (-1.0))) + 1.0;
                                float _3685 = _3622 * _3661;
                                float _3686 = _3685 * _3685;
                                float _3692 = ((1.0 - _3686) * dot(vec3(_818, _821, _824), vec3(_3609, _3610, _3611))) + _3686;
                                float _4870 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3694 = 1.0 - _3661;
                                float _3704 = (0.5 / (((_3693 * ((_3676 * _3694) + _3661)) + 9.9999999392252902907785028219223e-09) + (((_3693 * _3694) + _3661) * _3676))) * _3693;
                                float _4881 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3714 = (_3639 * _3616) * (((_3662 * 3.1415927410125732421875) * (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) / ((_3684 * _3684) * ((_3629 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3640 * _3486.y;
                                frontier_phi_78_pred_1 = _3640 * _3486.x;
                                frontier_phi_78_pred_2 = _3714 * _3498.z;
                                frontier_phi_78_pred_3 = _3714 * _3498.y;
                                frontier_phi_78_pred_4 = _3714 * _3498.x;
                                frontier_phi_78_pred_5 = _3640 * _3486.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3722 = frontier_phi_78_pred;
                            _3721 = frontier_phi_78_pred_1;
                            _3720 = frontier_phi_78_pred_2;
                            _3719 = frontier_phi_78_pred_3;
                            _3718 = frontier_phi_78_pred_4;
                            _3723 = frontier_phi_78_pred_5;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            _3430 = _3723 + _3443;
                            _3425 = _3718 + _3438;
                            _3426 = _3719 + _3439;
                            _3427 = _3720 + _3440;
                            if (_3445 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3445;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3430;
                        frontier_phi_72_pred_1 = _3429;
                        frontier_phi_72_pred_2 = _3428;
                        frontier_phi_72_pred_3 = _3427;
                        frontier_phi_72_pred_4 = _3426;
                        frontier_phi_72_pred_5 = _3425;
                    }
                    _3098 = frontier_phi_72_pred;
                    _3096 = frontier_phi_72_pred_1;
                    _3094 = frontier_phi_72_pred_2;
                    _3092 = frontier_phi_72_pred_3;
                    _3090 = frontier_phi_72_pred_4;
                    _3088 = frontier_phi_72_pred_5;
                    uint _3233 = _3232 + 1u;
                    if (_3233 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3226 = _3088;
                        _3227 = _3090;
                        _3228 = _3092;
                        _3229 = _3094;
                        _3230 = _3096;
                        _3231 = _3098;
                        _3232 = _3233;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3098;
                frontier_phi_60_61_ladder_1 = _3096;
                frontier_phi_60_61_ladder_2 = _3092;
                frontier_phi_60_61_ladder_3 = _3090;
                frontier_phi_60_61_ladder_4 = _3088;
                frontier_phi_60_61_ladder_5 = _3094;
            }
            else
            {
                frontier_phi_60_61_ladder = _2985;
                frontier_phi_60_61_ladder_1 = _2983;
                frontier_phi_60_61_ladder_2 = _2979;
                frontier_phi_60_61_ladder_3 = _2977;
                frontier_phi_60_61_ladder_4 = _2975;
                frontier_phi_60_61_ladder_5 = _2981;
            }
            _3087 = frontier_phi_60_61_ladder_4;
            _3089 = frontier_phi_60_61_ladder_3;
            _3091 = frontier_phi_60_61_ladder_2;
            _3093 = frontier_phi_60_61_ladder_5;
            _3095 = frontier_phi_60_61_ladder_1;
            _3097 = frontier_phi_60_61_ladder;
        }
        float _3102 = isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0));
        _2908 = (_3102 * _3093) + _2420;
        _2910 = (_3102 * _3095) + _2422;
        _2912 = (_3102 * _3097) + _2424;
        _2914 = ((_3087 * _861) * _3102) + _2758;
        _2916 = ((_3089 * _863) * _3102) + _2760;
        _2918 = ((_3091 * _864) * _3102) + _2762;
    }
    else
    {
        _2908 = _2420;
        _2910 = _2422;
        _2912 = _2424;
        _2914 = _2758;
        _2916 = _2760;
        _2918 = _2762;
    }
    float _4897 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4908 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4919 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    uint _2938 = _269 + 6u;
    float _2946 = _796 / cbSceneParam._m0[86u].x;
    float _2947 = _797 / cbSceneParam._m0[86u].y;
    vec4 _2961 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2946, _2947, (log2((isnan(cbSceneParam._m0[77u].w) ? _731 : (isnan(_731) ? cbSceneParam._m0[77u].w : min(_731, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2963 = _2961.x;
    float _2964 = _2961.y;
    float _2965 = _2961.z;
    float _2966 = _2961.w;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    if (_731 > cbSceneParam._m0[78u].w)
    {
        float _3000 = isnan(_731) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _731 : min(cbSceneParam._m0[80u].w, _731));
        float _3001 = _3000 / _731;
        float _3012 = _3001 * _781;
        float _3013 = _782 * _3001;
        float _3014 = (-0.0) - _3013;
        float _3015 = _3001 * _783;
        float _3017 = (cbSceneParam._m0[77u].w * _3014) / _3000;
        float _3018 = _3017 + cbSceneParam._m0[79u].w;
        float _3019 = cbSceneParam._m0[79u].w - _3013;
        float _3025 = sqrt(((_3012 * _3012) + (_3013 * _3013)) + (_3015 * _3015));
        float _3028 = (1.0 - (cbSceneParam._m0[77u].w / _3000)) * _3025;
        float _3033 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3035 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3188;
        if (abs((_3014 - _3017) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3188 = ((((_3018 > 0.0) ? exp2(_3033 * _3018) : (2.0 - exp2(_3035 * _3018))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3028;
        }
        else
        {
            float _3148 = 1.0 / cbSceneParam._m0[80u].x;
            float _3149 = isnan(_3019) ? _3018 : (isnan(_3018) ? _3019 : max(_3018, _3019));
            float _3150 = isnan(_3019) ? _3018 : (isnan(_3018) ? _3019 : min(_3018, _3019));
            float _3159 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : min(_3149, 0.0));
            float _3160 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : min(_3150, 0.0));
            _3188 = ((abs(_3025 / _3014) * cbSceneParam._m0[80u].y) * ((((_3159 - _3160) * 2.0) - ((exp2(_3033 * (isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0)))) - exp2(_3033 * (isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0))))) * _3148)) - ((exp2(_3035 * _3159) - exp2(_3035 * _3160)) * _3148))) + (_3028 * cbSceneParam._m0[80u].z);
        }
        vec4 _3190 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2946, _2947, 1.0), 0.0);
        float _3199 = exp2((_3188 * (-1.44269502162933349609375)) * (1.0 - _3190.w));
        float _3200 = log2(_3199);
        float _3216 = log2(_2966);
        _3037 = (exp2(_3216 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].x)) * _3190.x) / cbSceneParam._m0[78u].x)) + _2963;
        _3039 = (exp2(_3216 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].y)) * _3190.y) / cbSceneParam._m0[78u].y)) + _2964;
        _3041 = (exp2(_3216 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].z)) * _3190.z) / cbSceneParam._m0[78u].z)) + _2965;
        _3043 = _3199 * _2966;
    }
    else
    {
        _3037 = _2963;
        _3039 = _2964;
        _3041 = _2965;
        _3043 = _2966;
    }
    float _3055 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3056 = _3055 == 3.0;
    float _3057 = log2(_3043);
    float _3064 = exp2(_3057 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2908 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _877))) + ((_2914 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1685)) * cbPerFrame._m0[3u].x));
    float _3065 = exp2(_3057 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2910 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _877))) + ((_2916 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1685)) * cbPerFrame._m0[3u].x));
    float _3066 = exp2(_3057 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2912 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _877))) + ((_2918 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1685)) * cbPerFrame._m0[3u].x));
    float _3075 = (_3055 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3075 * (_3056 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3037)));
    SV_Target.y = _3075 * (_3056 ? _3065 : (_3065 + (cbSceneParam._m0[72u].w * _3039)));
    SV_Target.z = _3075 * (_3056 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3041)));
    SV_Target.w = cbInstanceData._m0[_2938].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2938].w;
}


