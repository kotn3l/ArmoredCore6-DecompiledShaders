#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1174;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _358 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _358) * cbMtdParam._m0[24u].y) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3785 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _383 = (_376 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _384 = (_376 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _385 = (_376 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    float _433 = ((_403.z - _424) * _376) + _424;
    float _436 = ((((_403.x - _422) * _376) + _422) * 2.0) + (-1.0);
    float _438 = ((((_403.y - _423) * _376) + _423) * 2.0) + (-1.0);
    float _439 = dot(vec2(_436, _438), vec2(_436, _438));
    float _3796 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _444 = sqrt(1.0 - (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))));
    vec4 _460 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _487 = _485.x;
    float _488 = 1.0 - _487;
    float _501 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_487 - _488) * cbMtdParam._m0[24u].z) + _488) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3807 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _502 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _509 = (_502 * (cbMtdParam._m0[17u].x - _383)) + _383;
    float _510 = (_502 * (cbMtdParam._m0[17u].y - _384)) + _384;
    float _511 = (_502 * (cbMtdParam._m0[17u].z - _385)) + _385;
    vec4 _523 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _537 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _539 = _537.x;
    float _557 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _539) * _376) + _539;
    float _561 = ((_523.x - _557) * cbMtdParam._m0[19u].z) + _557;
    float _563 = _561 - (_561 * _502);
    float _567 = (cbMtdParam._m0[19u].w * (_460.z - _433)) + _433;
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _587 = (_580.x * 2.0) + (-1.0);
    float _588 = (_580.y * 2.0) + (-1.0);
    float _589 = dot(vec2(_587, _588), vec2(_587, _588));
    float _3818 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _597 = (_502 * (_580.z - _567)) + _567;
    float _600 = (((_460.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _436;
    float _601 = (((_460.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _438;
    float _613 = (((_587 - _600) + (cbMtdParam._m0[21u].x * _600)) * _502) + _600;
    float _614 = (((_588 - _601) + (cbMtdParam._m0[21u].x * _601)) * _502) + _601;
    float _615 = (_502 * (sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) - _444)) + _444;
    float _620 = cbMtdParam._m0[22u].x + _460.w;
    float _623 = fma(_615, _225 * NORMAL.x, fma(_614, _232 * TANGENT.x, (_218 * _210) * _613));
    float _626 = fma(_615, _225 * NORMAL.y, fma(_614, _232 * TANGENT.y, (_218 * _211) * _613));
    float _629 = fma(_615, _225 * NORMAL.z, fma(_614, _232 * TANGENT.z, (_218 * _212) * _613));
    float _633 = inversesqrt(dot(vec3(_623, _626, _629), vec3(_623, _626, _629)));
    float _634 = _633 * _623;
    float _635 = _633 * _626;
    float _636 = _633 * _629;
    float _3829 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _637 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3851 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3862 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3873 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3884 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _642 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _656 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _707 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _697);
    float _708 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _697);
    float _709 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _697);
    float _713 = inversesqrt(dot(vec3(_707, _708, _709), vec3(_707, _708, _709)));
    float _714 = _707 * _713;
    float _715 = _708 * _713;
    float _716 = _709 * _713;
    float _722 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _723 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _741 = fma(_636, cbSceneParam._m0[5u].z, fma(_635, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _634));
    float _744 = fma(_636, cbSceneParam._m0[6u].z, fma(_635, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _634));
    float _747 = fma(_636, cbSceneParam._m0[7u].z, fma(_635, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _634));
    uint _761 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _767 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * cbInstanceData._m0[_761].x;
    float _768 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_761].y;
    float _769 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_761].z;
    float _3895 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _773 = 1.0 - _642;
    float _774 = _770 * _773;
    float _775 = _771 * _773;
    float _776 = _772 * _773;
    float _781 = (_770 + (-0.039999999105930328369140625)) * _642;
    float _782 = (_771 + (-0.039999999105930328369140625)) * _642;
    float _783 = (_772 + (-0.039999999105930328369140625)) * _642;
    float _784 = _781 + 0.039999999105930328369140625;
    float _786 = _782 + 0.039999999105930328369140625;
    float _787 = _783 + 0.039999999105930328369140625;
    vec4 _796 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _722, cbSceneParam._m0[86u].y * _723));
    float _800 = ((isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * TEXCOORD_5.w) * _796.x;
    float _801 = dot(vec3(_634, _635, _636), vec3(_714, _715, _716));
    float _804 = _801 * 2.0;
    float _808 = (_804 * _634) - _714;
    float _809 = (_804 * _635) - _715;
    float _810 = (_804 * _636) - _716;
    float _814 = abs(dot(vec3(_714, _715, _716), vec3(_634, _635, _636)));
    float _3928 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _816 = sqrt(_637);
    float _829 = exp2((_816 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_816 * 3.0));
    float _835 = (1.0 - _829) * ((_816 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _836 = _829 * _816;
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1173;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _898 = fma(_872, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _864));
        float _902 = fma(_872, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _864));
        float _906 = fma(_872, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _864));
        float _931 = _864 + _634;
        float _932 = _868 + _635;
        float _933 = _872 + _636;
        float _943 = fma(_933, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931)) - _898;
        float _944 = fma(_933, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931)) - _902;
        float _945 = fma(_933, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931)) - _906;
        float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
        float _962 = ((_949 * _943) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_898 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_949 * _944) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_902 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_949 * _945) / cbModelParam._m0[34u].z) + ((((((_906 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        float _1001 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_967.x + (-0.5));
        float _1003 = _1001 * (_967.y + (-0.5));
        float _1004 = _1001 * (_967.z + (-0.5));
        float _1011 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_974.x + (-0.5));
        float _1013 = _1011 * (_974.y + (-0.5));
        float _1014 = _1011 * (_974.z + (-0.5));
        float _1021 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_981.x + (-0.5));
        float _1023 = _1021 * (_981.y + (-0.5));
        float _1024 = _1021 * (_981.z + (-0.5));
        float _1031 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_988.x + (-0.5));
        float _1033 = _1031 * (_988.y + (-0.5));
        float _1034 = _1031 * (_988.z + (-0.5));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = _1002 * 0.5;
        float _1039 = _1012 * 0.5;
        float _1040 = _1022 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1055 = (dot(vec3(_634, _635, _636), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1065 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3976 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1067 + 1.0))) + _1072) * _1035;
        float _1082 = _1003 * 0.5;
        float _1083 = _1013 * 0.5;
        float _1084 = _1023 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_634, _635, _636), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _4009 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1109 + 1.0))) + _1114) * _1036;
        float _1124 = _1004 * 0.5;
        float _1125 = _1014 * 0.5;
        float _1126 = _1024 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_634, _635, _636), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _4042 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1151 + 1.0))) + _1156) * _1037;
        _1173 = _1004;
        _1175 = _1003;
        _1176 = _1002;
        _1177 = _1014;
        _1178 = _1013;
        _1179 = _1012;
        _1180 = _1024;
        _1181 = _1023;
        _1182 = _1022;
        _1183 = _1037;
        _1184 = _1036;
        _1185 = _1035;
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
    }
    else
    {
        _1173 = _1174;
        _1175 = _1174;
        _1176 = _1174;
        _1177 = _1174;
        _1178 = _1174;
        _1179 = _1174;
        _1180 = _1174;
        _1181 = _1174;
        _1182 = _1174;
        _1183 = _1174;
        _1184 = _1174;
        _1185 = _1174;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1213 = fma(_872, cbModelParam._m0[30u].z, fma(_868, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _864));
        float _1217 = fma(_872, cbModelParam._m0[31u].z, fma(_868, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _864));
        float _1221 = fma(_872, cbModelParam._m0[32u].z, fma(_868, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _864));
        float _1244 = _864 + _634;
        float _1245 = _868 + _635;
        float _1246 = _872 + _636;
        float _1256 = fma(_1246, cbModelParam._m0[30u].z, fma(_1245, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1244)) - _1213;
        float _1257 = fma(_1246, cbModelParam._m0[31u].z, fma(_1245, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1244)) - _1217;
        float _1258 = fma(_1246, cbModelParam._m0[32u].z, fma(_1245, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1244)) - _1221;
        float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
        float _1275 = ((_1262 * _1256) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1213 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1262 * _1257) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1217 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1262 * _1258) / cbModelParam._m0[35u].z) + ((((((_1221 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        float _1312 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1279.x + (-0.5));
        float _1314 = _1312 * (_1279.y + (-0.5));
        float _1315 = _1312 * (_1279.z + (-0.5));
        float _1322 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1286.x + (-0.5));
        float _1324 = _1322 * (_1286.y + (-0.5));
        float _1325 = _1322 * (_1286.z + (-0.5));
        float _1332 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1293.x + (-0.5));
        float _1334 = _1332 * (_1293.y + (-0.5));
        float _1335 = _1332 * (_1293.z + (-0.5));
        float _1342 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1300.x + (-0.5));
        float _1344 = _1342 * (_1300.y + (-0.5));
        float _1345 = _1342 * (_1300.z + (-0.5));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = _1313 * 0.5;
        float _1350 = _1323 * 0.5;
        float _1351 = _1333 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_634, _635, _636), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4105 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1376 + 1.0))) + _1381) * _1346;
        float _1391 = _1314 * 0.5;
        float _1392 = _1324 * 0.5;
        float _1393 = _1334 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_634, _635, _636), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4138 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1418 + 1.0))) + _1423) * _1347;
        float _1433 = _1315 * 0.5;
        float _1434 = _1325 * 0.5;
        float _1435 = _1335 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_634, _635, _636), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4171 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1460 + 1.0))) + _1465) * _1348;
        _1482 = _1315;
        _1483 = _1314;
        _1484 = _1313;
        _1485 = _1325;
        _1486 = _1324;
        _1487 = _1323;
        _1488 = _1335;
        _1489 = _1334;
        _1490 = _1333;
        _1491 = _1348;
        _1492 = _1347;
        _1493 = _1346;
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
    }
    else
    {
        _1482 = _1174;
        _1483 = _1174;
        _1484 = _1174;
        _1485 = _1174;
        _1486 = _1174;
        _1487 = _1174;
        _1488 = _1174;
        _1489 = _1174;
        _1490 = _1174;
        _1491 = _1174;
        _1492 = _1174;
        _1493 = _1174;
        _1494 = 0.0;
        _1495 = 0.0;
        _1496 = 0.0;
    }
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1186)) + _1186;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1187)) + _1187;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1188)) + _1188;
    float _1529 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1507, cbSceneParam._m0[89u].y, _1506 * cbSceneParam._m0[89u].x));
    float _1532 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1507, cbSceneParam._m0[90u].y, _1506 * cbSceneParam._m0[90u].x));
    float _1535 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1507, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1506));
    float _1550 = _808 * 0.5;
    float _1551 = _809 * 0.5;
    float _1552 = _810 * 0.5;
    float _1553 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1556 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1559 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1593;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1566 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1173, _1177, _1180, _1183));
        float _1570 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1175, _1178, _1181, _1184));
        float _1574 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1581 = dot(vec4(cbModelParam._m0[39u]), vec4(_1550, _1551, _1552, 1.0));
        _1593 = dot(vec3(isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1593 = 1.0;
    }
    float _1604;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1595 = dot(vec4(cbModelParam._m0[40u]), vec4(_1550, _1551, _1552, 1.0));
        _1604 = dot(vec3(isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1604 = 1.0;
    }
    float _1608 = (_1604 * cbModelParam._m0[1u].x) + (_1593 * (1.0 - cbModelParam._m0[1u].x));
    float _1618 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _637);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1618 : min(cbModelParam._m0[25u].z, _1618));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1667 = fma(_872, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864)) + cbModelParam._m0[13u].w;
        float _1671 = fma(_872, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864)) + cbModelParam._m0[14u].w;
        float _1675 = fma(_872, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864)) + cbModelParam._m0[15u].w;
        float _1678 = fma(_810, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _808));
        float _1681 = fma(_810, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _808));
        float _1684 = fma(_810, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _808));
        float _1712;
        if (_1678 > 0.0)
        {
            _1712 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1712 = frontier_phi_14_12_ladder;
        }
        float _1884;
        if (_1681 > 0.0)
        {
            _1884 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1884 = frontier_phi_23_19_ladder;
        }
        float _2179;
        if (_1684 > 0.0)
        {
            _2179 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2179 = frontier_phi_35_30_ladder;
        }
        float _2181 = isnan(_1884) ? _1712 : (isnan(_1712) ? _1884 : min(_1712, _1884));
        float _2182 = isnan(_2179) ? _2181 : (isnan(_2181) ? _2179 : min(_2181, _2179));
        float _2186 = (_2182 * _1678) + _1667;
        float _2187 = (_2182 * _1681) + _1671;
        float _2188 = (_2182 * _1684) + _1675;
        float _2189 = _2182 * 9.9999997473787516355514526367188e-05;
        float _2191 = (-1.0) - _2189;
        float _2193 = _2189 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2188 > _2193) || ((_2188 < _2191) || ((_2187 > _2193) || ((_2187 < _2191) || ((_2186 < _2191) || (_2186 > _2193))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2333 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2188, cbModelParam._m0[9u].z, fma(_2187, cbModelParam._m0[9u].y, _2186 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2188, cbModelParam._m0[10u].z, fma(_2187, cbModelParam._m0[10u].y, _2186 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2188, cbModelParam._m0[11u].z, fma(_2187, cbModelParam._m0[11u].y, _2186 * cbModelParam._m0[11u].x))), _1619);
            frontier_phi_13_35_ladder = _2333.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2333.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2333.x * cbModelParam._m0[1u].y;
        }
        _1700 = frontier_phi_13_35_ladder_2;
        _1702 = frontier_phi_13_35_ladder_1;
        _1704 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_808, _809, _810), _1619);
        _1700 = _1688.x * cbModelParam._m0[1u].y;
        _1702 = _1688.y * cbModelParam._m0[1u].y;
        _1704 = _1688.z * cbModelParam._m0[1u].y;
    }
    float _1708 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _637);
    float _1709 = isnan(_1708) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1708 : min(cbModelParam._m0[25u].w, _1708));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1763 = fma(_872, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864)) + cbModelParam._m0[21u].w;
        float _1767 = fma(_872, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864)) + cbModelParam._m0[22u].w;
        float _1771 = fma(_872, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864)) + cbModelParam._m0[23u].w;
        float _1774 = fma(_810, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _808));
        float _1777 = fma(_810, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _808));
        float _1780 = fma(_810, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _808));
        float _1889;
        if (_1774 > 0.0)
        {
            _1889 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1889 = frontier_phi_25_21_ladder;
        }
        float _2206;
        if (_1777 > 0.0)
        {
            _2206 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2206 = frontier_phi_37_32_ladder;
        }
        float _2544;
        if (_1780 > 0.0)
        {
            _2544 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2544 = frontier_phi_47_44_ladder;
        }
        float _2546 = isnan(_2206) ? _1889 : (isnan(_1889) ? _2206 : min(_1889, _2206));
        float _2547 = isnan(_2544) ? _2546 : (isnan(_2546) ? _2544 : min(_2546, _2544));
        float _2551 = (_2547 * _1774) + _1763;
        float _2552 = (_2547 * _1777) + _1767;
        float _2553 = (_2547 * _1780) + _1771;
        float _2554 = _2547 * 9.9999997473787516355514526367188e-05;
        float _2555 = (-1.0) - _2554;
        float _2557 = _2554 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2553 > _2557) || ((_2553 < _2555) || ((_2552 > _2557) || ((_2552 < _2555) || ((_2551 < _2555) || (_2551 > _2557))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2675 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2553, cbModelParam._m0[17u].z, fma(_2552, cbModelParam._m0[17u].y, _2551 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2553, cbModelParam._m0[18u].z, fma(_2552, cbModelParam._m0[18u].y, _2551 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2553, cbModelParam._m0[19u].z, fma(_2552, cbModelParam._m0[19u].y, _2551 * cbModelParam._m0[19u].x))), _1709);
            frontier_phi_22_47_ladder = _2675.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2675.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2675.x * cbModelParam._m0[1u].z;
        }
        _1799 = frontier_phi_22_47_ladder_2;
        _1801 = frontier_phi_22_47_ladder_1;
        _1803 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_808, _809, _810), _1709);
        _1799 = _1783.x * cbModelParam._m0[1u].z;
        _1801 = _1783.y * cbModelParam._m0[1u].z;
        _1803 = _1783.z * cbModelParam._m0[1u].z;
    }
    float _1816 = (((_835 * _784) + _836) * _800) * ((cbModelParam._m0[1u].w * (_1799 - _1700)) + _1700);
    float _1818 = (((_835 * _786) + _836) * _800) * ((cbModelParam._m0[1u].w * (_1801 - _1702)) + _1702);
    float _1820 = (((_835 * _787) + _836) * _800) * ((cbModelParam._m0[1u].w * (_1803 - _1704)) + _1704);
    float _1823 = fma(_1820, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1816 * cbSceneParam._m0[89u].x));
    float _1826 = fma(_1820, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1816 * cbSceneParam._m0[90u].x));
    float _1829 = fma(_1820, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, _1816 * cbSceneParam._m0[91u].x));
    float _1863 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1875 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1876 = _1863 / _1875;
    float _1877 = _1867 / _1875;
    float _1878 = _1871 / _1875;
    float _2025;
    float _2026;
    float _2027;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1905 = ((uint(_1878 > cbSceneParam._m0[59u].y) + uint(_1878 > cbSceneParam._m0[59u].x)) + uint(_1878 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1906 = _1905 + 43u;
        uint _1914 = _1905 + 44u;
        uint _1922 = _1905 + 45u;
        uint _1930 = _1905 + 46u;
        float _1941 = fma(_1875, cbSceneParam._m0[_1906].w, fma(_1871, cbSceneParam._m0[_1906].z, fma(_1867, cbSceneParam._m0[_1906].y, _1863 * cbSceneParam._m0[_1906].x)));
        float _1945 = fma(_1875, cbSceneParam._m0[_1914].w, fma(_1871, cbSceneParam._m0[_1914].z, fma(_1867, cbSceneParam._m0[_1914].y, _1863 * cbSceneParam._m0[_1914].x)));
        float _1953 = fma(_1875, cbSceneParam._m0[_1930].w, fma(_1871, cbSceneParam._m0[_1930].z, fma(_1867, cbSceneParam._m0[_1930].y, _1863 * cbSceneParam._m0[_1930].x)));
        float _1958 = cbSceneParam._m0[33u].z * _1953;
        float _1960 = cbSceneParam._m0[33u].w * _1953;
        float _1963 = fma(_1875, cbSceneParam._m0[_1922].w, fma(_1871, cbSceneParam._m0[_1922].z, fma(_1867, cbSceneParam._m0[_1922].y, _1863 * cbSceneParam._m0[_1922].x))) / _1953;
        float _2011 = (cbSceneParam._m0[33u].x - sqrt(((_1877 * _1877) + (_1876 * _1876)) + (_1878 * _1878))) * cbSceneParam._m0[33u].y;
        float _4297 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2018 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1958 + _1941) / _1953, (_1960 + _1945) / _1953), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1960 + _1941) / _1953, (_1945 - _1958) / _1953), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1941 - _1958) / _1953, (_1945 - _1960) / _1953), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1941 - _1960) / _1953, (_1958 + _1945) / _1953), _1963), 0.0)).x), vec4(0.25)));
        _2025 = 1.0 - (_2018 * cbSceneParam._m0[34u].x);
        _2026 = 1.0 - (_2018 * cbSceneParam._m0[34u].y);
        _2027 = 1.0 - (_2018 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2025 = 1.0;
        _2026 = 1.0;
        _2027 = 1.0;
    }
    float _2091;
    float _2093;
    float _2095;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2079 = fma(_1875, cbSceneParam._m0[63u].w, fma(_1871, cbSceneParam._m0[63u].z, fma(_1867, cbSceneParam._m0[63u].y, _1863 * cbSceneParam._m0[63u].x)));
        float _2080 = fma(_1875, cbSceneParam._m0[60u].w, fma(_1871, cbSceneParam._m0[60u].z, fma(_1867, cbSceneParam._m0[60u].y, _1863 * cbSceneParam._m0[60u].x))) / _2079;
        float _2081 = fma(_1875, cbSceneParam._m0[61u].w, fma(_1871, cbSceneParam._m0[61u].z, fma(_1867, cbSceneParam._m0[61u].y, _1863 * cbSceneParam._m0[61u].x))) / _2079;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2080 >= cbSceneParam._m0[64u].x) && (_2081 >= cbSceneParam._m0[64u].y)) && (_2080 <= cbSceneParam._m0[64u].z)) && (_2081 <= cbSceneParam._m0[64u].w))
        {
            float _2219 = fma(_1875, cbSceneParam._m0[62u].w, fma(_1871, cbSceneParam._m0[62u].z, fma(_1867, cbSceneParam._m0[62u].y, _1863 * cbSceneParam._m0[62u].x))) / _2079;
            float _2223 = isnan(cbSceneParam._m0[41u].w) ? _2219 : (isnan(_2219) ? cbSceneParam._m0[41u].w : max(_2219, cbSceneParam._m0[41u].w));
            float _2266 = (cbSceneParam._m0[33u].x - sqrt(((_1877 * _1877) + (_1876 * _1876)) + (_1878 * _1878))) * cbSceneParam._m0[33u].y;
            float _4313 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
            float _2273 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2080, cbSceneParam._m0[33u].w + _2081), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2080, _2081 - cbSceneParam._m0[33u].z), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2080 - cbSceneParam._m0[33u].z, _2081 - cbSceneParam._m0[33u].w), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2080 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2081), _2223), 0.0)).x), vec4(0.25)));
            float _2277 = 1.0 - (_2273 * cbSceneParam._m0[34u].x);
            float _2278 = 1.0 - (_2273 * cbSceneParam._m0[34u].y);
            float _2279 = 1.0 - (_2273 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2279) ? _2027 : (isnan(_2027) ? _2279 : min(_2027, _2279));
            frontier_phi_34_33_ladder_1 = isnan(_2278) ? _2026 : (isnan(_2026) ? _2278 : min(_2026, _2278));
            frontier_phi_34_33_ladder_2 = isnan(_2277) ? _2025 : (isnan(_2025) ? _2277 : min(_2025, _2277));
        }
        else
        {
            frontier_phi_34_33_ladder = _2027;
            frontier_phi_34_33_ladder_1 = _2026;
            frontier_phi_34_33_ladder_2 = _2025;
        }
        _2091 = frontier_phi_34_33_ladder_2;
        _2093 = frontier_phi_34_33_ladder_1;
        _2095 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2091 = _2025;
        _2093 = _2026;
        _2095 = _2027;
    }
    uvec4 _2100 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2102 = _2100.x * 14u;
    uint _2103 = _2102 + 13u;
    float _2110 = _800 + (-1.0);
    float _2115 = (cbLight._m0[_2103].x * _2110) + 1.0;
    float _2116 = (cbLight._m0[_2103].y * _2110) + 1.0;
    float _2117 = (cbLight._m0[_2103].z * _2110) + 1.0;
    float _2118 = (cbLight._m0[_2103].w * _2110) + 1.0;
    uint _2119 = _2102 + 5u;
    float _2125 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
    uint _2129 = _2102 + 4u;
    float _2138 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
    uint _2142 = _2102 | 1u;
    float _2153 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_634, _635, _636));
    float _2156 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_634, _635, _636));
    float _4349 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _4360 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2161 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.3183098733425140380859375;
    float _2163 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * 0.3183098733425140380859375;
    float _2170 = ((cbLight._m0[_2119].x * _2125) * _2163) + (((cbLight._m0[_2129].x * _2091) * _2138) * _2161);
    float _2171 = ((_2125 * cbLight._m0[_2119].y) * _2163) + (((cbLight._m0[_2129].y * _2093) * _2138) * _2161);
    float _2172 = ((_2125 * cbLight._m0[_2119].z) * _2163) + (((cbLight._m0[_2129].z * _2095) * _2138) * _2161);
    uvec4 _2176 = floatBitsToUint(cbLight._m0[_2102 + 12u]);
    bool _2178 = _2176.x == 0u;
    float _2280;
    float _2282;
    float _2284;
    if (_2178)
    {
        _2280 = _2170;
        _2282 = _2171;
        _2284 = _2172;
    }
    else
    {
        uint _2288 = _2102 + 6u;
        float _2304 = (dot(vec3(cbLight._m0[_2102 + 2u].xyz), vec3(_634, _635, _636)) * 0.5) + 0.5;
        float _2305 = _2304 * _2304;
        float _4371 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2306 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2307 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2280 = (((cbLight._m0[_2288].x * 0.3183098733425140380859375) * _2306) * _2307) + _2170;
        _2282 = (((cbLight._m0[_2288].y * 0.3183098733425140380859375) * _2306) * _2307) + _2171;
        _2284 = (((cbLight._m0[_2288].z * 0.3183098733425140380859375) * _2306) * _2307) + _2172;
    }
    bool _2287 = _2176.y == 0u;
    float _2342;
    float _2344;
    float _2346;
    if (_2287)
    {
        _2342 = _2280;
        _2344 = _2282;
        _2346 = _2284;
    }
    else
    {
        uint _2515 = _2102 + 7u;
        float _2531 = (dot(vec3(cbLight._m0[_2102 + 3u].xyz), vec3(_634, _635, _636)) * 0.5) + 0.5;
        float _2532 = _2531 * _2531;
        float _4387 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2533 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2534 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2342 = (((cbLight._m0[_2515].x * 0.3183098733425140380859375) * _2533) * _2534) + _2280;
        _2344 = (((cbLight._m0[_2515].y * 0.3183098733425140380859375) * _2533) * _2534) + _2282;
        _2346 = (((cbLight._m0[_2515].z * 0.3183098733425140380859375) * _2533) * _2534) + _2284;
    }
    uint _2349 = _2102 + 8u;
    float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _637) * 0.949999988079071044921875);
    float _2363 = _2362 * _2362;
    float _2364 = cbLight._m0[_2102].x + _714;
    float _2365 = cbLight._m0[_2102].y + _715;
    float _2366 = cbLight._m0[_2102].z + _716;
    float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
    float _2371 = _2370 * _2364;
    float _2372 = _2370 * _2365;
    float _2373 = _2370 * _2366;
    float _2374 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_2102].xyz));
    float _4403 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _4414 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2378 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2379 = dot(vec3(_634, _635, _636), vec3(_2371, _2372, _2373));
    float _4425 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2383 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2371, _2372, _2373));
    float _4436 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2387 = _2363 * _2363;
    float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
    float _2399 = exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0);
    float _2400 = 0.959999978542327880859375 - _781;
    float _2402 = 0.959999978542327880859375 - _782;
    float _2403 = 0.959999978542327880859375 - _783;
    float _2410 = 1.0 - _2363;
    float _2421 = (0.5 / (((_2378 * ((_2377 * _2410) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2410) + _2363) * _2377))) * _2377;
    float _4447 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2423 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
    uint _2437 = _2102 + 9u;
    float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _637) * 0.949999988079071044921875);
    float _2449 = _2448 * _2448;
    float _2450 = cbLight._m0[_2142].x + _714;
    float _2451 = cbLight._m0[_2142].y + _715;
    float _2452 = cbLight._m0[_2142].z + _716;
    float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
    float _2457 = _2456 * _2450;
    float _2458 = _2456 * _2451;
    float _2459 = _2456 * _2452;
    float _2460 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_2142].xyz));
    float _4458 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2464 = dot(vec3(_634, _635, _636), vec3(_2457, _2458, _2459));
    float _4469 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2468 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2457, _2458, _2459));
    float _4480 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2472 = _2449 * _2449;
    float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
    float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0);
    float _2490 = 1.0 - _2449;
    float _2500 = (0.5 / (((_2378 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2490) + _2449) * _2463))) * _2463;
    float _4491 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2502 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
    float _2512 = (((((_2483 * _2400) + _784) * cbLight._m0[_2437].x) * _2502) * _2125) + ((((cbLight._m0[_2349].x * _2091) * ((_2399 * _2400) + _784)) * _2423) * _2138);
    float _2513 = (((((_2483 * _2402) + _786) * cbLight._m0[_2437].y) * _2502) * _2125) + ((((cbLight._m0[_2349].y * _2093) * ((_2399 * _2402) + _786)) * _2423) * _2138);
    float _2514 = (((((_2483 * _2403) + _787) * cbLight._m0[_2437].z) * _2502) * _2125) + ((((cbLight._m0[_2349].z * _2095) * ((_2399 * _2403) + _787)) * _2423) * _2138);
    float _2570;
    float _2572;
    float _2574;
    if (_2178)
    {
        _2570 = _2512;
        _2572 = _2513;
        _2574 = _2514;
    }
    else
    {
        uint _2576 = _2102 + 2u;
        uint _2580 = _2102 + 10u;
        float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2576].w)) * _637) * 0.949999988079071044921875);
        float _2595 = _2594 * _2594;
        float _2596 = cbLight._m0[_2576].x + _714;
        float _2597 = cbLight._m0[_2576].y + _715;
        float _2598 = cbLight._m0[_2576].z + _716;
        float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
        float _2603 = _2602 * _2596;
        float _2604 = _2602 * _2597;
        float _2605 = _2602 * _2598;
        float _2606 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_2576].xyz));
        float _4502 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2610 = dot(vec3(_634, _635, _636), vec3(_2603, _2604, _2605));
        float _4513 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2614 = dot(vec3(cbLight._m0[_2576].xyz), vec3(_2603, _2604, _2605));
        float _4524 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2618 = _2595 * _2595;
        float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
        float _2629 = exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0);
        float _2636 = 1.0 - _2595;
        float _2646 = (0.5 / (((_2378 * ((_2609 * _2636) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2636) + _2595) * _2609))) * _2609;
        float _4535 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2648 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
        float _2649 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2570 = (((((_2629 * _2400) + _784) * cbLight._m0[_2580].x) * _2648) * _2649) + _2512;
        _2572 = (((((_2629 * _2402) + _786) * cbLight._m0[_2580].y) * _2648) * _2649) + _2513;
        _2574 = (((((_2629 * _2403) + _787) * cbLight._m0[_2580].z) * _2648) * _2649) + _2514;
    }
    float _2680;
    float _2682;
    float _2684;
    if (_2287)
    {
        _2680 = _2570;
        _2682 = _2572;
        _2684 = _2574;
    }
    else
    {
        uint _2691 = _2102 + 3u;
        uint _2695 = _2102 + 11u;
        float _2709 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2691].w)) * _637) * 0.949999988079071044921875);
        float _2710 = _2709 * _2709;
        float _2711 = cbLight._m0[_2691].x + _714;
        float _2712 = cbLight._m0[_2691].y + _715;
        float _2713 = cbLight._m0[_2691].z + _716;
        float _2717 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
        float _2718 = _2717 * _2711;
        float _2719 = _2717 * _2712;
        float _2720 = _2717 * _2713;
        float _2721 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_2691].xyz));
        float _4551 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2725 = dot(vec3(_634, _635, _636), vec3(_2718, _2719, _2720));
        float _4562 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2729 = dot(vec3(cbLight._m0[_2691].xyz), vec3(_2718, _2719, _2720));
        float _4573 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2733 = _2710 * _2710;
        float _2737 = ((_2728 * _2728) * (_2733 + (-1.0))) + 1.0;
        float _2744 = exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0);
        float _2751 = 1.0 - _2710;
        float _2761 = (0.5 / (((_2378 * ((_2724 * _2751) + _2710)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2751) + _2710) * _2724))) * _2724;
        float _4584 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2763 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2733 / ((_2737 * _2737) * 3.141590118408203125));
        float _2764 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2680 = (((((_2744 * _2400) + _784) * cbLight._m0[_2695].x) * _2763) * _2764) + _2570;
        _2682 = (((((_2744 * _2402) + _786) * cbLight._m0[_2695].y) * _2763) * _2764) + _2572;
        _2684 = (((((_2744 * _2403) + _787) * cbLight._m0[_2695].z) * _2763) * _2764) + _2574;
    }
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    if (_2100.y == 0u)
    {
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.x;
        uint _2797 = uint((float(_2785.y) * floor(float(uint(cbSceneParam._m0[85u].y * _723) / _2786))) + floor(float(uint(cbSceneParam._m0[85u].x * _722) / _2786)));
        float _2807 = (log2(_1878 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2808 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        uint _2811 = uint(isnan(14.0) ? _2808 : (isnan(_2808) ? 14.0 : min(_2808, 14.0)));
        uvec4 _2816 = texelFetch(g_lightClusterGridBuffer, int(((_2811 << 2u) + (_2797 << 6u)) >> 2u));
        uint _2817 = _2816.x;
        uint _2818 = _2785.z;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        if (((((1u << ((_2818 >> 4u) & 15u)) + 4294967295u) & _2817) == 0u) || ((_2818 & 240u) == 0u))
        {
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
        }
        else
        {
            float _2898;
            float _2900;
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            uint _3048 = 0u;
            uint _3057;
            bool _3058;
            for (;;)
            {
                _3057 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                _3058 = _3057 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3058)
                {
                    frontier_phi_66_pred = _3047;
                    frontier_phi_66_pred_1 = _3046;
                    frontier_phi_66_pred_2 = _3045;
                    frontier_phi_66_pred_3 = _3044;
                    frontier_phi_66_pred_4 = _3043;
                    frontier_phi_66_pred_5 = _3042;
                }
                else
                {
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    uint _3172;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3057;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    for (;;)
                    {
                        uint _3176 = uint(findLSB(_3172)) + (_3048 << 5u);
                        uint _3173 = (_3172 + 4294967295u) & _3172;
                        uint _3178 = _3176 * 48u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3198 = (_3176 * 48u) + 4u;
                        vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 3u)).x));
                        uint _3217 = (_3176 * 48u) + 8u;
                        vec3 _3228 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x));
                        float _3232 = _3192.x - _1876;
                        float _3233 = _3192.y - _1877;
                        float _3234 = _3192.z - _1878;
                        float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                        float _3238 = inversesqrt(_3235);
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3242 = dot(vec3(_741, _744, _747), vec3(_3239, _3240, _3241));
                        float _3247 = 1.0 - (_3235 * _3192.w);
                        float _4610 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3249 = sqrt(_3235) * _3211.w;
                        float _3252 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3242) + _3253;
                        float _3259 = _3249 * _3249;
                        float _3263 = ((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3248) / ((_3259 * 0.699999988079071044921875) + 1.0);
                        float _3267 = (-0.0) - _1876;
                        float _3268 = (-0.0) - _1877;
                        float _3269 = (-0.0) - _1878;
                        float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3283 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                        float _3284 = 1.0 - _816;
                        float _3291 = sqrt(1.0 - ((1.0 - (_3284 * _3284)) * (1.0 - (_3283 * _3283))));
                        float _3292 = _3291 * _3291;
                        float _3293 = _3292 * _3292;
                        float _3294 = _3274 + _3239;
                        float _3295 = _3275 + _3240;
                        float _3296 = _3276 + _3241;
                        float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                        float _3304 = dot(vec3(_741, _744, _747), vec3(_3274, _3275, _3276));
                        float _4626 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3307 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3308 = dot(vec3(_741, _744, _747), vec3(_3300 * _3294, _3300 * _3295, _3300 * _3296));
                        float _4637 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3311 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3315 = ((_3311 * _3311) * (_3293 + (-1.0))) + 1.0;
                        float _3316 = _3252 * _3292;
                        float _3317 = _3316 * _3316;
                        float _3320 = ((1.0 - _3317) * _3242) + _3317;
                        float _4648 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3321 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3322 = 1.0 - _3292;
                        float _3332 = (0.5 / (((_3321 * ((_3307 * _3322) + _3292)) + 9.9999999392252902907785028219223e-09) + (((_3321 * _3322) + _3292) * _3307))) * _3321;
                        float _4659 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3343 = (((_3293 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3315 * _3315) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125))) * _3248;
                        _3101 = (_3263 * _3211.x) + _3169;
                        _3102 = (_3263 * _3211.y) + _3170;
                        _3103 = (_3263 * _3211.z) + _3171;
                        _3098 = (_3343 * _3228.x) + _3166;
                        _3099 = (_3343 * _3228.y) + _3167;
                        _3100 = (_3343 * _3228.z) + _3168;
                        if (_3173 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3173;
                        }
                    }
                    frontier_phi_66_pred = _3103;
                    frontier_phi_66_pred_1 = _3102;
                    frontier_phi_66_pred_2 = _3101;
                    frontier_phi_66_pred_3 = _3100;
                    frontier_phi_66_pred_4 = _3099;
                    frontier_phi_66_pred_5 = _3098;
                }
                _2908 = frontier_phi_66_pred;
                _2906 = frontier_phi_66_pred_1;
                _2904 = frontier_phi_66_pred_2;
                _2902 = frontier_phi_66_pred_3;
                _2900 = frontier_phi_66_pred_4;
                _2898 = frontier_phi_66_pred_5;
                uint _3049 = _3048 + 1u;
                if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3042 = _2898;
                    _3043 = _2900;
                    _3044 = _2902;
                    _3045 = _2904;
                    _3046 = _2906;
                    _3047 = _2908;
                    _3048 = _3049;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
        }
        uvec4 _2911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2912 = _2911.z;
        uint _2914 = (_2912 >> 8u) & 15u;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((4294967295u << _2914) & _2817) == 0u)
        {
            _3010 = _2897;
            _3012 = _2899;
            _3014 = _2901;
            _3016 = _2903;
            _3018 = _2905;
            _3020 = _2907;
        }
        else
        {
            float _3035 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
            float _3036 = _3035 * _1876;
            float _3037 = _3035 * _1877;
            float _3038 = _3035 * _1878;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2914 < ((_2912 >> 12u) & 15u))
            {
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3149 = _2897;
                float _3150 = _2899;
                float _3151 = _2901;
                float _3152 = _2903;
                float _3153 = _2905;
                float _3154 = _2907;
                uint _3155 = _2914;
                uint _3164;
                bool _3165;
                for (;;)
                {
                    _3164 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3155 << 2u)) >> 2u)).x;
                    _3165 = _3164 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3165)
                    {
                        frontier_phi_72_pred = _3154;
                        frontier_phi_72_pred_1 = _3153;
                        frontier_phi_72_pred_2 = _3152;
                        frontier_phi_72_pred_3 = _3151;
                        frontier_phi_72_pred_4 = _3150;
                        frontier_phi_72_pred_5 = _3149;
                    }
                    else
                    {
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3361 = _3149;
                        float _3362 = _3150;
                        float _3363 = _3151;
                        float _3364 = _3152;
                        float _3365 = _3153;
                        float _3366 = _3154;
                        uint _3367 = _3164;
                        uint _3368;
                        vec4 _3393;
                        float _3394;
                        vec4 _3409;
                        vec3 _3421;
                        vec4 _3436;
                        vec4 _3452;
                        float _3498;
                        bool _3499;
                        for (;;)
                        {
                            uint _3378 = ((_3155 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3367));
                            _3368 = (_3367 + 4294967295u) & _3367;
                            uint _3380 = _3378 * 40u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            _3394 = _3393.w;
                            uint _3396 = (_3378 * 40u) + 4u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3411 = (_3378 * 40u) + 8u;
                            _3421 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x));
                            uint _3423 = (_3378 * 40u) + 16u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3439 = (_3378 * 40u) + 20u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3378 * 40u) + 24u;
                            vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3473 = (_3378 * 40u) + 28u;
                            vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            _3498 = fma(_1878, _3486.z, fma(_1877, _3486.y, _3486.x * _1876)) + _3486.w;
                            _3499 = !((fma(_1878, _3467.z, fma(_1877, _3467.y, _3467.x * _1876)) + _3467.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3499)
                            {
                                float _3526 = _3393.x - _1876;
                                float _3527 = _3393.y - _1877;
                                float _3528 = _3393.z - _1878;
                                float _3529 = dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528));
                                float _3532 = inversesqrt(_3529);
                                float _3533 = _3532 * _3526;
                                float _3534 = _3532 * _3527;
                                float _3535 = _3532 * _3528;
                                float _3539 = 1.0 - (_3529 / (_3394 * _3394));
                                float _4670 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3544 = sqrt(_3529) * _3409.w;
                                float _3546 = 1.39999997615814208984375 / (_3544 + 1.39999997615814208984375);
                                float _3547 = _3546 * _3546;
                                float _3550 = ((1.0 - _3547) * dot(vec3(_3533, _3534, _3535), vec3(_741, _744, _747))) + _3547;
                                float _3553 = _3544 * _3544;
                                float _3557 = (fma(_1878, _3436.z, fma(_1877, _3436.y, _3436.x * _1876)) + _3436.w) / _3498;
                                float _3558 = (fma(_1878, _3452.z, fma(_1877, _3452.y, _3452.x * _1876)) + _3452.w) / _3498;
                                float _3562 = 1.0 - dot(vec2(_3557, _3558), vec2(_3557, _3558));
                                float _4686 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3564 = _3563 * (((isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0))) * _3540) / ((_3553 * 0.699999988079071044921875) + 1.0));
                                float _3576 = exp2(log2(1.0 / ((_3553 * 3.5) + 5.0)) * 0.25);
                                float _3577 = 1.0 - _816;
                                float _3584 = sqrt(1.0 - ((1.0 - (_3577 * _3577)) * (1.0 - (_3576 * _3576))));
                                float _3585 = _3584 * _3584;
                                float _3586 = _3585 * _3585;
                                float _3587 = _3533 - _3036;
                                float _3588 = _3534 - _3037;
                                float _3589 = _3535 - _3038;
                                float _3593 = inversesqrt(dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589)));
                                float _3597 = dot(vec3(_741, _744, _747), vec3((-0.0) - _3036, (-0.0) - _3037, (-0.0) - _3038));
                                float _4697 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3600 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3601 = dot(vec3(_741, _744, _747), vec3(_3593 * _3587, _3593 * _3588, _3593 * _3589));
                                float _4708 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3608 = ((_3604 * _3604) * (_3586 + (-1.0))) + 1.0;
                                float _3609 = _3546 * _3585;
                                float _3610 = _3609 * _3609;
                                float _3616 = ((1.0 - _3610) * dot(vec3(_741, _744, _747), vec3(_3533, _3534, _3535))) + _3610;
                                float _4719 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3617 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3618 = 1.0 - _3585;
                                float _3628 = (0.5 / (((_3617 * ((_3600 * _3618) + _3585)) + 9.9999999392252902907785028219223e-09) + (((_3617 * _3618) + _3585) * _3600))) * _3617;
                                float _4730 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3638 = (_3563 * _3540) * (((_3586 * 3.1415927410125732421875) * (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) / ((_3608 * _3608) * ((_3553 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3564 * _3409.y;
                                frontier_phi_78_pred_1 = _3564 * _3409.x;
                                frontier_phi_78_pred_2 = _3638 * _3421.z;
                                frontier_phi_78_pred_3 = _3638 * _3421.y;
                                frontier_phi_78_pred_4 = _3638 * _3421.x;
                                frontier_phi_78_pred_5 = _3564 * _3409.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3646 = frontier_phi_78_pred;
                            _3645 = frontier_phi_78_pred_1;
                            _3644 = frontier_phi_78_pred_2;
                            _3643 = frontier_phi_78_pred_3;
                            _3642 = frontier_phi_78_pred_4;
                            _3647 = frontier_phi_78_pred_5;
                            _3351 = _3645 + _3364;
                            _3352 = _3646 + _3365;
                            _3353 = _3647 + _3366;
                            _3348 = _3642 + _3361;
                            _3349 = _3643 + _3362;
                            _3350 = _3644 + _3363;
                            if (_3368 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3368;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3353;
                        frontier_phi_72_pred_1 = _3352;
                        frontier_phi_72_pred_2 = _3351;
                        frontier_phi_72_pred_3 = _3350;
                        frontier_phi_72_pred_4 = _3349;
                        frontier_phi_72_pred_5 = _3348;
                    }
                    _3021 = frontier_phi_72_pred;
                    _3019 = frontier_phi_72_pred_1;
                    _3017 = frontier_phi_72_pred_2;
                    _3015 = frontier_phi_72_pred_3;
                    _3013 = frontier_phi_72_pred_4;
                    _3011 = frontier_phi_72_pred_5;
                    uint _3156 = _3155 + 1u;
                    if (_3156 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3149 = _3011;
                        _3150 = _3013;
                        _3151 = _3015;
                        _3152 = _3017;
                        _3153 = _3019;
                        _3154 = _3021;
                        _3155 = _3156;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3021;
                frontier_phi_60_61_ladder_1 = _3019;
                frontier_phi_60_61_ladder_2 = _3015;
                frontier_phi_60_61_ladder_3 = _3013;
                frontier_phi_60_61_ladder_4 = _3011;
                frontier_phi_60_61_ladder_5 = _3017;
            }
            else
            {
                frontier_phi_60_61_ladder = _2907;
                frontier_phi_60_61_ladder_1 = _2905;
                frontier_phi_60_61_ladder_2 = _2901;
                frontier_phi_60_61_ladder_3 = _2899;
                frontier_phi_60_61_ladder_4 = _2897;
                frontier_phi_60_61_ladder_5 = _2903;
            }
            _3010 = frontier_phi_60_61_ladder_4;
            _3012 = frontier_phi_60_61_ladder_3;
            _3014 = frontier_phi_60_61_ladder_2;
            _3016 = frontier_phi_60_61_ladder_5;
            _3018 = frontier_phi_60_61_ladder_1;
            _3020 = frontier_phi_60_61_ladder;
        }
        float _3025 = isnan(1.0) ? _800 : (isnan(_800) ? 1.0 : min(_800, 1.0));
        _2830 = (_3025 * _3016) + _2342;
        _2832 = (_3025 * _3018) + _2344;
        _2834 = (_3025 * _3020) + _2346;
        _2836 = ((_3010 * _784) * _3025) + _2680;
        _2838 = ((_3012 * _786) * _3025) + _2682;
        _2840 = ((_3014 * _787) * _3025) + _2684;
    }
    else
    {
        _2830 = _2342;
        _2832 = _2344;
        _2834 = _2346;
        _2836 = _2680;
        _2838 = _2682;
        _2840 = _2684;
    }
    float _4746 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4757 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4768 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    uint _2860 = _238 + 6u;
    float _2868 = _722 / cbSceneParam._m0[86u].x;
    float _2869 = _723 / cbSceneParam._m0[86u].y;
    vec4 _2883 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2868, _2869, (log2((isnan(cbSceneParam._m0[77u].w) ? _656 : (isnan(_656) ? cbSceneParam._m0[77u].w : min(_656, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2885 = _2883.x;
    float _2886 = _2883.y;
    float _2887 = _2883.z;
    float _2888 = _2883.w;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    if (_656 > cbSceneParam._m0[78u].w)
    {
        float _2922 = isnan(_656) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _656 : min(cbSceneParam._m0[80u].w, _656));
        float _2923 = _2922 / _656;
        float _2934 = _2923 * _707;
        float _2935 = _708 * _2923;
        float _2936 = (-0.0) - _2935;
        float _2938 = _2923 * _709;
        float _2940 = (cbSceneParam._m0[77u].w * _2936) / _2922;
        float _2941 = _2940 + cbSceneParam._m0[79u].w;
        float _2942 = cbSceneParam._m0[79u].w - _2935;
        float _2948 = sqrt(((_2934 * _2934) + (_2935 * _2935)) + (_2938 * _2938));
        float _2951 = (1.0 - (cbSceneParam._m0[77u].w / _2922)) * _2948;
        float _2956 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2958 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3111;
        if (abs((_2936 - _2940) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3111 = ((((_2941 > 0.0) ? exp2(_2956 * _2941) : (2.0 - exp2(_2958 * _2941))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2951;
        }
        else
        {
            float _3071 = 1.0 / cbSceneParam._m0[80u].x;
            float _3072 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : max(_2941, _2942));
            float _3073 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : min(_2941, _2942));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            float _3083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : min(_3073, 0.0));
            _3111 = ((abs(_2948 / _2936) * cbSceneParam._m0[80u].y) * ((((_3082 - _3083) * 2.0) - ((exp2(_2956 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0)))) - exp2(_2956 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))))) * _3071)) - ((exp2(_2958 * _3082) - exp2(_2958 * _3083)) * _3071))) + (_2951 * cbSceneParam._m0[80u].z);
        }
        vec4 _3113 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2868, _2869, 1.0), 0.0);
        float _3122 = exp2((_3111 * (-1.44269502162933349609375)) * (1.0 - _3113.w));
        float _3123 = log2(_3122);
        float _3139 = log2(_2888);
        _2960 = (exp2(_3139 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].x)) * _3113.x) / cbSceneParam._m0[78u].x)) + _2885;
        _2962 = (exp2(_3139 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].y)) * _3113.y) / cbSceneParam._m0[78u].y)) + _2886;
        _2964 = (exp2(_3139 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].z)) * _3113.z) / cbSceneParam._m0[78u].z)) + _2887;
        _2966 = _3122 * _2888;
    }
    else
    {
        _2960 = _2885;
        _2962 = _2886;
        _2964 = _2887;
        _2966 = _2888;
    }
    float _2978 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2979 = _2978 == 3.0;
    float _2980 = log2(_2966);
    float _2987 = exp2(_2980 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2830 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _800))) + ((_2836 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1608)) * cbPerFrame._m0[3u].x));
    float _2988 = exp2(_2980 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2832 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _800))) + ((_2838 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1608)) * cbPerFrame._m0[3u].x));
    float _2989 = exp2(_2980 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2834 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _800))) + ((_2840 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1608)) * cbPerFrame._m0[3u].x));
    float _2998 = (_2978 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2998 * (_2979 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2960)));
    SV_Target.y = _2998 * (_2979 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2962)));
    SV_Target.z = _2998 * (_2979 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2964)));
    SV_Target.w = cbInstanceData._m0[_2860].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2860].w;
}


