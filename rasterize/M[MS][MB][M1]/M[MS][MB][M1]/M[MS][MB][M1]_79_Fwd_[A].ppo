#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1341;
float _3722;
float _3723;
float _3724;
float _3725;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3734 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _456 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _460 = _456.z;
    float _469 = ((_439.z - _460) * _392) + _460;
    float _472 = ((((_439.x - _458) * _392) + _458) * 2.0) + (-1.0);
    float _473 = ((((_439.y - _459) * _392) + _459) * 2.0) + (-1.0);
    float _474 = dot(vec2(_472, _473), vec2(_472, _473));
    float _3745 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _479 = sqrt(1.0 - (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))));
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _513 = (_472 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_414.x * 2.0) + (-1.0)))) + (((_501.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _514 = (_473 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_414.y * 2.0) + (-1.0)))) + (((_501.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _528 = _526.x;
    float _529 = 1.0 - _528;
    float _557 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_528 - _529) * cbMtdParam._m0[24u].w) + _529) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3756 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _566 = ((((cbMtdParam._m0[10u].x - _399) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _558) + _399;
    float _567 = ((((cbMtdParam._m0[10u].y - _400) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _558) + _400;
    float _568 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _401)) * _558) + _401;
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _594 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _596 = _594.x;
    float _614 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _596) * _392) + _596;
    float _618 = ((_580.x - _614) * cbMtdParam._m0[19u].z) + _614;
    float _620 = _618 - (_618 * _558);
    float _625 = (((_414.z - _469) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _469;
    float _629 = ((_501.z - _625) * cbMtdParam._m0[19u].w) + _625;
    float _633 = ((cbMtdParam._m0[23u].y - _629) * _558) + _629;
    vec4 _652 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _654 = _652.x;
    float _655 = _652.y;
    float _659 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_243, _244, _245, 0.0));
    vec4 _674 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _274) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _275) + cbTextureTilingScale._m0[18u].w));
    float _676 = _674.x;
    float _681 = fract(_674.w + cbPerFrame._m0[22u].x);
    float _683 = (1.0 - _681) * _676;
    float _688 = ((_681 + (-1.0)) + _676) * 9.0;
    float _690 = ((_676 + (-1.0)) + _681) * 9.0;
    float _691 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _692 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _706 = (_683 * ((_674.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _691 : (isnan(_691) ? 3.0 : min(_691, 3.0))) * 3.1415927410125732421875);
    float _708 = (_683 * ((_674.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _692 : (isnan(_692) ? 3.0 : min(_692, 3.0))) * 3.1415927410125732421875);
    float _712 = inversesqrt(dot(vec3(_706, _708, 1.0), vec3(_706, _708, 1.0)));
    float _728 = (((((0.5 - _654) + ((_706 * 0.5) * _712)) * _659) + _654) * 2.0) + (-1.0);
    float _729 = (((((0.5 - _655) + ((_712 * 0.5) * _708)) * _659) + _655) * 2.0) + (-1.0);
    float _730 = dot(vec2(_728, _729), vec2(_728, _729));
    float _3787 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _746 = ((((cbMtdParam._m0[22u].z * _513) - _513) + _728) * _558) + _513;
    float _747 = ((((cbMtdParam._m0[22u].z * _514) - _514) + _729) * _558) + _514;
    float _748 = (_558 * (sqrt(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) - _479)) + _479;
    float _750 = cbMtdParam._m0[22u].x + _501.w;
    float _753 = fma(_748, _243, fma(_747, _249 * TANGENT.x, (_235 * _227) * _746));
    float _756 = fma(_748, _244, fma(_747, _249 * TANGENT.y, (_235 * _228) * _746));
    float _759 = fma(_748, _245, fma(_747, _249 * TANGENT.z, (_235 * _229) * _746));
    float _763 = inversesqrt(dot(vec3(_753, _756, _759), vec3(_753, _756, _759)));
    float _764 = _763 * _753;
    float _765 = _763 * _756;
    float _766 = _763 * _759;
    float _3798 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _767 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _3820 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3831 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3842 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3853 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _772 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _786 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _836 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _826);
    float _837 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _826);
    float _838 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _826);
    float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
    float _843 = _836 * _842;
    float _844 = _837 * _842;
    float _845 = _838 * _842;
    vec4 _850 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _852 = _850.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1023 = sqrt(((_836 * _836) + (_837 * _837)) + (_838 * _838));
        float _1029 = (cbMatDynParam._m0[5u].x * _1023) + cbMatDynParam._m0[5u].y;
        float _3864 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1034 = (cbMatDynParam._m0[5u].z * _1023) + cbMatDynParam._m0[5u].w;
        float _3875 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) - _1030)) + _1030) < ((_852 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _863 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _864 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _882 = fma(_766, cbSceneParam._m0[5u].z, fma(_765, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _764));
    float _885 = fma(_766, cbSceneParam._m0[6u].z, fma(_765, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _764));
    float _888 = fma(_766, cbSceneParam._m0[7u].z, fma(_765, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _764));
    uint _901 = _255 + 9u;
    uint _902 = _901 + uint(cbMatDynParam._m0[0u].w);
    float _908 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * cbInstanceData._m0[_902].x;
    float _909 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_902].y;
    float _910 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_902].z;
    float _3886 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _914 = 1.0 - _772;
    float _915 = _911 * _914;
    float _916 = _912 * _914;
    float _917 = _913 * _914;
    float _922 = (_911 + (-0.039999999105930328369140625)) * _772;
    float _923 = (_912 + (-0.039999999105930328369140625)) * _772;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _772;
    float _925 = _922 + 0.039999999105930328369140625;
    float _927 = _923 + 0.039999999105930328369140625;
    float _928 = _924 + 0.039999999105930328369140625;
    vec4 _937 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _863, cbSceneParam._m0[86u].y * _864));
    float _941 = ((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * TEXCOORD_5.w) * _937.x;
    float _942 = dot(vec3(_764, _765, _766), vec3(_843, _844, _845));
    float _945 = _942 * 2.0;
    float _949 = (_945 * _764) - _843;
    float _950 = (_945 * _765) - _844;
    float _951 = (_945 * _766) - _845;
    float _955 = abs(dot(vec3(_843, _844, _845), vec3(_764, _765, _766)));
    float _3919 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _957 = sqrt(_767);
    float _969 = exp2((_957 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_957 * 3.0));
    float _975 = (1.0 - _969) * ((_957 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _976 = _969 * _957;
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1340;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1066 = fma(_1012, cbModelParam._m0[26u].z, fma(_1008, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004));
        float _1070 = fma(_1012, cbModelParam._m0[27u].z, fma(_1008, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004));
        float _1074 = fma(_1012, cbModelParam._m0[28u].z, fma(_1008, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004));
        float _1098 = _1004 + _764;
        float _1099 = _1008 + _765;
        float _1100 = _1012 + _766;
        float _1110 = fma(_1100, cbModelParam._m0[26u].z, fma(_1099, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1098)) - _1066;
        float _1111 = fma(_1100, cbModelParam._m0[27u].z, fma(_1099, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1098)) - _1070;
        float _1112 = fma(_1100, cbModelParam._m0[28u].z, fma(_1099, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1098)) - _1074;
        float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
        float _1129 = ((_1116 * _1110) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1066 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1116 * _1111) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1070 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1116 * _1112) / cbModelParam._m0[34u].z) + ((((((_1074 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        float _1168 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1134.x + (-0.5));
        float _1170 = _1168 * (_1134.y + (-0.5));
        float _1171 = _1168 * (_1134.z + (-0.5));
        float _1178 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1141.x + (-0.5));
        float _1180 = _1178 * (_1141.y + (-0.5));
        float _1181 = _1178 * (_1141.z + (-0.5));
        float _1188 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1148.x + (-0.5));
        float _1190 = _1188 * (_1148.y + (-0.5));
        float _1191 = _1188 * (_1148.z + (-0.5));
        float _1198 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1155.x + (-0.5));
        float _1200 = _1198 * (_1155.y + (-0.5));
        float _1201 = _1198 * (_1155.z + (-0.5));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = _1169 * 0.5;
        float _1206 = _1179 * 0.5;
        float _1207 = _1189 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1222 = (dot(vec3(_764, _765, _766), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1232 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3967 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1234 + 1.0))) + _1239) * _1202;
        float _1249 = _1170 * 0.5;
        float _1250 = _1180 * 0.5;
        float _1251 = _1190 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_764, _765, _766), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4000 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1276 + 1.0))) + _1281) * _1203;
        float _1291 = _1171 * 0.5;
        float _1292 = _1181 * 0.5;
        float _1293 = _1191 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_764, _765, _766), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4033 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1318 + 1.0))) + _1323) * _1204;
        _1340 = _1171;
        _1342 = _1170;
        _1343 = _1169;
        _1344 = _1181;
        _1345 = _1180;
        _1346 = _1179;
        _1347 = _1191;
        _1348 = _1190;
        _1349 = _1189;
        _1350 = _1204;
        _1351 = _1203;
        _1352 = _1202;
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
    }
    else
    {
        _1340 = _1341;
        _1342 = _1341;
        _1343 = _1341;
        _1344 = _1341;
        _1345 = _1341;
        _1346 = _1341;
        _1347 = _1341;
        _1348 = _1341;
        _1349 = _1341;
        _1350 = _1341;
        _1351 = _1341;
        _1352 = _1341;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1383 = fma(_1012, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004));
        float _1387 = fma(_1012, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004));
        float _1391 = fma(_1012, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004));
        float _1414 = _1004 + _764;
        float _1415 = _1008 + _765;
        float _1416 = _1012 + _766;
        float _1426 = fma(_1416, cbModelParam._m0[30u].z, fma(_1415, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1414)) - _1383;
        float _1427 = fma(_1416, cbModelParam._m0[31u].z, fma(_1415, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1414)) - _1387;
        float _1428 = fma(_1416, cbModelParam._m0[32u].z, fma(_1415, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1414)) - _1391;
        float _1432 = inversesqrt(dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428)));
        float _1445 = ((_1432 * _1426) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1383 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1446 = ((_1432 * _1427) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1387 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1447 = ((_1432 * _1428) / cbModelParam._m0[35u].z) + ((((((_1391 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        float _1482 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1449.x + (-0.5));
        float _1484 = _1482 * (_1449.y + (-0.5));
        float _1485 = _1482 * (_1449.z + (-0.5));
        float _1492 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1456.x + (-0.5));
        float _1494 = _1492 * (_1456.y + (-0.5));
        float _1495 = _1492 * (_1456.z + (-0.5));
        float _1502 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1463.x + (-0.5));
        float _1504 = _1502 * (_1463.y + (-0.5));
        float _1505 = _1502 * (_1463.z + (-0.5));
        float _1512 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1470.x + (-0.5));
        float _1514 = _1512 * (_1470.y + (-0.5));
        float _1515 = _1512 * (_1470.z + (-0.5));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = _1483 * 0.5;
        float _1520 = _1493 * 0.5;
        float _1521 = _1503 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_764, _765, _766), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4096 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1546 + 1.0))) + _1551) * _1516;
        float _1561 = _1484 * 0.5;
        float _1562 = _1494 * 0.5;
        float _1563 = _1504 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_764, _765, _766), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4129 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1588 + 1.0))) + _1593) * _1517;
        float _1603 = _1485 * 0.5;
        float _1604 = _1495 * 0.5;
        float _1605 = _1505 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_764, _765, _766), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4162 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1630 + 1.0))) + _1635) * _1518;
        _1652 = _1485;
        _1653 = _1484;
        _1654 = _1483;
        _1655 = _1495;
        _1656 = _1494;
        _1657 = _1493;
        _1658 = _1505;
        _1659 = _1504;
        _1660 = _1503;
        _1661 = _1518;
        _1662 = _1517;
        _1663 = _1516;
        _1664 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
    }
    else
    {
        _1652 = _1341;
        _1653 = _1341;
        _1654 = _1341;
        _1655 = _1341;
        _1656 = _1341;
        _1657 = _1341;
        _1658 = _1341;
        _1659 = _1341;
        _1660 = _1341;
        _1661 = _1341;
        _1662 = _1341;
        _1663 = _1341;
        _1664 = 0.0;
        _1665 = 0.0;
        _1666 = 0.0;
    }
    float _1676 = (cbModelParam._m0[1u].x * (_1664 - _1353)) + _1353;
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1354)) + _1354;
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1355)) + _1355;
    float _1699 = fma(_1678, cbSceneParam._m0[89u].z, fma(_1677, cbSceneParam._m0[89u].y, _1676 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1678, cbSceneParam._m0[90u].z, fma(_1677, cbSceneParam._m0[90u].y, _1676 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1678, cbSceneParam._m0[91u].z, fma(_1677, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1676));
    float _1720 = _949 * 0.5;
    float _1721 = _950 * 0.5;
    float _1722 = _951 * 0.5;
    float _1723 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1726 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1729 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1652, _1655, _1658, _1661));
    float _1763;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1736 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1340, _1344, _1347, _1350));
        float _1740 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1342, _1345, _1348, _1351));
        float _1744 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1751 = dot(vec4(cbModelParam._m0[39u]), vec4(_1720, _1721, _1722, 1.0));
        _1763 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1751) ? 0.0 : (isnan(0.0) ? _1751 : max(0.0, _1751))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1763 = 1.0;
    }
    float _1774;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1765 = dot(vec4(cbModelParam._m0[40u]), vec4(_1720, _1721, _1722, 1.0));
        _1774 = dot(vec3(isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1765) ? 0.0 : (isnan(0.0) ? _1765 : max(0.0, _1765))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1774 = 1.0;
    }
    float _1778 = (_1774 * cbModelParam._m0[1u].x) + (_1763 * (1.0 - cbModelParam._m0[1u].x));
    float _1788 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _767);
    float _1789 = isnan(_1788) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1788 : min(cbModelParam._m0[25u].z, _1788));
    float _1871;
    float _1873;
    float _1875;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1838 = fma(_1012, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004)) + cbModelParam._m0[13u].w;
        float _1842 = fma(_1012, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004)) + cbModelParam._m0[14u].w;
        float _1846 = fma(_1012, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004)) + cbModelParam._m0[15u].w;
        float _1849 = fma(_951, cbModelParam._m0[13u].z, fma(_950, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949));
        float _1852 = fma(_951, cbModelParam._m0[14u].z, fma(_950, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949));
        float _1855 = fma(_951, cbModelParam._m0[15u].z, fma(_950, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949));
        float _1883;
        if (_1849 > 0.0)
        {
            _1883 = abs((1.0 - _1838) / _1849);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1838 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1883 = frontier_phi_17_15_ladder;
        }
        float _2086;
        if (_1852 > 0.0)
        {
            _2086 = abs((1.0 - _1842) / _1852);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1842 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2086 = frontier_phi_26_22_ladder;
        }
        float _2340;
        if (_1855 > 0.0)
        {
            _2340 = abs((1.0 - _1846) / _1855);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1846 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2340 = frontier_phi_38_33_ladder;
        }
        float _2342 = isnan(_2086) ? _1883 : (isnan(_1883) ? _2086 : min(_1883, _2086));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1849) + _1838;
        float _2348 = (_2343 * _1852) + _1842;
        float _2349 = (_2343 * _1855) + _1846;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2352 = (-1.0) - _2350;
        float _2354 = _2350 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2349 > _2354) || ((_2349 < _2352) || ((_2348 > _2354) || ((_2348 < _2352) || ((_2347 < _2352) || (_2347 > _2354))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2477 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2349, cbModelParam._m0[9u].z, fma(_2348, cbModelParam._m0[9u].y, _2347 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2349, cbModelParam._m0[10u].z, fma(_2348, cbModelParam._m0[10u].y, _2347 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2349, cbModelParam._m0[11u].z, fma(_2348, cbModelParam._m0[11u].y, _2347 * cbModelParam._m0[11u].x))), _1789);
            frontier_phi_16_38_ladder = _2477.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2477.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2477.x * cbModelParam._m0[1u].y;
        }
        _1871 = frontier_phi_16_38_ladder_2;
        _1873 = frontier_phi_16_38_ladder_1;
        _1875 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1859 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_949, _950, _951), _1789);
        _1871 = _1859.x * cbModelParam._m0[1u].y;
        _1873 = _1859.y * cbModelParam._m0[1u].y;
        _1875 = _1859.z * cbModelParam._m0[1u].y;
    }
    float _1879 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _767);
    float _1880 = isnan(_1879) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1879 : min(cbModelParam._m0[25u].w, _1879));
    float _1970;
    float _1972;
    float _1974;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1934 = fma(_1012, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004)) + cbModelParam._m0[21u].w;
        float _1938 = fma(_1012, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004)) + cbModelParam._m0[22u].w;
        float _1942 = fma(_1012, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004)) + cbModelParam._m0[23u].w;
        float _1945 = fma(_951, cbModelParam._m0[21u].z, fma(_950, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949));
        float _1948 = fma(_951, cbModelParam._m0[22u].z, fma(_950, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949));
        float _1951 = fma(_951, cbModelParam._m0[23u].z, fma(_950, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949));
        float _2091;
        if (_1945 > 0.0)
        {
            _2091 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2091 = frontier_phi_28_24_ladder;
        }
        float _2367;
        if (_1948 > 0.0)
        {
            _2367 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2367 = frontier_phi_40_35_ladder;
        }
        float _2580;
        if (_1951 > 0.0)
        {
            _2580 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2580 = frontier_phi_49_46_ladder;
        }
        float _2582 = isnan(_2367) ? _2091 : (isnan(_2091) ? _2367 : min(_2091, _2367));
        float _2583 = isnan(_2580) ? _2582 : (isnan(_2582) ? _2580 : min(_2582, _2580));
        float _2587 = (_2583 * _1945) + _1934;
        float _2588 = (_2583 * _1948) + _1938;
        float _2589 = (_2583 * _1951) + _1942;
        float _2590 = _2583 * 9.9999997473787516355514526367188e-05;
        float _2591 = (-1.0) - _2590;
        float _2593 = _2590 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2589 > _2593) || ((_2589 < _2591) || ((_2588 > _2593) || ((_2588 < _2591) || ((_2587 < _2591) || (_2587 > _2593))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2788 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2589, cbModelParam._m0[17u].z, fma(_2588, cbModelParam._m0[17u].y, _2587 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2589, cbModelParam._m0[18u].z, fma(_2588, cbModelParam._m0[18u].y, _2587 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2589, cbModelParam._m0[19u].z, fma(_2588, cbModelParam._m0[19u].y, _2587 * cbModelParam._m0[19u].x))), _1880);
            frontier_phi_25_49_ladder = _2788.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2788.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2788.x * cbModelParam._m0[1u].z;
        }
        _1970 = frontier_phi_25_49_ladder_2;
        _1972 = frontier_phi_25_49_ladder_1;
        _1974 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1954 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_949, _950, _951), _1880);
        _1970 = _1954.x * cbModelParam._m0[1u].z;
        _1972 = _1954.y * cbModelParam._m0[1u].z;
        _1974 = _1954.z * cbModelParam._m0[1u].z;
    }
    float _1987 = (((_975 * _925) + _976) * _941) * ((cbModelParam._m0[1u].w * (_1970 - _1871)) + _1871);
    float _1989 = (((_975 * _927) + _976) * _941) * ((cbModelParam._m0[1u].w * (_1972 - _1873)) + _1873);
    float _1991 = (((_975 * _928) + _976) * _941) * ((cbModelParam._m0[1u].w * (_1974 - _1875)) + _1875);
    float _1994 = fma(_1991, cbSceneParam._m0[89u].z, fma(_1989, cbSceneParam._m0[89u].y, _1987 * cbSceneParam._m0[89u].x));
    float _1997 = fma(_1991, cbSceneParam._m0[90u].z, fma(_1989, cbSceneParam._m0[90u].y, _1987 * cbSceneParam._m0[90u].x));
    float _2000 = fma(_1991, cbSceneParam._m0[91u].z, fma(_1989, cbSceneParam._m0[91u].y, _1987 * cbSceneParam._m0[91u].x));
    uvec4 _2010 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2012 = _2010.x * 14u;
    uint _2013 = _2012 + 13u;
    float _2020 = _941 + (-1.0);
    float _2025 = (cbLight._m0[_2013].x * _2020) + 1.0;
    float _2026 = (cbLight._m0[_2013].y * _2020) + 1.0;
    float _2027 = (cbLight._m0[_2013].z * _2020) + 1.0;
    float _2028 = (cbLight._m0[_2013].w * _2020) + 1.0;
    uint _2029 = _2012 + 5u;
    float _2035 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
    uint _2039 = _2012 + 4u;
    float _2045 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
    uint _2049 = _2012 | 1u;
    float _2060 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_764, _765, _766));
    float _2063 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_764, _765, _766));
    float _4298 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _4309 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2068 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * 0.3183098733425140380859375;
    float _2070 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * 0.3183098733425140380859375;
    float _2077 = ((cbLight._m0[_2029].x * _2035) * _2070) + ((cbLight._m0[_2039].x * _2045) * _2068);
    float _2078 = ((_2035 * cbLight._m0[_2029].y) * _2070) + ((_2045 * cbLight._m0[_2039].y) * _2068);
    float _2079 = ((_2035 * cbLight._m0[_2029].z) * _2070) + ((_2045 * cbLight._m0[_2039].z) * _2068);
    uvec4 _2083 = floatBitsToUint(cbLight._m0[_2012 + 12u]);
    bool _2085 = _2083.x == 0u;
    float _2096;
    float _2098;
    float _2100;
    if (_2085)
    {
        _2096 = _2077;
        _2098 = _2078;
        _2100 = _2079;
    }
    else
    {
        uint _2104 = _2012 + 6u;
        float _2120 = (dot(vec3(cbLight._m0[_2012 + 2u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2121 = _2120 * _2120;
        float _4320 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2122 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2123 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
        _2096 = (((cbLight._m0[_2104].x * 0.3183098733425140380859375) * _2122) * _2123) + _2077;
        _2098 = (((cbLight._m0[_2104].y * 0.3183098733425140380859375) * _2122) * _2123) + _2078;
        _2100 = (((cbLight._m0[_2104].z * 0.3183098733425140380859375) * _2122) * _2123) + _2079;
    }
    bool _2103 = _2083.y == 0u;
    float _2141;
    float _2143;
    float _2145;
    if (_2103)
    {
        _2141 = _2096;
        _2143 = _2098;
        _2145 = _2100;
    }
    else
    {
        uint _2311 = _2012 + 7u;
        float _2327 = (dot(vec3(cbLight._m0[_2012 + 3u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2328 = _2327 * _2327;
        float _4336 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2329 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2330 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
        _2141 = (((cbLight._m0[_2311].x * 0.3183098733425140380859375) * _2329) * _2330) + _2096;
        _2143 = (((cbLight._m0[_2311].y * 0.3183098733425140380859375) * _2329) * _2330) + _2098;
        _2145 = (((cbLight._m0[_2311].z * 0.3183098733425140380859375) * _2329) * _2330) + _2100;
    }
    uint _2148 = _2012 + 8u;
    float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2012].w)) * _767) * 0.949999988079071044921875);
    float _2162 = _2161 * _2161;
    float _2163 = cbLight._m0[_2012].x + _843;
    float _2164 = cbLight._m0[_2012].y + _844;
    float _2165 = cbLight._m0[_2012].z + _845;
    float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
    float _2170 = _2169 * _2163;
    float _2171 = _2169 * _2164;
    float _2172 = _2169 * _2165;
    float _2173 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2012].xyz));
    float _4352 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _4363 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _2177 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2178 = dot(vec3(_764, _765, _766), vec3(_2170, _2171, _2172));
    float _4374 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2182 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_2170, _2171, _2172));
    float _4385 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2186 = _2162 * _2162;
    float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
    float _2198 = exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0);
    float _2199 = 0.959999978542327880859375 - _922;
    float _2201 = 0.959999978542327880859375 - _923;
    float _2202 = 0.959999978542327880859375 - _924;
    float _2209 = 1.0 - _2162;
    float _2220 = (0.5 / (((_2177 * ((_2176 * _2209) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2209) + _2162) * _2176))) * _2176;
    float _4396 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2222 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
    uint _2233 = _2012 + 9u;
    float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2049].w)) * _767) * 0.949999988079071044921875);
    float _2245 = _2244 * _2244;
    float _2246 = cbLight._m0[_2049].x + _843;
    float _2247 = cbLight._m0[_2049].y + _844;
    float _2248 = cbLight._m0[_2049].z + _845;
    float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
    float _2253 = _2252 * _2246;
    float _2254 = _2252 * _2247;
    float _2255 = _2252 * _2248;
    float _2256 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2049].xyz));
    float _4407 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2260 = dot(vec3(_764, _765, _766), vec3(_2253, _2254, _2255));
    float _4418 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2264 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2253, _2254, _2255));
    float _4429 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2268 = _2245 * _2245;
    float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
    float _2279 = exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0);
    float _2286 = 1.0 - _2245;
    float _2296 = (0.5 / (((_2177 * ((_2259 * _2286) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2286) + _2245) * _2259))) * _2259;
    float _4440 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2298 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
    float _2308 = (((((_2279 * _2199) + _925) * cbLight._m0[_2233].x) * _2298) * _2035) + (((((_2198 * _2199) + _925) * cbLight._m0[_2148].x) * _2222) * _2045);
    float _2309 = (((((_2279 * _2201) + _927) * cbLight._m0[_2233].y) * _2298) * _2035) + (((((_2198 * _2201) + _927) * cbLight._m0[_2148].y) * _2222) * _2045);
    float _2310 = (((((_2279 * _2202) + _928) * cbLight._m0[_2233].z) * _2298) * _2035) + (((((_2198 * _2202) + _928) * cbLight._m0[_2148].z) * _2222) * _2045);
    float _2372;
    float _2374;
    float _2376;
    if (_2085)
    {
        _2372 = _2308;
        _2374 = _2309;
        _2376 = _2310;
    }
    else
    {
        uint _2378 = _2012 + 2u;
        uint _2382 = _2012 + 10u;
        float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _767) * 0.949999988079071044921875);
        float _2397 = _2396 * _2396;
        float _2398 = cbLight._m0[_2378].x + _843;
        float _2399 = cbLight._m0[_2378].y + _844;
        float _2400 = cbLight._m0[_2378].z + _845;
        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
        float _2405 = _2404 * _2398;
        float _2406 = _2404 * _2399;
        float _2407 = _2404 * _2400;
        float _2408 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2378].xyz));
        float _4451 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2412 = dot(vec3(_764, _765, _766), vec3(_2405, _2406, _2407));
        float _4462 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2416 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2405, _2406, _2407));
        float _4473 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2420 = _2397 * _2397;
        float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
        float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0);
        float _2438 = 1.0 - _2397;
        float _2448 = (0.5 / (((_2177 * ((_2411 * _2438) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2438) + _2397) * _2411))) * _2411;
        float _4484 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2450 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
        float _2451 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
        _2372 = (((((_2431 * _2199) + _925) * cbLight._m0[_2382].x) * _2450) * _2451) + _2308;
        _2374 = (((((_2431 * _2201) + _927) * cbLight._m0[_2382].y) * _2450) * _2451) + _2309;
        _2376 = (((((_2431 * _2202) + _928) * cbLight._m0[_2382].z) * _2450) * _2451) + _2310;
    }
    float _2486;
    float _2488;
    float _2490;
    if (_2103)
    {
        _2486 = _2372;
        _2488 = _2374;
        _2490 = _2376;
    }
    else
    {
        uint _2497 = _2012 + 3u;
        uint _2501 = _2012 + 11u;
        float _2515 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2497].w)) * _767) * 0.949999988079071044921875);
        float _2516 = _2515 * _2515;
        float _2517 = cbLight._m0[_2497].x + _843;
        float _2518 = cbLight._m0[_2497].y + _844;
        float _2519 = cbLight._m0[_2497].z + _845;
        float _2523 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
        float _2524 = _2523 * _2517;
        float _2525 = _2523 * _2518;
        float _2526 = _2523 * _2519;
        float _2527 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2497].xyz));
        float _4500 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2531 = dot(vec3(_764, _765, _766), vec3(_2524, _2525, _2526));
        float _4511 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2535 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_2524, _2525, _2526));
        float _4522 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2539 = _2516 * _2516;
        float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
        float _2550 = exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0);
        float _2557 = 1.0 - _2516;
        float _2567 = (0.5 / (((_2177 * ((_2530 * _2557) + _2516)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2557) + _2516) * _2530))) * _2530;
        float _4533 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2569 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
        float _2570 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
        _2486 = (((((_2550 * _2199) + _925) * cbLight._m0[_2501].x) * _2569) * _2570) + _2372;
        _2488 = (((((_2550 * _2201) + _927) * cbLight._m0[_2501].y) * _2569) * _2570) + _2374;
        _2490 = (((((_2550 * _2202) + _928) * cbLight._m0[_2501].z) * _2569) * _2570) + _2376;
    }
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    if (_2010.y == 0u)
    {
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2646 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2645;
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2645;
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2645;
        uvec4 _2660 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2661 = _2660.x;
        uint _2672 = uint((float(_2660.y) * floor(float(uint(cbSceneParam._m0[85u].y * _864) / _2661))) + floor(float(uint(cbSceneParam._m0[85u].x * _863) / _2661)));
        float _2682 = (log2(_2648 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2683 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        uint _2686 = uint(isnan(14.0) ? _2683 : (isnan(_2683) ? 14.0 : min(_2683, 14.0)));
        uvec4 _2691 = texelFetch(g_lightClusterGridBuffer, int(((_2686 << 2u) + (_2672 << 6u)) >> 2u));
        uint _2692 = _2691.x;
        uint _2693 = _2660.z;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        if (((((1u << ((_2693 >> 4u) & 15u)) + 4294967295u) & _2692) == 0u) || ((_2693 & 240u) == 0u))
        {
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
        }
        else
        {
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            uint _2952 = 0u;
            uint _2961;
            bool _2962;
            for (;;)
            {
                _2961 = texelFetch(g_lightClassification, int((((_2686 << 5u) + (_2672 << 9u)) + (_2952 << 2u)) >> 2u)).x;
                _2962 = _2961 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2962)
                {
                    frontier_phi_66_pred = _2946;
                    frontier_phi_66_pred_1 = _2951;
                    frontier_phi_66_pred_2 = _2950;
                    frontier_phi_66_pred_3 = _2949;
                    frontier_phi_66_pred_4 = _2948;
                    frontier_phi_66_pred_5 = _2947;
                }
                else
                {
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    uint _3097;
                    _3091 = _2946;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2949;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2961;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    for (;;)
                    {
                        uint _3101 = uint(findLSB(_3097)) + (_2952 << 5u);
                        uint _3098 = (_3097 + 4294967295u) & _3097;
                        uint _3103 = _3101 * 48u;
                        vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 3u)).x));
                        uint _3123 = (_3101 * 48u) + 4u;
                        vec4 _3136 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3142 = (_3101 * 48u) + 8u;
                        vec3 _3153 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3142)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 2u)).x));
                        float _3157 = _3117.x - _2646;
                        float _3158 = _3117.y - _2647;
                        float _3159 = _3117.z - _2648;
                        float _3160 = dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159));
                        float _3163 = inversesqrt(_3160);
                        float _3164 = _3163 * _3157;
                        float _3165 = _3163 * _3158;
                        float _3166 = _3163 * _3159;
                        float _3167 = dot(vec3(_882, _885, _888), vec3(_3164, _3165, _3166));
                        float _3172 = 1.0 - (_3160 * _3117.w);
                        float _4559 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3173 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3174 = sqrt(_3160) * _3136.w;
                        float _3177 = 1.39999997615814208984375 / (_3174 + 1.39999997615814208984375);
                        float _3178 = _3177 * _3177;
                        float _3181 = ((1.0 - _3178) * _3167) + _3178;
                        float _3184 = _3174 * _3174;
                        float _3188 = ((isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))) * _3173) / ((_3184 * 0.699999988079071044921875) + 1.0);
                        float _3192 = (-0.0) - _2646;
                        float _3193 = (-0.0) - _2647;
                        float _3194 = (-0.0) - _2648;
                        float _3198 = inversesqrt(dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194)));
                        float _3199 = _3198 * _3192;
                        float _3200 = _3198 * _3193;
                        float _3201 = _3198 * _3194;
                        float _3209 = exp2(log2(1.0 / ((_3184 * 3.5) + 5.0)) * 0.25);
                        float _3210 = 1.0 - _957;
                        float _3217 = sqrt(1.0 - ((1.0 - (_3210 * _3210)) * (1.0 - (_3209 * _3209))));
                        float _3218 = _3217 * _3217;
                        float _3219 = _3218 * _3218;
                        float _3220 = _3199 + _3164;
                        float _3221 = _3200 + _3165;
                        float _3222 = _3201 + _3166;
                        float _3226 = inversesqrt(dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222)));
                        float _3230 = dot(vec3(_882, _885, _888), vec3(_3199, _3200, _3201));
                        float _4575 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3233 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3234 = dot(vec3(_882, _885, _888), vec3(_3226 * _3220, _3226 * _3221, _3226 * _3222));
                        float _4586 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3237 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3241 = ((_3237 * _3237) * (_3219 + (-1.0))) + 1.0;
                        float _3242 = _3177 * _3218;
                        float _3243 = _3242 * _3242;
                        float _3246 = ((1.0 - _3243) * _3167) + _3243;
                        float _4597 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3247 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3248 = 1.0 - _3218;
                        float _3258 = (0.5 / (((_3247 * ((_3233 * _3248) + _3218)) + 9.9999999392252902907785028219223e-09) + (((_3247 * _3248) + _3218) * _3233))) * _3247;
                        float _4608 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3268 = (((_3219 * 3.1415927410125732421875) * (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) / ((_3241 * _3241) * ((_3184 * 2.1991131305694580078125) + 3.141590118408203125))) * _3173;
                        _3021 = (_3188 * _3136.x) + _3094;
                        _3022 = (_3188 * _3136.y) + _3095;
                        _3023 = (_3188 * _3136.z) + _3096;
                        _3018 = (_3268 * _3153.x) + _3091;
                        _3019 = (_3268 * _3153.y) + _3092;
                        _3020 = (_3268 * _3153.z) + _3093;
                        if (_3098 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3091 = _3018;
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3021;
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3098;
                        }
                    }
                    frontier_phi_66_pred = _3018;
                    frontier_phi_66_pred_1 = _3023;
                    frontier_phi_66_pred_2 = _3022;
                    frontier_phi_66_pred_3 = _3021;
                    frontier_phi_66_pred_4 = _3020;
                    frontier_phi_66_pred_5 = _3019;
                }
                _2794 = frontier_phi_66_pred;
                _2804 = frontier_phi_66_pred_1;
                _2802 = frontier_phi_66_pred_2;
                _2800 = frontier_phi_66_pred_3;
                _2798 = frontier_phi_66_pred_4;
                _2796 = frontier_phi_66_pred_5;
                uint _2953 = _2952 + 1u;
                if (_2953 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2946 = _2794;
                    _2947 = _2796;
                    _2948 = _2798;
                    _2949 = _2800;
                    _2950 = _2802;
                    _2951 = _2804;
                    _2952 = _2953;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
        }
        uvec4 _2807 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2808 = _2807.z;
        uint _2810 = (_2808 >> 8u) & 15u;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        if (((4294967295u << _2810) & _2692) == 0u)
        {
            _2914 = _2793;
            _2916 = _2795;
            _2918 = _2797;
            _2920 = _2799;
            _2922 = _2801;
            _2924 = _2803;
        }
        else
        {
            float _2939 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
            float _2940 = _2939 * _2646;
            float _2941 = _2939 * _2647;
            float _2942 = _2939 * _2648;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2810 < ((_2808 >> 12u) & 15u))
            {
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _3074 = _2793;
                float _3075 = _2795;
                float _3076 = _2797;
                float _3077 = _2799;
                float _3078 = _2801;
                float _3079 = _2803;
                uint _3080 = _2810;
                uint _3089;
                bool _3090;
                for (;;)
                {
                    _3089 = texelFetch(g_lightClassification, int((((_2686 << 5u) + (_2672 << 9u)) + (_3080 << 2u)) >> 2u)).x;
                    _3090 = _3089 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3090)
                    {
                        frontier_phi_77_pred = _3079;
                        frontier_phi_77_pred_1 = _3078;
                        frontier_phi_77_pred_2 = _3077;
                        frontier_phi_77_pred_3 = _3076;
                        frontier_phi_77_pred_4 = _3075;
                        frontier_phi_77_pred_5 = _3074;
                    }
                    else
                    {
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3295 = _3074;
                        float _3296 = _3075;
                        float _3297 = _3076;
                        float _3298 = _3077;
                        float _3299 = _3078;
                        float _3300 = _3079;
                        uint _3301 = _3089;
                        uint _3302;
                        vec4 _3327;
                        float _3328;
                        vec4 _3343;
                        vec3 _3355;
                        vec4 _3370;
                        vec4 _3385;
                        float _3431;
                        bool _3432;
                        for (;;)
                        {
                            uint _3312 = ((_3080 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3301));
                            _3302 = (_3301 + 4294967295u) & _3301;
                            uint _3314 = _3312 * 40u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            _3328 = _3327.w;
                            uint _3330 = (_3312 * 40u) + 4u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3345 = (_3312 * 40u) + 8u;
                            _3355 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x));
                            uint _3357 = (_3312 * 40u) + 16u;
                            _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3372 = (_3312 * 40u) + 20u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3312 * 40u) + 24u;
                            vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3406 = (_3312 * 40u) + 28u;
                            vec4 _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            _3431 = fma(_2648, _3419.z, fma(_2647, _3419.y, _3419.x * _2646)) + _3419.w;
                            _3432 = !((fma(_2648, _3400.z, fma(_2647, _3400.y, _3400.x * _2646)) + _3400.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3432)
                            {
                                float _3459 = _3327.x - _2646;
                                float _3460 = _3327.y - _2647;
                                float _3461 = _3327.z - _2648;
                                float _3462 = dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461));
                                float _3465 = inversesqrt(_3462);
                                float _3466 = _3465 * _3459;
                                float _3467 = _3465 * _3460;
                                float _3468 = _3465 * _3461;
                                float _3472 = 1.0 - (_3462 / (_3328 * _3328));
                                float _4619 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3477 = sqrt(_3462) * _3343.w;
                                float _3479 = 1.39999997615814208984375 / (_3477 + 1.39999997615814208984375);
                                float _3480 = _3479 * _3479;
                                float _3483 = ((1.0 - _3480) * dot(vec3(_3466, _3467, _3468), vec3(_882, _885, _888))) + _3480;
                                float _3486 = _3477 * _3477;
                                float _3490 = (fma(_2648, _3370.z, fma(_2647, _3370.y, _3370.x * _2646)) + _3370.w) / _3431;
                                float _3491 = (fma(_2648, _3385.z, fma(_2647, _3385.y, _3385.x * _2646)) + _3385.w) / _3431;
                                float _3495 = 1.0 - dot(vec2(_3490, _3491), vec2(_3490, _3491));
                                float _4635 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3497 = _3496 * (((isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0))) * _3473) / ((_3486 * 0.699999988079071044921875) + 1.0));
                                float _3509 = exp2(log2(1.0 / ((_3486 * 3.5) + 5.0)) * 0.25);
                                float _3510 = 1.0 - _957;
                                float _3517 = sqrt(1.0 - ((1.0 - (_3510 * _3510)) * (1.0 - (_3509 * _3509))));
                                float _3518 = _3517 * _3517;
                                float _3519 = _3518 * _3518;
                                float _3520 = _3466 - _2940;
                                float _3521 = _3467 - _2941;
                                float _3522 = _3468 - _2942;
                                float _3526 = inversesqrt(dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522)));
                                float _3530 = dot(vec3(_882, _885, _888), vec3((-0.0) - _2940, (-0.0) - _2941, (-0.0) - _2942));
                                float _4646 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3533 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3534 = dot(vec3(_882, _885, _888), vec3(_3526 * _3520, _3526 * _3521, _3526 * _3522));
                                float _4657 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3537 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3541 = ((_3537 * _3537) * (_3519 + (-1.0))) + 1.0;
                                float _3542 = _3479 * _3518;
                                float _3543 = _3542 * _3542;
                                float _3549 = ((1.0 - _3543) * dot(vec3(_882, _885, _888), vec3(_3466, _3467, _3468))) + _3543;
                                float _4668 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3551 = 1.0 - _3518;
                                float _3561 = (0.5 / (((_3550 * ((_3533 * _3551) + _3518)) + 9.9999999392252902907785028219223e-09) + (((_3550 * _3551) + _3518) * _3533))) * _3550;
                                float _4679 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3571 = (_3496 * _3473) * (((_3519 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3541 * _3541) * ((_3486 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3497 * _3343.y;
                                frontier_phi_83_pred_1 = _3497 * _3343.x;
                                frontier_phi_83_pred_2 = _3571 * _3355.z;
                                frontier_phi_83_pred_3 = _3571 * _3355.y;
                                frontier_phi_83_pred_4 = _3571 * _3355.x;
                                frontier_phi_83_pred_5 = _3497 * _3343.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3579 = frontier_phi_83_pred;
                            _3578 = frontier_phi_83_pred_1;
                            _3577 = frontier_phi_83_pred_2;
                            _3576 = frontier_phi_83_pred_3;
                            _3575 = frontier_phi_83_pred_4;
                            _3580 = frontier_phi_83_pred_5;
                            _3285 = _3578 + _3298;
                            _3286 = _3579 + _3299;
                            _3287 = _3580 + _3300;
                            _3282 = _3575 + _3295;
                            _3283 = _3576 + _3296;
                            _3284 = _3577 + _3297;
                            if (_3302 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3302;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3287;
                        frontier_phi_77_pred_1 = _3286;
                        frontier_phi_77_pred_2 = _3285;
                        frontier_phi_77_pred_3 = _3284;
                        frontier_phi_77_pred_4 = _3283;
                        frontier_phi_77_pred_5 = _3282;
                    }
                    _2925 = frontier_phi_77_pred;
                    _2923 = frontier_phi_77_pred_1;
                    _2921 = frontier_phi_77_pred_2;
                    _2919 = frontier_phi_77_pred_3;
                    _2917 = frontier_phi_77_pred_4;
                    _2915 = frontier_phi_77_pred_5;
                    uint _3081 = _3080 + 1u;
                    if (_3081 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3074 = _2915;
                        _3075 = _2917;
                        _3076 = _2919;
                        _3077 = _2921;
                        _3078 = _2923;
                        _3079 = _2925;
                        _3080 = _3081;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2919;
                frontier_phi_58_59_ladder_1 = _2925;
                frontier_phi_58_59_ladder_2 = _2923;
                frontier_phi_58_59_ladder_3 = _2921;
                frontier_phi_58_59_ladder_4 = _2917;
                frontier_phi_58_59_ladder_5 = _2915;
            }
            else
            {
                frontier_phi_58_59_ladder = _2797;
                frontier_phi_58_59_ladder_1 = _2803;
                frontier_phi_58_59_ladder_2 = _2801;
                frontier_phi_58_59_ladder_3 = _2799;
                frontier_phi_58_59_ladder_4 = _2795;
                frontier_phi_58_59_ladder_5 = _2793;
            }
            _2914 = frontier_phi_58_59_ladder_5;
            _2916 = frontier_phi_58_59_ladder_4;
            _2918 = frontier_phi_58_59_ladder;
            _2920 = frontier_phi_58_59_ladder_3;
            _2922 = frontier_phi_58_59_ladder_2;
            _2924 = frontier_phi_58_59_ladder_1;
        }
        float _2929 = isnan(1.0) ? _941 : (isnan(_941) ? 1.0 : min(_941, 1.0));
        _2705 = (_2929 * _2920) + _2141;
        _2707 = (_2929 * _2922) + _2143;
        _2709 = (_2929 * _2924) + _2145;
        _2711 = ((_2914 * _925) * _2929) + _2486;
        _2713 = ((_2916 * _927) * _2929) + _2488;
        _2715 = ((_2918 * _928) * _2929) + _2490;
    }
    else
    {
        _2705 = _2141;
        _2707 = _2143;
        _2709 = _2145;
        _2711 = _2486;
        _2713 = _2488;
        _2715 = _2490;
    }
    float _4695 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4706 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4717 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _2732 = ((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2705 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _941))) + ((_2711 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1778)) * cbPerFrame._m0[3u].x);
    float _2733 = ((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2707 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _941))) + ((_2713 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1778)) * cbPerFrame._m0[3u].x);
    float _2734 = ((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2709 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _941))) + ((_2715 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1778)) * cbPerFrame._m0[3u].x);
    uint _2735 = _255 + 6u;
    float _2743 = _863 / cbSceneParam._m0[86u].x;
    float _2744 = _864 / cbSceneParam._m0[86u].y;
    vec4 _2758 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2743, _2744, (log2((isnan(cbSceneParam._m0[77u].w) ? _786 : (isnan(_786) ? cbSceneParam._m0[77u].w : min(_786, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2760 = _2758.x;
    float _2761 = _2758.y;
    float _2762 = _2758.z;
    float _2763 = _2758.w;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    if (_786 > cbSceneParam._m0[78u].w)
    {
        float _2818 = isnan(_786) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _786 : min(cbSceneParam._m0[80u].w, _786));
        float _2819 = _2818 / _786;
        float _2830 = _2819 * _836;
        float _2831 = _837 * _2819;
        float _2832 = (-0.0) - _2831;
        float _2834 = _2819 * _838;
        float _2836 = (cbSceneParam._m0[77u].w * _2832) / _2818;
        float _2837 = _2836 + cbSceneParam._m0[79u].w;
        float _2838 = cbSceneParam._m0[79u].w - _2831;
        float _2844 = sqrt(((_2830 * _2830) + (_2831 * _2831)) + (_2834 * _2834));
        float _2847 = (1.0 - (cbSceneParam._m0[77u].w / _2818)) * _2844;
        float _2852 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2854 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3031;
        if (abs((_2832 - _2836) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3031 = ((((_2837 > 0.0) ? exp2(_2852 * _2837) : (2.0 - exp2(_2854 * _2837))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2847;
        }
        else
        {
            float _2975 = 1.0 / cbSceneParam._m0[80u].x;
            float _2976 = isnan(_2838) ? _2837 : (isnan(_2837) ? _2838 : max(_2837, _2838));
            float _2977 = isnan(_2838) ? _2837 : (isnan(_2837) ? _2838 : min(_2837, _2838));
            float _2986 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : min(_2976, 0.0));
            float _2987 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : min(_2977, 0.0));
            _3031 = ((abs(_2844 / _2832) * cbSceneParam._m0[80u].y) * ((((_2986 - _2987) * 2.0) - ((exp2(_2852 * (isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0)))) - exp2(_2852 * (isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0))))) * _2975)) - ((exp2(_2854 * _2986) - exp2(_2854 * _2987)) * _2975))) + (_2847 * cbSceneParam._m0[80u].z);
        }
        vec4 _3033 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2743, _2744, 1.0), 0.0);
        float _3042 = exp2((_3031 * (-1.44269502162933349609375)) * (1.0 - _3033.w));
        float _3043 = log2(_3042);
        float _3059 = log2(_2763);
        _2856 = (exp2(_3059 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].x)) * _3033.x) / cbSceneParam._m0[78u].x)) + _2760;
        _2858 = (exp2(_3059 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].y)) * _3033.y) / cbSceneParam._m0[78u].y)) + _2761;
        _2860 = (exp2(_3059 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].z)) * _3033.z) / cbSceneParam._m0[78u].z)) + _2762;
        _2862 = _3042 * _2763;
    }
    else
    {
        _2856 = _2760;
        _2858 = _2761;
        _2860 = _2762;
        _2862 = _2763;
    }
    bool _3069;
    vec4 _2872;
    vec4 _2894;
    float _2896;
    float _2900;
    float _2901;
    float _2902;
    float _2903;
    bool _2913;
    for (;;)
    {
        _2872 = cbMatDynParam._m0[0u];
        float _2874 = roundEven(_2872.y);
        bool _2875 = _2874 == 3.0;
        float _2876 = log2(_2862);
        float _2883 = exp2(_2876 * cbSceneParam._m0[78u].x) * _2732;
        float _2884 = exp2(_2876 * cbSceneParam._m0[78u].y) * _2733;
        float _2885 = exp2(_2876 * cbSceneParam._m0[78u].z) * _2734;
        float _2892 = _852 + (-0.5);
        _2894 = cbMtdParam._m0[1u];
        _2896 = _2894.y * _2892;
        float _2899 = (_2874 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2900 = _2899 * (_2875 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2856)));
        _2901 = _2899 * (_2875 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2858)));
        _2902 = _2899 * (_2875 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2860)));
        _2903 = _2892 * 0.999000012874603271484375;
        _2913 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2913)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2903) < 0.5)
            {
                _3069 = true;
                break;
            }
        }
        uint _3010 = _901 + uint(_2872.w);
        if ((cbInstanceData._m0[_3010].w < 1.0) && ((cbInstanceData._m0[_3010].w + _2903) < 0.5))
        {
            _3069 = true;
            break;
        }
        if ((_2896 + 1.0) < _2894.x)
        {
            _3069 = true;
            break;
        }
        _3069 = false;
        break;
    }
    float _3273;
    if (_3069)
    {
        discard_state = true;
        _3273 = 0.0;
    }
    else
    {
        _3273 = cbInstanceData._m0[_2735].w;
    }
    SV_Target.x = _2900;
    SV_Target.y = _2901;
    SV_Target.z = _2902;
    SV_Target.w = _3273;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2735].w;
    discard_exit();
}


