#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1243;
float _3907;
float _3908;
float _3909;
float _3910;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _353 = _351.x;
    float _365 = dot(vec4(_353, _351.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _382 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_353 - _365) * cbMtdParam._m0[24u].y) + _365) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3919 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _390 = (_383 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _391 = (_383 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _392 = (_383 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _429 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _441 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _455 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_431 - _441) * cbMtdParam._m0[24u].y) + _441) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3930 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _463 = (_456 * ((_409.x * cbMtdParam._m0[13u].x) - _390)) + _390;
    float _464 = (_456 * ((_409.y * cbMtdParam._m0[13u].y) - _391)) + _391;
    float _465 = (_456 * ((_409.z * cbMtdParam._m0[13u].z) - _392)) + _392;
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _497 = _495.x;
    float _498 = _495.y;
    float _499 = _495.z;
    float _506 = ((_478.x - _497) * _383) + _497;
    float _507 = ((_478.y - _498) * _383) + _498;
    float _508 = ((_478.z - _499) * _383) + _499;
    vec4 _520 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _533 = ((_520.z - _508) * _456) + _508;
    float _536 = ((((_520.x - _506) * _456) + _506) * 2.0) + (-1.0);
    float _538 = ((((_520.y - _507) * _456) + _507) * 2.0) + (-1.0);
    float _539 = dot(vec2(_536, _538), vec2(_536, _538));
    float _3941 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _544 = sqrt(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))));
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _570 = (((_558.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _536;
    float _571 = (((_558.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _538;
    vec4 _583 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _597 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _599 = _597.x;
    float _617 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _599) * _383) + _599;
    float _635 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _264) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _265) + cbTextureTilingScale._m0[21u].w)).x - _617) * _456) + _617;
    float _639 = ((_583.x - _635) * cbMtdParam._m0[19u].z) + _635;
    float _643 = (cbMtdParam._m0[19u].w * (_558.z - _533)) + _533;
    float _648 = cbMtdParam._m0[22u].x + _558.w;
    float _651 = fma(_544, _231 * NORMAL.x, fma(_571, _238 * TANGENT.x, (_224 * _216) * _570));
    float _654 = fma(_544, _231 * NORMAL.y, fma(_571, _238 * TANGENT.y, (_224 * _217) * _570));
    float _657 = fma(_544, _231 * NORMAL.z, fma(_571, _238 * TANGENT.z, (_224 * _218) * _570));
    float _661 = inversesqrt(dot(vec3(_651, _654, _657), vec3(_651, _654, _657)));
    float _662 = _661 * _651;
    float _663 = _661 * _654;
    float _664 = _661 * _657;
    float _3952 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _665 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3974 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3985 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3996 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4007 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _670 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _684 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _735 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _725);
    float _736 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _725);
    float _737 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _725);
    float _741 = inversesqrt(dot(vec3(_735, _736, _737), vec3(_735, _736, _737)));
    float _742 = _735 * _741;
    float _743 = _736 * _741;
    float _744 = _737 * _741;
    vec4 _749 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _751 = _749.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _923 = sqrt(((_735 * _735) + (_736 * _736)) + (_737 * _737));
        float _929 = (cbMatDynParam._m0[5u].x * _923) + cbMatDynParam._m0[5u].y;
        float _4018 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _934 = (cbMatDynParam._m0[5u].z * _923) + cbMatDynParam._m0[5u].w;
        float _4029 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) - _930)) + _930) < ((_751 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _762 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _763 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _781 = fma(_664, cbSceneParam._m0[5u].z, fma(_663, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _662));
    float _784 = fma(_664, cbSceneParam._m0[6u].z, fma(_663, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _662));
    float _787 = fma(_664, cbSceneParam._m0[7u].z, fma(_663, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _662));
    uint _800 = _244 + 9u;
    uint _801 = _800 + uint(cbMatDynParam._m0[0u].w);
    float _807 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * cbInstanceData._m0[_801].x;
    float _808 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * cbInstanceData._m0[_801].y;
    float _809 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * cbInstanceData._m0[_801].z;
    float _4040 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _4062 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _813 = 1.0 - _670;
    float _814 = _810 * _813;
    float _815 = _811 * _813;
    float _816 = _812 * _813;
    float _821 = (_810 + (-0.039999999105930328369140625)) * _670;
    float _822 = (_811 + (-0.039999999105930328369140625)) * _670;
    float _823 = (_812 + (-0.039999999105930328369140625)) * _670;
    float _824 = _821 + 0.039999999105930328369140625;
    float _826 = _822 + 0.039999999105930328369140625;
    float _827 = _823 + 0.039999999105930328369140625;
    vec4 _836 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _762, cbSceneParam._m0[86u].y * _763));
    float _840 = ((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * TEXCOORD_5.w) * _836.x;
    float _841 = dot(vec3(_662, _663, _664), vec3(_742, _743, _744));
    float _844 = _841 * 2.0;
    float _848 = (_844 * _662) - _742;
    float _849 = (_844 * _663) - _743;
    float _850 = (_844 * _664) - _744;
    float _854 = abs(dot(vec3(_742, _743, _744), vec3(_662, _663, _664)));
    float _4073 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _856 = sqrt(_665);
    float _869 = exp2((_856 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_856 * 3.0));
    float _875 = (1.0 - _869) * ((_856 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _876 = _869 * _856;
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1242;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _967 = fma(_912, cbModelParam._m0[26u].z, fma(_908, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _904));
        float _971 = fma(_912, cbModelParam._m0[27u].z, fma(_908, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _904));
        float _975 = fma(_912, cbModelParam._m0[28u].z, fma(_908, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _904));
        float _1000 = _904 + _662;
        float _1001 = _908 + _663;
        float _1002 = _912 + _664;
        float _1012 = fma(_1002, cbModelParam._m0[26u].z, fma(_1001, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1000)) - _967;
        float _1013 = fma(_1002, cbModelParam._m0[27u].z, fma(_1001, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1000)) - _971;
        float _1014 = fma(_1002, cbModelParam._m0[28u].z, fma(_1001, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1000)) - _975;
        float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
        float _1031 = ((_1018 * _1012) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_967 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1018 * _1013) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_971 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1018 * _1014) / cbModelParam._m0[34u].z) + ((((((_975 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        float _1070 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1036.x + (-0.5));
        float _1072 = _1070 * (_1036.y + (-0.5));
        float _1073 = _1070 * (_1036.z + (-0.5));
        float _1080 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1043.x + (-0.5));
        float _1082 = _1080 * (_1043.y + (-0.5));
        float _1083 = _1080 * (_1043.z + (-0.5));
        float _1090 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1050.x + (-0.5));
        float _1092 = _1090 * (_1050.y + (-0.5));
        float _1093 = _1090 * (_1050.z + (-0.5));
        float _1100 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1057.x + (-0.5));
        float _1102 = _1100 * (_1057.y + (-0.5));
        float _1103 = _1100 * (_1057.z + (-0.5));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = _1071 * 0.5;
        float _1108 = _1081 * 0.5;
        float _1109 = _1091 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1124 = (dot(vec3(_662, _663, _664), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1134 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _4121 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1136 + 1.0))) + _1141) * _1104;
        float _1151 = _1072 * 0.5;
        float _1152 = _1082 * 0.5;
        float _1153 = _1092 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_662, _663, _664), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _4154 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1178 + 1.0))) + _1183) * _1105;
        float _1193 = _1073 * 0.5;
        float _1194 = _1083 * 0.5;
        float _1195 = _1093 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_662, _663, _664), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4187 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1220 + 1.0))) + _1225) * _1106;
        _1242 = _1073;
        _1244 = _1072;
        _1245 = _1071;
        _1246 = _1083;
        _1247 = _1082;
        _1248 = _1081;
        _1249 = _1093;
        _1250 = _1092;
        _1251 = _1091;
        _1252 = _1106;
        _1253 = _1105;
        _1254 = _1104;
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
    }
    else
    {
        _1242 = _1243;
        _1244 = _1243;
        _1245 = _1243;
        _1246 = _1243;
        _1247 = _1243;
        _1248 = _1243;
        _1249 = _1243;
        _1250 = _1243;
        _1251 = _1243;
        _1252 = _1243;
        _1253 = _1243;
        _1254 = _1243;
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
    }
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1284 = fma(_912, cbModelParam._m0[30u].z, fma(_908, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _904));
        float _1288 = fma(_912, cbModelParam._m0[31u].z, fma(_908, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _904));
        float _1292 = fma(_912, cbModelParam._m0[32u].z, fma(_908, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _904));
        float _1315 = _904 + _662;
        float _1316 = _908 + _663;
        float _1317 = _912 + _664;
        float _1327 = fma(_1317, cbModelParam._m0[30u].z, fma(_1316, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1315)) - _1284;
        float _1328 = fma(_1317, cbModelParam._m0[31u].z, fma(_1316, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1315)) - _1288;
        float _1329 = fma(_1317, cbModelParam._m0[32u].z, fma(_1316, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1315)) - _1292;
        float _1333 = inversesqrt(dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329)));
        float _1346 = ((_1333 * _1327) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1284 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1333 * _1328) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1288 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1333 * _1329) / cbModelParam._m0[35u].z) + ((((((_1292 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        float _1383 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1350.x + (-0.5));
        float _1385 = _1383 * (_1350.y + (-0.5));
        float _1386 = _1383 * (_1350.z + (-0.5));
        float _1393 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1357.x + (-0.5));
        float _1395 = _1393 * (_1357.y + (-0.5));
        float _1396 = _1393 * (_1357.z + (-0.5));
        float _1403 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1364.x + (-0.5));
        float _1405 = _1403 * (_1364.y + (-0.5));
        float _1406 = _1403 * (_1364.z + (-0.5));
        float _1413 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1371.x + (-0.5));
        float _1415 = _1413 * (_1371.y + (-0.5));
        float _1416 = _1413 * (_1371.z + (-0.5));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = _1384 * 0.5;
        float _1421 = _1394 * 0.5;
        float _1422 = _1404 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_662, _663, _664), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4250 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1447 + 1.0))) + _1452) * _1417;
        float _1462 = _1385 * 0.5;
        float _1463 = _1395 * 0.5;
        float _1464 = _1405 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_662, _663, _664), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4283 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1489 + 1.0))) + _1494) * _1418;
        float _1504 = _1386 * 0.5;
        float _1505 = _1396 * 0.5;
        float _1506 = _1406 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_662, _663, _664), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4316 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1531 + 1.0))) + _1536) * _1419;
        _1553 = _1386;
        _1554 = _1385;
        _1555 = _1384;
        _1556 = _1396;
        _1557 = _1395;
        _1558 = _1394;
        _1559 = _1406;
        _1560 = _1405;
        _1561 = _1404;
        _1562 = _1419;
        _1563 = _1418;
        _1564 = _1417;
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
    }
    else
    {
        _1553 = _1243;
        _1554 = _1243;
        _1555 = _1243;
        _1556 = _1243;
        _1557 = _1243;
        _1558 = _1243;
        _1559 = _1243;
        _1560 = _1243;
        _1561 = _1243;
        _1562 = _1243;
        _1563 = _1243;
        _1564 = _1243;
        _1565 = 0.0;
        _1566 = 0.0;
        _1567 = 0.0;
    }
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1255)) + _1255;
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1256)) + _1256;
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1257)) + _1257;
    float _1600 = fma(_1579, cbSceneParam._m0[89u].z, fma(_1578, cbSceneParam._m0[89u].y, _1577 * cbSceneParam._m0[89u].x));
    float _1603 = fma(_1579, cbSceneParam._m0[90u].z, fma(_1578, cbSceneParam._m0[90u].y, _1577 * cbSceneParam._m0[90u].x));
    float _1606 = fma(_1579, cbSceneParam._m0[91u].z, fma(_1578, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1577));
    float _1621 = _848 * 0.5;
    float _1622 = _849 * 0.5;
    float _1623 = _850 * 0.5;
    float _1624 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1627 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1630 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1664;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1637 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1242, _1246, _1249, _1252));
        float _1641 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1244, _1247, _1250, _1253));
        float _1645 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1245, _1248, _1251, _1254));
        float _1652 = dot(vec4(cbModelParam._m0[39u]), vec4(_1621, _1622, _1623, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1675;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1666 = dot(vec4(cbModelParam._m0[40u]), vec4(_1621, _1622, _1623, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1666) ? 0.0 : (isnan(0.0) ? _1666 : max(0.0, _1666))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1679 = (_1675 * cbModelParam._m0[1u].x) + (_1664 * (1.0 - cbModelParam._m0[1u].x));
    float _1689 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _665);
    float _1690 = isnan(_1689) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1689 : min(cbModelParam._m0[25u].z, _1689));
    float _1772;
    float _1774;
    float _1776;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1739 = fma(_912, cbModelParam._m0[13u].z, fma(_908, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _904)) + cbModelParam._m0[13u].w;
        float _1743 = fma(_912, cbModelParam._m0[14u].z, fma(_908, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _904)) + cbModelParam._m0[14u].w;
        float _1747 = fma(_912, cbModelParam._m0[15u].z, fma(_908, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _904)) + cbModelParam._m0[15u].w;
        float _1750 = fma(_850, cbModelParam._m0[13u].z, fma(_849, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _848));
        float _1753 = fma(_850, cbModelParam._m0[14u].z, fma(_849, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _848));
        float _1756 = fma(_850, cbModelParam._m0[15u].z, fma(_849, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _848));
        float _1784;
        if (_1750 > 0.0)
        {
            _1784 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1784 = frontier_phi_17_15_ladder;
        }
        float _1956;
        if (_1753 > 0.0)
        {
            _1956 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1956 = frontier_phi_26_22_ladder;
        }
        float _2251;
        if (_1756 > 0.0)
        {
            _2251 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2251 = frontier_phi_38_33_ladder;
        }
        float _2253 = isnan(_1956) ? _1784 : (isnan(_1784) ? _1956 : min(_1784, _1956));
        float _2254 = isnan(_2251) ? _2253 : (isnan(_2253) ? _2251 : min(_2253, _2251));
        float _2258 = (_2254 * _1750) + _1739;
        float _2259 = (_2254 * _1753) + _1743;
        float _2260 = (_2254 * _1756) + _1747;
        float _2261 = _2254 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2261;
        float _2265 = _2261 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 > _2265) || ((_2259 < _2263) || ((_2258 < _2263) || (_2258 > _2265))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2405 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2260, cbModelParam._m0[9u].z, fma(_2259, cbModelParam._m0[9u].y, _2258 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2260, cbModelParam._m0[10u].z, fma(_2259, cbModelParam._m0[10u].y, _2258 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2260, cbModelParam._m0[11u].z, fma(_2259, cbModelParam._m0[11u].y, _2258 * cbModelParam._m0[11u].x))), _1690);
            frontier_phi_16_38_ladder = _2405.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2405.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2405.x * cbModelParam._m0[1u].y;
        }
        _1772 = frontier_phi_16_38_ladder_2;
        _1774 = frontier_phi_16_38_ladder_1;
        _1776 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_848, _849, _850), _1690);
        _1772 = _1760.x * cbModelParam._m0[1u].y;
        _1774 = _1760.y * cbModelParam._m0[1u].y;
        _1776 = _1760.z * cbModelParam._m0[1u].y;
    }
    float _1780 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _665);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1780 : min(cbModelParam._m0[25u].w, _1780));
    float _1871;
    float _1873;
    float _1875;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1835 = fma(_912, cbModelParam._m0[21u].z, fma(_908, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _904)) + cbModelParam._m0[21u].w;
        float _1839 = fma(_912, cbModelParam._m0[22u].z, fma(_908, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _904)) + cbModelParam._m0[22u].w;
        float _1843 = fma(_912, cbModelParam._m0[23u].z, fma(_908, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _904)) + cbModelParam._m0[23u].w;
        float _1846 = fma(_850, cbModelParam._m0[21u].z, fma(_849, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _848));
        float _1849 = fma(_850, cbModelParam._m0[22u].z, fma(_849, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _848));
        float _1852 = fma(_850, cbModelParam._m0[23u].z, fma(_849, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _848));
        float _1961;
        if (_1846 > 0.0)
        {
            _1961 = abs((1.0 - _1835) / _1846);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1835 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1961 = frontier_phi_28_24_ladder;
        }
        float _2278;
        if (_1849 > 0.0)
        {
            _2278 = abs((1.0 - _1839) / _1849);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1839 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2278 = frontier_phi_40_35_ladder;
        }
        float _2616;
        if (_1852 > 0.0)
        {
            _2616 = abs((1.0 - _1843) / _1852);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1843 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2616 = frontier_phi_50_47_ladder;
        }
        float _2618 = isnan(_2278) ? _1961 : (isnan(_1961) ? _2278 : min(_1961, _2278));
        float _2619 = isnan(_2616) ? _2618 : (isnan(_2618) ? _2616 : min(_2618, _2616));
        float _2623 = (_2619 * _1846) + _1835;
        float _2624 = (_2619 * _1849) + _1839;
        float _2625 = (_2619 * _1852) + _1843;
        float _2626 = _2619 * 9.9999997473787516355514526367188e-05;
        float _2627 = (-1.0) - _2626;
        float _2629 = _2626 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2625 > _2629) || ((_2625 < _2627) || ((_2624 > _2629) || ((_2624 < _2627) || ((_2623 < _2627) || (_2623 > _2629))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2625, cbModelParam._m0[17u].z, fma(_2624, cbModelParam._m0[17u].y, _2623 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2625, cbModelParam._m0[18u].z, fma(_2624, cbModelParam._m0[18u].y, _2623 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2625, cbModelParam._m0[19u].z, fma(_2624, cbModelParam._m0[19u].y, _2623 * cbModelParam._m0[19u].x))), _1781);
            frontier_phi_25_50_ladder = _2747.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2747.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2747.x * cbModelParam._m0[1u].z;
        }
        _1871 = frontier_phi_25_50_ladder_2;
        _1873 = frontier_phi_25_50_ladder_1;
        _1875 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_848, _849, _850), _1781);
        _1871 = _1855.x * cbModelParam._m0[1u].z;
        _1873 = _1855.y * cbModelParam._m0[1u].z;
        _1875 = _1855.z * cbModelParam._m0[1u].z;
    }
    float _1888 = (((_875 * _824) + _876) * _840) * ((cbModelParam._m0[1u].w * (_1871 - _1772)) + _1772);
    float _1890 = (((_875 * _826) + _876) * _840) * ((cbModelParam._m0[1u].w * (_1873 - _1774)) + _1774);
    float _1892 = (((_875 * _827) + _876) * _840) * ((cbModelParam._m0[1u].w * (_1875 - _1776)) + _1776);
    float _1895 = fma(_1892, cbSceneParam._m0[89u].z, fma(_1890, cbSceneParam._m0[89u].y, _1888 * cbSceneParam._m0[89u].x));
    float _1898 = fma(_1892, cbSceneParam._m0[90u].z, fma(_1890, cbSceneParam._m0[90u].y, _1888 * cbSceneParam._m0[90u].x));
    float _1901 = fma(_1892, cbSceneParam._m0[91u].z, fma(_1890, cbSceneParam._m0[91u].y, _1888 * cbSceneParam._m0[91u].x));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1939 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1943 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1947 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1948 = _1935 / _1947;
    float _1949 = _1939 / _1947;
    float _1950 = _1943 / _1947;
    float _2097;
    float _2098;
    float _2099;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1977 = ((uint(_1950 > cbSceneParam._m0[59u].y) + uint(_1950 > cbSceneParam._m0[59u].x)) + uint(_1950 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1978 = _1977 + 43u;
        uint _1986 = _1977 + 44u;
        uint _1994 = _1977 + 45u;
        uint _2002 = _1977 + 46u;
        float _2013 = fma(_1947, cbSceneParam._m0[_1978].w, fma(_1943, cbSceneParam._m0[_1978].z, fma(_1939, cbSceneParam._m0[_1978].y, _1935 * cbSceneParam._m0[_1978].x)));
        float _2017 = fma(_1947, cbSceneParam._m0[_1986].w, fma(_1943, cbSceneParam._m0[_1986].z, fma(_1939, cbSceneParam._m0[_1986].y, _1935 * cbSceneParam._m0[_1986].x)));
        float _2025 = fma(_1947, cbSceneParam._m0[_2002].w, fma(_1943, cbSceneParam._m0[_2002].z, fma(_1939, cbSceneParam._m0[_2002].y, _1935 * cbSceneParam._m0[_2002].x)));
        float _2030 = cbSceneParam._m0[33u].z * _2025;
        float _2032 = cbSceneParam._m0[33u].w * _2025;
        float _2035 = fma(_1947, cbSceneParam._m0[_1994].w, fma(_1943, cbSceneParam._m0[_1994].z, fma(_1939, cbSceneParam._m0[_1994].y, _1935 * cbSceneParam._m0[_1994].x))) / _2025;
        float _2083 = (cbSceneParam._m0[33u].x - sqrt(((_1949 * _1949) + (_1948 * _1948)) + (_1950 * _1950))) * cbSceneParam._m0[33u].y;
        float _4442 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2090 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2030 + _2013) / _2025, (_2032 + _2017) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2032 + _2013) / _2025, (_2017 - _2030) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 - _2030) / _2025, (_2017 - _2032) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 - _2032) / _2025, (_2030 + _2017) / _2025), _2035), 0.0)).x), vec4(0.25)));
        _2097 = 1.0 - (_2090 * cbSceneParam._m0[34u].x);
        _2098 = 1.0 - (_2090 * cbSceneParam._m0[34u].y);
        _2099 = 1.0 - (_2090 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2097 = 1.0;
        _2098 = 1.0;
        _2099 = 1.0;
    }
    float _2163;
    float _2165;
    float _2167;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2151 = fma(_1947, cbSceneParam._m0[63u].w, fma(_1943, cbSceneParam._m0[63u].z, fma(_1939, cbSceneParam._m0[63u].y, _1935 * cbSceneParam._m0[63u].x)));
        float _2152 = fma(_1947, cbSceneParam._m0[60u].w, fma(_1943, cbSceneParam._m0[60u].z, fma(_1939, cbSceneParam._m0[60u].y, _1935 * cbSceneParam._m0[60u].x))) / _2151;
        float _2153 = fma(_1947, cbSceneParam._m0[61u].w, fma(_1943, cbSceneParam._m0[61u].z, fma(_1939, cbSceneParam._m0[61u].y, _1935 * cbSceneParam._m0[61u].x))) / _2151;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2152 >= cbSceneParam._m0[64u].x) && (_2153 >= cbSceneParam._m0[64u].y)) && (_2152 <= cbSceneParam._m0[64u].z)) && (_2153 <= cbSceneParam._m0[64u].w))
        {
            float _2291 = fma(_1947, cbSceneParam._m0[62u].w, fma(_1943, cbSceneParam._m0[62u].z, fma(_1939, cbSceneParam._m0[62u].y, _1935 * cbSceneParam._m0[62u].x))) / _2151;
            float _2295 = isnan(cbSceneParam._m0[41u].w) ? _2291 : (isnan(_2291) ? cbSceneParam._m0[41u].w : max(_2291, cbSceneParam._m0[41u].w));
            float _2338 = (cbSceneParam._m0[33u].x - sqrt(((_1949 * _1949) + (_1948 * _1948)) + (_1950 * _1950))) * cbSceneParam._m0[33u].y;
            float _4458 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
            float _2345 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2152, cbSceneParam._m0[33u].w + _2153), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2152, _2153 - cbSceneParam._m0[33u].z), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2152 - cbSceneParam._m0[33u].z, _2153 - cbSceneParam._m0[33u].w), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2152 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2153), _2295), 0.0)).x), vec4(0.25)));
            float _2349 = 1.0 - (_2345 * cbSceneParam._m0[34u].x);
            float _2350 = 1.0 - (_2345 * cbSceneParam._m0[34u].y);
            float _2351 = 1.0 - (_2345 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2351) ? _2099 : (isnan(_2099) ? _2351 : min(_2099, _2351));
            frontier_phi_37_36_ladder_1 = isnan(_2350) ? _2098 : (isnan(_2098) ? _2350 : min(_2098, _2350));
            frontier_phi_37_36_ladder_2 = isnan(_2349) ? _2097 : (isnan(_2097) ? _2349 : min(_2097, _2349));
        }
        else
        {
            frontier_phi_37_36_ladder = _2099;
            frontier_phi_37_36_ladder_1 = _2098;
            frontier_phi_37_36_ladder_2 = _2097;
        }
        _2163 = frontier_phi_37_36_ladder_2;
        _2165 = frontier_phi_37_36_ladder_1;
        _2167 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2163 = _2097;
        _2165 = _2098;
        _2167 = _2099;
    }
    uvec4 _2172 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2174 = _2172.x * 14u;
    uint _2175 = _2174 + 13u;
    float _2182 = _840 + (-1.0);
    float _2187 = (cbLight._m0[_2175].x * _2182) + 1.0;
    float _2188 = (cbLight._m0[_2175].y * _2182) + 1.0;
    float _2189 = (cbLight._m0[_2175].z * _2182) + 1.0;
    float _2190 = (cbLight._m0[_2175].w * _2182) + 1.0;
    uint _2191 = _2174 + 5u;
    float _2197 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
    uint _2201 = _2174 + 4u;
    float _2210 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
    uint _2214 = _2174 | 1u;
    float _2225 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_662, _663, _664));
    float _2228 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_662, _663, _664));
    float _4494 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _4505 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2233 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * 0.3183098733425140380859375;
    float _2235 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * 0.3183098733425140380859375;
    float _2242 = ((cbLight._m0[_2191].x * _2197) * _2235) + (((cbLight._m0[_2201].x * _2163) * _2210) * _2233);
    float _2243 = ((_2197 * cbLight._m0[_2191].y) * _2235) + (((cbLight._m0[_2201].y * _2165) * _2210) * _2233);
    float _2244 = ((_2197 * cbLight._m0[_2191].z) * _2235) + (((cbLight._m0[_2201].z * _2167) * _2210) * _2233);
    uvec4 _2248 = floatBitsToUint(cbLight._m0[_2174 + 12u]);
    bool _2250 = _2248.x == 0u;
    float _2352;
    float _2354;
    float _2356;
    if (_2250)
    {
        _2352 = _2242;
        _2354 = _2243;
        _2356 = _2244;
    }
    else
    {
        uint _2360 = _2174 + 6u;
        float _2376 = (dot(vec3(cbLight._m0[_2174 + 2u].xyz), vec3(_662, _663, _664)) * 0.5) + 0.5;
        float _2377 = _2376 * _2376;
        float _4516 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2378 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2379 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2352 = (((cbLight._m0[_2360].x * 0.3183098733425140380859375) * _2378) * _2379) + _2242;
        _2354 = (((cbLight._m0[_2360].y * 0.3183098733425140380859375) * _2378) * _2379) + _2243;
        _2356 = (((cbLight._m0[_2360].z * 0.3183098733425140380859375) * _2378) * _2379) + _2244;
    }
    bool _2359 = _2248.y == 0u;
    float _2414;
    float _2416;
    float _2418;
    if (_2359)
    {
        _2414 = _2352;
        _2416 = _2354;
        _2418 = _2356;
    }
    else
    {
        uint _2587 = _2174 + 7u;
        float _2603 = (dot(vec3(cbLight._m0[_2174 + 3u].xyz), vec3(_662, _663, _664)) * 0.5) + 0.5;
        float _2604 = _2603 * _2603;
        float _4532 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2605 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2606 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2414 = (((cbLight._m0[_2587].x * 0.3183098733425140380859375) * _2605) * _2606) + _2352;
        _2416 = (((cbLight._m0[_2587].y * 0.3183098733425140380859375) * _2605) * _2606) + _2354;
        _2418 = (((cbLight._m0[_2587].z * 0.3183098733425140380859375) * _2605) * _2606) + _2356;
    }
    uint _2421 = _2174 + 8u;
    float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _665) * 0.949999988079071044921875);
    float _2435 = _2434 * _2434;
    float _2436 = cbLight._m0[_2174].x + _742;
    float _2437 = cbLight._m0[_2174].y + _743;
    float _2438 = cbLight._m0[_2174].z + _744;
    float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
    float _2443 = _2442 * _2436;
    float _2444 = _2442 * _2437;
    float _2445 = _2442 * _2438;
    float _2446 = dot(vec3(_662, _663, _664), vec3(cbLight._m0[_2174].xyz));
    float _4548 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _4559 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _2450 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2451 = dot(vec3(_662, _663, _664), vec3(_2443, _2444, _2445));
    float _4570 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2454 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2455 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2443, _2444, _2445));
    float _4581 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2459 = _2435 * _2435;
    float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
    float _2471 = exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0);
    float _2472 = 0.959999978542327880859375 - _821;
    float _2474 = 0.959999978542327880859375 - _822;
    float _2475 = 0.959999978542327880859375 - _823;
    float _2482 = 1.0 - _2435;
    float _2493 = (0.5 / (((_2450 * ((_2449 * _2482) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2450 * _2482) + _2435) * _2449))) * _2449;
    float _4592 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2495 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
    uint _2509 = _2174 + 9u;
    float _2520 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _665) * 0.949999988079071044921875);
    float _2521 = _2520 * _2520;
    float _2522 = cbLight._m0[_2214].x + _742;
    float _2523 = cbLight._m0[_2214].y + _743;
    float _2524 = cbLight._m0[_2214].z + _744;
    float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
    float _2529 = _2528 * _2522;
    float _2530 = _2528 * _2523;
    float _2531 = _2528 * _2524;
    float _2532 = dot(vec3(_662, _663, _664), vec3(cbLight._m0[_2214].xyz));
    float _4603 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2535 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2536 = dot(vec3(_662, _663, _664), vec3(_2529, _2530, _2531));
    float _4614 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2540 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2529, _2530, _2531));
    float _4625 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2544 = _2521 * _2521;
    float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
    float _2555 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
    float _2562 = 1.0 - _2521;
    float _2572 = (0.5 / (((_2450 * ((_2535 * _2562) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2450 * _2562) + _2521) * _2535))) * _2535;
    float _4636 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2574 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
    float _2584 = (((((_2555 * _2472) + _824) * cbLight._m0[_2509].x) * _2574) * _2197) + ((((cbLight._m0[_2421].x * _2163) * ((_2471 * _2472) + _824)) * _2495) * _2210);
    float _2585 = (((((_2555 * _2474) + _826) * cbLight._m0[_2509].y) * _2574) * _2197) + ((((cbLight._m0[_2421].y * _2165) * ((_2471 * _2474) + _826)) * _2495) * _2210);
    float _2586 = (((((_2555 * _2475) + _827) * cbLight._m0[_2509].z) * _2574) * _2197) + ((((cbLight._m0[_2421].z * _2167) * ((_2471 * _2475) + _827)) * _2495) * _2210);
    float _2642;
    float _2644;
    float _2646;
    if (_2250)
    {
        _2642 = _2584;
        _2644 = _2585;
        _2646 = _2586;
    }
    else
    {
        uint _2648 = _2174 + 2u;
        uint _2652 = _2174 + 10u;
        float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2648].w)) * _665) * 0.949999988079071044921875);
        float _2667 = _2666 * _2666;
        float _2668 = cbLight._m0[_2648].x + _742;
        float _2669 = cbLight._m0[_2648].y + _743;
        float _2670 = cbLight._m0[_2648].z + _744;
        float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
        float _2675 = _2674 * _2668;
        float _2676 = _2674 * _2669;
        float _2677 = _2674 * _2670;
        float _2678 = dot(vec3(_662, _663, _664), vec3(cbLight._m0[_2648].xyz));
        float _4647 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2682 = dot(vec3(_662, _663, _664), vec3(_2675, _2676, _2677));
        float _4658 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2686 = dot(vec3(cbLight._m0[_2648].xyz), vec3(_2675, _2676, _2677));
        float _4669 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2690 = _2667 * _2667;
        float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
        float _2701 = exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0);
        float _2708 = 1.0 - _2667;
        float _2718 = (0.5 / (((_2450 * ((_2681 * _2708) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2450 * _2708) + _2667) * _2681))) * _2681;
        float _4680 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2720 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
        float _2721 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2642 = (((((_2701 * _2472) + _824) * cbLight._m0[_2652].x) * _2720) * _2721) + _2584;
        _2644 = (((((_2701 * _2474) + _826) * cbLight._m0[_2652].y) * _2720) * _2721) + _2585;
        _2646 = (((((_2701 * _2475) + _827) * cbLight._m0[_2652].z) * _2720) * _2721) + _2586;
    }
    float _2752;
    float _2754;
    float _2756;
    if (_2359)
    {
        _2752 = _2642;
        _2754 = _2644;
        _2756 = _2646;
    }
    else
    {
        uint _2763 = _2174 + 3u;
        uint _2767 = _2174 + 11u;
        float _2781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2763].w)) * _665) * 0.949999988079071044921875);
        float _2782 = _2781 * _2781;
        float _2783 = cbLight._m0[_2763].x + _742;
        float _2784 = cbLight._m0[_2763].y + _743;
        float _2785 = cbLight._m0[_2763].z + _744;
        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
        float _2790 = _2789 * _2783;
        float _2791 = _2789 * _2784;
        float _2792 = _2789 * _2785;
        float _2793 = dot(vec3(_662, _663, _664), vec3(cbLight._m0[_2763].xyz));
        float _4696 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2797 = dot(vec3(_662, _663, _664), vec3(_2790, _2791, _2792));
        float _4707 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2800 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2801 = dot(vec3(cbLight._m0[_2763].xyz), vec3(_2790, _2791, _2792));
        float _4718 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2805 = _2782 * _2782;
        float _2809 = ((_2800 * _2800) * (_2805 + (-1.0))) + 1.0;
        float _2816 = exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0);
        float _2823 = 1.0 - _2782;
        float _2833 = (0.5 / (((_2450 * ((_2796 * _2823) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2450 * _2823) + _2782) * _2796))) * _2796;
        float _4729 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2835 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2805 / ((_2809 * _2809) * 3.141590118408203125));
        float _2836 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2752 = (((((_2816 * _2472) + _824) * cbLight._m0[_2767].x) * _2835) * _2836) + _2642;
        _2754 = (((((_2816 * _2474) + _826) * cbLight._m0[_2767].y) * _2835) * _2836) + _2644;
        _2756 = (((((_2816 * _2475) + _827) * cbLight._m0[_2767].z) * _2835) * _2836) + _2646;
    }
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    float _2912;
    if (_2172.y == 0u)
    {
        uvec4 _2857 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2858 = _2857.x;
        uint _2869 = uint((float(_2857.y) * floor(float(uint(cbSceneParam._m0[85u].y * _763) / _2858))) + floor(float(uint(cbSceneParam._m0[85u].x * _762) / _2858)));
        float _2879 = (log2(_1950 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2880 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        uint _2883 = uint(isnan(14.0) ? _2880 : (isnan(_2880) ? 14.0 : min(_2880, 14.0)));
        uvec4 _2888 = texelFetch(g_lightClusterGridBuffer, int(((_2883 << 2u) + (_2869 << 6u)) >> 2u));
        uint _2889 = _2888.x;
        uint _2890 = _2857.z;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        if (((((1u << ((_2890 >> 4u) & 15u)) + 4294967295u) & _2889) == 0u) || ((_2890 & 240u) == 0u))
        {
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
        }
        else
        {
            float _2970;
            float _2972;
            float _2974;
            float _2976;
            float _2978;
            float _2980;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            uint _3128 = 0u;
            uint _3137;
            bool _3138;
            for (;;)
            {
                _3137 = texelFetch(g_lightClassification, int((((_2883 << 5u) + (_2869 << 9u)) + (_3128 << 2u)) >> 2u)).x;
                _3138 = _3137 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3138)
                {
                    frontier_phi_71_pred = _3127;
                    frontier_phi_71_pred_1 = _3126;
                    frontier_phi_71_pred_2 = _3125;
                    frontier_phi_71_pred_3 = _3124;
                    frontier_phi_71_pred_4 = _3123;
                    frontier_phi_71_pred_5 = _3122;
                }
                else
                {
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    uint _3273;
                    _3267 = _3122;
                    _3268 = _3123;
                    _3269 = _3124;
                    _3270 = _3125;
                    _3271 = _3126;
                    _3272 = _3127;
                    _3273 = _3137;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    for (;;)
                    {
                        uint _3277 = uint(findLSB(_3273)) + (_3128 << 5u);
                        uint _3274 = (_3273 + 4294967295u) & _3273;
                        uint _3279 = _3277 * 48u;
                        vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 3u)).x));
                        uint _3299 = (_3277 * 48u) + 4u;
                        vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 3u)).x));
                        uint _3318 = (_3277 * 48u) + 8u;
                        vec3 _3329 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x));
                        float _3333 = _3293.x - _1948;
                        float _3334 = _3293.y - _1949;
                        float _3335 = _3293.z - _1950;
                        float _3336 = dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335));
                        float _3339 = inversesqrt(_3336);
                        float _3340 = _3339 * _3333;
                        float _3341 = _3339 * _3334;
                        float _3342 = _3339 * _3335;
                        float _3343 = dot(vec3(_781, _784, _787), vec3(_3340, _3341, _3342));
                        float _3348 = 1.0 - (_3336 * _3293.w);
                        float _4755 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3349 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3350 = sqrt(_3336) * _3312.w;
                        float _3353 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                        float _3354 = _3353 * _3353;
                        float _3357 = ((1.0 - _3354) * _3343) + _3354;
                        float _3360 = _3350 * _3350;
                        float _3364 = ((isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0))) * _3349) / ((_3360 * 0.699999988079071044921875) + 1.0);
                        float _3368 = (-0.0) - _1948;
                        float _3369 = (-0.0) - _1949;
                        float _3370 = (-0.0) - _1950;
                        float _3374 = inversesqrt(dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370)));
                        float _3375 = _3374 * _3368;
                        float _3376 = _3374 * _3369;
                        float _3377 = _3374 * _3370;
                        float _3384 = exp2(log2(1.0 / ((_3360 * 3.5) + 5.0)) * 0.25);
                        float _3385 = 1.0 - _856;
                        float _3392 = sqrt(1.0 - ((1.0 - (_3385 * _3385)) * (1.0 - (_3384 * _3384))));
                        float _3393 = _3392 * _3392;
                        float _3394 = _3393 * _3393;
                        float _3395 = _3375 + _3340;
                        float _3396 = _3376 + _3341;
                        float _3397 = _3377 + _3342;
                        float _3401 = inversesqrt(dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397)));
                        float _3405 = dot(vec3(_781, _784, _787), vec3(_3375, _3376, _3377));
                        float _4771 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3408 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3409 = dot(vec3(_781, _784, _787), vec3(_3401 * _3395, _3401 * _3396, _3401 * _3397));
                        float _4782 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3412 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3416 = ((_3412 * _3412) * (_3394 + (-1.0))) + 1.0;
                        float _3417 = _3353 * _3393;
                        float _3418 = _3417 * _3417;
                        float _3421 = ((1.0 - _3418) * _3343) + _3418;
                        float _4793 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3422 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3423 = 1.0 - _3393;
                        float _3433 = (0.5 / (((_3422 * ((_3408 * _3423) + _3393)) + 9.9999999392252902907785028219223e-09) + (((_3422 * _3423) + _3393) * _3408))) * _3422;
                        float _4804 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3444 = (((_3394 * 3.1415927410125732421875) * (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0)))) / ((_3416 * _3416) * ((_3360 * 2.1991131305694580078125) + 3.141590118408203125))) * _3349;
                        _3197 = (_3364 * _3312.x) + _3270;
                        _3198 = (_3364 * _3312.y) + _3271;
                        _3199 = (_3364 * _3312.z) + _3272;
                        _3194 = (_3444 * _3329.x) + _3267;
                        _3195 = (_3444 * _3329.y) + _3268;
                        _3196 = (_3444 * _3329.z) + _3269;
                        if (_3274 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3267 = _3194;
                            _3268 = _3195;
                            _3269 = _3196;
                            _3270 = _3197;
                            _3271 = _3198;
                            _3272 = _3199;
                            _3273 = _3274;
                        }
                    }
                    frontier_phi_71_pred = _3199;
                    frontier_phi_71_pred_1 = _3198;
                    frontier_phi_71_pred_2 = _3197;
                    frontier_phi_71_pred_3 = _3196;
                    frontier_phi_71_pred_4 = _3195;
                    frontier_phi_71_pred_5 = _3194;
                }
                _2980 = frontier_phi_71_pred;
                _2978 = frontier_phi_71_pred_1;
                _2976 = frontier_phi_71_pred_2;
                _2974 = frontier_phi_71_pred_3;
                _2972 = frontier_phi_71_pred_4;
                _2970 = frontier_phi_71_pred_5;
                uint _3129 = _3128 + 1u;
                if (_3129 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3122 = _2970;
                    _3123 = _2972;
                    _3124 = _2974;
                    _3125 = _2976;
                    _3126 = _2978;
                    _3127 = _2980;
                    _3128 = _3129;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
        }
        uvec4 _2983 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2984 = _2983.z;
        uint _2986 = (_2984 >> 8u) & 15u;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        if (((4294967295u << _2986) & _2889) == 0u)
        {
            _3090 = _2969;
            _3092 = _2971;
            _3094 = _2973;
            _3096 = _2975;
            _3098 = _2977;
            _3100 = _2979;
        }
        else
        {
            float _3115 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
            float _3116 = _3115 * _1948;
            float _3117 = _3115 * _1949;
            float _3118 = _3115 * _1950;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2986 < ((_2984 >> 12u) & 15u))
            {
                float _3091;
                float _3093;
                float _3095;
                float _3097;
                float _3099;
                float _3101;
                float _3250 = _2969;
                float _3251 = _2971;
                float _3252 = _2973;
                float _3253 = _2975;
                float _3254 = _2977;
                float _3255 = _2979;
                uint _3256 = _2986;
                uint _3265;
                bool _3266;
                for (;;)
                {
                    _3265 = texelFetch(g_lightClassification, int((((_2883 << 5u) + (_2869 << 9u)) + (_3256 << 2u)) >> 2u)).x;
                    _3266 = _3265 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3266)
                    {
                        frontier_phi_82_pred = _3255;
                        frontier_phi_82_pred_1 = _3254;
                        frontier_phi_82_pred_2 = _3253;
                        frontier_phi_82_pred_3 = _3252;
                        frontier_phi_82_pred_4 = _3251;
                        frontier_phi_82_pred_5 = _3250;
                    }
                    else
                    {
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3471 = _3250;
                        float _3472 = _3251;
                        float _3473 = _3252;
                        float _3474 = _3253;
                        float _3475 = _3254;
                        float _3476 = _3255;
                        uint _3477 = _3265;
                        uint _3478;
                        vec4 _3503;
                        float _3504;
                        vec4 _3519;
                        vec3 _3531;
                        vec4 _3546;
                        vec4 _3561;
                        float _3607;
                        bool _3608;
                        for (;;)
                        {
                            uint _3488 = ((_3256 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3477));
                            _3478 = (_3477 + 4294967295u) & _3477;
                            uint _3490 = _3488 * 40u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            _3504 = _3503.w;
                            uint _3506 = (_3488 * 40u) + 4u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3521 = (_3488 * 40u) + 8u;
                            _3531 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x));
                            uint _3533 = (_3488 * 40u) + 16u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            uint _3548 = (_3488 * 40u) + 20u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3563 = (_3488 * 40u) + 24u;
                            vec4 _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3582 = (_3488 * 40u) + 28u;
                            vec4 _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            _3607 = fma(_1950, _3595.z, fma(_1949, _3595.y, _3595.x * _1948)) + _3595.w;
                            _3608 = !((fma(_1950, _3576.z, fma(_1949, _3576.y, _3576.x * _1948)) + _3576.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3608)
                            {
                                float _3635 = _3503.x - _1948;
                                float _3636 = _3503.y - _1949;
                                float _3637 = _3503.z - _1950;
                                float _3638 = dot(vec3(_3635, _3636, _3637), vec3(_3635, _3636, _3637));
                                float _3641 = inversesqrt(_3638);
                                float _3642 = _3641 * _3635;
                                float _3643 = _3641 * _3636;
                                float _3644 = _3641 * _3637;
                                float _3648 = 1.0 - (_3638 / (_3504 * _3504));
                                float _4815 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3649 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3653 = sqrt(_3638) * _3519.w;
                                float _3655 = 1.39999997615814208984375 / (_3653 + 1.39999997615814208984375);
                                float _3656 = _3655 * _3655;
                                float _3659 = ((1.0 - _3656) * dot(vec3(_3642, _3643, _3644), vec3(_781, _784, _787))) + _3656;
                                float _3662 = _3653 * _3653;
                                float _3666 = (fma(_1950, _3546.z, fma(_1949, _3546.y, _3546.x * _1948)) + _3546.w) / _3607;
                                float _3667 = (fma(_1950, _3561.z, fma(_1949, _3561.y, _3561.x * _1948)) + _3561.w) / _3607;
                                float _3671 = 1.0 - dot(vec2(_3666, _3667), vec2(_3666, _3667));
                                float _4831 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3672 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3673 = _3672 * (((isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0))) * _3649) / ((_3662 * 0.699999988079071044921875) + 1.0));
                                float _3685 = exp2(log2(1.0 / ((_3662 * 3.5) + 5.0)) * 0.25);
                                float _3686 = 1.0 - _856;
                                float _3693 = sqrt(1.0 - ((1.0 - (_3686 * _3686)) * (1.0 - (_3685 * _3685))));
                                float _3694 = _3693 * _3693;
                                float _3695 = _3694 * _3694;
                                float _3696 = _3642 - _3116;
                                float _3697 = _3643 - _3117;
                                float _3698 = _3644 - _3118;
                                float _3702 = inversesqrt(dot(vec3(_3696, _3697, _3698), vec3(_3696, _3697, _3698)));
                                float _3706 = dot(vec3(_781, _784, _787), vec3((-0.0) - _3116, (-0.0) - _3117, (-0.0) - _3118));
                                float _4842 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3709 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3710 = dot(vec3(_781, _784, _787), vec3(_3702 * _3696, _3702 * _3697, _3702 * _3698));
                                float _4853 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3713 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3717 = ((_3713 * _3713) * (_3695 + (-1.0))) + 1.0;
                                float _3718 = _3655 * _3694;
                                float _3719 = _3718 * _3718;
                                float _3725 = ((1.0 - _3719) * dot(vec3(_781, _784, _787), vec3(_3642, _3643, _3644))) + _3719;
                                float _4864 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3727 = 1.0 - _3694;
                                float _3737 = (0.5 / (((_3726 * ((_3709 * _3727) + _3694)) + 9.9999999392252902907785028219223e-09) + (((_3726 * _3727) + _3694) * _3709))) * _3726;
                                float _4875 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3747 = (_3672 * _3649) * (((_3695 * 3.1415927410125732421875) * (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) / ((_3717 * _3717) * ((_3662 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3673 * _3519.z;
                                frontier_phi_88_pred_1 = _3673 * _3519.y;
                                frontier_phi_88_pred_2 = _3673 * _3519.x;
                                frontier_phi_88_pred_3 = _3747 * _3531.z;
                                frontier_phi_88_pred_4 = _3747 * _3531.y;
                                frontier_phi_88_pred_5 = _3747 * _3531.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3756 = frontier_phi_88_pred;
                            _3755 = frontier_phi_88_pred_1;
                            _3754 = frontier_phi_88_pred_2;
                            _3753 = frontier_phi_88_pred_3;
                            _3752 = frontier_phi_88_pred_4;
                            _3751 = frontier_phi_88_pred_5;
                            _3461 = _3754 + _3474;
                            _3462 = _3755 + _3475;
                            _3463 = _3756 + _3476;
                            _3458 = _3751 + _3471;
                            _3459 = _3752 + _3472;
                            _3460 = _3753 + _3473;
                            if (_3478 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3478;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3463;
                        frontier_phi_82_pred_1 = _3462;
                        frontier_phi_82_pred_2 = _3461;
                        frontier_phi_82_pred_3 = _3460;
                        frontier_phi_82_pred_4 = _3459;
                        frontier_phi_82_pred_5 = _3458;
                    }
                    _3101 = frontier_phi_82_pred;
                    _3099 = frontier_phi_82_pred_1;
                    _3097 = frontier_phi_82_pred_2;
                    _3095 = frontier_phi_82_pred_3;
                    _3093 = frontier_phi_82_pred_4;
                    _3091 = frontier_phi_82_pred_5;
                    uint _3257 = _3256 + 1u;
                    if (_3257 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3250 = _3091;
                        _3251 = _3093;
                        _3252 = _3095;
                        _3253 = _3097;
                        _3254 = _3099;
                        _3255 = _3101;
                        _3256 = _3257;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3097;
                frontier_phi_63_64_ladder_1 = _3101;
                frontier_phi_63_64_ladder_2 = _3099;
                frontier_phi_63_64_ladder_3 = _3095;
                frontier_phi_63_64_ladder_4 = _3093;
                frontier_phi_63_64_ladder_5 = _3091;
            }
            else
            {
                frontier_phi_63_64_ladder = _2975;
                frontier_phi_63_64_ladder_1 = _2979;
                frontier_phi_63_64_ladder_2 = _2977;
                frontier_phi_63_64_ladder_3 = _2973;
                frontier_phi_63_64_ladder_4 = _2971;
                frontier_phi_63_64_ladder_5 = _2969;
            }
            _3090 = frontier_phi_63_64_ladder_5;
            _3092 = frontier_phi_63_64_ladder_4;
            _3094 = frontier_phi_63_64_ladder_3;
            _3096 = frontier_phi_63_64_ladder;
            _3098 = frontier_phi_63_64_ladder_2;
            _3100 = frontier_phi_63_64_ladder_1;
        }
        float _3105 = isnan(1.0) ? _840 : (isnan(_840) ? 1.0 : min(_840, 1.0));
        _2902 = (_3105 * _3096) + _2414;
        _2904 = (_3105 * _3098) + _2416;
        _2906 = (_3105 * _3100) + _2418;
        _2908 = ((_3090 * _824) * _3105) + _2752;
        _2910 = ((_3092 * _826) * _3105) + _2754;
        _2912 = ((_3094 * _827) * _3105) + _2756;
    }
    else
    {
        _2902 = _2414;
        _2904 = _2416;
        _2906 = _2418;
        _2908 = _2752;
        _2910 = _2754;
        _2912 = _2756;
    }
    float _4891 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4902 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4913 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _2929 = ((isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2902 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _840))) + ((_2908 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1679)) * cbPerFrame._m0[3u].x);
    float _2930 = ((isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2904 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _840))) + ((_2910 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1679)) * cbPerFrame._m0[3u].x);
    float _2931 = ((isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_2906 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _840))) + ((_2912 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1679)) * cbPerFrame._m0[3u].x);
    uint _2932 = _244 + 6u;
    float _2940 = _762 / cbSceneParam._m0[86u].x;
    float _2941 = _763 / cbSceneParam._m0[86u].y;
    vec4 _2955 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2940, _2941, (log2((isnan(cbSceneParam._m0[77u].w) ? _684 : (isnan(_684) ? cbSceneParam._m0[77u].w : min(_684, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2957 = _2955.x;
    float _2958 = _2955.y;
    float _2959 = _2955.z;
    float _2960 = _2955.w;
    float _3032;
    float _3034;
    float _3036;
    float _3038;
    if (_684 > cbSceneParam._m0[78u].w)
    {
        float _2994 = isnan(_684) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _684 : min(cbSceneParam._m0[80u].w, _684));
        float _2995 = _2994 / _684;
        float _3006 = _2995 * _735;
        float _3007 = _736 * _2995;
        float _3008 = (-0.0) - _3007;
        float _3010 = _2995 * _737;
        float _3012 = (cbSceneParam._m0[77u].w * _3008) / _2994;
        float _3013 = _3012 + cbSceneParam._m0[79u].w;
        float _3014 = cbSceneParam._m0[79u].w - _3007;
        float _3020 = sqrt(((_3006 * _3006) + (_3007 * _3007)) + (_3010 * _3010));
        float _3023 = (1.0 - (cbSceneParam._m0[77u].w / _2994)) * _3020;
        float _3028 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3030 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3207;
        if (abs((_3008 - _3012) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3207 = ((((_3013 > 0.0) ? exp2(_3028 * _3013) : (2.0 - exp2(_3030 * _3013))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3023;
        }
        else
        {
            float _3151 = 1.0 / cbSceneParam._m0[80u].x;
            float _3152 = isnan(_3014) ? _3013 : (isnan(_3013) ? _3014 : max(_3013, _3014));
            float _3153 = isnan(_3014) ? _3013 : (isnan(_3013) ? _3014 : min(_3013, _3014));
            float _3162 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : min(_3152, 0.0));
            float _3163 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : min(_3153, 0.0));
            _3207 = ((abs(_3020 / _3008) * cbSceneParam._m0[80u].y) * ((((_3162 - _3163) * 2.0) - ((exp2(_3028 * (isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0)))) - exp2(_3028 * (isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0))))) * _3151)) - ((exp2(_3030 * _3162) - exp2(_3030 * _3163)) * _3151))) + (_3023 * cbSceneParam._m0[80u].z);
        }
        vec4 _3209 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2940, _2941, 1.0), 0.0);
        float _3218 = exp2((_3207 * (-1.44269502162933349609375)) * (1.0 - _3209.w));
        float _3219 = log2(_3218);
        float _3235 = log2(_2960);
        _3032 = (exp2(_3235 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].x)) * _3209.x) / cbSceneParam._m0[78u].x)) + _2957;
        _3034 = (exp2(_3235 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].y)) * _3209.y) / cbSceneParam._m0[78u].y)) + _2958;
        _3036 = (exp2(_3235 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].z)) * _3209.z) / cbSceneParam._m0[78u].z)) + _2959;
        _3038 = _3218 * _2960;
    }
    else
    {
        _3032 = _2957;
        _3034 = _2958;
        _3036 = _2959;
        _3038 = _2960;
    }
    bool _3245;
    vec4 _3048;
    vec4 _3070;
    float _3072;
    float _3076;
    float _3077;
    float _3078;
    float _3079;
    bool _3089;
    for (;;)
    {
        _3048 = cbMatDynParam._m0[0u];
        float _3050 = roundEven(_3048.y);
        bool _3051 = _3050 == 3.0;
        float _3052 = log2(_3038);
        float _3059 = exp2(_3052 * cbSceneParam._m0[78u].x) * _2929;
        float _3060 = exp2(_3052 * cbSceneParam._m0[78u].y) * _2930;
        float _3061 = exp2(_3052 * cbSceneParam._m0[78u].z) * _2931;
        float _3068 = _751 + (-0.5);
        _3070 = cbMtdParam._m0[1u];
        _3072 = _3070.y * _3068;
        float _3075 = (_3050 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3076 = _3075 * (_3051 ? _3059 : (_3059 + (cbSceneParam._m0[72u].w * _3032)));
        _3077 = _3075 * (_3051 ? _3060 : (_3060 + (cbSceneParam._m0[72u].w * _3034)));
        _3078 = _3075 * (_3051 ? _3061 : (_3061 + (cbSceneParam._m0[72u].w * _3036)));
        _3079 = _3068 * 0.999000012874603271484375;
        _3089 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3089)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _3079) < 0.5)
            {
                _3245 = true;
                break;
            }
        }
        uint _3186 = _800 + uint(_3048.w);
        if ((cbInstanceData._m0[_3186].w < 1.0) && ((cbInstanceData._m0[_3186].w + _3079) < 0.5))
        {
            _3245 = true;
            break;
        }
        if ((_3072 + 1.0) < _3070.x)
        {
            _3245 = true;
            break;
        }
        _3245 = false;
        break;
    }
    float _3449;
    if (_3245)
    {
        discard_state = true;
        _3449 = 0.0;
    }
    else
    {
        _3449 = cbInstanceData._m0[_2932].w;
    }
    SV_Target.x = _3076;
    SV_Target.y = _3077;
    SV_Target.z = _3078;
    SV_Target.w = _3449;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2932].w;
    discard_exit();
}


