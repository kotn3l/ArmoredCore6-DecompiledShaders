#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1118;
float _3526;
float _3527;
float _3528;
float _3529;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _354 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _371 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _354) * cbMtdParam._m0[24u].y) + _354) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3538 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _379 = (_372 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _380 = (_372 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _381 = (_372 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _413 = _411.x;
    float _414 = _411.y;
    float _415 = _411.z;
    float _424 = ((_394.z - _415) * _372) + _415;
    float _427 = ((((_394.x - _413) * _372) + _413) * 2.0) + (-1.0);
    float _429 = ((((_394.y - _414) * _372) + _414) * 2.0) + (-1.0);
    float _430 = dot(vec2(_427, _429), vec2(_427, _429));
    float _3549 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))));
    vec4 _451 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _463 = (((_451.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _427;
    float _464 = (((_451.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _429;
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _492 = _490.x;
    float _510 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _254) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _255) + cbTextureTilingScale._m0[9u].w)).x - _492) * _372) + _492;
    float _514 = ((_476.x - _510) * cbMtdParam._m0[19u].z) + _510;
    float _518 = (cbMtdParam._m0[19u].w * (_451.z - _424)) + _424;
    float _523 = cbMtdParam._m0[22u].x + _451.w;
    float _526 = fma(_435, _221 * NORMAL.x, fma(_464, _228 * TANGENT.x, (_214 * _206) * _463));
    float _529 = fma(_435, _221 * NORMAL.y, fma(_464, _228 * TANGENT.y, (_214 * _207) * _463));
    float _532 = fma(_435, _221 * NORMAL.z, fma(_464, _228 * TANGENT.z, (_214 * _208) * _463));
    float _536 = inversesqrt(dot(vec3(_526, _529, _532), vec3(_526, _529, _532)));
    float _537 = _536 * _526;
    float _538 = _536 * _529;
    float _539 = _536 * _532;
    float _3560 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _540 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3582 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3593 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3604 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3615 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _545 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _559 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _610 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _600);
    float _611 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _600);
    float _612 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _600);
    float _616 = inversesqrt(dot(vec3(_610, _611, _612), vec3(_610, _611, _612)));
    float _617 = _610 * _616;
    float _618 = _611 * _616;
    float _619 = _612 * _616;
    vec4 _624 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _626 = _624.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _798 = sqrt(((_610 * _610) + (_611 * _611)) + (_612 * _612));
        float _804 = (cbMatDynParam._m0[5u].x * _798) + cbMatDynParam._m0[5u].y;
        float _3626 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _809 = (cbMatDynParam._m0[5u].z * _798) + cbMatDynParam._m0[5u].w;
        float _3637 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) - _805)) + _805) < ((_626 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _637 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _638 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _656 = fma(_539, cbSceneParam._m0[5u].z, fma(_538, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _537));
    float _659 = fma(_539, cbSceneParam._m0[6u].z, fma(_538, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _537));
    float _662 = fma(_539, cbSceneParam._m0[7u].z, fma(_538, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _537));
    uint _675 = _234 + 9u;
    uint _676 = _675 + uint(cbMatDynParam._m0[0u].w);
    float _682 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_676].x;
    float _683 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_676].y;
    float _684 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_676].z;
    float _3648 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _687 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _688 = 1.0 - _545;
    float _689 = _685 * _688;
    float _690 = _686 * _688;
    float _691 = _687 * _688;
    float _696 = (_685 + (-0.039999999105930328369140625)) * _545;
    float _697 = (_686 + (-0.039999999105930328369140625)) * _545;
    float _698 = (_687 + (-0.039999999105930328369140625)) * _545;
    float _699 = _696 + 0.039999999105930328369140625;
    float _701 = _697 + 0.039999999105930328369140625;
    float _702 = _698 + 0.039999999105930328369140625;
    vec4 _711 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _637, cbSceneParam._m0[86u].y * _638));
    float _715 = ((isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * TEXCOORD_5.w) * _711.x;
    float _716 = dot(vec3(_537, _538, _539), vec3(_617, _618, _619));
    float _719 = _716 * 2.0;
    float _723 = (_719 * _537) - _617;
    float _724 = (_719 * _538) - _618;
    float _725 = (_719 * _539) - _619;
    float _729 = abs(dot(vec3(_617, _618, _619), vec3(_537, _538, _539)));
    float _3681 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _731 = sqrt(_540);
    float _744 = exp2((_731 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_731 * 3.0));
    float _750 = (1.0 - _744) * ((_731 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _751 = _744 * _731;
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1117;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _842 = fma(_787, cbModelParam._m0[26u].z, fma(_783, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779));
        float _846 = fma(_787, cbModelParam._m0[27u].z, fma(_783, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779));
        float _850 = fma(_787, cbModelParam._m0[28u].z, fma(_783, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779));
        float _875 = _779 + _537;
        float _876 = _783 + _538;
        float _877 = _787 + _539;
        float _887 = fma(_877, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _875)) - _842;
        float _888 = fma(_877, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _875)) - _846;
        float _889 = fma(_877, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _875)) - _850;
        float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
        float _906 = ((_893 * _887) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_842 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_893 * _888) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_846 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_893 * _889) / cbModelParam._m0[34u].z) + ((((((_850 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        float _945 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_911.x + (-0.5));
        float _947 = _945 * (_911.y + (-0.5));
        float _948 = _945 * (_911.z + (-0.5));
        float _955 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_918.x + (-0.5));
        float _957 = _955 * (_918.y + (-0.5));
        float _958 = _955 * (_918.z + (-0.5));
        float _965 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_925.x + (-0.5));
        float _967 = _965 * (_925.y + (-0.5));
        float _968 = _965 * (_925.z + (-0.5));
        float _975 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_932.x + (-0.5));
        float _977 = _975 * (_932.y + (-0.5));
        float _978 = _975 * (_932.z + (-0.5));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = _946 * 0.5;
        float _983 = _956 * 0.5;
        float _984 = _966 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _999 = (dot(vec3(_537, _538, _539), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1009 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3729 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1011 + 1.0))) + _1016) * _979;
        float _1026 = _947 * 0.5;
        float _1027 = _957 * 0.5;
        float _1028 = _967 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_537, _538, _539), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3762 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1053 + 1.0))) + _1058) * _980;
        float _1068 = _948 * 0.5;
        float _1069 = _958 * 0.5;
        float _1070 = _968 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_537, _538, _539), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3795 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1095 + 1.0))) + _1100) * _981;
        _1117 = _948;
        _1119 = _947;
        _1120 = _946;
        _1121 = _958;
        _1122 = _957;
        _1123 = _956;
        _1124 = _968;
        _1125 = _967;
        _1126 = _966;
        _1127 = _981;
        _1128 = _980;
        _1129 = _979;
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
    }
    else
    {
        _1117 = _1118;
        _1119 = _1118;
        _1120 = _1118;
        _1121 = _1118;
        _1122 = _1118;
        _1123 = _1118;
        _1124 = _1118;
        _1125 = _1118;
        _1126 = _1118;
        _1127 = _1118;
        _1128 = _1118;
        _1129 = _1118;
        _1130 = 0.0;
        _1131 = 0.0;
        _1132 = 0.0;
    }
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1160 = fma(_787, cbModelParam._m0[30u].z, fma(_783, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _779));
        float _1164 = fma(_787, cbModelParam._m0[31u].z, fma(_783, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _779));
        float _1168 = fma(_787, cbModelParam._m0[32u].z, fma(_783, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _779));
        float _1191 = _779 + _537;
        float _1192 = _783 + _538;
        float _1193 = _787 + _539;
        float _1203 = fma(_1193, cbModelParam._m0[30u].z, fma(_1192, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191)) - _1160;
        float _1204 = fma(_1193, cbModelParam._m0[31u].z, fma(_1192, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191)) - _1164;
        float _1205 = fma(_1193, cbModelParam._m0[32u].z, fma(_1192, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191)) - _1168;
        float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
        float _1222 = ((_1209 * _1203) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1160 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1209 * _1204) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1164 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1209 * _1205) / cbModelParam._m0[35u].z) + ((((((_1168 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        float _1259 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1226.x + (-0.5));
        float _1261 = _1259 * (_1226.y + (-0.5));
        float _1262 = _1259 * (_1226.z + (-0.5));
        float _1269 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1233.x + (-0.5));
        float _1271 = _1269 * (_1233.y + (-0.5));
        float _1272 = _1269 * (_1233.z + (-0.5));
        float _1279 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1240.x + (-0.5));
        float _1281 = _1279 * (_1240.y + (-0.5));
        float _1282 = _1279 * (_1240.z + (-0.5));
        float _1289 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1247.x + (-0.5));
        float _1291 = _1289 * (_1247.y + (-0.5));
        float _1292 = _1289 * (_1247.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_537, _538, _539), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3858 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1323 + 1.0))) + _1328) * _1293;
        float _1338 = _1261 * 0.5;
        float _1339 = _1271 * 0.5;
        float _1340 = _1281 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_537, _538, _539), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _3891 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1365 + 1.0))) + _1370) * _1294;
        float _1380 = _1262 * 0.5;
        float _1381 = _1272 * 0.5;
        float _1382 = _1282 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_537, _538, _539), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _3924 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1407 + 1.0))) + _1412) * _1295;
        _1429 = _1262;
        _1430 = _1261;
        _1431 = _1260;
        _1432 = _1272;
        _1433 = _1271;
        _1434 = _1270;
        _1435 = _1282;
        _1436 = _1281;
        _1437 = _1280;
        _1438 = _1295;
        _1439 = _1294;
        _1440 = _1293;
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _1118;
        _1430 = _1118;
        _1431 = _1118;
        _1432 = _1118;
        _1433 = _1118;
        _1434 = _1118;
        _1435 = _1118;
        _1436 = _1118;
        _1437 = _1118;
        _1438 = _1118;
        _1439 = _1118;
        _1440 = _1118;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1130)) + _1130;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1131)) + _1131;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1132)) + _1132;
    float _1476 = fma(_1455, cbSceneParam._m0[89u].z, fma(_1454, cbSceneParam._m0[89u].y, _1453 * cbSceneParam._m0[89u].x));
    float _1479 = fma(_1455, cbSceneParam._m0[90u].z, fma(_1454, cbSceneParam._m0[90u].y, _1453 * cbSceneParam._m0[90u].x));
    float _1482 = fma(_1455, cbSceneParam._m0[91u].z, fma(_1454, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1453));
    float _1497 = _723 * 0.5;
    float _1498 = _724 * 0.5;
    float _1499 = _725 * 0.5;
    float _1500 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1503 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1506 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1540;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1513 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1117, _1121, _1124, _1127));
        float _1517 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1521 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1528 = dot(vec4(cbModelParam._m0[39u]), vec4(_1497, _1498, _1499, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1528) ? 0.0 : (isnan(0.0) ? _1528 : max(0.0, _1528))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1551;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1542 = dot(vec4(cbModelParam._m0[40u]), vec4(_1497, _1498, _1499, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1542) ? 0.0 : (isnan(0.0) ? _1542 : max(0.0, _1542))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1555 = (_1551 * cbModelParam._m0[1u].x) + (_1540 * (1.0 - cbModelParam._m0[1u].x));
    float _1565 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _540);
    float _1566 = isnan(_1565) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1565 : min(cbModelParam._m0[25u].z, _1565));
    float _1648;
    float _1650;
    float _1652;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1615 = fma(_787, cbModelParam._m0[13u].z, fma(_783, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779)) + cbModelParam._m0[13u].w;
        float _1619 = fma(_787, cbModelParam._m0[14u].z, fma(_783, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779)) + cbModelParam._m0[14u].w;
        float _1623 = fma(_787, cbModelParam._m0[15u].z, fma(_783, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779)) + cbModelParam._m0[15u].w;
        float _1626 = fma(_725, cbModelParam._m0[13u].z, fma(_724, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _723));
        float _1629 = fma(_725, cbModelParam._m0[14u].z, fma(_724, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _723));
        float _1632 = fma(_725, cbModelParam._m0[15u].z, fma(_724, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _723));
        float _1660;
        if (_1626 > 0.0)
        {
            _1660 = abs((1.0 - _1615) / _1626);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1615 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1660 = frontier_phi_17_15_ladder;
        }
        float _1885;
        if (_1629 > 0.0)
        {
            _1885 = abs((1.0 - _1619) / _1629);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1619 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1885 = frontier_phi_26_22_ladder;
        }
        float _2142;
        if (_1632 > 0.0)
        {
            _2142 = abs((1.0 - _1623) / _1632);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1623 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2142 = frontier_phi_38_33_ladder;
        }
        float _2144 = isnan(_1885) ? _1660 : (isnan(_1660) ? _1885 : min(_1660, _1885));
        float _2145 = isnan(_2142) ? _2144 : (isnan(_2144) ? _2142 : min(_2144, _2142));
        float _2149 = (_2145 * _1626) + _1615;
        float _2150 = (_2145 * _1629) + _1619;
        float _2151 = (_2145 * _1632) + _1623;
        float _2152 = _2145 * 9.9999997473787516355514526367188e-05;
        float _2154 = (-1.0) - _2152;
        float _2156 = _2152 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2151 > _2156) || ((_2151 < _2154) || ((_2150 > _2156) || ((_2150 < _2154) || ((_2149 < _2154) || (_2149 > _2156))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2279 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2151, cbModelParam._m0[9u].z, fma(_2150, cbModelParam._m0[9u].y, _2149 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2151, cbModelParam._m0[10u].z, fma(_2150, cbModelParam._m0[10u].y, _2149 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2151, cbModelParam._m0[11u].z, fma(_2150, cbModelParam._m0[11u].y, _2149 * cbModelParam._m0[11u].x))), _1566);
            frontier_phi_16_38_ladder = _2279.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2279.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2279.x * cbModelParam._m0[1u].y;
        }
        _1648 = frontier_phi_16_38_ladder_2;
        _1650 = frontier_phi_16_38_ladder_1;
        _1652 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1636 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_723, _724, _725), _1566);
        _1648 = _1636.x * cbModelParam._m0[1u].y;
        _1650 = _1636.y * cbModelParam._m0[1u].y;
        _1652 = _1636.z * cbModelParam._m0[1u].y;
    }
    float _1656 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _540);
    float _1657 = isnan(_1656) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1656 : min(cbModelParam._m0[25u].w, _1656));
    float _1748;
    float _1750;
    float _1752;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1712 = fma(_787, cbModelParam._m0[21u].z, fma(_783, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779)) + cbModelParam._m0[21u].w;
        float _1716 = fma(_787, cbModelParam._m0[22u].z, fma(_783, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779)) + cbModelParam._m0[22u].w;
        float _1720 = fma(_787, cbModelParam._m0[23u].z, fma(_783, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779)) + cbModelParam._m0[23u].w;
        float _1723 = fma(_725, cbModelParam._m0[21u].z, fma(_724, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _723));
        float _1726 = fma(_725, cbModelParam._m0[22u].z, fma(_724, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _723));
        float _1729 = fma(_725, cbModelParam._m0[23u].z, fma(_724, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _723));
        float _1890;
        if (_1723 > 0.0)
        {
            _1890 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1890 = frontier_phi_28_24_ladder;
        }
        float _2169;
        if (_1726 > 0.0)
        {
            _2169 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2169 = frontier_phi_40_35_ladder;
        }
        float _2382;
        if (_1729 > 0.0)
        {
            _2382 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2382 = frontier_phi_49_46_ladder;
        }
        float _2384 = isnan(_2169) ? _1890 : (isnan(_1890) ? _2169 : min(_1890, _2169));
        float _2385 = isnan(_2382) ? _2384 : (isnan(_2384) ? _2382 : min(_2384, _2382));
        float _2389 = (_2385 * _1723) + _1712;
        float _2390 = (_2385 * _1726) + _1716;
        float _2391 = (_2385 * _1729) + _1720;
        float _2392 = _2385 * 9.9999997473787516355514526367188e-05;
        float _2393 = (-1.0) - _2392;
        float _2395 = _2392 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2391 > _2395) || ((_2391 < _2393) || ((_2390 > _2395) || ((_2390 < _2393) || ((_2389 < _2393) || (_2389 > _2395))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2590 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2391, cbModelParam._m0[17u].z, fma(_2390, cbModelParam._m0[17u].y, _2389 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2391, cbModelParam._m0[18u].z, fma(_2390, cbModelParam._m0[18u].y, _2389 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2391, cbModelParam._m0[19u].z, fma(_2390, cbModelParam._m0[19u].y, _2389 * cbModelParam._m0[19u].x))), _1657);
            frontier_phi_25_49_ladder = _2590.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2590.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2590.x * cbModelParam._m0[1u].z;
        }
        _1748 = frontier_phi_25_49_ladder_2;
        _1750 = frontier_phi_25_49_ladder_1;
        _1752 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_723, _724, _725), _1657);
        _1748 = _1732.x * cbModelParam._m0[1u].z;
        _1750 = _1732.y * cbModelParam._m0[1u].z;
        _1752 = _1732.z * cbModelParam._m0[1u].z;
    }
    float _1765 = (((_750 * _699) + _751) * _715) * ((cbModelParam._m0[1u].w * (_1748 - _1648)) + _1648);
    float _1767 = (((_750 * _701) + _751) * _715) * ((cbModelParam._m0[1u].w * (_1750 - _1650)) + _1650);
    float _1769 = (((_750 * _702) + _751) * _715) * ((cbModelParam._m0[1u].w * (_1752 - _1652)) + _1652);
    float _1772 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1767, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1775 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1767, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1778 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1767, cbSceneParam._m0[91u].y, _1765 * cbSceneParam._m0[91u].x));
    vec4 _1786 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_637, _638));
    float _1788 = _1786.w;
    float _1800 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1788);
    float _1801 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1788);
    float _1802 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1788);
    uvec4 _1806 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1808 = _1806.x * 14u;
    uint _1809 = _1808 + 13u;
    float _1816 = _715 + (-1.0);
    float _1821 = (cbLight._m0[_1809].x * _1816) + 1.0;
    float _1822 = (cbLight._m0[_1809].y * _1816) + 1.0;
    float _1823 = (cbLight._m0[_1809].z * _1816) + 1.0;
    float _1824 = (cbLight._m0[_1809].w * _1816) + 1.0;
    uint _1825 = _1808 + 5u;
    float _1831 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    uint _1835 = _1808 + 4u;
    float _1844 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    uint _1848 = _1808 | 1u;
    float _1859 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_537, _538, _539));
    float _1862 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_537, _538, _539));
    float _4060 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _4071 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1867 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.3183098733425140380859375;
    float _1869 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 0.3183098733425140380859375;
    float _1876 = ((cbLight._m0[_1825].x * _1831) * _1869) + (((cbLight._m0[_1835].x * _1800) * _1844) * _1867);
    float _1877 = ((_1831 * cbLight._m0[_1825].y) * _1869) + (((cbLight._m0[_1835].y * _1801) * _1844) * _1867);
    float _1878 = ((_1831 * cbLight._m0[_1825].z) * _1869) + (((cbLight._m0[_1835].z * _1802) * _1844) * _1867);
    uvec4 _1882 = floatBitsToUint(cbLight._m0[_1808 + 12u]);
    bool _1884 = _1882.x == 0u;
    float _1895;
    float _1897;
    float _1899;
    if (_1884)
    {
        _1895 = _1876;
        _1897 = _1877;
        _1899 = _1878;
    }
    else
    {
        uint _1903 = _1808 + 6u;
        float _1919 = (dot(vec3(cbLight._m0[_1808 + 2u].xyz), vec3(_537, _538, _539)) * 0.5) + 0.5;
        float _1920 = _1919 * _1919;
        float _4082 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1921 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1922 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _1895 = (((cbLight._m0[_1903].x * 0.3183098733425140380859375) * _1921) * _1922) + _1876;
        _1897 = (((cbLight._m0[_1903].y * 0.3183098733425140380859375) * _1921) * _1922) + _1877;
        _1899 = (((cbLight._m0[_1903].z * 0.3183098733425140380859375) * _1921) * _1922) + _1878;
    }
    bool _1902 = _1882.y == 0u;
    float _1940;
    float _1942;
    float _1944;
    if (_1902)
    {
        _1940 = _1895;
        _1942 = _1897;
        _1944 = _1899;
    }
    else
    {
        uint _2113 = _1808 + 7u;
        float _2129 = (dot(vec3(cbLight._m0[_1808 + 3u].xyz), vec3(_537, _538, _539)) * 0.5) + 0.5;
        float _2130 = _2129 * _2129;
        float _4098 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2131 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2132 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _1940 = (((cbLight._m0[_2113].x * 0.3183098733425140380859375) * _2131) * _2132) + _1895;
        _1942 = (((cbLight._m0[_2113].y * 0.3183098733425140380859375) * _2131) * _2132) + _1897;
        _1944 = (((cbLight._m0[_2113].z * 0.3183098733425140380859375) * _2131) * _2132) + _1899;
    }
    uint _1947 = _1808 + 8u;
    float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1808].w)) * _540) * 0.949999988079071044921875);
    float _1961 = _1960 * _1960;
    float _1962 = cbLight._m0[_1808].x + _617;
    float _1963 = cbLight._m0[_1808].y + _618;
    float _1964 = cbLight._m0[_1808].z + _619;
    float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
    float _1969 = _1968 * _1962;
    float _1970 = _1968 * _1963;
    float _1971 = _1968 * _1964;
    float _1972 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_1808].xyz));
    float _4114 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _1976 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _1977 = dot(vec3(_537, _538, _539), vec3(_1969, _1970, _1971));
    float _4136 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _1981 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_1969, _1970, _1971));
    float _4147 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1985 = _1961 * _1961;
    float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
    float _1997 = exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0);
    float _1998 = 0.959999978542327880859375 - _696;
    float _2000 = 0.959999978542327880859375 - _697;
    float _2001 = 0.959999978542327880859375 - _698;
    float _2008 = 1.0 - _1961;
    float _2019 = (0.5 / (((_1976 * ((_1975 * _2008) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2008) + _1961) * _1975))) * _1975;
    float _4158 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2021 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
    uint _2035 = _1808 + 9u;
    float _2046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1848].w)) * _540) * 0.949999988079071044921875);
    float _2047 = _2046 * _2046;
    float _2048 = cbLight._m0[_1848].x + _617;
    float _2049 = cbLight._m0[_1848].y + _618;
    float _2050 = cbLight._m0[_1848].z + _619;
    float _2054 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
    float _2055 = _2054 * _2048;
    float _2056 = _2054 * _2049;
    float _2057 = _2054 * _2050;
    float _2058 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_1848].xyz));
    float _4169 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2062 = dot(vec3(_537, _538, _539), vec3(_2055, _2056, _2057));
    float _4180 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2065 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2066 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_2055, _2056, _2057));
    float _4191 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2070 = _2047 * _2047;
    float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
    float _2081 = exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0);
    float _2088 = 1.0 - _2047;
    float _2098 = (0.5 / (((_1976 * ((_2061 * _2088) + _2047)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2088) + _2047) * _2061))) * _2061;
    float _4202 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2100 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
    float _2110 = (((((_2081 * _1998) + _699) * cbLight._m0[_2035].x) * _2100) * _1831) + ((((cbLight._m0[_1947].x * _1800) * ((_1997 * _1998) + _699)) * _2021) * _1844);
    float _2111 = (((((_2081 * _2000) + _701) * cbLight._m0[_2035].y) * _2100) * _1831) + ((((cbLight._m0[_1947].y * _1801) * ((_1997 * _2000) + _701)) * _2021) * _1844);
    float _2112 = (((((_2081 * _2001) + _702) * cbLight._m0[_2035].z) * _2100) * _1831) + ((((cbLight._m0[_1947].z * _1802) * ((_1997 * _2001) + _702)) * _2021) * _1844);
    float _2174;
    float _2176;
    float _2178;
    if (_1884)
    {
        _2174 = _2110;
        _2176 = _2111;
        _2178 = _2112;
    }
    else
    {
        uint _2180 = _1808 + 2u;
        uint _2184 = _1808 + 10u;
        float _2198 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2180].w)) * _540) * 0.949999988079071044921875);
        float _2199 = _2198 * _2198;
        float _2200 = cbLight._m0[_2180].x + _617;
        float _2201 = cbLight._m0[_2180].y + _618;
        float _2202 = cbLight._m0[_2180].z + _619;
        float _2206 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
        float _2207 = _2206 * _2200;
        float _2208 = _2206 * _2201;
        float _2209 = _2206 * _2202;
        float _2210 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_2180].xyz));
        float _4213 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2213 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2214 = dot(vec3(_537, _538, _539), vec3(_2207, _2208, _2209));
        float _4224 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2217 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2218 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_2207, _2208, _2209));
        float _4235 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2222 = _2199 * _2199;
        float _2226 = ((_2217 * _2217) * (_2222 + (-1.0))) + 1.0;
        float _2233 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
        float _2240 = 1.0 - _2199;
        float _2250 = (0.5 / (((_1976 * ((_2213 * _2240) + _2199)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2240) + _2199) * _2213))) * _2213;
        float _4246 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2252 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2222 / ((_2226 * _2226) * 3.141590118408203125));
        float _2253 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _2174 = (((((_2233 * _1998) + _699) * cbLight._m0[_2184].x) * _2252) * _2253) + _2110;
        _2176 = (((((_2233 * _2000) + _701) * cbLight._m0[_2184].y) * _2252) * _2253) + _2111;
        _2178 = (((((_2233 * _2001) + _702) * cbLight._m0[_2184].z) * _2252) * _2253) + _2112;
    }
    float _2288;
    float _2290;
    float _2292;
    if (_1902)
    {
        _2288 = _2174;
        _2290 = _2176;
        _2292 = _2178;
    }
    else
    {
        uint _2299 = _1808 + 3u;
        uint _2303 = _1808 + 11u;
        float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _540) * 0.949999988079071044921875);
        float _2318 = _2317 * _2317;
        float _2319 = cbLight._m0[_2299].x + _617;
        float _2320 = cbLight._m0[_2299].y + _618;
        float _2321 = cbLight._m0[_2299].z + _619;
        float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
        float _2326 = _2325 * _2319;
        float _2327 = _2325 * _2320;
        float _2328 = _2325 * _2321;
        float _2329 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_2299].xyz));
        float _4262 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2332 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2333 = dot(vec3(_537, _538, _539), vec3(_2326, _2327, _2328));
        float _4273 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2336 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2337 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2326, _2327, _2328));
        float _4284 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2341 = _2318 * _2318;
        float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
        float _2352 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
        float _2359 = 1.0 - _2318;
        float _2369 = (0.5 / (((_1976 * ((_2332 * _2359) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2359) + _2318) * _2332))) * _2332;
        float _4295 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2371 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
        float _2372 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _2288 = (((((_2352 * _1998) + _699) * cbLight._m0[_2303].x) * _2371) * _2372) + _2174;
        _2290 = (((((_2352 * _2000) + _701) * cbLight._m0[_2303].y) * _2371) * _2372) + _2176;
        _2292 = (((((_2352 * _2001) + _702) * cbLight._m0[_2303].z) * _2371) * _2372) + _2178;
    }
    float _2507;
    float _2509;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    if (_1806.y == 0u)
    {
        float _2447 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2448 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2447;
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2447;
        float _2450 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2447;
        uvec4 _2462 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2463 = _2462.x;
        uint _2474 = uint((float(_2462.y) * floor(float(uint(cbSceneParam._m0[85u].y * _638) / _2463))) + floor(float(uint(cbSceneParam._m0[85u].x * _637) / _2463)));
        float _2484 = (log2(_2450 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2485 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        uint _2488 = uint(isnan(14.0) ? _2485 : (isnan(_2485) ? 14.0 : min(_2485, 14.0)));
        uvec4 _2493 = texelFetch(g_lightClusterGridBuffer, int(((_2488 << 2u) + (_2474 << 6u)) >> 2u));
        uint _2494 = _2493.x;
        uint _2495 = _2462.z;
        float _2595;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        if (((((1u << ((_2495 >> 4u) & 15u)) + 4294967295u) & _2494) == 0u) || ((_2495 & 240u) == 0u))
        {
            _2595 = 0.0;
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
        }
        else
        {
            float _2596;
            float _2598;
            float _2600;
            float _2602;
            float _2604;
            float _2606;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            uint _2754 = 0u;
            uint _2763;
            bool _2764;
            for (;;)
            {
                _2763 = texelFetch(g_lightClassification, int((((_2488 << 5u) + (_2474 << 9u)) + (_2754 << 2u)) >> 2u)).x;
                _2764 = _2763 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2764)
                {
                    frontier_phi_66_pred = _2748;
                    frontier_phi_66_pred_1 = _2753;
                    frontier_phi_66_pred_2 = _2752;
                    frontier_phi_66_pred_3 = _2751;
                    frontier_phi_66_pred_4 = _2750;
                    frontier_phi_66_pred_5 = _2749;
                }
                else
                {
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    uint _2899;
                    _2893 = _2748;
                    _2894 = _2749;
                    _2895 = _2750;
                    _2896 = _2751;
                    _2897 = _2752;
                    _2898 = _2753;
                    _2899 = _2763;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    for (;;)
                    {
                        uint _2903 = uint(findLSB(_2899)) + (_2754 << 5u);
                        uint _2900 = (_2899 + 4294967295u) & _2899;
                        uint _2905 = _2903 * 48u;
                        vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 3u)).x));
                        uint _2925 = (_2903 * 48u) + 4u;
                        vec4 _2938 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 3u)).x));
                        uint _2944 = (_2903 * 48u) + 8u;
                        vec3 _2955 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2944)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 2u)).x));
                        float _2959 = _2919.x - _2448;
                        float _2960 = _2919.y - _2449;
                        float _2961 = _2919.z - _2450;
                        float _2962 = dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961));
                        float _2965 = inversesqrt(_2962);
                        float _2966 = _2965 * _2959;
                        float _2967 = _2965 * _2960;
                        float _2968 = _2965 * _2961;
                        float _2969 = dot(vec3(_656, _659, _662), vec3(_2966, _2967, _2968));
                        float _2974 = 1.0 - (_2962 * _2919.w);
                        float _4321 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2975 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _2976 = sqrt(_2962) * _2938.w;
                        float _2979 = 1.39999997615814208984375 / (_2976 + 1.39999997615814208984375);
                        float _2980 = _2979 * _2979;
                        float _2983 = ((1.0 - _2980) * _2969) + _2980;
                        float _2986 = _2976 * _2976;
                        float _2990 = ((isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))) * _2975) / ((_2986 * 0.699999988079071044921875) + 1.0);
                        float _2994 = (-0.0) - _2448;
                        float _2995 = (-0.0) - _2449;
                        float _2996 = (-0.0) - _2450;
                        float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                        float _3001 = _3000 * _2994;
                        float _3002 = _3000 * _2995;
                        float _3003 = _3000 * _2996;
                        float _3011 = exp2(log2(1.0 / ((_2986 * 3.5) + 5.0)) * 0.25);
                        float _3012 = 1.0 - _731;
                        float _3019 = sqrt(1.0 - ((1.0 - (_3012 * _3012)) * (1.0 - (_3011 * _3011))));
                        float _3020 = _3019 * _3019;
                        float _3021 = _3020 * _3020;
                        float _3022 = _3001 + _2966;
                        float _3023 = _3002 + _2967;
                        float _3024 = _3003 + _2968;
                        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                        float _3032 = dot(vec3(_656, _659, _662), vec3(_3001, _3002, _3003));
                        float _4337 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3035 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3036 = dot(vec3(_656, _659, _662), vec3(_3028 * _3022, _3028 * _3023, _3028 * _3024));
                        float _4348 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3039 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3043 = ((_3039 * _3039) * (_3021 + (-1.0))) + 1.0;
                        float _3044 = _2979 * _3020;
                        float _3045 = _3044 * _3044;
                        float _3048 = ((1.0 - _3045) * _2969) + _3045;
                        float _4359 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3049 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3050 = 1.0 - _3020;
                        float _3060 = (0.5 / (((_3049 * ((_3035 * _3050) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_3049 * _3050) + _3020) * _3035))) * _3049;
                        float _4370 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3071 = (((_3021 * 3.1415927410125732421875) * (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) / ((_3043 * _3043) * ((_2986 * 2.1991131305694580078125) + 3.141590118408203125))) * _2975;
                        _2823 = (_2990 * _2938.x) + _2896;
                        _2824 = (_2990 * _2938.y) + _2897;
                        _2825 = (_2990 * _2938.z) + _2898;
                        _2820 = (_3071 * _2955.x) + _2893;
                        _2821 = (_3071 * _2955.y) + _2894;
                        _2822 = (_3071 * _2955.z) + _2895;
                        if (_2900 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2893 = _2820;
                            _2894 = _2821;
                            _2895 = _2822;
                            _2896 = _2823;
                            _2897 = _2824;
                            _2898 = _2825;
                            _2899 = _2900;
                        }
                    }
                    frontier_phi_66_pred = _2820;
                    frontier_phi_66_pred_1 = _2825;
                    frontier_phi_66_pred_2 = _2824;
                    frontier_phi_66_pred_3 = _2823;
                    frontier_phi_66_pred_4 = _2822;
                    frontier_phi_66_pred_5 = _2821;
                }
                _2596 = frontier_phi_66_pred;
                _2606 = frontier_phi_66_pred_1;
                _2604 = frontier_phi_66_pred_2;
                _2602 = frontier_phi_66_pred_3;
                _2600 = frontier_phi_66_pred_4;
                _2598 = frontier_phi_66_pred_5;
                uint _2755 = _2754 + 1u;
                if (_2755 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2748 = _2596;
                    _2749 = _2598;
                    _2750 = _2600;
                    _2751 = _2602;
                    _2752 = _2604;
                    _2753 = _2606;
                    _2754 = _2755;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2595 = _2596;
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
        }
        uvec4 _2609 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2610 = _2609.z;
        uint _2612 = (_2610 >> 8u) & 15u;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        if (((4294967295u << _2612) & _2494) == 0u)
        {
            _2716 = _2595;
            _2718 = _2597;
            _2720 = _2599;
            _2722 = _2601;
            _2724 = _2603;
            _2726 = _2605;
        }
        else
        {
            float _2741 = inversesqrt(dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450)));
            float _2742 = _2741 * _2448;
            float _2743 = _2741 * _2449;
            float _2744 = _2741 * _2450;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2612 < ((_2610 >> 12u) & 15u))
            {
                float _2717;
                float _2719;
                float _2721;
                float _2723;
                float _2725;
                float _2727;
                float _2876 = _2595;
                float _2877 = _2597;
                float _2878 = _2599;
                float _2879 = _2601;
                float _2880 = _2603;
                float _2881 = _2605;
                uint _2882 = _2612;
                uint _2891;
                bool _2892;
                for (;;)
                {
                    _2891 = texelFetch(g_lightClassification, int((((_2488 << 5u) + (_2474 << 9u)) + (_2882 << 2u)) >> 2u)).x;
                    _2892 = _2891 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2892)
                    {
                        frontier_phi_77_pred = _2881;
                        frontier_phi_77_pred_1 = _2880;
                        frontier_phi_77_pred_2 = _2879;
                        frontier_phi_77_pred_3 = _2878;
                        frontier_phi_77_pred_4 = _2877;
                        frontier_phi_77_pred_5 = _2876;
                    }
                    else
                    {
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3098 = _2876;
                        float _3099 = _2877;
                        float _3100 = _2878;
                        float _3101 = _2879;
                        float _3102 = _2880;
                        float _3103 = _2881;
                        uint _3104 = _2891;
                        uint _3105;
                        vec4 _3130;
                        float _3131;
                        vec4 _3146;
                        vec3 _3158;
                        vec4 _3173;
                        vec4 _3189;
                        float _3235;
                        bool _3236;
                        for (;;)
                        {
                            uint _3115 = ((_2882 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3104));
                            _3105 = (_3104 + 4294967295u) & _3104;
                            uint _3117 = _3115 * 40u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            _3131 = _3130.w;
                            uint _3133 = (_3115 * 40u) + 4u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3148 = (_3115 * 40u) + 8u;
                            _3158 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x));
                            uint _3160 = (_3115 * 40u) + 16u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3176 = (_3115 * 40u) + 20u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3191 = (_3115 * 40u) + 24u;
                            vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3210 = (_3115 * 40u) + 28u;
                            vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            _3235 = fma(_2450, _3223.z, fma(_2449, _3223.y, _3223.x * _2448)) + _3223.w;
                            _3236 = !((fma(_2450, _3204.z, fma(_2449, _3204.y, _3204.x * _2448)) + _3204.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3236)
                            {
                                float _3263 = _3130.x - _2448;
                                float _3264 = _3130.y - _2449;
                                float _3265 = _3130.z - _2450;
                                float _3266 = dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265));
                                float _3269 = inversesqrt(_3266);
                                float _3270 = _3269 * _3263;
                                float _3271 = _3269 * _3264;
                                float _3272 = _3269 * _3265;
                                float _3276 = 1.0 - (_3266 / (_3131 * _3131));
                                float _4381 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3277 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3281 = sqrt(_3266) * _3146.w;
                                float _3283 = 1.39999997615814208984375 / (_3281 + 1.39999997615814208984375);
                                float _3284 = _3283 * _3283;
                                float _3287 = ((1.0 - _3284) * dot(vec3(_3270, _3271, _3272), vec3(_656, _659, _662))) + _3284;
                                float _3290 = _3281 * _3281;
                                float _3294 = (fma(_2450, _3173.z, fma(_2449, _3173.y, _3173.x * _2448)) + _3173.w) / _3235;
                                float _3295 = (fma(_2450, _3189.z, fma(_2449, _3189.y, _3189.x * _2448)) + _3189.w) / _3235;
                                float _3299 = 1.0 - dot(vec2(_3294, _3295), vec2(_3294, _3295));
                                float _4397 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3301 = _3300 * (((isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0))) * _3277) / ((_3290 * 0.699999988079071044921875) + 1.0));
                                float _3313 = exp2(log2(1.0 / ((_3290 * 3.5) + 5.0)) * 0.25);
                                float _3314 = 1.0 - _731;
                                float _3321 = sqrt(1.0 - ((1.0 - (_3314 * _3314)) * (1.0 - (_3313 * _3313))));
                                float _3322 = _3321 * _3321;
                                float _3323 = _3322 * _3322;
                                float _3324 = _3270 - _2742;
                                float _3325 = _3271 - _2743;
                                float _3326 = _3272 - _2744;
                                float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                                float _3334 = dot(vec3(_656, _659, _662), vec3((-0.0) - _2742, (-0.0) - _2743, (-0.0) - _2744));
                                float _4408 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3337 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3338 = dot(vec3(_656, _659, _662), vec3(_3330 * _3324, _3330 * _3325, _3330 * _3326));
                                float _4419 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3345 = ((_3341 * _3341) * (_3323 + (-1.0))) + 1.0;
                                float _3346 = _3283 * _3322;
                                float _3347 = _3346 * _3346;
                                float _3353 = ((1.0 - _3347) * dot(vec3(_656, _659, _662), vec3(_3270, _3271, _3272))) + _3347;
                                float _4430 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3354 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3355 = 1.0 - _3322;
                                float _3365 = (0.5 / (((_3354 * ((_3337 * _3355) + _3322)) + 9.9999999392252902907785028219223e-09) + (((_3354 * _3355) + _3322) * _3337))) * _3354;
                                float _4441 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3375 = (_3300 * _3277) * (((_3323 * 3.1415927410125732421875) * (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) / ((_3345 * _3345) * ((_3290 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3301 * _3146.y;
                                frontier_phi_83_pred_1 = _3301 * _3146.x;
                                frontier_phi_83_pred_2 = _3375 * _3158.z;
                                frontier_phi_83_pred_3 = _3375 * _3158.y;
                                frontier_phi_83_pred_4 = _3375 * _3158.x;
                                frontier_phi_83_pred_5 = _3301 * _3146.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3383 = frontier_phi_83_pred;
                            _3382 = frontier_phi_83_pred_1;
                            _3381 = frontier_phi_83_pred_2;
                            _3380 = frontier_phi_83_pred_3;
                            _3379 = frontier_phi_83_pred_4;
                            _3384 = frontier_phi_83_pred_5;
                            _3088 = _3382 + _3101;
                            _3089 = _3383 + _3102;
                            _3090 = _3384 + _3103;
                            _3085 = _3379 + _3098;
                            _3086 = _3380 + _3099;
                            _3087 = _3381 + _3100;
                            if (_3105 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3105;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3090;
                        frontier_phi_77_pred_1 = _3089;
                        frontier_phi_77_pred_2 = _3088;
                        frontier_phi_77_pred_3 = _3087;
                        frontier_phi_77_pred_4 = _3086;
                        frontier_phi_77_pred_5 = _3085;
                    }
                    _2727 = frontier_phi_77_pred;
                    _2725 = frontier_phi_77_pred_1;
                    _2723 = frontier_phi_77_pred_2;
                    _2721 = frontier_phi_77_pred_3;
                    _2719 = frontier_phi_77_pred_4;
                    _2717 = frontier_phi_77_pred_5;
                    uint _2883 = _2882 + 1u;
                    if (_2883 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2876 = _2717;
                        _2877 = _2719;
                        _2878 = _2721;
                        _2879 = _2723;
                        _2880 = _2725;
                        _2881 = _2727;
                        _2882 = _2883;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2721;
                frontier_phi_58_59_ladder_1 = _2727;
                frontier_phi_58_59_ladder_2 = _2725;
                frontier_phi_58_59_ladder_3 = _2723;
                frontier_phi_58_59_ladder_4 = _2719;
                frontier_phi_58_59_ladder_5 = _2717;
            }
            else
            {
                frontier_phi_58_59_ladder = _2599;
                frontier_phi_58_59_ladder_1 = _2605;
                frontier_phi_58_59_ladder_2 = _2603;
                frontier_phi_58_59_ladder_3 = _2601;
                frontier_phi_58_59_ladder_4 = _2597;
                frontier_phi_58_59_ladder_5 = _2595;
            }
            _2716 = frontier_phi_58_59_ladder_5;
            _2718 = frontier_phi_58_59_ladder_4;
            _2720 = frontier_phi_58_59_ladder;
            _2722 = frontier_phi_58_59_ladder_3;
            _2724 = frontier_phi_58_59_ladder_2;
            _2726 = frontier_phi_58_59_ladder_1;
        }
        float _2731 = isnan(1.0) ? _715 : (isnan(_715) ? 1.0 : min(_715, 1.0));
        _2507 = (_2731 * _2722) + _1940;
        _2509 = (_2731 * _2724) + _1942;
        _2511 = (_2731 * _2726) + _1944;
        _2513 = ((_2716 * _699) * _2731) + _2288;
        _2515 = ((_2718 * _701) * _2731) + _2290;
        _2517 = ((_2720 * _702) * _2731) + _2292;
    }
    else
    {
        _2507 = _1940;
        _2509 = _1942;
        _2511 = _1944;
        _2513 = _2288;
        _2515 = _2290;
        _2517 = _2292;
    }
    float _4457 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4468 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4479 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _2534 = ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2507 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _715))) + ((_2513 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    float _2535 = ((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2509 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _715))) + ((_2515 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    float _2536 = ((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2511 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _715))) + ((_2517 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    uint _2537 = _234 + 6u;
    float _2545 = _637 / cbSceneParam._m0[86u].x;
    float _2546 = _638 / cbSceneParam._m0[86u].y;
    vec4 _2560 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2545, _2546, (log2((isnan(cbSceneParam._m0[77u].w) ? _559 : (isnan(_559) ? cbSceneParam._m0[77u].w : min(_559, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2562 = _2560.x;
    float _2563 = _2560.y;
    float _2564 = _2560.z;
    float _2565 = _2560.w;
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    if (_559 > cbSceneParam._m0[78u].w)
    {
        float _2620 = isnan(_559) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _559 : min(cbSceneParam._m0[80u].w, _559));
        float _2621 = _2620 / _559;
        float _2632 = _2621 * _610;
        float _2633 = _611 * _2621;
        float _2634 = (-0.0) - _2633;
        float _2636 = _2621 * _612;
        float _2638 = (cbSceneParam._m0[77u].w * _2634) / _2620;
        float _2639 = _2638 + cbSceneParam._m0[79u].w;
        float _2640 = cbSceneParam._m0[79u].w - _2633;
        float _2646 = sqrt(((_2632 * _2632) + (_2633 * _2633)) + (_2636 * _2636));
        float _2649 = (1.0 - (cbSceneParam._m0[77u].w / _2620)) * _2646;
        float _2654 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2656 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2833;
        if (abs((_2634 - _2638) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2833 = ((((_2639 > 0.0) ? exp2(_2654 * _2639) : (2.0 - exp2(_2656 * _2639))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2649;
        }
        else
        {
            float _2777 = 1.0 / cbSceneParam._m0[80u].x;
            float _2778 = isnan(_2640) ? _2639 : (isnan(_2639) ? _2640 : max(_2639, _2640));
            float _2779 = isnan(_2640) ? _2639 : (isnan(_2639) ? _2640 : min(_2639, _2640));
            float _2788 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : min(_2778, 0.0));
            float _2789 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : min(_2779, 0.0));
            _2833 = ((abs(_2646 / _2634) * cbSceneParam._m0[80u].y) * ((((_2788 - _2789) * 2.0) - ((exp2(_2654 * (isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0)))) - exp2(_2654 * (isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0))))) * _2777)) - ((exp2(_2656 * _2788) - exp2(_2656 * _2789)) * _2777))) + (_2649 * cbSceneParam._m0[80u].z);
        }
        vec4 _2835 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2545, _2546, 1.0), 0.0);
        float _2844 = exp2((_2833 * (-1.44269502162933349609375)) * (1.0 - _2835.w));
        float _2845 = log2(_2844);
        float _2861 = log2(_2565);
        _2658 = (exp2(_2861 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2845 * cbSceneParam._m0[78u].x)) * _2835.x) / cbSceneParam._m0[78u].x)) + _2562;
        _2660 = (exp2(_2861 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2845 * cbSceneParam._m0[78u].y)) * _2835.y) / cbSceneParam._m0[78u].y)) + _2563;
        _2662 = (exp2(_2861 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2845 * cbSceneParam._m0[78u].z)) * _2835.z) / cbSceneParam._m0[78u].z)) + _2564;
        _2664 = _2844 * _2565;
    }
    else
    {
        _2658 = _2562;
        _2660 = _2563;
        _2662 = _2564;
        _2664 = _2565;
    }
    bool _2871;
    vec4 _2674;
    vec4 _2696;
    float _2698;
    float _2702;
    float _2703;
    float _2704;
    float _2705;
    bool _2715;
    for (;;)
    {
        _2674 = cbMatDynParam._m0[0u];
        float _2676 = roundEven(_2674.y);
        bool _2677 = _2676 == 3.0;
        float _2678 = log2(_2664);
        float _2685 = exp2(_2678 * cbSceneParam._m0[78u].x) * _2534;
        float _2686 = exp2(_2678 * cbSceneParam._m0[78u].y) * _2535;
        float _2687 = exp2(_2678 * cbSceneParam._m0[78u].z) * _2536;
        float _2694 = _626 + (-0.5);
        _2696 = cbMtdParam._m0[1u];
        _2698 = _2696.y * _2694;
        float _2701 = (_2676 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2702 = _2701 * (_2677 ? _2685 : (_2685 + (cbSceneParam._m0[72u].w * _2658)));
        _2703 = _2701 * (_2677 ? _2686 : (_2686 + (cbSceneParam._m0[72u].w * _2660)));
        _2704 = _2701 * (_2677 ? _2687 : (_2687 + (cbSceneParam._m0[72u].w * _2662)));
        _2705 = _2694 * 0.999000012874603271484375;
        _2715 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2715)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2705) < 0.5)
            {
                _2871 = true;
                break;
            }
        }
        uint _2812 = _675 + uint(_2674.w);
        if ((cbInstanceData._m0[_2812].w < 1.0) && ((cbInstanceData._m0[_2812].w + _2705) < 0.5))
        {
            _2871 = true;
            break;
        }
        if ((_2698 + 1.0) < _2696.x)
        {
            _2871 = true;
            break;
        }
        _2871 = false;
        break;
    }
    float _3076;
    if (_2871)
    {
        discard_state = true;
        _3076 = 0.0;
    }
    else
    {
        _3076 = cbInstanceData._m0[_2537].w;
    }
    SV_Target.x = _2702;
    SV_Target.y = _2703;
    SV_Target.z = _2704;
    SV_Target.w = _3076;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2537].w;
    discard_exit();
}


