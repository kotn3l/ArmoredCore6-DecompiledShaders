#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1413;
float _3793;
float _3794;
float _3795;
float _3796;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3805 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3816 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3827 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _340 = _335.x * cbMtdParam._m0[11u].x;
    float _341 = _335.y * cbMtdParam._m0[11u].y;
    float _342 = _335.z * cbMtdParam._m0[11u].z;
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].y) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3838 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _437 = (_430 * ((_361.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _438 = (_430 * ((_361.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _439 = (_430 * ((_361.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _456 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[24u].y) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3849 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _510 = (_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437;
    float _511 = (_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438;
    float _512 = (_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439;
    float _516 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _510;
    float _519 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _511;
    float _522 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _512;
    float _529 = ((_510 - _516) * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) + _516;
    float _530 = ((_511 - _519) * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) + _519;
    float _531 = ((_512 - _522) * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) + _522;
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _590 = _588.x;
    float _591 = _588.y;
    float _592 = _588.z;
    float _599 = ((_571.x - _590) * _430) + _590;
    float _600 = ((_571.y - _591) * _430) + _591;
    float _601 = ((_571.z - _592) * _430) + _592;
    vec4 _613 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _626 = ((_613.z - _601) * _503) + _601;
    float _629 = ((((_613.x - _599) * _503) + _599) * 2.0) + (-1.0);
    float _630 = ((((_613.y - _600) * _503) + _600) * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _3860 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _636 = sqrt(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))));
    vec4 _649 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _667 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _669 = _667.x;
    float _670 = 1.0 - _669;
    float _683 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_669 - _670) * cbMtdParam._m0[24u].z) + _670) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3871 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _684 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _691 = (_684 * (cbMtdParam._m0[17u].x - _529)) + _529;
    float _692 = (_684 * (cbMtdParam._m0[17u].y - _530)) + _530;
    float _693 = (_684 * (cbMtdParam._m0[17u].z - _531)) + _531;
    vec4 _705 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _719 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _721 = _719.x;
    float _739 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w)).x - _721) * _430) + _721;
    float _756 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _297) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _298) + cbTextureTilingScale._m0[21u].w)).x - _739) * _503) + _739;
    float _760 = ((_705.x - _756) * cbMtdParam._m0[19u].z) + _756;
    float _762 = _760 - (_760 * _684);
    float _767 = (((_548.z - _626) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _626;
    vec4 _780 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _787 = (_780.x * 2.0) + (-1.0);
    float _788 = (_780.y * 2.0) + (-1.0);
    float _789 = dot(vec2(_787, _788), vec2(_787, _788));
    float _3882 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _797 = (_684 * (_780.z - _767)) + _767;
    float _802 = _629 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_548.x * 2.0) + (-1.0)));
    float _803 = _630 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_548.y * 2.0) + (-1.0)));
    float _815 = (((_787 - _802) + (cbMtdParam._m0[21u].x * _802)) * _684) + _802;
    float _816 = (((_788 - _803) + (cbMtdParam._m0[21u].x * _803)) * _684) + _803;
    float _817 = (_684 * (sqrt(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) - _636)) + _636;
    float _819 = cbMtdParam._m0[22u].x + _649.w;
    float _822 = fma(_817, _244 * NORMAL.x, fma(_816, _251 * TANGENT.x, (_237 * _229) * _815));
    float _825 = fma(_817, _244 * NORMAL.y, fma(_816, _251 * TANGENT.y, (_237 * _230) * _815));
    float _828 = fma(_817, _244 * NORMAL.z, fma(_816, _251 * TANGENT.z, (_237 * _231) * _815));
    float _832 = inversesqrt(dot(vec3(_822, _825, _828), vec3(_822, _825, _828)));
    float _833 = _832 * _822;
    float _834 = _832 * _825;
    float _835 = _832 * _828;
    float _3893 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _836 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _3915 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3926 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _3937 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _3948 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _841 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _855 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _906 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _896);
    float _907 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _896);
    float _908 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _896);
    float _912 = inversesqrt(dot(vec3(_906, _907, _908), vec3(_906, _907, _908)));
    float _913 = _906 * _912;
    float _914 = _907 * _912;
    float _915 = _908 * _912;
    vec4 _920 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _922 = _920.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1094 = sqrt(((_906 * _906) + (_907 * _907)) + (_908 * _908));
        float _1100 = (cbMatDynParam._m0[5u].x * _1094) + cbMatDynParam._m0[5u].y;
        float _3959 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1105 = (cbMatDynParam._m0[5u].z * _1094) + cbMatDynParam._m0[5u].w;
        float _3970 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) - _1101)) + _1101) < ((_922 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _933 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _934 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _952 = fma(_835, cbSceneParam._m0[5u].z, fma(_834, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _833));
    float _955 = fma(_835, cbSceneParam._m0[6u].z, fma(_834, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _833));
    float _958 = fma(_835, cbSceneParam._m0[7u].z, fma(_834, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _833));
    uint _971 = _278 + 9u;
    uint _972 = _971 + uint(cbMatDynParam._m0[0u].w);
    float _978 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_972].x;
    float _979 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_972].y;
    float _980 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * cbInstanceData._m0[_972].z;
    float _3981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _984 = 1.0 - _841;
    float _985 = _981 * _984;
    float _986 = _982 * _984;
    float _987 = _983 * _984;
    float _992 = (_981 + (-0.039999999105930328369140625)) * _841;
    float _993 = (_982 + (-0.039999999105930328369140625)) * _841;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _841;
    float _995 = _992 + 0.039999999105930328369140625;
    float _997 = _993 + 0.039999999105930328369140625;
    float _998 = _994 + 0.039999999105930328369140625;
    vec4 _1007 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _933, cbSceneParam._m0[86u].y * _934));
    float _1011 = ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * TEXCOORD_5.w) * _1007.x;
    float _1012 = dot(vec3(_833, _834, _835), vec3(_913, _914, _915));
    float _1015 = _1012 * 2.0;
    float _1019 = (_1015 * _833) - _913;
    float _1020 = (_1015 * _834) - _914;
    float _1021 = (_1015 * _835) - _915;
    float _1025 = abs(dot(vec3(_913, _914, _915), vec3(_833, _834, _835)));
    float _4014 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1027 = sqrt(_836);
    float _1040 = exp2((_1027 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1027 * 3.0));
    float _1046 = (1.0 - _1040) * ((_1027 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1047 = _1040 * _1027;
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1412;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1137 = fma(_1083, cbModelParam._m0[26u].z, fma(_1079, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1075));
        float _1141 = fma(_1083, cbModelParam._m0[27u].z, fma(_1079, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1075));
        float _1145 = fma(_1083, cbModelParam._m0[28u].z, fma(_1079, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1075));
        float _1170 = _1075 + _833;
        float _1171 = _1079 + _834;
        float _1172 = _1083 + _835;
        float _1182 = fma(_1172, cbModelParam._m0[26u].z, fma(_1171, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1170)) - _1137;
        float _1183 = fma(_1172, cbModelParam._m0[27u].z, fma(_1171, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1170)) - _1141;
        float _1184 = fma(_1172, cbModelParam._m0[28u].z, fma(_1171, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1170)) - _1145;
        float _1188 = inversesqrt(dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184)));
        float _1201 = ((_1188 * _1182) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1137 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1188 * _1183) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1141 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1188 * _1184) / cbModelParam._m0[34u].z) + ((((((_1145 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        float _1240 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1206.x + (-0.5));
        float _1242 = _1240 * (_1206.y + (-0.5));
        float _1243 = _1240 * (_1206.z + (-0.5));
        float _1250 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1213.x + (-0.5));
        float _1252 = _1250 * (_1213.y + (-0.5));
        float _1253 = _1250 * (_1213.z + (-0.5));
        float _1260 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1220.x + (-0.5));
        float _1262 = _1260 * (_1220.y + (-0.5));
        float _1263 = _1260 * (_1220.z + (-0.5));
        float _1270 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1227.x + (-0.5));
        float _1272 = _1270 * (_1227.y + (-0.5));
        float _1273 = _1270 * (_1227.z + (-0.5));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = _1241 * 0.5;
        float _1278 = _1251 * 0.5;
        float _1279 = _1261 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1294 = (dot(vec3(_833, _834, _835), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1304 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4062 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1306 + 1.0))) + _1311) * _1274;
        float _1321 = _1242 * 0.5;
        float _1322 = _1252 * 0.5;
        float _1323 = _1262 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_833, _834, _835), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4095 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1348 + 1.0))) + _1353) * _1275;
        float _1363 = _1243 * 0.5;
        float _1364 = _1253 * 0.5;
        float _1365 = _1263 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_833, _834, _835), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4128 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1390 + 1.0))) + _1395) * _1276;
        _1412 = _1243;
        _1414 = _1242;
        _1415 = _1241;
        _1416 = _1253;
        _1417 = _1252;
        _1418 = _1251;
        _1419 = _1263;
        _1420 = _1262;
        _1421 = _1261;
        _1422 = _1276;
        _1423 = _1275;
        _1424 = _1274;
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
    }
    else
    {
        _1412 = _1413;
        _1414 = _1413;
        _1415 = _1413;
        _1416 = _1413;
        _1417 = _1413;
        _1418 = _1413;
        _1419 = _1413;
        _1420 = _1413;
        _1421 = _1413;
        _1422 = _1413;
        _1423 = _1413;
        _1424 = _1413;
        _1425 = 0.0;
        _1426 = 0.0;
        _1427 = 0.0;
    }
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1454 = fma(_1083, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1075));
        float _1458 = fma(_1083, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1075));
        float _1462 = fma(_1083, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1075));
        float _1485 = _1075 + _833;
        float _1486 = _1079 + _834;
        float _1487 = _1083 + _835;
        float _1497 = fma(_1487, cbModelParam._m0[30u].z, fma(_1486, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1485)) - _1454;
        float _1498 = fma(_1487, cbModelParam._m0[31u].z, fma(_1486, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1485)) - _1458;
        float _1499 = fma(_1487, cbModelParam._m0[32u].z, fma(_1486, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1485)) - _1462;
        float _1503 = inversesqrt(dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499)));
        float _1516 = ((_1503 * _1497) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1454 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1503 * _1498) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1458 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1518 = ((_1503 * _1499) / cbModelParam._m0[35u].z) + ((((((_1462 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        float _1553 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1520.x + (-0.5));
        float _1555 = _1553 * (_1520.y + (-0.5));
        float _1556 = _1553 * (_1520.z + (-0.5));
        float _1563 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1527.x + (-0.5));
        float _1565 = _1563 * (_1527.y + (-0.5));
        float _1566 = _1563 * (_1527.z + (-0.5));
        float _1573 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1534.x + (-0.5));
        float _1575 = _1573 * (_1534.y + (-0.5));
        float _1576 = _1573 * (_1534.z + (-0.5));
        float _1583 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1541.x + (-0.5));
        float _1585 = _1583 * (_1541.y + (-0.5));
        float _1586 = _1583 * (_1541.z + (-0.5));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = _1554 * 0.5;
        float _1591 = _1564 * 0.5;
        float _1592 = _1574 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_833, _834, _835), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4191 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1617 + 1.0))) + _1622) * _1587;
        float _1632 = _1555 * 0.5;
        float _1633 = _1565 * 0.5;
        float _1634 = _1575 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_833, _834, _835), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4224 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1659 + 1.0))) + _1664) * _1588;
        float _1674 = _1556 * 0.5;
        float _1675 = _1566 * 0.5;
        float _1676 = _1576 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_833, _834, _835), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4257 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1701 + 1.0))) + _1706) * _1589;
        _1723 = _1556;
        _1724 = _1555;
        _1725 = _1554;
        _1726 = _1566;
        _1727 = _1565;
        _1728 = _1564;
        _1729 = _1576;
        _1730 = _1575;
        _1731 = _1574;
        _1732 = _1589;
        _1733 = _1588;
        _1734 = _1587;
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
    }
    else
    {
        _1723 = _1413;
        _1724 = _1413;
        _1725 = _1413;
        _1726 = _1413;
        _1727 = _1413;
        _1728 = _1413;
        _1729 = _1413;
        _1730 = _1413;
        _1731 = _1413;
        _1732 = _1413;
        _1733 = _1413;
        _1734 = _1413;
        _1735 = 0.0;
        _1736 = 0.0;
        _1737 = 0.0;
    }
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1425)) + _1425;
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1426)) + _1426;
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1427)) + _1427;
    float _1770 = fma(_1749, cbSceneParam._m0[89u].z, fma(_1748, cbSceneParam._m0[89u].y, _1747 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1749, cbSceneParam._m0[90u].z, fma(_1748, cbSceneParam._m0[90u].y, _1747 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1749, cbSceneParam._m0[91u].z, fma(_1748, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1747));
    float _1791 = _1019 * 0.5;
    float _1792 = _1020 * 0.5;
    float _1793 = _1021 * 0.5;
    float _1794 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1797 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1800 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1834;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1807 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1412, _1416, _1419, _1422));
        float _1811 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1414, _1417, _1420, _1423));
        float _1815 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1415, _1418, _1421, _1424));
        float _1822 = dot(vec4(cbModelParam._m0[39u]), vec4(_1791, _1792, _1793, 1.0));
        _1834 = dot(vec3(isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1834 = 1.0;
    }
    float _1845;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1836 = dot(vec4(cbModelParam._m0[40u]), vec4(_1791, _1792, _1793, 1.0));
        _1845 = dot(vec3(isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1836) ? 0.0 : (isnan(0.0) ? _1836 : max(0.0, _1836))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1845 = 1.0;
    }
    float _1849 = (_1845 * cbModelParam._m0[1u].x) + (_1834 * (1.0 - cbModelParam._m0[1u].x));
    float _1859 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _836);
    float _1860 = isnan(_1859) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1859 : min(cbModelParam._m0[25u].z, _1859));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1908 = fma(_1083, cbModelParam._m0[13u].z, fma(_1079, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1075)) + cbModelParam._m0[13u].w;
        float _1912 = fma(_1083, cbModelParam._m0[14u].z, fma(_1079, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1075)) + cbModelParam._m0[14u].w;
        float _1916 = fma(_1083, cbModelParam._m0[15u].z, fma(_1079, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1075)) + cbModelParam._m0[15u].w;
        float _1919 = fma(_1021, cbModelParam._m0[13u].z, fma(_1020, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1019));
        float _1922 = fma(_1021, cbModelParam._m0[14u].z, fma(_1020, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1019));
        float _1925 = fma(_1021, cbModelParam._m0[15u].z, fma(_1020, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1019));
        float _1953;
        if (_1919 > 0.0)
        {
            _1953 = abs((1.0 - _1908) / _1919);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1908 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1953 = frontier_phi_17_15_ladder;
        }
        float _2156;
        if (_1922 > 0.0)
        {
            _2156 = abs((1.0 - _1912) / _1922);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1912 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2156 = frontier_phi_26_22_ladder;
        }
        float _2410;
        if (_1925 > 0.0)
        {
            _2410 = abs((1.0 - _1916) / _1925);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1916 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2410 = frontier_phi_38_33_ladder;
        }
        float _2412 = isnan(_2156) ? _1953 : (isnan(_1953) ? _2156 : min(_1953, _2156));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1919) + _1908;
        float _2418 = (_2413 * _1922) + _1912;
        float _2419 = (_2413 * _1925) + _1916;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2422 = (-1.0) - _2420;
        float _2424 = _2420 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2419 > _2424) || ((_2419 < _2422) || ((_2418 > _2424) || ((_2418 < _2422) || ((_2417 < _2422) || (_2417 > _2424))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2547 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2419, cbModelParam._m0[9u].z, fma(_2418, cbModelParam._m0[9u].y, _2417 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2419, cbModelParam._m0[10u].z, fma(_2418, cbModelParam._m0[10u].y, _2417 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2419, cbModelParam._m0[11u].z, fma(_2418, cbModelParam._m0[11u].y, _2417 * cbModelParam._m0[11u].x))), _1860);
            frontier_phi_16_38_ladder = _2547.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2547.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2547.x * cbModelParam._m0[1u].y;
        }
        _1941 = frontier_phi_16_38_ladder_2;
        _1943 = frontier_phi_16_38_ladder_1;
        _1945 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1019, _1020, _1021), _1860);
        _1941 = _1929.x * cbModelParam._m0[1u].y;
        _1943 = _1929.y * cbModelParam._m0[1u].y;
        _1945 = _1929.z * cbModelParam._m0[1u].y;
    }
    float _1949 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _836);
    float _1950 = isnan(_1949) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1949 : min(cbModelParam._m0[25u].w, _1949));
    float _2040;
    float _2042;
    float _2044;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2004 = fma(_1083, cbModelParam._m0[21u].z, fma(_1079, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1075)) + cbModelParam._m0[21u].w;
        float _2008 = fma(_1083, cbModelParam._m0[22u].z, fma(_1079, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1075)) + cbModelParam._m0[22u].w;
        float _2012 = fma(_1083, cbModelParam._m0[23u].z, fma(_1079, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1075)) + cbModelParam._m0[23u].w;
        float _2015 = fma(_1021, cbModelParam._m0[21u].z, fma(_1020, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1019));
        float _2018 = fma(_1021, cbModelParam._m0[22u].z, fma(_1020, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1019));
        float _2021 = fma(_1021, cbModelParam._m0[23u].z, fma(_1020, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1019));
        float _2161;
        if (_2015 > 0.0)
        {
            _2161 = abs((1.0 - _2004) / _2015);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2004 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2161 = frontier_phi_28_24_ladder;
        }
        float _2437;
        if (_2018 > 0.0)
        {
            _2437 = abs((1.0 - _2008) / _2018);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2008 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2437 = frontier_phi_40_35_ladder;
        }
        float _2650;
        if (_2021 > 0.0)
        {
            _2650 = abs((1.0 - _2012) / _2021);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2012 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2650 = frontier_phi_49_46_ladder;
        }
        float _2652 = isnan(_2437) ? _2161 : (isnan(_2161) ? _2437 : min(_2161, _2437));
        float _2653 = isnan(_2650) ? _2652 : (isnan(_2652) ? _2650 : min(_2652, _2650));
        float _2657 = (_2653 * _2015) + _2004;
        float _2658 = (_2653 * _2018) + _2008;
        float _2659 = (_2653 * _2021) + _2012;
        float _2660 = _2653 * 9.9999997473787516355514526367188e-05;
        float _2661 = (-1.0) - _2660;
        float _2663 = _2660 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2659 > _2663) || ((_2659 < _2661) || ((_2658 > _2663) || ((_2658 < _2661) || ((_2657 < _2661) || (_2657 > _2663))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2858 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2659, cbModelParam._m0[17u].z, fma(_2658, cbModelParam._m0[17u].y, _2657 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2659, cbModelParam._m0[18u].z, fma(_2658, cbModelParam._m0[18u].y, _2657 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2659, cbModelParam._m0[19u].z, fma(_2658, cbModelParam._m0[19u].y, _2657 * cbModelParam._m0[19u].x))), _1950);
            frontier_phi_25_49_ladder = _2858.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2858.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2858.x * cbModelParam._m0[1u].z;
        }
        _2040 = frontier_phi_25_49_ladder_2;
        _2042 = frontier_phi_25_49_ladder_1;
        _2044 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2024 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1019, _1020, _1021), _1950);
        _2040 = _2024.x * cbModelParam._m0[1u].z;
        _2042 = _2024.y * cbModelParam._m0[1u].z;
        _2044 = _2024.z * cbModelParam._m0[1u].z;
    }
    float _2057 = (((_1046 * _995) + _1047) * _1011) * ((cbModelParam._m0[1u].w * (_2040 - _1941)) + _1941);
    float _2059 = (((_1046 * _997) + _1047) * _1011) * ((cbModelParam._m0[1u].w * (_2042 - _1943)) + _1943);
    float _2061 = (((_1046 * _998) + _1047) * _1011) * ((cbModelParam._m0[1u].w * (_2044 - _1945)) + _1945);
    float _2064 = fma(_2061, cbSceneParam._m0[89u].z, fma(_2059, cbSceneParam._m0[89u].y, _2057 * cbSceneParam._m0[89u].x));
    float _2067 = fma(_2061, cbSceneParam._m0[90u].z, fma(_2059, cbSceneParam._m0[90u].y, _2057 * cbSceneParam._m0[90u].x));
    float _2070 = fma(_2061, cbSceneParam._m0[91u].z, fma(_2059, cbSceneParam._m0[91u].y, _2057 * cbSceneParam._m0[91u].x));
    uvec4 _2080 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2082 = _2080.x * 14u;
    uint _2083 = _2082 + 13u;
    float _2090 = _1011 + (-1.0);
    float _2095 = (cbLight._m0[_2083].x * _2090) + 1.0;
    float _2096 = (cbLight._m0[_2083].y * _2090) + 1.0;
    float _2097 = (cbLight._m0[_2083].z * _2090) + 1.0;
    float _2098 = (cbLight._m0[_2083].w * _2090) + 1.0;
    uint _2099 = _2082 + 5u;
    float _2105 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
    uint _2109 = _2082 + 4u;
    float _2115 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
    uint _2119 = _2082 | 1u;
    float _2130 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_833, _834, _835));
    float _2133 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_833, _834, _835));
    float _4393 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _4404 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2138 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * 0.3183098733425140380859375;
    float _2140 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * 0.3183098733425140380859375;
    float _2147 = ((cbLight._m0[_2099].x * _2105) * _2140) + ((cbLight._m0[_2109].x * _2115) * _2138);
    float _2148 = ((_2105 * cbLight._m0[_2099].y) * _2140) + ((_2115 * cbLight._m0[_2109].y) * _2138);
    float _2149 = ((_2105 * cbLight._m0[_2099].z) * _2140) + ((_2115 * cbLight._m0[_2109].z) * _2138);
    uvec4 _2153 = floatBitsToUint(cbLight._m0[_2082 + 12u]);
    bool _2155 = _2153.x == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2155)
    {
        _2166 = _2147;
        _2168 = _2148;
        _2170 = _2149;
    }
    else
    {
        uint _2174 = _2082 + 6u;
        float _2190 = (dot(vec3(cbLight._m0[_2082 + 2u].xyz), vec3(_833, _834, _835)) * 0.5) + 0.5;
        float _2191 = _2190 * _2190;
        float _4415 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2192 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2193 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2166 = (((cbLight._m0[_2174].x * 0.3183098733425140380859375) * _2192) * _2193) + _2147;
        _2168 = (((cbLight._m0[_2174].y * 0.3183098733425140380859375) * _2192) * _2193) + _2148;
        _2170 = (((cbLight._m0[_2174].z * 0.3183098733425140380859375) * _2192) * _2193) + _2149;
    }
    bool _2173 = _2153.y == 0u;
    float _2211;
    float _2213;
    float _2215;
    if (_2173)
    {
        _2211 = _2166;
        _2213 = _2168;
        _2215 = _2170;
    }
    else
    {
        uint _2381 = _2082 + 7u;
        float _2397 = (dot(vec3(cbLight._m0[_2082 + 3u].xyz), vec3(_833, _834, _835)) * 0.5) + 0.5;
        float _2398 = _2397 * _2397;
        float _4431 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2399 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2400 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2211 = (((cbLight._m0[_2381].x * 0.3183098733425140380859375) * _2399) * _2400) + _2166;
        _2213 = (((cbLight._m0[_2381].y * 0.3183098733425140380859375) * _2399) * _2400) + _2168;
        _2215 = (((cbLight._m0[_2381].z * 0.3183098733425140380859375) * _2399) * _2400) + _2170;
    }
    uint _2218 = _2082 + 8u;
    float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _836) * 0.949999988079071044921875);
    float _2232 = _2231 * _2231;
    float _2233 = cbLight._m0[_2082].x + _913;
    float _2234 = cbLight._m0[_2082].y + _914;
    float _2235 = cbLight._m0[_2082].z + _915;
    float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
    float _2240 = _2239 * _2233;
    float _2241 = _2239 * _2234;
    float _2242 = _2239 * _2235;
    float _2243 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2082].xyz));
    float _4447 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _4458 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _2247 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2248 = dot(vec3(_833, _834, _835), vec3(_2240, _2241, _2242));
    float _4469 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2240, _2241, _2242));
    float _4480 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2232 * _2232;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2268 = exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0);
    float _2269 = 0.959999978542327880859375 - _992;
    float _2271 = 0.959999978542327880859375 - _993;
    float _2272 = 0.959999978542327880859375 - _994;
    float _2279 = 1.0 - _2232;
    float _2290 = (0.5 / (((_2247 * ((_2246 * _2279) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2279) + _2232) * _2246))) * _2246;
    float _4491 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    uint _2303 = _2082 + 9u;
    float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _836) * 0.949999988079071044921875);
    float _2315 = _2314 * _2314;
    float _2316 = cbLight._m0[_2119].x + _913;
    float _2317 = cbLight._m0[_2119].y + _914;
    float _2318 = cbLight._m0[_2119].z + _915;
    float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
    float _2323 = _2322 * _2316;
    float _2324 = _2322 * _2317;
    float _2325 = _2322 * _2318;
    float _2326 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2119].xyz));
    float _4502 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2330 = dot(vec3(_833, _834, _835), vec3(_2323, _2324, _2325));
    float _4513 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2323, _2324, _2325));
    float _4524 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2315 * _2315;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2349 = exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0);
    float _2356 = 1.0 - _2315;
    float _2366 = (0.5 / (((_2247 * ((_2329 * _2356) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2356) + _2315) * _2329))) * _2329;
    float _4535 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2368 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    float _2378 = (((((_2349 * _2269) + _995) * cbLight._m0[_2303].x) * _2368) * _2105) + (((((_2268 * _2269) + _995) * cbLight._m0[_2218].x) * _2292) * _2115);
    float _2379 = (((((_2349 * _2271) + _997) * cbLight._m0[_2303].y) * _2368) * _2105) + (((((_2268 * _2271) + _997) * cbLight._m0[_2218].y) * _2292) * _2115);
    float _2380 = (((((_2349 * _2272) + _998) * cbLight._m0[_2303].z) * _2368) * _2105) + (((((_2268 * _2272) + _998) * cbLight._m0[_2218].z) * _2292) * _2115);
    float _2442;
    float _2444;
    float _2446;
    if (_2155)
    {
        _2442 = _2378;
        _2444 = _2379;
        _2446 = _2380;
    }
    else
    {
        uint _2448 = _2082 + 2u;
        uint _2452 = _2082 + 10u;
        float _2466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2448].w)) * _836) * 0.949999988079071044921875);
        float _2467 = _2466 * _2466;
        float _2468 = cbLight._m0[_2448].x + _913;
        float _2469 = cbLight._m0[_2448].y + _914;
        float _2470 = cbLight._m0[_2448].z + _915;
        float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
        float _2475 = _2474 * _2468;
        float _2476 = _2474 * _2469;
        float _2477 = _2474 * _2470;
        float _2478 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2448].xyz));
        float _4546 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2482 = dot(vec3(_833, _834, _835), vec3(_2475, _2476, _2477));
        float _4557 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2486 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_2475, _2476, _2477));
        float _4568 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2490 = _2467 * _2467;
        float _2494 = ((_2485 * _2485) * (_2490 + (-1.0))) + 1.0;
        float _2501 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
        float _2508 = 1.0 - _2467;
        float _2518 = (0.5 / (((_2247 * ((_2481 * _2508) + _2467)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2508) + _2467) * _2481))) * _2481;
        float _4579 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2520 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2490 / ((_2494 * _2494) * 3.141590118408203125));
        float _2521 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2442 = (((((_2501 * _2269) + _995) * cbLight._m0[_2452].x) * _2520) * _2521) + _2378;
        _2444 = (((((_2501 * _2271) + _997) * cbLight._m0[_2452].y) * _2520) * _2521) + _2379;
        _2446 = (((((_2501 * _2272) + _998) * cbLight._m0[_2452].z) * _2520) * _2521) + _2380;
    }
    float _2556;
    float _2558;
    float _2560;
    if (_2173)
    {
        _2556 = _2442;
        _2558 = _2444;
        _2560 = _2446;
    }
    else
    {
        uint _2567 = _2082 + 3u;
        uint _2571 = _2082 + 11u;
        float _2585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2567].w)) * _836) * 0.949999988079071044921875);
        float _2586 = _2585 * _2585;
        float _2587 = cbLight._m0[_2567].x + _913;
        float _2588 = cbLight._m0[_2567].y + _914;
        float _2589 = cbLight._m0[_2567].z + _915;
        float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
        float _2594 = _2593 * _2587;
        float _2595 = _2593 * _2588;
        float _2596 = _2593 * _2589;
        float _2597 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2567].xyz));
        float _4595 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2600 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2601 = dot(vec3(_833, _834, _835), vec3(_2594, _2595, _2596));
        float _4606 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2605 = dot(vec3(cbLight._m0[_2567].xyz), vec3(_2594, _2595, _2596));
        float _4617 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2609 = _2586 * _2586;
        float _2613 = ((_2604 * _2604) * (_2609 + (-1.0))) + 1.0;
        float _2620 = exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0);
        float _2627 = 1.0 - _2586;
        float _2637 = (0.5 / (((_2247 * ((_2600 * _2627) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2627) + _2586) * _2600))) * _2600;
        float _4628 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2639 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2609 / ((_2613 * _2613) * 3.141590118408203125));
        float _2640 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2556 = (((((_2620 * _2269) + _995) * cbLight._m0[_2571].x) * _2639) * _2640) + _2442;
        _2558 = (((((_2620 * _2271) + _997) * cbLight._m0[_2571].y) * _2639) * _2640) + _2444;
        _2560 = (((((_2620 * _2272) + _998) * cbLight._m0[_2571].z) * _2639) * _2640) + _2446;
    }
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    if (_2080.y == 0u)
    {
        float _2715 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2716 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2715;
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2715;
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2715;
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.x;
        uint _2742 = uint((float(_2730.y) * floor(float(uint(cbSceneParam._m0[85u].y * _934) / _2731))) + floor(float(uint(cbSceneParam._m0[85u].x * _933) / _2731)));
        float _2752 = (log2(_2718 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2753 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        uint _2756 = uint(isnan(14.0) ? _2753 : (isnan(_2753) ? 14.0 : min(_2753, 14.0)));
        uvec4 _2761 = texelFetch(g_lightClusterGridBuffer, int(((_2756 << 2u) + (_2742 << 6u)) >> 2u));
        uint _2762 = _2761.x;
        uint _2763 = _2730.z;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        if (((((1u << ((_2763 >> 4u) & 15u)) + 4294967295u) & _2762) == 0u) || ((_2763 & 240u) == 0u))
        {
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
        }
        else
        {
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _2872;
            float _2874;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            uint _3022 = 0u;
            uint _3031;
            bool _3032;
            for (;;)
            {
                _3031 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3022 << 2u)) >> 2u)).x;
                _3032 = _3031 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3032)
                {
                    frontier_phi_66_pred = _3016;
                    frontier_phi_66_pred_1 = _3021;
                    frontier_phi_66_pred_2 = _3020;
                    frontier_phi_66_pred_3 = _3019;
                    frontier_phi_66_pred_4 = _3018;
                    frontier_phi_66_pred_5 = _3017;
                }
                else
                {
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    uint _3167;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3031;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    for (;;)
                    {
                        uint _3171 = uint(findLSB(_3167)) + (_3022 << 5u);
                        uint _3168 = (_3167 + 4294967295u) & _3167;
                        uint _3173 = _3171 * 48u;
                        vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 3u)).x));
                        uint _3193 = (_3171 * 48u) + 4u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 3u)).x));
                        uint _3212 = (_3171 * 48u) + 8u;
                        vec3 _3223 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x));
                        float _3227 = _3187.x - _2716;
                        float _3228 = _3187.y - _2717;
                        float _3229 = _3187.z - _2718;
                        float _3230 = dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229));
                        float _3233 = inversesqrt(_3230);
                        float _3234 = _3233 * _3227;
                        float _3235 = _3233 * _3228;
                        float _3236 = _3233 * _3229;
                        float _3237 = dot(vec3(_952, _955, _958), vec3(_3234, _3235, _3236));
                        float _3242 = 1.0 - (_3230 * _3187.w);
                        float _4654 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3243 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3244 = sqrt(_3230) * _3206.w;
                        float _3247 = 1.39999997615814208984375 / (_3244 + 1.39999997615814208984375);
                        float _3248 = _3247 * _3247;
                        float _3251 = ((1.0 - _3248) * _3237) + _3248;
                        float _3254 = _3244 * _3244;
                        float _3258 = ((isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))) * _3243) / ((_3254 * 0.699999988079071044921875) + 1.0);
                        float _3262 = (-0.0) - _2716;
                        float _3263 = (-0.0) - _2717;
                        float _3264 = (-0.0) - _2718;
                        float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                        float _3269 = _3268 * _3262;
                        float _3270 = _3268 * _3263;
                        float _3271 = _3268 * _3264;
                        float _3279 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                        float _3280 = 1.0 - _1027;
                        float _3287 = sqrt(1.0 - ((1.0 - (_3280 * _3280)) * (1.0 - (_3279 * _3279))));
                        float _3288 = _3287 * _3287;
                        float _3289 = _3288 * _3288;
                        float _3290 = _3269 + _3234;
                        float _3291 = _3270 + _3235;
                        float _3292 = _3271 + _3236;
                        float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                        float _3300 = dot(vec3(_952, _955, _958), vec3(_3269, _3270, _3271));
                        float _4670 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3303 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3304 = dot(vec3(_952, _955, _958), vec3(_3296 * _3290, _3296 * _3291, _3296 * _3292));
                        float _4681 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3307 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3311 = ((_3307 * _3307) * (_3289 + (-1.0))) + 1.0;
                        float _3312 = _3247 * _3288;
                        float _3313 = _3312 * _3312;
                        float _3316 = ((1.0 - _3313) * _3237) + _3313;
                        float _4692 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3317 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                        float _3318 = 1.0 - _3288;
                        float _3328 = (0.5 / (((_3317 * ((_3303 * _3318) + _3288)) + 9.9999999392252902907785028219223e-09) + (((_3317 * _3318) + _3288) * _3303))) * _3317;
                        float _4703 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3339 = (((_3289 * 3.1415927410125732421875) * (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) / ((_3311 * _3311) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125))) * _3243;
                        _3091 = (_3258 * _3206.x) + _3164;
                        _3092 = (_3258 * _3206.y) + _3165;
                        _3093 = (_3258 * _3206.z) + _3166;
                        _3088 = (_3339 * _3223.x) + _3161;
                        _3089 = (_3339 * _3223.y) + _3162;
                        _3090 = (_3339 * _3223.z) + _3163;
                        if (_3168 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3168;
                        }
                    }
                    frontier_phi_66_pred = _3088;
                    frontier_phi_66_pred_1 = _3093;
                    frontier_phi_66_pred_2 = _3092;
                    frontier_phi_66_pred_3 = _3091;
                    frontier_phi_66_pred_4 = _3090;
                    frontier_phi_66_pred_5 = _3089;
                }
                _2864 = frontier_phi_66_pred;
                _2874 = frontier_phi_66_pred_1;
                _2872 = frontier_phi_66_pred_2;
                _2870 = frontier_phi_66_pred_3;
                _2868 = frontier_phi_66_pred_4;
                _2866 = frontier_phi_66_pred_5;
                uint _3023 = _3022 + 1u;
                if (_3023 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3016 = _2864;
                    _3017 = _2866;
                    _3018 = _2868;
                    _3019 = _2870;
                    _3020 = _2872;
                    _3021 = _2874;
                    _3022 = _3023;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
        }
        uvec4 _2877 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2878 = _2877.z;
        uint _2880 = (_2878 >> 8u) & 15u;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        if (((4294967295u << _2880) & _2762) == 0u)
        {
            _2984 = _2863;
            _2986 = _2865;
            _2988 = _2867;
            _2990 = _2869;
            _2992 = _2871;
            _2994 = _2873;
        }
        else
        {
            float _3009 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
            float _3010 = _3009 * _2716;
            float _3011 = _3009 * _2717;
            float _3012 = _3009 * _2718;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2880 < ((_2878 >> 12u) & 15u))
            {
                float _2985;
                float _2987;
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _3144 = _2863;
                float _3145 = _2865;
                float _3146 = _2867;
                float _3147 = _2869;
                float _3148 = _2871;
                float _3149 = _2873;
                uint _3150 = _2880;
                uint _3159;
                bool _3160;
                for (;;)
                {
                    _3159 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3150 << 2u)) >> 2u)).x;
                    _3160 = _3159 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3160)
                    {
                        frontier_phi_77_pred = _3149;
                        frontier_phi_77_pred_1 = _3148;
                        frontier_phi_77_pred_2 = _3147;
                        frontier_phi_77_pred_3 = _3146;
                        frontier_phi_77_pred_4 = _3145;
                        frontier_phi_77_pred_5 = _3144;
                    }
                    else
                    {
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3366 = _3144;
                        float _3367 = _3145;
                        float _3368 = _3146;
                        float _3369 = _3147;
                        float _3370 = _3148;
                        float _3371 = _3149;
                        uint _3372 = _3159;
                        uint _3373;
                        vec4 _3398;
                        float _3399;
                        vec4 _3414;
                        vec3 _3426;
                        vec4 _3441;
                        vec4 _3456;
                        float _3502;
                        bool _3503;
                        for (;;)
                        {
                            uint _3383 = ((_3150 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3372));
                            _3373 = (_3372 + 4294967295u) & _3372;
                            uint _3385 = _3383 * 40u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            _3399 = _3398.w;
                            uint _3401 = (_3383 * 40u) + 4u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3416 = (_3383 * 40u) + 8u;
                            _3426 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x));
                            uint _3428 = (_3383 * 40u) + 16u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3383 * 40u) + 20u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3383 * 40u) + 24u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3477 = (_3383 * 40u) + 28u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3502 = fma(_2718, _3490.z, fma(_2717, _3490.y, _3490.x * _2716)) + _3490.w;
                            _3503 = !((fma(_2718, _3471.z, fma(_2717, _3471.y, _3471.x * _2716)) + _3471.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3503)
                            {
                                float _3530 = _3398.x - _2716;
                                float _3531 = _3398.y - _2717;
                                float _3532 = _3398.z - _2718;
                                float _3533 = dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532));
                                float _3536 = inversesqrt(_3533);
                                float _3537 = _3536 * _3530;
                                float _3538 = _3536 * _3531;
                                float _3539 = _3536 * _3532;
                                float _3543 = 1.0 - (_3533 / (_3399 * _3399));
                                float _4714 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3548 = sqrt(_3533) * _3414.w;
                                float _3550 = 1.39999997615814208984375 / (_3548 + 1.39999997615814208984375);
                                float _3551 = _3550 * _3550;
                                float _3554 = ((1.0 - _3551) * dot(vec3(_3537, _3538, _3539), vec3(_952, _955, _958))) + _3551;
                                float _3557 = _3548 * _3548;
                                float _3561 = (fma(_2718, _3441.z, fma(_2717, _3441.y, _3441.x * _2716)) + _3441.w) / _3502;
                                float _3562 = (fma(_2718, _3456.z, fma(_2717, _3456.y, _3456.x * _2716)) + _3456.w) / _3502;
                                float _3566 = 1.0 - dot(vec2(_3561, _3562), vec2(_3561, _3562));
                                float _4730 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3568 = _3567 * (((isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0))) * _3544) / ((_3557 * 0.699999988079071044921875) + 1.0));
                                float _3580 = exp2(log2(1.0 / ((_3557 * 3.5) + 5.0)) * 0.25);
                                float _3581 = 1.0 - _1027;
                                float _3588 = sqrt(1.0 - ((1.0 - (_3581 * _3581)) * (1.0 - (_3580 * _3580))));
                                float _3589 = _3588 * _3588;
                                float _3590 = _3589 * _3589;
                                float _3591 = _3537 - _3010;
                                float _3592 = _3538 - _3011;
                                float _3593 = _3539 - _3012;
                                float _3597 = inversesqrt(dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593)));
                                float _3601 = dot(vec3(_952, _955, _958), vec3((-0.0) - _3010, (-0.0) - _3011, (-0.0) - _3012));
                                float _4741 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3605 = dot(vec3(_952, _955, _958), vec3(_3597 * _3591, _3597 * _3592, _3597 * _3593));
                                float _4752 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3608 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3612 = ((_3608 * _3608) * (_3590 + (-1.0))) + 1.0;
                                float _3613 = _3550 * _3589;
                                float _3614 = _3613 * _3613;
                                float _3620 = ((1.0 - _3614) * dot(vec3(_952, _955, _958), vec3(_3537, _3538, _3539))) + _3614;
                                float _4763 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                                float _3622 = 1.0 - _3589;
                                float _3632 = (0.5 / (((_3621 * ((_3604 * _3622) + _3589)) + 9.9999999392252902907785028219223e-09) + (((_3621 * _3622) + _3589) * _3604))) * _3621;
                                float _4774 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3642 = (_3567 * _3544) * (((_3590 * 3.1415927410125732421875) * (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) / ((_3612 * _3612) * ((_3557 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3568 * _3414.y;
                                frontier_phi_83_pred_1 = _3568 * _3414.x;
                                frontier_phi_83_pred_2 = _3642 * _3426.z;
                                frontier_phi_83_pred_3 = _3642 * _3426.y;
                                frontier_phi_83_pred_4 = _3642 * _3426.x;
                                frontier_phi_83_pred_5 = _3568 * _3414.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3650 = frontier_phi_83_pred;
                            _3649 = frontier_phi_83_pred_1;
                            _3648 = frontier_phi_83_pred_2;
                            _3647 = frontier_phi_83_pred_3;
                            _3646 = frontier_phi_83_pred_4;
                            _3651 = frontier_phi_83_pred_5;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            _3358 = _3651 + _3371;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            _3355 = _3648 + _3368;
                            if (_3373 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3373;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3358;
                        frontier_phi_77_pred_1 = _3357;
                        frontier_phi_77_pred_2 = _3356;
                        frontier_phi_77_pred_3 = _3355;
                        frontier_phi_77_pred_4 = _3354;
                        frontier_phi_77_pred_5 = _3353;
                    }
                    _2995 = frontier_phi_77_pred;
                    _2993 = frontier_phi_77_pred_1;
                    _2991 = frontier_phi_77_pred_2;
                    _2989 = frontier_phi_77_pred_3;
                    _2987 = frontier_phi_77_pred_4;
                    _2985 = frontier_phi_77_pred_5;
                    uint _3151 = _3150 + 1u;
                    if (_3151 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3144 = _2985;
                        _3145 = _2987;
                        _3146 = _2989;
                        _3147 = _2991;
                        _3148 = _2993;
                        _3149 = _2995;
                        _3150 = _3151;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2989;
                frontier_phi_58_59_ladder_1 = _2995;
                frontier_phi_58_59_ladder_2 = _2993;
                frontier_phi_58_59_ladder_3 = _2991;
                frontier_phi_58_59_ladder_4 = _2987;
                frontier_phi_58_59_ladder_5 = _2985;
            }
            else
            {
                frontier_phi_58_59_ladder = _2867;
                frontier_phi_58_59_ladder_1 = _2873;
                frontier_phi_58_59_ladder_2 = _2871;
                frontier_phi_58_59_ladder_3 = _2869;
                frontier_phi_58_59_ladder_4 = _2865;
                frontier_phi_58_59_ladder_5 = _2863;
            }
            _2984 = frontier_phi_58_59_ladder_5;
            _2986 = frontier_phi_58_59_ladder_4;
            _2988 = frontier_phi_58_59_ladder;
            _2990 = frontier_phi_58_59_ladder_3;
            _2992 = frontier_phi_58_59_ladder_2;
            _2994 = frontier_phi_58_59_ladder_1;
        }
        float _2999 = isnan(1.0) ? _1011 : (isnan(_1011) ? 1.0 : min(_1011, 1.0));
        _2775 = (_2999 * _2990) + _2211;
        _2777 = (_2999 * _2992) + _2213;
        _2779 = (_2999 * _2994) + _2215;
        _2781 = ((_2984 * _995) * _2999) + _2556;
        _2783 = ((_2986 * _997) * _2999) + _2558;
        _2785 = ((_2988 * _998) * _2999) + _2560;
    }
    else
    {
        _2775 = _2211;
        _2777 = _2213;
        _2779 = _2215;
        _2781 = _2556;
        _2783 = _2558;
        _2785 = _2560;
    }
    float _4790 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _4801 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _4812 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _2802 = ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2775 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1011))) + ((_2781 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1849)) * cbPerFrame._m0[3u].x);
    float _2803 = ((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2777 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1011))) + ((_2783 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1849)) * cbPerFrame._m0[3u].x);
    float _2804 = ((isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2779 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1011))) + ((_2785 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1849)) * cbPerFrame._m0[3u].x);
    uint _2805 = _278 + 6u;
    float _2813 = _933 / cbSceneParam._m0[86u].x;
    float _2814 = _934 / cbSceneParam._m0[86u].y;
    vec4 _2828 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2813, _2814, (log2((isnan(cbSceneParam._m0[77u].w) ? _855 : (isnan(_855) ? cbSceneParam._m0[77u].w : min(_855, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2830 = _2828.x;
    float _2831 = _2828.y;
    float _2832 = _2828.z;
    float _2833 = _2828.w;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    if (_855 > cbSceneParam._m0[78u].w)
    {
        float _2888 = isnan(_855) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _855 : min(cbSceneParam._m0[80u].w, _855));
        float _2889 = _2888 / _855;
        float _2900 = _2889 * _906;
        float _2901 = _907 * _2889;
        float _2902 = (-0.0) - _2901;
        float _2904 = _2889 * _908;
        float _2906 = (cbSceneParam._m0[77u].w * _2902) / _2888;
        float _2907 = _2906 + cbSceneParam._m0[79u].w;
        float _2908 = cbSceneParam._m0[79u].w - _2901;
        float _2914 = sqrt(((_2900 * _2900) + (_2901 * _2901)) + (_2904 * _2904));
        float _2917 = (1.0 - (cbSceneParam._m0[77u].w / _2888)) * _2914;
        float _2922 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2924 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3101;
        if (abs((_2902 - _2906) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3101 = ((((_2907 > 0.0) ? exp2(_2922 * _2907) : (2.0 - exp2(_2924 * _2907))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2917;
        }
        else
        {
            float _3045 = 1.0 / cbSceneParam._m0[80u].x;
            float _3046 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : max(_2907, _2908));
            float _3047 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : min(_2907, _2908));
            float _3056 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : min(_3046, 0.0));
            float _3057 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : min(_3047, 0.0));
            _3101 = ((abs(_2914 / _2902) * cbSceneParam._m0[80u].y) * ((((_3056 - _3057) * 2.0) - ((exp2(_2922 * (isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0)))) - exp2(_2922 * (isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))))) * _3045)) - ((exp2(_2924 * _3056) - exp2(_2924 * _3057)) * _3045))) + (_2917 * cbSceneParam._m0[80u].z);
        }
        vec4 _3103 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2813, _2814, 1.0), 0.0);
        float _3112 = exp2((_3101 * (-1.44269502162933349609375)) * (1.0 - _3103.w));
        float _3113 = log2(_3112);
        float _3129 = log2(_2833);
        _2926 = (exp2(_3129 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].x)) * _3103.x) / cbSceneParam._m0[78u].x)) + _2830;
        _2928 = (exp2(_3129 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].y)) * _3103.y) / cbSceneParam._m0[78u].y)) + _2831;
        _2930 = (exp2(_3129 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].z)) * _3103.z) / cbSceneParam._m0[78u].z)) + _2832;
        _2932 = _3112 * _2833;
    }
    else
    {
        _2926 = _2830;
        _2928 = _2831;
        _2930 = _2832;
        _2932 = _2833;
    }
    bool _3139;
    vec4 _2942;
    vec4 _2964;
    float _2966;
    float _2970;
    float _2971;
    float _2972;
    float _2973;
    bool _2983;
    for (;;)
    {
        _2942 = cbMatDynParam._m0[0u];
        float _2944 = roundEven(_2942.y);
        bool _2945 = _2944 == 3.0;
        float _2946 = log2(_2932);
        float _2953 = exp2(_2946 * cbSceneParam._m0[78u].x) * _2802;
        float _2954 = exp2(_2946 * cbSceneParam._m0[78u].y) * _2803;
        float _2955 = exp2(_2946 * cbSceneParam._m0[78u].z) * _2804;
        float _2962 = _922 + (-0.5);
        _2964 = cbMtdParam._m0[1u];
        _2966 = _2964.y * _2962;
        float _2969 = (_2944 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2970 = _2969 * (_2945 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2926)));
        _2971 = _2969 * (_2945 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2928)));
        _2972 = _2969 * (_2945 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2930)));
        _2973 = _2962 * 0.999000012874603271484375;
        _2983 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2983)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _2973) < 0.5)
            {
                _3139 = true;
                break;
            }
        }
        uint _3080 = _971 + uint(_2942.w);
        if ((cbInstanceData._m0[_3080].w < 1.0) && ((cbInstanceData._m0[_3080].w + _2973) < 0.5))
        {
            _3139 = true;
            break;
        }
        if ((_2966 + 1.0) < _2964.x)
        {
            _3139 = true;
            break;
        }
        _3139 = false;
        break;
    }
    float _3344;
    if (_3139)
    {
        discard_state = true;
        _3344 = 0.0;
    }
    else
    {
        _3344 = cbInstanceData._m0[_2805].w;
    }
    SV_Target.x = _2970;
    SV_Target.y = _2971;
    SV_Target.z = _2972;
    SV_Target.w = _3344;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2805].w;
    discard_exit();
}


