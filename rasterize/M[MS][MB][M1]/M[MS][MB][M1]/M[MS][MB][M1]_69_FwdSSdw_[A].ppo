#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1255;
float _3662;
float _3663;
float _3664;
float _3665;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3674 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _456 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _460 = _456.z;
    float _469 = ((_439.z - _460) * _392) + _460;
    float _472 = ((((_439.x - _458) * _392) + _458) * 2.0) + (-1.0);
    float _473 = ((((_439.y - _459) * _392) + _459) * 2.0) + (-1.0);
    float _474 = dot(vec2(_472, _473), vec2(_472, _473));
    float _3685 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _479 = sqrt(1.0 - (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))));
    float _484 = _472 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_414.x * 2.0) + (-1.0)));
    float _485 = _473 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_414.y * 2.0) + (-1.0)));
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _514 = _512.x;
    float _515 = 1.0 - _514;
    float _543 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_514 - _515) * cbMtdParam._m0[24u].w) + _515) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3696 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _552 = ((((cbMtdParam._m0[10u].x - _399) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _544) + _399;
    float _553 = ((((cbMtdParam._m0[10u].y - _400) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _544) + _400;
    float _554 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _401)) * _544) + _401;
    vec4 _566 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _582 = _580.x;
    float _600 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _582) * _392) + _582;
    float _604 = ((_566.x - _600) * cbMtdParam._m0[19u].z) + _600;
    float _606 = _604 - (_604 * _544);
    float _611 = (((_414.z - _469) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _469;
    float _615 = ((cbMtdParam._m0[23u].y - _611) * _544) + _611;
    vec4 _634 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _640 = (_634.x * 2.0) + (-1.0);
    float _641 = (_634.y * 2.0) + (-1.0);
    float _642 = dot(vec2(_640, _641), vec2(_640, _641));
    float _3707 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _658 = (_544 * (((cbMtdParam._m0[22u].z * _484) - _484) + _640)) + _484;
    float _659 = (_544 * (((cbMtdParam._m0[22u].z * _485) - _485) + _641)) + _485;
    float _660 = (_544 * (sqrt(1.0 - (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0)))) - _479)) + _479;
    float _662 = cbMtdParam._m0[22u].x + _498.w;
    float _665 = fma(_660, _242 * NORMAL.x, fma(_659, _249 * TANGENT.x, (_235 * _227) * _658));
    float _668 = fma(_660, _242 * NORMAL.y, fma(_659, _249 * TANGENT.y, (_235 * _228) * _658));
    float _671 = fma(_660, _242 * NORMAL.z, fma(_659, _249 * TANGENT.z, (_235 * _229) * _658));
    float _675 = inversesqrt(dot(vec3(_665, _668, _671), vec3(_665, _668, _671)));
    float _676 = _675 * _665;
    float _677 = _675 * _668;
    float _678 = _675 * _671;
    float _3718 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _679 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _3729 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _3740 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3751 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _3762 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3773 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _684 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _698 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _748 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _738);
    float _749 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _738);
    float _750 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _738);
    float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
    float _755 = _748 * _754;
    float _756 = _749 * _754;
    float _757 = _750 * _754;
    vec4 _762 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _764 = _762.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _936 = sqrt(((_748 * _748) + (_749 * _749)) + (_750 * _750));
        float _942 = (cbMatDynParam._m0[5u].x * _936) + cbMatDynParam._m0[5u].y;
        float _3784 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _947 = (cbMatDynParam._m0[5u].z * _936) + cbMatDynParam._m0[5u].w;
        float _3795 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) - _943)) + _943) < ((_764 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _775 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _776 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _794 = fma(_678, cbSceneParam._m0[5u].z, fma(_677, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _676));
    float _797 = fma(_678, cbSceneParam._m0[6u].z, fma(_677, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _676));
    float _800 = fma(_678, cbSceneParam._m0[7u].z, fma(_677, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _676));
    uint _813 = _255 + 9u;
    uint _814 = _813 + uint(cbMatDynParam._m0[0u].w);
    float _820 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * cbInstanceData._m0[_814].x;
    float _821 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * cbInstanceData._m0[_814].y;
    float _822 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_814].z;
    float _3806 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _826 = 1.0 - _684;
    float _827 = _823 * _826;
    float _828 = _824 * _826;
    float _829 = _825 * _826;
    float _834 = (_823 + (-0.039999999105930328369140625)) * _684;
    float _835 = (_824 + (-0.039999999105930328369140625)) * _684;
    float _836 = (_825 + (-0.039999999105930328369140625)) * _684;
    float _837 = _834 + 0.039999999105930328369140625;
    float _839 = _835 + 0.039999999105930328369140625;
    float _840 = _836 + 0.039999999105930328369140625;
    vec4 _849 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _775, cbSceneParam._m0[86u].y * _776));
    float _853 = ((isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * TEXCOORD_5.w) * _849.x;
    float _854 = dot(vec3(_676, _677, _678), vec3(_755, _756, _757));
    float _857 = _854 * 2.0;
    float _861 = (_857 * _676) - _755;
    float _862 = (_857 * _677) - _756;
    float _863 = (_857 * _678) - _757;
    float _867 = abs(dot(vec3(_755, _756, _757), vec3(_676, _677, _678)));
    float _3839 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _869 = sqrt(_679);
    float _882 = exp2((_869 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_869 * 3.0));
    float _888 = (1.0 - _882) * ((_869 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _889 = _882 * _869;
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1254;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _979 = fma(_925, cbModelParam._m0[26u].z, fma(_921, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _917));
        float _983 = fma(_925, cbModelParam._m0[27u].z, fma(_921, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _917));
        float _987 = fma(_925, cbModelParam._m0[28u].z, fma(_921, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _917));
        float _1012 = _917 + _676;
        float _1013 = _921 + _677;
        float _1014 = _925 + _678;
        float _1024 = fma(_1014, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1012)) - _979;
        float _1025 = fma(_1014, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1012)) - _983;
        float _1026 = fma(_1014, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1012)) - _987;
        float _1030 = inversesqrt(dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026)));
        float _1043 = ((_1030 * _1024) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_979 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1030 * _1025) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_983 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1030 * _1026) / cbModelParam._m0[34u].z) + ((((((_987 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        float _1082 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1048.x + (-0.5));
        float _1084 = _1082 * (_1048.y + (-0.5));
        float _1085 = _1082 * (_1048.z + (-0.5));
        float _1092 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1055.x + (-0.5));
        float _1094 = _1092 * (_1055.y + (-0.5));
        float _1095 = _1092 * (_1055.z + (-0.5));
        float _1102 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1062.x + (-0.5));
        float _1104 = _1102 * (_1062.y + (-0.5));
        float _1105 = _1102 * (_1062.z + (-0.5));
        float _1112 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1069.x + (-0.5));
        float _1114 = _1112 * (_1069.y + (-0.5));
        float _1115 = _1112 * (_1069.z + (-0.5));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = _1083 * 0.5;
        float _1120 = _1093 * 0.5;
        float _1121 = _1103 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1136 = (dot(vec3(_676, _677, _678), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1146 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3887 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1148 + 1.0))) + _1153) * _1116;
        float _1163 = _1084 * 0.5;
        float _1164 = _1094 * 0.5;
        float _1165 = _1104 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_676, _677, _678), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3920 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1190 + 1.0))) + _1195) * _1117;
        float _1205 = _1085 * 0.5;
        float _1206 = _1095 * 0.5;
        float _1207 = _1105 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_676, _677, _678), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3953 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1232 + 1.0))) + _1237) * _1118;
        _1254 = _1085;
        _1256 = _1084;
        _1257 = _1083;
        _1258 = _1095;
        _1259 = _1094;
        _1260 = _1093;
        _1261 = _1105;
        _1262 = _1104;
        _1263 = _1103;
        _1264 = _1118;
        _1265 = _1117;
        _1266 = _1116;
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
    }
    else
    {
        _1254 = _1255;
        _1256 = _1255;
        _1257 = _1255;
        _1258 = _1255;
        _1259 = _1255;
        _1260 = _1255;
        _1261 = _1255;
        _1262 = _1255;
        _1263 = _1255;
        _1264 = _1255;
        _1265 = _1255;
        _1266 = _1255;
        _1267 = 0.0;
        _1268 = 0.0;
        _1269 = 0.0;
    }
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1297 = fma(_925, cbModelParam._m0[30u].z, fma(_921, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _917));
        float _1301 = fma(_925, cbModelParam._m0[31u].z, fma(_921, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _917));
        float _1305 = fma(_925, cbModelParam._m0[32u].z, fma(_921, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _917));
        float _1328 = _917 + _676;
        float _1329 = _921 + _677;
        float _1330 = _925 + _678;
        float _1340 = fma(_1330, cbModelParam._m0[30u].z, fma(_1329, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1328)) - _1297;
        float _1341 = fma(_1330, cbModelParam._m0[31u].z, fma(_1329, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1328)) - _1301;
        float _1342 = fma(_1330, cbModelParam._m0[32u].z, fma(_1329, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1328)) - _1305;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1359 = ((_1346 * _1340) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1297 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1346 * _1341) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1301 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1346 * _1342) / cbModelParam._m0[35u].z) + ((((((_1305 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        float _1396 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1363.x + (-0.5));
        float _1398 = _1396 * (_1363.y + (-0.5));
        float _1399 = _1396 * (_1363.z + (-0.5));
        float _1406 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1370.x + (-0.5));
        float _1408 = _1406 * (_1370.y + (-0.5));
        float _1409 = _1406 * (_1370.z + (-0.5));
        float _1416 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1377.x + (-0.5));
        float _1418 = _1416 * (_1377.y + (-0.5));
        float _1419 = _1416 * (_1377.z + (-0.5));
        float _1426 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1384.x + (-0.5));
        float _1428 = _1426 * (_1384.y + (-0.5));
        float _1429 = _1426 * (_1384.z + (-0.5));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = _1397 * 0.5;
        float _1434 = _1407 * 0.5;
        float _1435 = _1417 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_676, _677, _678), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4016 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1460 + 1.0))) + _1465) * _1430;
        float _1475 = _1398 * 0.5;
        float _1476 = _1408 * 0.5;
        float _1477 = _1418 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_676, _677, _678), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4049 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1502 + 1.0))) + _1507) * _1431;
        float _1517 = _1399 * 0.5;
        float _1518 = _1409 * 0.5;
        float _1519 = _1419 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_676, _677, _678), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4082 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1544 + 1.0))) + _1549) * _1432;
        _1566 = _1399;
        _1567 = _1398;
        _1568 = _1397;
        _1569 = _1409;
        _1570 = _1408;
        _1571 = _1407;
        _1572 = _1419;
        _1573 = _1418;
        _1574 = _1417;
        _1575 = _1432;
        _1576 = _1431;
        _1577 = _1430;
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
    }
    else
    {
        _1566 = _1255;
        _1567 = _1255;
        _1568 = _1255;
        _1569 = _1255;
        _1570 = _1255;
        _1571 = _1255;
        _1572 = _1255;
        _1573 = _1255;
        _1574 = _1255;
        _1575 = _1255;
        _1576 = _1255;
        _1577 = _1255;
        _1578 = 0.0;
        _1579 = 0.0;
        _1580 = 0.0;
    }
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1267)) + _1267;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1268)) + _1268;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1269)) + _1269;
    float _1613 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1591, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1591, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1591, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1590));
    float _1634 = _861 * 0.5;
    float _1635 = _862 * 0.5;
    float _1636 = _863 * 0.5;
    float _1637 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1640 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1643 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1677;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1650 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1254, _1258, _1261, _1264));
        float _1654 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1256, _1259, _1262, _1265));
        float _1658 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1257, _1260, _1263, _1266));
        float _1665 = dot(vec4(cbModelParam._m0[39u]), vec4(_1634, _1635, _1636, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1688;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1679 = dot(vec4(cbModelParam._m0[40u]), vec4(_1634, _1635, _1636, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1692 = (_1688 * cbModelParam._m0[1u].x) + (_1677 * (1.0 - cbModelParam._m0[1u].x));
    float _1702 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _679);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1702 : min(cbModelParam._m0[25u].z, _1702));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1752 = fma(_925, cbModelParam._m0[13u].z, fma(_921, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _917)) + cbModelParam._m0[13u].w;
        float _1756 = fma(_925, cbModelParam._m0[14u].z, fma(_921, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _917)) + cbModelParam._m0[14u].w;
        float _1760 = fma(_925, cbModelParam._m0[15u].z, fma(_921, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _917)) + cbModelParam._m0[15u].w;
        float _1763 = fma(_863, cbModelParam._m0[13u].z, fma(_862, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861));
        float _1766 = fma(_863, cbModelParam._m0[14u].z, fma(_862, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861));
        float _1769 = fma(_863, cbModelParam._m0[15u].z, fma(_862, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861));
        float _1797;
        if (_1763 > 0.0)
        {
            _1797 = abs((1.0 - _1752) / _1763);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1752 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1797 = frontier_phi_17_15_ladder;
        }
        float _2022;
        if (_1766 > 0.0)
        {
            _2022 = abs((1.0 - _1756) / _1766);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1756 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2022 = frontier_phi_26_22_ladder;
        }
        float _2279;
        if (_1769 > 0.0)
        {
            _2279 = abs((1.0 - _1760) / _1769);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1760 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2279 = frontier_phi_38_33_ladder;
        }
        float _2281 = isnan(_2022) ? _1797 : (isnan(_1797) ? _2022 : min(_1797, _2022));
        float _2282 = isnan(_2279) ? _2281 : (isnan(_2281) ? _2279 : min(_2281, _2279));
        float _2286 = (_2282 * _1763) + _1752;
        float _2287 = (_2282 * _1766) + _1756;
        float _2288 = (_2282 * _1769) + _1760;
        float _2289 = _2282 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2289;
        float _2293 = _2289 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 > _2293) || ((_2287 < _2291) || ((_2286 < _2291) || (_2286 > _2293))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2416 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2288, cbModelParam._m0[9u].z, fma(_2287, cbModelParam._m0[9u].y, _2286 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2288, cbModelParam._m0[10u].z, fma(_2287, cbModelParam._m0[10u].y, _2286 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2288, cbModelParam._m0[11u].z, fma(_2287, cbModelParam._m0[11u].y, _2286 * cbModelParam._m0[11u].x))), _1703);
            frontier_phi_16_38_ladder = _2416.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2416.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2416.x * cbModelParam._m0[1u].y;
        }
        _1785 = frontier_phi_16_38_ladder_2;
        _1787 = frontier_phi_16_38_ladder_1;
        _1789 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_861, _862, _863), _1703);
        _1785 = _1773.x * cbModelParam._m0[1u].y;
        _1787 = _1773.y * cbModelParam._m0[1u].y;
        _1789 = _1773.z * cbModelParam._m0[1u].y;
    }
    float _1793 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _679);
    float _1794 = isnan(_1793) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1793 : min(cbModelParam._m0[25u].w, _1793));
    float _1885;
    float _1887;
    float _1889;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1849 = fma(_925, cbModelParam._m0[21u].z, fma(_921, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _917)) + cbModelParam._m0[21u].w;
        float _1853 = fma(_925, cbModelParam._m0[22u].z, fma(_921, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _917)) + cbModelParam._m0[22u].w;
        float _1857 = fma(_925, cbModelParam._m0[23u].z, fma(_921, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _917)) + cbModelParam._m0[23u].w;
        float _1860 = fma(_863, cbModelParam._m0[21u].z, fma(_862, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861));
        float _1863 = fma(_863, cbModelParam._m0[22u].z, fma(_862, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861));
        float _1866 = fma(_863, cbModelParam._m0[23u].z, fma(_862, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861));
        float _2027;
        if (_1860 > 0.0)
        {
            _2027 = abs((1.0 - _1849) / _1860);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1849 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2027 = frontier_phi_28_24_ladder;
        }
        float _2306;
        if (_1863 > 0.0)
        {
            _2306 = abs((1.0 - _1853) / _1863);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1853 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2306 = frontier_phi_40_35_ladder;
        }
        float _2519;
        if (_1866 > 0.0)
        {
            _2519 = abs((1.0 - _1857) / _1866);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1857 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2519 = frontier_phi_49_46_ladder;
        }
        float _2521 = isnan(_2306) ? _2027 : (isnan(_2027) ? _2306 : min(_2027, _2306));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _1860) + _1849;
        float _2527 = (_2522 * _1863) + _1853;
        float _2528 = (_2522 * _1866) + _1857;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2530 = (-1.0) - _2529;
        float _2532 = _2529 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2528 > _2532) || ((_2528 < _2530) || ((_2527 > _2532) || ((_2527 < _2530) || ((_2526 < _2530) || (_2526 > _2532))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2727 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2528, cbModelParam._m0[17u].z, fma(_2527, cbModelParam._m0[17u].y, _2526 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2528, cbModelParam._m0[18u].z, fma(_2527, cbModelParam._m0[18u].y, _2526 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2528, cbModelParam._m0[19u].z, fma(_2527, cbModelParam._m0[19u].y, _2526 * cbModelParam._m0[19u].x))), _1794);
            frontier_phi_25_49_ladder = _2727.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2727.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2727.x * cbModelParam._m0[1u].z;
        }
        _1885 = frontier_phi_25_49_ladder_2;
        _1887 = frontier_phi_25_49_ladder_1;
        _1889 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_861, _862, _863), _1794);
        _1885 = _1869.x * cbModelParam._m0[1u].z;
        _1887 = _1869.y * cbModelParam._m0[1u].z;
        _1889 = _1869.z * cbModelParam._m0[1u].z;
    }
    float _1902 = (((_888 * _837) + _889) * _853) * ((cbModelParam._m0[1u].w * (_1885 - _1785)) + _1785);
    float _1904 = (((_888 * _839) + _889) * _853) * ((cbModelParam._m0[1u].w * (_1887 - _1787)) + _1787);
    float _1906 = (((_888 * _840) + _889) * _853) * ((cbModelParam._m0[1u].w * (_1889 - _1789)) + _1789);
    float _1909 = fma(_1906, cbSceneParam._m0[89u].z, fma(_1904, cbSceneParam._m0[89u].y, _1902 * cbSceneParam._m0[89u].x));
    float _1912 = fma(_1906, cbSceneParam._m0[90u].z, fma(_1904, cbSceneParam._m0[90u].y, _1902 * cbSceneParam._m0[90u].x));
    float _1915 = fma(_1906, cbSceneParam._m0[91u].z, fma(_1904, cbSceneParam._m0[91u].y, _1902 * cbSceneParam._m0[91u].x));
    vec4 _1923 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_775, _776));
    float _1925 = _1923.w;
    float _1937 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1925);
    float _1938 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1925);
    float _1939 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1925);
    uvec4 _1943 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _1945 = _1943.x * 14u;
    uint _1946 = _1945 + 13u;
    float _1953 = _853 + (-1.0);
    float _1958 = (cbLight._m0[_1946].x * _1953) + 1.0;
    float _1959 = (cbLight._m0[_1946].y * _1953) + 1.0;
    float _1960 = (cbLight._m0[_1946].z * _1953) + 1.0;
    float _1961 = (cbLight._m0[_1946].w * _1953) + 1.0;
    uint _1962 = _1945 + 5u;
    float _1968 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
    uint _1972 = _1945 + 4u;
    float _1981 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
    uint _1985 = _1945 | 1u;
    float _1996 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_676, _677, _678));
    float _1999 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_676, _677, _678));
    float _4218 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _4229 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2004 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
    float _2006 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _2013 = ((cbLight._m0[_1962].x * _1968) * _2006) + (((cbLight._m0[_1972].x * _1937) * _1981) * _2004);
    float _2014 = ((_1968 * cbLight._m0[_1962].y) * _2006) + (((cbLight._m0[_1972].y * _1938) * _1981) * _2004);
    float _2015 = ((_1968 * cbLight._m0[_1962].z) * _2006) + (((cbLight._m0[_1972].z * _1939) * _1981) * _2004);
    uvec4 _2019 = floatBitsToUint(cbLight._m0[_1945 + 12u]);
    bool _2021 = _2019.x == 0u;
    float _2032;
    float _2034;
    float _2036;
    if (_2021)
    {
        _2032 = _2013;
        _2034 = _2014;
        _2036 = _2015;
    }
    else
    {
        uint _2040 = _1945 + 6u;
        float _2056 = (dot(vec3(cbLight._m0[_1945 + 2u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2057 = _2056 * _2056;
        float _4240 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2058 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2059 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2032 = (((cbLight._m0[_2040].x * 0.3183098733425140380859375) * _2058) * _2059) + _2013;
        _2034 = (((cbLight._m0[_2040].y * 0.3183098733425140380859375) * _2058) * _2059) + _2014;
        _2036 = (((cbLight._m0[_2040].z * 0.3183098733425140380859375) * _2058) * _2059) + _2015;
    }
    bool _2039 = _2019.y == 0u;
    float _2077;
    float _2079;
    float _2081;
    if (_2039)
    {
        _2077 = _2032;
        _2079 = _2034;
        _2081 = _2036;
    }
    else
    {
        uint _2250 = _1945 + 7u;
        float _2266 = (dot(vec3(cbLight._m0[_1945 + 3u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2267 = _2266 * _2266;
        float _4256 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2268 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2269 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2077 = (((cbLight._m0[_2250].x * 0.3183098733425140380859375) * _2268) * _2269) + _2032;
        _2079 = (((cbLight._m0[_2250].y * 0.3183098733425140380859375) * _2268) * _2269) + _2034;
        _2081 = (((cbLight._m0[_2250].z * 0.3183098733425140380859375) * _2268) * _2269) + _2036;
    }
    uint _2084 = _1945 + 8u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _679) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_1945].x + _755;
    float _2100 = cbLight._m0[_1945].y + _756;
    float _2101 = cbLight._m0[_1945].z + _757;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_1945].xyz));
    float _4272 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _2113 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2114 = dot(vec3(_676, _677, _678), vec3(_2106, _2107, _2108));
    float _4294 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_2106, _2107, _2108));
    float _4305 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2098 * _2098;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2134 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
    float _2135 = 0.959999978542327880859375 - _834;
    float _2137 = 0.959999978542327880859375 - _835;
    float _2138 = 0.959999978542327880859375 - _836;
    float _2145 = 1.0 - _2098;
    float _2156 = (0.5 / (((_2113 * ((_2112 * _2145) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2145) + _2098) * _2112))) * _2112;
    float _4316 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2158 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    uint _2172 = _1945 + 9u;
    float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _679) * 0.949999988079071044921875);
    float _2184 = _2183 * _2183;
    float _2185 = cbLight._m0[_1985].x + _755;
    float _2186 = cbLight._m0[_1985].y + _756;
    float _2187 = cbLight._m0[_1985].z + _757;
    float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
    float _2192 = _2191 * _2185;
    float _2193 = _2191 * _2186;
    float _2194 = _2191 * _2187;
    float _2195 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_1985].xyz));
    float _4327 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2199 = dot(vec3(_676, _677, _678), vec3(_2192, _2193, _2194));
    float _4338 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2203 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2192, _2193, _2194));
    float _4349 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2207 = _2184 * _2184;
    float _2211 = ((_2202 * _2202) * (_2207 + (-1.0))) + 1.0;
    float _2218 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
    float _2225 = 1.0 - _2184;
    float _2235 = (0.5 / (((_2113 * ((_2198 * _2225) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2225) + _2184) * _2198))) * _2198;
    float _4360 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2237 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2207 / ((_2211 * _2211) * 3.141590118408203125));
    float _2247 = (((((_2218 * _2135) + _837) * cbLight._m0[_2172].x) * _2237) * _1968) + ((((cbLight._m0[_2084].x * _1937) * ((_2134 * _2135) + _837)) * _2158) * _1981);
    float _2248 = (((((_2218 * _2137) + _839) * cbLight._m0[_2172].y) * _2237) * _1968) + ((((cbLight._m0[_2084].y * _1938) * ((_2134 * _2137) + _839)) * _2158) * _1981);
    float _2249 = (((((_2218 * _2138) + _840) * cbLight._m0[_2172].z) * _2237) * _1968) + ((((cbLight._m0[_2084].z * _1939) * ((_2134 * _2138) + _840)) * _2158) * _1981);
    float _2311;
    float _2313;
    float _2315;
    if (_2021)
    {
        _2311 = _2247;
        _2313 = _2248;
        _2315 = _2249;
    }
    else
    {
        uint _2317 = _1945 + 2u;
        uint _2321 = _1945 + 10u;
        float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2317].w)) * _679) * 0.949999988079071044921875);
        float _2336 = _2335 * _2335;
        float _2337 = cbLight._m0[_2317].x + _755;
        float _2338 = cbLight._m0[_2317].y + _756;
        float _2339 = cbLight._m0[_2317].z + _757;
        float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
        float _2344 = _2343 * _2337;
        float _2345 = _2343 * _2338;
        float _2346 = _2343 * _2339;
        float _2347 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2317].xyz));
        float _4371 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2351 = dot(vec3(_676, _677, _678), vec3(_2344, _2345, _2346));
        float _4382 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2355 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_2344, _2345, _2346));
        float _4393 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2359 = _2336 * _2336;
        float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
        float _2370 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
        float _2377 = 1.0 - _2336;
        float _2387 = (0.5 / (((_2113 * ((_2350 * _2377) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2377) + _2336) * _2350))) * _2350;
        float _4404 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2389 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
        float _2390 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2311 = (((((_2370 * _2135) + _837) * cbLight._m0[_2321].x) * _2389) * _2390) + _2247;
        _2313 = (((((_2370 * _2137) + _839) * cbLight._m0[_2321].y) * _2389) * _2390) + _2248;
        _2315 = (((((_2370 * _2138) + _840) * cbLight._m0[_2321].z) * _2389) * _2390) + _2249;
    }
    float _2425;
    float _2427;
    float _2429;
    if (_2039)
    {
        _2425 = _2311;
        _2427 = _2313;
        _2429 = _2315;
    }
    else
    {
        uint _2436 = _1945 + 3u;
        uint _2440 = _1945 + 11u;
        float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _679) * 0.949999988079071044921875);
        float _2455 = _2454 * _2454;
        float _2456 = cbLight._m0[_2436].x + _755;
        float _2457 = cbLight._m0[_2436].y + _756;
        float _2458 = cbLight._m0[_2436].z + _757;
        float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
        float _2463 = _2462 * _2456;
        float _2464 = _2462 * _2457;
        float _2465 = _2462 * _2458;
        float _2466 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2436].xyz));
        float _4420 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2470 = dot(vec3(_676, _677, _678), vec3(_2463, _2464, _2465));
        float _4431 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2474 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2463, _2464, _2465));
        float _4442 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2478 = _2455 * _2455;
        float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
        float _2489 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
        float _2496 = 1.0 - _2455;
        float _2506 = (0.5 / (((_2113 * ((_2469 * _2496) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2496) + _2455) * _2469))) * _2469;
        float _4453 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2508 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
        float _2509 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2425 = (((((_2489 * _2135) + _837) * cbLight._m0[_2440].x) * _2508) * _2509) + _2311;
        _2427 = (((((_2489 * _2137) + _839) * cbLight._m0[_2440].y) * _2508) * _2509) + _2313;
        _2429 = (((((_2489 * _2138) + _840) * cbLight._m0[_2440].z) * _2508) * _2509) + _2315;
    }
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    if (_1943.y == 0u)
    {
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2585 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2584;
        float _2586 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2584;
        float _2587 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2584;
        uvec4 _2599 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2600 = _2599.x;
        uint _2611 = uint((float(_2599.y) * floor(float(uint(cbSceneParam._m0[85u].y * _776) / _2600))) + floor(float(uint(cbSceneParam._m0[85u].x * _775) / _2600)));
        float _2621 = (log2(_2587 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2622 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        uint _2625 = uint(isnan(14.0) ? _2622 : (isnan(_2622) ? 14.0 : min(_2622, 14.0)));
        uvec4 _2630 = texelFetch(g_lightClusterGridBuffer, int(((_2625 << 2u) + (_2611 << 6u)) >> 2u));
        uint _2631 = _2630.x;
        uint _2632 = _2599.z;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        if (((((1u << ((_2632 >> 4u) & 15u)) + 4294967295u) & _2631) == 0u) || ((_2632 & 240u) == 0u))
        {
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
        }
        else
        {
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2743;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            uint _2891 = 0u;
            uint _2900;
            bool _2901;
            for (;;)
            {
                _2900 = texelFetch(g_lightClassification, int((((_2625 << 5u) + (_2611 << 9u)) + (_2891 << 2u)) >> 2u)).x;
                _2901 = _2900 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2901)
                {
                    frontier_phi_66_pred = _2885;
                    frontier_phi_66_pred_1 = _2890;
                    frontier_phi_66_pred_2 = _2889;
                    frontier_phi_66_pred_3 = _2888;
                    frontier_phi_66_pred_4 = _2887;
                    frontier_phi_66_pred_5 = _2886;
                }
                else
                {
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    uint _3036;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2900;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    for (;;)
                    {
                        uint _3040 = uint(findLSB(_3036)) + (_2891 << 5u);
                        uint _3037 = (_3036 + 4294967295u) & _3036;
                        uint _3042 = _3040 * 48u;
                        vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3042)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 3u)).x));
                        uint _3062 = (_3040 * 48u) + 4u;
                        vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3062)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 3u)).x));
                        uint _3081 = (_3040 * 48u) + 8u;
                        vec3 _3092 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x));
                        float _3096 = _3056.x - _2585;
                        float _3097 = _3056.y - _2586;
                        float _3098 = _3056.z - _2587;
                        float _3099 = dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098));
                        float _3102 = inversesqrt(_3099);
                        float _3103 = _3102 * _3096;
                        float _3104 = _3102 * _3097;
                        float _3105 = _3102 * _3098;
                        float _3106 = dot(vec3(_794, _797, _800), vec3(_3103, _3104, _3105));
                        float _3111 = 1.0 - (_3099 * _3056.w);
                        float _4479 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3112 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3113 = sqrt(_3099) * _3075.w;
                        float _3116 = 1.39999997615814208984375 / (_3113 + 1.39999997615814208984375);
                        float _3117 = _3116 * _3116;
                        float _3120 = ((1.0 - _3117) * _3106) + _3117;
                        float _3123 = _3113 * _3113;
                        float _3127 = ((isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0))) * _3112) / ((_3123 * 0.699999988079071044921875) + 1.0);
                        float _3131 = (-0.0) - _2585;
                        float _3132 = (-0.0) - _2586;
                        float _3133 = (-0.0) - _2587;
                        float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                        float _3138 = _3137 * _3131;
                        float _3139 = _3137 * _3132;
                        float _3140 = _3137 * _3133;
                        float _3148 = exp2(log2(1.0 / ((_3123 * 3.5) + 5.0)) * 0.25);
                        float _3149 = 1.0 - _869;
                        float _3156 = sqrt(1.0 - ((1.0 - (_3149 * _3149)) * (1.0 - (_3148 * _3148))));
                        float _3157 = _3156 * _3156;
                        float _3158 = _3157 * _3157;
                        float _3159 = _3138 + _3103;
                        float _3160 = _3139 + _3104;
                        float _3161 = _3140 + _3105;
                        float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                        float _3169 = dot(vec3(_794, _797, _800), vec3(_3138, _3139, _3140));
                        float _4495 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3172 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3173 = dot(vec3(_794, _797, _800), vec3(_3165 * _3159, _3165 * _3160, _3165 * _3161));
                        float _4506 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3176 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3180 = ((_3176 * _3176) * (_3158 + (-1.0))) + 1.0;
                        float _3181 = _3116 * _3157;
                        float _3182 = _3181 * _3181;
                        float _3185 = ((1.0 - _3182) * _3106) + _3182;
                        float _4517 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3186 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3187 = 1.0 - _3157;
                        float _3197 = (0.5 / (((_3186 * ((_3172 * _3187) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_3186 * _3187) + _3157) * _3172))) * _3186;
                        float _4528 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3208 = (((_3158 * 3.1415927410125732421875) * (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) / ((_3180 * _3180) * ((_3123 * 2.1991131305694580078125) + 3.141590118408203125))) * _3112;
                        _2960 = (_3127 * _3075.x) + _3033;
                        _2961 = (_3127 * _3075.y) + _3034;
                        _2962 = (_3127 * _3075.z) + _3035;
                        _2957 = (_3208 * _3092.x) + _3030;
                        _2958 = (_3208 * _3092.y) + _3031;
                        _2959 = (_3208 * _3092.z) + _3032;
                        if (_3037 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3030 = _2957;
                            _3031 = _2958;
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _3037;
                        }
                    }
                    frontier_phi_66_pred = _2957;
                    frontier_phi_66_pred_1 = _2962;
                    frontier_phi_66_pred_2 = _2961;
                    frontier_phi_66_pred_3 = _2960;
                    frontier_phi_66_pred_4 = _2959;
                    frontier_phi_66_pred_5 = _2958;
                }
                _2733 = frontier_phi_66_pred;
                _2743 = frontier_phi_66_pred_1;
                _2741 = frontier_phi_66_pred_2;
                _2739 = frontier_phi_66_pred_3;
                _2737 = frontier_phi_66_pred_4;
                _2735 = frontier_phi_66_pred_5;
                uint _2892 = _2891 + 1u;
                if (_2892 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2885 = _2733;
                    _2886 = _2735;
                    _2887 = _2737;
                    _2888 = _2739;
                    _2889 = _2741;
                    _2890 = _2743;
                    _2891 = _2892;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
        }
        uvec4 _2746 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2747 = _2746.z;
        uint _2749 = (_2747 >> 8u) & 15u;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        if (((4294967295u << _2749) & _2631) == 0u)
        {
            _2853 = _2732;
            _2855 = _2734;
            _2857 = _2736;
            _2859 = _2738;
            _2861 = _2740;
            _2863 = _2742;
        }
        else
        {
            float _2878 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
            float _2879 = _2878 * _2585;
            float _2880 = _2878 * _2586;
            float _2881 = _2878 * _2587;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2749 < ((_2747 >> 12u) & 15u))
            {
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _3013 = _2732;
                float _3014 = _2734;
                float _3015 = _2736;
                float _3016 = _2738;
                float _3017 = _2740;
                float _3018 = _2742;
                uint _3019 = _2749;
                uint _3028;
                bool _3029;
                for (;;)
                {
                    _3028 = texelFetch(g_lightClassification, int((((_2625 << 5u) + (_2611 << 9u)) + (_3019 << 2u)) >> 2u)).x;
                    _3029 = _3028 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3029)
                    {
                        frontier_phi_77_pred = _3018;
                        frontier_phi_77_pred_1 = _3017;
                        frontier_phi_77_pred_2 = _3016;
                        frontier_phi_77_pred_3 = _3015;
                        frontier_phi_77_pred_4 = _3014;
                        frontier_phi_77_pred_5 = _3013;
                    }
                    else
                    {
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3235 = _3013;
                        float _3236 = _3014;
                        float _3237 = _3015;
                        float _3238 = _3016;
                        float _3239 = _3017;
                        float _3240 = _3018;
                        uint _3241 = _3028;
                        uint _3242;
                        vec4 _3267;
                        float _3268;
                        vec4 _3283;
                        vec3 _3295;
                        vec4 _3310;
                        vec4 _3325;
                        float _3371;
                        bool _3372;
                        for (;;)
                        {
                            uint _3252 = ((_3019 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3241));
                            _3242 = (_3241 + 4294967295u) & _3241;
                            uint _3254 = _3252 * 40u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            _3268 = _3267.w;
                            uint _3270 = (_3252 * 40u) + 4u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3285 = (_3252 * 40u) + 8u;
                            _3295 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x));
                            uint _3297 = (_3252 * 40u) + 16u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3312 = (_3252 * 40u) + 20u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3327 = (_3252 * 40u) + 24u;
                            vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3346 = (_3252 * 40u) + 28u;
                            vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            _3371 = fma(_2587, _3359.z, fma(_2586, _3359.y, _3359.x * _2585)) + _3359.w;
                            _3372 = !((fma(_2587, _3340.z, fma(_2586, _3340.y, _3340.x * _2585)) + _3340.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3372)
                            {
                                float _3399 = _3267.x - _2585;
                                float _3400 = _3267.y - _2586;
                                float _3401 = _3267.z - _2587;
                                float _3402 = dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401));
                                float _3405 = inversesqrt(_3402);
                                float _3406 = _3405 * _3399;
                                float _3407 = _3405 * _3400;
                                float _3408 = _3405 * _3401;
                                float _3412 = 1.0 - (_3402 / (_3268 * _3268));
                                float _4539 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3417 = sqrt(_3402) * _3283.w;
                                float _3419 = 1.39999997615814208984375 / (_3417 + 1.39999997615814208984375);
                                float _3420 = _3419 * _3419;
                                float _3423 = ((1.0 - _3420) * dot(vec3(_3406, _3407, _3408), vec3(_794, _797, _800))) + _3420;
                                float _3426 = _3417 * _3417;
                                float _3430 = (fma(_2587, _3310.z, fma(_2586, _3310.y, _3310.x * _2585)) + _3310.w) / _3371;
                                float _3431 = (fma(_2587, _3325.z, fma(_2586, _3325.y, _3325.x * _2585)) + _3325.w) / _3371;
                                float _3435 = 1.0 - dot(vec2(_3430, _3431), vec2(_3430, _3431));
                                float _4555 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3437 = _3436 * (((isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0))) * _3413) / ((_3426 * 0.699999988079071044921875) + 1.0));
                                float _3449 = exp2(log2(1.0 / ((_3426 * 3.5) + 5.0)) * 0.25);
                                float _3450 = 1.0 - _869;
                                float _3457 = sqrt(1.0 - ((1.0 - (_3450 * _3450)) * (1.0 - (_3449 * _3449))));
                                float _3458 = _3457 * _3457;
                                float _3459 = _3458 * _3458;
                                float _3460 = _3406 - _2879;
                                float _3461 = _3407 - _2880;
                                float _3462 = _3408 - _2881;
                                float _3466 = inversesqrt(dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462)));
                                float _3470 = dot(vec3(_794, _797, _800), vec3((-0.0) - _2879, (-0.0) - _2880, (-0.0) - _2881));
                                float _4566 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3473 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3474 = dot(vec3(_794, _797, _800), vec3(_3466 * _3460, _3466 * _3461, _3466 * _3462));
                                float _4577 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3477 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3481 = ((_3477 * _3477) * (_3459 + (-1.0))) + 1.0;
                                float _3482 = _3419 * _3458;
                                float _3483 = _3482 * _3482;
                                float _3489 = ((1.0 - _3483) * dot(vec3(_794, _797, _800), vec3(_3406, _3407, _3408))) + _3483;
                                float _4588 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3490 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3491 = 1.0 - _3458;
                                float _3501 = (0.5 / (((_3490 * ((_3473 * _3491) + _3458)) + 9.9999999392252902907785028219223e-09) + (((_3490 * _3491) + _3458) * _3473))) * _3490;
                                float _4599 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3511 = (_3436 * _3413) * (((_3459 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3481 * _3481) * ((_3426 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3437 * _3283.y;
                                frontier_phi_83_pred_1 = _3437 * _3283.x;
                                frontier_phi_83_pred_2 = _3511 * _3295.z;
                                frontier_phi_83_pred_3 = _3511 * _3295.y;
                                frontier_phi_83_pred_4 = _3511 * _3295.x;
                                frontier_phi_83_pred_5 = _3437 * _3283.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3519 = frontier_phi_83_pred;
                            _3518 = frontier_phi_83_pred_1;
                            _3517 = frontier_phi_83_pred_2;
                            _3516 = frontier_phi_83_pred_3;
                            _3515 = frontier_phi_83_pred_4;
                            _3520 = frontier_phi_83_pred_5;
                            _3225 = _3518 + _3238;
                            _3226 = _3519 + _3239;
                            _3227 = _3520 + _3240;
                            _3222 = _3515 + _3235;
                            _3223 = _3516 + _3236;
                            _3224 = _3517 + _3237;
                            if (_3242 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3242;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3227;
                        frontier_phi_77_pred_1 = _3226;
                        frontier_phi_77_pred_2 = _3225;
                        frontier_phi_77_pred_3 = _3224;
                        frontier_phi_77_pred_4 = _3223;
                        frontier_phi_77_pred_5 = _3222;
                    }
                    _2864 = frontier_phi_77_pred;
                    _2862 = frontier_phi_77_pred_1;
                    _2860 = frontier_phi_77_pred_2;
                    _2858 = frontier_phi_77_pred_3;
                    _2856 = frontier_phi_77_pred_4;
                    _2854 = frontier_phi_77_pred_5;
                    uint _3020 = _3019 + 1u;
                    if (_3020 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3013 = _2854;
                        _3014 = _2856;
                        _3015 = _2858;
                        _3016 = _2860;
                        _3017 = _2862;
                        _3018 = _2864;
                        _3019 = _3020;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2858;
                frontier_phi_58_59_ladder_1 = _2864;
                frontier_phi_58_59_ladder_2 = _2862;
                frontier_phi_58_59_ladder_3 = _2860;
                frontier_phi_58_59_ladder_4 = _2856;
                frontier_phi_58_59_ladder_5 = _2854;
            }
            else
            {
                frontier_phi_58_59_ladder = _2736;
                frontier_phi_58_59_ladder_1 = _2742;
                frontier_phi_58_59_ladder_2 = _2740;
                frontier_phi_58_59_ladder_3 = _2738;
                frontier_phi_58_59_ladder_4 = _2734;
                frontier_phi_58_59_ladder_5 = _2732;
            }
            _2853 = frontier_phi_58_59_ladder_5;
            _2855 = frontier_phi_58_59_ladder_4;
            _2857 = frontier_phi_58_59_ladder;
            _2859 = frontier_phi_58_59_ladder_3;
            _2861 = frontier_phi_58_59_ladder_2;
            _2863 = frontier_phi_58_59_ladder_1;
        }
        float _2868 = isnan(1.0) ? _853 : (isnan(_853) ? 1.0 : min(_853, 1.0));
        _2644 = (_2868 * _2859) + _2077;
        _2646 = (_2868 * _2861) + _2079;
        _2648 = (_2868 * _2863) + _2081;
        _2650 = ((_2853 * _837) * _2868) + _2425;
        _2652 = ((_2855 * _839) * _2868) + _2427;
        _2654 = ((_2857 * _840) * _2868) + _2429;
    }
    else
    {
        _2644 = _2077;
        _2646 = _2079;
        _2648 = _2081;
        _2650 = _2425;
        _2652 = _2427;
        _2654 = _2429;
    }
    float _4615 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4626 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4637 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _2671 = ((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2644 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _853))) + ((_2650 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    float _2672 = ((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2646 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _853))) + ((_2652 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    float _2673 = ((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2648 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _853))) + ((_2654 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    uint _2674 = _255 + 6u;
    float _2682 = _775 / cbSceneParam._m0[86u].x;
    float _2683 = _776 / cbSceneParam._m0[86u].y;
    vec4 _2697 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2682, _2683, (log2((isnan(cbSceneParam._m0[77u].w) ? _698 : (isnan(_698) ? cbSceneParam._m0[77u].w : min(_698, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2699 = _2697.x;
    float _2700 = _2697.y;
    float _2701 = _2697.z;
    float _2702 = _2697.w;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    if (_698 > cbSceneParam._m0[78u].w)
    {
        float _2757 = isnan(_698) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _698 : min(cbSceneParam._m0[80u].w, _698));
        float _2758 = _2757 / _698;
        float _2769 = _2758 * _748;
        float _2770 = _749 * _2758;
        float _2771 = (-0.0) - _2770;
        float _2773 = _2758 * _750;
        float _2775 = (cbSceneParam._m0[77u].w * _2771) / _2757;
        float _2776 = _2775 + cbSceneParam._m0[79u].w;
        float _2777 = cbSceneParam._m0[79u].w - _2770;
        float _2783 = sqrt(((_2769 * _2769) + (_2770 * _2770)) + (_2773 * _2773));
        float _2786 = (1.0 - (cbSceneParam._m0[77u].w / _2757)) * _2783;
        float _2791 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2793 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2970;
        if (abs((_2771 - _2775) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2970 = ((((_2776 > 0.0) ? exp2(_2791 * _2776) : (2.0 - exp2(_2793 * _2776))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2786;
        }
        else
        {
            float _2914 = 1.0 / cbSceneParam._m0[80u].x;
            float _2915 = isnan(_2777) ? _2776 : (isnan(_2776) ? _2777 : max(_2776, _2777));
            float _2916 = isnan(_2777) ? _2776 : (isnan(_2776) ? _2777 : min(_2776, _2777));
            float _2925 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : min(_2915, 0.0));
            float _2926 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : min(_2916, 0.0));
            _2970 = ((abs(_2783 / _2771) * cbSceneParam._m0[80u].y) * ((((_2925 - _2926) * 2.0) - ((exp2(_2791 * (isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0)))) - exp2(_2791 * (isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0))))) * _2914)) - ((exp2(_2793 * _2925) - exp2(_2793 * _2926)) * _2914))) + (_2786 * cbSceneParam._m0[80u].z);
        }
        vec4 _2972 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2682, _2683, 1.0), 0.0);
        float _2981 = exp2((_2970 * (-1.44269502162933349609375)) * (1.0 - _2972.w));
        float _2982 = log2(_2981);
        float _2998 = log2(_2702);
        _2795 = (exp2(_2998 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].x)) * _2972.x) / cbSceneParam._m0[78u].x)) + _2699;
        _2797 = (exp2(_2998 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].y)) * _2972.y) / cbSceneParam._m0[78u].y)) + _2700;
        _2799 = (exp2(_2998 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].z)) * _2972.z) / cbSceneParam._m0[78u].z)) + _2701;
        _2801 = _2981 * _2702;
    }
    else
    {
        _2795 = _2699;
        _2797 = _2700;
        _2799 = _2701;
        _2801 = _2702;
    }
    bool _3008;
    vec4 _2811;
    vec4 _2833;
    float _2835;
    float _2839;
    float _2840;
    float _2841;
    float _2842;
    bool _2852;
    for (;;)
    {
        _2811 = cbMatDynParam._m0[0u];
        float _2813 = roundEven(_2811.y);
        bool _2814 = _2813 == 3.0;
        float _2815 = log2(_2801);
        float _2822 = exp2(_2815 * cbSceneParam._m0[78u].x) * _2671;
        float _2823 = exp2(_2815 * cbSceneParam._m0[78u].y) * _2672;
        float _2824 = exp2(_2815 * cbSceneParam._m0[78u].z) * _2673;
        float _2831 = _764 + (-0.5);
        _2833 = cbMtdParam._m0[1u];
        _2835 = _2833.y * _2831;
        float _2838 = (_2813 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2839 = _2838 * (_2814 ? _2822 : (_2822 + (cbSceneParam._m0[72u].w * _2795)));
        _2840 = _2838 * (_2814 ? _2823 : (_2823 + (cbSceneParam._m0[72u].w * _2797)));
        _2841 = _2838 * (_2814 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2799)));
        _2842 = _2831 * 0.999000012874603271484375;
        _2852 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2852)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2842) < 0.5)
            {
                _3008 = true;
                break;
            }
        }
        uint _2949 = _813 + uint(_2811.w);
        if ((cbInstanceData._m0[_2949].w < 1.0) && ((cbInstanceData._m0[_2949].w + _2842) < 0.5))
        {
            _3008 = true;
            break;
        }
        if ((_2835 + 1.0) < _2833.x)
        {
            _3008 = true;
            break;
        }
        _3008 = false;
        break;
    }
    float _3213;
    if (_3008)
    {
        discard_state = true;
        _3213 = 0.0;
    }
    else
    {
        _3213 = cbInstanceData._m0[_2674].w;
    }
    SV_Target.x = _2839;
    SV_Target.y = _2840;
    SV_Target.z = _2841;
    SV_Target.w = _3213;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2674].w;
    discard_exit();
}


