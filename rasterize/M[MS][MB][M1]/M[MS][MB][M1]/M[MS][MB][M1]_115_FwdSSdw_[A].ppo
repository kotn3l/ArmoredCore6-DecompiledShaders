#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1347;
float _3752;
float _3753;
float _3754;
float _3755;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3764 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3775 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3786 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].y) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3797 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _430 = (_423 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _431 = (_423 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _432 = (_423 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    float _436 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _430;
    float _439 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _431;
    float _442 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _432;
    float _449 = ((_430 - _436) * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) + _436;
    float _450 = ((_431 - _439) * (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) + _439;
    float _451 = ((_432 - _442) * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) + _442;
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _517 = _513.z;
    float _526 = ((_496.z - _517) * _423) + _517;
    float _529 = ((((_496.x - _515) * _423) + _515) * 2.0) + (-1.0);
    float _530 = ((((_496.y - _516) * _423) + _516) * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _3808 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _536 = sqrt(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))));
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _568 = (_529 + ((((_469.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_556.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _569 = (_530 + ((((_469.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_556.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _572 = fma(_536, _239, fma(_569, _246, _568 * _232));
    float _575 = fma(_536, _240, fma(_569, _247, _568 * _233));
    float _578 = fma(_536, _241, fma(_569, _248, _568 * _234));
    float _582 = inversesqrt(dot(vec3(_572, _575, _578), vec3(_572, _575, _578)));
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _611 = _609.x;
    float _612 = 1.0 - _611;
    float _616 = ((_611 - _612) * cbMtdParam._m0[24u].z) + _612;
    float _618 = (cbMtdParam._m0[19u].x + dot(vec4(_582 * _572, _582 * _575, _582 * _578, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_616 * cbMtdParam._m0[21u].z);
    float _3819 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _634 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_616 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3830 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _635 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _639 = ((_619 * (cbMtdParam._m0[17u].x - _449)) * _635) + _449;
    float _640 = ((_619 * (cbMtdParam._m0[17u].y - _450)) * _635) + _450;
    float _641 = ((_619 * (cbMtdParam._m0[17u].z - _451)) * _635) + _451;
    vec4 _653 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _667 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _669 = _667.x;
    float _687 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _669) * _423) + _669;
    float _691 = ((_653.x - _687) * cbMtdParam._m0[19u].z) + _687;
    float _694 = _691 - ((_635 * _619) * _691);
    float _699 = (((_469.z - _526) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _526;
    float _703 = ((_556.z - _699) * cbMtdParam._m0[19u].w) + _699;
    vec4 _716 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _723 = (_716.x * 2.0) + (-1.0);
    float _724 = (_716.y * 2.0) + (-1.0);
    float _725 = dot(vec2(_723, _724), vec2(_723, _724));
    float _3841 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _734 = (((_716.z - _703) * _619) * _635) + _703;
    float _749 = (((cbMtdParam._m0[21u].x * _568) + ((_723 - _568) * _619)) * _635) + _568;
    float _750 = (((cbMtdParam._m0[21u].x * _569) + ((_724 - _569) * _619)) * _635) + _569;
    float _751 = (((sqrt(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) - _536) * _619) * _635) + _536;
    float _753 = cbMtdParam._m0[22u].x + _556.w;
    float _756 = fma(_751, _239, fma(_750, _246, _749 * _232));
    float _759 = fma(_751, _240, fma(_750, _247, _749 * _233));
    float _762 = fma(_751, _241, fma(_750, _248, _749 * _234));
    float _766 = inversesqrt(dot(vec3(_756, _759, _762), vec3(_756, _759, _762)));
    float _767 = _766 * _756;
    float _768 = _766 * _759;
    float _769 = _766 * _762;
    float _3852 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _770 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _3874 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3885 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3896 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3907 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _775 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _789 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _840 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _830);
    float _841 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _830);
    float _842 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _830);
    float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
    float _847 = _840 * _846;
    float _848 = _841 * _846;
    float _849 = _842 * _846;
    vec4 _854 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _856 = _854.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1028 = sqrt(((_840 * _840) + (_841 * _841)) + (_842 * _842));
        float _1034 = (cbMatDynParam._m0[5u].x * _1028) + cbMatDynParam._m0[5u].y;
        float _3918 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1039 = (cbMatDynParam._m0[5u].z * _1028) + cbMatDynParam._m0[5u].w;
        float _3929 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) - _1035)) + _1035) < ((_856 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _867 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _868 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _886 = fma(_769, cbSceneParam._m0[5u].z, fma(_768, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _767));
    float _889 = fma(_769, cbSceneParam._m0[6u].z, fma(_768, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _767));
    float _892 = fma(_769, cbSceneParam._m0[7u].z, fma(_768, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _767));
    uint _905 = _272 + 9u;
    uint _906 = _905 + uint(cbMatDynParam._m0[0u].w);
    float _912 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_906].x;
    float _913 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_906].y;
    float _914 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_906].z;
    float _3940 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _918 = 1.0 - _775;
    float _919 = _915 * _918;
    float _920 = _916 * _918;
    float _921 = _917 * _918;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _775;
    float _927 = (_916 + (-0.039999999105930328369140625)) * _775;
    float _928 = (_917 + (-0.039999999105930328369140625)) * _775;
    float _929 = _926 + 0.039999999105930328369140625;
    float _931 = _927 + 0.039999999105930328369140625;
    float _932 = _928 + 0.039999999105930328369140625;
    vec4 _941 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _867, cbSceneParam._m0[86u].y * _868));
    float _945 = ((isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * TEXCOORD_5.w) * _941.x;
    float _946 = dot(vec3(_767, _768, _769), vec3(_847, _848, _849));
    float _949 = _946 * 2.0;
    float _953 = (_949 * _767) - _847;
    float _954 = (_949 * _768) - _848;
    float _955 = (_949 * _769) - _849;
    float _959 = abs(dot(vec3(_847, _848, _849), vec3(_767, _768, _769)));
    float _3973 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _961 = sqrt(_770);
    float _974 = exp2((_961 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_961 * 3.0));
    float _980 = (1.0 - _974) * ((_961 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _981 = _974 * _961;
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1346;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1071 = fma(_1017, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009));
        float _1075 = fma(_1017, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009));
        float _1079 = fma(_1017, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009));
        float _1104 = _1009 + _767;
        float _1105 = _1013 + _768;
        float _1106 = _1017 + _769;
        float _1116 = fma(_1106, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104)) - _1071;
        float _1117 = fma(_1106, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104)) - _1075;
        float _1118 = fma(_1106, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104)) - _1079;
        float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
        float _1135 = ((_1122 * _1116) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1071 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1122 * _1117) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1075 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1122 * _1118) / cbModelParam._m0[34u].z) + ((((((_1079 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        float _1174 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1140.x + (-0.5));
        float _1176 = _1174 * (_1140.y + (-0.5));
        float _1177 = _1174 * (_1140.z + (-0.5));
        float _1184 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1147.x + (-0.5));
        float _1186 = _1184 * (_1147.y + (-0.5));
        float _1187 = _1184 * (_1147.z + (-0.5));
        float _1194 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1154.x + (-0.5));
        float _1196 = _1194 * (_1154.y + (-0.5));
        float _1197 = _1194 * (_1154.z + (-0.5));
        float _1204 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1161.x + (-0.5));
        float _1206 = _1204 * (_1161.y + (-0.5));
        float _1207 = _1204 * (_1161.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1228 = (dot(vec3(_767, _768, _769), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1238 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _4021 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1240 + 1.0))) + _1245) * _1208;
        float _1255 = _1176 * 0.5;
        float _1256 = _1186 * 0.5;
        float _1257 = _1196 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_767, _768, _769), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _4054 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1282 + 1.0))) + _1287) * _1209;
        float _1297 = _1177 * 0.5;
        float _1298 = _1187 * 0.5;
        float _1299 = _1197 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_767, _768, _769), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4087 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1324 + 1.0))) + _1329) * _1210;
        _1346 = _1177;
        _1348 = _1176;
        _1349 = _1175;
        _1350 = _1187;
        _1351 = _1186;
        _1352 = _1185;
        _1353 = _1197;
        _1354 = _1196;
        _1355 = _1195;
        _1356 = _1210;
        _1357 = _1209;
        _1358 = _1208;
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
    }
    else
    {
        _1346 = _1347;
        _1348 = _1347;
        _1349 = _1347;
        _1350 = _1347;
        _1351 = _1347;
        _1352 = _1347;
        _1353 = _1347;
        _1354 = _1347;
        _1355 = _1347;
        _1356 = _1347;
        _1357 = _1347;
        _1358 = _1347;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1389 = fma(_1017, cbModelParam._m0[30u].z, fma(_1013, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009));
        float _1393 = fma(_1017, cbModelParam._m0[31u].z, fma(_1013, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009));
        float _1397 = fma(_1017, cbModelParam._m0[32u].z, fma(_1013, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009));
        float _1420 = _1009 + _767;
        float _1421 = _1013 + _768;
        float _1422 = _1017 + _769;
        float _1432 = fma(_1422, cbModelParam._m0[30u].z, fma(_1421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1420)) - _1389;
        float _1433 = fma(_1422, cbModelParam._m0[31u].z, fma(_1421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1420)) - _1393;
        float _1434 = fma(_1422, cbModelParam._m0[32u].z, fma(_1421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1420)) - _1397;
        float _1438 = inversesqrt(dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434)));
        float _1451 = ((_1438 * _1432) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1389 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1438 * _1433) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1393 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1438 * _1434) / cbModelParam._m0[35u].z) + ((((((_1397 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        float _1488 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1455.x + (-0.5));
        float _1490 = _1488 * (_1455.y + (-0.5));
        float _1491 = _1488 * (_1455.z + (-0.5));
        float _1498 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1462.x + (-0.5));
        float _1500 = _1498 * (_1462.y + (-0.5));
        float _1501 = _1498 * (_1462.z + (-0.5));
        float _1508 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1469.x + (-0.5));
        float _1510 = _1508 * (_1469.y + (-0.5));
        float _1511 = _1508 * (_1469.z + (-0.5));
        float _1518 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1476.x + (-0.5));
        float _1520 = _1518 * (_1476.y + (-0.5));
        float _1521 = _1518 * (_1476.z + (-0.5));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = _1489 * 0.5;
        float _1526 = _1499 * 0.5;
        float _1527 = _1509 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_767, _768, _769), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4150 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1552 + 1.0))) + _1557) * _1522;
        float _1567 = _1490 * 0.5;
        float _1568 = _1500 * 0.5;
        float _1569 = _1510 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_767, _768, _769), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4183 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1594 + 1.0))) + _1599) * _1523;
        float _1609 = _1491 * 0.5;
        float _1610 = _1501 * 0.5;
        float _1611 = _1511 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_767, _768, _769), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4216 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1636 + 1.0))) + _1641) * _1524;
        _1658 = _1491;
        _1659 = _1490;
        _1660 = _1489;
        _1661 = _1501;
        _1662 = _1500;
        _1663 = _1499;
        _1664 = _1511;
        _1665 = _1510;
        _1666 = _1509;
        _1667 = _1524;
        _1668 = _1523;
        _1669 = _1522;
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
    }
    else
    {
        _1658 = _1347;
        _1659 = _1347;
        _1660 = _1347;
        _1661 = _1347;
        _1662 = _1347;
        _1663 = _1347;
        _1664 = _1347;
        _1665 = _1347;
        _1666 = _1347;
        _1667 = _1347;
        _1668 = _1347;
        _1669 = _1347;
        _1670 = 0.0;
        _1671 = 0.0;
        _1672 = 0.0;
    }
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1359)) + _1359;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1360)) + _1360;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1361)) + _1361;
    float _1705 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1682));
    float _1726 = _953 * 0.5;
    float _1727 = _954 * 0.5;
    float _1728 = _955 * 0.5;
    float _1729 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1732 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1735 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1769;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1742 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1346, _1350, _1353, _1356));
        float _1746 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1348, _1351, _1354, _1357));
        float _1750 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1757 = dot(vec4(cbModelParam._m0[39u]), vec4(_1726, _1727, _1728, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1780;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1771 = dot(vec4(cbModelParam._m0[40u]), vec4(_1726, _1727, _1728, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1771) ? 0.0 : (isnan(0.0) ? _1771 : max(0.0, _1771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1784 = (_1780 * cbModelParam._m0[1u].x) + (_1769 * (1.0 - cbModelParam._m0[1u].x));
    float _1794 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _770);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1794 : min(cbModelParam._m0[25u].z, _1794));
    float _1876;
    float _1878;
    float _1880;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1843 = fma(_1017, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009)) + cbModelParam._m0[13u].w;
        float _1847 = fma(_1017, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009)) + cbModelParam._m0[14u].w;
        float _1851 = fma(_1017, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009)) + cbModelParam._m0[15u].w;
        float _1854 = fma(_955, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953));
        float _1857 = fma(_955, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953));
        float _1860 = fma(_955, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953));
        float _1888;
        if (_1854 > 0.0)
        {
            _1888 = abs((1.0 - _1843) / _1854);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1843 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1888 = frontier_phi_17_15_ladder;
        }
        float _2112;
        if (_1857 > 0.0)
        {
            _2112 = abs((1.0 - _1847) / _1857);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1847 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2112 = frontier_phi_26_22_ladder;
        }
        float _2369;
        if (_1860 > 0.0)
        {
            _2369 = abs((1.0 - _1851) / _1860);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1851 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2369 = frontier_phi_38_33_ladder;
        }
        float _2371 = isnan(_2112) ? _1888 : (isnan(_1888) ? _2112 : min(_1888, _2112));
        float _2372 = isnan(_2369) ? _2371 : (isnan(_2371) ? _2369 : min(_2371, _2369));
        float _2376 = (_2372 * _1854) + _1843;
        float _2377 = (_2372 * _1857) + _1847;
        float _2378 = (_2372 * _1860) + _1851;
        float _2379 = _2372 * 9.9999997473787516355514526367188e-05;
        float _2381 = (-1.0) - _2379;
        float _2383 = _2379 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2378 > _2383) || ((_2378 < _2381) || ((_2377 > _2383) || ((_2377 < _2381) || ((_2376 < _2381) || (_2376 > _2383))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2506 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2378, cbModelParam._m0[9u].z, fma(_2377, cbModelParam._m0[9u].y, _2376 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2378, cbModelParam._m0[10u].z, fma(_2377, cbModelParam._m0[10u].y, _2376 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2378, cbModelParam._m0[11u].z, fma(_2377, cbModelParam._m0[11u].y, _2376 * cbModelParam._m0[11u].x))), _1795);
            frontier_phi_16_38_ladder = _2506.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2506.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2506.x * cbModelParam._m0[1u].y;
        }
        _1876 = frontier_phi_16_38_ladder_2;
        _1878 = frontier_phi_16_38_ladder_1;
        _1880 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_953, _954, _955), _1795);
        _1876 = _1864.x * cbModelParam._m0[1u].y;
        _1878 = _1864.y * cbModelParam._m0[1u].y;
        _1880 = _1864.z * cbModelParam._m0[1u].y;
    }
    float _1884 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _770);
    float _1885 = isnan(_1884) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1884 : min(cbModelParam._m0[25u].w, _1884));
    float _1975;
    float _1977;
    float _1979;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1939 = fma(_1017, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009)) + cbModelParam._m0[21u].w;
        float _1943 = fma(_1017, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009)) + cbModelParam._m0[22u].w;
        float _1947 = fma(_1017, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009)) + cbModelParam._m0[23u].w;
        float _1950 = fma(_955, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953));
        float _1953 = fma(_955, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953));
        float _1956 = fma(_955, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953));
        float _2117;
        if (_1950 > 0.0)
        {
            _2117 = abs((1.0 - _1939) / _1950);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1939 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2117 = frontier_phi_28_24_ladder;
        }
        float _2396;
        if (_1953 > 0.0)
        {
            _2396 = abs((1.0 - _1943) / _1953);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1943 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2396 = frontier_phi_40_35_ladder;
        }
        float _2609;
        if (_1956 > 0.0)
        {
            _2609 = abs((1.0 - _1947) / _1956);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1947 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2609 = frontier_phi_49_46_ladder;
        }
        float _2611 = isnan(_2396) ? _2117 : (isnan(_2117) ? _2396 : min(_2117, _2396));
        float _2612 = isnan(_2609) ? _2611 : (isnan(_2611) ? _2609 : min(_2611, _2609));
        float _2616 = (_2612 * _1950) + _1939;
        float _2617 = (_2612 * _1953) + _1943;
        float _2618 = (_2612 * _1956) + _1947;
        float _2619 = _2612 * 9.9999997473787516355514526367188e-05;
        float _2620 = (-1.0) - _2619;
        float _2622 = _2619 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2618 > _2622) || ((_2618 < _2620) || ((_2617 > _2622) || ((_2617 < _2620) || ((_2616 < _2620) || (_2616 > _2622))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2817 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2618, cbModelParam._m0[17u].z, fma(_2617, cbModelParam._m0[17u].y, _2616 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2618, cbModelParam._m0[18u].z, fma(_2617, cbModelParam._m0[18u].y, _2616 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2618, cbModelParam._m0[19u].z, fma(_2617, cbModelParam._m0[19u].y, _2616 * cbModelParam._m0[19u].x))), _1885);
            frontier_phi_25_49_ladder = _2817.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2817.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2817.x * cbModelParam._m0[1u].z;
        }
        _1975 = frontier_phi_25_49_ladder_2;
        _1977 = frontier_phi_25_49_ladder_1;
        _1979 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1959 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_953, _954, _955), _1885);
        _1975 = _1959.x * cbModelParam._m0[1u].z;
        _1977 = _1959.y * cbModelParam._m0[1u].z;
        _1979 = _1959.z * cbModelParam._m0[1u].z;
    }
    float _1992 = (((_980 * _929) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1975 - _1876)) + _1876);
    float _1994 = (((_980 * _931) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1977 - _1878)) + _1878);
    float _1996 = (((_980 * _932) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1979 - _1880)) + _1880);
    float _1999 = fma(_1996, cbSceneParam._m0[89u].z, fma(_1994, cbSceneParam._m0[89u].y, _1992 * cbSceneParam._m0[89u].x));
    float _2002 = fma(_1996, cbSceneParam._m0[90u].z, fma(_1994, cbSceneParam._m0[90u].y, _1992 * cbSceneParam._m0[90u].x));
    float _2005 = fma(_1996, cbSceneParam._m0[91u].z, fma(_1994, cbSceneParam._m0[91u].y, _1992 * cbSceneParam._m0[91u].x));
    vec4 _2013 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_867, _868));
    float _2015 = _2013.w;
    float _2027 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2015);
    float _2028 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2015);
    float _2029 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2015);
    uvec4 _2033 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2035 = _2033.x * 14u;
    uint _2036 = _2035 + 13u;
    float _2043 = _945 + (-1.0);
    float _2048 = (cbLight._m0[_2036].x * _2043) + 1.0;
    float _2049 = (cbLight._m0[_2036].y * _2043) + 1.0;
    float _2050 = (cbLight._m0[_2036].z * _2043) + 1.0;
    float _2051 = (cbLight._m0[_2036].w * _2043) + 1.0;
    uint _2052 = _2035 + 5u;
    float _2058 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
    uint _2062 = _2035 + 4u;
    float _2071 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2075 = _2035 | 1u;
    float _2086 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_767, _768, _769));
    float _2089 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_767, _768, _769));
    float _4352 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _4363 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2094 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * 0.3183098733425140380859375;
    float _2096 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * 0.3183098733425140380859375;
    float _2103 = ((cbLight._m0[_2052].x * _2058) * _2096) + (((cbLight._m0[_2062].x * _2027) * _2071) * _2094);
    float _2104 = ((_2058 * cbLight._m0[_2052].y) * _2096) + (((cbLight._m0[_2062].y * _2028) * _2071) * _2094);
    float _2105 = ((_2058 * cbLight._m0[_2052].z) * _2096) + (((cbLight._m0[_2062].z * _2029) * _2071) * _2094);
    uvec4 _2109 = floatBitsToUint(cbLight._m0[_2035 + 12u]);
    bool _2111 = _2109.x == 0u;
    float _2122;
    float _2124;
    float _2126;
    if (_2111)
    {
        _2122 = _2103;
        _2124 = _2104;
        _2126 = _2105;
    }
    else
    {
        uint _2130 = _2035 + 6u;
        float _2146 = (dot(vec3(cbLight._m0[_2035 + 2u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2147 = _2146 * _2146;
        float _4374 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2148 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2149 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2122 = (((cbLight._m0[_2130].x * 0.3183098733425140380859375) * _2148) * _2149) + _2103;
        _2124 = (((cbLight._m0[_2130].y * 0.3183098733425140380859375) * _2148) * _2149) + _2104;
        _2126 = (((cbLight._m0[_2130].z * 0.3183098733425140380859375) * _2148) * _2149) + _2105;
    }
    bool _2129 = _2109.y == 0u;
    float _2167;
    float _2169;
    float _2171;
    if (_2129)
    {
        _2167 = _2122;
        _2169 = _2124;
        _2171 = _2126;
    }
    else
    {
        uint _2340 = _2035 + 7u;
        float _2356 = (dot(vec3(cbLight._m0[_2035 + 3u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2357 = _2356 * _2356;
        float _4390 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2358 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2359 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2167 = (((cbLight._m0[_2340].x * 0.3183098733425140380859375) * _2358) * _2359) + _2122;
        _2169 = (((cbLight._m0[_2340].y * 0.3183098733425140380859375) * _2358) * _2359) + _2124;
        _2171 = (((cbLight._m0[_2340].z * 0.3183098733425140380859375) * _2358) * _2359) + _2126;
    }
    uint _2174 = _2035 + 8u;
    float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _770) * 0.949999988079071044921875);
    float _2188 = _2187 * _2187;
    float _2189 = cbLight._m0[_2035].x + _847;
    float _2190 = cbLight._m0[_2035].y + _848;
    float _2191 = cbLight._m0[_2035].z + _849;
    float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
    float _2196 = _2195 * _2189;
    float _2197 = _2195 * _2190;
    float _2198 = _2195 * _2191;
    float _2199 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2035].xyz));
    float _4406 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _4417 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _2203 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2204 = dot(vec3(_767, _768, _769), vec3(_2196, _2197, _2198));
    float _4428 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2208 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2196, _2197, _2198));
    float _4439 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2212 = _2188 * _2188;
    float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
    float _2224 = exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0);
    float _2225 = 0.959999978542327880859375 - _926;
    float _2227 = 0.959999978542327880859375 - _927;
    float _2228 = 0.959999978542327880859375 - _928;
    float _2235 = 1.0 - _2188;
    float _2246 = (0.5 / (((_2203 * ((_2202 * _2235) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2235) + _2188) * _2202))) * _2202;
    float _4450 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2248 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
    uint _2262 = _2035 + 9u;
    float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _770) * 0.949999988079071044921875);
    float _2274 = _2273 * _2273;
    float _2275 = cbLight._m0[_2075].x + _847;
    float _2276 = cbLight._m0[_2075].y + _848;
    float _2277 = cbLight._m0[_2075].z + _849;
    float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
    float _2282 = _2281 * _2275;
    float _2283 = _2281 * _2276;
    float _2284 = _2281 * _2277;
    float _2285 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2075].xyz));
    float _4461 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2289 = dot(vec3(_767, _768, _769), vec3(_2282, _2283, _2284));
    float _4472 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2293 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2282, _2283, _2284));
    float _4483 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2297 = _2274 * _2274;
    float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
    float _2308 = exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0);
    float _2315 = 1.0 - _2274;
    float _2325 = (0.5 / (((_2203 * ((_2288 * _2315) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2315) + _2274) * _2288))) * _2288;
    float _4494 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2327 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
    float _2337 = (((((_2308 * _2225) + _929) * cbLight._m0[_2262].x) * _2327) * _2058) + ((((cbLight._m0[_2174].x * _2027) * ((_2224 * _2225) + _929)) * _2248) * _2071);
    float _2338 = (((((_2308 * _2227) + _931) * cbLight._m0[_2262].y) * _2327) * _2058) + ((((cbLight._m0[_2174].y * _2028) * ((_2224 * _2227) + _931)) * _2248) * _2071);
    float _2339 = (((((_2308 * _2228) + _932) * cbLight._m0[_2262].z) * _2327) * _2058) + ((((cbLight._m0[_2174].z * _2029) * ((_2224 * _2228) + _932)) * _2248) * _2071);
    float _2401;
    float _2403;
    float _2405;
    if (_2111)
    {
        _2401 = _2337;
        _2403 = _2338;
        _2405 = _2339;
    }
    else
    {
        uint _2407 = _2035 + 2u;
        uint _2411 = _2035 + 10u;
        float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _770) * 0.949999988079071044921875);
        float _2426 = _2425 * _2425;
        float _2427 = cbLight._m0[_2407].x + _847;
        float _2428 = cbLight._m0[_2407].y + _848;
        float _2429 = cbLight._m0[_2407].z + _849;
        float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
        float _2434 = _2433 * _2427;
        float _2435 = _2433 * _2428;
        float _2436 = _2433 * _2429;
        float _2437 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2407].xyz));
        float _4505 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2441 = dot(vec3(_767, _768, _769), vec3(_2434, _2435, _2436));
        float _4516 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2445 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2434, _2435, _2436));
        float _4527 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2449 = _2426 * _2426;
        float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
        float _2460 = exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0);
        float _2467 = 1.0 - _2426;
        float _2477 = (0.5 / (((_2203 * ((_2440 * _2467) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2467) + _2426) * _2440))) * _2440;
        float _4538 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2479 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
        float _2480 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2401 = (((((_2460 * _2225) + _929) * cbLight._m0[_2411].x) * _2479) * _2480) + _2337;
        _2403 = (((((_2460 * _2227) + _931) * cbLight._m0[_2411].y) * _2479) * _2480) + _2338;
        _2405 = (((((_2460 * _2228) + _932) * cbLight._m0[_2411].z) * _2479) * _2480) + _2339;
    }
    float _2515;
    float _2517;
    float _2519;
    if (_2129)
    {
        _2515 = _2401;
        _2517 = _2403;
        _2519 = _2405;
    }
    else
    {
        uint _2526 = _2035 + 3u;
        uint _2530 = _2035 + 11u;
        float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _770) * 0.949999988079071044921875);
        float _2545 = _2544 * _2544;
        float _2546 = cbLight._m0[_2526].x + _847;
        float _2547 = cbLight._m0[_2526].y + _848;
        float _2548 = cbLight._m0[_2526].z + _849;
        float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
        float _2553 = _2552 * _2546;
        float _2554 = _2552 * _2547;
        float _2555 = _2552 * _2548;
        float _2556 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2526].xyz));
        float _4554 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2560 = dot(vec3(_767, _768, _769), vec3(_2553, _2554, _2555));
        float _4565 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2564 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2553, _2554, _2555));
        float _4576 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2568 = _2545 * _2545;
        float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
        float _2579 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
        float _2586 = 1.0 - _2545;
        float _2596 = (0.5 / (((_2203 * ((_2559 * _2586) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2203 * _2586) + _2545) * _2559))) * _2559;
        float _4587 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2598 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
        float _2599 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2515 = (((((_2579 * _2225) + _929) * cbLight._m0[_2530].x) * _2598) * _2599) + _2401;
        _2517 = (((((_2579 * _2227) + _931) * cbLight._m0[_2530].y) * _2598) * _2599) + _2403;
        _2519 = (((((_2579 * _2228) + _932) * cbLight._m0[_2530].z) * _2598) * _2599) + _2405;
    }
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    if (_2033.y == 0u)
    {
        float _2674 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2675 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2674;
        float _2676 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2674;
        float _2677 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2674;
        uvec4 _2689 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2690 = _2689.x;
        uint _2701 = uint((float(_2689.y) * floor(float(uint(cbSceneParam._m0[85u].y * _868) / _2690))) + floor(float(uint(cbSceneParam._m0[85u].x * _867) / _2690)));
        float _2711 = (log2(_2677 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2712 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        uint _2715 = uint(isnan(14.0) ? _2712 : (isnan(_2712) ? 14.0 : min(_2712, 14.0)));
        uvec4 _2720 = texelFetch(g_lightClusterGridBuffer, int(((_2715 << 2u) + (_2701 << 6u)) >> 2u));
        uint _2721 = _2720.x;
        uint _2722 = _2689.z;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        if (((((1u << ((_2722 >> 4u) & 15u)) + 4294967295u) & _2721) == 0u) || ((_2722 & 240u) == 0u))
        {
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
            _2832 = 0.0;
        }
        else
        {
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2831;
            float _2833;
            float _2975 = 0.0;
            float _2976 = 0.0;
            float _2977 = 0.0;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            uint _2981 = 0u;
            uint _2990;
            bool _2991;
            for (;;)
            {
                _2990 = texelFetch(g_lightClassification, int((((_2715 << 5u) + (_2701 << 9u)) + (_2981 << 2u)) >> 2u)).x;
                _2991 = _2990 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2991)
                {
                    frontier_phi_66_pred = _2975;
                    frontier_phi_66_pred_1 = _2980;
                    frontier_phi_66_pred_2 = _2979;
                    frontier_phi_66_pred_3 = _2978;
                    frontier_phi_66_pred_4 = _2977;
                    frontier_phi_66_pred_5 = _2976;
                }
                else
                {
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    uint _3126;
                    _3120 = _2975;
                    _3121 = _2976;
                    _3122 = _2977;
                    _3123 = _2978;
                    _3124 = _2979;
                    _3125 = _2980;
                    _3126 = _2990;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    for (;;)
                    {
                        uint _3130 = uint(findLSB(_3126)) + (_2981 << 5u);
                        uint _3127 = (_3126 + 4294967295u) & _3126;
                        uint _3132 = _3130 * 48u;
                        vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3132)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 3u)).x));
                        uint _3152 = (_3130 * 48u) + 4u;
                        vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 3u)).x));
                        uint _3171 = (_3130 * 48u) + 8u;
                        vec3 _3182 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3171)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 2u)).x));
                        float _3186 = _3146.x - _2675;
                        float _3187 = _3146.y - _2676;
                        float _3188 = _3146.z - _2677;
                        float _3189 = dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188));
                        float _3192 = inversesqrt(_3189);
                        float _3193 = _3192 * _3186;
                        float _3194 = _3192 * _3187;
                        float _3195 = _3192 * _3188;
                        float _3196 = dot(vec3(_886, _889, _892), vec3(_3193, _3194, _3195));
                        float _3201 = 1.0 - (_3189 * _3146.w);
                        float _4613 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3202 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                        float _3203 = sqrt(_3189) * _3165.w;
                        float _3206 = 1.39999997615814208984375 / (_3203 + 1.39999997615814208984375);
                        float _3207 = _3206 * _3206;
                        float _3210 = ((1.0 - _3207) * _3196) + _3207;
                        float _3213 = _3203 * _3203;
                        float _3217 = ((isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))) * _3202) / ((_3213 * 0.699999988079071044921875) + 1.0);
                        float _3221 = (-0.0) - _2675;
                        float _3222 = (-0.0) - _2676;
                        float _3223 = (-0.0) - _2677;
                        float _3227 = inversesqrt(dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223)));
                        float _3228 = _3227 * _3221;
                        float _3229 = _3227 * _3222;
                        float _3230 = _3227 * _3223;
                        float _3238 = exp2(log2(1.0 / ((_3213 * 3.5) + 5.0)) * 0.25);
                        float _3239 = 1.0 - _961;
                        float _3246 = sqrt(1.0 - ((1.0 - (_3239 * _3239)) * (1.0 - (_3238 * _3238))));
                        float _3247 = _3246 * _3246;
                        float _3248 = _3247 * _3247;
                        float _3249 = _3228 + _3193;
                        float _3250 = _3229 + _3194;
                        float _3251 = _3230 + _3195;
                        float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                        float _3259 = dot(vec3(_886, _889, _892), vec3(_3228, _3229, _3230));
                        float _4629 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3262 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3263 = dot(vec3(_886, _889, _892), vec3(_3255 * _3249, _3255 * _3250, _3255 * _3251));
                        float _4640 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3266 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3270 = ((_3266 * _3266) * (_3248 + (-1.0))) + 1.0;
                        float _3271 = _3206 * _3247;
                        float _3272 = _3271 * _3271;
                        float _3275 = ((1.0 - _3272) * _3196) + _3272;
                        float _4651 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3276 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3277 = 1.0 - _3247;
                        float _3287 = (0.5 / (((_3276 * ((_3262 * _3277) + _3247)) + 9.9999999392252902907785028219223e-09) + (((_3276 * _3277) + _3247) * _3262))) * _3276;
                        float _4662 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3298 = (((_3248 * 3.1415927410125732421875) * (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) / ((_3270 * _3270) * ((_3213 * 2.1991131305694580078125) + 3.141590118408203125))) * _3202;
                        _3050 = (_3217 * _3165.x) + _3123;
                        _3051 = (_3217 * _3165.y) + _3124;
                        _3052 = (_3217 * _3165.z) + _3125;
                        _3047 = (_3298 * _3182.x) + _3120;
                        _3048 = (_3298 * _3182.y) + _3121;
                        _3049 = (_3298 * _3182.z) + _3122;
                        if (_3127 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3120 = _3047;
                            _3121 = _3048;
                            _3122 = _3049;
                            _3123 = _3050;
                            _3124 = _3051;
                            _3125 = _3052;
                            _3126 = _3127;
                        }
                    }
                    frontier_phi_66_pred = _3047;
                    frontier_phi_66_pred_1 = _3052;
                    frontier_phi_66_pred_2 = _3051;
                    frontier_phi_66_pred_3 = _3050;
                    frontier_phi_66_pred_4 = _3049;
                    frontier_phi_66_pred_5 = _3048;
                }
                _2823 = frontier_phi_66_pred;
                _2833 = frontier_phi_66_pred_1;
                _2831 = frontier_phi_66_pred_2;
                _2829 = frontier_phi_66_pred_3;
                _2827 = frontier_phi_66_pred_4;
                _2825 = frontier_phi_66_pred_5;
                uint _2982 = _2981 + 1u;
                if (_2982 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2975 = _2823;
                    _2976 = _2825;
                    _2977 = _2827;
                    _2978 = _2829;
                    _2979 = _2831;
                    _2980 = _2833;
                    _2981 = _2982;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
            _2832 = _2833;
        }
        uvec4 _2836 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2837 = _2836.z;
        uint _2839 = (_2837 >> 8u) & 15u;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        if (((4294967295u << _2839) & _2721) == 0u)
        {
            _2943 = _2822;
            _2945 = _2824;
            _2947 = _2826;
            _2949 = _2828;
            _2951 = _2830;
            _2953 = _2832;
        }
        else
        {
            float _2968 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
            float _2969 = _2968 * _2675;
            float _2970 = _2968 * _2676;
            float _2971 = _2968 * _2677;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2839 < ((_2837 >> 12u) & 15u))
            {
                float _2944;
                float _2946;
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _3103 = _2822;
                float _3104 = _2824;
                float _3105 = _2826;
                float _3106 = _2828;
                float _3107 = _2830;
                float _3108 = _2832;
                uint _3109 = _2839;
                uint _3118;
                bool _3119;
                for (;;)
                {
                    _3118 = texelFetch(g_lightClassification, int((((_2715 << 5u) + (_2701 << 9u)) + (_3109 << 2u)) >> 2u)).x;
                    _3119 = _3118 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3119)
                    {
                        frontier_phi_77_pred = _3108;
                        frontier_phi_77_pred_1 = _3107;
                        frontier_phi_77_pred_2 = _3106;
                        frontier_phi_77_pred_3 = _3105;
                        frontier_phi_77_pred_4 = _3104;
                        frontier_phi_77_pred_5 = _3103;
                    }
                    else
                    {
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3325 = _3103;
                        float _3326 = _3104;
                        float _3327 = _3105;
                        float _3328 = _3106;
                        float _3329 = _3107;
                        float _3330 = _3108;
                        uint _3331 = _3118;
                        uint _3332;
                        vec4 _3357;
                        float _3358;
                        vec4 _3373;
                        vec3 _3385;
                        vec4 _3400;
                        vec4 _3415;
                        float _3461;
                        bool _3462;
                        for (;;)
                        {
                            uint _3342 = ((_3109 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3331));
                            _3332 = (_3331 + 4294967295u) & _3331;
                            uint _3344 = _3342 * 40u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            _3358 = _3357.w;
                            uint _3360 = (_3342 * 40u) + 4u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            uint _3375 = (_3342 * 40u) + 8u;
                            _3385 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x));
                            uint _3387 = (_3342 * 40u) + 16u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3402 = (_3342 * 40u) + 20u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3417 = (_3342 * 40u) + 24u;
                            vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3436 = (_3342 * 40u) + 28u;
                            vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            _3461 = fma(_2677, _3449.z, fma(_2676, _3449.y, _3449.x * _2675)) + _3449.w;
                            _3462 = !((fma(_2677, _3430.z, fma(_2676, _3430.y, _3430.x * _2675)) + _3430.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3462)
                            {
                                float _3489 = _3357.x - _2675;
                                float _3490 = _3357.y - _2676;
                                float _3491 = _3357.z - _2677;
                                float _3492 = dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491));
                                float _3495 = inversesqrt(_3492);
                                float _3496 = _3495 * _3489;
                                float _3497 = _3495 * _3490;
                                float _3498 = _3495 * _3491;
                                float _3502 = 1.0 - (_3492 / (_3358 * _3358));
                                float _4673 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3507 = sqrt(_3492) * _3373.w;
                                float _3509 = 1.39999997615814208984375 / (_3507 + 1.39999997615814208984375);
                                float _3510 = _3509 * _3509;
                                float _3513 = ((1.0 - _3510) * dot(vec3(_3496, _3497, _3498), vec3(_886, _889, _892))) + _3510;
                                float _3516 = _3507 * _3507;
                                float _3520 = (fma(_2677, _3400.z, fma(_2676, _3400.y, _3400.x * _2675)) + _3400.w) / _3461;
                                float _3521 = (fma(_2677, _3415.z, fma(_2676, _3415.y, _3415.x * _2675)) + _3415.w) / _3461;
                                float _3525 = 1.0 - dot(vec2(_3520, _3521), vec2(_3520, _3521));
                                float _4689 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3527 = _3526 * (((isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0))) * _3503) / ((_3516 * 0.699999988079071044921875) + 1.0));
                                float _3539 = exp2(log2(1.0 / ((_3516 * 3.5) + 5.0)) * 0.25);
                                float _3540 = 1.0 - _961;
                                float _3547 = sqrt(1.0 - ((1.0 - (_3540 * _3540)) * (1.0 - (_3539 * _3539))));
                                float _3548 = _3547 * _3547;
                                float _3549 = _3548 * _3548;
                                float _3550 = _3496 - _2969;
                                float _3551 = _3497 - _2970;
                                float _3552 = _3498 - _2971;
                                float _3556 = inversesqrt(dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552)));
                                float _3560 = dot(vec3(_886, _889, _892), vec3((-0.0) - _2969, (-0.0) - _2970, (-0.0) - _2971));
                                float _4700 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3563 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3564 = dot(vec3(_886, _889, _892), vec3(_3556 * _3550, _3556 * _3551, _3556 * _3552));
                                float _4711 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3567 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3571 = ((_3567 * _3567) * (_3549 + (-1.0))) + 1.0;
                                float _3572 = _3509 * _3548;
                                float _3573 = _3572 * _3572;
                                float _3579 = ((1.0 - _3573) * dot(vec3(_886, _889, _892), vec3(_3496, _3497, _3498))) + _3573;
                                float _4722 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3581 = 1.0 - _3548;
                                float _3591 = (0.5 / (((_3580 * ((_3563 * _3581) + _3548)) + 9.9999999392252902907785028219223e-09) + (((_3580 * _3581) + _3548) * _3563))) * _3580;
                                float _4733 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3601 = (_3526 * _3503) * (((_3549 * 3.1415927410125732421875) * (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) / ((_3571 * _3571) * ((_3516 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3527 * _3373.y;
                                frontier_phi_83_pred_1 = _3527 * _3373.x;
                                frontier_phi_83_pred_2 = _3601 * _3385.z;
                                frontier_phi_83_pred_3 = _3601 * _3385.y;
                                frontier_phi_83_pred_4 = _3601 * _3385.x;
                                frontier_phi_83_pred_5 = _3527 * _3373.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3609 = frontier_phi_83_pred;
                            _3608 = frontier_phi_83_pred_1;
                            _3607 = frontier_phi_83_pred_2;
                            _3606 = frontier_phi_83_pred_3;
                            _3605 = frontier_phi_83_pred_4;
                            _3610 = frontier_phi_83_pred_5;
                            _3315 = _3608 + _3328;
                            _3316 = _3609 + _3329;
                            _3317 = _3610 + _3330;
                            _3312 = _3605 + _3325;
                            _3313 = _3606 + _3326;
                            _3314 = _3607 + _3327;
                            if (_3332 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3332;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3317;
                        frontier_phi_77_pred_1 = _3316;
                        frontier_phi_77_pred_2 = _3315;
                        frontier_phi_77_pred_3 = _3314;
                        frontier_phi_77_pred_4 = _3313;
                        frontier_phi_77_pred_5 = _3312;
                    }
                    _2954 = frontier_phi_77_pred;
                    _2952 = frontier_phi_77_pred_1;
                    _2950 = frontier_phi_77_pred_2;
                    _2948 = frontier_phi_77_pred_3;
                    _2946 = frontier_phi_77_pred_4;
                    _2944 = frontier_phi_77_pred_5;
                    uint _3110 = _3109 + 1u;
                    if (_3110 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3103 = _2944;
                        _3104 = _2946;
                        _3105 = _2948;
                        _3106 = _2950;
                        _3107 = _2952;
                        _3108 = _2954;
                        _3109 = _3110;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2948;
                frontier_phi_58_59_ladder_1 = _2954;
                frontier_phi_58_59_ladder_2 = _2952;
                frontier_phi_58_59_ladder_3 = _2950;
                frontier_phi_58_59_ladder_4 = _2946;
                frontier_phi_58_59_ladder_5 = _2944;
            }
            else
            {
                frontier_phi_58_59_ladder = _2826;
                frontier_phi_58_59_ladder_1 = _2832;
                frontier_phi_58_59_ladder_2 = _2830;
                frontier_phi_58_59_ladder_3 = _2828;
                frontier_phi_58_59_ladder_4 = _2824;
                frontier_phi_58_59_ladder_5 = _2822;
            }
            _2943 = frontier_phi_58_59_ladder_5;
            _2945 = frontier_phi_58_59_ladder_4;
            _2947 = frontier_phi_58_59_ladder;
            _2949 = frontier_phi_58_59_ladder_3;
            _2951 = frontier_phi_58_59_ladder_2;
            _2953 = frontier_phi_58_59_ladder_1;
        }
        float _2958 = isnan(1.0) ? _945 : (isnan(_945) ? 1.0 : min(_945, 1.0));
        _2734 = (_2958 * _2949) + _2167;
        _2736 = (_2958 * _2951) + _2169;
        _2738 = (_2958 * _2953) + _2171;
        _2740 = ((_2943 * _929) * _2958) + _2515;
        _2742 = ((_2945 * _931) * _2958) + _2517;
        _2744 = ((_2947 * _932) * _2958) + _2519;
    }
    else
    {
        _2734 = _2167;
        _2736 = _2169;
        _2738 = _2171;
        _2740 = _2515;
        _2742 = _2517;
        _2744 = _2519;
    }
    float _4749 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4760 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _4771 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _2761 = ((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2734 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _945))) + ((_2740 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    float _2762 = ((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2736 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _945))) + ((_2742 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    float _2763 = ((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2738 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _945))) + ((_2744 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    uint _2764 = _272 + 6u;
    float _2772 = _867 / cbSceneParam._m0[86u].x;
    float _2773 = _868 / cbSceneParam._m0[86u].y;
    vec4 _2787 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2772, _2773, (log2((isnan(cbSceneParam._m0[77u].w) ? _789 : (isnan(_789) ? cbSceneParam._m0[77u].w : min(_789, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2789 = _2787.x;
    float _2790 = _2787.y;
    float _2791 = _2787.z;
    float _2792 = _2787.w;
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    if (_789 > cbSceneParam._m0[78u].w)
    {
        float _2847 = isnan(_789) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _789 : min(cbSceneParam._m0[80u].w, _789));
        float _2848 = _2847 / _789;
        float _2859 = _2848 * _840;
        float _2860 = _841 * _2848;
        float _2861 = (-0.0) - _2860;
        float _2863 = _2848 * _842;
        float _2865 = (cbSceneParam._m0[77u].w * _2861) / _2847;
        float _2866 = _2865 + cbSceneParam._m0[79u].w;
        float _2867 = cbSceneParam._m0[79u].w - _2860;
        float _2873 = sqrt(((_2859 * _2859) + (_2860 * _2860)) + (_2863 * _2863));
        float _2876 = (1.0 - (cbSceneParam._m0[77u].w / _2847)) * _2873;
        float _2881 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2883 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3060;
        if (abs((_2861 - _2865) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3060 = ((((_2866 > 0.0) ? exp2(_2881 * _2866) : (2.0 - exp2(_2883 * _2866))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2876;
        }
        else
        {
            float _3004 = 1.0 / cbSceneParam._m0[80u].x;
            float _3005 = isnan(_2867) ? _2866 : (isnan(_2866) ? _2867 : max(_2866, _2867));
            float _3006 = isnan(_2867) ? _2866 : (isnan(_2866) ? _2867 : min(_2866, _2867));
            float _3015 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : min(_3005, 0.0));
            float _3016 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : min(_3006, 0.0));
            _3060 = ((abs(_2873 / _2861) * cbSceneParam._m0[80u].y) * ((((_3015 - _3016) * 2.0) - ((exp2(_2881 * (isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0)))) - exp2(_2881 * (isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))))) * _3004)) - ((exp2(_2883 * _3015) - exp2(_2883 * _3016)) * _3004))) + (_2876 * cbSceneParam._m0[80u].z);
        }
        vec4 _3062 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2772, _2773, 1.0), 0.0);
        float _3071 = exp2((_3060 * (-1.44269502162933349609375)) * (1.0 - _3062.w));
        float _3072 = log2(_3071);
        float _3088 = log2(_2792);
        _2885 = (exp2(_3088 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3072 * cbSceneParam._m0[78u].x)) * _3062.x) / cbSceneParam._m0[78u].x)) + _2789;
        _2887 = (exp2(_3088 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3072 * cbSceneParam._m0[78u].y)) * _3062.y) / cbSceneParam._m0[78u].y)) + _2790;
        _2889 = (exp2(_3088 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3072 * cbSceneParam._m0[78u].z)) * _3062.z) / cbSceneParam._m0[78u].z)) + _2791;
        _2891 = _3071 * _2792;
    }
    else
    {
        _2885 = _2789;
        _2887 = _2790;
        _2889 = _2791;
        _2891 = _2792;
    }
    bool _3098;
    vec4 _2901;
    vec4 _2923;
    float _2925;
    float _2929;
    float _2930;
    float _2931;
    float _2932;
    bool _2942;
    for (;;)
    {
        _2901 = cbMatDynParam._m0[0u];
        float _2903 = roundEven(_2901.y);
        bool _2904 = _2903 == 3.0;
        float _2905 = log2(_2891);
        float _2912 = exp2(_2905 * cbSceneParam._m0[78u].x) * _2761;
        float _2913 = exp2(_2905 * cbSceneParam._m0[78u].y) * _2762;
        float _2914 = exp2(_2905 * cbSceneParam._m0[78u].z) * _2763;
        float _2921 = _856 + (-0.5);
        _2923 = cbMtdParam._m0[1u];
        _2925 = _2923.y * _2921;
        float _2928 = (_2903 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2929 = _2928 * (_2904 ? _2912 : (_2912 + (cbSceneParam._m0[72u].w * _2885)));
        _2930 = _2928 * (_2904 ? _2913 : (_2913 + (cbSceneParam._m0[72u].w * _2887)));
        _2931 = _2928 * (_2904 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2889)));
        _2932 = _2921 * 0.999000012874603271484375;
        _2942 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2942)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _2932) < 0.5)
            {
                _3098 = true;
                break;
            }
        }
        uint _3039 = _905 + uint(_2901.w);
        if ((cbInstanceData._m0[_3039].w < 1.0) && ((cbInstanceData._m0[_3039].w + _2932) < 0.5))
        {
            _3098 = true;
            break;
        }
        if ((_2925 + 1.0) < _2923.x)
        {
            _3098 = true;
            break;
        }
        _3098 = false;
        break;
    }
    float _3303;
    if (_3098)
    {
        discard_state = true;
        _3303 = 0.0;
    }
    else
    {
        _3303 = cbInstanceData._m0[_2764].w;
    }
    SV_Target.x = _2929;
    SV_Target.y = _2930;
    SV_Target.z = _2931;
    SV_Target.w = _3303;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2764].w;
    discard_exit();
}


