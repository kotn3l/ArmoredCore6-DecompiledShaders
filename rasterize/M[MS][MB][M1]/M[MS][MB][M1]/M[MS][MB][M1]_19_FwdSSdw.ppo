#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1197;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3549 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3560 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3571 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _286) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _287) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _328 = _323.x * cbMtdParam._m0[9u].x;
    float _329 = _323.y * cbMtdParam._m0[9u].y;
    float _330 = _323.z * cbMtdParam._m0[9u].z;
    float _334 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _300.x) * _328;
    float _337 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _300.y) * _329;
    float _340 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _300.z) * _330;
    float _347 = ((_328 - _334) * (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) + _334;
    float _348 = ((_329 - _337) * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) + _337;
    float _349 = ((_330 - _340) * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) + _340;
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _286) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _287) + cbTextureTilingScale._m0[20u].w));
    vec4 _393 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _397 = _393.z;
    float _401 = (_393.x * 2.0) + (-1.0);
    float _402 = (_393.y * 2.0) + (-1.0);
    float _403 = dot(vec2(_401, _402), vec2(_401, _402));
    float _3582 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _408 = sqrt(1.0 - (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))));
    float _413 = _401 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_367.x * 2.0) + (-1.0)));
    float _414 = _402 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_367.y * 2.0) + (-1.0)));
    vec4 _431 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _433 = _431.x;
    float _434 = 1.0 - _433;
    float _443 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _446 = ((isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : min(_443, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _455 = (_446 - ((((((_433 - _434) * cbMtdParam._m0[24u].z) + _434) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _446))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3603 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _463 = (_456 * (cbMtdParam._m0[17u].x - _347)) + _347;
    float _464 = (_456 * (cbMtdParam._m0[17u].y - _348)) + _348;
    float _465 = (_456 * (cbMtdParam._m0[17u].z - _349)) + _349;
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _480 = _478.x;
    float _481 = 1.0 - _480;
    float _508 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_480 - _481) * cbMtdParam._m0[24u].w) + _481) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3614 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _509 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _517 = ((((cbMtdParam._m0[10u].x - _463) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _509) + _463;
    float _518 = ((((cbMtdParam._m0[10u].y - _464) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _509) + _464;
    float _519 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _465)) * _509) + _465;
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _534 = _532.x;
    float _536 = _534 - (_534 * _456);
    float _538 = _536 - (_536 * _509);
    float _543 = (((_367.z - _397) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _397;
    vec4 _557 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _564 = (_557.x * 2.0) + (-1.0);
    float _565 = (_557.y * 2.0) + (-1.0);
    float _566 = dot(vec2(_564, _565), vec2(_564, _565));
    float _3625 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _574 = (_456 * (_557.z - _543)) + _543;
    float _577 = ((cbMtdParam._m0[23u].y - _574) * _509) + _574;
    vec4 _599 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _605 = (_599.x * 2.0) + (-1.0);
    float _606 = (_599.y * 2.0) + (-1.0);
    float _607 = dot(vec2(_605, _606), vec2(_605, _606));
    float _3636 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _624 = (((_564 - _413) + (cbMtdParam._m0[21u].x * _413)) * _456) + _413;
    float _625 = (((_565 - _414) + (cbMtdParam._m0[21u].x * _414)) * _456) + _414;
    float _626 = (_456 * (sqrt(1.0 - (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) - _408)) + _408;
    float _637 = (((_605 - _624) + (_624 * cbMtdParam._m0[22u].z)) * _509) + _624;
    float _638 = (((_606 - _625) + (_625 * cbMtdParam._m0[22u].z)) * _509) + _625;
    float _639 = ((sqrt(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) - _626) * _509) + _626;
    float _641 = cbMtdParam._m0[22u].x + _393.w;
    float _644 = fma(_639, _235 * NORMAL.x, fma(_638, _242 * TANGENT.x, (_228 * _220) * _637));
    float _647 = fma(_639, _235 * NORMAL.y, fma(_638, _242 * TANGENT.y, (_228 * _221) * _637));
    float _650 = fma(_639, _235 * NORMAL.z, fma(_638, _242 * TANGENT.z, (_228 * _222) * _637));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _3647 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _658 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3669 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3680 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3691 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3702 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _663 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _677 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _727 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _717);
    float _728 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _717);
    float _729 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _717);
    float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
    float _734 = _727 * _733;
    float _735 = _728 * _733;
    float _736 = _729 * _733;
    float _742 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _743 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _764 = fma(_657, cbSceneParam._m0[5u].z, fma(_656, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _655));
    float _767 = fma(_657, cbSceneParam._m0[6u].z, fma(_656, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _655));
    float _770 = fma(_657, cbSceneParam._m0[7u].z, fma(_656, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _655));
    uint _784 = (_267 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _790 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) * cbInstanceData._m0[_784].x;
    float _791 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_784].y;
    float _792 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_784].z;
    float _3713 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _796 = 1.0 - _663;
    float _797 = _793 * _796;
    float _798 = _794 * _796;
    float _799 = _795 * _796;
    float _804 = (_793 + (-0.039999999105930328369140625)) * _663;
    float _805 = (_794 + (-0.039999999105930328369140625)) * _663;
    float _806 = (_795 + (-0.039999999105930328369140625)) * _663;
    float _807 = _804 + 0.039999999105930328369140625;
    float _809 = _805 + 0.039999999105930328369140625;
    float _810 = _806 + 0.039999999105930328369140625;
    vec4 _819 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _742, cbSceneParam._m0[86u].y * _743));
    float _823 = ((isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * TEXCOORD_5.w) * _819.x;
    float _824 = dot(vec3(_655, _656, _657), vec3(_734, _735, _736));
    float _827 = _824 * 2.0;
    float _831 = (_827 * _655) - _734;
    float _832 = (_827 * _656) - _735;
    float _833 = (_827 * _657) - _736;
    float _837 = abs(dot(vec3(_734, _735, _736), vec3(_655, _656, _657)));
    float _3746 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _839 = sqrt(_658);
    float _852 = exp2((_839 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_839 * 3.0));
    float _858 = (1.0 - _852) * ((_839 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _859 = _852 * _839;
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1196;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _921 = fma(_895, cbModelParam._m0[26u].z, fma(_891, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _887));
        float _925 = fma(_895, cbModelParam._m0[27u].z, fma(_891, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _887));
        float _929 = fma(_895, cbModelParam._m0[28u].z, fma(_891, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _887));
        float _954 = _887 + _655;
        float _955 = _891 + _656;
        float _956 = _895 + _657;
        float _966 = fma(_956, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954)) - _921;
        float _967 = fma(_956, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954)) - _925;
        float _968 = fma(_956, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954)) - _929;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_921 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_925 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[34u].z) + ((((((_929 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1024 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_990.x + (-0.5));
        float _1026 = _1024 * (_990.y + (-0.5));
        float _1027 = _1024 * (_990.z + (-0.5));
        float _1034 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_997.x + (-0.5));
        float _1036 = _1034 * (_997.y + (-0.5));
        float _1037 = _1034 * (_997.z + (-0.5));
        float _1044 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1004.x + (-0.5));
        float _1046 = _1044 * (_1004.y + (-0.5));
        float _1047 = _1044 * (_1004.z + (-0.5));
        float _1054 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1011.x + (-0.5));
        float _1056 = _1054 * (_1011.y + (-0.5));
        float _1057 = _1054 * (_1011.z + (-0.5));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = _1025 * 0.5;
        float _1062 = _1035 * 0.5;
        float _1063 = _1045 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1078 = (dot(vec3(_655, _656, _657), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1088 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3794 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1090 + 1.0))) + _1095) * _1058;
        float _1105 = _1026 * 0.5;
        float _1106 = _1036 * 0.5;
        float _1107 = _1046 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_655, _656, _657), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3827 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1132 + 1.0))) + _1137) * _1059;
        float _1147 = _1027 * 0.5;
        float _1148 = _1037 * 0.5;
        float _1149 = _1047 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_655, _656, _657), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3860 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1174 + 1.0))) + _1179) * _1060;
        _1196 = _1027;
        _1198 = _1026;
        _1199 = _1025;
        _1200 = _1037;
        _1201 = _1036;
        _1202 = _1035;
        _1203 = _1047;
        _1204 = _1046;
        _1205 = _1045;
        _1206 = _1060;
        _1207 = _1059;
        _1208 = _1058;
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
    }
    else
    {
        _1196 = _1197;
        _1198 = _1197;
        _1199 = _1197;
        _1200 = _1197;
        _1201 = _1197;
        _1202 = _1197;
        _1203 = _1197;
        _1204 = _1197;
        _1205 = _1197;
        _1206 = _1197;
        _1207 = _1197;
        _1208 = _1197;
        _1209 = 0.0;
        _1210 = 0.0;
        _1211 = 0.0;
    }
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1236 = fma(_895, cbModelParam._m0[30u].z, fma(_891, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _887));
        float _1240 = fma(_895, cbModelParam._m0[31u].z, fma(_891, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _887));
        float _1244 = fma(_895, cbModelParam._m0[32u].z, fma(_891, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _887));
        float _1267 = _887 + _655;
        float _1268 = _891 + _656;
        float _1269 = _895 + _657;
        float _1279 = fma(_1269, cbModelParam._m0[30u].z, fma(_1268, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267)) - _1236;
        float _1280 = fma(_1269, cbModelParam._m0[31u].z, fma(_1268, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267)) - _1240;
        float _1281 = fma(_1269, cbModelParam._m0[32u].z, fma(_1268, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267)) - _1244;
        float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
        float _1298 = ((_1285 * _1279) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1236 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1285 * _1280) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1240 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1285 * _1281) / cbModelParam._m0[35u].z) + ((((((_1244 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1335 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1302.x + (-0.5));
        float _1337 = _1335 * (_1302.y + (-0.5));
        float _1338 = _1335 * (_1302.z + (-0.5));
        float _1345 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1309.x + (-0.5));
        float _1347 = _1345 * (_1309.y + (-0.5));
        float _1348 = _1345 * (_1309.z + (-0.5));
        float _1355 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1316.x + (-0.5));
        float _1357 = _1355 * (_1316.y + (-0.5));
        float _1358 = _1355 * (_1316.z + (-0.5));
        float _1365 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1323.x + (-0.5));
        float _1367 = _1365 * (_1323.y + (-0.5));
        float _1368 = _1365 * (_1323.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_655, _656, _657), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _3923 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1399 + 1.0))) + _1404) * _1369;
        float _1414 = _1337 * 0.5;
        float _1415 = _1347 * 0.5;
        float _1416 = _1357 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_655, _656, _657), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _3956 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1441 + 1.0))) + _1446) * _1370;
        float _1456 = _1338 * 0.5;
        float _1457 = _1348 * 0.5;
        float _1458 = _1358 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_655, _656, _657), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _3989 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1483 + 1.0))) + _1488) * _1371;
        _1505 = _1338;
        _1506 = _1337;
        _1507 = _1336;
        _1508 = _1348;
        _1509 = _1347;
        _1510 = _1346;
        _1511 = _1358;
        _1512 = _1357;
        _1513 = _1356;
        _1514 = _1371;
        _1515 = _1370;
        _1516 = _1369;
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1197;
        _1506 = _1197;
        _1507 = _1197;
        _1508 = _1197;
        _1509 = _1197;
        _1510 = _1197;
        _1511 = _1197;
        _1512 = _1197;
        _1513 = _1197;
        _1514 = _1197;
        _1515 = _1197;
        _1516 = _1197;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1209)) + _1209;
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1210)) + _1210;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1211)) + _1211;
    float _1552 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1529));
    float _1573 = _831 * 0.5;
    float _1574 = _832 * 0.5;
    float _1575 = _833 * 0.5;
    float _1576 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1579 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1582 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1616;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1589 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1196, _1200, _1203, _1206));
        float _1593 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1597 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1604 = dot(vec4(cbModelParam._m0[39u]), vec4(_1573, _1574, _1575, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1604) ? 0.0 : (isnan(0.0) ? _1604 : max(0.0, _1604))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1627;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1618 = dot(vec4(cbModelParam._m0[40u]), vec4(_1573, _1574, _1575, 1.0));
        _1627 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1627 = 1.0;
    }
    float _1631 = (_1627 * cbModelParam._m0[1u].x) + (_1616 * (1.0 - cbModelParam._m0[1u].x));
    float _1641 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _658);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1641 : min(cbModelParam._m0[25u].z, _1641));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1690 = fma(_895, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _887)) + cbModelParam._m0[13u].w;
        float _1694 = fma(_895, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _887)) + cbModelParam._m0[14u].w;
        float _1698 = fma(_895, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _887)) + cbModelParam._m0[15u].w;
        float _1701 = fma(_833, cbModelParam._m0[13u].z, fma(_832, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _831));
        float _1704 = fma(_833, cbModelParam._m0[14u].z, fma(_832, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _831));
        float _1707 = fma(_833, cbModelParam._m0[15u].z, fma(_832, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _831));
        float _1735;
        if (_1701 > 0.0)
        {
            _1735 = abs((1.0 - _1690) / _1701);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1690 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1735 = frontier_phi_14_12_ladder;
        }
        float _1960;
        if (_1704 > 0.0)
        {
            _1960 = abs((1.0 - _1694) / _1704);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1694 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1960 = frontier_phi_23_19_ladder;
        }
        float _2217;
        if (_1707 > 0.0)
        {
            _2217 = abs((1.0 - _1698) / _1707);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1698 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2217 = frontier_phi_35_30_ladder;
        }
        float _2219 = isnan(_1960) ? _1735 : (isnan(_1735) ? _1960 : min(_1735, _1960));
        float _2220 = isnan(_2217) ? _2219 : (isnan(_2219) ? _2217 : min(_2219, _2217));
        float _2224 = (_2220 * _1701) + _1690;
        float _2225 = (_2220 * _1704) + _1694;
        float _2226 = (_2220 * _1707) + _1698;
        float _2227 = _2220 * 9.9999997473787516355514526367188e-05;
        float _2229 = (-1.0) - _2227;
        float _2231 = _2227 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2226 > _2231) || ((_2226 < _2229) || ((_2225 > _2231) || ((_2225 < _2229) || ((_2224 < _2229) || (_2224 > _2231))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2226, cbModelParam._m0[9u].z, fma(_2225, cbModelParam._m0[9u].y, _2224 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2226, cbModelParam._m0[10u].z, fma(_2225, cbModelParam._m0[10u].y, _2224 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2226, cbModelParam._m0[11u].z, fma(_2225, cbModelParam._m0[11u].y, _2224 * cbModelParam._m0[11u].x))), _1642);
            frontier_phi_13_35_ladder = _2354.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2354.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2354.x * cbModelParam._m0[1u].y;
        }
        _1723 = frontier_phi_13_35_ladder_2;
        _1725 = frontier_phi_13_35_ladder_1;
        _1727 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1711 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_831, _832, _833), _1642);
        _1723 = _1711.x * cbModelParam._m0[1u].y;
        _1725 = _1711.y * cbModelParam._m0[1u].y;
        _1727 = _1711.z * cbModelParam._m0[1u].y;
    }
    float _1731 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _658);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1731 : min(cbModelParam._m0[25u].w, _1731));
    float _1822;
    float _1824;
    float _1826;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1786 = fma(_895, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _887)) + cbModelParam._m0[21u].w;
        float _1790 = fma(_895, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _887)) + cbModelParam._m0[22u].w;
        float _1794 = fma(_895, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _887)) + cbModelParam._m0[23u].w;
        float _1797 = fma(_833, cbModelParam._m0[21u].z, fma(_832, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _831));
        float _1800 = fma(_833, cbModelParam._m0[22u].z, fma(_832, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _831));
        float _1803 = fma(_833, cbModelParam._m0[23u].z, fma(_832, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _831));
        float _1965;
        if (_1797 > 0.0)
        {
            _1965 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1965 = frontier_phi_25_21_ladder;
        }
        float _2244;
        if (_1800 > 0.0)
        {
            _2244 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2244 = frontier_phi_37_32_ladder;
        }
        float _2457;
        if (_1803 > 0.0)
        {
            _2457 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2457 = frontier_phi_46_43_ladder;
        }
        float _2459 = isnan(_2244) ? _1965 : (isnan(_1965) ? _2244 : min(_1965, _2244));
        float _2460 = isnan(_2457) ? _2459 : (isnan(_2459) ? _2457 : min(_2459, _2457));
        float _2464 = (_2460 * _1797) + _1786;
        float _2465 = (_2460 * _1800) + _1790;
        float _2466 = (_2460 * _1803) + _1794;
        float _2467 = _2460 * 9.9999997473787516355514526367188e-05;
        float _2468 = (-1.0) - _2467;
        float _2470 = _2467 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2466 > _2470) || ((_2466 < _2468) || ((_2465 > _2470) || ((_2465 < _2468) || ((_2464 < _2468) || (_2464 > _2470))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2665 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2466, cbModelParam._m0[17u].z, fma(_2465, cbModelParam._m0[17u].y, _2464 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2466, cbModelParam._m0[18u].z, fma(_2465, cbModelParam._m0[18u].y, _2464 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2466, cbModelParam._m0[19u].z, fma(_2465, cbModelParam._m0[19u].y, _2464 * cbModelParam._m0[19u].x))), _1732);
            frontier_phi_22_46_ladder = _2665.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2665.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2665.x * cbModelParam._m0[1u].z;
        }
        _1822 = frontier_phi_22_46_ladder_2;
        _1824 = frontier_phi_22_46_ladder_1;
        _1826 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1806 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_831, _832, _833), _1732);
        _1822 = _1806.x * cbModelParam._m0[1u].z;
        _1824 = _1806.y * cbModelParam._m0[1u].z;
        _1826 = _1806.z * cbModelParam._m0[1u].z;
    }
    float _1839 = (((_858 * _807) + _859) * _823) * ((cbModelParam._m0[1u].w * (_1822 - _1723)) + _1723);
    float _1841 = (((_858 * _809) + _859) * _823) * ((cbModelParam._m0[1u].w * (_1824 - _1725)) + _1725);
    float _1843 = (((_858 * _810) + _859) * _823) * ((cbModelParam._m0[1u].w * (_1826 - _1727)) + _1727);
    float _1846 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1841, cbSceneParam._m0[89u].y, _1839 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1841, cbSceneParam._m0[90u].y, _1839 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1841, cbSceneParam._m0[91u].y, _1839 * cbSceneParam._m0[91u].x));
    vec4 _1860 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_742, _743));
    float _1862 = _1860.w;
    float _1874 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1862);
    float _1875 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1862);
    float _1876 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1862);
    uvec4 _1880 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _1882 = _1880.x * 14u;
    uint _1883 = _1882 + 13u;
    float _1890 = _823 + (-1.0);
    float _1895 = (cbLight._m0[_1883].x * _1890) + 1.0;
    float _1896 = (cbLight._m0[_1883].y * _1890) + 1.0;
    float _1897 = (cbLight._m0[_1883].z * _1890) + 1.0;
    float _1898 = (cbLight._m0[_1883].w * _1890) + 1.0;
    uint _1899 = _1882 + 5u;
    float _1905 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
    uint _1909 = _1882 + 4u;
    float _1919 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
    uint _1923 = _1882 | 1u;
    float _1934 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_655, _656, _657));
    float _1937 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_655, _656, _657));
    float _4125 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _4136 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1942 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.3183098733425140380859375;
    float _1944 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
    float _1951 = ((cbLight._m0[_1899].x * _1905) * _1944) + (((cbLight._m0[_1909].x * _1874) * _1919) * _1942);
    float _1952 = ((_1905 * cbLight._m0[_1899].y) * _1944) + (((cbLight._m0[_1909].y * _1875) * _1919) * _1942);
    float _1953 = ((_1905 * cbLight._m0[_1899].z) * _1944) + (((cbLight._m0[_1909].z * _1876) * _1919) * _1942);
    uvec4 _1957 = floatBitsToUint(cbLight._m0[_1882 + 12u]);
    bool _1959 = _1957.x == 0u;
    float _1970;
    float _1972;
    float _1974;
    if (_1959)
    {
        _1970 = _1951;
        _1972 = _1952;
        _1974 = _1953;
    }
    else
    {
        uint _1978 = _1882 + 6u;
        float _1994 = (dot(vec3(cbLight._m0[_1882 + 2u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _1995 = _1994 * _1994;
        float _4147 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1996 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1997 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _1970 = (((cbLight._m0[_1978].x * 0.3183098733425140380859375) * _1996) * _1997) + _1951;
        _1972 = (((cbLight._m0[_1978].y * 0.3183098733425140380859375) * _1996) * _1997) + _1952;
        _1974 = (((cbLight._m0[_1978].z * 0.3183098733425140380859375) * _1996) * _1997) + _1953;
    }
    bool _1977 = _1957.y == 0u;
    float _2015;
    float _2017;
    float _2019;
    if (_1977)
    {
        _2015 = _1970;
        _2017 = _1972;
        _2019 = _1974;
    }
    else
    {
        uint _2188 = _1882 + 7u;
        float _2204 = (dot(vec3(cbLight._m0[_1882 + 3u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2205 = _2204 * _2204;
        float _4163 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2206 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2207 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2015 = (((cbLight._m0[_2188].x * 0.3183098733425140380859375) * _2206) * _2207) + _1970;
        _2017 = (((cbLight._m0[_2188].y * 0.3183098733425140380859375) * _2206) * _2207) + _1972;
        _2019 = (((cbLight._m0[_2188].z * 0.3183098733425140380859375) * _2206) * _2207) + _1974;
    }
    uint _2022 = _1882 + 8u;
    float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1882].w)) * _658) * 0.949999988079071044921875);
    float _2036 = _2035 * _2035;
    float _2037 = cbLight._m0[_1882].x + _734;
    float _2038 = cbLight._m0[_1882].y + _735;
    float _2039 = cbLight._m0[_1882].z + _736;
    float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
    float _2044 = _2043 * _2037;
    float _2045 = _2043 * _2038;
    float _2046 = _2043 * _2039;
    float _2047 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_1882].xyz));
    float _4179 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _2051 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2052 = dot(vec3(_655, _656, _657), vec3(_2044, _2045, _2046));
    float _4201 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2056 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_2044, _2045, _2046));
    float _4212 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2060 = _2036 * _2036;
    float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
    float _2072 = exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0);
    float _2073 = 0.959999978542327880859375 - _804;
    float _2075 = 0.959999978542327880859375 - _805;
    float _2076 = 0.959999978542327880859375 - _806;
    float _2083 = 1.0 - _2036;
    float _2094 = (0.5 / (((_2051 * ((_2050 * _2083) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2083) + _2036) * _2050))) * _2050;
    float _4223 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2096 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
    uint _2110 = _1882 + 9u;
    float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _658) * 0.949999988079071044921875);
    float _2122 = _2121 * _2121;
    float _2123 = cbLight._m0[_1923].x + _734;
    float _2124 = cbLight._m0[_1923].y + _735;
    float _2125 = cbLight._m0[_1923].z + _736;
    float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
    float _2130 = _2129 * _2123;
    float _2131 = _2129 * _2124;
    float _2132 = _2129 * _2125;
    float _2133 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_1923].xyz));
    float _4234 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2137 = dot(vec3(_655, _656, _657), vec3(_2130, _2131, _2132));
    float _4245 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2141 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_2130, _2131, _2132));
    float _4256 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2145 = _2122 * _2122;
    float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
    float _2156 = exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0);
    float _2163 = 1.0 - _2122;
    float _2173 = (0.5 / (((_2051 * ((_2136 * _2163) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2163) + _2122) * _2136))) * _2136;
    float _4267 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2175 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
    float _2185 = (((((_2156 * _2073) + _807) * cbLight._m0[_2110].x) * _2175) * _1905) + ((((cbLight._m0[_2022].x * _1874) * ((_2072 * _2073) + _807)) * _2096) * _1919);
    float _2186 = (((((_2156 * _2075) + _809) * cbLight._m0[_2110].y) * _2175) * _1905) + ((((cbLight._m0[_2022].y * _1875) * ((_2072 * _2075) + _809)) * _2096) * _1919);
    float _2187 = (((((_2156 * _2076) + _810) * cbLight._m0[_2110].z) * _2175) * _1905) + ((((cbLight._m0[_2022].z * _1876) * ((_2072 * _2076) + _810)) * _2096) * _1919);
    float _2249;
    float _2251;
    float _2253;
    if (_1959)
    {
        _2249 = _2185;
        _2251 = _2186;
        _2253 = _2187;
    }
    else
    {
        uint _2255 = _1882 + 2u;
        uint _2259 = _1882 + 10u;
        float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2255].w)) * _658) * 0.949999988079071044921875);
        float _2274 = _2273 * _2273;
        float _2275 = cbLight._m0[_2255].x + _734;
        float _2276 = cbLight._m0[_2255].y + _735;
        float _2277 = cbLight._m0[_2255].z + _736;
        float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
        float _2282 = _2281 * _2275;
        float _2283 = _2281 * _2276;
        float _2284 = _2281 * _2277;
        float _2285 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2255].xyz));
        float _4278 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2288 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2289 = dot(vec3(_655, _656, _657), vec3(_2282, _2283, _2284));
        float _4289 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2293 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_2282, _2283, _2284));
        float _4300 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2297 = _2274 * _2274;
        float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
        float _2308 = exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0);
        float _2315 = 1.0 - _2274;
        float _2325 = (0.5 / (((_2051 * ((_2288 * _2315) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2315) + _2274) * _2288))) * _2288;
        float _4311 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2327 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
        float _2328 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2249 = (((((_2308 * _2073) + _807) * cbLight._m0[_2259].x) * _2327) * _2328) + _2185;
        _2251 = (((((_2308 * _2075) + _809) * cbLight._m0[_2259].y) * _2327) * _2328) + _2186;
        _2253 = (((((_2308 * _2076) + _810) * cbLight._m0[_2259].z) * _2327) * _2328) + _2187;
    }
    float _2363;
    float _2365;
    float _2367;
    if (_1977)
    {
        _2363 = _2249;
        _2365 = _2251;
        _2367 = _2253;
    }
    else
    {
        uint _2374 = _1882 + 3u;
        uint _2378 = _1882 + 11u;
        float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2374].w)) * _658) * 0.949999988079071044921875);
        float _2393 = _2392 * _2392;
        float _2394 = cbLight._m0[_2374].x + _734;
        float _2395 = cbLight._m0[_2374].y + _735;
        float _2396 = cbLight._m0[_2374].z + _736;
        float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
        float _2401 = _2400 * _2394;
        float _2402 = _2400 * _2395;
        float _2403 = _2400 * _2396;
        float _2404 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2374].xyz));
        float _4327 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2407 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2408 = dot(vec3(_655, _656, _657), vec3(_2401, _2402, _2403));
        float _4338 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2412 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_2401, _2402, _2403));
        float _4349 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2416 = _2393 * _2393;
        float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
        float _2427 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
        float _2434 = 1.0 - _2393;
        float _2444 = (0.5 / (((_2051 * ((_2407 * _2434) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2434) + _2393) * _2407))) * _2407;
        float _4360 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2446 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
        float _2447 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2363 = (((((_2427 * _2073) + _807) * cbLight._m0[_2378].x) * _2446) * _2447) + _2249;
        _2365 = (((((_2427 * _2075) + _809) * cbLight._m0[_2378].y) * _2446) * _2447) + _2251;
        _2367 = (((((_2427 * _2076) + _810) * cbLight._m0[_2378].z) * _2446) * _2447) + _2253;
    }
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    float _2590;
    float _2592;
    if (_1880.y == 0u)
    {
        float _2522 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2523 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2522;
        float _2524 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2522;
        float _2525 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2522;
        uvec4 _2537 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2538 = _2537.x;
        uint _2549 = uint((float(_2537.y) * floor(float(uint(cbSceneParam._m0[85u].y * _743) / _2538))) + floor(float(uint(cbSceneParam._m0[85u].x * _742) / _2538)));
        float _2559 = (log2(_2525 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2560 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        uint _2563 = uint(isnan(14.0) ? _2560 : (isnan(_2560) ? 14.0 : min(_2560, 14.0)));
        uvec4 _2568 = texelFetch(g_lightClusterGridBuffer, int(((_2563 << 2u) + (_2549 << 6u)) >> 2u));
        uint _2569 = _2568.x;
        uint _2570 = _2537.z;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        if (((((1u << ((_2570 >> 4u) & 15u)) + 4294967295u) & _2569) == 0u) || ((_2570 & 240u) == 0u))
        {
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
        }
        else
        {
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2681;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            uint _2821 = 0u;
            uint _2830;
            bool _2831;
            for (;;)
            {
                _2830 = texelFetch(g_lightClassification, int((((_2563 << 5u) + (_2549 << 9u)) + (_2821 << 2u)) >> 2u)).x;
                _2831 = _2830 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2831)
                {
                    frontier_phi_61_pred = _2815;
                    frontier_phi_61_pred_1 = _2820;
                    frontier_phi_61_pred_2 = _2819;
                    frontier_phi_61_pred_3 = _2818;
                    frontier_phi_61_pred_4 = _2817;
                    frontier_phi_61_pred_5 = _2816;
                }
                else
                {
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    uint _2945;
                    _2939 = _2815;
                    _2940 = _2816;
                    _2941 = _2817;
                    _2942 = _2818;
                    _2943 = _2819;
                    _2944 = _2820;
                    _2945 = _2830;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    for (;;)
                    {
                        uint _2949 = uint(findLSB(_2945)) + (_2821 << 5u);
                        uint _2946 = (_2945 + 4294967295u) & _2945;
                        uint _2951 = _2949 * 48u;
                        vec4 _2965 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 3u)).x));
                        uint _2971 = (_2949 * 48u) + 4u;
                        vec4 _2984 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2971)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 3u)).x));
                        uint _2990 = (_2949 * 48u) + 8u;
                        vec3 _3001 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2990)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 2u)).x));
                        float _3005 = _2965.x - _2523;
                        float _3006 = _2965.y - _2524;
                        float _3007 = _2965.z - _2525;
                        float _3008 = dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007));
                        float _3011 = inversesqrt(_3008);
                        float _3012 = _3011 * _3005;
                        float _3013 = _3011 * _3006;
                        float _3014 = _3011 * _3007;
                        float _3015 = dot(vec3(_764, _767, _770), vec3(_3012, _3013, _3014));
                        float _3020 = 1.0 - (_3008 * _2965.w);
                        float _4386 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3021 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3022 = sqrt(_3008) * _2984.w;
                        float _3025 = 1.39999997615814208984375 / (_3022 + 1.39999997615814208984375);
                        float _3026 = _3025 * _3025;
                        float _3029 = ((1.0 - _3026) * _3015) + _3026;
                        float _3032 = _3022 * _3022;
                        float _3036 = ((isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0))) * _3021) / ((_3032 * 0.699999988079071044921875) + 1.0);
                        float _3040 = (-0.0) - _2523;
                        float _3041 = (-0.0) - _2524;
                        float _3042 = (-0.0) - _2525;
                        float _3046 = inversesqrt(dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042)));
                        float _3047 = _3046 * _3040;
                        float _3048 = _3046 * _3041;
                        float _3049 = _3046 * _3042;
                        float _3057 = exp2(log2(1.0 / ((_3032 * 3.5) + 5.0)) * 0.25);
                        float _3058 = 1.0 - _839;
                        float _3065 = sqrt(1.0 - ((1.0 - (_3058 * _3058)) * (1.0 - (_3057 * _3057))));
                        float _3066 = _3065 * _3065;
                        float _3067 = _3066 * _3066;
                        float _3068 = _3047 + _3012;
                        float _3069 = _3048 + _3013;
                        float _3070 = _3049 + _3014;
                        float _3074 = inversesqrt(dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070)));
                        float _3078 = dot(vec3(_764, _767, _770), vec3(_3047, _3048, _3049));
                        float _4402 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3081 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3082 = dot(vec3(_764, _767, _770), vec3(_3074 * _3068, _3074 * _3069, _3074 * _3070));
                        float _4413 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3085 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3089 = ((_3085 * _3085) * (_3067 + (-1.0))) + 1.0;
                        float _3090 = _3025 * _3066;
                        float _3091 = _3090 * _3090;
                        float _3094 = ((1.0 - _3091) * _3015) + _3091;
                        float _4424 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3095 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3096 = 1.0 - _3066;
                        float _3106 = (0.5 / (((_3095 * ((_3081 * _3096) + _3066)) + 9.9999999392252902907785028219223e-09) + (((_3095 * _3096) + _3066) * _3081))) * _3095;
                        float _4435 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3117 = (((_3067 * 3.1415927410125732421875) * (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) / ((_3089 * _3089) * ((_3032 * 2.1991131305694580078125) + 3.141590118408203125))) * _3021;
                        _2874 = (_3036 * _2984.x) + _2942;
                        _2875 = (_3036 * _2984.y) + _2943;
                        _2876 = (_3036 * _2984.z) + _2944;
                        _2871 = (_3117 * _3001.x) + _2939;
                        _2872 = (_3117 * _3001.y) + _2940;
                        _2873 = (_3117 * _3001.z) + _2941;
                        if (_2946 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2939 = _2871;
                            _2940 = _2872;
                            _2941 = _2873;
                            _2942 = _2874;
                            _2943 = _2875;
                            _2944 = _2876;
                            _2945 = _2946;
                        }
                    }
                    frontier_phi_61_pred = _2871;
                    frontier_phi_61_pred_1 = _2876;
                    frontier_phi_61_pred_2 = _2875;
                    frontier_phi_61_pred_3 = _2874;
                    frontier_phi_61_pred_4 = _2873;
                    frontier_phi_61_pred_5 = _2872;
                }
                _2671 = frontier_phi_61_pred;
                _2681 = frontier_phi_61_pred_1;
                _2679 = frontier_phi_61_pred_2;
                _2677 = frontier_phi_61_pred_3;
                _2675 = frontier_phi_61_pred_4;
                _2673 = frontier_phi_61_pred_5;
                uint _2822 = _2821 + 1u;
                if (_2822 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2815 = _2671;
                    _2816 = _2673;
                    _2817 = _2675;
                    _2818 = _2677;
                    _2819 = _2679;
                    _2820 = _2681;
                    _2821 = _2822;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
        }
        uvec4 _2684 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2685 = _2684.z;
        uint _2687 = (_2685 >> 8u) & 15u;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        if (((4294967295u << _2687) & _2569) == 0u)
        {
            _2783 = _2670;
            _2785 = _2672;
            _2787 = _2674;
            _2789 = _2676;
            _2791 = _2678;
            _2793 = _2680;
        }
        else
        {
            float _2808 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
            float _2809 = _2808 * _2523;
            float _2810 = _2808 * _2524;
            float _2811 = _2808 * _2525;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2687 < ((_2685 >> 12u) & 15u))
            {
                float _2784;
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2922 = _2670;
                float _2923 = _2672;
                float _2924 = _2674;
                float _2925 = _2676;
                float _2926 = _2678;
                float _2927 = _2680;
                uint _2928 = _2687;
                uint _2937;
                bool _2938;
                for (;;)
                {
                    _2937 = texelFetch(g_lightClassification, int((((_2563 << 5u) + (_2549 << 9u)) + (_2928 << 2u)) >> 2u)).x;
                    _2938 = _2937 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2938)
                    {
                        frontier_phi_67_pred = _2925;
                        frontier_phi_67_pred_1 = _2926;
                        frontier_phi_67_pred_2 = _2927;
                        frontier_phi_67_pred_3 = _2924;
                        frontier_phi_67_pred_4 = _2923;
                        frontier_phi_67_pred_5 = _2922;
                    }
                    else
                    {
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3135 = _2922;
                        float _3136 = _2923;
                        float _3137 = _2924;
                        float _3138 = _2925;
                        float _3139 = _2926;
                        float _3140 = _2927;
                        uint _3141 = _2937;
                        uint _3142;
                        vec4 _3167;
                        float _3168;
                        vec4 _3183;
                        vec3 _3195;
                        vec4 _3210;
                        vec4 _3225;
                        float _3271;
                        bool _3272;
                        for (;;)
                        {
                            uint _3152 = ((_2928 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3141));
                            _3142 = (_3141 + 4294967295u) & _3141;
                            uint _3154 = _3152 * 40u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            _3168 = _3167.w;
                            uint _3170 = (_3152 * 40u) + 4u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3185 = (_3152 * 40u) + 8u;
                            _3195 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x));
                            uint _3197 = (_3152 * 40u) + 16u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3212 = (_3152 * 40u) + 20u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3227 = (_3152 * 40u) + 24u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3246 = (_3152 * 40u) + 28u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            _3271 = fma(_2525, _3259.z, fma(_2524, _3259.y, _3259.x * _2523)) + _3259.w;
                            _3272 = !((fma(_2525, _3240.z, fma(_2524, _3240.y, _3240.x * _2523)) + _3240.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3272)
                            {
                                float _3299 = _3167.x - _2523;
                                float _3300 = _3167.y - _2524;
                                float _3301 = _3167.z - _2525;
                                float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                                float _3305 = inversesqrt(_3302);
                                float _3306 = _3305 * _3299;
                                float _3307 = _3305 * _3300;
                                float _3308 = _3305 * _3301;
                                float _3312 = 1.0 - (_3302 / (_3168 * _3168));
                                float _4446 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3317 = sqrt(_3302) * _3183.w;
                                float _3319 = 1.39999997615814208984375 / (_3317 + 1.39999997615814208984375);
                                float _3320 = _3319 * _3319;
                                float _3323 = ((1.0 - _3320) * dot(vec3(_3306, _3307, _3308), vec3(_764, _767, _770))) + _3320;
                                float _3326 = _3317 * _3317;
                                float _3330 = (fma(_2525, _3210.z, fma(_2524, _3210.y, _3210.x * _2523)) + _3210.w) / _3271;
                                float _3331 = (fma(_2525, _3225.z, fma(_2524, _3225.y, _3225.x * _2523)) + _3225.w) / _3271;
                                float _3335 = 1.0 - dot(vec2(_3330, _3331), vec2(_3330, _3331));
                                float _4462 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3337 = _3336 * (((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3313) / ((_3326 * 0.699999988079071044921875) + 1.0));
                                float _3349 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                                float _3350 = 1.0 - _839;
                                float _3357 = sqrt(1.0 - ((1.0 - (_3350 * _3350)) * (1.0 - (_3349 * _3349))));
                                float _3358 = _3357 * _3357;
                                float _3359 = _3358 * _3358;
                                float _3360 = _3306 - _2809;
                                float _3361 = _3307 - _2810;
                                float _3362 = _3308 - _2811;
                                float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                                float _3370 = dot(vec3(_764, _767, _770), vec3((-0.0) - _2809, (-0.0) - _2810, (-0.0) - _2811));
                                float _4473 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3374 = dot(vec3(_764, _767, _770), vec3(_3366 * _3360, _3366 * _3361, _3366 * _3362));
                                float _4484 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3377 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3381 = ((_3377 * _3377) * (_3359 + (-1.0))) + 1.0;
                                float _3382 = _3319 * _3358;
                                float _3383 = _3382 * _3382;
                                float _3389 = ((1.0 - _3383) * dot(vec3(_764, _767, _770), vec3(_3306, _3307, _3308))) + _3383;
                                float _4495 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3391 = 1.0 - _3358;
                                float _3401 = (0.5 / (((_3390 * ((_3373 * _3391) + _3358)) + 9.9999999392252902907785028219223e-09) + (((_3390 * _3391) + _3358) * _3373))) * _3390;
                                float _4506 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3411 = (_3336 * _3313) * (((_3359 * 3.1415927410125732421875) * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) / ((_3381 * _3381) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3411 * _3195.x;
                                frontier_phi_73_pred_1 = _3411 * _3195.y;
                                frontier_phi_73_pred_2 = _3337 * _3183.z;
                                frontier_phi_73_pred_3 = _3337 * _3183.y;
                                frontier_phi_73_pred_4 = _3337 * _3183.x;
                                frontier_phi_73_pred_5 = _3411 * _3195.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3415 = frontier_phi_73_pred;
                            _3416 = frontier_phi_73_pred_1;
                            _3420 = frontier_phi_73_pred_2;
                            _3419 = frontier_phi_73_pred_3;
                            _3418 = frontier_phi_73_pred_4;
                            _3417 = frontier_phi_73_pred_5;
                            _3125 = _3418 + _3138;
                            _3126 = _3419 + _3139;
                            _3127 = _3420 + _3140;
                            _3122 = _3415 + _3135;
                            _3123 = _3416 + _3136;
                            _3124 = _3417 + _3137;
                            if (_3142 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3142;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3125;
                        frontier_phi_67_pred_1 = _3126;
                        frontier_phi_67_pred_2 = _3127;
                        frontier_phi_67_pred_3 = _3124;
                        frontier_phi_67_pred_4 = _3123;
                        frontier_phi_67_pred_5 = _3122;
                    }
                    _2790 = frontier_phi_67_pred;
                    _2792 = frontier_phi_67_pred_1;
                    _2794 = frontier_phi_67_pred_2;
                    _2788 = frontier_phi_67_pred_3;
                    _2786 = frontier_phi_67_pred_4;
                    _2784 = frontier_phi_67_pred_5;
                    uint _2929 = _2928 + 1u;
                    if (_2929 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2922 = _2784;
                        _2923 = _2786;
                        _2924 = _2788;
                        _2925 = _2790;
                        _2926 = _2792;
                        _2927 = _2794;
                        _2928 = _2929;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2792;
                frontier_phi_55_56_ladder_1 = _2794;
                frontier_phi_55_56_ladder_2 = _2790;
                frontier_phi_55_56_ladder_3 = _2788;
                frontier_phi_55_56_ladder_4 = _2786;
                frontier_phi_55_56_ladder_5 = _2784;
            }
            else
            {
                frontier_phi_55_56_ladder = _2678;
                frontier_phi_55_56_ladder_1 = _2680;
                frontier_phi_55_56_ladder_2 = _2676;
                frontier_phi_55_56_ladder_3 = _2674;
                frontier_phi_55_56_ladder_4 = _2672;
                frontier_phi_55_56_ladder_5 = _2670;
            }
            _2783 = frontier_phi_55_56_ladder_5;
            _2785 = frontier_phi_55_56_ladder_4;
            _2787 = frontier_phi_55_56_ladder_3;
            _2789 = frontier_phi_55_56_ladder_2;
            _2791 = frontier_phi_55_56_ladder;
            _2793 = frontier_phi_55_56_ladder_1;
        }
        float _2798 = isnan(1.0) ? _823 : (isnan(_823) ? 1.0 : min(_823, 1.0));
        _2582 = (_2798 * _2789) + _2015;
        _2584 = (_2798 * _2791) + _2017;
        _2586 = (_2798 * _2793) + _2019;
        _2588 = ((_2783 * _807) * _2798) + _2363;
        _2590 = ((_2785 * _809) * _2798) + _2365;
        _2592 = ((_2787 * _810) * _2798) + _2367;
    }
    else
    {
        _2582 = _2015;
        _2584 = _2017;
        _2586 = _2019;
        _2588 = _2363;
        _2590 = _2365;
        _2592 = _2367;
    }
    float _4522 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4533 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4544 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    uint _2612 = _267 + 6u;
    float _2620 = _742 / cbSceneParam._m0[86u].x;
    float _2621 = _743 / cbSceneParam._m0[86u].y;
    vec4 _2635 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2620, _2621, (log2((isnan(cbSceneParam._m0[77u].w) ? _677 : (isnan(_677) ? cbSceneParam._m0[77u].w : min(_677, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2637 = _2635.x;
    float _2638 = _2635.y;
    float _2639 = _2635.z;
    float _2640 = _2635.w;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    if (_677 > cbSceneParam._m0[78u].w)
    {
        float _2695 = isnan(_677) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _677 : min(cbSceneParam._m0[80u].w, _677));
        float _2696 = _2695 / _677;
        float _2707 = _2696 * _727;
        float _2708 = _728 * _2696;
        float _2709 = (-0.0) - _2708;
        float _2711 = _2696 * _729;
        float _2713 = (cbSceneParam._m0[77u].w * _2709) / _2695;
        float _2714 = _2713 + cbSceneParam._m0[79u].w;
        float _2715 = cbSceneParam._m0[79u].w - _2708;
        float _2721 = sqrt(((_2707 * _2707) + (_2708 * _2708)) + (_2711 * _2711));
        float _2724 = (1.0 - (cbSceneParam._m0[77u].w / _2695)) * _2721;
        float _2729 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2731 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2884;
        if (abs((_2709 - _2713) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2884 = ((((_2714 > 0.0) ? exp2(_2729 * _2714) : (2.0 - exp2(_2731 * _2714))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2724;
        }
        else
        {
            float _2844 = 1.0 / cbSceneParam._m0[80u].x;
            float _2845 = isnan(_2715) ? _2714 : (isnan(_2714) ? _2715 : max(_2714, _2715));
            float _2846 = isnan(_2715) ? _2714 : (isnan(_2714) ? _2715 : min(_2714, _2715));
            float _2855 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : min(_2845, 0.0));
            float _2856 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : min(_2846, 0.0));
            _2884 = ((abs(_2721 / _2709) * cbSceneParam._m0[80u].y) * ((((_2855 - _2856) * 2.0) - ((exp2(_2729 * (isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0)))) - exp2(_2729 * (isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0))))) * _2844)) - ((exp2(_2731 * _2855) - exp2(_2731 * _2856)) * _2844))) + (_2724 * cbSceneParam._m0[80u].z);
        }
        vec4 _2886 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2620, _2621, 1.0), 0.0);
        float _2895 = exp2((_2884 * (-1.44269502162933349609375)) * (1.0 - _2886.w));
        float _2896 = log2(_2895);
        float _2912 = log2(_2640);
        _2733 = (exp2(_2912 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].x)) * _2886.x) / cbSceneParam._m0[78u].x)) + _2637;
        _2735 = (exp2(_2912 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].y)) * _2886.y) / cbSceneParam._m0[78u].y)) + _2638;
        _2737 = (exp2(_2912 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].z)) * _2886.z) / cbSceneParam._m0[78u].z)) + _2639;
        _2739 = _2895 * _2640;
    }
    else
    {
        _2733 = _2637;
        _2735 = _2638;
        _2737 = _2639;
        _2739 = _2640;
    }
    float _2751 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2752 = _2751 == 3.0;
    float _2753 = log2(_2739);
    float _2760 = exp2(_2753 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2582 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _823))) + ((_2588 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _2761 = exp2(_2753 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2584 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _823))) + ((_2590 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _2762 = exp2(_2753 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2586 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _823))) + ((_2592 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _2771 = (_2751 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2771 * (_2752 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2733)));
    SV_Target.y = _2771 * (_2752 ? _2761 : (_2761 + (cbSceneParam._m0[72u].w * _2735)));
    SV_Target.z = _2771 * (_2752 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2737)));
    SV_Target.w = cbInstanceData._m0[_2612].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2612].w;
}


