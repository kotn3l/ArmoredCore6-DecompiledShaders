#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1239;
float _3902;
float _3903;
float _3904;
float _3905;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _288.x * cbMtdParam._m0[9u].x;
    float _295 = _288.y * cbMtdParam._m0[9u].y;
    float _296 = _288.z * cbMtdParam._m0[9u].z;
    vec4 _315 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _335 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _365 = _361.z;
    float _369 = (_361.x * 2.0) + (-1.0);
    float _370 = (_361.y * 2.0) + (-1.0);
    float _371 = dot(vec2(_369, _370), vec2(_369, _370));
    float _3914 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _377 = sqrt(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))));
    float _382 = _369 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_335.x * 2.0) + (-1.0)));
    float _383 = _370 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_335.y * 2.0) + (-1.0)));
    float _386 = fma(_377, _237, fma(_383, _244, _382 * _230));
    float _389 = fma(_377, _238, fma(_383, _245, _382 * _231));
    float _392 = fma(_377, _239, fma(_383, _246, _382 * _232));
    float _396 = inversesqrt(dot(vec3(_386, _389, _392), vec3(_386, _389, _392)));
    vec4 _432 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _434 = _432.x;
    float _435 = 1.0 - _434;
    float _444 = (cbMtdParam._m0[19u].x + dot(vec4(_396 * _386, _396 * _389, _396 * _392, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_434 - _435) * cbMtdParam._m0[24u].z) + _435) * cbMtdParam._m0[21u].z);
    float _3925 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _447 = (-0.0) - cbMtdParam._m0[24u].x;
    float _449 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _449 : (isnan(_449) ? 1.0 : min(_449, 1.0));
    float _457 = _445 - ((_445 * TEXCOORD_8.x) * _450);
    float _458 = _445 - ((_445 * TEXCOORD_8.y) * _450);
    float _459 = _445 - ((_445 * TEXCOORD_8.z) * _450);
    float _466 = (_457 * ((_315.x * cbMtdParam._m0[18u].x) - _294)) + _294;
    float _467 = (_458 * ((_315.y * cbMtdParam._m0[18u].y) - _295)) + _295;
    float _468 = (_459 * ((_315.z * cbMtdParam._m0[18u].z) - _296)) + _296;
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _482 = _480.x;
    float _483 = 1.0 - _482;
    float _513 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_482 - _483) * cbMtdParam._m0[24u].w) + _483) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3946 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _522 = ((((cbMtdParam._m0[10u].x - _466) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _514) + _466;
    float _523 = ((((cbMtdParam._m0[10u].y - _467) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _514) + _467;
    float _524 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _468)) * _514) + _468;
    vec4 _537 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _539 = _537.x;
    float _541 = _539 - (_539 * _457);
    float _543 = _541 - (_541 * _514);
    float _548 = (((_335.z - _365) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _365;
    vec4 _562 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _569 = (_562.x * 2.0) + (-1.0);
    float _570 = (_562.y * 2.0) + (-1.0);
    float _571 = dot(vec2(_569, _570), vec2(_569, _570));
    float _3957 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _579 = ((_562.z - _548) * _457) + _548;
    float _582 = ((cbMtdParam._m0[23u].y - _579) * _514) + _579;
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _607 = (_601.x * 2.0) + (-1.0);
    float _608 = (_601.y * 2.0) + (-1.0);
    float _609 = dot(vec2(_607, _608), vec2(_607, _608));
    float _3968 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _624 = ((sqrt(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) - _377) * _459) + _377;
    float _627 = (((_569 - _382) * _457) + _382) + (cbMtdParam._m0[21u].x * _382);
    float _628 = (((_570 - _383) * _458) + _383) + (cbMtdParam._m0[21u].x * _383);
    float _639 = (((_607 - _627) + (_627 * cbMtdParam._m0[22u].z)) * _514) + _627;
    float _640 = (((_608 - _628) + (_628 * cbMtdParam._m0[22u].z)) * _514) + _628;
    float _641 = (_514 * (sqrt(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) - _624)) + _624;
    float _643 = cbMtdParam._m0[22u].x + _361.w;
    float _646 = fma(_641, _237, fma(_640, _244, _639 * _230));
    float _649 = fma(_641, _238, fma(_640, _245, _639 * _231));
    float _652 = fma(_641, _239, fma(_640, _246, _639 * _232));
    float _656 = inversesqrt(dot(vec3(_646, _649, _652), vec3(_646, _649, _652)));
    float _657 = _656 * _646;
    float _658 = _656 * _649;
    float _659 = _656 * _652;
    float _3979 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _660 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4001 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _4012 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4023 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _4034 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _665 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _679 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _729 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _719);
    float _730 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _719);
    float _731 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _719);
    float _735 = inversesqrt(dot(vec3(_729, _730, _731), vec3(_729, _730, _731)));
    float _736 = _729 * _735;
    float _737 = _730 * _735;
    float _738 = _731 * _735;
    vec4 _743 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _745 = _743.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _920 = sqrt(((_729 * _729) + (_730 * _730)) + (_731 * _731));
        float _926 = (cbMatDynParam._m0[5u].x * _920) + cbMatDynParam._m0[5u].y;
        float _4045 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _931 = (cbMatDynParam._m0[5u].z * _920) + cbMatDynParam._m0[5u].w;
        float _4056 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) - _927)) + _927) < ((_745 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _757 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _758 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _778 = fma(_659, cbSceneParam._m0[5u].z, fma(_658, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _657));
    float _781 = fma(_659, cbSceneParam._m0[6u].z, fma(_658, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _657));
    float _784 = fma(_659, cbSceneParam._m0[7u].z, fma(_658, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _657));
    uint _797 = _249 + 9u;
    uint _798 = _797 + uint(cbMatDynParam._m0[0u].w);
    float _804 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_798].x;
    float _805 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_798].y;
    float _806 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_798].z;
    float _4067 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _810 = 1.0 - _665;
    float _811 = _807 * _810;
    float _812 = _808 * _810;
    float _813 = _809 * _810;
    float _818 = (_807 + (-0.039999999105930328369140625)) * _665;
    float _819 = (_808 + (-0.039999999105930328369140625)) * _665;
    float _820 = (_809 + (-0.039999999105930328369140625)) * _665;
    float _821 = _818 + 0.039999999105930328369140625;
    float _823 = _819 + 0.039999999105930328369140625;
    float _824 = _820 + 0.039999999105930328369140625;
    vec4 _833 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _757, cbSceneParam._m0[86u].y * _758));
    float _837 = ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * TEXCOORD_5.w) * _833.x;
    float _838 = dot(vec3(_657, _658, _659), vec3(_736, _737, _738));
    float _841 = _838 * 2.0;
    float _845 = (_841 * _657) - _736;
    float _846 = (_841 * _658) - _737;
    float _847 = (_841 * _659) - _738;
    float _851 = abs(dot(vec3(_736, _737, _738), vec3(_657, _658, _659)));
    float _4100 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _853 = sqrt(_660);
    float _866 = exp2((_853 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_853 * 3.0));
    float _872 = (1.0 - _866) * ((_853 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _873 = _866 * _853;
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1238;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _963 = fma(_909, cbModelParam._m0[26u].z, fma(_905, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _901));
        float _967 = fma(_909, cbModelParam._m0[27u].z, fma(_905, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _901));
        float _971 = fma(_909, cbModelParam._m0[28u].z, fma(_905, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _901));
        float _996 = _901 + _657;
        float _997 = _905 + _658;
        float _998 = _909 + _659;
        float _1008 = fma(_998, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996)) - _963;
        float _1009 = fma(_998, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996)) - _967;
        float _1010 = fma(_998, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996)) - _971;
        float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
        float _1027 = ((_1014 * _1008) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_963 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1014 * _1009) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_967 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1014 * _1010) / cbModelParam._m0[34u].z) + ((((((_971 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        float _1066 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1032.x + (-0.5));
        float _1068 = _1066 * (_1032.y + (-0.5));
        float _1069 = _1066 * (_1032.z + (-0.5));
        float _1076 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1039.x + (-0.5));
        float _1078 = _1076 * (_1039.y + (-0.5));
        float _1079 = _1076 * (_1039.z + (-0.5));
        float _1086 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1046.x + (-0.5));
        float _1088 = _1086 * (_1046.y + (-0.5));
        float _1089 = _1086 * (_1046.z + (-0.5));
        float _1096 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1053.x + (-0.5));
        float _1098 = _1096 * (_1053.y + (-0.5));
        float _1099 = _1096 * (_1053.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1120 = (dot(vec3(_657, _658, _659), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1130 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _4148 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1132 + 1.0))) + _1137) * _1100;
        float _1147 = _1068 * 0.5;
        float _1148 = _1078 * 0.5;
        float _1149 = _1088 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_657, _658, _659), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _4181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1174 + 1.0))) + _1179) * _1101;
        float _1189 = _1069 * 0.5;
        float _1190 = _1079 * 0.5;
        float _1191 = _1089 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_657, _658, _659), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _4214 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1216 + 1.0))) + _1221) * _1102;
        _1238 = _1069;
        _1240 = _1068;
        _1241 = _1067;
        _1242 = _1079;
        _1243 = _1078;
        _1244 = _1077;
        _1245 = _1089;
        _1246 = _1088;
        _1247 = _1087;
        _1248 = _1102;
        _1249 = _1101;
        _1250 = _1100;
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _1239;
        _1240 = _1239;
        _1241 = _1239;
        _1242 = _1239;
        _1243 = _1239;
        _1244 = _1239;
        _1245 = _1239;
        _1246 = _1239;
        _1247 = _1239;
        _1248 = _1239;
        _1249 = _1239;
        _1250 = _1239;
        _1251 = 0.0;
        _1252 = 0.0;
        _1253 = 0.0;
    }
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1281 = fma(_909, cbModelParam._m0[30u].z, fma(_905, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _901));
        float _1285 = fma(_909, cbModelParam._m0[31u].z, fma(_905, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _901));
        float _1289 = fma(_909, cbModelParam._m0[32u].z, fma(_905, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _901));
        float _1312 = _901 + _657;
        float _1313 = _905 + _658;
        float _1314 = _909 + _659;
        float _1324 = fma(_1314, cbModelParam._m0[30u].z, fma(_1313, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1312)) - _1281;
        float _1325 = fma(_1314, cbModelParam._m0[31u].z, fma(_1313, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1312)) - _1285;
        float _1326 = fma(_1314, cbModelParam._m0[32u].z, fma(_1313, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1312)) - _1289;
        float _1330 = inversesqrt(dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326)));
        float _1343 = ((_1330 * _1324) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1281 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1330 * _1325) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1285 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1330 * _1326) / cbModelParam._m0[35u].z) + ((((((_1289 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        float _1380 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1347.x + (-0.5));
        float _1382 = _1380 * (_1347.y + (-0.5));
        float _1383 = _1380 * (_1347.z + (-0.5));
        float _1390 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1354.x + (-0.5));
        float _1392 = _1390 * (_1354.y + (-0.5));
        float _1393 = _1390 * (_1354.z + (-0.5));
        float _1400 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1361.x + (-0.5));
        float _1402 = _1400 * (_1361.y + (-0.5));
        float _1403 = _1400 * (_1361.z + (-0.5));
        float _1410 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1368.x + (-0.5));
        float _1412 = _1410 * (_1368.y + (-0.5));
        float _1413 = _1410 * (_1368.z + (-0.5));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = _1381 * 0.5;
        float _1418 = _1391 * 0.5;
        float _1419 = _1401 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_657, _658, _659), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4277 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1444 + 1.0))) + _1449) * _1414;
        float _1459 = _1382 * 0.5;
        float _1460 = _1392 * 0.5;
        float _1461 = _1402 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_657, _658, _659), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4310 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1486 + 1.0))) + _1491) * _1415;
        float _1501 = _1383 * 0.5;
        float _1502 = _1393 * 0.5;
        float _1503 = _1403 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_657, _658, _659), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4343 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1528 + 1.0))) + _1533) * _1416;
        _1550 = _1383;
        _1551 = _1382;
        _1552 = _1381;
        _1553 = _1393;
        _1554 = _1392;
        _1555 = _1391;
        _1556 = _1403;
        _1557 = _1402;
        _1558 = _1401;
        _1559 = _1416;
        _1560 = _1415;
        _1561 = _1414;
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
    }
    else
    {
        _1550 = _1239;
        _1551 = _1239;
        _1552 = _1239;
        _1553 = _1239;
        _1554 = _1239;
        _1555 = _1239;
        _1556 = _1239;
        _1557 = _1239;
        _1558 = _1239;
        _1559 = _1239;
        _1560 = _1239;
        _1561 = _1239;
        _1562 = 0.0;
        _1563 = 0.0;
        _1564 = 0.0;
    }
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1251)) + _1251;
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1252)) + _1252;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1253)) + _1253;
    float _1597 = fma(_1576, cbSceneParam._m0[89u].z, fma(_1575, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1600 = fma(_1576, cbSceneParam._m0[90u].z, fma(_1575, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1603 = fma(_1576, cbSceneParam._m0[91u].z, fma(_1575, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1574));
    float _1618 = _845 * 0.5;
    float _1619 = _846 * 0.5;
    float _1620 = _847 * 0.5;
    float _1621 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1624 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1627 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1661;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1634 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1238, _1242, _1245, _1248));
        float _1638 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1642 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1649 = dot(vec4(cbModelParam._m0[39u]), vec4(_1618, _1619, _1620, 1.0));
        _1661 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1649) ? 0.0 : (isnan(0.0) ? _1649 : max(0.0, _1649))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1661 = 1.0;
    }
    float _1672;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1663 = dot(vec4(cbModelParam._m0[40u]), vec4(_1618, _1619, _1620, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1676 = (_1672 * cbModelParam._m0[1u].x) + (_1661 * (1.0 - cbModelParam._m0[1u].x));
    float _1686 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _660);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1686 : min(cbModelParam._m0[25u].z, _1686));
    float _1767;
    float _1769;
    float _1771;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1734 = fma(_909, cbModelParam._m0[13u].z, fma(_905, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901)) + cbModelParam._m0[13u].w;
        float _1738 = fma(_909, cbModelParam._m0[14u].z, fma(_905, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901)) + cbModelParam._m0[14u].w;
        float _1742 = fma(_909, cbModelParam._m0[15u].z, fma(_905, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901)) + cbModelParam._m0[15u].w;
        float _1745 = fma(_847, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845));
        float _1748 = fma(_847, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845));
        float _1751 = fma(_847, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845));
        float _1779;
        if (_1745 > 0.0)
        {
            _1779 = abs((1.0 - _1734) / _1745);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1734 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1779 = frontier_phi_17_15_ladder;
        }
        float _1950;
        if (_1748 > 0.0)
        {
            _1950 = abs((1.0 - _1738) / _1748);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1738 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1950 = frontier_phi_26_22_ladder;
        }
        float _2246;
        if (_1751 > 0.0)
        {
            _2246 = abs((1.0 - _1742) / _1751);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1742 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2246 = frontier_phi_38_33_ladder;
        }
        float _2248 = isnan(_1950) ? _1779 : (isnan(_1779) ? _1950 : min(_1779, _1950));
        float _2249 = isnan(_2246) ? _2248 : (isnan(_2248) ? _2246 : min(_2248, _2246));
        float _2253 = (_2249 * _1745) + _1734;
        float _2254 = (_2249 * _1748) + _1738;
        float _2255 = (_2249 * _1751) + _1742;
        float _2256 = _2249 * 9.9999997473787516355514526367188e-05;
        float _2258 = (-1.0) - _2256;
        float _2260 = _2256 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2255 > _2260) || ((_2255 < _2258) || ((_2254 > _2260) || ((_2254 < _2258) || ((_2253 < _2258) || (_2253 > _2260))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2255, cbModelParam._m0[9u].z, fma(_2254, cbModelParam._m0[9u].y, _2253 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2255, cbModelParam._m0[10u].z, fma(_2254, cbModelParam._m0[10u].y, _2253 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2255, cbModelParam._m0[11u].z, fma(_2254, cbModelParam._m0[11u].y, _2253 * cbModelParam._m0[11u].x))), _1687);
            frontier_phi_16_38_ladder = _2400.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2400.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2400.x * cbModelParam._m0[1u].y;
        }
        _1767 = frontier_phi_16_38_ladder_2;
        _1769 = frontier_phi_16_38_ladder_1;
        _1771 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_845, _846, _847), _1687);
        _1767 = _1755.x * cbModelParam._m0[1u].y;
        _1769 = _1755.y * cbModelParam._m0[1u].y;
        _1771 = _1755.z * cbModelParam._m0[1u].y;
    }
    float _1775 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _660);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1775 : min(cbModelParam._m0[25u].w, _1775));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1829 = fma(_909, cbModelParam._m0[21u].z, fma(_905, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901)) + cbModelParam._m0[21u].w;
        float _1833 = fma(_909, cbModelParam._m0[22u].z, fma(_905, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901)) + cbModelParam._m0[22u].w;
        float _1837 = fma(_909, cbModelParam._m0[23u].z, fma(_905, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901)) + cbModelParam._m0[23u].w;
        float _1840 = fma(_847, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845));
        float _1843 = fma(_847, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845));
        float _1846 = fma(_847, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845));
        float _1955;
        if (_1840 > 0.0)
        {
            _1955 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1955 = frontier_phi_28_24_ladder;
        }
        float _2273;
        if (_1843 > 0.0)
        {
            _2273 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2273 = frontier_phi_40_35_ladder;
        }
        float _2611;
        if (_1846 > 0.0)
        {
            _2611 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2611 = frontier_phi_50_47_ladder;
        }
        float _2613 = isnan(_2273) ? _1955 : (isnan(_1955) ? _2273 : min(_1955, _2273));
        float _2614 = isnan(_2611) ? _2613 : (isnan(_2613) ? _2611 : min(_2613, _2611));
        float _2618 = (_2614 * _1840) + _1829;
        float _2619 = (_2614 * _1843) + _1833;
        float _2620 = (_2614 * _1846) + _1837;
        float _2621 = _2614 * 9.9999997473787516355514526367188e-05;
        float _2622 = (-1.0) - _2621;
        float _2624 = _2621 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2620 > _2624) || ((_2620 < _2622) || ((_2619 > _2624) || ((_2619 < _2622) || ((_2618 < _2622) || (_2618 > _2624))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2742 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2620, cbModelParam._m0[17u].z, fma(_2619, cbModelParam._m0[17u].y, _2618 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2620, cbModelParam._m0[18u].z, fma(_2619, cbModelParam._m0[18u].y, _2618 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2620, cbModelParam._m0[19u].z, fma(_2619, cbModelParam._m0[19u].y, _2618 * cbModelParam._m0[19u].x))), _1776);
            frontier_phi_25_50_ladder = _2742.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2742.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2742.x * cbModelParam._m0[1u].z;
        }
        _1865 = frontier_phi_25_50_ladder_2;
        _1867 = frontier_phi_25_50_ladder_1;
        _1869 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_845, _846, _847), _1776);
        _1865 = _1849.x * cbModelParam._m0[1u].z;
        _1867 = _1849.y * cbModelParam._m0[1u].z;
        _1869 = _1849.z * cbModelParam._m0[1u].z;
    }
    float _1882 = (((_872 * _821) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1865 - _1767)) + _1767);
    float _1884 = (((_872 * _823) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1867 - _1769)) + _1769);
    float _1886 = (((_872 * _824) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1869 - _1771)) + _1771);
    float _1889 = fma(_1886, cbSceneParam._m0[89u].z, fma(_1884, cbSceneParam._m0[89u].y, _1882 * cbSceneParam._m0[89u].x));
    float _1892 = fma(_1886, cbSceneParam._m0[90u].z, fma(_1884, cbSceneParam._m0[90u].y, _1882 * cbSceneParam._m0[90u].x));
    float _1895 = fma(_1886, cbSceneParam._m0[91u].z, fma(_1884, cbSceneParam._m0[91u].y, _1882 * cbSceneParam._m0[91u].x));
    float _1929 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1933 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1937 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1941 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1942 = _1929 / _1941;
    float _1943 = _1933 / _1941;
    float _1944 = _1937 / _1941;
    float _2091;
    float _2092;
    float _2093;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1971 = ((uint(_1944 > cbSceneParam._m0[59u].y) + uint(_1944 > cbSceneParam._m0[59u].x)) + uint(_1944 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1972 = _1971 + 43u;
        uint _1980 = _1971 + 44u;
        uint _1988 = _1971 + 45u;
        uint _1996 = _1971 + 46u;
        float _2007 = fma(_1941, cbSceneParam._m0[_1972].w, fma(_1937, cbSceneParam._m0[_1972].z, fma(_1933, cbSceneParam._m0[_1972].y, _1929 * cbSceneParam._m0[_1972].x)));
        float _2011 = fma(_1941, cbSceneParam._m0[_1980].w, fma(_1937, cbSceneParam._m0[_1980].z, fma(_1933, cbSceneParam._m0[_1980].y, _1929 * cbSceneParam._m0[_1980].x)));
        float _2019 = fma(_1941, cbSceneParam._m0[_1996].w, fma(_1937, cbSceneParam._m0[_1996].z, fma(_1933, cbSceneParam._m0[_1996].y, _1929 * cbSceneParam._m0[_1996].x)));
        float _2024 = cbSceneParam._m0[33u].z * _2019;
        float _2026 = cbSceneParam._m0[33u].w * _2019;
        float _2029 = fma(_1941, cbSceneParam._m0[_1988].w, fma(_1937, cbSceneParam._m0[_1988].z, fma(_1933, cbSceneParam._m0[_1988].y, _1929 * cbSceneParam._m0[_1988].x))) / _2019;
        float _2077 = (cbSceneParam._m0[33u].x - sqrt(((_1943 * _1943) + (_1942 * _1942)) + (_1944 * _1944))) * cbSceneParam._m0[33u].y;
        float _4469 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2084 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2024 + _2007) / _2019, (_2026 + _2011) / _2019), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2026 + _2007) / _2019, (_2011 - _2024) / _2019), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2007 - _2024) / _2019, (_2011 - _2026) / _2019), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2007 - _2026) / _2019, (_2024 + _2011) / _2019), _2029), 0.0)).x), vec4(0.25)));
        _2091 = 1.0 - (_2084 * cbSceneParam._m0[34u].x);
        _2092 = 1.0 - (_2084 * cbSceneParam._m0[34u].y);
        _2093 = 1.0 - (_2084 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2091 = 1.0;
        _2092 = 1.0;
        _2093 = 1.0;
    }
    float _2157;
    float _2159;
    float _2161;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2145 = fma(_1941, cbSceneParam._m0[63u].w, fma(_1937, cbSceneParam._m0[63u].z, fma(_1933, cbSceneParam._m0[63u].y, _1929 * cbSceneParam._m0[63u].x)));
        float _2146 = fma(_1941, cbSceneParam._m0[60u].w, fma(_1937, cbSceneParam._m0[60u].z, fma(_1933, cbSceneParam._m0[60u].y, _1929 * cbSceneParam._m0[60u].x))) / _2145;
        float _2147 = fma(_1941, cbSceneParam._m0[61u].w, fma(_1937, cbSceneParam._m0[61u].z, fma(_1933, cbSceneParam._m0[61u].y, _1929 * cbSceneParam._m0[61u].x))) / _2145;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2146 >= cbSceneParam._m0[64u].x) && (_2147 >= cbSceneParam._m0[64u].y)) && (_2146 <= cbSceneParam._m0[64u].z)) && (_2147 <= cbSceneParam._m0[64u].w))
        {
            float _2286 = fma(_1941, cbSceneParam._m0[62u].w, fma(_1937, cbSceneParam._m0[62u].z, fma(_1933, cbSceneParam._m0[62u].y, _1929 * cbSceneParam._m0[62u].x))) / _2145;
            float _2290 = isnan(cbSceneParam._m0[41u].w) ? _2286 : (isnan(_2286) ? cbSceneParam._m0[41u].w : max(_2286, cbSceneParam._m0[41u].w));
            float _2333 = (cbSceneParam._m0[33u].x - sqrt(((_1943 * _1943) + (_1942 * _1942)) + (_1944 * _1944))) * cbSceneParam._m0[33u].y;
            float _4485 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
            float _2340 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2146, cbSceneParam._m0[33u].w + _2147), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2146, _2147 - cbSceneParam._m0[33u].z), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2146 - cbSceneParam._m0[33u].z, _2147 - cbSceneParam._m0[33u].w), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2146 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2147), _2290), 0.0)).x), vec4(0.25)));
            float _2344 = 1.0 - (_2340 * cbSceneParam._m0[34u].x);
            float _2345 = 1.0 - (_2340 * cbSceneParam._m0[34u].y);
            float _2346 = 1.0 - (_2340 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2346) ? _2093 : (isnan(_2093) ? _2346 : min(_2093, _2346));
            frontier_phi_37_36_ladder_1 = isnan(_2345) ? _2092 : (isnan(_2092) ? _2345 : min(_2092, _2345));
            frontier_phi_37_36_ladder_2 = isnan(_2344) ? _2091 : (isnan(_2091) ? _2344 : min(_2091, _2344));
        }
        else
        {
            frontier_phi_37_36_ladder = _2093;
            frontier_phi_37_36_ladder_1 = _2092;
            frontier_phi_37_36_ladder_2 = _2091;
        }
        _2157 = frontier_phi_37_36_ladder_2;
        _2159 = frontier_phi_37_36_ladder_1;
        _2161 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2157 = _2091;
        _2159 = _2092;
        _2161 = _2093;
    }
    uvec4 _2166 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2168 = _2166.x * 14u;
    uint _2169 = _2168 + 13u;
    float _2176 = _837 + (-1.0);
    float _2181 = (cbLight._m0[_2169].x * _2176) + 1.0;
    float _2182 = (cbLight._m0[_2169].y * _2176) + 1.0;
    float _2183 = (cbLight._m0[_2169].z * _2176) + 1.0;
    float _2184 = (cbLight._m0[_2169].w * _2176) + 1.0;
    uint _2185 = _2168 + 5u;
    float _2191 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
    uint _2195 = _2168 + 4u;
    float _2205 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
    uint _2209 = _2168 | 1u;
    float _2220 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_657, _658, _659));
    float _2223 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_657, _658, _659));
    float _4521 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _4532 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2228 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * 0.3183098733425140380859375;
    float _2230 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * 0.3183098733425140380859375;
    float _2237 = ((cbLight._m0[_2185].x * _2191) * _2230) + (((cbLight._m0[_2195].x * _2157) * _2205) * _2228);
    float _2238 = ((_2191 * cbLight._m0[_2185].y) * _2230) + (((cbLight._m0[_2195].y * _2159) * _2205) * _2228);
    float _2239 = ((_2191 * cbLight._m0[_2185].z) * _2230) + (((cbLight._m0[_2195].z * _2161) * _2205) * _2228);
    uvec4 _2243 = floatBitsToUint(cbLight._m0[_2168 + 12u]);
    bool _2245 = _2243.x == 0u;
    float _2347;
    float _2349;
    float _2351;
    if (_2245)
    {
        _2347 = _2237;
        _2349 = _2238;
        _2351 = _2239;
    }
    else
    {
        uint _2355 = _2168 + 6u;
        float _2371 = (dot(vec3(cbLight._m0[_2168 + 2u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2372 = _2371 * _2371;
        float _4543 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2373 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2374 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2347 = (((cbLight._m0[_2355].x * 0.3183098733425140380859375) * _2373) * _2374) + _2237;
        _2349 = (((cbLight._m0[_2355].y * 0.3183098733425140380859375) * _2373) * _2374) + _2238;
        _2351 = (((cbLight._m0[_2355].z * 0.3183098733425140380859375) * _2373) * _2374) + _2239;
    }
    bool _2354 = _2243.y == 0u;
    float _2409;
    float _2411;
    float _2413;
    if (_2354)
    {
        _2409 = _2347;
        _2411 = _2349;
        _2413 = _2351;
    }
    else
    {
        uint _2582 = _2168 + 7u;
        float _2598 = (dot(vec3(cbLight._m0[_2168 + 3u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2599 = _2598 * _2598;
        float _4559 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2600 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2601 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2409 = (((cbLight._m0[_2582].x * 0.3183098733425140380859375) * _2600) * _2601) + _2347;
        _2411 = (((cbLight._m0[_2582].y * 0.3183098733425140380859375) * _2600) * _2601) + _2349;
        _2413 = (((cbLight._m0[_2582].z * 0.3183098733425140380859375) * _2600) * _2601) + _2351;
    }
    uint _2416 = _2168 + 8u;
    float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _660) * 0.949999988079071044921875);
    float _2430 = _2429 * _2429;
    float _2431 = cbLight._m0[_2168].x + _736;
    float _2432 = cbLight._m0[_2168].y + _737;
    float _2433 = cbLight._m0[_2168].z + _738;
    float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
    float _2438 = _2437 * _2431;
    float _2439 = _2437 * _2432;
    float _2440 = _2437 * _2433;
    float _2441 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2168].xyz));
    float _4575 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _4586 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _2445 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2446 = dot(vec3(_657, _658, _659), vec3(_2438, _2439, _2440));
    float _4597 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2438, _2439, _2440));
    float _4608 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2430 * _2430;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2466 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
    float _2467 = 0.959999978542327880859375 - _818;
    float _2469 = 0.959999978542327880859375 - _819;
    float _2470 = 0.959999978542327880859375 - _820;
    float _2477 = 1.0 - _2430;
    float _2488 = (0.5 / (((_2445 * ((_2444 * _2477) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2477) + _2430) * _2444))) * _2444;
    float _4619 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2490 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    uint _2504 = _2168 + 9u;
    float _2515 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _660) * 0.949999988079071044921875);
    float _2516 = _2515 * _2515;
    float _2517 = cbLight._m0[_2209].x + _736;
    float _2518 = cbLight._m0[_2209].y + _737;
    float _2519 = cbLight._m0[_2209].z + _738;
    float _2523 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
    float _2524 = _2523 * _2517;
    float _2525 = _2523 * _2518;
    float _2526 = _2523 * _2519;
    float _2527 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2209].xyz));
    float _4630 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2530 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2531 = dot(vec3(_657, _658, _659), vec3(_2524, _2525, _2526));
    float _4641 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2535 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2524, _2525, _2526));
    float _4652 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2539 = _2516 * _2516;
    float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
    float _2550 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
    float _2557 = 1.0 - _2516;
    float _2567 = (0.5 / (((_2445 * ((_2530 * _2557) + _2516)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2557) + _2516) * _2530))) * _2530;
    float _4663 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2569 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
    float _2579 = (((((_2550 * _2467) + _821) * cbLight._m0[_2504].x) * _2569) * _2191) + ((((cbLight._m0[_2416].x * _2157) * ((_2466 * _2467) + _821)) * _2490) * _2205);
    float _2580 = (((((_2550 * _2469) + _823) * cbLight._m0[_2504].y) * _2569) * _2191) + ((((cbLight._m0[_2416].y * _2159) * ((_2466 * _2469) + _823)) * _2490) * _2205);
    float _2581 = (((((_2550 * _2470) + _824) * cbLight._m0[_2504].z) * _2569) * _2191) + ((((cbLight._m0[_2416].z * _2161) * ((_2466 * _2470) + _824)) * _2490) * _2205);
    float _2637;
    float _2639;
    float _2641;
    if (_2245)
    {
        _2637 = _2579;
        _2639 = _2580;
        _2641 = _2581;
    }
    else
    {
        uint _2643 = _2168 + 2u;
        uint _2647 = _2168 + 10u;
        float _2661 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2643].w)) * _660) * 0.949999988079071044921875);
        float _2662 = _2661 * _2661;
        float _2663 = cbLight._m0[_2643].x + _736;
        float _2664 = cbLight._m0[_2643].y + _737;
        float _2665 = cbLight._m0[_2643].z + _738;
        float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
        float _2670 = _2669 * _2663;
        float _2671 = _2669 * _2664;
        float _2672 = _2669 * _2665;
        float _2673 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2643].xyz));
        float _4674 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2676 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2677 = dot(vec3(_657, _658, _659), vec3(_2670, _2671, _2672));
        float _4685 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2680 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2681 = dot(vec3(cbLight._m0[_2643].xyz), vec3(_2670, _2671, _2672));
        float _4696 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2685 = _2662 * _2662;
        float _2689 = ((_2680 * _2680) * (_2685 + (-1.0))) + 1.0;
        float _2696 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
        float _2703 = 1.0 - _2662;
        float _2713 = (0.5 / (((_2445 * ((_2676 * _2703) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2703) + _2662) * _2676))) * _2676;
        float _4707 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2715 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2685 / ((_2689 * _2689) * 3.141590118408203125));
        float _2716 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2637 = (((((_2696 * _2467) + _821) * cbLight._m0[_2647].x) * _2715) * _2716) + _2579;
        _2639 = (((((_2696 * _2469) + _823) * cbLight._m0[_2647].y) * _2715) * _2716) + _2580;
        _2641 = (((((_2696 * _2470) + _824) * cbLight._m0[_2647].z) * _2715) * _2716) + _2581;
    }
    float _2747;
    float _2749;
    float _2751;
    if (_2354)
    {
        _2747 = _2637;
        _2749 = _2639;
        _2751 = _2641;
    }
    else
    {
        uint _2758 = _2168 + 3u;
        uint _2762 = _2168 + 11u;
        float _2776 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2758].w)) * _660) * 0.949999988079071044921875);
        float _2777 = _2776 * _2776;
        float _2778 = cbLight._m0[_2758].x + _736;
        float _2779 = cbLight._m0[_2758].y + _737;
        float _2780 = cbLight._m0[_2758].z + _738;
        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
        float _2785 = _2784 * _2778;
        float _2786 = _2784 * _2779;
        float _2787 = _2784 * _2780;
        float _2788 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2758].xyz));
        float _4723 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2791 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2792 = dot(vec3(_657, _658, _659), vec3(_2785, _2786, _2787));
        float _4734 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2795 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2796 = dot(vec3(cbLight._m0[_2758].xyz), vec3(_2785, _2786, _2787));
        float _4745 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2800 = _2777 * _2777;
        float _2804 = ((_2795 * _2795) * (_2800 + (-1.0))) + 1.0;
        float _2811 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
        float _2818 = 1.0 - _2777;
        float _2828 = (0.5 / (((_2445 * ((_2791 * _2818) + _2777)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2818) + _2777) * _2791))) * _2791;
        float _4756 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2830 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2800 / ((_2804 * _2804) * 3.141590118408203125));
        float _2831 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2747 = (((((_2811 * _2467) + _821) * cbLight._m0[_2762].x) * _2830) * _2831) + _2637;
        _2749 = (((((_2811 * _2469) + _823) * cbLight._m0[_2762].y) * _2830) * _2831) + _2639;
        _2751 = (((((_2811 * _2470) + _824) * cbLight._m0[_2762].z) * _2830) * _2831) + _2641;
    }
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    if (_2166.y == 0u)
    {
        uvec4 _2852 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2853 = _2852.x;
        uint _2864 = uint((float(_2852.y) * floor(float(uint(cbSceneParam._m0[85u].y * _758) / _2853))) + floor(float(uint(cbSceneParam._m0[85u].x * _757) / _2853)));
        float _2874 = (log2(_1944 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2875 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        uint _2878 = uint(isnan(14.0) ? _2875 : (isnan(_2875) ? 14.0 : min(_2875, 14.0)));
        uvec4 _2883 = texelFetch(g_lightClusterGridBuffer, int(((_2878 << 2u) + (_2864 << 6u)) >> 2u));
        uint _2884 = _2883.x;
        uint _2885 = _2852.z;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        if (((((1u << ((_2885 >> 4u) & 15u)) + 4294967295u) & _2884) == 0u) || ((_2885 & 240u) == 0u))
        {
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
        }
        else
        {
            float _2965;
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            uint _3122 = 0u;
            uint _3131;
            bool _3132;
            for (;;)
            {
                _3131 = texelFetch(g_lightClassification, int((((_2878 << 5u) + (_2864 << 9u)) + (_3122 << 2u)) >> 2u)).x;
                _3132 = _3131 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3132)
                {
                    frontier_phi_71_pred = _3121;
                    frontier_phi_71_pred_1 = _3120;
                    frontier_phi_71_pred_2 = _3119;
                    frontier_phi_71_pred_3 = _3118;
                    frontier_phi_71_pred_4 = _3117;
                    frontier_phi_71_pred_5 = _3116;
                }
                else
                {
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    uint _3267;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3121;
                    _3267 = _3131;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    for (;;)
                    {
                        uint _3271 = uint(findLSB(_3267)) + (_3122 << 5u);
                        uint _3268 = (_3267 + 4294967295u) & _3267;
                        uint _3273 = _3271 * 48u;
                        vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3273)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 3u)).x));
                        uint _3293 = (_3271 * 48u) + 4u;
                        vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 3u)).x));
                        uint _3312 = (_3271 * 48u) + 8u;
                        vec3 _3323 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x));
                        float _3327 = _3287.x - _1942;
                        float _3328 = _3287.y - _1943;
                        float _3329 = _3287.z - _1944;
                        float _3330 = dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329));
                        float _3333 = inversesqrt(_3330);
                        float _3334 = _3333 * _3327;
                        float _3335 = _3333 * _3328;
                        float _3336 = _3333 * _3329;
                        float _3337 = dot(vec3(_778, _781, _784), vec3(_3334, _3335, _3336));
                        float _3342 = 1.0 - (_3330 * _3287.w);
                        float _4782 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3343 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3344 = sqrt(_3330) * _3306.w;
                        float _3347 = 1.39999997615814208984375 / (_3344 + 1.39999997615814208984375);
                        float _3348 = _3347 * _3347;
                        float _3351 = ((1.0 - _3348) * _3337) + _3348;
                        float _3354 = _3344 * _3344;
                        float _3358 = ((isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0))) * _3343) / ((_3354 * 0.699999988079071044921875) + 1.0);
                        float _3362 = (-0.0) - _1942;
                        float _3363 = (-0.0) - _1943;
                        float _3364 = (-0.0) - _1944;
                        float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                        float _3369 = _3368 * _3362;
                        float _3370 = _3368 * _3363;
                        float _3371 = _3368 * _3364;
                        float _3378 = exp2(log2(1.0 / ((_3354 * 3.5) + 5.0)) * 0.25);
                        float _3379 = 1.0 - _853;
                        float _3386 = sqrt(1.0 - ((1.0 - (_3379 * _3379)) * (1.0 - (_3378 * _3378))));
                        float _3387 = _3386 * _3386;
                        float _3388 = _3387 * _3387;
                        float _3389 = _3369 + _3334;
                        float _3390 = _3370 + _3335;
                        float _3391 = _3371 + _3336;
                        float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                        float _3399 = dot(vec3(_778, _781, _784), vec3(_3369, _3370, _3371));
                        float _4798 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3402 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3403 = dot(vec3(_778, _781, _784), vec3(_3395 * _3389, _3395 * _3390, _3395 * _3391));
                        float _4809 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3406 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3410 = ((_3406 * _3406) * (_3388 + (-1.0))) + 1.0;
                        float _3411 = _3347 * _3387;
                        float _3412 = _3411 * _3411;
                        float _3415 = ((1.0 - _3412) * _3337) + _3412;
                        float _4820 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3416 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3417 = 1.0 - _3387;
                        float _3427 = (0.5 / (((_3416 * ((_3402 * _3417) + _3387)) + 9.9999999392252902907785028219223e-09) + (((_3416 * _3417) + _3387) * _3402))) * _3416;
                        float _4831 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3438 = (((_3388 * 3.1415927410125732421875) * (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) / ((_3410 * _3410) * ((_3354 * 2.1991131305694580078125) + 3.141590118408203125))) * _3343;
                        _3191 = (_3358 * _3306.x) + _3264;
                        _3192 = (_3358 * _3306.y) + _3265;
                        _3193 = (_3358 * _3306.z) + _3266;
                        _3188 = (_3438 * _3323.x) + _3261;
                        _3189 = (_3438 * _3323.y) + _3262;
                        _3190 = (_3438 * _3323.z) + _3263;
                        if (_3268 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3193;
                            _3267 = _3268;
                        }
                    }
                    frontier_phi_71_pred = _3193;
                    frontier_phi_71_pred_1 = _3192;
                    frontier_phi_71_pred_2 = _3191;
                    frontier_phi_71_pred_3 = _3190;
                    frontier_phi_71_pred_4 = _3189;
                    frontier_phi_71_pred_5 = _3188;
                }
                _2975 = frontier_phi_71_pred;
                _2973 = frontier_phi_71_pred_1;
                _2971 = frontier_phi_71_pred_2;
                _2969 = frontier_phi_71_pred_3;
                _2967 = frontier_phi_71_pred_4;
                _2965 = frontier_phi_71_pred_5;
                uint _3123 = _3122 + 1u;
                if (_3123 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3116 = _2965;
                    _3117 = _2967;
                    _3118 = _2969;
                    _3119 = _2971;
                    _3120 = _2973;
                    _3121 = _2975;
                    _3122 = _3123;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
        }
        uvec4 _2978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2979 = _2978.z;
        uint _2981 = (_2979 >> 8u) & 15u;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        if (((4294967295u << _2981) & _2884) == 0u)
        {
            _3084 = _2964;
            _3086 = _2966;
            _3088 = _2968;
            _3090 = _2970;
            _3092 = _2972;
            _3094 = _2974;
        }
        else
        {
            float _3109 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
            float _3110 = _3109 * _1942;
            float _3111 = _3109 * _1943;
            float _3112 = _3109 * _1944;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2981 < ((_2979 >> 12u) & 15u))
            {
                float _3085;
                float _3087;
                float _3089;
                float _3091;
                float _3093;
                float _3095;
                float _3244 = _2964;
                float _3245 = _2966;
                float _3246 = _2968;
                float _3247 = _2970;
                float _3248 = _2972;
                float _3249 = _2974;
                uint _3250 = _2981;
                uint _3259;
                bool _3260;
                for (;;)
                {
                    _3259 = texelFetch(g_lightClassification, int((((_2878 << 5u) + (_2864 << 9u)) + (_3250 << 2u)) >> 2u)).x;
                    _3260 = _3259 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3260)
                    {
                        frontier_phi_82_pred = _3249;
                        frontier_phi_82_pred_1 = _3248;
                        frontier_phi_82_pred_2 = _3247;
                        frontier_phi_82_pred_3 = _3246;
                        frontier_phi_82_pred_4 = _3245;
                        frontier_phi_82_pred_5 = _3244;
                    }
                    else
                    {
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3465 = _3244;
                        float _3466 = _3245;
                        float _3467 = _3246;
                        float _3468 = _3247;
                        float _3469 = _3248;
                        float _3470 = _3249;
                        uint _3471 = _3259;
                        uint _3472;
                        vec4 _3497;
                        float _3498;
                        vec4 _3513;
                        vec3 _3525;
                        vec4 _3541;
                        vec4 _3556;
                        float _3602;
                        bool _3603;
                        for (;;)
                        {
                            uint _3482 = ((_3250 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3471));
                            _3472 = (_3471 + 4294967295u) & _3471;
                            uint _3484 = _3482 * 40u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3498 = _3497.w;
                            uint _3500 = (_3482 * 40u) + 4u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3482 * 40u) + 8u;
                            _3525 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x));
                            uint _3528 = (_3482 * 40u) + 16u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3543 = (_3482 * 40u) + 20u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3482 * 40u) + 24u;
                            vec4 _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3577 = (_3482 * 40u) + 28u;
                            vec4 _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            _3602 = fma(_1944, _3590.z, fma(_1943, _3590.y, _3590.x * _1942)) + _3590.w;
                            _3603 = !((fma(_1944, _3571.z, fma(_1943, _3571.y, _3571.x * _1942)) + _3571.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3603)
                            {
                                float _3630 = _3497.x - _1942;
                                float _3631 = _3497.y - _1943;
                                float _3632 = _3497.z - _1944;
                                float _3633 = dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632));
                                float _3636 = inversesqrt(_3633);
                                float _3637 = _3636 * _3630;
                                float _3638 = _3636 * _3631;
                                float _3639 = _3636 * _3632;
                                float _3643 = 1.0 - (_3633 / (_3498 * _3498));
                                float _4842 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3644 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3648 = sqrt(_3633) * _3513.w;
                                float _3650 = 1.39999997615814208984375 / (_3648 + 1.39999997615814208984375);
                                float _3651 = _3650 * _3650;
                                float _3654 = ((1.0 - _3651) * dot(vec3(_3637, _3638, _3639), vec3(_778, _781, _784))) + _3651;
                                float _3657 = _3648 * _3648;
                                float _3661 = (fma(_1944, _3541.z, fma(_1943, _3541.y, _3541.x * _1942)) + _3541.w) / _3602;
                                float _3662 = (fma(_1944, _3556.z, fma(_1943, _3556.y, _3556.x * _1942)) + _3556.w) / _3602;
                                float _3666 = 1.0 - dot(vec2(_3661, _3662), vec2(_3661, _3662));
                                float _4858 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3668 = _3667 * (((isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0))) * _3644) / ((_3657 * 0.699999988079071044921875) + 1.0));
                                float _3680 = exp2(log2(1.0 / ((_3657 * 3.5) + 5.0)) * 0.25);
                                float _3681 = 1.0 - _853;
                                float _3688 = sqrt(1.0 - ((1.0 - (_3681 * _3681)) * (1.0 - (_3680 * _3680))));
                                float _3689 = _3688 * _3688;
                                float _3690 = _3689 * _3689;
                                float _3691 = _3637 - _3110;
                                float _3692 = _3638 - _3111;
                                float _3693 = _3639 - _3112;
                                float _3697 = inversesqrt(dot(vec3(_3691, _3692, _3693), vec3(_3691, _3692, _3693)));
                                float _3701 = dot(vec3(_778, _781, _784), vec3((-0.0) - _3110, (-0.0) - _3111, (-0.0) - _3112));
                                float _4869 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3704 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3705 = dot(vec3(_778, _781, _784), vec3(_3697 * _3691, _3697 * _3692, _3697 * _3693));
                                float _4880 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3708 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3712 = ((_3708 * _3708) * (_3690 + (-1.0))) + 1.0;
                                float _3713 = _3650 * _3689;
                                float _3714 = _3713 * _3713;
                                float _3720 = ((1.0 - _3714) * dot(vec3(_778, _781, _784), vec3(_3637, _3638, _3639))) + _3714;
                                float _4891 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3721 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3722 = 1.0 - _3689;
                                float _3732 = (0.5 / (((_3721 * ((_3704 * _3722) + _3689)) + 9.9999999392252902907785028219223e-09) + (((_3721 * _3722) + _3689) * _3704))) * _3721;
                                float _4902 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3742 = (_3667 * _3644) * (((_3690 * 3.1415927410125732421875) * (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0)))) / ((_3712 * _3712) * ((_3657 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3668 * _3513.z;
                                frontier_phi_88_pred_1 = _3668 * _3513.y;
                                frontier_phi_88_pred_2 = _3668 * _3513.x;
                                frontier_phi_88_pred_3 = _3742 * _3525.z;
                                frontier_phi_88_pred_4 = _3742 * _3525.y;
                                frontier_phi_88_pred_5 = _3742 * _3525.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3751 = frontier_phi_88_pred;
                            _3750 = frontier_phi_88_pred_1;
                            _3749 = frontier_phi_88_pred_2;
                            _3748 = frontier_phi_88_pred_3;
                            _3747 = frontier_phi_88_pred_4;
                            _3746 = frontier_phi_88_pred_5;
                            _3455 = _3749 + _3468;
                            _3456 = _3750 + _3469;
                            _3457 = _3751 + _3470;
                            _3452 = _3746 + _3465;
                            _3453 = _3747 + _3466;
                            _3454 = _3748 + _3467;
                            if (_3472 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3472;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3457;
                        frontier_phi_82_pred_1 = _3456;
                        frontier_phi_82_pred_2 = _3455;
                        frontier_phi_82_pred_3 = _3454;
                        frontier_phi_82_pred_4 = _3453;
                        frontier_phi_82_pred_5 = _3452;
                    }
                    _3095 = frontier_phi_82_pred;
                    _3093 = frontier_phi_82_pred_1;
                    _3091 = frontier_phi_82_pred_2;
                    _3089 = frontier_phi_82_pred_3;
                    _3087 = frontier_phi_82_pred_4;
                    _3085 = frontier_phi_82_pred_5;
                    uint _3251 = _3250 + 1u;
                    if (_3251 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3244 = _3085;
                        _3245 = _3087;
                        _3246 = _3089;
                        _3247 = _3091;
                        _3248 = _3093;
                        _3249 = _3095;
                        _3250 = _3251;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3091;
                frontier_phi_63_64_ladder_1 = _3095;
                frontier_phi_63_64_ladder_2 = _3093;
                frontier_phi_63_64_ladder_3 = _3089;
                frontier_phi_63_64_ladder_4 = _3087;
                frontier_phi_63_64_ladder_5 = _3085;
            }
            else
            {
                frontier_phi_63_64_ladder = _2970;
                frontier_phi_63_64_ladder_1 = _2974;
                frontier_phi_63_64_ladder_2 = _2972;
                frontier_phi_63_64_ladder_3 = _2968;
                frontier_phi_63_64_ladder_4 = _2966;
                frontier_phi_63_64_ladder_5 = _2964;
            }
            _3084 = frontier_phi_63_64_ladder_5;
            _3086 = frontier_phi_63_64_ladder_4;
            _3088 = frontier_phi_63_64_ladder_3;
            _3090 = frontier_phi_63_64_ladder;
            _3092 = frontier_phi_63_64_ladder_2;
            _3094 = frontier_phi_63_64_ladder_1;
        }
        float _3099 = isnan(1.0) ? _837 : (isnan(_837) ? 1.0 : min(_837, 1.0));
        _2897 = (_3099 * _3090) + _2409;
        _2899 = (_3099 * _3092) + _2411;
        _2901 = (_3099 * _3094) + _2413;
        _2903 = ((_3084 * _821) * _3099) + _2747;
        _2905 = ((_3086 * _823) * _3099) + _2749;
        _2907 = ((_3088 * _824) * _3099) + _2751;
    }
    else
    {
        _2897 = _2409;
        _2899 = _2411;
        _2901 = _2413;
        _2903 = _2747;
        _2905 = _2749;
        _2907 = _2751;
    }
    float _4918 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4929 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4940 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _2924 = ((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2897 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _837))) + ((_2903 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1676)) * cbPerFrame._m0[3u].x);
    float _2925 = ((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2899 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _837))) + ((_2905 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1676)) * cbPerFrame._m0[3u].x);
    float _2926 = ((isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_2901 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _837))) + ((_2907 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1676)) * cbPerFrame._m0[3u].x);
    uint _2927 = _249 + 6u;
    float _2935 = _757 / cbSceneParam._m0[86u].x;
    float _2936 = _758 / cbSceneParam._m0[86u].y;
    vec4 _2950 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2935, _2936, (log2((isnan(cbSceneParam._m0[77u].w) ? _679 : (isnan(_679) ? cbSceneParam._m0[77u].w : min(_679, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2952 = _2950.x;
    float _2953 = _2950.y;
    float _2954 = _2950.z;
    float _2955 = _2950.w;
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    if (_679 > cbSceneParam._m0[78u].w)
    {
        float _2989 = isnan(_679) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _679 : min(cbSceneParam._m0[80u].w, _679));
        float _2990 = _2989 / _679;
        float _3001 = _2990 * _729;
        float _3002 = _730 * _2990;
        float _3003 = (-0.0) - _3002;
        float _3004 = _2990 * _731;
        float _3006 = (cbSceneParam._m0[77u].w * _3003) / _2989;
        float _3007 = _3006 + cbSceneParam._m0[79u].w;
        float _3008 = cbSceneParam._m0[79u].w - _3002;
        float _3014 = sqrt(((_3001 * _3001) + (_3002 * _3002)) + (_3004 * _3004));
        float _3017 = (1.0 - (cbSceneParam._m0[77u].w / _2989)) * _3014;
        float _3022 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3024 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3201;
        if (abs((_3003 - _3006) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3201 = ((((_3007 > 0.0) ? exp2(_3022 * _3007) : (2.0 - exp2(_3024 * _3007))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3017;
        }
        else
        {
            float _3145 = 1.0 / cbSceneParam._m0[80u].x;
            float _3146 = isnan(_3008) ? _3007 : (isnan(_3007) ? _3008 : max(_3007, _3008));
            float _3147 = isnan(_3008) ? _3007 : (isnan(_3007) ? _3008 : min(_3007, _3008));
            float _3156 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : min(_3146, 0.0));
            float _3157 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : min(_3147, 0.0));
            _3201 = ((abs(_3014 / _3003) * cbSceneParam._m0[80u].y) * ((((_3156 - _3157) * 2.0) - ((exp2(_3022 * (isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0)))) - exp2(_3022 * (isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0))))) * _3145)) - ((exp2(_3024 * _3156) - exp2(_3024 * _3157)) * _3145))) + (_3017 * cbSceneParam._m0[80u].z);
        }
        vec4 _3203 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2935, _2936, 1.0), 0.0);
        float _3212 = exp2((_3201 * (-1.44269502162933349609375)) * (1.0 - _3203.w));
        float _3213 = log2(_3212);
        float _3229 = log2(_2955);
        _3026 = (exp2(_3229 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3213 * cbSceneParam._m0[78u].x)) * _3203.x) / cbSceneParam._m0[78u].x)) + _2952;
        _3028 = (exp2(_3229 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3213 * cbSceneParam._m0[78u].y)) * _3203.y) / cbSceneParam._m0[78u].y)) + _2953;
        _3030 = (exp2(_3229 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3213 * cbSceneParam._m0[78u].z)) * _3203.z) / cbSceneParam._m0[78u].z)) + _2954;
        _3032 = _3212 * _2955;
    }
    else
    {
        _3026 = _2952;
        _3028 = _2953;
        _3030 = _2954;
        _3032 = _2955;
    }
    bool _3239;
    vec4 _3042;
    vec4 _3064;
    float _3066;
    float _3070;
    float _3071;
    float _3072;
    float _3073;
    bool _3083;
    for (;;)
    {
        _3042 = cbMatDynParam._m0[0u];
        float _3044 = roundEven(_3042.y);
        bool _3045 = _3044 == 3.0;
        float _3046 = log2(_3032);
        float _3053 = exp2(_3046 * cbSceneParam._m0[78u].x) * _2924;
        float _3054 = exp2(_3046 * cbSceneParam._m0[78u].y) * _2925;
        float _3055 = exp2(_3046 * cbSceneParam._m0[78u].z) * _2926;
        float _3062 = _745 + (-0.5);
        _3064 = cbMtdParam._m0[1u];
        _3066 = _3064.y * _3062;
        float _3069 = (_3044 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3070 = _3069 * (_3045 ? _3053 : (_3053 + (cbSceneParam._m0[72u].w * _3026)));
        _3071 = _3069 * (_3045 ? _3054 : (_3054 + (cbSceneParam._m0[72u].w * _3028)));
        _3072 = _3069 * (_3045 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3030)));
        _3073 = _3062 * 0.999000012874603271484375;
        _3083 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3083)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _3073) < 0.5)
            {
                _3239 = true;
                break;
            }
        }
        uint _3180 = _797 + uint(_3042.w);
        if ((cbInstanceData._m0[_3180].w < 1.0) && ((cbInstanceData._m0[_3180].w + _3073) < 0.5))
        {
            _3239 = true;
            break;
        }
        if ((_3066 + 1.0) < _3064.x)
        {
            _3239 = true;
            break;
        }
        _3239 = false;
        break;
    }
    float _3443;
    if (_3239)
    {
        discard_state = true;
        _3443 = 0.0;
    }
    else
    {
        _3443 = cbInstanceData._m0[_2927].w;
    }
    SV_Target.x = _3070;
    SV_Target.y = _3071;
    SV_Target.z = _3072;
    SV_Target.w = _3443;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2927].w;
    discard_exit();
}


