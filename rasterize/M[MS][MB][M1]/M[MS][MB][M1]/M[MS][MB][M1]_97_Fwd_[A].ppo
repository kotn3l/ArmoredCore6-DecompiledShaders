#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1253;
float _3634;
float _3635;
float _3636;
float _3637;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].y) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3646 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _387 = (_380 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _388 = (_380 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _389 = (_380 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _451 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _453 = _451.x;
    float _454 = _451.y;
    float _455 = _451.z;
    float _464 = ((_434.z - _455) * _380) + _455;
    float _467 = ((((_434.x - _453) * _380) + _453) * 2.0) + (-1.0);
    float _468 = ((((_434.y - _454) * _380) + _454) * 2.0) + (-1.0);
    float _469 = dot(vec2(_467, _468), vec2(_467, _468));
    float _3657 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _474 = sqrt(1.0 - (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))));
    float _477 = _467 + ((((_407.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _478 = _468 + ((((_407.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _481 = fma(_474, _230, fma(_478, _237, _477 * _223));
    float _484 = fma(_474, _231, fma(_478, _238, _477 * _224));
    float _487 = fma(_474, _232, fma(_478, _239, _477 * _225));
    float _491 = inversesqrt(dot(vec3(_481, _484, _487), vec3(_481, _484, _487)));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _533 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _535 = _533.x;
    float _536 = 1.0 - _535;
    float _542 = (cbMtdParam._m0[19u].x + dot(vec4(_491 * _481, _491 * _484, _491 * _487, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_535 - _536) * cbMtdParam._m0[24u].z) + _536) * cbMtdParam._m0[21u].z);
    float _3668 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _550 = (_543 * (cbMtdParam._m0[17u].x - _387)) + _387;
    float _551 = (_543 * (cbMtdParam._m0[17u].y - _388)) + _388;
    float _552 = (_543 * (cbMtdParam._m0[17u].z - _389)) + _389;
    vec4 _564 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _580 = _578.x;
    float _598 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _580) * _380) + _580;
    float _602 = ((_564.x - _598) * cbMtdParam._m0[19u].z) + _598;
    float _604 = _602 - (_602 * _543);
    float _609 = (((_407.z - _464) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _464;
    vec4 _622 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _629 = (_622.x * 2.0) + (-1.0);
    float _630 = (_622.y * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _3679 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _639 = ((_622.z - _609) * _543) + _609;
    float _649 = ((sqrt(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) - _474) * _543) + _474;
    float _652 = (((_629 - _477) * _543) + _477) + (cbMtdParam._m0[21u].x * _477);
    float _653 = (((_630 - _478) * _543) + _478) + (cbMtdParam._m0[21u].x * _478);
    float _658 = cbMtdParam._m0[22u].x + _507.w;
    float _661 = fma(_649, _230, fma(_653, _237, _652 * _223));
    float _664 = fma(_649, _231, fma(_653, _238, _652 * _224));
    float _667 = fma(_649, _232, fma(_653, _239, _652 * _225));
    float _671 = inversesqrt(dot(vec3(_661, _664, _667), vec3(_661, _664, _667)));
    float _672 = _671 * _661;
    float _673 = _671 * _664;
    float _674 = _671 * _667;
    float _3690 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _675 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3712 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3723 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _3734 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3745 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _680 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _694 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _745 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _735);
    float _746 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _735);
    float _747 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _735);
    float _751 = inversesqrt(dot(vec3(_745, _746, _747), vec3(_745, _746, _747)));
    float _752 = _745 * _751;
    float _753 = _746 * _751;
    float _754 = _747 * _751;
    vec4 _759 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _761 = _759.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _933 = sqrt(((_745 * _745) + (_746 * _746)) + (_747 * _747));
        float _939 = (cbMatDynParam._m0[5u].x * _933) + cbMatDynParam._m0[5u].y;
        float _3756 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _944 = (cbMatDynParam._m0[5u].z * _933) + cbMatDynParam._m0[5u].w;
        float _3767 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) - _940)) + _940) < ((_761 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _772 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _773 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _791 = fma(_674, cbSceneParam._m0[5u].z, fma(_673, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _672));
    float _794 = fma(_674, cbSceneParam._m0[6u].z, fma(_673, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _672));
    float _797 = fma(_674, cbSceneParam._m0[7u].z, fma(_673, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _672));
    uint _810 = _242 + 9u;
    uint _811 = _810 + uint(cbMatDynParam._m0[0u].w);
    float _817 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_811].x;
    float _818 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_811].y;
    float _819 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_811].z;
    float _3778 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _823 = 1.0 - _680;
    float _824 = _820 * _823;
    float _825 = _821 * _823;
    float _826 = _822 * _823;
    float _831 = (_820 + (-0.039999999105930328369140625)) * _680;
    float _832 = (_821 + (-0.039999999105930328369140625)) * _680;
    float _833 = (_822 + (-0.039999999105930328369140625)) * _680;
    float _834 = _831 + 0.039999999105930328369140625;
    float _836 = _832 + 0.039999999105930328369140625;
    float _837 = _833 + 0.039999999105930328369140625;
    vec4 _846 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _772, cbSceneParam._m0[86u].y * _773));
    float _850 = ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * TEXCOORD_5.w) * _846.x;
    float _851 = dot(vec3(_672, _673, _674), vec3(_752, _753, _754));
    float _854 = _851 * 2.0;
    float _858 = (_854 * _672) - _752;
    float _859 = (_854 * _673) - _753;
    float _860 = (_854 * _674) - _754;
    float _864 = abs(dot(vec3(_752, _753, _754), vec3(_672, _673, _674)));
    float _3811 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _866 = sqrt(_675);
    float _879 = exp2((_866 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_866 * 3.0));
    float _885 = (1.0 - _879) * ((_866 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _886 = _879 * _866;
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1252;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _977 = fma(_922, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914));
        float _981 = fma(_922, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914));
        float _985 = fma(_922, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914));
        float _1010 = _914 + _672;
        float _1011 = _918 + _673;
        float _1012 = _922 + _674;
        float _1022 = fma(_1012, cbModelParam._m0[26u].z, fma(_1011, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1010)) - _977;
        float _1023 = fma(_1012, cbModelParam._m0[27u].z, fma(_1011, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1010)) - _981;
        float _1024 = fma(_1012, cbModelParam._m0[28u].z, fma(_1011, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1010)) - _985;
        float _1028 = inversesqrt(dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024)));
        float _1041 = ((_1028 * _1022) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_977 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1028 * _1023) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_981 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1028 * _1024) / cbModelParam._m0[34u].z) + ((((((_985 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        float _1080 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1046.x + (-0.5));
        float _1082 = _1080 * (_1046.y + (-0.5));
        float _1083 = _1080 * (_1046.z + (-0.5));
        float _1090 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1053.x + (-0.5));
        float _1092 = _1090 * (_1053.y + (-0.5));
        float _1093 = _1090 * (_1053.z + (-0.5));
        float _1100 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1060.x + (-0.5));
        float _1102 = _1100 * (_1060.y + (-0.5));
        float _1103 = _1100 * (_1060.z + (-0.5));
        float _1110 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1067.x + (-0.5));
        float _1112 = _1110 * (_1067.y + (-0.5));
        float _1113 = _1110 * (_1067.z + (-0.5));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = _1081 * 0.5;
        float _1118 = _1091 * 0.5;
        float _1119 = _1101 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1134 = (dot(vec3(_672, _673, _674), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1144 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3859 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1146 + 1.0))) + _1151) * _1114;
        float _1161 = _1082 * 0.5;
        float _1162 = _1092 * 0.5;
        float _1163 = _1102 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_672, _673, _674), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3892 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1188 + 1.0))) + _1193) * _1115;
        float _1203 = _1083 * 0.5;
        float _1204 = _1093 * 0.5;
        float _1205 = _1103 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_672, _673, _674), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3925 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1230 + 1.0))) + _1235) * _1116;
        _1252 = _1083;
        _1254 = _1082;
        _1255 = _1081;
        _1256 = _1093;
        _1257 = _1092;
        _1258 = _1091;
        _1259 = _1103;
        _1260 = _1102;
        _1261 = _1101;
        _1262 = _1116;
        _1263 = _1115;
        _1264 = _1114;
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
    }
    else
    {
        _1252 = _1253;
        _1254 = _1253;
        _1255 = _1253;
        _1256 = _1253;
        _1257 = _1253;
        _1258 = _1253;
        _1259 = _1253;
        _1260 = _1253;
        _1261 = _1253;
        _1262 = _1253;
        _1263 = _1253;
        _1264 = _1253;
        _1265 = 0.0;
        _1266 = 0.0;
        _1267 = 0.0;
    }
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1295 = fma(_922, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _914));
        float _1299 = fma(_922, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _914));
        float _1303 = fma(_922, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _914));
        float _1326 = _914 + _672;
        float _1327 = _918 + _673;
        float _1328 = _922 + _674;
        float _1338 = fma(_1328, cbModelParam._m0[30u].z, fma(_1327, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1326)) - _1295;
        float _1339 = fma(_1328, cbModelParam._m0[31u].z, fma(_1327, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1326)) - _1299;
        float _1340 = fma(_1328, cbModelParam._m0[32u].z, fma(_1327, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1326)) - _1303;
        float _1344 = inversesqrt(dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340)));
        float _1357 = ((_1344 * _1338) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1295 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1344 * _1339) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1299 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1344 * _1340) / cbModelParam._m0[35u].z) + ((((((_1303 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        float _1394 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1361.x + (-0.5));
        float _1396 = _1394 * (_1361.y + (-0.5));
        float _1397 = _1394 * (_1361.z + (-0.5));
        float _1404 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1368.x + (-0.5));
        float _1406 = _1404 * (_1368.y + (-0.5));
        float _1407 = _1404 * (_1368.z + (-0.5));
        float _1414 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1375.x + (-0.5));
        float _1416 = _1414 * (_1375.y + (-0.5));
        float _1417 = _1414 * (_1375.z + (-0.5));
        float _1424 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1382.x + (-0.5));
        float _1426 = _1424 * (_1382.y + (-0.5));
        float _1427 = _1424 * (_1382.z + (-0.5));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = _1395 * 0.5;
        float _1432 = _1405 * 0.5;
        float _1433 = _1415 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_672, _673, _674), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3988 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1458 + 1.0))) + _1463) * _1428;
        float _1473 = _1396 * 0.5;
        float _1474 = _1406 * 0.5;
        float _1475 = _1416 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_672, _673, _674), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4021 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1500 + 1.0))) + _1505) * _1429;
        float _1515 = _1397 * 0.5;
        float _1516 = _1407 * 0.5;
        float _1517 = _1417 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_672, _673, _674), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4054 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1542 + 1.0))) + _1547) * _1430;
        _1564 = _1397;
        _1565 = _1396;
        _1566 = _1395;
        _1567 = _1407;
        _1568 = _1406;
        _1569 = _1405;
        _1570 = _1417;
        _1571 = _1416;
        _1572 = _1415;
        _1573 = _1430;
        _1574 = _1429;
        _1575 = _1428;
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
    }
    else
    {
        _1564 = _1253;
        _1565 = _1253;
        _1566 = _1253;
        _1567 = _1253;
        _1568 = _1253;
        _1569 = _1253;
        _1570 = _1253;
        _1571 = _1253;
        _1572 = _1253;
        _1573 = _1253;
        _1574 = _1253;
        _1575 = _1253;
        _1576 = 0.0;
        _1577 = 0.0;
        _1578 = 0.0;
    }
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1265)) + _1265;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1266)) + _1266;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1267)) + _1267;
    float _1611 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1589, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1589, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1589, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1588));
    float _1632 = _858 * 0.5;
    float _1633 = _859 * 0.5;
    float _1634 = _860 * 0.5;
    float _1635 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1638 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1641 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1675;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1648 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1252, _1256, _1259, _1262));
        float _1652 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1254, _1257, _1260, _1263));
        float _1656 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1255, _1258, _1261, _1264));
        float _1663 = dot(vec4(cbModelParam._m0[39u]), vec4(_1632, _1633, _1634, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1686;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1677 = dot(vec4(cbModelParam._m0[40u]), vec4(_1632, _1633, _1634, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1677) ? 0.0 : (isnan(0.0) ? _1677 : max(0.0, _1677))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1690 = (_1686 * cbModelParam._m0[1u].x) + (_1675 * (1.0 - cbModelParam._m0[1u].x));
    float _1700 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _675);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1700 : min(cbModelParam._m0[25u].z, _1700));
    float _1782;
    float _1784;
    float _1786;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1749 = fma(_922, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914)) + cbModelParam._m0[13u].w;
        float _1753 = fma(_922, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914)) + cbModelParam._m0[14u].w;
        float _1757 = fma(_922, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914)) + cbModelParam._m0[15u].w;
        float _1760 = fma(_860, cbModelParam._m0[13u].z, fma(_859, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _858));
        float _1763 = fma(_860, cbModelParam._m0[14u].z, fma(_859, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _858));
        float _1766 = fma(_860, cbModelParam._m0[15u].z, fma(_859, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _858));
        float _1794;
        if (_1760 > 0.0)
        {
            _1794 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1794 = frontier_phi_17_15_ladder;
        }
        float _1997;
        if (_1763 > 0.0)
        {
            _1997 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1997 = frontier_phi_26_22_ladder;
        }
        float _2251;
        if (_1766 > 0.0)
        {
            _2251 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2251 = frontier_phi_38_33_ladder;
        }
        float _2253 = isnan(_1997) ? _1794 : (isnan(_1794) ? _1997 : min(_1794, _1997));
        float _2254 = isnan(_2251) ? _2253 : (isnan(_2253) ? _2251 : min(_2253, _2251));
        float _2258 = (_2254 * _1760) + _1749;
        float _2259 = (_2254 * _1763) + _1753;
        float _2260 = (_2254 * _1766) + _1757;
        float _2261 = _2254 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2261;
        float _2265 = _2261 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 > _2265) || ((_2259 < _2263) || ((_2258 < _2263) || (_2258 > _2265))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2388 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2260, cbModelParam._m0[9u].z, fma(_2259, cbModelParam._m0[9u].y, _2258 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2260, cbModelParam._m0[10u].z, fma(_2259, cbModelParam._m0[10u].y, _2258 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2260, cbModelParam._m0[11u].z, fma(_2259, cbModelParam._m0[11u].y, _2258 * cbModelParam._m0[11u].x))), _1701);
            frontier_phi_16_38_ladder = _2388.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2388.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2388.x * cbModelParam._m0[1u].y;
        }
        _1782 = frontier_phi_16_38_ladder_2;
        _1784 = frontier_phi_16_38_ladder_1;
        _1786 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1770 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_858, _859, _860), _1701);
        _1782 = _1770.x * cbModelParam._m0[1u].y;
        _1784 = _1770.y * cbModelParam._m0[1u].y;
        _1786 = _1770.z * cbModelParam._m0[1u].y;
    }
    float _1790 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _675);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1790 : min(cbModelParam._m0[25u].w, _1790));
    float _1881;
    float _1883;
    float _1885;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1845 = fma(_922, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914)) + cbModelParam._m0[21u].w;
        float _1849 = fma(_922, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914)) + cbModelParam._m0[22u].w;
        float _1853 = fma(_922, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914)) + cbModelParam._m0[23u].w;
        float _1856 = fma(_860, cbModelParam._m0[21u].z, fma(_859, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _858));
        float _1859 = fma(_860, cbModelParam._m0[22u].z, fma(_859, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _858));
        float _1862 = fma(_860, cbModelParam._m0[23u].z, fma(_859, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _858));
        float _2002;
        if (_1856 > 0.0)
        {
            _2002 = abs((1.0 - _1845) / _1856);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1845 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2002 = frontier_phi_28_24_ladder;
        }
        float _2278;
        if (_1859 > 0.0)
        {
            _2278 = abs((1.0 - _1849) / _1859);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1849 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2278 = frontier_phi_40_35_ladder;
        }
        float _2491;
        if (_1862 > 0.0)
        {
            _2491 = abs((1.0 - _1853) / _1862);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1853 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2491 = frontier_phi_49_46_ladder;
        }
        float _2493 = isnan(_2278) ? _2002 : (isnan(_2002) ? _2278 : min(_2002, _2278));
        float _2494 = isnan(_2491) ? _2493 : (isnan(_2493) ? _2491 : min(_2493, _2491));
        float _2498 = (_2494 * _1856) + _1845;
        float _2499 = (_2494 * _1859) + _1849;
        float _2500 = (_2494 * _1862) + _1853;
        float _2501 = _2494 * 9.9999997473787516355514526367188e-05;
        float _2502 = (-1.0) - _2501;
        float _2504 = _2501 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2500 > _2504) || ((_2500 < _2502) || ((_2499 > _2504) || ((_2499 < _2502) || ((_2498 < _2502) || (_2498 > _2504))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2699 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2500, cbModelParam._m0[17u].z, fma(_2499, cbModelParam._m0[17u].y, _2498 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2500, cbModelParam._m0[18u].z, fma(_2499, cbModelParam._m0[18u].y, _2498 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2500, cbModelParam._m0[19u].z, fma(_2499, cbModelParam._m0[19u].y, _2498 * cbModelParam._m0[19u].x))), _1791);
            frontier_phi_25_49_ladder = _2699.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2699.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2699.x * cbModelParam._m0[1u].z;
        }
        _1881 = frontier_phi_25_49_ladder_2;
        _1883 = frontier_phi_25_49_ladder_1;
        _1885 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1865 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_858, _859, _860), _1791);
        _1881 = _1865.x * cbModelParam._m0[1u].z;
        _1883 = _1865.y * cbModelParam._m0[1u].z;
        _1885 = _1865.z * cbModelParam._m0[1u].z;
    }
    float _1898 = (((_885 * _834) + _886) * _850) * ((cbModelParam._m0[1u].w * (_1881 - _1782)) + _1782);
    float _1900 = (((_885 * _836) + _886) * _850) * ((cbModelParam._m0[1u].w * (_1883 - _1784)) + _1784);
    float _1902 = (((_885 * _837) + _886) * _850) * ((cbModelParam._m0[1u].w * (_1885 - _1786)) + _1786);
    float _1905 = fma(_1902, cbSceneParam._m0[89u].z, fma(_1900, cbSceneParam._m0[89u].y, _1898 * cbSceneParam._m0[89u].x));
    float _1908 = fma(_1902, cbSceneParam._m0[90u].z, fma(_1900, cbSceneParam._m0[90u].y, _1898 * cbSceneParam._m0[90u].x));
    float _1911 = fma(_1902, cbSceneParam._m0[91u].z, fma(_1900, cbSceneParam._m0[91u].y, _1898 * cbSceneParam._m0[91u].x));
    uvec4 _1921 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1923 = _1921.x * 14u;
    uint _1924 = _1923 + 13u;
    float _1931 = _850 + (-1.0);
    float _1936 = (cbLight._m0[_1924].x * _1931) + 1.0;
    float _1937 = (cbLight._m0[_1924].y * _1931) + 1.0;
    float _1938 = (cbLight._m0[_1924].z * _1931) + 1.0;
    float _1939 = (cbLight._m0[_1924].w * _1931) + 1.0;
    uint _1940 = _1923 + 5u;
    float _1946 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
    uint _1950 = _1923 + 4u;
    float _1956 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
    uint _1960 = _1923 | 1u;
    float _1971 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_672, _673, _674));
    float _1974 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_672, _673, _674));
    float _4190 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _4201 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1979 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * 0.3183098733425140380859375;
    float _1981 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * 0.3183098733425140380859375;
    float _1988 = ((cbLight._m0[_1940].x * _1946) * _1981) + ((cbLight._m0[_1950].x * _1956) * _1979);
    float _1989 = ((_1946 * cbLight._m0[_1940].y) * _1981) + ((_1956 * cbLight._m0[_1950].y) * _1979);
    float _1990 = ((_1946 * cbLight._m0[_1940].z) * _1981) + ((_1956 * cbLight._m0[_1950].z) * _1979);
    uvec4 _1994 = floatBitsToUint(cbLight._m0[_1923 + 12u]);
    bool _1996 = _1994.x == 0u;
    float _2007;
    float _2009;
    float _2011;
    if (_1996)
    {
        _2007 = _1988;
        _2009 = _1989;
        _2011 = _1990;
    }
    else
    {
        uint _2015 = _1923 + 6u;
        float _2031 = (dot(vec3(cbLight._m0[_1923 + 2u].xyz), vec3(_672, _673, _674)) * 0.5) + 0.5;
        float _2032 = _2031 * _2031;
        float _4212 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2033 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2034 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2007 = (((cbLight._m0[_2015].x * 0.3183098733425140380859375) * _2033) * _2034) + _1988;
        _2009 = (((cbLight._m0[_2015].y * 0.3183098733425140380859375) * _2033) * _2034) + _1989;
        _2011 = (((cbLight._m0[_2015].z * 0.3183098733425140380859375) * _2033) * _2034) + _1990;
    }
    bool _2014 = _1994.y == 0u;
    float _2052;
    float _2054;
    float _2056;
    if (_2014)
    {
        _2052 = _2007;
        _2054 = _2009;
        _2056 = _2011;
    }
    else
    {
        uint _2222 = _1923 + 7u;
        float _2238 = (dot(vec3(cbLight._m0[_1923 + 3u].xyz), vec3(_672, _673, _674)) * 0.5) + 0.5;
        float _2239 = _2238 * _2238;
        float _4228 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2240 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2241 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2052 = (((cbLight._m0[_2222].x * 0.3183098733425140380859375) * _2240) * _2241) + _2007;
        _2054 = (((cbLight._m0[_2222].y * 0.3183098733425140380859375) * _2240) * _2241) + _2009;
        _2056 = (((cbLight._m0[_2222].z * 0.3183098733425140380859375) * _2240) * _2241) + _2011;
    }
    uint _2059 = _1923 + 8u;
    float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _675) * 0.949999988079071044921875);
    float _2073 = _2072 * _2072;
    float _2074 = cbLight._m0[_1923].x + _752;
    float _2075 = cbLight._m0[_1923].y + _753;
    float _2076 = cbLight._m0[_1923].z + _754;
    float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
    float _2081 = _2080 * _2074;
    float _2082 = _2080 * _2075;
    float _2083 = _2080 * _2076;
    float _2084 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_1923].xyz));
    float _4244 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _4255 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _2088 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2089 = dot(vec3(_672, _673, _674), vec3(_2081, _2082, _2083));
    float _4266 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2093 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_2081, _2082, _2083));
    float _4277 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2097 = _2073 * _2073;
    float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
    float _2109 = exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0);
    float _2110 = 0.959999978542327880859375 - _831;
    float _2112 = 0.959999978542327880859375 - _832;
    float _2113 = 0.959999978542327880859375 - _833;
    float _2120 = 1.0 - _2073;
    float _2131 = (0.5 / (((_2088 * ((_2087 * _2120) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2120) + _2073) * _2087))) * _2087;
    float _4288 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2133 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
    uint _2144 = _1923 + 9u;
    float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1960].w)) * _675) * 0.949999988079071044921875);
    float _2156 = _2155 * _2155;
    float _2157 = cbLight._m0[_1960].x + _752;
    float _2158 = cbLight._m0[_1960].y + _753;
    float _2159 = cbLight._m0[_1960].z + _754;
    float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
    float _2164 = _2163 * _2157;
    float _2165 = _2163 * _2158;
    float _2166 = _2163 * _2159;
    float _2167 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_1960].xyz));
    float _4299 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2171 = dot(vec3(_672, _673, _674), vec3(_2164, _2165, _2166));
    float _4310 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2175 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_2164, _2165, _2166));
    float _4321 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2179 = _2156 * _2156;
    float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
    float _2190 = exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0);
    float _2197 = 1.0 - _2156;
    float _2207 = (0.5 / (((_2088 * ((_2170 * _2197) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2197) + _2156) * _2170))) * _2170;
    float _4332 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2209 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
    float _2219 = (((((_2190 * _2110) + _834) * cbLight._m0[_2144].x) * _2209) * _1946) + (((((_2109 * _2110) + _834) * cbLight._m0[_2059].x) * _2133) * _1956);
    float _2220 = (((((_2190 * _2112) + _836) * cbLight._m0[_2144].y) * _2209) * _1946) + (((((_2109 * _2112) + _836) * cbLight._m0[_2059].y) * _2133) * _1956);
    float _2221 = (((((_2190 * _2113) + _837) * cbLight._m0[_2144].z) * _2209) * _1946) + (((((_2109 * _2113) + _837) * cbLight._m0[_2059].z) * _2133) * _1956);
    float _2283;
    float _2285;
    float _2287;
    if (_1996)
    {
        _2283 = _2219;
        _2285 = _2220;
        _2287 = _2221;
    }
    else
    {
        uint _2289 = _1923 + 2u;
        uint _2293 = _1923 + 10u;
        float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _675) * 0.949999988079071044921875);
        float _2308 = _2307 * _2307;
        float _2309 = cbLight._m0[_2289].x + _752;
        float _2310 = cbLight._m0[_2289].y + _753;
        float _2311 = cbLight._m0[_2289].z + _754;
        float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
        float _2316 = _2315 * _2309;
        float _2317 = _2315 * _2310;
        float _2318 = _2315 * _2311;
        float _2319 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2289].xyz));
        float _4343 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2323 = dot(vec3(_672, _673, _674), vec3(_2316, _2317, _2318));
        float _4354 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2327 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2316, _2317, _2318));
        float _4365 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2331 = _2308 * _2308;
        float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
        float _2342 = exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0);
        float _2349 = 1.0 - _2308;
        float _2359 = (0.5 / (((_2088 * ((_2322 * _2349) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2349) + _2308) * _2322))) * _2322;
        float _4376 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2361 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
        float _2362 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2283 = (((((_2342 * _2110) + _834) * cbLight._m0[_2293].x) * _2361) * _2362) + _2219;
        _2285 = (((((_2342 * _2112) + _836) * cbLight._m0[_2293].y) * _2361) * _2362) + _2220;
        _2287 = (((((_2342 * _2113) + _837) * cbLight._m0[_2293].z) * _2361) * _2362) + _2221;
    }
    float _2397;
    float _2399;
    float _2401;
    if (_2014)
    {
        _2397 = _2283;
        _2399 = _2285;
        _2401 = _2287;
    }
    else
    {
        uint _2408 = _1923 + 3u;
        uint _2412 = _1923 + 11u;
        float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2408].w)) * _675) * 0.949999988079071044921875);
        float _2427 = _2426 * _2426;
        float _2428 = cbLight._m0[_2408].x + _752;
        float _2429 = cbLight._m0[_2408].y + _753;
        float _2430 = cbLight._m0[_2408].z + _754;
        float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
        float _2435 = _2434 * _2428;
        float _2436 = _2434 * _2429;
        float _2437 = _2434 * _2430;
        float _2438 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2408].xyz));
        float _4392 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2442 = dot(vec3(_672, _673, _674), vec3(_2435, _2436, _2437));
        float _4403 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2446 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_2435, _2436, _2437));
        float _4414 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2450 = _2427 * _2427;
        float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
        float _2461 = exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0);
        float _2468 = 1.0 - _2427;
        float _2478 = (0.5 / (((_2088 * ((_2441 * _2468) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2468) + _2427) * _2441))) * _2441;
        float _4425 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2480 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
        float _2481 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2397 = (((((_2461 * _2110) + _834) * cbLight._m0[_2412].x) * _2480) * _2481) + _2283;
        _2399 = (((((_2461 * _2112) + _836) * cbLight._m0[_2412].y) * _2480) * _2481) + _2285;
        _2401 = (((((_2461 * _2113) + _837) * cbLight._m0[_2412].z) * _2480) * _2481) + _2287;
    }
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    if (_1921.y == 0u)
    {
        float _2556 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2557 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2556;
        float _2558 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2556;
        float _2559 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2556;
        uvec4 _2571 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2572 = _2571.x;
        uint _2583 = uint((float(_2571.y) * floor(float(uint(cbSceneParam._m0[85u].y * _773) / _2572))) + floor(float(uint(cbSceneParam._m0[85u].x * _772) / _2572)));
        float _2593 = (log2(_2559 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2594 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        uint _2597 = uint(isnan(14.0) ? _2594 : (isnan(_2594) ? 14.0 : min(_2594, 14.0)));
        uvec4 _2602 = texelFetch(g_lightClusterGridBuffer, int(((_2597 << 2u) + (_2583 << 6u)) >> 2u));
        uint _2603 = _2602.x;
        uint _2604 = _2571.z;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        if (((((1u << ((_2604 >> 4u) & 15u)) + 4294967295u) & _2603) == 0u) || ((_2604 & 240u) == 0u))
        {
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
        }
        else
        {
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            uint _2863 = 0u;
            uint _2872;
            bool _2873;
            for (;;)
            {
                _2872 = texelFetch(g_lightClassification, int((((_2597 << 5u) + (_2583 << 9u)) + (_2863 << 2u)) >> 2u)).x;
                _2873 = _2872 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2873)
                {
                    frontier_phi_66_pred = _2857;
                    frontier_phi_66_pred_1 = _2862;
                    frontier_phi_66_pred_2 = _2861;
                    frontier_phi_66_pred_3 = _2860;
                    frontier_phi_66_pred_4 = _2859;
                    frontier_phi_66_pred_5 = _2858;
                }
                else
                {
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    uint _3008;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2872;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    for (;;)
                    {
                        uint _3012 = uint(findLSB(_3008)) + (_2863 << 5u);
                        uint _3009 = (_3008 + 4294967295u) & _3008;
                        uint _3014 = _3012 * 48u;
                        vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 3u)).x));
                        uint _3034 = (_3012 * 48u) + 4u;
                        vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 3u)).x));
                        uint _3053 = (_3012 * 48u) + 8u;
                        vec3 _3064 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3053)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 2u)).x));
                        float _3068 = _3028.x - _2557;
                        float _3069 = _3028.y - _2558;
                        float _3070 = _3028.z - _2559;
                        float _3071 = dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070));
                        float _3074 = inversesqrt(_3071);
                        float _3075 = _3074 * _3068;
                        float _3076 = _3074 * _3069;
                        float _3077 = _3074 * _3070;
                        float _3078 = dot(vec3(_791, _794, _797), vec3(_3075, _3076, _3077));
                        float _3083 = 1.0 - (_3071 * _3028.w);
                        float _4451 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3084 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3085 = sqrt(_3071) * _3047.w;
                        float _3088 = 1.39999997615814208984375 / (_3085 + 1.39999997615814208984375);
                        float _3089 = _3088 * _3088;
                        float _3092 = ((1.0 - _3089) * _3078) + _3089;
                        float _3095 = _3085 * _3085;
                        float _3099 = ((isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0))) * _3084) / ((_3095 * 0.699999988079071044921875) + 1.0);
                        float _3103 = (-0.0) - _2557;
                        float _3104 = (-0.0) - _2558;
                        float _3105 = (-0.0) - _2559;
                        float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                        float _3110 = _3109 * _3103;
                        float _3111 = _3109 * _3104;
                        float _3112 = _3109 * _3105;
                        float _3120 = exp2(log2(1.0 / ((_3095 * 3.5) + 5.0)) * 0.25);
                        float _3121 = 1.0 - _866;
                        float _3128 = sqrt(1.0 - ((1.0 - (_3121 * _3121)) * (1.0 - (_3120 * _3120))));
                        float _3129 = _3128 * _3128;
                        float _3130 = _3129 * _3129;
                        float _3131 = _3110 + _3075;
                        float _3132 = _3111 + _3076;
                        float _3133 = _3112 + _3077;
                        float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                        float _3141 = dot(vec3(_791, _794, _797), vec3(_3110, _3111, _3112));
                        float _4467 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3144 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3145 = dot(vec3(_791, _794, _797), vec3(_3137 * _3131, _3137 * _3132, _3137 * _3133));
                        float _4478 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3148 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3152 = ((_3148 * _3148) * (_3130 + (-1.0))) + 1.0;
                        float _3153 = _3088 * _3129;
                        float _3154 = _3153 * _3153;
                        float _3157 = ((1.0 - _3154) * _3078) + _3154;
                        float _4489 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3158 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3159 = 1.0 - _3129;
                        float _3169 = (0.5 / (((_3158 * ((_3144 * _3159) + _3129)) + 9.9999999392252902907785028219223e-09) + (((_3158 * _3159) + _3129) * _3144))) * _3158;
                        float _4500 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3180 = (((_3130 * 3.1415927410125732421875) * (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) / ((_3152 * _3152) * ((_3095 * 2.1991131305694580078125) + 3.141590118408203125))) * _3084;
                        _2932 = (_3099 * _3047.x) + _3005;
                        _2933 = (_3099 * _3047.y) + _3006;
                        _2934 = (_3099 * _3047.z) + _3007;
                        _2929 = (_3180 * _3064.x) + _3002;
                        _2930 = (_3180 * _3064.y) + _3003;
                        _2931 = (_3180 * _3064.z) + _3004;
                        if (_3009 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _3009;
                        }
                    }
                    frontier_phi_66_pred = _2929;
                    frontier_phi_66_pred_1 = _2934;
                    frontier_phi_66_pred_2 = _2933;
                    frontier_phi_66_pred_3 = _2932;
                    frontier_phi_66_pred_4 = _2931;
                    frontier_phi_66_pred_5 = _2930;
                }
                _2705 = frontier_phi_66_pred;
                _2715 = frontier_phi_66_pred_1;
                _2713 = frontier_phi_66_pred_2;
                _2711 = frontier_phi_66_pred_3;
                _2709 = frontier_phi_66_pred_4;
                _2707 = frontier_phi_66_pred_5;
                uint _2864 = _2863 + 1u;
                if (_2864 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2857 = _2705;
                    _2858 = _2707;
                    _2859 = _2709;
                    _2860 = _2711;
                    _2861 = _2713;
                    _2862 = _2715;
                    _2863 = _2864;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
        }
        uvec4 _2718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2719 = _2718.z;
        uint _2721 = (_2719 >> 8u) & 15u;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        if (((4294967295u << _2721) & _2603) == 0u)
        {
            _2825 = _2704;
            _2827 = _2706;
            _2829 = _2708;
            _2831 = _2710;
            _2833 = _2712;
            _2835 = _2714;
        }
        else
        {
            float _2850 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
            float _2851 = _2850 * _2557;
            float _2852 = _2850 * _2558;
            float _2853 = _2850 * _2559;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2721 < ((_2719 >> 12u) & 15u))
            {
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2985 = _2704;
                float _2986 = _2706;
                float _2987 = _2708;
                float _2988 = _2710;
                float _2989 = _2712;
                float _2990 = _2714;
                uint _2991 = _2721;
                uint _3000;
                bool _3001;
                for (;;)
                {
                    _3000 = texelFetch(g_lightClassification, int((((_2597 << 5u) + (_2583 << 9u)) + (_2991 << 2u)) >> 2u)).x;
                    _3001 = _3000 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3001)
                    {
                        frontier_phi_77_pred = _2990;
                        frontier_phi_77_pred_1 = _2989;
                        frontier_phi_77_pred_2 = _2988;
                        frontier_phi_77_pred_3 = _2987;
                        frontier_phi_77_pred_4 = _2986;
                        frontier_phi_77_pred_5 = _2985;
                    }
                    else
                    {
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3207 = _2985;
                        float _3208 = _2986;
                        float _3209 = _2987;
                        float _3210 = _2988;
                        float _3211 = _2989;
                        float _3212 = _2990;
                        uint _3213 = _3000;
                        uint _3214;
                        vec4 _3239;
                        float _3240;
                        vec4 _3255;
                        vec3 _3267;
                        vec4 _3282;
                        vec4 _3297;
                        float _3343;
                        bool _3344;
                        for (;;)
                        {
                            uint _3224 = ((_2991 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3213));
                            _3214 = (_3213 + 4294967295u) & _3213;
                            uint _3226 = _3224 * 40u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            _3240 = _3239.w;
                            uint _3242 = (_3224 * 40u) + 4u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3257 = (_3224 * 40u) + 8u;
                            _3267 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x));
                            uint _3269 = (_3224 * 40u) + 16u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3284 = (_3224 * 40u) + 20u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3224 * 40u) + 24u;
                            vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3318 = (_3224 * 40u) + 28u;
                            vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            _3343 = fma(_2559, _3331.z, fma(_2558, _3331.y, _3331.x * _2557)) + _3331.w;
                            _3344 = !((fma(_2559, _3312.z, fma(_2558, _3312.y, _3312.x * _2557)) + _3312.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3344)
                            {
                                float _3371 = _3239.x - _2557;
                                float _3372 = _3239.y - _2558;
                                float _3373 = _3239.z - _2559;
                                float _3374 = dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373));
                                float _3377 = inversesqrt(_3374);
                                float _3378 = _3377 * _3371;
                                float _3379 = _3377 * _3372;
                                float _3380 = _3377 * _3373;
                                float _3384 = 1.0 - (_3374 / (_3240 * _3240));
                                float _4511 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3385 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3389 = sqrt(_3374) * _3255.w;
                                float _3391 = 1.39999997615814208984375 / (_3389 + 1.39999997615814208984375);
                                float _3392 = _3391 * _3391;
                                float _3395 = ((1.0 - _3392) * dot(vec3(_3378, _3379, _3380), vec3(_791, _794, _797))) + _3392;
                                float _3398 = _3389 * _3389;
                                float _3402 = (fma(_2559, _3282.z, fma(_2558, _3282.y, _3282.x * _2557)) + _3282.w) / _3343;
                                float _3403 = (fma(_2559, _3297.z, fma(_2558, _3297.y, _3297.x * _2557)) + _3297.w) / _3343;
                                float _3407 = 1.0 - dot(vec2(_3402, _3403), vec2(_3402, _3403));
                                float _4527 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3408 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3409 = _3408 * (((isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0))) * _3385) / ((_3398 * 0.699999988079071044921875) + 1.0));
                                float _3421 = exp2(log2(1.0 / ((_3398 * 3.5) + 5.0)) * 0.25);
                                float _3422 = 1.0 - _866;
                                float _3429 = sqrt(1.0 - ((1.0 - (_3422 * _3422)) * (1.0 - (_3421 * _3421))));
                                float _3430 = _3429 * _3429;
                                float _3431 = _3430 * _3430;
                                float _3432 = _3378 - _2851;
                                float _3433 = _3379 - _2852;
                                float _3434 = _3380 - _2853;
                                float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                                float _3442 = dot(vec3(_791, _794, _797), vec3((-0.0) - _2851, (-0.0) - _2852, (-0.0) - _2853));
                                float _4538 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3445 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3446 = dot(vec3(_791, _794, _797), vec3(_3438 * _3432, _3438 * _3433, _3438 * _3434));
                                float _4549 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3449 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3453 = ((_3449 * _3449) * (_3431 + (-1.0))) + 1.0;
                                float _3454 = _3391 * _3430;
                                float _3455 = _3454 * _3454;
                                float _3461 = ((1.0 - _3455) * dot(vec3(_791, _794, _797), vec3(_3378, _3379, _3380))) + _3455;
                                float _4560 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3462 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3463 = 1.0 - _3430;
                                float _3473 = (0.5 / (((_3462 * ((_3445 * _3463) + _3430)) + 9.9999999392252902907785028219223e-09) + (((_3462 * _3463) + _3430) * _3445))) * _3462;
                                float _4571 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3483 = (_3408 * _3385) * (((_3431 * 3.1415927410125732421875) * (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) / ((_3453 * _3453) * ((_3398 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3409 * _3255.y;
                                frontier_phi_83_pred_1 = _3409 * _3255.x;
                                frontier_phi_83_pred_2 = _3483 * _3267.z;
                                frontier_phi_83_pred_3 = _3483 * _3267.y;
                                frontier_phi_83_pred_4 = _3483 * _3267.x;
                                frontier_phi_83_pred_5 = _3409 * _3255.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3491 = frontier_phi_83_pred;
                            _3490 = frontier_phi_83_pred_1;
                            _3489 = frontier_phi_83_pred_2;
                            _3488 = frontier_phi_83_pred_3;
                            _3487 = frontier_phi_83_pred_4;
                            _3492 = frontier_phi_83_pred_5;
                            _3197 = _3490 + _3210;
                            _3198 = _3491 + _3211;
                            _3199 = _3492 + _3212;
                            _3194 = _3487 + _3207;
                            _3195 = _3488 + _3208;
                            _3196 = _3489 + _3209;
                            if (_3214 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3214;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3199;
                        frontier_phi_77_pred_1 = _3198;
                        frontier_phi_77_pred_2 = _3197;
                        frontier_phi_77_pred_3 = _3196;
                        frontier_phi_77_pred_4 = _3195;
                        frontier_phi_77_pred_5 = _3194;
                    }
                    _2836 = frontier_phi_77_pred;
                    _2834 = frontier_phi_77_pred_1;
                    _2832 = frontier_phi_77_pred_2;
                    _2830 = frontier_phi_77_pred_3;
                    _2828 = frontier_phi_77_pred_4;
                    _2826 = frontier_phi_77_pred_5;
                    uint _2992 = _2991 + 1u;
                    if (_2992 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2985 = _2826;
                        _2986 = _2828;
                        _2987 = _2830;
                        _2988 = _2832;
                        _2989 = _2834;
                        _2990 = _2836;
                        _2991 = _2992;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2830;
                frontier_phi_58_59_ladder_1 = _2836;
                frontier_phi_58_59_ladder_2 = _2834;
                frontier_phi_58_59_ladder_3 = _2832;
                frontier_phi_58_59_ladder_4 = _2828;
                frontier_phi_58_59_ladder_5 = _2826;
            }
            else
            {
                frontier_phi_58_59_ladder = _2708;
                frontier_phi_58_59_ladder_1 = _2714;
                frontier_phi_58_59_ladder_2 = _2712;
                frontier_phi_58_59_ladder_3 = _2710;
                frontier_phi_58_59_ladder_4 = _2706;
                frontier_phi_58_59_ladder_5 = _2704;
            }
            _2825 = frontier_phi_58_59_ladder_5;
            _2827 = frontier_phi_58_59_ladder_4;
            _2829 = frontier_phi_58_59_ladder;
            _2831 = frontier_phi_58_59_ladder_3;
            _2833 = frontier_phi_58_59_ladder_2;
            _2835 = frontier_phi_58_59_ladder_1;
        }
        float _2840 = isnan(1.0) ? _850 : (isnan(_850) ? 1.0 : min(_850, 1.0));
        _2616 = (_2840 * _2831) + _2052;
        _2618 = (_2840 * _2833) + _2054;
        _2620 = (_2840 * _2835) + _2056;
        _2622 = ((_2825 * _834) * _2840) + _2397;
        _2624 = ((_2827 * _836) * _2840) + _2399;
        _2626 = ((_2829 * _837) * _2840) + _2401;
    }
    else
    {
        _2616 = _2052;
        _2618 = _2054;
        _2620 = _2056;
        _2622 = _2397;
        _2624 = _2399;
        _2626 = _2401;
    }
    float _4587 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4598 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4609 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _2643 = ((isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2616 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _850))) + ((_2622 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    float _2644 = ((isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2618 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _850))) + ((_2624 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    float _2645 = ((isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2620 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _850))) + ((_2626 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    uint _2646 = _242 + 6u;
    float _2654 = _772 / cbSceneParam._m0[86u].x;
    float _2655 = _773 / cbSceneParam._m0[86u].y;
    vec4 _2669 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2654, _2655, (log2((isnan(cbSceneParam._m0[77u].w) ? _694 : (isnan(_694) ? cbSceneParam._m0[77u].w : min(_694, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2671 = _2669.x;
    float _2672 = _2669.y;
    float _2673 = _2669.z;
    float _2674 = _2669.w;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    if (_694 > cbSceneParam._m0[78u].w)
    {
        float _2729 = isnan(_694) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _694 : min(cbSceneParam._m0[80u].w, _694));
        float _2730 = _2729 / _694;
        float _2741 = _2730 * _745;
        float _2742 = _746 * _2730;
        float _2743 = (-0.0) - _2742;
        float _2745 = _2730 * _747;
        float _2747 = (cbSceneParam._m0[77u].w * _2743) / _2729;
        float _2748 = _2747 + cbSceneParam._m0[79u].w;
        float _2749 = cbSceneParam._m0[79u].w - _2742;
        float _2755 = sqrt(((_2741 * _2741) + (_2742 * _2742)) + (_2745 * _2745));
        float _2758 = (1.0 - (cbSceneParam._m0[77u].w / _2729)) * _2755;
        float _2763 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2765 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2942;
        if (abs((_2743 - _2747) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2942 = ((((_2748 > 0.0) ? exp2(_2763 * _2748) : (2.0 - exp2(_2765 * _2748))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2758;
        }
        else
        {
            float _2886 = 1.0 / cbSceneParam._m0[80u].x;
            float _2887 = isnan(_2749) ? _2748 : (isnan(_2748) ? _2749 : max(_2748, _2749));
            float _2888 = isnan(_2749) ? _2748 : (isnan(_2748) ? _2749 : min(_2748, _2749));
            float _2897 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : min(_2887, 0.0));
            float _2898 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : min(_2888, 0.0));
            _2942 = ((abs(_2755 / _2743) * cbSceneParam._m0[80u].y) * ((((_2897 - _2898) * 2.0) - ((exp2(_2763 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0)))) - exp2(_2763 * (isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0))))) * _2886)) - ((exp2(_2765 * _2897) - exp2(_2765 * _2898)) * _2886))) + (_2758 * cbSceneParam._m0[80u].z);
        }
        vec4 _2944 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2654, _2655, 1.0), 0.0);
        float _2953 = exp2((_2942 * (-1.44269502162933349609375)) * (1.0 - _2944.w));
        float _2954 = log2(_2953);
        float _2970 = log2(_2674);
        _2767 = (exp2(_2970 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].x)) * _2944.x) / cbSceneParam._m0[78u].x)) + _2671;
        _2769 = (exp2(_2970 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].y)) * _2944.y) / cbSceneParam._m0[78u].y)) + _2672;
        _2771 = (exp2(_2970 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].z)) * _2944.z) / cbSceneParam._m0[78u].z)) + _2673;
        _2773 = _2953 * _2674;
    }
    else
    {
        _2767 = _2671;
        _2769 = _2672;
        _2771 = _2673;
        _2773 = _2674;
    }
    bool _2980;
    vec4 _2783;
    vec4 _2805;
    float _2807;
    float _2811;
    float _2812;
    float _2813;
    float _2814;
    bool _2824;
    for (;;)
    {
        _2783 = cbMatDynParam._m0[0u];
        float _2785 = roundEven(_2783.y);
        bool _2786 = _2785 == 3.0;
        float _2787 = log2(_2773);
        float _2794 = exp2(_2787 * cbSceneParam._m0[78u].x) * _2643;
        float _2795 = exp2(_2787 * cbSceneParam._m0[78u].y) * _2644;
        float _2796 = exp2(_2787 * cbSceneParam._m0[78u].z) * _2645;
        float _2803 = _761 + (-0.5);
        _2805 = cbMtdParam._m0[1u];
        _2807 = _2805.y * _2803;
        float _2810 = (_2785 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2811 = _2810 * (_2786 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2767)));
        _2812 = _2810 * (_2786 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2769)));
        _2813 = _2810 * (_2786 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2771)));
        _2814 = _2803 * 0.999000012874603271484375;
        _2824 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2824)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _2814) < 0.5)
            {
                _2980 = true;
                break;
            }
        }
        uint _2921 = _810 + uint(_2783.w);
        if ((cbInstanceData._m0[_2921].w < 1.0) && ((cbInstanceData._m0[_2921].w + _2814) < 0.5))
        {
            _2980 = true;
            break;
        }
        if ((_2807 + 1.0) < _2805.x)
        {
            _2980 = true;
            break;
        }
        _2980 = false;
        break;
    }
    float _3185;
    if (_2980)
    {
        discard_state = true;
        _3185 = 0.0;
    }
    else
    {
        _3185 = cbInstanceData._m0[_2646].w;
    }
    SV_Target.x = _2811;
    SV_Target.y = _2812;
    SV_Target.z = _2813;
    SV_Target.w = _3185;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2646].w;
    discard_exit();
}


