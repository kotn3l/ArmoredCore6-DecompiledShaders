#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1240;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _366 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _366) * cbMtdParam._m0[24u].y) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3592 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _391 = (_384 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _392 = (_384 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _393 = (_384 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _425 = _423.x;
    float _426 = _423.y;
    float _427 = _423.z;
    float _436 = ((_406.z - _427) * _384) + _427;
    float _439 = ((((_406.x - _425) * _384) + _425) * 2.0) + (-1.0);
    float _441 = ((((_406.y - _426) * _384) + _426) * 2.0) + (-1.0);
    float _442 = dot(vec2(_439, _441), vec2(_439, _441));
    float _3603 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _447 = sqrt(1.0 - (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))));
    vec4 _460 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _476 = _474.x;
    float _477 = 1.0 - _476;
    float _505 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_476 - _477) * cbMtdParam._m0[24u].w) + _477) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3614 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _514 = ((((cbMtdParam._m0[10u].x - _391) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _506) + _391;
    float _515 = ((((cbMtdParam._m0[10u].y - _392) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _506) + _392;
    float _516 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _393)) * _506) + _393;
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _544 = _542.x;
    float _562 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _544) * _384) + _544;
    float _566 = ((_528.x - _562) * cbMtdParam._m0[19u].z) + _562;
    float _568 = _566 - (_566 * _506);
    float _572 = ((cbMtdParam._m0[23u].y - _436) * _506) + _436;
    vec4 _591 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _593 = _591.x;
    float _594 = _591.y;
    float _598 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_235, _236, _237, 0.0));
    vec4 _613 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _266) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _267) + cbTextureTilingScale._m0[18u].w));
    float _615 = _613.x;
    float _620 = fract(_613.w + cbPerFrame._m0[22u].x);
    float _622 = (1.0 - _620) * _615;
    float _627 = ((_620 + (-1.0)) + _615) * 9.0;
    float _629 = ((_615 + (-1.0)) + _620) * 9.0;
    float _630 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _631 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _645 = (_622 * ((_613.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _630 : (isnan(_630) ? 3.0 : min(_630, 3.0))) * 3.1415927410125732421875);
    float _647 = (_622 * ((_613.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _631 : (isnan(_631) ? 3.0 : min(_631, 3.0))) * 3.1415927410125732421875);
    float _651 = inversesqrt(dot(vec3(_645, _647, 1.0), vec3(_645, _647, 1.0)));
    float _667 = (((((0.5 - _593) + ((_645 * 0.5) * _651)) * _598) + _593) * 2.0) + (-1.0);
    float _668 = (((((0.5 - _594) + ((_651 * 0.5) * _647)) * _598) + _594) * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _3645 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _685 = ((((cbMtdParam._m0[22u].z * _439) - _439) + _667) * _506) + _439;
    float _686 = ((((cbMtdParam._m0[22u].z * _441) - _441) + _668) * _506) + _441;
    float _687 = (_506 * (sqrt(1.0 - (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) - _447)) + _447;
    float _689 = cbMtdParam._m0[22u].x + _460.w;
    float _692 = fma(_687, _235, fma(_686, _241 * TANGENT.x, (_227 * _219) * _685));
    float _695 = fma(_687, _236, fma(_686, _241 * TANGENT.y, (_227 * _220) * _685));
    float _698 = fma(_687, _237, fma(_686, _241 * TANGENT.z, (_227 * _221) * _685));
    float _702 = inversesqrt(dot(vec3(_692, _695, _698), vec3(_692, _695, _698)));
    float _703 = _702 * _692;
    float _704 = _702 * _695;
    float _705 = _702 * _698;
    float _3656 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _706 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _3667 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3678 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3689 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3700 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3711 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _711 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _725 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _775 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _765);
    float _776 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _765);
    float _777 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _765);
    float _781 = inversesqrt(dot(vec3(_775, _776, _777), vec3(_775, _776, _777)));
    float _782 = _775 * _781;
    float _783 = _776 * _781;
    float _784 = _777 * _781;
    float _790 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _791 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _809 = fma(_705, cbSceneParam._m0[5u].z, fma(_704, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _703));
    float _812 = fma(_705, cbSceneParam._m0[6u].z, fma(_704, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _703));
    float _815 = fma(_705, cbSceneParam._m0[7u].z, fma(_704, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _703));
    uint _829 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _835 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * cbInstanceData._m0[_829].x;
    float _836 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) * cbInstanceData._m0[_829].y;
    float _837 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) * cbInstanceData._m0[_829].z;
    float _3722 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _3744 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _841 = 1.0 - _711;
    float _842 = _838 * _841;
    float _843 = _839 * _841;
    float _844 = _840 * _841;
    float _849 = (_838 + (-0.039999999105930328369140625)) * _711;
    float _850 = (_839 + (-0.039999999105930328369140625)) * _711;
    float _851 = (_840 + (-0.039999999105930328369140625)) * _711;
    float _852 = _849 + 0.039999999105930328369140625;
    float _854 = _850 + 0.039999999105930328369140625;
    float _855 = _851 + 0.039999999105930328369140625;
    vec4 _864 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _790, cbSceneParam._m0[86u].y * _791));
    float _868 = ((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * TEXCOORD_5.w) * _864.x;
    float _869 = dot(vec3(_703, _704, _705), vec3(_782, _783, _784));
    float _872 = _869 * 2.0;
    float _876 = (_872 * _703) - _782;
    float _877 = (_872 * _704) - _783;
    float _878 = (_872 * _705) - _784;
    float _882 = abs(dot(vec3(_782, _783, _784), vec3(_703, _704, _705)));
    float _3755 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _884 = sqrt(_706);
    float _896 = exp2((_884 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_884 * 3.0));
    float _902 = (1.0 - _896) * ((_884 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _903 = _896 * _884;
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1239;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _965 = fma(_939, cbModelParam._m0[26u].z, fma(_935, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931));
        float _969 = fma(_939, cbModelParam._m0[27u].z, fma(_935, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931));
        float _973 = fma(_939, cbModelParam._m0[28u].z, fma(_935, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931));
        float _997 = _931 + _703;
        float _998 = _935 + _704;
        float _999 = _939 + _705;
        float _1009 = fma(_999, cbModelParam._m0[26u].z, fma(_998, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _997)) - _965;
        float _1010 = fma(_999, cbModelParam._m0[27u].z, fma(_998, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _997)) - _969;
        float _1011 = fma(_999, cbModelParam._m0[28u].z, fma(_998, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _997)) - _973;
        float _1015 = inversesqrt(dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011)));
        float _1028 = ((_1015 * _1009) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_965 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1015 * _1010) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_969 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1015 * _1011) / cbModelParam._m0[34u].z) + ((((((_973 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        float _1067 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1033.x + (-0.5));
        float _1069 = _1067 * (_1033.y + (-0.5));
        float _1070 = _1067 * (_1033.z + (-0.5));
        float _1077 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1040.x + (-0.5));
        float _1079 = _1077 * (_1040.y + (-0.5));
        float _1080 = _1077 * (_1040.z + (-0.5));
        float _1087 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1047.x + (-0.5));
        float _1089 = _1087 * (_1047.y + (-0.5));
        float _1090 = _1087 * (_1047.z + (-0.5));
        float _1097 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1054.x + (-0.5));
        float _1099 = _1097 * (_1054.y + (-0.5));
        float _1100 = _1097 * (_1054.z + (-0.5));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = _1068 * 0.5;
        float _1105 = _1078 * 0.5;
        float _1106 = _1088 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1121 = (dot(vec3(_703, _704, _705), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1131 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3803 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1133 + 1.0))) + _1138) * _1101;
        float _1148 = _1069 * 0.5;
        float _1149 = _1079 * 0.5;
        float _1150 = _1089 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_703, _704, _705), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3836 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1175 + 1.0))) + _1180) * _1102;
        float _1190 = _1070 * 0.5;
        float _1191 = _1080 * 0.5;
        float _1192 = _1090 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_703, _704, _705), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3869 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1217 + 1.0))) + _1222) * _1103;
        _1239 = _1070;
        _1241 = _1069;
        _1242 = _1068;
        _1243 = _1080;
        _1244 = _1079;
        _1245 = _1078;
        _1246 = _1090;
        _1247 = _1089;
        _1248 = _1088;
        _1249 = _1103;
        _1250 = _1102;
        _1251 = _1101;
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
    }
    else
    {
        _1239 = _1240;
        _1241 = _1240;
        _1242 = _1240;
        _1243 = _1240;
        _1244 = _1240;
        _1245 = _1240;
        _1246 = _1240;
        _1247 = _1240;
        _1248 = _1240;
        _1249 = _1240;
        _1250 = _1240;
        _1251 = _1240;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1279 = fma(_939, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931));
        float _1283 = fma(_939, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931));
        float _1287 = fma(_939, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931));
        float _1310 = _931 + _703;
        float _1311 = _935 + _704;
        float _1312 = _939 + _705;
        float _1322 = fma(_1312, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1310)) - _1279;
        float _1323 = fma(_1312, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1310)) - _1283;
        float _1324 = fma(_1312, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1310)) - _1287;
        float _1328 = inversesqrt(dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324)));
        float _1341 = ((_1328 * _1322) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1279 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1328 * _1323) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1283 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1328 * _1324) / cbModelParam._m0[35u].z) + ((((((_1287 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        float _1378 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1345.x + (-0.5));
        float _1380 = _1378 * (_1345.y + (-0.5));
        float _1381 = _1378 * (_1345.z + (-0.5));
        float _1388 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1352.x + (-0.5));
        float _1390 = _1388 * (_1352.y + (-0.5));
        float _1391 = _1388 * (_1352.z + (-0.5));
        float _1398 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1359.x + (-0.5));
        float _1400 = _1398 * (_1359.y + (-0.5));
        float _1401 = _1398 * (_1359.z + (-0.5));
        float _1408 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1366.x + (-0.5));
        float _1410 = _1408 * (_1366.y + (-0.5));
        float _1411 = _1408 * (_1366.z + (-0.5));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = _1379 * 0.5;
        float _1416 = _1389 * 0.5;
        float _1417 = _1399 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_703, _704, _705), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3932 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1442 + 1.0))) + _1447) * _1412;
        float _1457 = _1380 * 0.5;
        float _1458 = _1390 * 0.5;
        float _1459 = _1400 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_703, _704, _705), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _3965 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1484 + 1.0))) + _1489) * _1413;
        float _1499 = _1381 * 0.5;
        float _1500 = _1391 * 0.5;
        float _1501 = _1401 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_703, _704, _705), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _3998 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1526 + 1.0))) + _1531) * _1414;
        _1548 = _1381;
        _1549 = _1380;
        _1550 = _1379;
        _1551 = _1391;
        _1552 = _1390;
        _1553 = _1389;
        _1554 = _1401;
        _1555 = _1400;
        _1556 = _1399;
        _1557 = _1414;
        _1558 = _1413;
        _1559 = _1412;
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
    }
    else
    {
        _1548 = _1240;
        _1549 = _1240;
        _1550 = _1240;
        _1551 = _1240;
        _1552 = _1240;
        _1553 = _1240;
        _1554 = _1240;
        _1555 = _1240;
        _1556 = _1240;
        _1557 = _1240;
        _1558 = _1240;
        _1559 = _1240;
        _1560 = 0.0;
        _1561 = 0.0;
        _1562 = 0.0;
    }
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1252)) + _1252;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1253)) + _1253;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1254)) + _1254;
    float _1595 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1572));
    float _1616 = _876 * 0.5;
    float _1617 = _877 * 0.5;
    float _1618 = _878 * 0.5;
    float _1619 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1622 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1625 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1659;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1632 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1239, _1243, _1246, _1249));
        float _1636 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1640 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1647 = dot(vec4(cbModelParam._m0[39u]), vec4(_1616, _1617, _1618, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1670;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1661 = dot(vec4(cbModelParam._m0[40u]), vec4(_1616, _1617, _1618, 1.0));
        _1670 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1670 = 1.0;
    }
    float _1674 = (_1670 * cbModelParam._m0[1u].x) + (_1659 * (1.0 - cbModelParam._m0[1u].x));
    float _1684 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _706);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1684 : min(cbModelParam._m0[25u].z, _1684));
    float _1767;
    float _1769;
    float _1771;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1734 = fma(_939, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _931)) + cbModelParam._m0[13u].w;
        float _1738 = fma(_939, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _931)) + cbModelParam._m0[14u].w;
        float _1742 = fma(_939, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _931)) + cbModelParam._m0[15u].w;
        float _1745 = fma(_878, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876));
        float _1748 = fma(_878, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876));
        float _1751 = fma(_878, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876));
        float _1779;
        if (_1745 > 0.0)
        {
            _1779 = abs((1.0 - _1734) / _1745);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1734 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1779 = frontier_phi_14_12_ladder;
        }
        float _2003;
        if (_1748 > 0.0)
        {
            _2003 = abs((1.0 - _1738) / _1748);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1738 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2003 = frontier_phi_23_19_ladder;
        }
        float _2260;
        if (_1751 > 0.0)
        {
            _2260 = abs((1.0 - _1742) / _1751);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1742 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2260 = frontier_phi_35_30_ladder;
        }
        float _2262 = isnan(_2003) ? _1779 : (isnan(_1779) ? _2003 : min(_1779, _2003));
        float _2263 = isnan(_2260) ? _2262 : (isnan(_2262) ? _2260 : min(_2262, _2260));
        float _2267 = (_2263 * _1745) + _1734;
        float _2268 = (_2263 * _1748) + _1738;
        float _2269 = (_2263 * _1751) + _1742;
        float _2270 = _2263 * 9.9999997473787516355514526367188e-05;
        float _2272 = (-1.0) - _2270;
        float _2274 = _2270 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2269 > _2274) || ((_2269 < _2272) || ((_2268 > _2274) || ((_2268 < _2272) || ((_2267 < _2272) || (_2267 > _2274))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2269, cbModelParam._m0[9u].z, fma(_2268, cbModelParam._m0[9u].y, _2267 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2269, cbModelParam._m0[10u].z, fma(_2268, cbModelParam._m0[10u].y, _2267 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2269, cbModelParam._m0[11u].z, fma(_2268, cbModelParam._m0[11u].y, _2267 * cbModelParam._m0[11u].x))), _1685);
            frontier_phi_13_35_ladder = _2397.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2397.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2397.x * cbModelParam._m0[1u].y;
        }
        _1767 = frontier_phi_13_35_ladder_2;
        _1769 = frontier_phi_13_35_ladder_1;
        _1771 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_876, _877, _878), _1685);
        _1767 = _1755.x * cbModelParam._m0[1u].y;
        _1769 = _1755.y * cbModelParam._m0[1u].y;
        _1771 = _1755.z * cbModelParam._m0[1u].y;
    }
    float _1775 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _706);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1775 : min(cbModelParam._m0[25u].w, _1775));
    float _1866;
    float _1868;
    float _1870;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1830 = fma(_939, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _931)) + cbModelParam._m0[21u].w;
        float _1834 = fma(_939, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _931)) + cbModelParam._m0[22u].w;
        float _1838 = fma(_939, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _931)) + cbModelParam._m0[23u].w;
        float _1841 = fma(_878, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876));
        float _1844 = fma(_878, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876));
        float _1847 = fma(_878, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876));
        float _2008;
        if (_1841 > 0.0)
        {
            _2008 = abs((1.0 - _1830) / _1841);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1830 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2008 = frontier_phi_25_21_ladder;
        }
        float _2287;
        if (_1844 > 0.0)
        {
            _2287 = abs((1.0 - _1834) / _1844);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1834 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2287 = frontier_phi_37_32_ladder;
        }
        float _2500;
        if (_1847 > 0.0)
        {
            _2500 = abs((1.0 - _1838) / _1847);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1838 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2500 = frontier_phi_46_43_ladder;
        }
        float _2502 = isnan(_2287) ? _2008 : (isnan(_2008) ? _2287 : min(_2008, _2287));
        float _2503 = isnan(_2500) ? _2502 : (isnan(_2502) ? _2500 : min(_2502, _2500));
        float _2507 = (_2503 * _1841) + _1830;
        float _2508 = (_2503 * _1844) + _1834;
        float _2509 = (_2503 * _1847) + _1838;
        float _2510 = _2503 * 9.9999997473787516355514526367188e-05;
        float _2511 = (-1.0) - _2510;
        float _2513 = _2510 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2509 > _2513) || ((_2509 < _2511) || ((_2508 > _2513) || ((_2508 < _2511) || ((_2507 < _2511) || (_2507 > _2513))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2708 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2509, cbModelParam._m0[17u].z, fma(_2508, cbModelParam._m0[17u].y, _2507 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2509, cbModelParam._m0[18u].z, fma(_2508, cbModelParam._m0[18u].y, _2507 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2509, cbModelParam._m0[19u].z, fma(_2508, cbModelParam._m0[19u].y, _2507 * cbModelParam._m0[19u].x))), _1776);
            frontier_phi_22_46_ladder = _2708.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2708.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2708.x * cbModelParam._m0[1u].z;
        }
        _1866 = frontier_phi_22_46_ladder_2;
        _1868 = frontier_phi_22_46_ladder_1;
        _1870 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_876, _877, _878), _1776);
        _1866 = _1850.x * cbModelParam._m0[1u].z;
        _1868 = _1850.y * cbModelParam._m0[1u].z;
        _1870 = _1850.z * cbModelParam._m0[1u].z;
    }
    float _1883 = (((_902 * _852) + _903) * _868) * ((cbModelParam._m0[1u].w * (_1866 - _1767)) + _1767);
    float _1885 = (((_902 * _854) + _903) * _868) * ((cbModelParam._m0[1u].w * (_1868 - _1769)) + _1769);
    float _1887 = (((_902 * _855) + _903) * _868) * ((cbModelParam._m0[1u].w * (_1870 - _1771)) + _1771);
    float _1890 = fma(_1887, cbSceneParam._m0[89u].z, fma(_1885, cbSceneParam._m0[89u].y, _1883 * cbSceneParam._m0[89u].x));
    float _1893 = fma(_1887, cbSceneParam._m0[90u].z, fma(_1885, cbSceneParam._m0[90u].y, _1883 * cbSceneParam._m0[90u].x));
    float _1896 = fma(_1887, cbSceneParam._m0[91u].z, fma(_1885, cbSceneParam._m0[91u].y, _1883 * cbSceneParam._m0[91u].x));
    vec4 _1904 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_790, _791));
    float _1906 = _1904.w;
    float _1918 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1906);
    float _1919 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1906);
    float _1920 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1906);
    uvec4 _1924 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1926 = _1924.x * 14u;
    uint _1927 = _1926 + 13u;
    float _1934 = _868 + (-1.0);
    float _1939 = (cbLight._m0[_1927].x * _1934) + 1.0;
    float _1940 = (cbLight._m0[_1927].y * _1934) + 1.0;
    float _1941 = (cbLight._m0[_1927].z * _1934) + 1.0;
    float _1942 = (cbLight._m0[_1927].w * _1934) + 1.0;
    uint _1943 = _1926 + 5u;
    float _1949 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
    uint _1953 = _1926 + 4u;
    float _1962 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
    uint _1966 = _1926 | 1u;
    float _1977 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_703, _704, _705));
    float _1980 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_703, _704, _705));
    float _4134 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _4145 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1985 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * 0.3183098733425140380859375;
    float _1987 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * 0.3183098733425140380859375;
    float _1994 = ((cbLight._m0[_1943].x * _1949) * _1987) + (((cbLight._m0[_1953].x * _1918) * _1962) * _1985);
    float _1995 = ((_1949 * cbLight._m0[_1943].y) * _1987) + (((cbLight._m0[_1953].y * _1919) * _1962) * _1985);
    float _1996 = ((_1949 * cbLight._m0[_1943].z) * _1987) + (((cbLight._m0[_1953].z * _1920) * _1962) * _1985);
    uvec4 _2000 = floatBitsToUint(cbLight._m0[_1926 + 12u]);
    bool _2002 = _2000.x == 0u;
    float _2013;
    float _2015;
    float _2017;
    if (_2002)
    {
        _2013 = _1994;
        _2015 = _1995;
        _2017 = _1996;
    }
    else
    {
        uint _2021 = _1926 + 6u;
        float _2037 = (dot(vec3(cbLight._m0[_1926 + 2u].xyz), vec3(_703, _704, _705)) * 0.5) + 0.5;
        float _2038 = _2037 * _2037;
        float _4156 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2039 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2040 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2013 = (((cbLight._m0[_2021].x * 0.3183098733425140380859375) * _2039) * _2040) + _1994;
        _2015 = (((cbLight._m0[_2021].y * 0.3183098733425140380859375) * _2039) * _2040) + _1995;
        _2017 = (((cbLight._m0[_2021].z * 0.3183098733425140380859375) * _2039) * _2040) + _1996;
    }
    bool _2020 = _2000.y == 0u;
    float _2058;
    float _2060;
    float _2062;
    if (_2020)
    {
        _2058 = _2013;
        _2060 = _2015;
        _2062 = _2017;
    }
    else
    {
        uint _2231 = _1926 + 7u;
        float _2247 = (dot(vec3(cbLight._m0[_1926 + 3u].xyz), vec3(_703, _704, _705)) * 0.5) + 0.5;
        float _2248 = _2247 * _2247;
        float _4172 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2249 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2250 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2058 = (((cbLight._m0[_2231].x * 0.3183098733425140380859375) * _2249) * _2250) + _2013;
        _2060 = (((cbLight._m0[_2231].y * 0.3183098733425140380859375) * _2249) * _2250) + _2015;
        _2062 = (((cbLight._m0[_2231].z * 0.3183098733425140380859375) * _2249) * _2250) + _2017;
    }
    uint _2065 = _1926 + 8u;
    float _2078 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _706) * 0.949999988079071044921875);
    float _2079 = _2078 * _2078;
    float _2080 = cbLight._m0[_1926].x + _782;
    float _2081 = cbLight._m0[_1926].y + _783;
    float _2082 = cbLight._m0[_1926].z + _784;
    float _2086 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
    float _2087 = _2086 * _2080;
    float _2088 = _2086 * _2081;
    float _2089 = _2086 * _2082;
    float _2090 = dot(vec3(_703, _704, _705), vec3(cbLight._m0[_1926].xyz));
    float _4188 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _4199 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2094 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2095 = dot(vec3(_703, _704, _705), vec3(_2087, _2088, _2089));
    float _4210 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _2099 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_2087, _2088, _2089));
    float _4221 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2103 = _2079 * _2079;
    float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
    float _2115 = exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0);
    float _2116 = 0.959999978542327880859375 - _849;
    float _2118 = 0.959999978542327880859375 - _850;
    float _2119 = 0.959999978542327880859375 - _851;
    float _2126 = 1.0 - _2079;
    float _2137 = (0.5 / (((_2094 * ((_2093 * _2126) + _2079)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2126) + _2079) * _2093))) * _2093;
    float _4232 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2139 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
    uint _2153 = _1926 + 9u;
    float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _706) * 0.949999988079071044921875);
    float _2165 = _2164 * _2164;
    float _2166 = cbLight._m0[_1966].x + _782;
    float _2167 = cbLight._m0[_1966].y + _783;
    float _2168 = cbLight._m0[_1966].z + _784;
    float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
    float _2173 = _2172 * _2166;
    float _2174 = _2172 * _2167;
    float _2175 = _2172 * _2168;
    float _2176 = dot(vec3(_703, _704, _705), vec3(cbLight._m0[_1966].xyz));
    float _4243 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2180 = dot(vec3(_703, _704, _705), vec3(_2173, _2174, _2175));
    float _4254 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _2184 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_2173, _2174, _2175));
    float _4265 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2188 = _2165 * _2165;
    float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
    float _2199 = exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0);
    float _2206 = 1.0 - _2165;
    float _2216 = (0.5 / (((_2094 * ((_2179 * _2206) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2206) + _2165) * _2179))) * _2179;
    float _4276 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2218 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
    float _2228 = (((((_2199 * _2116) + _852) * cbLight._m0[_2153].x) * _2218) * _1949) + ((((cbLight._m0[_2065].x * _1918) * ((_2115 * _2116) + _852)) * _2139) * _1962);
    float _2229 = (((((_2199 * _2118) + _854) * cbLight._m0[_2153].y) * _2218) * _1949) + ((((cbLight._m0[_2065].y * _1919) * ((_2115 * _2118) + _854)) * _2139) * _1962);
    float _2230 = (((((_2199 * _2119) + _855) * cbLight._m0[_2153].z) * _2218) * _1949) + ((((cbLight._m0[_2065].z * _1920) * ((_2115 * _2119) + _855)) * _2139) * _1962);
    float _2292;
    float _2294;
    float _2296;
    if (_2002)
    {
        _2292 = _2228;
        _2294 = _2229;
        _2296 = _2230;
    }
    else
    {
        uint _2298 = _1926 + 2u;
        uint _2302 = _1926 + 10u;
        float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _706) * 0.949999988079071044921875);
        float _2317 = _2316 * _2316;
        float _2318 = cbLight._m0[_2298].x + _782;
        float _2319 = cbLight._m0[_2298].y + _783;
        float _2320 = cbLight._m0[_2298].z + _784;
        float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
        float _2325 = _2324 * _2318;
        float _2326 = _2324 * _2319;
        float _2327 = _2324 * _2320;
        float _2328 = dot(vec3(_703, _704, _705), vec3(cbLight._m0[_2298].xyz));
        float _4287 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2332 = dot(vec3(_703, _704, _705), vec3(_2325, _2326, _2327));
        float _4298 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2336 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2325, _2326, _2327));
        float _4309 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2340 = _2317 * _2317;
        float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
        float _2351 = exp2(log2(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * 5.0);
        float _2358 = 1.0 - _2317;
        float _2368 = (0.5 / (((_2094 * ((_2331 * _2358) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2358) + _2317) * _2331))) * _2331;
        float _4320 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2370 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
        float _2371 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2292 = (((((_2351 * _2116) + _852) * cbLight._m0[_2302].x) * _2370) * _2371) + _2228;
        _2294 = (((((_2351 * _2118) + _854) * cbLight._m0[_2302].y) * _2370) * _2371) + _2229;
        _2296 = (((((_2351 * _2119) + _855) * cbLight._m0[_2302].z) * _2370) * _2371) + _2230;
    }
    float _2406;
    float _2408;
    float _2410;
    if (_2020)
    {
        _2406 = _2292;
        _2408 = _2294;
        _2410 = _2296;
    }
    else
    {
        uint _2417 = _1926 + 3u;
        uint _2421 = _1926 + 11u;
        float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _706) * 0.949999988079071044921875);
        float _2436 = _2435 * _2435;
        float _2437 = cbLight._m0[_2417].x + _782;
        float _2438 = cbLight._m0[_2417].y + _783;
        float _2439 = cbLight._m0[_2417].z + _784;
        float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
        float _2444 = _2443 * _2437;
        float _2445 = _2443 * _2438;
        float _2446 = _2443 * _2439;
        float _2447 = dot(vec3(_703, _704, _705), vec3(cbLight._m0[_2417].xyz));
        float _4336 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2451 = dot(vec3(_703, _704, _705), vec3(_2444, _2445, _2446));
        float _4347 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2455 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2444, _2445, _2446));
        float _4358 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2459 = _2436 * _2436;
        float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
        float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * 5.0);
        float _2477 = 1.0 - _2436;
        float _2487 = (0.5 / (((_2094 * ((_2450 * _2477) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2477) + _2436) * _2450))) * _2450;
        float _4369 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2489 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
        float _2490 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2406 = (((((_2470 * _2116) + _852) * cbLight._m0[_2421].x) * _2489) * _2490) + _2292;
        _2408 = (((((_2470 * _2118) + _854) * cbLight._m0[_2421].y) * _2489) * _2490) + _2294;
        _2410 = (((((_2470 * _2119) + _855) * cbLight._m0[_2421].z) * _2489) * _2490) + _2296;
    }
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    if (_1924.y == 0u)
    {
        float _2565 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2565;
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2565;
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2565;
        uvec4 _2580 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2581 = _2580.x;
        uint _2592 = uint((float(_2580.y) * floor(float(uint(cbSceneParam._m0[85u].y * _791) / _2581))) + floor(float(uint(cbSceneParam._m0[85u].x * _790) / _2581)));
        float _2602 = (log2(_2568 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2603 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        uint _2606 = uint(isnan(14.0) ? _2603 : (isnan(_2603) ? 14.0 : min(_2603, 14.0)));
        uvec4 _2611 = texelFetch(g_lightClusterGridBuffer, int(((_2606 << 2u) + (_2592 << 6u)) >> 2u));
        uint _2612 = _2611.x;
        uint _2613 = _2580.z;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((((1u << ((_2613 >> 4u) & 15u)) + 4294967295u) & _2612) == 0u) || ((_2613 & 240u) == 0u))
        {
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
        }
        else
        {
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            uint _2864 = 0u;
            uint _2873;
            bool _2874;
            for (;;)
            {
                _2873 = texelFetch(g_lightClassification, int((((_2606 << 5u) + (_2592 << 9u)) + (_2864 << 2u)) >> 2u)).x;
                _2874 = _2873 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2874)
                {
                    frontier_phi_61_pred = _2858;
                    frontier_phi_61_pred_1 = _2863;
                    frontier_phi_61_pred_2 = _2862;
                    frontier_phi_61_pred_3 = _2861;
                    frontier_phi_61_pred_4 = _2860;
                    frontier_phi_61_pred_5 = _2859;
                }
                else
                {
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    uint _2988;
                    _2982 = _2858;
                    _2983 = _2859;
                    _2984 = _2860;
                    _2985 = _2861;
                    _2986 = _2862;
                    _2987 = _2863;
                    _2988 = _2873;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    for (;;)
                    {
                        uint _2992 = uint(findLSB(_2988)) + (_2864 << 5u);
                        uint _2989 = (_2988 + 4294967295u) & _2988;
                        uint _2994 = _2992 * 48u;
                        vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 3u)).x));
                        uint _3014 = (_2992 * 48u) + 4u;
                        vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 3u)).x));
                        uint _3033 = (_2992 * 48u) + 8u;
                        vec3 _3044 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x));
                        float _3048 = _3008.x - _2566;
                        float _3049 = _3008.y - _2567;
                        float _3050 = _3008.z - _2568;
                        float _3051 = dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050));
                        float _3054 = inversesqrt(_3051);
                        float _3055 = _3054 * _3048;
                        float _3056 = _3054 * _3049;
                        float _3057 = _3054 * _3050;
                        float _3058 = dot(vec3(_809, _812, _815), vec3(_3055, _3056, _3057));
                        float _3063 = 1.0 - (_3051 * _3008.w);
                        float _4395 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3064 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3065 = sqrt(_3051) * _3027.w;
                        float _3068 = 1.39999997615814208984375 / (_3065 + 1.39999997615814208984375);
                        float _3069 = _3068 * _3068;
                        float _3072 = ((1.0 - _3069) * _3058) + _3069;
                        float _3075 = _3065 * _3065;
                        float _3079 = ((isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))) * _3064) / ((_3075 * 0.699999988079071044921875) + 1.0);
                        float _3083 = (-0.0) - _2566;
                        float _3084 = (-0.0) - _2567;
                        float _3085 = (-0.0) - _2568;
                        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                        float _3090 = _3089 * _3083;
                        float _3091 = _3089 * _3084;
                        float _3092 = _3089 * _3085;
                        float _3100 = exp2(log2(1.0 / ((_3075 * 3.5) + 5.0)) * 0.25);
                        float _3101 = 1.0 - _884;
                        float _3108 = sqrt(1.0 - ((1.0 - (_3101 * _3101)) * (1.0 - (_3100 * _3100))));
                        float _3109 = _3108 * _3108;
                        float _3110 = _3109 * _3109;
                        float _3111 = _3090 + _3055;
                        float _3112 = _3091 + _3056;
                        float _3113 = _3092 + _3057;
                        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                        float _3121 = dot(vec3(_809, _812, _815), vec3(_3090, _3091, _3092));
                        float _4411 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3125 = dot(vec3(_809, _812, _815), vec3(_3117 * _3111, _3117 * _3112, _3117 * _3113));
                        float _4422 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                        float _3132 = ((_3128 * _3128) * (_3110 + (-1.0))) + 1.0;
                        float _3133 = _3068 * _3109;
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3058) + _3134;
                        float _4433 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3138 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3139 = 1.0 - _3109;
                        float _3149 = (0.5 / (((_3138 * ((_3124 * _3139) + _3109)) + 9.9999999392252902907785028219223e-09) + (((_3138 * _3139) + _3109) * _3124))) * _3138;
                        float _4444 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3159 = (((_3110 * 3.1415927410125732421875) * (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) / ((_3132 * _3132) * ((_3075 * 2.1991131305694580078125) + 3.141590118408203125))) * _3064;
                        _2917 = (_3079 * _3027.x) + _2985;
                        _2918 = (_3079 * _3027.y) + _2986;
                        _2919 = (_3079 * _3027.z) + _2987;
                        _2914 = (_3159 * _3044.x) + _2982;
                        _2915 = (_3159 * _3044.y) + _2983;
                        _2916 = (_3159 * _3044.z) + _2984;
                        if (_2989 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2982 = _2914;
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2989;
                        }
                    }
                    frontier_phi_61_pred = _2914;
                    frontier_phi_61_pred_1 = _2919;
                    frontier_phi_61_pred_2 = _2918;
                    frontier_phi_61_pred_3 = _2917;
                    frontier_phi_61_pred_4 = _2916;
                    frontier_phi_61_pred_5 = _2915;
                }
                _2714 = frontier_phi_61_pred;
                _2724 = frontier_phi_61_pred_1;
                _2722 = frontier_phi_61_pred_2;
                _2720 = frontier_phi_61_pred_3;
                _2718 = frontier_phi_61_pred_4;
                _2716 = frontier_phi_61_pred_5;
                uint _2865 = _2864 + 1u;
                if (_2865 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2858 = _2714;
                    _2859 = _2716;
                    _2860 = _2718;
                    _2861 = _2720;
                    _2862 = _2722;
                    _2863 = _2724;
                    _2864 = _2865;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
        }
        uvec4 _2727 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2728 = _2727.z;
        uint _2730 = (_2728 >> 8u) & 15u;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        if (((4294967295u << _2730) & _2612) == 0u)
        {
            _2826 = _2713;
            _2828 = _2715;
            _2830 = _2717;
            _2832 = _2719;
            _2834 = _2721;
            _2836 = _2723;
        }
        else
        {
            float _2851 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
            float _2852 = _2851 * _2566;
            float _2853 = _2851 * _2567;
            float _2854 = _2851 * _2568;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2730 < ((_2728 >> 12u) & 15u))
            {
                float _2827;
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2965 = _2713;
                float _2966 = _2715;
                float _2967 = _2717;
                float _2968 = _2719;
                float _2969 = _2721;
                float _2970 = _2723;
                uint _2971 = _2730;
                uint _2980;
                bool _2981;
                for (;;)
                {
                    _2980 = texelFetch(g_lightClassification, int((((_2606 << 5u) + (_2592 << 9u)) + (_2971 << 2u)) >> 2u)).x;
                    _2981 = _2980 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2981)
                    {
                        frontier_phi_67_pred = _2968;
                        frontier_phi_67_pred_1 = _2969;
                        frontier_phi_67_pred_2 = _2970;
                        frontier_phi_67_pred_3 = _2967;
                        frontier_phi_67_pred_4 = _2966;
                        frontier_phi_67_pred_5 = _2965;
                    }
                    else
                    {
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3177 = _2965;
                        float _3178 = _2966;
                        float _3179 = _2967;
                        float _3180 = _2968;
                        float _3181 = _2969;
                        float _3182 = _2970;
                        uint _3183 = _2980;
                        uint _3184;
                        vec4 _3209;
                        float _3210;
                        vec4 _3225;
                        vec3 _3237;
                        vec4 _3252;
                        vec4 _3268;
                        float _3314;
                        bool _3315;
                        for (;;)
                        {
                            uint _3194 = ((_2971 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3183));
                            _3184 = (_3183 + 4294967295u) & _3183;
                            uint _3196 = _3194 * 40u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            _3210 = _3209.w;
                            uint _3212 = (_3194 * 40u) + 4u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3227 = (_3194 * 40u) + 8u;
                            _3237 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x));
                            uint _3239 = (_3194 * 40u) + 16u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3255 = (_3194 * 40u) + 20u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3270 = (_3194 * 40u) + 24u;
                            vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3289 = (_3194 * 40u) + 28u;
                            vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3314 = fma(_2568, _3302.z, fma(_2567, _3302.y, _3302.x * _2566)) + _3302.w;
                            _3315 = !((fma(_2568, _3283.z, fma(_2567, _3283.y, _3283.x * _2566)) + _3283.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3315)
                            {
                                float _3342 = _3209.x - _2566;
                                float _3343 = _3209.y - _2567;
                                float _3344 = _3209.z - _2568;
                                float _3345 = dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344));
                                float _3348 = inversesqrt(_3345);
                                float _3349 = _3348 * _3342;
                                float _3350 = _3348 * _3343;
                                float _3351 = _3348 * _3344;
                                float _3355 = 1.0 - (_3345 / (_3210 * _3210));
                                float _4455 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3360 = sqrt(_3345) * _3225.w;
                                float _3362 = 1.39999997615814208984375 / (_3360 + 1.39999997615814208984375);
                                float _3363 = _3362 * _3362;
                                float _3366 = ((1.0 - _3363) * dot(vec3(_3349, _3350, _3351), vec3(_809, _812, _815))) + _3363;
                                float _3369 = _3360 * _3360;
                                float _3373 = (fma(_2568, _3252.z, fma(_2567, _3252.y, _3252.x * _2566)) + _3252.w) / _3314;
                                float _3374 = (fma(_2568, _3268.z, fma(_2567, _3268.y, _3268.x * _2566)) + _3268.w) / _3314;
                                float _3378 = 1.0 - dot(vec2(_3373, _3374), vec2(_3373, _3374));
                                float _4471 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3380 = _3379 * (((isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))) * _3356) / ((_3369 * 0.699999988079071044921875) + 1.0));
                                float _3392 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                                float _3393 = 1.0 - _884;
                                float _3400 = sqrt(1.0 - ((1.0 - (_3393 * _3393)) * (1.0 - (_3392 * _3392))));
                                float _3401 = _3400 * _3400;
                                float _3402 = _3401 * _3401;
                                float _3403 = _3349 - _2852;
                                float _3404 = _3350 - _2853;
                                float _3405 = _3351 - _2854;
                                float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                                float _3413 = dot(vec3(_809, _812, _815), vec3((-0.0) - _2852, (-0.0) - _2853, (-0.0) - _2854));
                                float _4482 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3416 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3417 = dot(vec3(_809, _812, _815), vec3(_3409 * _3403, _3409 * _3404, _3409 * _3405));
                                float _4493 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3420 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3424 = ((_3420 * _3420) * (_3402 + (-1.0))) + 1.0;
                                float _3425 = _3362 * _3401;
                                float _3426 = _3425 * _3425;
                                float _3432 = ((1.0 - _3426) * dot(vec3(_809, _812, _815), vec3(_3349, _3350, _3351))) + _3426;
                                float _4504 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3434 = 1.0 - _3401;
                                float _3444 = (0.5 / (((_3433 * ((_3416 * _3434) + _3401)) + 9.9999999392252902907785028219223e-09) + (((_3433 * _3434) + _3401) * _3416))) * _3433;
                                float _4515 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3454 = (_3379 * _3356) * (((_3402 * 3.1415927410125732421875) * (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) / ((_3424 * _3424) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3454 * _3237.x;
                                frontier_phi_73_pred_1 = _3454 * _3237.y;
                                frontier_phi_73_pred_2 = _3380 * _3225.z;
                                frontier_phi_73_pred_3 = _3380 * _3225.y;
                                frontier_phi_73_pred_4 = _3380 * _3225.x;
                                frontier_phi_73_pred_5 = _3454 * _3237.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3458 = frontier_phi_73_pred;
                            _3459 = frontier_phi_73_pred_1;
                            _3463 = frontier_phi_73_pred_2;
                            _3462 = frontier_phi_73_pred_3;
                            _3461 = frontier_phi_73_pred_4;
                            _3460 = frontier_phi_73_pred_5;
                            _3167 = _3461 + _3180;
                            _3168 = _3462 + _3181;
                            _3169 = _3463 + _3182;
                            _3164 = _3458 + _3177;
                            _3165 = _3459 + _3178;
                            _3166 = _3460 + _3179;
                            if (_3184 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3184;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3167;
                        frontier_phi_67_pred_1 = _3168;
                        frontier_phi_67_pred_2 = _3169;
                        frontier_phi_67_pred_3 = _3166;
                        frontier_phi_67_pred_4 = _3165;
                        frontier_phi_67_pred_5 = _3164;
                    }
                    _2833 = frontier_phi_67_pred;
                    _2835 = frontier_phi_67_pred_1;
                    _2837 = frontier_phi_67_pred_2;
                    _2831 = frontier_phi_67_pred_3;
                    _2829 = frontier_phi_67_pred_4;
                    _2827 = frontier_phi_67_pred_5;
                    uint _2972 = _2971 + 1u;
                    if (_2972 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2965 = _2827;
                        _2966 = _2829;
                        _2967 = _2831;
                        _2968 = _2833;
                        _2969 = _2835;
                        _2970 = _2837;
                        _2971 = _2972;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2835;
                frontier_phi_55_56_ladder_1 = _2837;
                frontier_phi_55_56_ladder_2 = _2833;
                frontier_phi_55_56_ladder_3 = _2831;
                frontier_phi_55_56_ladder_4 = _2829;
                frontier_phi_55_56_ladder_5 = _2827;
            }
            else
            {
                frontier_phi_55_56_ladder = _2721;
                frontier_phi_55_56_ladder_1 = _2723;
                frontier_phi_55_56_ladder_2 = _2719;
                frontier_phi_55_56_ladder_3 = _2717;
                frontier_phi_55_56_ladder_4 = _2715;
                frontier_phi_55_56_ladder_5 = _2713;
            }
            _2826 = frontier_phi_55_56_ladder_5;
            _2828 = frontier_phi_55_56_ladder_4;
            _2830 = frontier_phi_55_56_ladder_3;
            _2832 = frontier_phi_55_56_ladder_2;
            _2834 = frontier_phi_55_56_ladder;
            _2836 = frontier_phi_55_56_ladder_1;
        }
        float _2841 = isnan(1.0) ? _868 : (isnan(_868) ? 1.0 : min(_868, 1.0));
        _2625 = (_2841 * _2832) + _2058;
        _2627 = (_2841 * _2834) + _2060;
        _2629 = (_2841 * _2836) + _2062;
        _2631 = ((_2826 * _852) * _2841) + _2406;
        _2633 = ((_2828 * _854) * _2841) + _2408;
        _2635 = ((_2830 * _855) * _2841) + _2410;
    }
    else
    {
        _2625 = _2058;
        _2627 = _2060;
        _2629 = _2062;
        _2631 = _2406;
        _2633 = _2408;
        _2635 = _2410;
    }
    float _4531 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4542 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4553 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    uint _2655 = _247 + 6u;
    float _2663 = _790 / cbSceneParam._m0[86u].x;
    float _2664 = _791 / cbSceneParam._m0[86u].y;
    vec4 _2678 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, (log2((isnan(cbSceneParam._m0[77u].w) ? _725 : (isnan(_725) ? cbSceneParam._m0[77u].w : min(_725, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2680 = _2678.x;
    float _2681 = _2678.y;
    float _2682 = _2678.z;
    float _2683 = _2678.w;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    if (_725 > cbSceneParam._m0[78u].w)
    {
        float _2738 = isnan(_725) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _725 : min(cbSceneParam._m0[80u].w, _725));
        float _2739 = _2738 / _725;
        float _2750 = _2739 * _775;
        float _2751 = _776 * _2739;
        float _2752 = (-0.0) - _2751;
        float _2754 = _2739 * _777;
        float _2756 = (cbSceneParam._m0[77u].w * _2752) / _2738;
        float _2757 = _2756 + cbSceneParam._m0[79u].w;
        float _2758 = cbSceneParam._m0[79u].w - _2751;
        float _2764 = sqrt(((_2750 * _2750) + (_2751 * _2751)) + (_2754 * _2754));
        float _2767 = (1.0 - (cbSceneParam._m0[77u].w / _2738)) * _2764;
        float _2772 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2774 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2927;
        if (abs((_2752 - _2756) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2927 = ((((_2757 > 0.0) ? exp2(_2772 * _2757) : (2.0 - exp2(_2774 * _2757))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2767;
        }
        else
        {
            float _2887 = 1.0 / cbSceneParam._m0[80u].x;
            float _2888 = isnan(_2758) ? _2757 : (isnan(_2757) ? _2758 : max(_2757, _2758));
            float _2889 = isnan(_2758) ? _2757 : (isnan(_2757) ? _2758 : min(_2757, _2758));
            float _2898 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : min(_2888, 0.0));
            float _2899 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : min(_2889, 0.0));
            _2927 = ((abs(_2764 / _2752) * cbSceneParam._m0[80u].y) * ((((_2898 - _2899) * 2.0) - ((exp2(_2772 * (isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0)))) - exp2(_2772 * (isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0))))) * _2887)) - ((exp2(_2774 * _2898) - exp2(_2774 * _2899)) * _2887))) + (_2767 * cbSceneParam._m0[80u].z);
        }
        vec4 _2929 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, 1.0), 0.0);
        float _2938 = exp2((_2927 * (-1.44269502162933349609375)) * (1.0 - _2929.w));
        float _2939 = log2(_2938);
        float _2955 = log2(_2683);
        _2776 = (exp2(_2955 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].x)) * _2929.x) / cbSceneParam._m0[78u].x)) + _2680;
        _2778 = (exp2(_2955 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].y)) * _2929.y) / cbSceneParam._m0[78u].y)) + _2681;
        _2780 = (exp2(_2955 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].z)) * _2929.z) / cbSceneParam._m0[78u].z)) + _2682;
        _2782 = _2938 * _2683;
    }
    else
    {
        _2776 = _2680;
        _2778 = _2681;
        _2780 = _2682;
        _2782 = _2683;
    }
    float _2794 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2795 = _2794 == 3.0;
    float _2796 = log2(_2782);
    float _2803 = exp2(_2796 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2625 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _868))) + ((_2631 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1674)) * cbPerFrame._m0[3u].x));
    float _2804 = exp2(_2796 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2627 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _868))) + ((_2633 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1674)) * cbPerFrame._m0[3u].x));
    float _2805 = exp2(_2796 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2629 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _868))) + ((_2635 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1674)) * cbPerFrame._m0[3u].x));
    float _2814 = (_2794 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2814 * (_2795 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2776)));
    SV_Target.y = _2814 * (_2795 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2778)));
    SV_Target.z = _2814 * (_2795 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2780)));
    SV_Target.w = cbInstanceData._m0[_2655].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2655].w;
}


