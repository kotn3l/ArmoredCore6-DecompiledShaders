#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1131;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _306 = _302.z;
    float _311 = (_302.x * 2.0) + (-1.0);
    float _313 = (_302.y * 2.0) + (-1.0);
    float _314 = dot(vec2(_311, _313), vec2(_311, _313));
    float _3743 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))));
    float _323 = fma(_320, _225, fma(_313, _232, _311 * _218));
    float _326 = fma(_320, _226, fma(_313, _233, _311 * _219));
    float _329 = fma(_320, _227, fma(_313, _234, _311 * _220));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    vec4 _369 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _371 = _369.x;
    float _372 = 1.0 - _371;
    float _381 = (cbMtdParam._m0[19u].x + dot(vec4(_333 * _323, _333 * _326, _333 * _329, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_371 - _372) * cbMtdParam._m0[24u].z) + _372) * cbMtdParam._m0[21u].z);
    float _3754 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _384 = (-0.0) - cbMtdParam._m0[24u].x;
    float _386 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _387 = isnan(1.0) ? _386 : (isnan(_386) ? 1.0 : min(_386, 1.0));
    float _394 = _382 - ((_382 * TEXCOORD_8.x) * _387);
    float _395 = _382 - ((_382 * TEXCOORD_8.y) * _387);
    float _396 = _382 - ((_382 * TEXCOORD_8.z) * _387);
    float _403 = (_394 * (cbMtdParam._m0[17u].x - _282)) + _282;
    float _404 = (_395 * (cbMtdParam._m0[17u].y - _283)) + _283;
    float _405 = (_396 * (cbMtdParam._m0[17u].z - _284)) + _284;
    vec4 _417 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _419 = _417.x;
    float _420 = 1.0 - _419;
    float _450 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_419 - _420) * cbMtdParam._m0[24u].w) + _420) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3775 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _459 = ((((cbMtdParam._m0[10u].x - _403) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _451) + _403;
    float _460 = ((((cbMtdParam._m0[10u].y - _404) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _451) + _404;
    float _461 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _405)) * _451) + _405;
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _476 = _474.x;
    float _478 = _476 - (_476 * _394);
    float _480 = _478 - (_478 * _451);
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _501 = (_494.x * 2.0) + (-1.0);
    float _502 = (_494.y * 2.0) + (-1.0);
    float _503 = dot(vec2(_501, _502), vec2(_501, _502));
    float _3786 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _511 = ((_494.z - _306) * _394) + _306;
    float _514 = ((cbMtdParam._m0[23u].y - _511) * _451) + _511;
    vec4 _533 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _539 = (_533.x * 2.0) + (-1.0);
    float _540 = (_533.y * 2.0) + (-1.0);
    float _541 = dot(vec2(_539, _540), vec2(_539, _540));
    float _3797 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _556 = ((sqrt(1.0 - (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) - _320) * _396) + _320;
    float _559 = (((_501 - _311) * _394) + _311) + (cbMtdParam._m0[21u].x * _311);
    float _560 = (((_502 - _313) * _395) + _313) + (cbMtdParam._m0[21u].x * _313);
    float _571 = (((_539 - _559) + (_559 * cbMtdParam._m0[22u].z)) * _451) + _559;
    float _572 = (((_540 - _560) + (_560 * cbMtdParam._m0[22u].z)) * _451) + _560;
    float _573 = (_451 * (sqrt(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) - _556)) + _556;
    float _575 = cbMtdParam._m0[22u].x + _302.w;
    float _578 = fma(_573, _225, fma(_572, _232, _571 * _218));
    float _581 = fma(_573, _226, fma(_572, _233, _571 * _219));
    float _584 = fma(_573, _227, fma(_572, _234, _571 * _220));
    float _588 = inversesqrt(dot(vec3(_578, _581, _584), vec3(_578, _581, _584)));
    float _589 = _588 * _578;
    float _590 = _588 * _581;
    float _591 = _588 * _584;
    float _3808 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _592 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3830 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3841 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3852 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3863 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _597 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _611 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _661 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _651);
    float _662 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _651);
    float _663 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _651);
    float _667 = inversesqrt(dot(vec3(_661, _662, _663), vec3(_661, _662, _663)));
    float _668 = _661 * _667;
    float _669 = _662 * _667;
    float _670 = _663 * _667;
    float _676 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _677 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _698 = fma(_591, cbSceneParam._m0[5u].z, fma(_590, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _589));
    float _701 = fma(_591, cbSceneParam._m0[6u].z, fma(_590, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _589));
    float _704 = fma(_591, cbSceneParam._m0[7u].z, fma(_590, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _589));
    uint _718 = (_237 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _724 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * cbInstanceData._m0[_718].x;
    float _725 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * cbInstanceData._m0[_718].y;
    float _726 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * cbInstanceData._m0[_718].z;
    float _3874 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _730 = 1.0 - _597;
    float _731 = _727 * _730;
    float _732 = _728 * _730;
    float _733 = _729 * _730;
    float _738 = (_727 + (-0.039999999105930328369140625)) * _597;
    float _739 = (_728 + (-0.039999999105930328369140625)) * _597;
    float _740 = (_729 + (-0.039999999105930328369140625)) * _597;
    float _741 = _738 + 0.039999999105930328369140625;
    float _743 = _739 + 0.039999999105930328369140625;
    float _744 = _740 + 0.039999999105930328369140625;
    vec4 _753 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _676, cbSceneParam._m0[86u].y * _677));
    float _757 = ((isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * TEXCOORD_5.w) * _753.x;
    float _758 = dot(vec3(_589, _590, _591), vec3(_668, _669, _670));
    float _761 = _758 * 2.0;
    float _765 = (_761 * _589) - _668;
    float _766 = (_761 * _590) - _669;
    float _767 = (_761 * _591) - _670;
    float _771 = abs(dot(vec3(_668, _669, _670), vec3(_589, _590, _591)));
    float _3907 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _773 = sqrt(_592);
    float _786 = exp2((_773 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_773 * 3.0));
    float _792 = (1.0 - _786) * ((_773 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _793 = _786 * _773;
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1130;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _855 = fma(_829, cbModelParam._m0[26u].z, fma(_825, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _821));
        float _859 = fma(_829, cbModelParam._m0[27u].z, fma(_825, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _821));
        float _863 = fma(_829, cbModelParam._m0[28u].z, fma(_825, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _821));
        float _888 = _821 + _589;
        float _889 = _825 + _590;
        float _890 = _829 + _591;
        float _900 = fma(_890, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _888)) - _855;
        float _901 = fma(_890, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _888)) - _859;
        float _902 = fma(_890, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _888)) - _863;
        float _906 = inversesqrt(dot(vec3(_900, _901, _902), vec3(_900, _901, _902)));
        float _919 = ((_906 * _900) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_855 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_906 * _901) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_859 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _921 = ((_906 * _902) / cbModelParam._m0[34u].z) + ((((((_863 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        float _958 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_924.x + (-0.5));
        float _960 = _958 * (_924.y + (-0.5));
        float _961 = _958 * (_924.z + (-0.5));
        float _968 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_931.x + (-0.5));
        float _970 = _968 * (_931.y + (-0.5));
        float _971 = _968 * (_931.z + (-0.5));
        float _978 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_938.x + (-0.5));
        float _980 = _978 * (_938.y + (-0.5));
        float _981 = _978 * (_938.z + (-0.5));
        float _988 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_945.x + (-0.5));
        float _990 = _988 * (_945.y + (-0.5));
        float _991 = _988 * (_945.z + (-0.5));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = _959 * 0.5;
        float _996 = _969 * 0.5;
        float _997 = _979 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1012 = (dot(vec3(_589, _590, _591), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1022 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3955 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1024 + 1.0))) + _1029) * _992;
        float _1039 = _960 * 0.5;
        float _1040 = _970 * 0.5;
        float _1041 = _980 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_589, _590, _591), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3988 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1066 + 1.0))) + _1071) * _993;
        float _1081 = _961 * 0.5;
        float _1082 = _971 * 0.5;
        float _1083 = _981 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_589, _590, _591), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _4021 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1108 + 1.0))) + _1113) * _994;
        _1130 = _961;
        _1132 = _960;
        _1133 = _959;
        _1134 = _971;
        _1135 = _970;
        _1136 = _969;
        _1137 = _981;
        _1138 = _980;
        _1139 = _979;
        _1140 = _994;
        _1141 = _993;
        _1142 = _992;
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
    }
    else
    {
        _1130 = _1131;
        _1132 = _1131;
        _1133 = _1131;
        _1134 = _1131;
        _1135 = _1131;
        _1136 = _1131;
        _1137 = _1131;
        _1138 = _1131;
        _1139 = _1131;
        _1140 = _1131;
        _1141 = _1131;
        _1142 = _1131;
        _1143 = 0.0;
        _1144 = 0.0;
        _1145 = 0.0;
    }
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1170 = fma(_829, cbModelParam._m0[30u].z, fma(_825, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _821));
        float _1174 = fma(_829, cbModelParam._m0[31u].z, fma(_825, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _821));
        float _1178 = fma(_829, cbModelParam._m0[32u].z, fma(_825, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _821));
        float _1201 = _821 + _589;
        float _1202 = _825 + _590;
        float _1203 = _829 + _591;
        float _1213 = fma(_1203, cbModelParam._m0[30u].z, fma(_1202, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1201)) - _1170;
        float _1214 = fma(_1203, cbModelParam._m0[31u].z, fma(_1202, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1201)) - _1174;
        float _1215 = fma(_1203, cbModelParam._m0[32u].z, fma(_1202, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1201)) - _1178;
        float _1219 = inversesqrt(dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215)));
        float _1232 = ((_1219 * _1213) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1170 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1219 * _1214) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1174 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1219 * _1215) / cbModelParam._m0[35u].z) + ((((((_1178 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        float _1269 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1236.x + (-0.5));
        float _1271 = _1269 * (_1236.y + (-0.5));
        float _1272 = _1269 * (_1236.z + (-0.5));
        float _1279 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1243.x + (-0.5));
        float _1281 = _1279 * (_1243.y + (-0.5));
        float _1282 = _1279 * (_1243.z + (-0.5));
        float _1289 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1250.x + (-0.5));
        float _1291 = _1289 * (_1250.y + (-0.5));
        float _1292 = _1289 * (_1250.z + (-0.5));
        float _1299 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1257.x + (-0.5));
        float _1301 = _1299 * (_1257.y + (-0.5));
        float _1302 = _1299 * (_1257.z + (-0.5));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = _1270 * 0.5;
        float _1307 = _1280 * 0.5;
        float _1308 = _1290 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_589, _590, _591), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4084 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1333 + 1.0))) + _1338) * _1303;
        float _1348 = _1271 * 0.5;
        float _1349 = _1281 * 0.5;
        float _1350 = _1291 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_589, _590, _591), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4117 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1375 + 1.0))) + _1380) * _1304;
        float _1390 = _1272 * 0.5;
        float _1391 = _1282 * 0.5;
        float _1392 = _1292 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_589, _590, _591), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4150 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1417 + 1.0))) + _1422) * _1305;
        _1439 = _1272;
        _1440 = _1271;
        _1441 = _1270;
        _1442 = _1282;
        _1443 = _1281;
        _1444 = _1280;
        _1445 = _1292;
        _1446 = _1291;
        _1447 = _1290;
        _1448 = _1305;
        _1449 = _1304;
        _1450 = _1303;
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
    }
    else
    {
        _1439 = _1131;
        _1440 = _1131;
        _1441 = _1131;
        _1442 = _1131;
        _1443 = _1131;
        _1444 = _1131;
        _1445 = _1131;
        _1446 = _1131;
        _1447 = _1131;
        _1448 = _1131;
        _1449 = _1131;
        _1450 = _1131;
        _1451 = 0.0;
        _1452 = 0.0;
        _1453 = 0.0;
    }
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1143)) + _1143;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1144)) + _1144;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1145)) + _1145;
    float _1486 = fma(_1465, cbSceneParam._m0[89u].z, fma(_1464, cbSceneParam._m0[89u].y, _1463 * cbSceneParam._m0[89u].x));
    float _1489 = fma(_1465, cbSceneParam._m0[90u].z, fma(_1464, cbSceneParam._m0[90u].y, _1463 * cbSceneParam._m0[90u].x));
    float _1492 = fma(_1465, cbSceneParam._m0[91u].z, fma(_1464, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1463));
    float _1507 = _765 * 0.5;
    float _1508 = _766 * 0.5;
    float _1509 = _767 * 0.5;
    float _1510 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1513 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1516 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1550;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1523 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1130, _1134, _1137, _1140));
        float _1527 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1132, _1135, _1138, _1141));
        float _1531 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1133, _1136, _1139, _1142));
        float _1538 = dot(vec4(cbModelParam._m0[39u]), vec4(_1507, _1508, _1509, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1538) ? 0.0 : (isnan(0.0) ? _1538 : max(0.0, _1538))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1561;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1552 = dot(vec4(cbModelParam._m0[40u]), vec4(_1507, _1508, _1509, 1.0));
        _1561 = dot(vec3(isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1552) ? 0.0 : (isnan(0.0) ? _1552 : max(0.0, _1552))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1561 = 1.0;
    }
    float _1565 = (_1561 * cbModelParam._m0[1u].x) + (_1550 * (1.0 - cbModelParam._m0[1u].x));
    float _1575 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _592);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1575 : min(cbModelParam._m0[25u].z, _1575));
    float _1657;
    float _1659;
    float _1661;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1624 = fma(_829, cbModelParam._m0[13u].z, fma(_825, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _821)) + cbModelParam._m0[13u].w;
        float _1628 = fma(_829, cbModelParam._m0[14u].z, fma(_825, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _821)) + cbModelParam._m0[14u].w;
        float _1632 = fma(_829, cbModelParam._m0[15u].z, fma(_825, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _821)) + cbModelParam._m0[15u].w;
        float _1635 = fma(_767, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765));
        float _1638 = fma(_767, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765));
        float _1641 = fma(_767, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765));
        float _1669;
        if (_1635 > 0.0)
        {
            _1669 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1669 = frontier_phi_14_12_ladder;
        }
        float _1841;
        if (_1638 > 0.0)
        {
            _1841 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1841 = frontier_phi_23_19_ladder;
        }
        float _2137;
        if (_1641 > 0.0)
        {
            _2137 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2137 = frontier_phi_35_30_ladder;
        }
        float _2139 = isnan(_1841) ? _1669 : (isnan(_1669) ? _1841 : min(_1669, _1841));
        float _2140 = isnan(_2137) ? _2139 : (isnan(_2139) ? _2137 : min(_2139, _2137));
        float _2144 = (_2140 * _1635) + _1624;
        float _2145 = (_2140 * _1638) + _1628;
        float _2146 = (_2140 * _1641) + _1632;
        float _2147 = _2140 * 9.9999997473787516355514526367188e-05;
        float _2149 = (-1.0) - _2147;
        float _2151 = _2147 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2146 > _2151) || ((_2146 < _2149) || ((_2145 > _2151) || ((_2145 < _2149) || ((_2144 < _2149) || (_2144 > _2151))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2291 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2146, cbModelParam._m0[9u].z, fma(_2145, cbModelParam._m0[9u].y, _2144 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2146, cbModelParam._m0[10u].z, fma(_2145, cbModelParam._m0[10u].y, _2144 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2146, cbModelParam._m0[11u].z, fma(_2145, cbModelParam._m0[11u].y, _2144 * cbModelParam._m0[11u].x))), _1576);
            frontier_phi_13_35_ladder = _2291.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2291.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2291.x * cbModelParam._m0[1u].y;
        }
        _1657 = frontier_phi_13_35_ladder_2;
        _1659 = frontier_phi_13_35_ladder_1;
        _1661 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1645 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_765, _766, _767), _1576);
        _1657 = _1645.x * cbModelParam._m0[1u].y;
        _1659 = _1645.y * cbModelParam._m0[1u].y;
        _1661 = _1645.z * cbModelParam._m0[1u].y;
    }
    float _1665 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _592);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1665 : min(cbModelParam._m0[25u].w, _1665));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1720 = fma(_829, cbModelParam._m0[21u].z, fma(_825, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _821)) + cbModelParam._m0[21u].w;
        float _1724 = fma(_829, cbModelParam._m0[22u].z, fma(_825, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _821)) + cbModelParam._m0[22u].w;
        float _1728 = fma(_829, cbModelParam._m0[23u].z, fma(_825, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _821)) + cbModelParam._m0[23u].w;
        float _1731 = fma(_767, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765));
        float _1734 = fma(_767, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765));
        float _1737 = fma(_767, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765));
        float _1846;
        if (_1731 > 0.0)
        {
            _1846 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1846 = frontier_phi_25_21_ladder;
        }
        float _2164;
        if (_1734 > 0.0)
        {
            _2164 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2164 = frontier_phi_37_32_ladder;
        }
        float _2502;
        if (_1737 > 0.0)
        {
            _2502 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2502 = frontier_phi_47_44_ladder;
        }
        float _2504 = isnan(_2164) ? _1846 : (isnan(_1846) ? _2164 : min(_1846, _2164));
        float _2505 = isnan(_2502) ? _2504 : (isnan(_2504) ? _2502 : min(_2504, _2502));
        float _2509 = (_2505 * _1731) + _1720;
        float _2510 = (_2505 * _1734) + _1724;
        float _2511 = (_2505 * _1737) + _1728;
        float _2512 = _2505 * 9.9999997473787516355514526367188e-05;
        float _2513 = (-1.0) - _2512;
        float _2515 = _2512 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2511 > _2515) || ((_2511 < _2513) || ((_2510 > _2515) || ((_2510 < _2513) || ((_2509 < _2513) || (_2509 > _2515))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2633 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2511, cbModelParam._m0[17u].z, fma(_2510, cbModelParam._m0[17u].y, _2509 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2511, cbModelParam._m0[18u].z, fma(_2510, cbModelParam._m0[18u].y, _2509 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2511, cbModelParam._m0[19u].z, fma(_2510, cbModelParam._m0[19u].y, _2509 * cbModelParam._m0[19u].x))), _1666);
            frontier_phi_22_47_ladder = _2633.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2633.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2633.x * cbModelParam._m0[1u].z;
        }
        _1756 = frontier_phi_22_47_ladder_2;
        _1758 = frontier_phi_22_47_ladder_1;
        _1760 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_765, _766, _767), _1666);
        _1756 = _1740.x * cbModelParam._m0[1u].z;
        _1758 = _1740.y * cbModelParam._m0[1u].z;
        _1760 = _1740.z * cbModelParam._m0[1u].z;
    }
    float _1773 = (((_792 * _741) + _793) * _757) * ((cbModelParam._m0[1u].w * (_1756 - _1657)) + _1657);
    float _1775 = (((_792 * _743) + _793) * _757) * ((cbModelParam._m0[1u].w * (_1758 - _1659)) + _1659);
    float _1777 = (((_792 * _744) + _793) * _757) * ((cbModelParam._m0[1u].w * (_1760 - _1661)) + _1661);
    float _1780 = fma(_1777, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1773 * cbSceneParam._m0[89u].x));
    float _1783 = fma(_1777, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1773 * cbSceneParam._m0[90u].x));
    float _1786 = fma(_1777, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, _1773 * cbSceneParam._m0[91u].x));
    float _1820 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1824 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1828 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1832 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1833 = _1820 / _1832;
    float _1834 = _1824 / _1832;
    float _1835 = _1828 / _1832;
    float _1982;
    float _1983;
    float _1984;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1862 = ((uint(_1835 > cbSceneParam._m0[59u].y) + uint(_1835 > cbSceneParam._m0[59u].x)) + uint(_1835 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1863 = _1862 + 43u;
        uint _1871 = _1862 + 44u;
        uint _1879 = _1862 + 45u;
        uint _1887 = _1862 + 46u;
        float _1898 = fma(_1832, cbSceneParam._m0[_1863].w, fma(_1828, cbSceneParam._m0[_1863].z, fma(_1824, cbSceneParam._m0[_1863].y, _1820 * cbSceneParam._m0[_1863].x)));
        float _1902 = fma(_1832, cbSceneParam._m0[_1871].w, fma(_1828, cbSceneParam._m0[_1871].z, fma(_1824, cbSceneParam._m0[_1871].y, _1820 * cbSceneParam._m0[_1871].x)));
        float _1910 = fma(_1832, cbSceneParam._m0[_1887].w, fma(_1828, cbSceneParam._m0[_1887].z, fma(_1824, cbSceneParam._m0[_1887].y, _1820 * cbSceneParam._m0[_1887].x)));
        float _1915 = cbSceneParam._m0[33u].z * _1910;
        float _1917 = cbSceneParam._m0[33u].w * _1910;
        float _1920 = fma(_1832, cbSceneParam._m0[_1879].w, fma(_1828, cbSceneParam._m0[_1879].z, fma(_1824, cbSceneParam._m0[_1879].y, _1820 * cbSceneParam._m0[_1879].x))) / _1910;
        float _1968 = (cbSceneParam._m0[33u].x - sqrt(((_1834 * _1834) + (_1833 * _1833)) + (_1835 * _1835))) * cbSceneParam._m0[33u].y;
        float _4276 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1975 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1915 + _1898) / _1910, (_1917 + _1902) / _1910), _1920), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1917 + _1898) / _1910, (_1902 - _1915) / _1910), _1920), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1898 - _1915) / _1910, (_1902 - _1917) / _1910), _1920), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1898 - _1917) / _1910, (_1915 + _1902) / _1910), _1920), 0.0)).x), vec4(0.25)));
        _1982 = 1.0 - (_1975 * cbSceneParam._m0[34u].x);
        _1983 = 1.0 - (_1975 * cbSceneParam._m0[34u].y);
        _1984 = 1.0 - (_1975 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1982 = 1.0;
        _1983 = 1.0;
        _1984 = 1.0;
    }
    float _2048;
    float _2050;
    float _2052;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2036 = fma(_1832, cbSceneParam._m0[63u].w, fma(_1828, cbSceneParam._m0[63u].z, fma(_1824, cbSceneParam._m0[63u].y, _1820 * cbSceneParam._m0[63u].x)));
        float _2037 = fma(_1832, cbSceneParam._m0[60u].w, fma(_1828, cbSceneParam._m0[60u].z, fma(_1824, cbSceneParam._m0[60u].y, _1820 * cbSceneParam._m0[60u].x))) / _2036;
        float _2038 = fma(_1832, cbSceneParam._m0[61u].w, fma(_1828, cbSceneParam._m0[61u].z, fma(_1824, cbSceneParam._m0[61u].y, _1820 * cbSceneParam._m0[61u].x))) / _2036;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2037 >= cbSceneParam._m0[64u].x) && (_2038 >= cbSceneParam._m0[64u].y)) && (_2037 <= cbSceneParam._m0[64u].z)) && (_2038 <= cbSceneParam._m0[64u].w))
        {
            float _2177 = fma(_1832, cbSceneParam._m0[62u].w, fma(_1828, cbSceneParam._m0[62u].z, fma(_1824, cbSceneParam._m0[62u].y, _1820 * cbSceneParam._m0[62u].x))) / _2036;
            float _2181 = isnan(cbSceneParam._m0[41u].w) ? _2177 : (isnan(_2177) ? cbSceneParam._m0[41u].w : max(_2177, cbSceneParam._m0[41u].w));
            float _2224 = (cbSceneParam._m0[33u].x - sqrt(((_1834 * _1834) + (_1833 * _1833)) + (_1835 * _1835))) * cbSceneParam._m0[33u].y;
            float _4292 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
            float _2231 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2037, cbSceneParam._m0[33u].w + _2038), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2037, _2038 - cbSceneParam._m0[33u].z), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2037 - cbSceneParam._m0[33u].z, _2038 - cbSceneParam._m0[33u].w), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2037 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2038), _2181), 0.0)).x), vec4(0.25)));
            float _2235 = 1.0 - (_2231 * cbSceneParam._m0[34u].x);
            float _2236 = 1.0 - (_2231 * cbSceneParam._m0[34u].y);
            float _2237 = 1.0 - (_2231 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2237) ? _1984 : (isnan(_1984) ? _2237 : min(_1984, _2237));
            frontier_phi_34_33_ladder_1 = isnan(_2236) ? _1983 : (isnan(_1983) ? _2236 : min(_1983, _2236));
            frontier_phi_34_33_ladder_2 = isnan(_2235) ? _1982 : (isnan(_1982) ? _2235 : min(_1982, _2235));
        }
        else
        {
            frontier_phi_34_33_ladder = _1984;
            frontier_phi_34_33_ladder_1 = _1983;
            frontier_phi_34_33_ladder_2 = _1982;
        }
        _2048 = frontier_phi_34_33_ladder_2;
        _2050 = frontier_phi_34_33_ladder_1;
        _2052 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2048 = _1982;
        _2050 = _1983;
        _2052 = _1984;
    }
    uvec4 _2057 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _2059 = _2057.x * 14u;
    uint _2060 = _2059 + 13u;
    float _2067 = _757 + (-1.0);
    float _2072 = (cbLight._m0[_2060].x * _2067) + 1.0;
    float _2073 = (cbLight._m0[_2060].y * _2067) + 1.0;
    float _2074 = (cbLight._m0[_2060].z * _2067) + 1.0;
    float _2075 = (cbLight._m0[_2060].w * _2067) + 1.0;
    uint _2076 = _2059 + 5u;
    float _2082 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
    uint _2086 = _2059 + 4u;
    float _2096 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2100 = _2059 | 1u;
    float _2111 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_589, _590, _591));
    float _2114 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_589, _590, _591));
    float _4328 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _4339 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2119 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * 0.3183098733425140380859375;
    float _2121 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * 0.3183098733425140380859375;
    float _2128 = ((cbLight._m0[_2076].x * _2082) * _2121) + (((cbLight._m0[_2086].x * _2048) * _2096) * _2119);
    float _2129 = ((_2082 * cbLight._m0[_2076].y) * _2121) + (((cbLight._m0[_2086].y * _2050) * _2096) * _2119);
    float _2130 = ((_2082 * cbLight._m0[_2076].z) * _2121) + (((cbLight._m0[_2086].z * _2052) * _2096) * _2119);
    uvec4 _2134 = floatBitsToUint(cbLight._m0[_2059 + 12u]);
    bool _2136 = _2134.x == 0u;
    float _2238;
    float _2240;
    float _2242;
    if (_2136)
    {
        _2238 = _2128;
        _2240 = _2129;
        _2242 = _2130;
    }
    else
    {
        uint _2246 = _2059 + 6u;
        float _2262 = (dot(vec3(cbLight._m0[_2059 + 2u].xyz), vec3(_589, _590, _591)) * 0.5) + 0.5;
        float _2263 = _2262 * _2262;
        float _4350 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2264 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2265 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2238 = (((cbLight._m0[_2246].x * 0.3183098733425140380859375) * _2264) * _2265) + _2128;
        _2240 = (((cbLight._m0[_2246].y * 0.3183098733425140380859375) * _2264) * _2265) + _2129;
        _2242 = (((cbLight._m0[_2246].z * 0.3183098733425140380859375) * _2264) * _2265) + _2130;
    }
    bool _2245 = _2134.y == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2245)
    {
        _2300 = _2238;
        _2302 = _2240;
        _2304 = _2242;
    }
    else
    {
        uint _2473 = _2059 + 7u;
        float _2489 = (dot(vec3(cbLight._m0[_2059 + 3u].xyz), vec3(_589, _590, _591)) * 0.5) + 0.5;
        float _2490 = _2489 * _2489;
        float _4366 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2491 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2492 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2300 = (((cbLight._m0[_2473].x * 0.3183098733425140380859375) * _2491) * _2492) + _2238;
        _2302 = (((cbLight._m0[_2473].y * 0.3183098733425140380859375) * _2491) * _2492) + _2240;
        _2304 = (((cbLight._m0[_2473].z * 0.3183098733425140380859375) * _2491) * _2492) + _2242;
    }
    uint _2307 = _2059 + 8u;
    float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2059].w)) * _592) * 0.949999988079071044921875);
    float _2321 = _2320 * _2320;
    float _2322 = cbLight._m0[_2059].x + _668;
    float _2323 = cbLight._m0[_2059].y + _669;
    float _2324 = cbLight._m0[_2059].z + _670;
    float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
    float _2329 = _2328 * _2322;
    float _2330 = _2328 * _2323;
    float _2331 = _2328 * _2324;
    float _2332 = dot(vec3(_589, _590, _591), vec3(cbLight._m0[_2059].xyz));
    float _4382 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _4393 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2336 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _2337 = dot(vec3(_589, _590, _591), vec3(_2329, _2330, _2331));
    float _4404 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _2341 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2329, _2330, _2331));
    float _4415 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2345 = _2321 * _2321;
    float _2349 = ((_2340 * _2340) * (_2345 + (-1.0))) + 1.0;
    float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) * 5.0);
    float _2358 = 0.959999978542327880859375 - _738;
    float _2360 = 0.959999978542327880859375 - _739;
    float _2361 = 0.959999978542327880859375 - _740;
    float _2368 = 1.0 - _2321;
    float _2379 = (0.5 / (((_2336 * ((_2335 * _2368) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2368) + _2321) * _2335))) * _2335;
    float _4426 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2381 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2345 / ((_2349 * _2349) * 3.141590118408203125));
    uint _2395 = _2059 + 9u;
    float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _592) * 0.949999988079071044921875);
    float _2407 = _2406 * _2406;
    float _2408 = cbLight._m0[_2100].x + _668;
    float _2409 = cbLight._m0[_2100].y + _669;
    float _2410 = cbLight._m0[_2100].z + _670;
    float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
    float _2415 = _2414 * _2408;
    float _2416 = _2414 * _2409;
    float _2417 = _2414 * _2410;
    float _2418 = dot(vec3(_589, _590, _591), vec3(cbLight._m0[_2100].xyz));
    float _4437 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2422 = dot(vec3(_589, _590, _591), vec3(_2415, _2416, _2417));
    float _4448 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2426 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2415, _2416, _2417));
    float _4459 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2430 = _2407 * _2407;
    float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
    float _2441 = exp2(log2(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * 5.0);
    float _2448 = 1.0 - _2407;
    float _2458 = (0.5 / (((_2336 * ((_2421 * _2448) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2448) + _2407) * _2421))) * _2421;
    float _4470 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2460 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
    float _2470 = (((((_2441 * _2358) + _741) * cbLight._m0[_2395].x) * _2460) * _2082) + ((((cbLight._m0[_2307].x * _2048) * ((_2357 * _2358) + _741)) * _2381) * _2096);
    float _2471 = (((((_2441 * _2360) + _743) * cbLight._m0[_2395].y) * _2460) * _2082) + ((((cbLight._m0[_2307].y * _2050) * ((_2357 * _2360) + _743)) * _2381) * _2096);
    float _2472 = (((((_2441 * _2361) + _744) * cbLight._m0[_2395].z) * _2460) * _2082) + ((((cbLight._m0[_2307].z * _2052) * ((_2357 * _2361) + _744)) * _2381) * _2096);
    float _2528;
    float _2530;
    float _2532;
    if (_2136)
    {
        _2528 = _2470;
        _2530 = _2471;
        _2532 = _2472;
    }
    else
    {
        uint _2534 = _2059 + 2u;
        uint _2538 = _2059 + 10u;
        float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2534].w)) * _592) * 0.949999988079071044921875);
        float _2553 = _2552 * _2552;
        float _2554 = cbLight._m0[_2534].x + _668;
        float _2555 = cbLight._m0[_2534].y + _669;
        float _2556 = cbLight._m0[_2534].z + _670;
        float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
        float _2561 = _2560 * _2554;
        float _2562 = _2560 * _2555;
        float _2563 = _2560 * _2556;
        float _2564 = dot(vec3(_589, _590, _591), vec3(cbLight._m0[_2534].xyz));
        float _4481 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2568 = dot(vec3(_589, _590, _591), vec3(_2561, _2562, _2563));
        float _4492 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2572 = dot(vec3(cbLight._m0[_2534].xyz), vec3(_2561, _2562, _2563));
        float _4503 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2576 = _2553 * _2553;
        float _2580 = ((_2571 * _2571) * (_2576 + (-1.0))) + 1.0;
        float _2587 = exp2(log2(1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * 5.0);
        float _2594 = 1.0 - _2553;
        float _2604 = (0.5 / (((_2336 * ((_2567 * _2594) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2594) + _2553) * _2567))) * _2567;
        float _4514 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2606 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2576 / ((_2580 * _2580) * 3.141590118408203125));
        float _2607 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2528 = (((((_2587 * _2358) + _741) * cbLight._m0[_2538].x) * _2606) * _2607) + _2470;
        _2530 = (((((_2587 * _2360) + _743) * cbLight._m0[_2538].y) * _2606) * _2607) + _2471;
        _2532 = (((((_2587 * _2361) + _744) * cbLight._m0[_2538].z) * _2606) * _2607) + _2472;
    }
    float _2638;
    float _2640;
    float _2642;
    if (_2245)
    {
        _2638 = _2528;
        _2640 = _2530;
        _2642 = _2532;
    }
    else
    {
        uint _2649 = _2059 + 3u;
        uint _2653 = _2059 + 11u;
        float _2667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2649].w)) * _592) * 0.949999988079071044921875);
        float _2668 = _2667 * _2667;
        float _2669 = cbLight._m0[_2649].x + _668;
        float _2670 = cbLight._m0[_2649].y + _669;
        float _2671 = cbLight._m0[_2649].z + _670;
        float _2675 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
        float _2676 = _2675 * _2669;
        float _2677 = _2675 * _2670;
        float _2678 = _2675 * _2671;
        float _2679 = dot(vec3(_589, _590, _591), vec3(cbLight._m0[_2649].xyz));
        float _4530 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2682 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2683 = dot(vec3(_589, _590, _591), vec3(_2676, _2677, _2678));
        float _4541 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2686 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2687 = dot(vec3(cbLight._m0[_2649].xyz), vec3(_2676, _2677, _2678));
        float _4552 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2691 = _2668 * _2668;
        float _2695 = ((_2686 * _2686) * (_2691 + (-1.0))) + 1.0;
        float _2702 = exp2(log2(1.0 - (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) * 5.0);
        float _2709 = 1.0 - _2668;
        float _2719 = (0.5 / (((_2336 * ((_2682 * _2709) + _2668)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2709) + _2668) * _2682))) * _2682;
        float _4563 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2721 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2691 / ((_2695 * _2695) * 3.141590118408203125));
        float _2722 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2638 = (((((_2702 * _2358) + _741) * cbLight._m0[_2653].x) * _2721) * _2722) + _2528;
        _2640 = (((((_2702 * _2360) + _743) * cbLight._m0[_2653].y) * _2721) * _2722) + _2530;
        _2642 = (((((_2702 * _2361) + _744) * cbLight._m0[_2653].z) * _2721) * _2722) + _2532;
    }
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    if (_2057.y == 0u)
    {
        uvec4 _2743 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2744 = _2743.x;
        uint _2755 = uint((float(_2743.y) * floor(float(uint(cbSceneParam._m0[85u].y * _677) / _2744))) + floor(float(uint(cbSceneParam._m0[85u].x * _676) / _2744)));
        float _2765 = (log2(_1835 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2766 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        uint _2769 = uint(isnan(14.0) ? _2766 : (isnan(_2766) ? 14.0 : min(_2766, 14.0)));
        uvec4 _2774 = texelFetch(g_lightClusterGridBuffer, int(((_2769 << 2u) + (_2755 << 6u)) >> 2u));
        uint _2775 = _2774.x;
        uint _2776 = _2743.z;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        if (((((1u << ((_2776 >> 4u) & 15u)) + 4294967295u) & _2775) == 0u) || ((_2776 & 240u) == 0u))
        {
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
        }
        else
        {
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            uint _3005 = 0u;
            uint _3014;
            bool _3015;
            for (;;)
            {
                _3014 = texelFetch(g_lightClassification, int((((_2769 << 5u) + (_2755 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                _3015 = _3014 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3015)
                {
                    frontier_phi_66_pred = _3004;
                    frontier_phi_66_pred_1 = _3003;
                    frontier_phi_66_pred_2 = _3002;
                    frontier_phi_66_pred_3 = _3001;
                    frontier_phi_66_pred_4 = _3000;
                    frontier_phi_66_pred_5 = _2999;
                }
                else
                {
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    uint _3129;
                    _3123 = _2999;
                    _3124 = _3000;
                    _3125 = _3001;
                    _3126 = _3002;
                    _3127 = _3003;
                    _3128 = _3004;
                    _3129 = _3014;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    for (;;)
                    {
                        uint _3133 = uint(findLSB(_3129)) + (_3005 << 5u);
                        uint _3130 = (_3129 + 4294967295u) & _3129;
                        uint _3135 = _3133 * 48u;
                        vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 3u)).x));
                        uint _3155 = (_3133 * 48u) + 4u;
                        vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3155)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 3u)).x));
                        uint _3174 = (_3133 * 48u) + 8u;
                        vec3 _3185 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x));
                        float _3189 = _3149.x - _1833;
                        float _3190 = _3149.y - _1834;
                        float _3191 = _3149.z - _1835;
                        float _3192 = dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191));
                        float _3195 = inversesqrt(_3192);
                        float _3196 = _3195 * _3189;
                        float _3197 = _3195 * _3190;
                        float _3198 = _3195 * _3191;
                        float _3199 = dot(vec3(_698, _701, _704), vec3(_3196, _3197, _3198));
                        float _3204 = 1.0 - (_3192 * _3149.w);
                        float _4589 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3205 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                        float _3206 = sqrt(_3192) * _3168.w;
                        float _3209 = 1.39999997615814208984375 / (_3206 + 1.39999997615814208984375);
                        float _3210 = _3209 * _3209;
                        float _3213 = ((1.0 - _3210) * _3199) + _3210;
                        float _3216 = _3206 * _3206;
                        float _3220 = ((isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))) * _3205) / ((_3216 * 0.699999988079071044921875) + 1.0);
                        float _3224 = (-0.0) - _1833;
                        float _3225 = (-0.0) - _1834;
                        float _3226 = (-0.0) - _1835;
                        float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                        float _3231 = _3230 * _3224;
                        float _3232 = _3230 * _3225;
                        float _3233 = _3230 * _3226;
                        float _3240 = exp2(log2(1.0 / ((_3216 * 3.5) + 5.0)) * 0.25);
                        float _3241 = 1.0 - _773;
                        float _3248 = sqrt(1.0 - ((1.0 - (_3241 * _3241)) * (1.0 - (_3240 * _3240))));
                        float _3249 = _3248 * _3248;
                        float _3250 = _3249 * _3249;
                        float _3251 = _3231 + _3196;
                        float _3252 = _3232 + _3197;
                        float _3253 = _3233 + _3198;
                        float _3257 = inversesqrt(dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253)));
                        float _3261 = dot(vec3(_698, _701, _704), vec3(_3231, _3232, _3233));
                        float _4605 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3264 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                        float _3265 = dot(vec3(_698, _701, _704), vec3(_3257 * _3251, _3257 * _3252, _3257 * _3253));
                        float _4616 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3268 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3272 = ((_3268 * _3268) * (_3250 + (-1.0))) + 1.0;
                        float _3273 = _3209 * _3249;
                        float _3274 = _3273 * _3273;
                        float _3277 = ((1.0 - _3274) * _3199) + _3274;
                        float _4627 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3278 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3279 = 1.0 - _3249;
                        float _3289 = (0.5 / (((_3278 * ((_3264 * _3279) + _3249)) + 9.9999999392252902907785028219223e-09) + (((_3278 * _3279) + _3249) * _3264))) * _3278;
                        float _4638 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3300 = (((_3250 * 3.1415927410125732421875) * (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) / ((_3272 * _3272) * ((_3216 * 2.1991131305694580078125) + 3.141590118408203125))) * _3205;
                        _3058 = (_3220 * _3168.x) + _3126;
                        _3059 = (_3220 * _3168.y) + _3127;
                        _3060 = (_3220 * _3168.z) + _3128;
                        _3055 = (_3300 * _3185.x) + _3123;
                        _3056 = (_3300 * _3185.y) + _3124;
                        _3057 = (_3300 * _3185.z) + _3125;
                        if (_3130 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3123 = _3055;
                            _3124 = _3056;
                            _3125 = _3057;
                            _3126 = _3058;
                            _3127 = _3059;
                            _3128 = _3060;
                            _3129 = _3130;
                        }
                    }
                    frontier_phi_66_pred = _3060;
                    frontier_phi_66_pred_1 = _3059;
                    frontier_phi_66_pred_2 = _3058;
                    frontier_phi_66_pred_3 = _3057;
                    frontier_phi_66_pred_4 = _3056;
                    frontier_phi_66_pred_5 = _3055;
                }
                _2866 = frontier_phi_66_pred;
                _2864 = frontier_phi_66_pred_1;
                _2862 = frontier_phi_66_pred_2;
                _2860 = frontier_phi_66_pred_3;
                _2858 = frontier_phi_66_pred_4;
                _2856 = frontier_phi_66_pred_5;
                uint _3006 = _3005 + 1u;
                if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2999 = _2856;
                    _3000 = _2858;
                    _3001 = _2860;
                    _3002 = _2862;
                    _3003 = _2864;
                    _3004 = _2866;
                    _3005 = _3006;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
        }
        uvec4 _2869 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2870 = _2869.z;
        uint _2872 = (_2870 >> 8u) & 15u;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        if (((4294967295u << _2872) & _2775) == 0u)
        {
            _2967 = _2855;
            _2969 = _2857;
            _2971 = _2859;
            _2973 = _2861;
            _2975 = _2863;
            _2977 = _2865;
        }
        else
        {
            float _2992 = inversesqrt(dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835)));
            float _2993 = _2992 * _1833;
            float _2994 = _2992 * _1834;
            float _2995 = _2992 * _1835;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2872 < ((_2870 >> 12u) & 15u))
            {
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _3106 = _2855;
                float _3107 = _2857;
                float _3108 = _2859;
                float _3109 = _2861;
                float _3110 = _2863;
                float _3111 = _2865;
                uint _3112 = _2872;
                uint _3121;
                bool _3122;
                for (;;)
                {
                    _3121 = texelFetch(g_lightClassification, int((((_2769 << 5u) + (_2755 << 9u)) + (_3112 << 2u)) >> 2u)).x;
                    _3122 = _3121 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3122)
                    {
                        frontier_phi_72_pred = _3111;
                        frontier_phi_72_pred_1 = _3110;
                        frontier_phi_72_pred_2 = _3109;
                        frontier_phi_72_pred_3 = _3108;
                        frontier_phi_72_pred_4 = _3107;
                        frontier_phi_72_pred_5 = _3106;
                    }
                    else
                    {
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3318 = _3106;
                        float _3319 = _3107;
                        float _3320 = _3108;
                        float _3321 = _3109;
                        float _3322 = _3110;
                        float _3323 = _3111;
                        uint _3324 = _3121;
                        uint _3325;
                        vec4 _3350;
                        float _3351;
                        vec4 _3366;
                        vec3 _3378;
                        vec4 _3394;
                        vec4 _3410;
                        float _3456;
                        bool _3457;
                        for (;;)
                        {
                            uint _3335 = ((_3112 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3324));
                            _3325 = (_3324 + 4294967295u) & _3324;
                            uint _3337 = _3335 * 40u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            _3351 = _3350.w;
                            uint _3353 = (_3335 * 40u) + 4u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3335 * 40u) + 8u;
                            _3378 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x));
                            uint _3381 = (_3335 * 40u) + 16u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3397 = (_3335 * 40u) + 20u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3335 * 40u) + 24u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3431 = (_3335 * 40u) + 28u;
                            vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            _3456 = fma(_1835, _3444.z, fma(_1834, _3444.y, _3444.x * _1833)) + _3444.w;
                            _3457 = !((fma(_1835, _3425.z, fma(_1834, _3425.y, _3425.x * _1833)) + _3425.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3457)
                            {
                                float _3484 = _3350.x - _1833;
                                float _3485 = _3350.y - _1834;
                                float _3486 = _3350.z - _1835;
                                float _3487 = dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486));
                                float _3490 = inversesqrt(_3487);
                                float _3491 = _3490 * _3484;
                                float _3492 = _3490 * _3485;
                                float _3493 = _3490 * _3486;
                                float _3497 = 1.0 - (_3487 / (_3351 * _3351));
                                float _4649 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3502 = sqrt(_3487) * _3366.w;
                                float _3504 = 1.39999997615814208984375 / (_3502 + 1.39999997615814208984375);
                                float _3505 = _3504 * _3504;
                                float _3508 = ((1.0 - _3505) * dot(vec3(_3491, _3492, _3493), vec3(_698, _701, _704))) + _3505;
                                float _3511 = _3502 * _3502;
                                float _3515 = (fma(_1835, _3394.z, fma(_1834, _3394.y, _3394.x * _1833)) + _3394.w) / _3456;
                                float _3516 = (fma(_1835, _3410.z, fma(_1834, _3410.y, _3410.x * _1833)) + _3410.w) / _3456;
                                float _3520 = 1.0 - dot(vec2(_3515, _3516), vec2(_3515, _3516));
                                float _4665 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                                float _3522 = _3521 * (((isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0))) * _3498) / ((_3511 * 0.699999988079071044921875) + 1.0));
                                float _3534 = exp2(log2(1.0 / ((_3511 * 3.5) + 5.0)) * 0.25);
                                float _3535 = 1.0 - _773;
                                float _3542 = sqrt(1.0 - ((1.0 - (_3535 * _3535)) * (1.0 - (_3534 * _3534))));
                                float _3543 = _3542 * _3542;
                                float _3544 = _3543 * _3543;
                                float _3545 = _3491 - _2993;
                                float _3546 = _3492 - _2994;
                                float _3547 = _3493 - _2995;
                                float _3551 = inversesqrt(dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547)));
                                float _3555 = dot(vec3(_698, _701, _704), vec3((-0.0) - _2993, (-0.0) - _2994, (-0.0) - _2995));
                                float _4676 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3558 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3559 = dot(vec3(_698, _701, _704), vec3(_3551 * _3545, _3551 * _3546, _3551 * _3547));
                                float _4687 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3562 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3566 = ((_3562 * _3562) * (_3544 + (-1.0))) + 1.0;
                                float _3567 = _3504 * _3543;
                                float _3568 = _3567 * _3567;
                                float _3574 = ((1.0 - _3568) * dot(vec3(_698, _701, _704), vec3(_3491, _3492, _3493))) + _3568;
                                float _4698 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3575 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3576 = 1.0 - _3543;
                                float _3586 = (0.5 / (((_3575 * ((_3558 * _3576) + _3543)) + 9.9999999392252902907785028219223e-09) + (((_3575 * _3576) + _3543) * _3558))) * _3575;
                                float _4709 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3596 = (_3521 * _3498) * (((_3544 * 3.1415927410125732421875) * (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) / ((_3566 * _3566) * ((_3511 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3522 * _3366.y;
                                frontier_phi_78_pred_1 = _3522 * _3366.x;
                                frontier_phi_78_pred_2 = _3596 * _3378.z;
                                frontier_phi_78_pred_3 = _3596 * _3378.y;
                                frontier_phi_78_pred_4 = _3596 * _3378.x;
                                frontier_phi_78_pred_5 = _3522 * _3366.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3604 = frontier_phi_78_pred;
                            _3603 = frontier_phi_78_pred_1;
                            _3602 = frontier_phi_78_pred_2;
                            _3601 = frontier_phi_78_pred_3;
                            _3600 = frontier_phi_78_pred_4;
                            _3605 = frontier_phi_78_pred_5;
                            _3308 = _3603 + _3321;
                            _3309 = _3604 + _3322;
                            _3310 = _3605 + _3323;
                            _3305 = _3600 + _3318;
                            _3306 = _3601 + _3319;
                            _3307 = _3602 + _3320;
                            if (_3325 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3325;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3310;
                        frontier_phi_72_pred_1 = _3309;
                        frontier_phi_72_pred_2 = _3308;
                        frontier_phi_72_pred_3 = _3307;
                        frontier_phi_72_pred_4 = _3306;
                        frontier_phi_72_pred_5 = _3305;
                    }
                    _2978 = frontier_phi_72_pred;
                    _2976 = frontier_phi_72_pred_1;
                    _2974 = frontier_phi_72_pred_2;
                    _2972 = frontier_phi_72_pred_3;
                    _2970 = frontier_phi_72_pred_4;
                    _2968 = frontier_phi_72_pred_5;
                    uint _3113 = _3112 + 1u;
                    if (_3113 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3106 = _2968;
                        _3107 = _2970;
                        _3108 = _2972;
                        _3109 = _2974;
                        _3110 = _2976;
                        _3111 = _2978;
                        _3112 = _3113;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2978;
                frontier_phi_60_61_ladder_1 = _2976;
                frontier_phi_60_61_ladder_2 = _2972;
                frontier_phi_60_61_ladder_3 = _2970;
                frontier_phi_60_61_ladder_4 = _2968;
                frontier_phi_60_61_ladder_5 = _2974;
            }
            else
            {
                frontier_phi_60_61_ladder = _2865;
                frontier_phi_60_61_ladder_1 = _2863;
                frontier_phi_60_61_ladder_2 = _2859;
                frontier_phi_60_61_ladder_3 = _2857;
                frontier_phi_60_61_ladder_4 = _2855;
                frontier_phi_60_61_ladder_5 = _2861;
            }
            _2967 = frontier_phi_60_61_ladder_4;
            _2969 = frontier_phi_60_61_ladder_3;
            _2971 = frontier_phi_60_61_ladder_2;
            _2973 = frontier_phi_60_61_ladder_5;
            _2975 = frontier_phi_60_61_ladder_1;
            _2977 = frontier_phi_60_61_ladder;
        }
        float _2982 = isnan(1.0) ? _757 : (isnan(_757) ? 1.0 : min(_757, 1.0));
        _2788 = (_2982 * _2973) + _2300;
        _2790 = (_2982 * _2975) + _2302;
        _2792 = (_2982 * _2977) + _2304;
        _2794 = ((_2967 * _741) * _2982) + _2638;
        _2796 = ((_2969 * _743) * _2982) + _2640;
        _2798 = ((_2971 * _744) * _2982) + _2642;
    }
    else
    {
        _2788 = _2300;
        _2790 = _2302;
        _2792 = _2304;
        _2794 = _2638;
        _2796 = _2640;
        _2798 = _2642;
    }
    float _4725 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4736 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4747 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    uint _2818 = _237 + 6u;
    float _2826 = _676 / cbSceneParam._m0[86u].x;
    float _2827 = _677 / cbSceneParam._m0[86u].y;
    vec4 _2841 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2826, _2827, (log2((isnan(cbSceneParam._m0[77u].w) ? _611 : (isnan(_611) ? cbSceneParam._m0[77u].w : min(_611, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2843 = _2841.x;
    float _2844 = _2841.y;
    float _2845 = _2841.z;
    float _2846 = _2841.w;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    if (_611 > cbSceneParam._m0[78u].w)
    {
        float _2880 = isnan(_611) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _611 : min(cbSceneParam._m0[80u].w, _611));
        float _2881 = _2880 / _611;
        float _2892 = _2881 * _661;
        float _2893 = _662 * _2881;
        float _2894 = (-0.0) - _2893;
        float _2895 = _2881 * _663;
        float _2897 = (cbSceneParam._m0[77u].w * _2894) / _2880;
        float _2898 = _2897 + cbSceneParam._m0[79u].w;
        float _2899 = cbSceneParam._m0[79u].w - _2893;
        float _2905 = sqrt(((_2892 * _2892) + (_2893 * _2893)) + (_2895 * _2895));
        float _2908 = (1.0 - (cbSceneParam._m0[77u].w / _2880)) * _2905;
        float _2913 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2915 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3068;
        if (abs((_2894 - _2897) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3068 = ((((_2898 > 0.0) ? exp2(_2913 * _2898) : (2.0 - exp2(_2915 * _2898))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2908;
        }
        else
        {
            float _3028 = 1.0 / cbSceneParam._m0[80u].x;
            float _3029 = isnan(_2899) ? _2898 : (isnan(_2898) ? _2899 : max(_2898, _2899));
            float _3030 = isnan(_2899) ? _2898 : (isnan(_2898) ? _2899 : min(_2898, _2899));
            float _3039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : min(_3029, 0.0));
            float _3040 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : min(_3030, 0.0));
            _3068 = ((abs(_2905 / _2894) * cbSceneParam._m0[80u].y) * ((((_3039 - _3040) * 2.0) - ((exp2(_2913 * (isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0)))) - exp2(_2913 * (isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))))) * _3028)) - ((exp2(_2915 * _3039) - exp2(_2915 * _3040)) * _3028))) + (_2908 * cbSceneParam._m0[80u].z);
        }
        vec4 _3070 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2826, _2827, 1.0), 0.0);
        float _3079 = exp2((_3068 * (-1.44269502162933349609375)) * (1.0 - _3070.w));
        float _3080 = log2(_3079);
        float _3096 = log2(_2846);
        _2917 = (exp2(_3096 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].x)) * _3070.x) / cbSceneParam._m0[78u].x)) + _2843;
        _2919 = (exp2(_3096 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].y)) * _3070.y) / cbSceneParam._m0[78u].y)) + _2844;
        _2921 = (exp2(_3096 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].z)) * _3070.z) / cbSceneParam._m0[78u].z)) + _2845;
        _2923 = _3079 * _2846;
    }
    else
    {
        _2917 = _2843;
        _2919 = _2844;
        _2921 = _2845;
        _2923 = _2846;
    }
    float _2935 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2936 = _2935 == 3.0;
    float _2937 = log2(_2923);
    float _2944 = exp2(_2937 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2788 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _757))) + ((_2794 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1565)) * cbPerFrame._m0[3u].x));
    float _2945 = exp2(_2937 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2790 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _757))) + ((_2796 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1565)) * cbPerFrame._m0[3u].x));
    float _2946 = exp2(_2937 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2792 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _757))) + ((_2798 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1565)) * cbPerFrame._m0[3u].x));
    float _2955 = (_2935 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2955 * (_2936 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2917)));
    SV_Target.y = _2955 * (_2936 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2919)));
    SV_Target.z = _2955 * (_2936 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2921)));
    SV_Target.w = cbInstanceData._m0[_2818].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2818].w;
}


