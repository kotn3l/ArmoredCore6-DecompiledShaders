#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1550;
float _3930;
float _3931;
float _3932;
float _3933;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3942 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3953 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3964 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].y) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3975 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _450 = (_443 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _451 = (_443 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _452 = (_443 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[24u].y) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3986 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _523 = (_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450;
    float _524 = (_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451;
    float _525 = (_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452;
    float _529 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _523;
    float _532 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _524;
    float _535 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _525;
    float _542 = ((_523 - _529) * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) + _529;
    float _543 = ((_524 - _532) * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) + _532;
    float _544 = ((_525 - _535) * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) + _535;
    vec4 _561 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _603 = _601.x;
    float _604 = _601.y;
    float _605 = _601.z;
    float _612 = ((_584.x - _603) * _443) + _603;
    float _613 = ((_584.y - _604) * _443) + _604;
    float _614 = ((_584.z - _605) * _443) + _605;
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _639 = ((_626.z - _614) * _516) + _614;
    float _642 = ((((_626.x - _612) * _516) + _612) * 2.0) + (-1.0);
    float _643 = ((((_626.y - _613) * _516) + _613) * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _3997 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _649 = sqrt(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))));
    vec4 _663 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _688 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _690 = _688.x;
    float _691 = 1.0 - _690;
    float _697 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _700 = ((isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : min(_697, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _709 = (_700 - ((((((_690 - _691) * cbMtdParam._m0[24u].z) + _691) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _700))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4018 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _710 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _717 = (_710 * (cbMtdParam._m0[17u].x - _542)) + _542;
    float _718 = (_710 * (cbMtdParam._m0[17u].y - _543)) + _543;
    float _719 = (_710 * (cbMtdParam._m0[17u].z - _544)) + _544;
    vec4 _731 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _733 = _731.x;
    float _734 = 1.0 - _733;
    float _759 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_733 - _734) * cbMtdParam._m0[24u].w) + _734) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4029 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _760 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _768 = ((((cbMtdParam._m0[10u].x - _717) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _760) + _717;
    float _769 = ((((cbMtdParam._m0[10u].y - _718) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _760) + _718;
    float _770 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _719)) * _760) + _719;
    vec4 _796 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _798 = _796.x;
    float _816 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _798) * _443) + _798;
    float _833 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _816) * _516) + _816;
    float _837 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _833) * cbMtdParam._m0[19u].z) + _833;
    float _839 = _837 - (_837 * _710);
    float _841 = _839 - (_839 * _760);
    float _846 = (((_561.z - _639) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _639;
    float _850 = ((_663.z - _846) * cbMtdParam._m0[19u].w) + _846;
    vec4 _864 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _871 = (_864.x * 2.0) + (-1.0);
    float _872 = (_864.y * 2.0) + (-1.0);
    float _873 = dot(vec2(_871, _872), vec2(_871, _872));
    float _4040 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _881 = (_710 * (_864.z - _850)) + _850;
    float _884 = ((cbMtdParam._m0[23u].y - _881) * _760) + _881;
    vec4 _905 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _911 = (_905.x * 2.0) + (-1.0);
    float _912 = (_905.y * 2.0) + (-1.0);
    float _913 = dot(vec2(_911, _912), vec2(_911, _912));
    float _4051 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _927 = (_642 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_561.x * 2.0) + (-1.0)))) + (((_663.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _928 = (_643 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_561.y * 2.0) + (-1.0)))) + (((_663.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _940 = (((_871 - _927) + (cbMtdParam._m0[21u].x * _927)) * _710) + _927;
    float _941 = (((_872 - _928) + (cbMtdParam._m0[21u].x * _928)) * _710) + _928;
    float _942 = (_710 * (sqrt(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) - _649)) + _649;
    float _953 = (((_911 - _940) + (_940 * cbMtdParam._m0[22u].z)) * _760) + _940;
    float _954 = (((_912 - _941) + (_941 * cbMtdParam._m0[22u].z)) * _760) + _941;
    float _955 = ((sqrt(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) - _942) * _760) + _942;
    float _957 = cbMtdParam._m0[22u].x + _663.w;
    float _960 = fma(_955, _259 * NORMAL.x, fma(_954, _266 * TANGENT.x, (_252 * _244) * _953));
    float _963 = fma(_955, _259 * NORMAL.y, fma(_954, _266 * TANGENT.y, (_252 * _245) * _953));
    float _966 = fma(_955, _259 * NORMAL.z, fma(_954, _266 * TANGENT.z, (_252 * _246) * _953));
    float _970 = inversesqrt(dot(vec3(_960, _963, _966), vec3(_960, _963, _966)));
    float _971 = _970 * _960;
    float _972 = _970 * _963;
    float _973 = _970 * _966;
    float _4062 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _974 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4084 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4095 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4106 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4117 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _979 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _993 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1043 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1033);
    float _1044 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1033);
    float _1045 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1033);
    float _1049 = inversesqrt(dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045)));
    float _1050 = _1043 * _1049;
    float _1051 = _1044 * _1049;
    float _1052 = _1045 * _1049;
    vec4 _1057 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1059 = _1057.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1231 = sqrt(((_1043 * _1043) + (_1044 * _1044)) + (_1045 * _1045));
        float _1237 = (cbMatDynParam._m0[5u].x * _1231) + cbMatDynParam._m0[5u].y;
        float _4128 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1242 = (cbMatDynParam._m0[5u].z * _1231) + cbMatDynParam._m0[5u].w;
        float _4139 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) - _1238)) + _1238) < ((_1059 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1070 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1071 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1089 = fma(_973, cbSceneParam._m0[5u].z, fma(_972, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _971));
    float _1092 = fma(_973, cbSceneParam._m0[6u].z, fma(_972, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _971));
    float _1095 = fma(_973, cbSceneParam._m0[7u].z, fma(_972, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _971));
    uint _1108 = _291 + 9u;
    uint _1109 = _1108 + uint(cbMatDynParam._m0[0u].w);
    float _1115 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * cbInstanceData._m0[_1109].x;
    float _1116 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * cbInstanceData._m0[_1109].y;
    float _1117 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * cbInstanceData._m0[_1109].z;
    float _4150 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1118 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _4161 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1119 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _4172 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _1120 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _1121 = 1.0 - _979;
    float _1122 = _1118 * _1121;
    float _1123 = _1119 * _1121;
    float _1124 = _1120 * _1121;
    float _1129 = (_1118 + (-0.039999999105930328369140625)) * _979;
    float _1130 = (_1119 + (-0.039999999105930328369140625)) * _979;
    float _1131 = (_1120 + (-0.039999999105930328369140625)) * _979;
    float _1132 = _1129 + 0.039999999105930328369140625;
    float _1134 = _1130 + 0.039999999105930328369140625;
    float _1135 = _1131 + 0.039999999105930328369140625;
    vec4 _1144 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1070, cbSceneParam._m0[86u].y * _1071));
    float _1148 = ((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * TEXCOORD_5.w) * _1144.x;
    float _1149 = dot(vec3(_971, _972, _973), vec3(_1050, _1051, _1052));
    float _1152 = _1149 * 2.0;
    float _1156 = (_1152 * _971) - _1050;
    float _1157 = (_1152 * _972) - _1051;
    float _1158 = (_1152 * _973) - _1052;
    float _1162 = abs(dot(vec3(_1050, _1051, _1052), vec3(_971, _972, _973)));
    float _4183 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _1164 = sqrt(_974);
    float _1177 = exp2((_1164 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1164 * 3.0));
    float _1183 = (1.0 - _1177) * ((_1164 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1184 = _1177 * _1164;
    float _1212 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1216 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1220 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1549;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1274 = fma(_1220, cbModelParam._m0[26u].z, fma(_1216, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1212));
        float _1278 = fma(_1220, cbModelParam._m0[27u].z, fma(_1216, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1212));
        float _1282 = fma(_1220, cbModelParam._m0[28u].z, fma(_1216, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1212));
        float _1307 = _1212 + _971;
        float _1308 = _1216 + _972;
        float _1309 = _1220 + _973;
        float _1319 = fma(_1309, cbModelParam._m0[26u].z, fma(_1308, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1307)) - _1274;
        float _1320 = fma(_1309, cbModelParam._m0[27u].z, fma(_1308, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1307)) - _1278;
        float _1321 = fma(_1309, cbModelParam._m0[28u].z, fma(_1308, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1307)) - _1282;
        float _1325 = inversesqrt(dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321)));
        float _1338 = ((_1325 * _1319) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1274 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1339 = ((_1325 * _1320) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1278 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1325 * _1321) / cbModelParam._m0[34u].z) + ((((((_1282 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        float _1377 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1343.x + (-0.5));
        float _1379 = _1377 * (_1343.y + (-0.5));
        float _1380 = _1377 * (_1343.z + (-0.5));
        float _1387 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1350.x + (-0.5));
        float _1389 = _1387 * (_1350.y + (-0.5));
        float _1390 = _1387 * (_1350.z + (-0.5));
        float _1397 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1357.x + (-0.5));
        float _1399 = _1397 * (_1357.y + (-0.5));
        float _1400 = _1397 * (_1357.z + (-0.5));
        float _1407 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1364.x + (-0.5));
        float _1409 = _1407 * (_1364.y + (-0.5));
        float _1410 = _1407 * (_1364.z + (-0.5));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = _1378 * 0.5;
        float _1415 = _1388 * 0.5;
        float _1416 = _1398 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1431 = (dot(vec3(_971, _972, _973), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1441 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4231 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1443 + 1.0))) + _1448) * _1411;
        float _1458 = _1379 * 0.5;
        float _1459 = _1389 * 0.5;
        float _1460 = _1399 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_971, _972, _973), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4264 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1485 + 1.0))) + _1490) * _1412;
        float _1500 = _1380 * 0.5;
        float _1501 = _1390 * 0.5;
        float _1502 = _1400 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_971, _972, _973), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4297 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1527 + 1.0))) + _1532) * _1413;
        _1549 = _1380;
        _1551 = _1379;
        _1552 = _1378;
        _1553 = _1390;
        _1554 = _1389;
        _1555 = _1388;
        _1556 = _1400;
        _1557 = _1399;
        _1558 = _1398;
        _1559 = _1413;
        _1560 = _1412;
        _1561 = _1411;
        _1562 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1563 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1564 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
    }
    else
    {
        _1549 = _1550;
        _1551 = _1550;
        _1552 = _1550;
        _1553 = _1550;
        _1554 = _1550;
        _1555 = _1550;
        _1556 = _1550;
        _1557 = _1550;
        _1558 = _1550;
        _1559 = _1550;
        _1560 = _1550;
        _1561 = _1550;
        _1562 = 0.0;
        _1563 = 0.0;
        _1564 = 0.0;
    }
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1591 = fma(_1220, cbModelParam._m0[30u].z, fma(_1216, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1212));
        float _1595 = fma(_1220, cbModelParam._m0[31u].z, fma(_1216, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1212));
        float _1599 = fma(_1220, cbModelParam._m0[32u].z, fma(_1216, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1212));
        float _1622 = _1212 + _971;
        float _1623 = _1216 + _972;
        float _1624 = _1220 + _973;
        float _1634 = fma(_1624, cbModelParam._m0[30u].z, fma(_1623, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1622)) - _1591;
        float _1635 = fma(_1624, cbModelParam._m0[31u].z, fma(_1623, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1622)) - _1595;
        float _1636 = fma(_1624, cbModelParam._m0[32u].z, fma(_1623, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1622)) - _1599;
        float _1640 = inversesqrt(dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636)));
        float _1653 = ((_1640 * _1634) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1591 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1654 = ((_1640 * _1635) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1595 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1655 = ((_1640 * _1636) / cbModelParam._m0[35u].z) + ((((((_1599 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1653, _1654, _1655), 0.0);
        vec4 _1664 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1653, _1654, _1655), 0.0);
        vec4 _1671 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1653, _1654, _1655), 0.0);
        vec4 _1678 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1653, _1654, _1655), 0.0);
        float _1690 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1691 = _1690 * (_1657.x + (-0.5));
        float _1692 = _1690 * (_1657.y + (-0.5));
        float _1693 = _1690 * (_1657.z + (-0.5));
        float _1700 = exp2((_1664.w + (-0.5)) * 20.0) * 2.0;
        float _1701 = _1700 * (_1664.x + (-0.5));
        float _1702 = _1700 * (_1664.y + (-0.5));
        float _1703 = _1700 * (_1664.z + (-0.5));
        float _1710 = exp2((_1671.w + (-0.5)) * 20.0) * 2.0;
        float _1711 = _1710 * (_1671.x + (-0.5));
        float _1712 = _1710 * (_1671.y + (-0.5));
        float _1713 = _1710 * (_1671.z + (-0.5));
        float _1720 = exp2((_1678.w + (-0.5)) * 20.0) * 2.0;
        float _1721 = _1720 * (_1678.x + (-0.5));
        float _1722 = _1720 * (_1678.y + (-0.5));
        float _1723 = _1720 * (_1678.z + (-0.5));
        float _1724 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1725 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1726 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1727 = _1691 * 0.5;
        float _1728 = _1701 * 0.5;
        float _1729 = _1711 * 0.5;
        float _1730 = dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729));
        float _1735 = (_1730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1730);
        float _1743 = (dot(vec3(_971, _972, _973), vec3(_1735 * _1727, _1735 * _1728, _1735 * _1729)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1752 = sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729)) / (_1724 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1754 = _1753 * 2.0;
        float _1758 = (1.0 - _1753) / (_1753 + 1.0);
        float _4360 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1768 = ((((1.0 - _1759) * (_1754 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1754 + 1.0))) + _1759) * _1724;
        float _1769 = _1692 * 0.5;
        float _1770 = _1702 * 0.5;
        float _1771 = _1712 * 0.5;
        float _1772 = dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771));
        float _1777 = (_1772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1772);
        float _1785 = (dot(vec3(_971, _972, _973), vec3(_1777 * _1769, _1777 * _1770, _1777 * _1771)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1794 = sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771)) / (_1725 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1796 = _1795 * 2.0;
        float _1800 = (1.0 - _1795) / (_1795 + 1.0);
        float _4393 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1810 = ((((1.0 - _1801) * (_1796 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1796 + 1.0))) + _1801) * _1725;
        float _1811 = _1693 * 0.5;
        float _1812 = _1703 * 0.5;
        float _1813 = _1713 * 0.5;
        float _1814 = dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813));
        float _1819 = (_1814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1814);
        float _1827 = (dot(vec3(_971, _972, _973), vec3(_1819 * _1811, _1819 * _1812, _1819 * _1813)) + 1.0) * 0.5;
        float _4404 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1836 = sqrt(((_1812 * _1812) + (_1811 * _1811)) + (_1813 * _1813)) / (_1726 + 9.9999997473787516355514526367188e-06);
        float _4415 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1837 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1838 = _1837 * 2.0;
        float _1842 = (1.0 - _1837) / (_1837 + 1.0);
        float _4426 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1852 = ((((1.0 - _1843) * (_1838 + 2.0)) * exp2(log2(isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_1838 + 1.0))) + _1843) * _1726;
        _1860 = _1693;
        _1861 = _1692;
        _1862 = _1691;
        _1863 = _1703;
        _1864 = _1702;
        _1865 = _1701;
        _1866 = _1713;
        _1867 = _1712;
        _1868 = _1711;
        _1869 = _1726;
        _1870 = _1725;
        _1871 = _1724;
        _1872 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)));
        _1873 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)));
        _1874 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)));
    }
    else
    {
        _1860 = _1550;
        _1861 = _1550;
        _1862 = _1550;
        _1863 = _1550;
        _1864 = _1550;
        _1865 = _1550;
        _1866 = _1550;
        _1867 = _1550;
        _1868 = _1550;
        _1869 = _1550;
        _1870 = _1550;
        _1871 = _1550;
        _1872 = 0.0;
        _1873 = 0.0;
        _1874 = 0.0;
    }
    float _1884 = (cbModelParam._m0[1u].x * (_1872 - _1562)) + _1562;
    float _1885 = (cbModelParam._m0[1u].x * (_1873 - _1563)) + _1563;
    float _1886 = (cbModelParam._m0[1u].x * (_1874 - _1564)) + _1564;
    float _1907 = fma(_1886, cbSceneParam._m0[89u].z, fma(_1885, cbSceneParam._m0[89u].y, _1884 * cbSceneParam._m0[89u].x));
    float _1910 = fma(_1886, cbSceneParam._m0[90u].z, fma(_1885, cbSceneParam._m0[90u].y, _1884 * cbSceneParam._m0[90u].x));
    float _1913 = fma(_1886, cbSceneParam._m0[91u].z, fma(_1885, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1884));
    float _1928 = _1156 * 0.5;
    float _1929 = _1157 * 0.5;
    float _1930 = _1158 * 0.5;
    float _1931 = dot(vec4(_1928, _1929, _1930, 1.0), vec4(_1862, _1865, _1868, _1871));
    float _1934 = dot(vec4(_1928, _1929, _1930, 1.0), vec4(_1861, _1864, _1867, _1870));
    float _1937 = dot(vec4(_1928, _1929, _1930, 1.0), vec4(_1860, _1863, _1866, _1869));
    float _1971;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1944 = dot(vec4(_1928, _1929, _1930, 1.0), vec4(_1549, _1553, _1556, _1559));
        float _1948 = dot(vec4(_1928, _1929, _1930, 1.0), vec4(_1551, _1554, _1557, _1560));
        float _1952 = dot(vec4(_1928, _1929, _1930, 1.0), vec4(_1552, _1555, _1558, _1561));
        float _1959 = dot(vec4(cbModelParam._m0[39u]), vec4(_1928, _1929, _1930, 1.0));
        _1971 = dot(vec3(isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)), isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0)), isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1959) ? 0.0 : (isnan(0.0) ? _1959 : max(0.0, _1959))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1971 = 1.0;
    }
    float _1982;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1973 = dot(vec4(cbModelParam._m0[40u]), vec4(_1928, _1929, _1930, 1.0));
        _1982 = dot(vec3(isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)), isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)), isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1973) ? 0.0 : (isnan(0.0) ? _1973 : max(0.0, _1973))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1982 = 1.0;
    }
    float _1986 = (_1982 * cbModelParam._m0[1u].x) + (_1971 * (1.0 - cbModelParam._m0[1u].x));
    float _1996 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _974);
    float _1997 = isnan(_1996) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1996 : min(cbModelParam._m0[25u].z, _1996));
    float _2078;
    float _2080;
    float _2082;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2045 = fma(_1220, cbModelParam._m0[13u].z, fma(_1216, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1212)) + cbModelParam._m0[13u].w;
        float _2049 = fma(_1220, cbModelParam._m0[14u].z, fma(_1216, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1212)) + cbModelParam._m0[14u].w;
        float _2053 = fma(_1220, cbModelParam._m0[15u].z, fma(_1216, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1212)) + cbModelParam._m0[15u].w;
        float _2056 = fma(_1158, cbModelParam._m0[13u].z, fma(_1157, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1156));
        float _2059 = fma(_1158, cbModelParam._m0[14u].z, fma(_1157, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1156));
        float _2062 = fma(_1158, cbModelParam._m0[15u].z, fma(_1157, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1156));
        float _2090;
        if (_2056 > 0.0)
        {
            _2090 = abs((1.0 - _2045) / _2056);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2045 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2090 = frontier_phi_17_15_ladder;
        }
        float _2293;
        if (_2059 > 0.0)
        {
            _2293 = abs((1.0 - _2049) / _2059);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2049 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2293 = frontier_phi_26_22_ladder;
        }
        float _2547;
        if (_2062 > 0.0)
        {
            _2547 = abs((1.0 - _2053) / _2062);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2053 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2547 = frontier_phi_38_33_ladder;
        }
        float _2549 = isnan(_2293) ? _2090 : (isnan(_2090) ? _2293 : min(_2090, _2293));
        float _2550 = isnan(_2547) ? _2549 : (isnan(_2549) ? _2547 : min(_2549, _2547));
        float _2554 = (_2550 * _2056) + _2045;
        float _2555 = (_2550 * _2059) + _2049;
        float _2556 = (_2550 * _2062) + _2053;
        float _2557 = _2550 * 9.9999997473787516355514526367188e-05;
        float _2559 = (-1.0) - _2557;
        float _2561 = _2557 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2556 > _2561) || ((_2556 < _2559) || ((_2555 > _2561) || ((_2555 < _2559) || ((_2554 < _2559) || (_2554 > _2561))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2684 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2556, cbModelParam._m0[9u].z, fma(_2555, cbModelParam._m0[9u].y, _2554 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2556, cbModelParam._m0[10u].z, fma(_2555, cbModelParam._m0[10u].y, _2554 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2556, cbModelParam._m0[11u].z, fma(_2555, cbModelParam._m0[11u].y, _2554 * cbModelParam._m0[11u].x))), _1997);
            frontier_phi_16_38_ladder = _2684.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2684.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2684.x * cbModelParam._m0[1u].y;
        }
        _2078 = frontier_phi_16_38_ladder_2;
        _2080 = frontier_phi_16_38_ladder_1;
        _2082 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2066 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1156, _1157, _1158), _1997);
        _2078 = _2066.x * cbModelParam._m0[1u].y;
        _2080 = _2066.y * cbModelParam._m0[1u].y;
        _2082 = _2066.z * cbModelParam._m0[1u].y;
    }
    float _2086 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _974);
    float _2087 = isnan(_2086) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2086 : min(cbModelParam._m0[25u].w, _2086));
    float _2177;
    float _2179;
    float _2181;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2141 = fma(_1220, cbModelParam._m0[21u].z, fma(_1216, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1212)) + cbModelParam._m0[21u].w;
        float _2145 = fma(_1220, cbModelParam._m0[22u].z, fma(_1216, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1212)) + cbModelParam._m0[22u].w;
        float _2149 = fma(_1220, cbModelParam._m0[23u].z, fma(_1216, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1212)) + cbModelParam._m0[23u].w;
        float _2152 = fma(_1158, cbModelParam._m0[21u].z, fma(_1157, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1156));
        float _2155 = fma(_1158, cbModelParam._m0[22u].z, fma(_1157, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1156));
        float _2158 = fma(_1158, cbModelParam._m0[23u].z, fma(_1157, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1156));
        float _2298;
        if (_2152 > 0.0)
        {
            _2298 = abs((1.0 - _2141) / _2152);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2152 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2141 + 1.0) / _2152);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2298 = frontier_phi_28_24_ladder;
        }
        float _2574;
        if (_2155 > 0.0)
        {
            _2574 = abs((1.0 - _2145) / _2155);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2145 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2574 = frontier_phi_40_35_ladder;
        }
        float _2787;
        if (_2158 > 0.0)
        {
            _2787 = abs((1.0 - _2149) / _2158);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2158 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2149 + 1.0) / _2158);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2787 = frontier_phi_49_46_ladder;
        }
        float _2789 = isnan(_2574) ? _2298 : (isnan(_2298) ? _2574 : min(_2298, _2574));
        float _2790 = isnan(_2787) ? _2789 : (isnan(_2789) ? _2787 : min(_2789, _2787));
        float _2794 = (_2790 * _2152) + _2141;
        float _2795 = (_2790 * _2155) + _2145;
        float _2796 = (_2790 * _2158) + _2149;
        float _2797 = _2790 * 9.9999997473787516355514526367188e-05;
        float _2798 = (-1.0) - _2797;
        float _2800 = _2797 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2796 > _2800) || ((_2796 < _2798) || ((_2795 > _2800) || ((_2795 < _2798) || ((_2794 < _2798) || (_2794 > _2800))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2995 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2796, cbModelParam._m0[17u].z, fma(_2795, cbModelParam._m0[17u].y, _2794 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2796, cbModelParam._m0[18u].z, fma(_2795, cbModelParam._m0[18u].y, _2794 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2796, cbModelParam._m0[19u].z, fma(_2795, cbModelParam._m0[19u].y, _2794 * cbModelParam._m0[19u].x))), _2087);
            frontier_phi_25_49_ladder = _2995.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2995.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2995.x * cbModelParam._m0[1u].z;
        }
        _2177 = frontier_phi_25_49_ladder_2;
        _2179 = frontier_phi_25_49_ladder_1;
        _2181 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2161 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1156, _1157, _1158), _2087);
        _2177 = _2161.x * cbModelParam._m0[1u].z;
        _2179 = _2161.y * cbModelParam._m0[1u].z;
        _2181 = _2161.z * cbModelParam._m0[1u].z;
    }
    float _2194 = (((_1183 * _1132) + _1184) * _1148) * ((cbModelParam._m0[1u].w * (_2177 - _2078)) + _2078);
    float _2196 = (((_1183 * _1134) + _1184) * _1148) * ((cbModelParam._m0[1u].w * (_2179 - _2080)) + _2080);
    float _2198 = (((_1183 * _1135) + _1184) * _1148) * ((cbModelParam._m0[1u].w * (_2181 - _2082)) + _2082);
    float _2201 = fma(_2198, cbSceneParam._m0[89u].z, fma(_2196, cbSceneParam._m0[89u].y, _2194 * cbSceneParam._m0[89u].x));
    float _2204 = fma(_2198, cbSceneParam._m0[90u].z, fma(_2196, cbSceneParam._m0[90u].y, _2194 * cbSceneParam._m0[90u].x));
    float _2207 = fma(_2198, cbSceneParam._m0[91u].z, fma(_2196, cbSceneParam._m0[91u].y, _2194 * cbSceneParam._m0[91u].x));
    uvec4 _2217 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2219 = _2217.x * 14u;
    uint _2220 = _2219 + 13u;
    float _2227 = _1148 + (-1.0);
    float _2232 = (cbLight._m0[_2220].x * _2227) + 1.0;
    float _2233 = (cbLight._m0[_2220].y * _2227) + 1.0;
    float _2234 = (cbLight._m0[_2220].z * _2227) + 1.0;
    float _2235 = (cbLight._m0[_2220].w * _2227) + 1.0;
    uint _2236 = _2219 + 5u;
    float _2242 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
    uint _2246 = _2219 + 4u;
    float _2252 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
    uint _2256 = _2219 | 1u;
    float _2267 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_971, _972, _973));
    float _2270 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_971, _972, _973));
    float _4562 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _4573 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2275 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * 0.3183098733425140380859375;
    float _2277 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * 0.3183098733425140380859375;
    float _2284 = ((cbLight._m0[_2236].x * _2242) * _2277) + ((cbLight._m0[_2246].x * _2252) * _2275);
    float _2285 = ((_2242 * cbLight._m0[_2236].y) * _2277) + ((_2252 * cbLight._m0[_2246].y) * _2275);
    float _2286 = ((_2242 * cbLight._m0[_2236].z) * _2277) + ((_2252 * cbLight._m0[_2246].z) * _2275);
    uvec4 _2290 = floatBitsToUint(cbLight._m0[_2219 + 12u]);
    bool _2292 = _2290.x == 0u;
    float _2303;
    float _2305;
    float _2307;
    if (_2292)
    {
        _2303 = _2284;
        _2305 = _2285;
        _2307 = _2286;
    }
    else
    {
        uint _2311 = _2219 + 6u;
        float _2327 = (dot(vec3(cbLight._m0[_2219 + 2u].xyz), vec3(_971, _972, _973)) * 0.5) + 0.5;
        float _2328 = _2327 * _2327;
        float _4584 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2329 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2330 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2303 = (((cbLight._m0[_2311].x * 0.3183098733425140380859375) * _2329) * _2330) + _2284;
        _2305 = (((cbLight._m0[_2311].y * 0.3183098733425140380859375) * _2329) * _2330) + _2285;
        _2307 = (((cbLight._m0[_2311].z * 0.3183098733425140380859375) * _2329) * _2330) + _2286;
    }
    bool _2310 = _2290.y == 0u;
    float _2348;
    float _2350;
    float _2352;
    if (_2310)
    {
        _2348 = _2303;
        _2350 = _2305;
        _2352 = _2307;
    }
    else
    {
        uint _2518 = _2219 + 7u;
        float _2534 = (dot(vec3(cbLight._m0[_2219 + 3u].xyz), vec3(_971, _972, _973)) * 0.5) + 0.5;
        float _2535 = _2534 * _2534;
        float _4600 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2536 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2537 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
        _2348 = (((cbLight._m0[_2518].x * 0.3183098733425140380859375) * _2536) * _2537) + _2303;
        _2350 = (((cbLight._m0[_2518].y * 0.3183098733425140380859375) * _2536) * _2537) + _2305;
        _2352 = (((cbLight._m0[_2518].z * 0.3183098733425140380859375) * _2536) * _2537) + _2307;
    }
    uint _2355 = _2219 + 8u;
    float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2219].w)) * _974) * 0.949999988079071044921875);
    float _2369 = _2368 * _2368;
    float _2370 = cbLight._m0[_2219].x + _1050;
    float _2371 = cbLight._m0[_2219].y + _1051;
    float _2372 = cbLight._m0[_2219].z + _1052;
    float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
    float _2377 = _2376 * _2370;
    float _2378 = _2376 * _2371;
    float _2379 = _2376 * _2372;
    float _2380 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2219].xyz));
    float _4616 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
    float _4627 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _2384 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    float _2385 = dot(vec3(_971, _972, _973), vec3(_2377, _2378, _2379));
    float _4638 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _2389 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2377, _2378, _2379));
    float _4649 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = _2369 * _2369;
    float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
    float _2405 = exp2(log2(1.0 - (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) * 5.0);
    float _2406 = 0.959999978542327880859375 - _1129;
    float _2408 = 0.959999978542327880859375 - _1130;
    float _2409 = 0.959999978542327880859375 - _1131;
    float _2416 = 1.0 - _2369;
    float _2427 = (0.5 / (((_2384 * ((_2383 * _2416) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2416) + _2369) * _2383))) * _2383;
    float _4660 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2429 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
    uint _2440 = _2219 + 9u;
    float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _974) * 0.949999988079071044921875);
    float _2452 = _2451 * _2451;
    float _2453 = cbLight._m0[_2256].x + _1050;
    float _2454 = cbLight._m0[_2256].y + _1051;
    float _2455 = cbLight._m0[_2256].z + _1052;
    float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
    float _2460 = _2459 * _2453;
    float _2461 = _2459 * _2454;
    float _2462 = _2459 * _2455;
    float _2463 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2256].xyz));
    float _4671 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2466 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
    float _2467 = dot(vec3(_971, _972, _973), vec3(_2460, _2461, _2462));
    float _4682 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2470 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _2471 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2460, _2461, _2462));
    float _4693 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2475 = _2452 * _2452;
    float _2479 = ((_2470 * _2470) * (_2475 + (-1.0))) + 1.0;
    float _2486 = exp2(log2(1.0 - (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) * 5.0);
    float _2493 = 1.0 - _2452;
    float _2503 = (0.5 / (((_2384 * ((_2466 * _2493) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2493) + _2452) * _2466))) * _2466;
    float _4704 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2505 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2475 / ((_2479 * _2479) * 3.141590118408203125));
    float _2515 = (((((_2486 * _2406) + _1132) * cbLight._m0[_2440].x) * _2505) * _2242) + (((((_2405 * _2406) + _1132) * cbLight._m0[_2355].x) * _2429) * _2252);
    float _2516 = (((((_2486 * _2408) + _1134) * cbLight._m0[_2440].y) * _2505) * _2242) + (((((_2405 * _2408) + _1134) * cbLight._m0[_2355].y) * _2429) * _2252);
    float _2517 = (((((_2486 * _2409) + _1135) * cbLight._m0[_2440].z) * _2505) * _2242) + (((((_2405 * _2409) + _1135) * cbLight._m0[_2355].z) * _2429) * _2252);
    float _2579;
    float _2581;
    float _2583;
    if (_2292)
    {
        _2579 = _2515;
        _2581 = _2516;
        _2583 = _2517;
    }
    else
    {
        uint _2585 = _2219 + 2u;
        uint _2589 = _2219 + 10u;
        float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2585].w)) * _974) * 0.949999988079071044921875);
        float _2604 = _2603 * _2603;
        float _2605 = cbLight._m0[_2585].x + _1050;
        float _2606 = cbLight._m0[_2585].y + _1051;
        float _2607 = cbLight._m0[_2585].z + _1052;
        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
        float _2612 = _2611 * _2605;
        float _2613 = _2611 * _2606;
        float _2614 = _2611 * _2607;
        float _2615 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2585].xyz));
        float _4715 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2619 = dot(vec3(_971, _972, _973), vec3(_2612, _2613, _2614));
        float _4726 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2623 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_2612, _2613, _2614));
        float _4737 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2627 = _2604 * _2604;
        float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
        float _2638 = exp2(log2(1.0 - (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) * 5.0);
        float _2645 = 1.0 - _2604;
        float _2655 = (0.5 / (((_2384 * ((_2618 * _2645) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2645) + _2604) * _2618))) * _2618;
        float _4748 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2657 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
        float _2658 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2579 = (((((_2638 * _2406) + _1132) * cbLight._m0[_2589].x) * _2657) * _2658) + _2515;
        _2581 = (((((_2638 * _2408) + _1134) * cbLight._m0[_2589].y) * _2657) * _2658) + _2516;
        _2583 = (((((_2638 * _2409) + _1135) * cbLight._m0[_2589].z) * _2657) * _2658) + _2517;
    }
    float _2693;
    float _2695;
    float _2697;
    if (_2310)
    {
        _2693 = _2579;
        _2695 = _2581;
        _2697 = _2583;
    }
    else
    {
        uint _2704 = _2219 + 3u;
        uint _2708 = _2219 + 11u;
        float _2722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2704].w)) * _974) * 0.949999988079071044921875);
        float _2723 = _2722 * _2722;
        float _2724 = cbLight._m0[_2704].x + _1050;
        float _2725 = cbLight._m0[_2704].y + _1051;
        float _2726 = cbLight._m0[_2704].z + _1052;
        float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
        float _2731 = _2730 * _2724;
        float _2732 = _2730 * _2725;
        float _2733 = _2730 * _2726;
        float _2734 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2704].xyz));
        float _4764 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2738 = dot(vec3(_971, _972, _973), vec3(_2731, _2732, _2733));
        float _4775 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2742 = dot(vec3(cbLight._m0[_2704].xyz), vec3(_2731, _2732, _2733));
        float _4786 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2746 = _2723 * _2723;
        float _2750 = ((_2741 * _2741) * (_2746 + (-1.0))) + 1.0;
        float _2757 = exp2(log2(1.0 - (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) * 5.0);
        float _2764 = 1.0 - _2723;
        float _2774 = (0.5 / (((_2384 * ((_2737 * _2764) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2764) + _2723) * _2737))) * _2737;
        float _4797 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2776 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2746 / ((_2750 * _2750) * 3.141590118408203125));
        float _2777 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
        _2693 = (((((_2757 * _2406) + _1132) * cbLight._m0[_2708].x) * _2776) * _2777) + _2579;
        _2695 = (((((_2757 * _2408) + _1134) * cbLight._m0[_2708].y) * _2776) * _2777) + _2581;
        _2697 = (((((_2757 * _2409) + _1135) * cbLight._m0[_2708].z) * _2776) * _2777) + _2583;
    }
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    if (_2217.y == 0u)
    {
        float _2852 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2853 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2852;
        float _2854 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2852;
        float _2855 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2852;
        uvec4 _2867 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2868 = _2867.x;
        uint _2879 = uint((float(_2867.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1071) / _2868))) + floor(float(uint(cbSceneParam._m0[85u].x * _1070) / _2868)));
        float _2889 = (log2(_2855 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2890 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        uint _2893 = uint(isnan(14.0) ? _2890 : (isnan(_2890) ? 14.0 : min(_2890, 14.0)));
        uvec4 _2898 = texelFetch(g_lightClusterGridBuffer, int(((_2893 << 2u) + (_2879 << 6u)) >> 2u));
        uint _2899 = _2898.x;
        uint _2900 = _2867.z;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        if (((((1u << ((_2900 >> 4u) & 15u)) + 4294967295u) & _2899) == 0u) || ((_2900 & 240u) == 0u))
        {
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
        }
        else
        {
            float _3001;
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3011;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            uint _3159 = 0u;
            uint _3168;
            bool _3169;
            for (;;)
            {
                _3168 = texelFetch(g_lightClassification, int((((_2893 << 5u) + (_2879 << 9u)) + (_3159 << 2u)) >> 2u)).x;
                _3169 = _3168 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3169)
                {
                    frontier_phi_66_pred = _3153;
                    frontier_phi_66_pred_1 = _3158;
                    frontier_phi_66_pred_2 = _3157;
                    frontier_phi_66_pred_3 = _3156;
                    frontier_phi_66_pred_4 = _3155;
                    frontier_phi_66_pred_5 = _3154;
                }
                else
                {
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    uint _3304;
                    _3298 = _3153;
                    _3299 = _3154;
                    _3300 = _3155;
                    _3301 = _3156;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3168;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    for (;;)
                    {
                        uint _3308 = uint(findLSB(_3304)) + (_3159 << 5u);
                        uint _3305 = (_3304 + 4294967295u) & _3304;
                        uint _3310 = _3308 * 48u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 3u)).x));
                        uint _3330 = (_3308 * 48u) + 4u;
                        vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 3u)).x));
                        uint _3349 = (_3308 * 48u) + 8u;
                        vec3 _3360 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x));
                        float _3364 = _3324.x - _2853;
                        float _3365 = _3324.y - _2854;
                        float _3366 = _3324.z - _2855;
                        float _3367 = dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366));
                        float _3370 = inversesqrt(_3367);
                        float _3371 = _3370 * _3364;
                        float _3372 = _3370 * _3365;
                        float _3373 = _3370 * _3366;
                        float _3374 = dot(vec3(_1089, _1092, _1095), vec3(_3371, _3372, _3373));
                        float _3379 = 1.0 - (_3367 * _3324.w);
                        float _4823 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3381 = sqrt(_3367) * _3343.w;
                        float _3384 = 1.39999997615814208984375 / (_3381 + 1.39999997615814208984375);
                        float _3385 = _3384 * _3384;
                        float _3388 = ((1.0 - _3385) * _3374) + _3385;
                        float _3391 = _3381 * _3381;
                        float _3395 = ((isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))) * _3380) / ((_3391 * 0.699999988079071044921875) + 1.0);
                        float _3399 = (-0.0) - _2853;
                        float _3400 = (-0.0) - _2854;
                        float _3401 = (-0.0) - _2855;
                        float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                        float _3406 = _3405 * _3399;
                        float _3407 = _3405 * _3400;
                        float _3408 = _3405 * _3401;
                        float _3416 = exp2(log2(1.0 / ((_3391 * 3.5) + 5.0)) * 0.25);
                        float _3417 = 1.0 - _1164;
                        float _3424 = sqrt(1.0 - ((1.0 - (_3417 * _3417)) * (1.0 - (_3416 * _3416))));
                        float _3425 = _3424 * _3424;
                        float _3426 = _3425 * _3425;
                        float _3427 = _3406 + _3371;
                        float _3428 = _3407 + _3372;
                        float _3429 = _3408 + _3373;
                        float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                        float _3437 = dot(vec3(_1089, _1092, _1095), vec3(_3406, _3407, _3408));
                        float _4839 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3440 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                        float _3441 = dot(vec3(_1089, _1092, _1095), vec3(_3433 * _3427, _3433 * _3428, _3433 * _3429));
                        float _4850 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3444 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                        float _3448 = ((_3444 * _3444) * (_3426 + (-1.0))) + 1.0;
                        float _3449 = _3384 * _3425;
                        float _3450 = _3449 * _3449;
                        float _3453 = ((1.0 - _3450) * _3374) + _3450;
                        float _4861 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3454 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                        float _3455 = 1.0 - _3425;
                        float _3465 = (0.5 / (((_3454 * ((_3440 * _3455) + _3425)) + 9.9999999392252902907785028219223e-09) + (((_3454 * _3455) + _3425) * _3440))) * _3454;
                        float _4872 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3476 = (((_3426 * 3.1415927410125732421875) * (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) / ((_3448 * _3448) * ((_3391 * 2.1991131305694580078125) + 3.141590118408203125))) * _3380;
                        _3228 = (_3395 * _3343.x) + _3301;
                        _3229 = (_3395 * _3343.y) + _3302;
                        _3230 = (_3395 * _3343.z) + _3303;
                        _3225 = (_3476 * _3360.x) + _3298;
                        _3226 = (_3476 * _3360.y) + _3299;
                        _3227 = (_3476 * _3360.z) + _3300;
                        if (_3305 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3298 = _3225;
                            _3299 = _3226;
                            _3300 = _3227;
                            _3301 = _3228;
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3305;
                        }
                    }
                    frontier_phi_66_pred = _3225;
                    frontier_phi_66_pred_1 = _3230;
                    frontier_phi_66_pred_2 = _3229;
                    frontier_phi_66_pred_3 = _3228;
                    frontier_phi_66_pred_4 = _3227;
                    frontier_phi_66_pred_5 = _3226;
                }
                _3001 = frontier_phi_66_pred;
                _3011 = frontier_phi_66_pred_1;
                _3009 = frontier_phi_66_pred_2;
                _3007 = frontier_phi_66_pred_3;
                _3005 = frontier_phi_66_pred_4;
                _3003 = frontier_phi_66_pred_5;
                uint _3160 = _3159 + 1u;
                if (_3160 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3153 = _3001;
                    _3154 = _3003;
                    _3155 = _3005;
                    _3156 = _3007;
                    _3157 = _3009;
                    _3158 = _3011;
                    _3159 = _3160;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
        }
        uvec4 _3014 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3015 = _3014.z;
        uint _3017 = (_3015 >> 8u) & 15u;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        if (((4294967295u << _3017) & _2899) == 0u)
        {
            _3121 = _3000;
            _3123 = _3002;
            _3125 = _3004;
            _3127 = _3006;
            _3129 = _3008;
            _3131 = _3010;
        }
        else
        {
            float _3146 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
            float _3147 = _3146 * _2853;
            float _3148 = _3146 * _2854;
            float _3149 = _3146 * _2855;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3017 < ((_3015 >> 12u) & 15u))
            {
                float _3122;
                float _3124;
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3281 = _3000;
                float _3282 = _3002;
                float _3283 = _3004;
                float _3284 = _3006;
                float _3285 = _3008;
                float _3286 = _3010;
                uint _3287 = _3017;
                uint _3296;
                bool _3297;
                for (;;)
                {
                    _3296 = texelFetch(g_lightClassification, int((((_2893 << 5u) + (_2879 << 9u)) + (_3287 << 2u)) >> 2u)).x;
                    _3297 = _3296 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3297)
                    {
                        frontier_phi_77_pred = _3286;
                        frontier_phi_77_pred_1 = _3285;
                        frontier_phi_77_pred_2 = _3284;
                        frontier_phi_77_pred_3 = _3283;
                        frontier_phi_77_pred_4 = _3282;
                        frontier_phi_77_pred_5 = _3281;
                    }
                    else
                    {
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3503 = _3281;
                        float _3504 = _3282;
                        float _3505 = _3283;
                        float _3506 = _3284;
                        float _3507 = _3285;
                        float _3508 = _3286;
                        uint _3509 = _3296;
                        uint _3510;
                        vec4 _3535;
                        float _3536;
                        vec4 _3551;
                        vec3 _3563;
                        vec4 _3578;
                        vec4 _3593;
                        float _3639;
                        bool _3640;
                        for (;;)
                        {
                            uint _3520 = ((_3287 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3509));
                            _3510 = (_3509 + 4294967295u) & _3509;
                            uint _3522 = _3520 * 40u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            _3536 = _3535.w;
                            uint _3538 = (_3520 * 40u) + 4u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3553 = (_3520 * 40u) + 8u;
                            _3563 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x));
                            uint _3565 = (_3520 * 40u) + 16u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3520 * 40u) + 20u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3520 * 40u) + 24u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3614 = (_3520 * 40u) + 28u;
                            vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            _3639 = fma(_2855, _3627.z, fma(_2854, _3627.y, _3627.x * _2853)) + _3627.w;
                            _3640 = !((fma(_2855, _3608.z, fma(_2854, _3608.y, _3608.x * _2853)) + _3608.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3640)
                            {
                                float _3667 = _3535.x - _2853;
                                float _3668 = _3535.y - _2854;
                                float _3669 = _3535.z - _2855;
                                float _3670 = dot(vec3(_3667, _3668, _3669), vec3(_3667, _3668, _3669));
                                float _3673 = inversesqrt(_3670);
                                float _3674 = _3673 * _3667;
                                float _3675 = _3673 * _3668;
                                float _3676 = _3673 * _3669;
                                float _3680 = 1.0 - (_3670 / (_3536 * _3536));
                                float _4883 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3685 = sqrt(_3670) * _3551.w;
                                float _3687 = 1.39999997615814208984375 / (_3685 + 1.39999997615814208984375);
                                float _3688 = _3687 * _3687;
                                float _3691 = ((1.0 - _3688) * dot(vec3(_3674, _3675, _3676), vec3(_1089, _1092, _1095))) + _3688;
                                float _3694 = _3685 * _3685;
                                float _3698 = (fma(_2855, _3578.z, fma(_2854, _3578.y, _3578.x * _2853)) + _3578.w) / _3639;
                                float _3699 = (fma(_2855, _3593.z, fma(_2854, _3593.y, _3593.x * _2853)) + _3593.w) / _3639;
                                float _3703 = 1.0 - dot(vec2(_3698, _3699), vec2(_3698, _3699));
                                float _4899 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                                float _3705 = _3704 * (((isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0))) * _3681) / ((_3694 * 0.699999988079071044921875) + 1.0));
                                float _3717 = exp2(log2(1.0 / ((_3694 * 3.5) + 5.0)) * 0.25);
                                float _3718 = 1.0 - _1164;
                                float _3725 = sqrt(1.0 - ((1.0 - (_3718 * _3718)) * (1.0 - (_3717 * _3717))));
                                float _3726 = _3725 * _3725;
                                float _3727 = _3726 * _3726;
                                float _3728 = _3674 - _3147;
                                float _3729 = _3675 - _3148;
                                float _3730 = _3676 - _3149;
                                float _3734 = inversesqrt(dot(vec3(_3728, _3729, _3730), vec3(_3728, _3729, _3730)));
                                float _3738 = dot(vec3(_1089, _1092, _1095), vec3((-0.0) - _3147, (-0.0) - _3148, (-0.0) - _3149));
                                float _4910 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3741 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                                float _3742 = dot(vec3(_1089, _1092, _1095), vec3(_3734 * _3728, _3734 * _3729, _3734 * _3730));
                                float _4921 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3745 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                                float _3749 = ((_3745 * _3745) * (_3727 + (-1.0))) + 1.0;
                                float _3750 = _3687 * _3726;
                                float _3751 = _3750 * _3750;
                                float _3757 = ((1.0 - _3751) * dot(vec3(_1089, _1092, _1095), vec3(_3674, _3675, _3676))) + _3751;
                                float _4932 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3759 = 1.0 - _3726;
                                float _3769 = (0.5 / (((_3758 * ((_3741 * _3759) + _3726)) + 9.9999999392252902907785028219223e-09) + (((_3758 * _3759) + _3726) * _3741))) * _3758;
                                float _4943 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3779 = (_3704 * _3681) * (((_3727 * 3.1415927410125732421875) * (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0)))) / ((_3749 * _3749) * ((_3694 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3705 * _3551.y;
                                frontier_phi_83_pred_1 = _3705 * _3551.x;
                                frontier_phi_83_pred_2 = _3779 * _3563.z;
                                frontier_phi_83_pred_3 = _3779 * _3563.y;
                                frontier_phi_83_pred_4 = _3779 * _3563.x;
                                frontier_phi_83_pred_5 = _3705 * _3551.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3787 = frontier_phi_83_pred;
                            _3786 = frontier_phi_83_pred_1;
                            _3785 = frontier_phi_83_pred_2;
                            _3784 = frontier_phi_83_pred_3;
                            _3783 = frontier_phi_83_pred_4;
                            _3788 = frontier_phi_83_pred_5;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            _3490 = _3783 + _3503;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            if (_3510 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3510;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3495;
                        frontier_phi_77_pred_1 = _3494;
                        frontier_phi_77_pred_2 = _3493;
                        frontier_phi_77_pred_3 = _3492;
                        frontier_phi_77_pred_4 = _3491;
                        frontier_phi_77_pred_5 = _3490;
                    }
                    _3132 = frontier_phi_77_pred;
                    _3130 = frontier_phi_77_pred_1;
                    _3128 = frontier_phi_77_pred_2;
                    _3126 = frontier_phi_77_pred_3;
                    _3124 = frontier_phi_77_pred_4;
                    _3122 = frontier_phi_77_pred_5;
                    uint _3288 = _3287 + 1u;
                    if (_3288 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3281 = _3122;
                        _3282 = _3124;
                        _3283 = _3126;
                        _3284 = _3128;
                        _3285 = _3130;
                        _3286 = _3132;
                        _3287 = _3288;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3126;
                frontier_phi_58_59_ladder_1 = _3132;
                frontier_phi_58_59_ladder_2 = _3130;
                frontier_phi_58_59_ladder_3 = _3128;
                frontier_phi_58_59_ladder_4 = _3124;
                frontier_phi_58_59_ladder_5 = _3122;
            }
            else
            {
                frontier_phi_58_59_ladder = _3004;
                frontier_phi_58_59_ladder_1 = _3010;
                frontier_phi_58_59_ladder_2 = _3008;
                frontier_phi_58_59_ladder_3 = _3006;
                frontier_phi_58_59_ladder_4 = _3002;
                frontier_phi_58_59_ladder_5 = _3000;
            }
            _3121 = frontier_phi_58_59_ladder_5;
            _3123 = frontier_phi_58_59_ladder_4;
            _3125 = frontier_phi_58_59_ladder;
            _3127 = frontier_phi_58_59_ladder_3;
            _3129 = frontier_phi_58_59_ladder_2;
            _3131 = frontier_phi_58_59_ladder_1;
        }
        float _3136 = isnan(1.0) ? _1148 : (isnan(_1148) ? 1.0 : min(_1148, 1.0));
        _2912 = (_3136 * _3127) + _2348;
        _2914 = (_3136 * _3129) + _2350;
        _2916 = (_3136 * _3131) + _2352;
        _2918 = ((_3121 * _1132) * _3136) + _2693;
        _2920 = ((_3123 * _1134) * _3136) + _2695;
        _2922 = ((_3125 * _1135) * _3136) + _2697;
    }
    else
    {
        _2912 = _2348;
        _2914 = _2350;
        _2916 = _2352;
        _2918 = _2693;
        _2920 = _2695;
        _2922 = _2697;
    }
    float _4959 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _4970 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _4981 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _2939 = ((isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0))) * (_2912 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1148))) + ((_2918 + ((isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0))) * _1986)) * cbPerFrame._m0[3u].x);
    float _2940 = ((isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0))) * (_2914 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1148))) + ((_2920 + ((isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0))) * _1986)) * cbPerFrame._m0[3u].x);
    float _2941 = ((isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0))) * (_2916 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1148))) + ((_2922 + ((isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0))) * _1986)) * cbPerFrame._m0[3u].x);
    uint _2942 = _291 + 6u;
    float _2950 = _1070 / cbSceneParam._m0[86u].x;
    float _2951 = _1071 / cbSceneParam._m0[86u].y;
    vec4 _2965 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2950, _2951, (log2((isnan(cbSceneParam._m0[77u].w) ? _993 : (isnan(_993) ? cbSceneParam._m0[77u].w : min(_993, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2967 = _2965.x;
    float _2968 = _2965.y;
    float _2969 = _2965.z;
    float _2970 = _2965.w;
    float _3063;
    float _3065;
    float _3067;
    float _3069;
    if (_993 > cbSceneParam._m0[78u].w)
    {
        float _3025 = isnan(_993) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _993 : min(cbSceneParam._m0[80u].w, _993));
        float _3026 = _3025 / _993;
        float _3037 = _3026 * _1043;
        float _3038 = _1044 * _3026;
        float _3039 = (-0.0) - _3038;
        float _3041 = _3026 * _1045;
        float _3043 = (cbSceneParam._m0[77u].w * _3039) / _3025;
        float _3044 = _3043 + cbSceneParam._m0[79u].w;
        float _3045 = cbSceneParam._m0[79u].w - _3038;
        float _3051 = sqrt(((_3037 * _3037) + (_3038 * _3038)) + (_3041 * _3041));
        float _3054 = (1.0 - (cbSceneParam._m0[77u].w / _3025)) * _3051;
        float _3059 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3061 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3238;
        if (abs((_3039 - _3043) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3238 = ((((_3044 > 0.0) ? exp2(_3059 * _3044) : (2.0 - exp2(_3061 * _3044))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3054;
        }
        else
        {
            float _3182 = 1.0 / cbSceneParam._m0[80u].x;
            float _3183 = isnan(_3045) ? _3044 : (isnan(_3044) ? _3045 : max(_3044, _3045));
            float _3184 = isnan(_3045) ? _3044 : (isnan(_3044) ? _3045 : min(_3044, _3045));
            float _3193 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : min(_3183, 0.0));
            float _3194 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : min(_3184, 0.0));
            _3238 = ((abs(_3051 / _3039) * cbSceneParam._m0[80u].y) * ((((_3193 - _3194) * 2.0) - ((exp2(_3059 * (isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0)))) - exp2(_3059 * (isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))))) * _3182)) - ((exp2(_3061 * _3193) - exp2(_3061 * _3194)) * _3182))) + (_3054 * cbSceneParam._m0[80u].z);
        }
        vec4 _3240 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2950, _2951, 1.0), 0.0);
        float _3249 = exp2((_3238 * (-1.44269502162933349609375)) * (1.0 - _3240.w));
        float _3250 = log2(_3249);
        float _3266 = log2(_2970);
        _3063 = (exp2(_3266 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].x)) * _3240.x) / cbSceneParam._m0[78u].x)) + _2967;
        _3065 = (exp2(_3266 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].y)) * _3240.y) / cbSceneParam._m0[78u].y)) + _2968;
        _3067 = (exp2(_3266 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].z)) * _3240.z) / cbSceneParam._m0[78u].z)) + _2969;
        _3069 = _3249 * _2970;
    }
    else
    {
        _3063 = _2967;
        _3065 = _2968;
        _3067 = _2969;
        _3069 = _2970;
    }
    bool _3276;
    vec4 _3079;
    vec4 _3101;
    float _3103;
    float _3107;
    float _3108;
    float _3109;
    float _3110;
    bool _3120;
    for (;;)
    {
        _3079 = cbMatDynParam._m0[0u];
        float _3081 = roundEven(_3079.y);
        bool _3082 = _3081 == 3.0;
        float _3083 = log2(_3069);
        float _3090 = exp2(_3083 * cbSceneParam._m0[78u].x) * _2939;
        float _3091 = exp2(_3083 * cbSceneParam._m0[78u].y) * _2940;
        float _3092 = exp2(_3083 * cbSceneParam._m0[78u].z) * _2941;
        float _3099 = _1059 + (-0.5);
        _3101 = cbMtdParam._m0[1u];
        _3103 = _3101.y * _3099;
        float _3106 = (_3081 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3107 = _3106 * (_3082 ? _3090 : (_3090 + (cbSceneParam._m0[72u].w * _3063)));
        _3108 = _3106 * (_3082 ? _3091 : (_3091 + (cbSceneParam._m0[72u].w * _3065)));
        _3109 = _3106 * (_3082 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3067)));
        _3110 = _3099 * 0.999000012874603271484375;
        _3120 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3120)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3110) < 0.5)
            {
                _3276 = true;
                break;
            }
        }
        uint _3217 = _1108 + uint(_3079.w);
        if ((cbInstanceData._m0[_3217].w < 1.0) && ((cbInstanceData._m0[_3217].w + _3110) < 0.5))
        {
            _3276 = true;
            break;
        }
        if ((_3103 + 1.0) < _3101.x)
        {
            _3276 = true;
            break;
        }
        _3276 = false;
        break;
    }
    float _3481;
    if (_3276)
    {
        discard_state = true;
        _3481 = 0.0;
    }
    else
    {
        _3481 = cbInstanceData._m0[_2942].w;
    }
    SV_Target.x = _3107;
    SV_Target.y = _3108;
    SV_Target.z = _3109;
    SV_Target.w = _3481;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2942].w;
    discard_exit();
}


