#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _962;
float _3632;
float _3633;
float _3634;
float _3635;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    vec4 _268 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2(((_247 * TEXCOORD.z) * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, ((_247 * TEXCOORD.w) * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _319 = _315.z;
    float _323 = (_315.x * 2.0) + (-1.0);
    float _324 = (_315.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_323, _324), vec2(_323, _324));
    float _3644 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))));
    float _336 = _323 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_289.x * 2.0) + (-1.0)));
    float _337 = _324 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_289.y * 2.0) + (-1.0)));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _352 = _350.x;
    float _357 = (((_289.z - _319) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _319;
    float _362 = cbMtdParam._m0[22u].x + _315.w;
    float _365 = fma(_331, _215 * NORMAL.x, fma(_337, _222 * TANGENT.x, (_208 * _200) * _336));
    float _368 = fma(_331, _215 * NORMAL.y, fma(_337, _222 * TANGENT.y, (_208 * _201) * _336));
    float _371 = fma(_331, _215 * NORMAL.z, fma(_337, _222 * TANGENT.z, (_208 * _202) * _336));
    float _375 = inversesqrt(dot(vec3(_365, _368, _371), vec3(_365, _368, _371)));
    float _376 = _375 * _365;
    float _377 = _375 * _368;
    float _378 = _375 * _371;
    float _3655 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _379 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3677 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3688 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3699 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3710 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _384 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _398 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _440 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _450 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _440);
    float _451 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _440);
    float _452 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _440);
    float _456 = inversesqrt(dot(vec3(_450, _451, _452), vec3(_450, _451, _452)));
    float _457 = _450 * _456;
    float _458 = _451 * _456;
    float _459 = _452 * _456;
    vec4 _464 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _466 = _464.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _641 = sqrt(((_450 * _450) + (_451 * _451)) + (_452 * _452));
        float _647 = (cbMatDynParam._m0[5u].x * _641) + cbMatDynParam._m0[5u].y;
        float _3721 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _648 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _652 = (cbMatDynParam._m0[5u].z * _641) + cbMatDynParam._m0[5u].w;
        float _3732 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) - _648)) + _648) < ((_466 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _478 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _479 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _499 = fma(_378, cbSceneParam._m0[5u].z, fma(_377, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _376));
    float _502 = fma(_378, cbSceneParam._m0[6u].z, fma(_377, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _376));
    float _505 = fma(_378, cbSceneParam._m0[7u].z, fma(_377, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _376));
    uint _518 = _228 + 9u;
    uint _519 = _518 + uint(cbMatDynParam._m0[0u].w);
    float _525 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) * cbInstanceData._m0[_519].x;
    float _526 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * cbInstanceData._m0[_519].y;
    float _527 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) * cbInstanceData._m0[_519].z;
    float _3743 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _3754 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _531 = 1.0 - _384;
    float _532 = _528 * _531;
    float _533 = _529 * _531;
    float _534 = _530 * _531;
    float _539 = (_528 + (-0.039999999105930328369140625)) * _384;
    float _540 = (_529 + (-0.039999999105930328369140625)) * _384;
    float _541 = (_530 + (-0.039999999105930328369140625)) * _384;
    float _542 = _539 + 0.039999999105930328369140625;
    float _544 = _540 + 0.039999999105930328369140625;
    float _545 = _541 + 0.039999999105930328369140625;
    vec4 _554 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _478, cbSceneParam._m0[86u].y * _479));
    float _558 = ((isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * TEXCOORD_5.w) * _554.x;
    float _559 = dot(vec3(_376, _377, _378), vec3(_457, _458, _459));
    float _562 = _559 * 2.0;
    float _566 = (_562 * _376) - _457;
    float _567 = (_562 * _377) - _458;
    float _568 = (_562 * _378) - _459;
    float _572 = abs(dot(vec3(_457, _458, _459), vec3(_376, _377, _378)));
    float _3776 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _574 = sqrt(_379);
    float _587 = exp2((_574 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_574 * 3.0));
    float _593 = (1.0 - _587) * ((_574 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _594 = _587 * _574;
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _961;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _686 = fma(_630, cbModelParam._m0[26u].z, fma(_626, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _622));
        float _690 = fma(_630, cbModelParam._m0[27u].z, fma(_626, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _622));
        float _694 = fma(_630, cbModelParam._m0[28u].z, fma(_626, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _622));
        float _719 = _622 + _376;
        float _720 = _626 + _377;
        float _721 = _630 + _378;
        float _731 = fma(_721, cbModelParam._m0[26u].z, fma(_720, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _719)) - _686;
        float _732 = fma(_721, cbModelParam._m0[27u].z, fma(_720, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _719)) - _690;
        float _733 = fma(_721, cbModelParam._m0[28u].z, fma(_720, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _719)) - _694;
        float _737 = inversesqrt(dot(vec3(_731, _732, _733), vec3(_731, _732, _733)));
        float _750 = ((_737 * _731) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_686 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _751 = ((_737 * _732) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_690 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _752 = ((_737 * _733) / cbModelParam._m0[34u].z) + ((((((_694 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        float _789 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_755.x + (-0.5));
        float _791 = _789 * (_755.y + (-0.5));
        float _792 = _789 * (_755.z + (-0.5));
        float _799 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_762.x + (-0.5));
        float _801 = _799 * (_762.y + (-0.5));
        float _802 = _799 * (_762.z + (-0.5));
        float _809 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_769.x + (-0.5));
        float _811 = _809 * (_769.y + (-0.5));
        float _812 = _809 * (_769.z + (-0.5));
        float _819 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_776.x + (-0.5));
        float _821 = _819 * (_776.y + (-0.5));
        float _822 = _819 * (_776.z + (-0.5));
        float _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _825 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _826 = _790 * 0.5;
        float _827 = _800 * 0.5;
        float _828 = _810 * 0.5;
        float _829 = dot(vec3(_826, _827, _828), vec3(_826, _827, _828));
        float _834 = (_829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_829);
        float _843 = (dot(vec3(_376, _377, _378), vec3(_834 * _826, _834 * _827, _834 * _828)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _853 = sqrt(((_827 * _827) + (_826 * _826)) + (_828 * _828)) / (_823 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3824 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_855 + 1.0))) + _860) * _823;
        float _870 = _791 * 0.5;
        float _871 = _801 * 0.5;
        float _872 = _811 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _886 = (dot(vec3(_376, _377, _378), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _895 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_824 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3857 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_897 + 1.0))) + _902) * _824;
        float _912 = _792 * 0.5;
        float _913 = _802 * 0.5;
        float _914 = _812 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(_376, _377, _378), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_825 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3890 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_939 + 1.0))) + _944) * _825;
        _961 = _792;
        _963 = _791;
        _964 = _790;
        _965 = _802;
        _966 = _801;
        _967 = _800;
        _968 = _812;
        _969 = _811;
        _970 = _810;
        _971 = _825;
        _972 = _824;
        _973 = _823;
        _974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
        _975 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
        _976 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
    }
    else
    {
        _961 = _962;
        _963 = _962;
        _964 = _962;
        _965 = _962;
        _966 = _962;
        _967 = _962;
        _968 = _962;
        _969 = _962;
        _970 = _962;
        _971 = _962;
        _972 = _962;
        _973 = _962;
        _974 = 0.0;
        _975 = 0.0;
        _976 = 0.0;
    }
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1004 = fma(_630, cbModelParam._m0[30u].z, fma(_626, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _622));
        float _1008 = fma(_630, cbModelParam._m0[31u].z, fma(_626, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _622));
        float _1012 = fma(_630, cbModelParam._m0[32u].z, fma(_626, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _622));
        float _1035 = _622 + _376;
        float _1036 = _626 + _377;
        float _1037 = _630 + _378;
        float _1047 = fma(_1037, cbModelParam._m0[30u].z, fma(_1036, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1035)) - _1004;
        float _1048 = fma(_1037, cbModelParam._m0[31u].z, fma(_1036, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1035)) - _1008;
        float _1049 = fma(_1037, cbModelParam._m0[32u].z, fma(_1036, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1035)) - _1012;
        float _1053 = inversesqrt(dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049)));
        float _1066 = ((_1053 * _1047) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1004 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1053 * _1048) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1008 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1053 * _1049) / cbModelParam._m0[35u].z) + ((((((_1012 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        float _1103 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1070.x + (-0.5));
        float _1105 = _1103 * (_1070.y + (-0.5));
        float _1106 = _1103 * (_1070.z + (-0.5));
        float _1113 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1077.x + (-0.5));
        float _1115 = _1113 * (_1077.y + (-0.5));
        float _1116 = _1113 * (_1077.z + (-0.5));
        float _1123 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1084.x + (-0.5));
        float _1125 = _1123 * (_1084.y + (-0.5));
        float _1126 = _1123 * (_1084.z + (-0.5));
        float _1133 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1091.x + (-0.5));
        float _1135 = _1133 * (_1091.y + (-0.5));
        float _1136 = _1133 * (_1091.z + (-0.5));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1104 * 0.5;
        float _1141 = _1114 * 0.5;
        float _1142 = _1124 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_376, _377, _378), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3953 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1167 + 1.0))) + _1172) * _1137;
        float _1182 = _1105 * 0.5;
        float _1183 = _1115 * 0.5;
        float _1184 = _1125 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_376, _377, _378), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3986 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1209 + 1.0))) + _1214) * _1138;
        float _1224 = _1106 * 0.5;
        float _1225 = _1116 * 0.5;
        float _1226 = _1126 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_376, _377, _378), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _4019 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1251 + 1.0))) + _1256) * _1139;
        _1273 = _1106;
        _1274 = _1105;
        _1275 = _1104;
        _1276 = _1116;
        _1277 = _1115;
        _1278 = _1114;
        _1279 = _1126;
        _1280 = _1125;
        _1281 = _1124;
        _1282 = _1139;
        _1283 = _1138;
        _1284 = _1137;
        _1285 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1286 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1287 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
    }
    else
    {
        _1273 = _962;
        _1274 = _962;
        _1275 = _962;
        _1276 = _962;
        _1277 = _962;
        _1278 = _962;
        _1279 = _962;
        _1280 = _962;
        _1281 = _962;
        _1282 = _962;
        _1283 = _962;
        _1284 = _962;
        _1285 = 0.0;
        _1286 = 0.0;
        _1287 = 0.0;
    }
    float _1297 = (cbModelParam._m0[1u].x * (_1285 - _974)) + _974;
    float _1298 = (cbModelParam._m0[1u].x * (_1286 - _975)) + _975;
    float _1299 = (cbModelParam._m0[1u].x * (_1287 - _976)) + _976;
    float _1320 = fma(_1299, cbSceneParam._m0[89u].z, fma(_1298, cbSceneParam._m0[89u].y, _1297 * cbSceneParam._m0[89u].x));
    float _1323 = fma(_1299, cbSceneParam._m0[90u].z, fma(_1298, cbSceneParam._m0[90u].y, _1297 * cbSceneParam._m0[90u].x));
    float _1326 = fma(_1299, cbSceneParam._m0[91u].z, fma(_1298, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1297));
    float _1341 = _566 * 0.5;
    float _1342 = _567 * 0.5;
    float _1343 = _568 * 0.5;
    float _1344 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_1275, _1278, _1281, _1284));
    float _1347 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_1274, _1277, _1280, _1283));
    float _1350 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_1273, _1276, _1279, _1282));
    float _1384;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1357 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_961, _965, _968, _971));
        float _1361 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_963, _966, _969, _972));
        float _1365 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_964, _967, _970, _973));
        float _1372 = dot(vec4(cbModelParam._m0[39u]), vec4(_1341, _1342, _1343, 1.0));
        _1384 = dot(vec3(isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1372) ? 0.0 : (isnan(0.0) ? _1372 : max(0.0, _1372))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1384 = 1.0;
    }
    float _1395;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1386 = dot(vec4(cbModelParam._m0[40u]), vec4(_1341, _1342, _1343, 1.0));
        _1395 = dot(vec3(isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1386) ? 0.0 : (isnan(0.0) ? _1386 : max(0.0, _1386))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1395 = 1.0;
    }
    float _1399 = (_1395 * cbModelParam._m0[1u].x) + (_1384 * (1.0 - cbModelParam._m0[1u].x));
    float _1409 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _379);
    float _1410 = isnan(_1409) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1409 : min(cbModelParam._m0[25u].z, _1409));
    float _1492;
    float _1494;
    float _1496;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1459 = fma(_630, cbModelParam._m0[13u].z, fma(_626, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _622)) + cbModelParam._m0[13u].w;
        float _1463 = fma(_630, cbModelParam._m0[14u].z, fma(_626, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _622)) + cbModelParam._m0[14u].w;
        float _1467 = fma(_630, cbModelParam._m0[15u].z, fma(_626, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _622)) + cbModelParam._m0[15u].w;
        float _1470 = fma(_568, cbModelParam._m0[13u].z, fma(_567, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566));
        float _1473 = fma(_568, cbModelParam._m0[14u].z, fma(_567, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566));
        float _1476 = fma(_568, cbModelParam._m0[15u].z, fma(_567, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566));
        float _1504;
        if (_1470 > 0.0)
        {
            _1504 = abs((1.0 - _1459) / _1470);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1459 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1504 = frontier_phi_17_15_ladder;
        }
        float _1678;
        if (_1473 > 0.0)
        {
            _1678 = abs((1.0 - _1463) / _1473);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1463 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1678 = frontier_phi_26_22_ladder;
        }
        float _1974;
        if (_1476 > 0.0)
        {
            _1974 = abs((1.0 - _1467) / _1476);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1467 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1974 = frontier_phi_38_33_ladder;
        }
        float _1976 = isnan(_1678) ? _1504 : (isnan(_1504) ? _1678 : min(_1504, _1678));
        float _1977 = isnan(_1974) ? _1976 : (isnan(_1976) ? _1974 : min(_1976, _1974));
        float _1981 = (_1977 * _1470) + _1459;
        float _1982 = (_1977 * _1473) + _1463;
        float _1983 = (_1977 * _1476) + _1467;
        float _1984 = _1977 * 9.9999997473787516355514526367188e-05;
        float _1986 = (-1.0) - _1984;
        float _1988 = _1984 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1983 > _1988) || ((_1983 < _1986) || ((_1982 > _1988) || ((_1982 < _1986) || ((_1981 < _1986) || (_1981 > _1988))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2128 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1983, cbModelParam._m0[9u].z, fma(_1982, cbModelParam._m0[9u].y, _1981 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1983, cbModelParam._m0[10u].z, fma(_1982, cbModelParam._m0[10u].y, _1981 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1983, cbModelParam._m0[11u].z, fma(_1982, cbModelParam._m0[11u].y, _1981 * cbModelParam._m0[11u].x))), _1410);
            frontier_phi_16_38_ladder = _2128.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2128.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2128.x * cbModelParam._m0[1u].y;
        }
        _1492 = frontier_phi_16_38_ladder_2;
        _1494 = frontier_phi_16_38_ladder_1;
        _1496 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1480 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_566, _567, _568), _1410);
        _1492 = _1480.x * cbModelParam._m0[1u].y;
        _1494 = _1480.y * cbModelParam._m0[1u].y;
        _1496 = _1480.z * cbModelParam._m0[1u].y;
    }
    float _1500 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _379);
    float _1501 = isnan(_1500) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1500 : min(cbModelParam._m0[25u].w, _1500));
    float _1593;
    float _1595;
    float _1597;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1557 = fma(_630, cbModelParam._m0[21u].z, fma(_626, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _622)) + cbModelParam._m0[21u].w;
        float _1561 = fma(_630, cbModelParam._m0[22u].z, fma(_626, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _622)) + cbModelParam._m0[22u].w;
        float _1565 = fma(_630, cbModelParam._m0[23u].z, fma(_626, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _622)) + cbModelParam._m0[23u].w;
        float _1568 = fma(_568, cbModelParam._m0[21u].z, fma(_567, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566));
        float _1571 = fma(_568, cbModelParam._m0[22u].z, fma(_567, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566));
        float _1574 = fma(_568, cbModelParam._m0[23u].z, fma(_567, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566));
        float _1683;
        if (_1568 > 0.0)
        {
            _1683 = abs((1.0 - _1557) / _1568);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1557 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1683 = frontier_phi_28_24_ladder;
        }
        float _2001;
        if (_1571 > 0.0)
        {
            _2001 = abs((1.0 - _1561) / _1571);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1561 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2001 = frontier_phi_40_35_ladder;
        }
        float _2339;
        if (_1574 > 0.0)
        {
            _2339 = abs((1.0 - _1565) / _1574);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1565 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2339 = frontier_phi_50_47_ladder;
        }
        float _2341 = isnan(_2001) ? _1683 : (isnan(_1683) ? _2001 : min(_1683, _2001));
        float _2342 = isnan(_2339) ? _2341 : (isnan(_2341) ? _2339 : min(_2341, _2339));
        float _2346 = (_2342 * _1568) + _1557;
        float _2347 = (_2342 * _1571) + _1561;
        float _2348 = (_2342 * _1574) + _1565;
        float _2349 = _2342 * 9.9999997473787516355514526367188e-05;
        float _2350 = (-1.0) - _2349;
        float _2352 = _2349 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2348 > _2352) || ((_2348 < _2350) || ((_2347 > _2352) || ((_2347 < _2350) || ((_2346 < _2350) || (_2346 > _2352))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2470 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2348, cbModelParam._m0[17u].z, fma(_2347, cbModelParam._m0[17u].y, _2346 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2348, cbModelParam._m0[18u].z, fma(_2347, cbModelParam._m0[18u].y, _2346 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2348, cbModelParam._m0[19u].z, fma(_2347, cbModelParam._m0[19u].y, _2346 * cbModelParam._m0[19u].x))), _1501);
            frontier_phi_25_50_ladder = _2470.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2470.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2470.x * cbModelParam._m0[1u].z;
        }
        _1593 = frontier_phi_25_50_ladder_2;
        _1595 = frontier_phi_25_50_ladder_1;
        _1597 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1577 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_566, _567, _568), _1501);
        _1593 = _1577.x * cbModelParam._m0[1u].z;
        _1595 = _1577.y * cbModelParam._m0[1u].z;
        _1597 = _1577.z * cbModelParam._m0[1u].z;
    }
    float _1610 = (((_593 * _542) + _594) * _558) * ((cbModelParam._m0[1u].w * (_1593 - _1492)) + _1492);
    float _1612 = (((_593 * _544) + _594) * _558) * ((cbModelParam._m0[1u].w * (_1595 - _1494)) + _1494);
    float _1614 = (((_593 * _545) + _594) * _558) * ((cbModelParam._m0[1u].w * (_1597 - _1496)) + _1496);
    float _1617 = fma(_1614, cbSceneParam._m0[89u].z, fma(_1612, cbSceneParam._m0[89u].y, _1610 * cbSceneParam._m0[89u].x));
    float _1620 = fma(_1614, cbSceneParam._m0[90u].z, fma(_1612, cbSceneParam._m0[90u].y, _1610 * cbSceneParam._m0[90u].x));
    float _1623 = fma(_1614, cbSceneParam._m0[91u].z, fma(_1612, cbSceneParam._m0[91u].y, _1610 * cbSceneParam._m0[91u].x));
    float _1657 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1661 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1665 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1669 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1670 = _1657 / _1669;
    float _1671 = _1661 / _1669;
    float _1672 = _1665 / _1669;
    float _1819;
    float _1820;
    float _1821;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1699 = ((uint(_1672 > cbSceneParam._m0[59u].y) + uint(_1672 > cbSceneParam._m0[59u].x)) + uint(_1672 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1700 = _1699 + 43u;
        uint _1708 = _1699 + 44u;
        uint _1716 = _1699 + 45u;
        uint _1724 = _1699 + 46u;
        float _1735 = fma(_1669, cbSceneParam._m0[_1700].w, fma(_1665, cbSceneParam._m0[_1700].z, fma(_1661, cbSceneParam._m0[_1700].y, _1657 * cbSceneParam._m0[_1700].x)));
        float _1739 = fma(_1669, cbSceneParam._m0[_1708].w, fma(_1665, cbSceneParam._m0[_1708].z, fma(_1661, cbSceneParam._m0[_1708].y, _1657 * cbSceneParam._m0[_1708].x)));
        float _1747 = fma(_1669, cbSceneParam._m0[_1724].w, fma(_1665, cbSceneParam._m0[_1724].z, fma(_1661, cbSceneParam._m0[_1724].y, _1657 * cbSceneParam._m0[_1724].x)));
        float _1752 = cbSceneParam._m0[33u].z * _1747;
        float _1754 = cbSceneParam._m0[33u].w * _1747;
        float _1757 = fma(_1669, cbSceneParam._m0[_1716].w, fma(_1665, cbSceneParam._m0[_1716].z, fma(_1661, cbSceneParam._m0[_1716].y, _1657 * cbSceneParam._m0[_1716].x))) / _1747;
        float _1805 = (cbSceneParam._m0[33u].x - sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672))) * cbSceneParam._m0[33u].y;
        float _4145 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1812 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1752 + _1735) / _1747, (_1754 + _1739) / _1747), _1757), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1754 + _1735) / _1747, (_1739 - _1752) / _1747), _1757), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1735 - _1752) / _1747, (_1739 - _1754) / _1747), _1757), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1735 - _1754) / _1747, (_1752 + _1739) / _1747), _1757), 0.0)).x), vec4(0.25)));
        _1819 = 1.0 - (_1812 * cbSceneParam._m0[34u].x);
        _1820 = 1.0 - (_1812 * cbSceneParam._m0[34u].y);
        _1821 = 1.0 - (_1812 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1819 = 1.0;
        _1820 = 1.0;
        _1821 = 1.0;
    }
    float _1885;
    float _1887;
    float _1889;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1873 = fma(_1669, cbSceneParam._m0[63u].w, fma(_1665, cbSceneParam._m0[63u].z, fma(_1661, cbSceneParam._m0[63u].y, _1657 * cbSceneParam._m0[63u].x)));
        float _1874 = fma(_1669, cbSceneParam._m0[60u].w, fma(_1665, cbSceneParam._m0[60u].z, fma(_1661, cbSceneParam._m0[60u].y, _1657 * cbSceneParam._m0[60u].x))) / _1873;
        float _1875 = fma(_1669, cbSceneParam._m0[61u].w, fma(_1665, cbSceneParam._m0[61u].z, fma(_1661, cbSceneParam._m0[61u].y, _1657 * cbSceneParam._m0[61u].x))) / _1873;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1874 >= cbSceneParam._m0[64u].x) && (_1875 >= cbSceneParam._m0[64u].y)) && (_1874 <= cbSceneParam._m0[64u].z)) && (_1875 <= cbSceneParam._m0[64u].w))
        {
            float _2014 = fma(_1669, cbSceneParam._m0[62u].w, fma(_1665, cbSceneParam._m0[62u].z, fma(_1661, cbSceneParam._m0[62u].y, _1657 * cbSceneParam._m0[62u].x))) / _1873;
            float _2018 = isnan(cbSceneParam._m0[41u].w) ? _2014 : (isnan(_2014) ? cbSceneParam._m0[41u].w : max(_2014, cbSceneParam._m0[41u].w));
            float _2061 = (cbSceneParam._m0[33u].x - sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672))) * cbSceneParam._m0[33u].y;
            float _4161 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
            float _2068 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1874, cbSceneParam._m0[33u].w + _1875), _2018), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1874, _1875 - cbSceneParam._m0[33u].z), _2018), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1874 - cbSceneParam._m0[33u].z, _1875 - cbSceneParam._m0[33u].w), _2018), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1874 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1875), _2018), 0.0)).x), vec4(0.25)));
            float _2072 = 1.0 - (_2068 * cbSceneParam._m0[34u].x);
            float _2073 = 1.0 - (_2068 * cbSceneParam._m0[34u].y);
            float _2074 = 1.0 - (_2068 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2074) ? _1821 : (isnan(_1821) ? _2074 : min(_1821, _2074));
            frontier_phi_37_36_ladder_1 = isnan(_2073) ? _1820 : (isnan(_1820) ? _2073 : min(_1820, _2073));
            frontier_phi_37_36_ladder_2 = isnan(_2072) ? _1819 : (isnan(_1819) ? _2072 : min(_1819, _2072));
        }
        else
        {
            frontier_phi_37_36_ladder = _1821;
            frontier_phi_37_36_ladder_1 = _1820;
            frontier_phi_37_36_ladder_2 = _1819;
        }
        _1885 = frontier_phi_37_36_ladder_2;
        _1887 = frontier_phi_37_36_ladder_1;
        _1889 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1885 = _1819;
        _1887 = _1820;
        _1889 = _1821;
    }
    uvec4 _1894 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1896 = _1894.x * 14u;
    uint _1897 = _1896 + 13u;
    float _1904 = _558 + (-1.0);
    float _1909 = (cbLight._m0[_1897].x * _1904) + 1.0;
    float _1910 = (cbLight._m0[_1897].y * _1904) + 1.0;
    float _1911 = (cbLight._m0[_1897].z * _1904) + 1.0;
    float _1912 = (cbLight._m0[_1897].w * _1904) + 1.0;
    uint _1913 = _1896 + 5u;
    float _1919 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
    uint _1923 = _1896 + 4u;
    float _1933 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
    uint _1937 = _1896 | 1u;
    float _1948 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_376, _377, _378));
    float _1951 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_376, _377, _378));
    float _4197 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _4208 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1956 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * 0.3183098733425140380859375;
    float _1958 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _1965 = ((cbLight._m0[_1913].x * _1919) * _1958) + (((cbLight._m0[_1923].x * _1885) * _1933) * _1956);
    float _1966 = ((_1919 * cbLight._m0[_1913].y) * _1958) + (((cbLight._m0[_1923].y * _1887) * _1933) * _1956);
    float _1967 = ((_1919 * cbLight._m0[_1913].z) * _1958) + (((cbLight._m0[_1923].z * _1889) * _1933) * _1956);
    uvec4 _1971 = floatBitsToUint(cbLight._m0[_1896 + 12u]);
    bool _1973 = _1971.x == 0u;
    float _2075;
    float _2077;
    float _2079;
    if (_1973)
    {
        _2075 = _1965;
        _2077 = _1966;
        _2079 = _1967;
    }
    else
    {
        uint _2083 = _1896 + 6u;
        float _2099 = (dot(vec3(cbLight._m0[_1896 + 2u].xyz), vec3(_376, _377, _378)) * 0.5) + 0.5;
        float _2100 = _2099 * _2099;
        float _4219 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2101 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2102 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _2075 = (((cbLight._m0[_2083].x * 0.3183098733425140380859375) * _2101) * _2102) + _1965;
        _2077 = (((cbLight._m0[_2083].y * 0.3183098733425140380859375) * _2101) * _2102) + _1966;
        _2079 = (((cbLight._m0[_2083].z * 0.3183098733425140380859375) * _2101) * _2102) + _1967;
    }
    bool _2082 = _1971.y == 0u;
    float _2137;
    float _2139;
    float _2141;
    if (_2082)
    {
        _2137 = _2075;
        _2139 = _2077;
        _2141 = _2079;
    }
    else
    {
        uint _2310 = _1896 + 7u;
        float _2326 = (dot(vec3(cbLight._m0[_1896 + 3u].xyz), vec3(_376, _377, _378)) * 0.5) + 0.5;
        float _2327 = _2326 * _2326;
        float _4235 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2328 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2329 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
        _2137 = (((cbLight._m0[_2310].x * 0.3183098733425140380859375) * _2328) * _2329) + _2075;
        _2139 = (((cbLight._m0[_2310].y * 0.3183098733425140380859375) * _2328) * _2329) + _2077;
        _2141 = (((cbLight._m0[_2310].z * 0.3183098733425140380859375) * _2328) * _2329) + _2079;
    }
    uint _2144 = _1896 + 8u;
    float _2157 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1896].w)) * _379) * 0.949999988079071044921875);
    float _2158 = _2157 * _2157;
    float _2159 = cbLight._m0[_1896].x + _457;
    float _2160 = cbLight._m0[_1896].y + _458;
    float _2161 = cbLight._m0[_1896].z + _459;
    float _2165 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
    float _2166 = _2165 * _2159;
    float _2167 = _2165 * _2160;
    float _2168 = _2165 * _2161;
    float _2169 = dot(vec3(_376, _377, _378), vec3(cbLight._m0[_1896].xyz));
    float _4251 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2172 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _2173 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2174 = dot(vec3(_376, _377, _378), vec3(_2166, _2167, _2168));
    float _4273 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2178 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_2166, _2167, _2168));
    float _4284 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2182 = _2158 * _2158;
    float _2186 = ((_2177 * _2177) * (_2182 + (-1.0))) + 1.0;
    float _2194 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
    float _2195 = 0.959999978542327880859375 - _539;
    float _2197 = 0.959999978542327880859375 - _540;
    float _2198 = 0.959999978542327880859375 - _541;
    float _2205 = 1.0 - _2158;
    float _2216 = (0.5 / (((_2173 * ((_2172 * _2205) + _2158)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2205) + _2158) * _2172))) * _2172;
    float _4295 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2218 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2182 / ((_2186 * _2186) * 3.141590118408203125));
    uint _2232 = _1896 + 9u;
    float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1937].w)) * _379) * 0.949999988079071044921875);
    float _2244 = _2243 * _2243;
    float _2245 = cbLight._m0[_1937].x + _457;
    float _2246 = cbLight._m0[_1937].y + _458;
    float _2247 = cbLight._m0[_1937].z + _459;
    float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
    float _2252 = _2251 * _2245;
    float _2253 = _2251 * _2246;
    float _2254 = _2251 * _2247;
    float _2255 = dot(vec3(_376, _377, _378), vec3(cbLight._m0[_1937].xyz));
    float _4306 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2259 = dot(vec3(_376, _377, _378), vec3(_2252, _2253, _2254));
    float _4317 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2263 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_2252, _2253, _2254));
    float _4328 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2267 = _2244 * _2244;
    float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
    float _2278 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
    float _2285 = 1.0 - _2244;
    float _2295 = (0.5 / (((_2173 * ((_2258 * _2285) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2285) + _2244) * _2258))) * _2258;
    float _4339 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2297 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
    float _2307 = (((((_2278 * _2195) + _542) * cbLight._m0[_2232].x) * _2297) * _1919) + ((((cbLight._m0[_2144].x * _1885) * ((_2194 * _2195) + _542)) * _2218) * _1933);
    float _2308 = (((((_2278 * _2197) + _544) * cbLight._m0[_2232].y) * _2297) * _1919) + ((((cbLight._m0[_2144].y * _1887) * ((_2194 * _2197) + _544)) * _2218) * _1933);
    float _2309 = (((((_2278 * _2198) + _545) * cbLight._m0[_2232].z) * _2297) * _1919) + ((((cbLight._m0[_2144].z * _1889) * ((_2194 * _2198) + _545)) * _2218) * _1933);
    float _2365;
    float _2367;
    float _2369;
    if (_1973)
    {
        _2365 = _2307;
        _2367 = _2308;
        _2369 = _2309;
    }
    else
    {
        uint _2371 = _1896 + 2u;
        uint _2375 = _1896 + 10u;
        float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _379) * 0.949999988079071044921875);
        float _2390 = _2389 * _2389;
        float _2391 = cbLight._m0[_2371].x + _457;
        float _2392 = cbLight._m0[_2371].y + _458;
        float _2393 = cbLight._m0[_2371].z + _459;
        float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
        float _2398 = _2397 * _2391;
        float _2399 = _2397 * _2392;
        float _2400 = _2397 * _2393;
        float _2401 = dot(vec3(_376, _377, _378), vec3(cbLight._m0[_2371].xyz));
        float _4350 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2405 = dot(vec3(_376, _377, _378), vec3(_2398, _2399, _2400));
        float _4361 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2409 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2398, _2399, _2400));
        float _4372 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2413 = _2390 * _2390;
        float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
        float _2424 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
        float _2431 = 1.0 - _2390;
        float _2441 = (0.5 / (((_2173 * ((_2404 * _2431) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2431) + _2390) * _2404))) * _2404;
        float _4383 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2443 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
        float _2444 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _2365 = (((((_2424 * _2195) + _542) * cbLight._m0[_2375].x) * _2443) * _2444) + _2307;
        _2367 = (((((_2424 * _2197) + _544) * cbLight._m0[_2375].y) * _2443) * _2444) + _2308;
        _2369 = (((((_2424 * _2198) + _545) * cbLight._m0[_2375].z) * _2443) * _2444) + _2309;
    }
    float _2475;
    float _2477;
    float _2479;
    if (_2082)
    {
        _2475 = _2365;
        _2477 = _2367;
        _2479 = _2369;
    }
    else
    {
        uint _2486 = _1896 + 3u;
        uint _2490 = _1896 + 11u;
        float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2486].w)) * _379) * 0.949999988079071044921875);
        float _2505 = _2504 * _2504;
        float _2506 = cbLight._m0[_2486].x + _457;
        float _2507 = cbLight._m0[_2486].y + _458;
        float _2508 = cbLight._m0[_2486].z + _459;
        float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
        float _2513 = _2512 * _2506;
        float _2514 = _2512 * _2507;
        float _2515 = _2512 * _2508;
        float _2516 = dot(vec3(_376, _377, _378), vec3(cbLight._m0[_2486].xyz));
        float _4399 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2520 = dot(vec3(_376, _377, _378), vec3(_2513, _2514, _2515));
        float _4410 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2524 = dot(vec3(cbLight._m0[_2486].xyz), vec3(_2513, _2514, _2515));
        float _4421 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2528 = _2505 * _2505;
        float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
        float _2539 = exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0);
        float _2546 = 1.0 - _2505;
        float _2556 = (0.5 / (((_2173 * ((_2519 * _2546) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2546) + _2505) * _2519))) * _2519;
        float _4432 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2558 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
        float _2559 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
        _2475 = (((((_2539 * _2195) + _542) * cbLight._m0[_2490].x) * _2558) * _2559) + _2365;
        _2477 = (((((_2539 * _2197) + _544) * cbLight._m0[_2490].y) * _2558) * _2559) + _2367;
        _2479 = (((((_2539 * _2198) + _545) * cbLight._m0[_2490].z) * _2558) * _2559) + _2369;
    }
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    if (_1894.y == 0u)
    {
        uvec4 _2580 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2581 = _2580.x;
        uint _2592 = uint((float(_2580.y) * floor(float(uint(cbSceneParam._m0[85u].y * _479) / _2581))) + floor(float(uint(cbSceneParam._m0[85u].x * _478) / _2581)));
        float _2602 = (log2(_1672 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2603 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        uint _2606 = uint(isnan(14.0) ? _2603 : (isnan(_2603) ? 14.0 : min(_2603, 14.0)));
        uvec4 _2611 = texelFetch(g_lightClusterGridBuffer, int(((_2606 << 2u) + (_2592 << 6u)) >> 2u));
        uint _2612 = _2611.x;
        uint _2613 = _2580.z;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        if (((((1u << ((_2613 >> 4u) & 15u)) + 4294967295u) & _2612) == 0u) || ((_2613 & 240u) == 0u))
        {
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
        }
        else
        {
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            uint _2851 = 0u;
            uint _2860;
            bool _2861;
            for (;;)
            {
                _2860 = texelFetch(g_lightClassification, int((((_2606 << 5u) + (_2592 << 9u)) + (_2851 << 2u)) >> 2u)).x;
                _2861 = _2860 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2861)
                {
                    frontier_phi_71_pred = _2850;
                    frontier_phi_71_pred_1 = _2849;
                    frontier_phi_71_pred_2 = _2848;
                    frontier_phi_71_pred_3 = _2847;
                    frontier_phi_71_pred_4 = _2846;
                    frontier_phi_71_pred_5 = _2845;
                }
                else
                {
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    uint _2996;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2848;
                    _2994 = _2849;
                    _2995 = _2850;
                    _2996 = _2860;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    for (;;)
                    {
                        uint _3000 = uint(findLSB(_2996)) + (_2851 << 5u);
                        uint _2997 = (_2996 + 4294967295u) & _2996;
                        uint _3002 = _3000 * 48u;
                        vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 3u)).x));
                        uint _3022 = (_3000 * 48u) + 4u;
                        vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 3u)).x));
                        uint _3041 = (_3000 * 48u) + 8u;
                        vec3 _3052 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x));
                        float _3056 = _3016.x - _1670;
                        float _3057 = _3016.y - _1671;
                        float _3058 = _3016.z - _1672;
                        float _3059 = dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058));
                        float _3062 = inversesqrt(_3059);
                        float _3063 = _3062 * _3056;
                        float _3064 = _3062 * _3057;
                        float _3065 = _3062 * _3058;
                        float _3066 = dot(vec3(_499, _502, _505), vec3(_3063, _3064, _3065));
                        float _3071 = 1.0 - (_3059 * _3016.w);
                        float _4458 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3072 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3073 = sqrt(_3059) * _3035.w;
                        float _3076 = 1.39999997615814208984375 / (_3073 + 1.39999997615814208984375);
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3066) + _3077;
                        float _3083 = _3073 * _3073;
                        float _3087 = ((isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))) * _3072) / ((_3083 * 0.699999988079071044921875) + 1.0);
                        float _3091 = (-0.0) - _1670;
                        float _3092 = (-0.0) - _1671;
                        float _3093 = (-0.0) - _1672;
                        float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
                        float _3098 = _3097 * _3091;
                        float _3099 = _3097 * _3092;
                        float _3100 = _3097 * _3093;
                        float _3107 = exp2(log2(1.0 / ((_3083 * 3.5) + 5.0)) * 0.25);
                        float _3108 = 1.0 - _574;
                        float _3115 = sqrt(1.0 - ((1.0 - (_3108 * _3108)) * (1.0 - (_3107 * _3107))));
                        float _3116 = _3115 * _3115;
                        float _3117 = _3116 * _3116;
                        float _3118 = _3098 + _3063;
                        float _3119 = _3099 + _3064;
                        float _3120 = _3100 + _3065;
                        float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                        float _3128 = dot(vec3(_499, _502, _505), vec3(_3098, _3099, _3100));
                        float _4474 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3131 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3132 = dot(vec3(_499, _502, _505), vec3(_3124 * _3118, _3124 * _3119, _3124 * _3120));
                        float _4485 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3139 = ((_3135 * _3135) * (_3117 + (-1.0))) + 1.0;
                        float _3140 = _3076 * _3116;
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3066) + _3141;
                        float _4496 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3145 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3146 = 1.0 - _3116;
                        float _3156 = (0.5 / (((_3145 * ((_3131 * _3146) + _3116)) + 9.9999999392252902907785028219223e-09) + (((_3145 * _3146) + _3116) * _3131))) * _3145;
                        float _4507 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3167 = (((_3117 * 3.1415927410125732421875) * (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) / ((_3139 * _3139) * ((_3083 * 2.1991131305694580078125) + 3.141590118408203125))) * _3072;
                        _2920 = (_3087 * _3035.x) + _2993;
                        _2921 = (_3087 * _3035.y) + _2994;
                        _2922 = (_3087 * _3035.z) + _2995;
                        _2917 = (_3167 * _3052.x) + _2990;
                        _2918 = (_3167 * _3052.y) + _2991;
                        _2919 = (_3167 * _3052.z) + _2992;
                        if (_2997 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2919;
                            _2993 = _2920;
                            _2994 = _2921;
                            _2995 = _2922;
                            _2996 = _2997;
                        }
                    }
                    frontier_phi_71_pred = _2922;
                    frontier_phi_71_pred_1 = _2921;
                    frontier_phi_71_pred_2 = _2920;
                    frontier_phi_71_pred_3 = _2919;
                    frontier_phi_71_pred_4 = _2918;
                    frontier_phi_71_pred_5 = _2917;
                }
                _2703 = frontier_phi_71_pred;
                _2701 = frontier_phi_71_pred_1;
                _2699 = frontier_phi_71_pred_2;
                _2697 = frontier_phi_71_pred_3;
                _2695 = frontier_phi_71_pred_4;
                _2693 = frontier_phi_71_pred_5;
                uint _2852 = _2851 + 1u;
                if (_2852 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2845 = _2693;
                    _2846 = _2695;
                    _2847 = _2697;
                    _2848 = _2699;
                    _2849 = _2701;
                    _2850 = _2703;
                    _2851 = _2852;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
        }
        uvec4 _2706 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2707 = _2706.z;
        uint _2709 = (_2707 >> 8u) & 15u;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        if (((4294967295u << _2709) & _2612) == 0u)
        {
            _2813 = _2692;
            _2815 = _2694;
            _2817 = _2696;
            _2819 = _2698;
            _2821 = _2700;
            _2823 = _2702;
        }
        else
        {
            float _2838 = inversesqrt(dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672)));
            float _2839 = _2838 * _1670;
            float _2840 = _2838 * _1671;
            float _2841 = _2838 * _1672;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2709 < ((_2707 >> 12u) & 15u))
            {
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2973 = _2692;
                float _2974 = _2694;
                float _2975 = _2696;
                float _2976 = _2698;
                float _2977 = _2700;
                float _2978 = _2702;
                uint _2979 = _2709;
                uint _2988;
                bool _2989;
                for (;;)
                {
                    _2988 = texelFetch(g_lightClassification, int((((_2606 << 5u) + (_2592 << 9u)) + (_2979 << 2u)) >> 2u)).x;
                    _2989 = _2988 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2989)
                    {
                        frontier_phi_82_pred = _2978;
                        frontier_phi_82_pred_1 = _2977;
                        frontier_phi_82_pred_2 = _2976;
                        frontier_phi_82_pred_3 = _2975;
                        frontier_phi_82_pred_4 = _2974;
                        frontier_phi_82_pred_5 = _2973;
                    }
                    else
                    {
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3194 = _2973;
                        float _3195 = _2974;
                        float _3196 = _2975;
                        float _3197 = _2976;
                        float _3198 = _2977;
                        float _3199 = _2978;
                        uint _3200 = _2988;
                        uint _3201;
                        vec4 _3226;
                        float _3227;
                        vec4 _3242;
                        vec3 _3254;
                        vec4 _3270;
                        vec4 _3285;
                        float _3332;
                        bool _3333;
                        for (;;)
                        {
                            uint _3211 = ((_2979 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3200));
                            _3201 = (_3200 + 4294967295u) & _3200;
                            uint _3213 = _3211 * 40u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            _3227 = _3226.w;
                            uint _3229 = (_3211 * 40u) + 4u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3244 = (_3211 * 40u) + 8u;
                            _3254 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x));
                            uint _3257 = (_3211 * 40u) + 16u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3272 = (_3211 * 40u) + 20u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3288 = (_3211 * 40u) + 24u;
                            vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3307 = (_3211 * 40u) + 28u;
                            vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            _3332 = fma(_1672, _3320.z, fma(_1671, _3320.y, _3320.x * _1670)) + _3320.w;
                            _3333 = !((fma(_1672, _3301.z, fma(_1671, _3301.y, _3301.x * _1670)) + _3301.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3333)
                            {
                                float _3360 = _3226.x - _1670;
                                float _3361 = _3226.y - _1671;
                                float _3362 = _3226.z - _1672;
                                float _3363 = dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362));
                                float _3366 = inversesqrt(_3363);
                                float _3367 = _3366 * _3360;
                                float _3368 = _3366 * _3361;
                                float _3369 = _3366 * _3362;
                                float _3373 = 1.0 - (_3363 / (_3227 * _3227));
                                float _4518 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3378 = sqrt(_3363) * _3242.w;
                                float _3380 = 1.39999997615814208984375 / (_3378 + 1.39999997615814208984375);
                                float _3381 = _3380 * _3380;
                                float _3384 = ((1.0 - _3381) * dot(vec3(_3367, _3368, _3369), vec3(_499, _502, _505))) + _3381;
                                float _3387 = _3378 * _3378;
                                float _3391 = (fma(_1672, _3270.z, fma(_1671, _3270.y, _3270.x * _1670)) + _3270.w) / _3332;
                                float _3392 = (fma(_1672, _3285.z, fma(_1671, _3285.y, _3285.x * _1670)) + _3285.w) / _3332;
                                float _3396 = 1.0 - dot(vec2(_3391, _3392), vec2(_3391, _3392));
                                float _4534 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3397 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3398 = _3397 * (((isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))) * _3374) / ((_3387 * 0.699999988079071044921875) + 1.0));
                                float _3410 = exp2(log2(1.0 / ((_3387 * 3.5) + 5.0)) * 0.25);
                                float _3411 = 1.0 - _574;
                                float _3418 = sqrt(1.0 - ((1.0 - (_3411 * _3411)) * (1.0 - (_3410 * _3410))));
                                float _3419 = _3418 * _3418;
                                float _3420 = _3419 * _3419;
                                float _3421 = _3367 - _2839;
                                float _3422 = _3368 - _2840;
                                float _3423 = _3369 - _2841;
                                float _3427 = inversesqrt(dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423)));
                                float _3431 = dot(vec3(_499, _502, _505), vec3((-0.0) - _2839, (-0.0) - _2840, (-0.0) - _2841));
                                float _4545 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3434 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3435 = dot(vec3(_499, _502, _505), vec3(_3427 * _3421, _3427 * _3422, _3427 * _3423));
                                float _4556 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3438 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3442 = ((_3438 * _3438) * (_3420 + (-1.0))) + 1.0;
                                float _3443 = _3380 * _3419;
                                float _3444 = _3443 * _3443;
                                float _3450 = ((1.0 - _3444) * dot(vec3(_499, _502, _505), vec3(_3367, _3368, _3369))) + _3444;
                                float _4567 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3452 = 1.0 - _3419;
                                float _3462 = (0.5 / (((_3451 * ((_3434 * _3452) + _3419)) + 9.9999999392252902907785028219223e-09) + (((_3451 * _3452) + _3419) * _3434))) * _3451;
                                float _4578 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3472 = (_3397 * _3374) * (((_3420 * 3.1415927410125732421875) * (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) / ((_3442 * _3442) * ((_3387 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3398 * _3242.z;
                                frontier_phi_88_pred_1 = _3398 * _3242.y;
                                frontier_phi_88_pred_2 = _3398 * _3242.x;
                                frontier_phi_88_pred_3 = _3472 * _3254.z;
                                frontier_phi_88_pred_4 = _3472 * _3254.y;
                                frontier_phi_88_pred_5 = _3472 * _3254.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3481 = frontier_phi_88_pred;
                            _3480 = frontier_phi_88_pred_1;
                            _3479 = frontier_phi_88_pred_2;
                            _3478 = frontier_phi_88_pred_3;
                            _3477 = frontier_phi_88_pred_4;
                            _3476 = frontier_phi_88_pred_5;
                            _3184 = _3479 + _3197;
                            _3185 = _3480 + _3198;
                            _3186 = _3481 + _3199;
                            _3181 = _3476 + _3194;
                            _3182 = _3477 + _3195;
                            _3183 = _3478 + _3196;
                            if (_3201 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3201;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3186;
                        frontier_phi_82_pred_1 = _3185;
                        frontier_phi_82_pred_2 = _3184;
                        frontier_phi_82_pred_3 = _3183;
                        frontier_phi_82_pred_4 = _3182;
                        frontier_phi_82_pred_5 = _3181;
                    }
                    _2824 = frontier_phi_82_pred;
                    _2822 = frontier_phi_82_pred_1;
                    _2820 = frontier_phi_82_pred_2;
                    _2818 = frontier_phi_82_pred_3;
                    _2816 = frontier_phi_82_pred_4;
                    _2814 = frontier_phi_82_pred_5;
                    uint _2980 = _2979 + 1u;
                    if (_2980 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2973 = _2814;
                        _2974 = _2816;
                        _2975 = _2818;
                        _2976 = _2820;
                        _2977 = _2822;
                        _2978 = _2824;
                        _2979 = _2980;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2820;
                frontier_phi_63_64_ladder_1 = _2824;
                frontier_phi_63_64_ladder_2 = _2822;
                frontier_phi_63_64_ladder_3 = _2818;
                frontier_phi_63_64_ladder_4 = _2816;
                frontier_phi_63_64_ladder_5 = _2814;
            }
            else
            {
                frontier_phi_63_64_ladder = _2698;
                frontier_phi_63_64_ladder_1 = _2702;
                frontier_phi_63_64_ladder_2 = _2700;
                frontier_phi_63_64_ladder_3 = _2696;
                frontier_phi_63_64_ladder_4 = _2694;
                frontier_phi_63_64_ladder_5 = _2692;
            }
            _2813 = frontier_phi_63_64_ladder_5;
            _2815 = frontier_phi_63_64_ladder_4;
            _2817 = frontier_phi_63_64_ladder_3;
            _2819 = frontier_phi_63_64_ladder;
            _2821 = frontier_phi_63_64_ladder_2;
            _2823 = frontier_phi_63_64_ladder_1;
        }
        float _2828 = isnan(1.0) ? _558 : (isnan(_558) ? 1.0 : min(_558, 1.0));
        _2625 = (_2828 * _2819) + _2137;
        _2627 = (_2828 * _2821) + _2139;
        _2629 = (_2828 * _2823) + _2141;
        _2631 = ((_2813 * _542) * _2828) + _2475;
        _2633 = ((_2815 * _544) * _2828) + _2477;
        _2635 = ((_2817 * _545) * _2828) + _2479;
    }
    else
    {
        _2625 = _2137;
        _2627 = _2139;
        _2629 = _2141;
        _2631 = _2475;
        _2633 = _2477;
        _2635 = _2479;
    }
    float _4594 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _4605 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _4616 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _2652 = ((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2625 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _558))) + ((_2631 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1399)) * cbPerFrame._m0[3u].x);
    float _2653 = ((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2627 + ((isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))) * _558))) + ((_2633 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _1399)) * cbPerFrame._m0[3u].x);
    float _2654 = ((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2629 + ((isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))) * _558))) + ((_2635 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _1399)) * cbPerFrame._m0[3u].x);
    uint _2655 = _228 + 6u;
    float _2663 = _478 / cbSceneParam._m0[86u].x;
    float _2664 = _479 / cbSceneParam._m0[86u].y;
    vec4 _2678 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, (log2((isnan(cbSceneParam._m0[77u].w) ? _398 : (isnan(_398) ? cbSceneParam._m0[77u].w : min(_398, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2680 = _2678.x;
    float _2681 = _2678.y;
    float _2682 = _2678.z;
    float _2683 = _2678.w;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_398 > cbSceneParam._m0[78u].w)
    {
        float _2717 = isnan(_398) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _398 : min(cbSceneParam._m0[80u].w, _398));
        float _2718 = _2717 / _398;
        float _2729 = _2718 * _450;
        float _2730 = _451 * _2718;
        float _2731 = (-0.0) - _2730;
        float _2733 = _2718 * _452;
        float _2735 = (cbSceneParam._m0[77u].w * _2731) / _2717;
        float _2736 = _2735 + cbSceneParam._m0[79u].w;
        float _2737 = cbSceneParam._m0[79u].w - _2730;
        float _2743 = sqrt(((_2729 * _2729) + (_2730 * _2730)) + (_2733 * _2733));
        float _2746 = (1.0 - (cbSceneParam._m0[77u].w / _2717)) * _2743;
        float _2751 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2753 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2930;
        if (abs((_2731 - _2735) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2930 = ((((_2736 > 0.0) ? exp2(_2751 * _2736) : (2.0 - exp2(_2753 * _2736))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2746;
        }
        else
        {
            float _2874 = 1.0 / cbSceneParam._m0[80u].x;
            float _2875 = isnan(_2737) ? _2736 : (isnan(_2736) ? _2737 : max(_2736, _2737));
            float _2876 = isnan(_2737) ? _2736 : (isnan(_2736) ? _2737 : min(_2736, _2737));
            float _2885 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : min(_2875, 0.0));
            float _2886 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : min(_2876, 0.0));
            _2930 = ((abs(_2743 / _2731) * cbSceneParam._m0[80u].y) * ((((_2885 - _2886) * 2.0) - ((exp2(_2751 * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0)))) - exp2(_2751 * (isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0))))) * _2874)) - ((exp2(_2753 * _2885) - exp2(_2753 * _2886)) * _2874))) + (_2746 * cbSceneParam._m0[80u].z);
        }
        vec4 _2932 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, 1.0), 0.0);
        float _2941 = exp2((_2930 * (-1.44269502162933349609375)) * (1.0 - _2932.w));
        float _2942 = log2(_2941);
        float _2958 = log2(_2683);
        _2755 = (exp2(_2958 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].x)) * _2932.x) / cbSceneParam._m0[78u].x)) + _2680;
        _2757 = (exp2(_2958 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].y)) * _2932.y) / cbSceneParam._m0[78u].y)) + _2681;
        _2759 = (exp2(_2958 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].z)) * _2932.z) / cbSceneParam._m0[78u].z)) + _2682;
        _2761 = _2941 * _2683;
    }
    else
    {
        _2755 = _2680;
        _2757 = _2681;
        _2759 = _2682;
        _2761 = _2683;
    }
    bool _2968;
    vec4 _2771;
    vec4 _2793;
    float _2795;
    float _2799;
    float _2800;
    float _2801;
    float _2802;
    bool _2812;
    for (;;)
    {
        _2771 = cbMatDynParam._m0[0u];
        float _2773 = roundEven(_2771.y);
        bool _2774 = _2773 == 3.0;
        float _2775 = log2(_2761);
        float _2782 = exp2(_2775 * cbSceneParam._m0[78u].x) * _2652;
        float _2783 = exp2(_2775 * cbSceneParam._m0[78u].y) * _2653;
        float _2784 = exp2(_2775 * cbSceneParam._m0[78u].z) * _2654;
        float _2791 = _466 + (-0.5);
        _2793 = cbMtdParam._m0[1u];
        _2795 = _2793.y * _2791;
        float _2798 = (_2773 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2799 = _2798 * (_2774 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2755)));
        _2800 = _2798 * (_2774 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2757)));
        _2801 = _2798 * (_2774 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2759)));
        _2802 = _2791 * 0.999000012874603271484375;
        _2812 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2812)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2802) < 0.5)
            {
                _2968 = true;
                break;
            }
        }
        uint _2909 = _518 + uint(_2771.w);
        if ((cbInstanceData._m0[_2909].w < 1.0) && ((cbInstanceData._m0[_2909].w + _2802) < 0.5))
        {
            _2968 = true;
            break;
        }
        if ((_2795 + 1.0) < _2793.x)
        {
            _2968 = true;
            break;
        }
        _2968 = false;
        break;
    }
    float _3172;
    if (_2968)
    {
        discard_state = true;
        _3172 = 0.0;
    }
    else
    {
        _3172 = cbInstanceData._m0[_2655].w;
    }
    SV_Target.x = _2799;
    SV_Target.y = _2800;
    SV_Target.z = _2801;
    SV_Target.w = _3172;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2655].w;
    discard_exit();
}


