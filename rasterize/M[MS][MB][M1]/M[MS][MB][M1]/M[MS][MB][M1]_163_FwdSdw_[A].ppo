#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1449;
float _4110;
float _4111;
float _4112;
float _4113;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _372 = _370.x;
    float _384 = dot(vec4(_372, _370.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _401 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_372 - _384) * cbMtdParam._m0[24u].y) + _384) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4122 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _409 = (_402 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _410 = (_402 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _411 = (_402 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _450 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _284) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _285) + cbTextureTilingScale._m0[20u].w));
    vec4 _477 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _496 = _494.x;
    float _497 = _494.y;
    float _498 = _494.z;
    float _507 = ((_477.z - _498) * _402) + _498;
    float _510 = ((((_477.x - _496) * _402) + _496) * 2.0) + (-1.0);
    float _511 = ((((_477.y - _497) * _402) + _497) * 2.0) + (-1.0);
    float _512 = dot(vec2(_510, _511), vec2(_510, _511));
    float _4133 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _517 = sqrt(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))));
    vec4 _537 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _549 = (_510 + ((((_450.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_537.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _550 = (_511 + ((((_450.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_537.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _553 = fma(_517, _253, fma(_550, _260, _549 * _246));
    float _556 = fma(_517, _254, fma(_550, _261, _549 * _247));
    float _559 = fma(_517, _255, fma(_550, _262, _549 * _248));
    float _563 = inversesqrt(dot(vec3(_553, _556, _559), vec3(_553, _556, _559)));
    vec4 _590 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _592 = _590.x;
    float _593 = 1.0 - _592;
    float _597 = ((_592 - _593) * cbMtdParam._m0[24u].z) + _593;
    float _599 = (cbMtdParam._m0[19u].x + dot(vec4(_563 * _553, _563 * _556, _563 * _559, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_597 * cbMtdParam._m0[21u].z);
    float _4144 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _600 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _602 = (-0.0) - cbMtdParam._m0[24u].x;
    float _604 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _604 : (isnan(_604) ? 1.0 : min(_604, 1.0));
    float _612 = _600 - ((_600 * TEXCOORD_8.x) * _605);
    float _613 = _600 - ((_600 * TEXCOORD_8.y) * _605);
    float _614 = _600 - ((_600 * TEXCOORD_8.z) * _605);
    float _621 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _625 = ((isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : min(_621, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _633 = (_625 - (((_597 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4175 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _638 = ((_612 * ((_430.x * cbMtdParam._m0[18u].x) - _409)) * _634) + _409;
    float _639 = ((_613 * ((_430.y * cbMtdParam._m0[18u].y) - _410)) * _634) + _410;
    float _640 = ((_614 * ((_430.z * cbMtdParam._m0[18u].z) - _411)) * _634) + _411;
    vec4 _652 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _654 = _652.x;
    float _655 = 1.0 - _654;
    float _682 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_654 - _655) * cbMtdParam._m0[24u].w) + _655) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4186 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _691 = ((((cbMtdParam._m0[10u].x - _638) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _683) + _638;
    float _692 = ((((cbMtdParam._m0[10u].y - _639) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _683) + _639;
    float _693 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _640)) * _683) + _640;
    vec4 _719 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _721 = _719.x;
    float _739 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _721) * _402) + _721;
    float _743 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _739) * cbMtdParam._m0[19u].z) + _739;
    float _746 = _743 - ((_634 * _612) * _743);
    float _748 = _746 - (_746 * _683);
    float _753 = (((_450.z - _507) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _507;
    float _757 = ((_537.z - _753) * cbMtdParam._m0[19u].w) + _753;
    vec4 _771 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _778 = (_771.x * 2.0) + (-1.0);
    float _779 = (_771.y * 2.0) + (-1.0);
    float _780 = dot(vec2(_778, _779), vec2(_778, _779));
    float _4197 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _789 = (((_771.z - _757) * _612) * _634) + _757;
    float _792 = ((cbMtdParam._m0[23u].y - _789) * _683) + _789;
    vec4 _811 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _817 = (_811.x * 2.0) + (-1.0);
    float _818 = (_811.y * 2.0) + (-1.0);
    float _819 = dot(vec2(_817, _818), vec2(_817, _818));
    float _4208 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _839 = (((cbMtdParam._m0[21u].x * _549) + ((_778 - _549) * _612)) * _634) + _549;
    float _840 = (((cbMtdParam._m0[21u].x * _550) + ((_779 - _550) * _613)) * _634) + _550;
    float _841 = (((sqrt(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) - _517) * _614) * _634) + _517;
    float _852 = (((_817 - _839) + (_839 * cbMtdParam._m0[22u].z)) * _683) + _839;
    float _853 = (((_818 - _840) + (_840 * cbMtdParam._m0[22u].z)) * _683) + _840;
    float _854 = ((sqrt(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) - _841) * _683) + _841;
    float _856 = cbMtdParam._m0[22u].x + _537.w;
    float _859 = fma(_854, _253, fma(_853, _260, _852 * _246));
    float _862 = fma(_854, _254, fma(_853, _261, _852 * _247));
    float _865 = fma(_854, _255, fma(_853, _262, _852 * _248));
    float _869 = inversesqrt(dot(vec3(_859, _862, _865), vec3(_859, _862, _865)));
    float _870 = _869 * _859;
    float _871 = _869 * _862;
    float _872 = _869 * _865;
    float _4219 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _873 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _4230 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4241 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4252 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4263 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4274 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _878 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _892 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _942 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _932);
    float _943 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _932);
    float _944 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _932);
    float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
    float _949 = _942 * _948;
    float _950 = _943 * _948;
    float _951 = _944 * _948;
    vec4 _956 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _958 = _956.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1130 = sqrt(((_942 * _942) + (_943 * _943)) + (_944 * _944));
        float _1136 = (cbMatDynParam._m0[5u].x * _1130) + cbMatDynParam._m0[5u].y;
        float _4285 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1141 = (cbMatDynParam._m0[5u].z * _1130) + cbMatDynParam._m0[5u].w;
        float _4296 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) - _1137)) + _1137) < ((_958 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _969 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _970 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _988 = fma(_872, cbSceneParam._m0[5u].z, fma(_871, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _870));
    float _991 = fma(_872, cbSceneParam._m0[6u].z, fma(_871, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _870));
    float _994 = fma(_872, cbSceneParam._m0[7u].z, fma(_871, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _870));
    uint _1007 = _265 + 9u;
    uint _1008 = _1007 + uint(cbMatDynParam._m0[0u].w);
    float _1014 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * cbInstanceData._m0[_1008].x;
    float _1015 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * cbInstanceData._m0[_1008].y;
    float _1016 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * cbInstanceData._m0[_1008].z;
    float _4307 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _4318 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1018 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _4329 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1019 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _1020 = 1.0 - _878;
    float _1021 = _1017 * _1020;
    float _1022 = _1018 * _1020;
    float _1023 = _1019 * _1020;
    float _1028 = (_1017 + (-0.039999999105930328369140625)) * _878;
    float _1029 = (_1018 + (-0.039999999105930328369140625)) * _878;
    float _1030 = (_1019 + (-0.039999999105930328369140625)) * _878;
    float _1031 = _1028 + 0.039999999105930328369140625;
    float _1033 = _1029 + 0.039999999105930328369140625;
    float _1034 = _1030 + 0.039999999105930328369140625;
    vec4 _1043 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _969, cbSceneParam._m0[86u].y * _970));
    float _1047 = ((isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * TEXCOORD_5.w) * _1043.x;
    float _1048 = dot(vec3(_870, _871, _872), vec3(_949, _950, _951));
    float _1051 = _1048 * 2.0;
    float _1055 = (_1051 * _870) - _949;
    float _1056 = (_1051 * _871) - _950;
    float _1057 = (_1051 * _872) - _951;
    float _1061 = abs(dot(vec3(_949, _950, _951), vec3(_870, _871, _872)));
    float _4340 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1063 = sqrt(_873);
    float _1076 = exp2((_1063 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1063 * 3.0));
    float _1082 = (1.0 - _1076) * ((_1063 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1083 = _1076 * _1063;
    float _1111 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1115 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1119 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1448;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1173 = fma(_1119, cbModelParam._m0[26u].z, fma(_1115, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1111));
        float _1177 = fma(_1119, cbModelParam._m0[27u].z, fma(_1115, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1111));
        float _1181 = fma(_1119, cbModelParam._m0[28u].z, fma(_1115, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1111));
        float _1206 = _1111 + _870;
        float _1207 = _1115 + _871;
        float _1208 = _1119 + _872;
        float _1218 = fma(_1208, cbModelParam._m0[26u].z, fma(_1207, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1206)) - _1173;
        float _1219 = fma(_1208, cbModelParam._m0[27u].z, fma(_1207, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1206)) - _1177;
        float _1220 = fma(_1208, cbModelParam._m0[28u].z, fma(_1207, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1206)) - _1181;
        float _1224 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
        float _1237 = ((_1224 * _1218) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1173 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1224 * _1219) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1177 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1224 * _1220) / cbModelParam._m0[34u].z) + ((((((_1181 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        float _1276 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1242.x + (-0.5));
        float _1278 = _1276 * (_1242.y + (-0.5));
        float _1279 = _1276 * (_1242.z + (-0.5));
        float _1286 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1249.x + (-0.5));
        float _1288 = _1286 * (_1249.y + (-0.5));
        float _1289 = _1286 * (_1249.z + (-0.5));
        float _1296 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1256.x + (-0.5));
        float _1298 = _1296 * (_1256.y + (-0.5));
        float _1299 = _1296 * (_1256.z + (-0.5));
        float _1306 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1263.x + (-0.5));
        float _1308 = _1306 * (_1263.y + (-0.5));
        float _1309 = _1306 * (_1263.z + (-0.5));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = _1277 * 0.5;
        float _1314 = _1287 * 0.5;
        float _1315 = _1297 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1330 = (dot(vec3(_870, _871, _872), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1340 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4388 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1342 + 1.0))) + _1347) * _1310;
        float _1357 = _1278 * 0.5;
        float _1358 = _1288 * 0.5;
        float _1359 = _1298 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_870, _871, _872), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4421 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1384 + 1.0))) + _1389) * _1311;
        float _1399 = _1279 * 0.5;
        float _1400 = _1289 * 0.5;
        float _1401 = _1299 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_870, _871, _872), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4454 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1426 + 1.0))) + _1431) * _1312;
        _1448 = _1279;
        _1450 = _1278;
        _1451 = _1277;
        _1452 = _1289;
        _1453 = _1288;
        _1454 = _1287;
        _1455 = _1299;
        _1456 = _1298;
        _1457 = _1297;
        _1458 = _1312;
        _1459 = _1311;
        _1460 = _1310;
        _1461 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
    }
    else
    {
        _1448 = _1449;
        _1450 = _1449;
        _1451 = _1449;
        _1452 = _1449;
        _1453 = _1449;
        _1454 = _1449;
        _1455 = _1449;
        _1456 = _1449;
        _1457 = _1449;
        _1458 = _1449;
        _1459 = _1449;
        _1460 = _1449;
        _1461 = 0.0;
        _1462 = 0.0;
        _1463 = 0.0;
    }
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1491 = fma(_1119, cbModelParam._m0[30u].z, fma(_1115, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1111));
        float _1495 = fma(_1119, cbModelParam._m0[31u].z, fma(_1115, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1111));
        float _1499 = fma(_1119, cbModelParam._m0[32u].z, fma(_1115, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1111));
        float _1522 = _1111 + _870;
        float _1523 = _1115 + _871;
        float _1524 = _1119 + _872;
        float _1534 = fma(_1524, cbModelParam._m0[30u].z, fma(_1523, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1522)) - _1491;
        float _1535 = fma(_1524, cbModelParam._m0[31u].z, fma(_1523, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1522)) - _1495;
        float _1536 = fma(_1524, cbModelParam._m0[32u].z, fma(_1523, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1522)) - _1499;
        float _1540 = inversesqrt(dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536)));
        float _1553 = ((_1540 * _1534) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1491 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1540 * _1535) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1495 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1555 = ((_1540 * _1536) / cbModelParam._m0[35u].z) + ((((((_1499 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        float _1590 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1557.x + (-0.5));
        float _1592 = _1590 * (_1557.y + (-0.5));
        float _1593 = _1590 * (_1557.z + (-0.5));
        float _1600 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1564.x + (-0.5));
        float _1602 = _1600 * (_1564.y + (-0.5));
        float _1603 = _1600 * (_1564.z + (-0.5));
        float _1610 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1571.x + (-0.5));
        float _1612 = _1610 * (_1571.y + (-0.5));
        float _1613 = _1610 * (_1571.z + (-0.5));
        float _1620 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1578.x + (-0.5));
        float _1622 = _1620 * (_1578.y + (-0.5));
        float _1623 = _1620 * (_1578.z + (-0.5));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = _1591 * 0.5;
        float _1628 = _1601 * 0.5;
        float _1629 = _1611 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_870, _871, _872), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4495 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4506 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4517 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_1654 + 1.0))) + _1659) * _1624;
        float _1669 = _1592 * 0.5;
        float _1670 = _1602 * 0.5;
        float _1671 = _1612 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_870, _871, _872), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4528 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4539 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4550 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_1696 + 1.0))) + _1701) * _1625;
        float _1711 = _1593 * 0.5;
        float _1712 = _1603 * 0.5;
        float _1713 = _1613 * 0.5;
        float _1714 = dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713));
        float _1719 = (_1714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1714);
        float _1727 = (dot(vec3(_870, _871, _872), vec3(_1719 * _1711, _1719 * _1712, _1719 * _1713)) + 1.0) * 0.5;
        float _4561 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4572 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4583 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_1738 + 1.0))) + _1743) * _1626;
        _1760 = _1593;
        _1761 = _1592;
        _1762 = _1591;
        _1763 = _1603;
        _1764 = _1602;
        _1765 = _1601;
        _1766 = _1613;
        _1767 = _1612;
        _1768 = _1611;
        _1769 = _1626;
        _1770 = _1625;
        _1771 = _1624;
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
    }
    else
    {
        _1760 = _1449;
        _1761 = _1449;
        _1762 = _1449;
        _1763 = _1449;
        _1764 = _1449;
        _1765 = _1449;
        _1766 = _1449;
        _1767 = _1449;
        _1768 = _1449;
        _1769 = _1449;
        _1770 = _1449;
        _1771 = _1449;
        _1772 = 0.0;
        _1773 = 0.0;
        _1774 = 0.0;
    }
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1461)) + _1461;
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1462)) + _1462;
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1463)) + _1463;
    float _1807 = fma(_1786, cbSceneParam._m0[89u].z, fma(_1785, cbSceneParam._m0[89u].y, _1784 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1786, cbSceneParam._m0[90u].z, fma(_1785, cbSceneParam._m0[90u].y, _1784 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1786, cbSceneParam._m0[91u].z, fma(_1785, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1784));
    float _1828 = _1055 * 0.5;
    float _1829 = _1056 * 0.5;
    float _1830 = _1057 * 0.5;
    float _1831 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1834 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1837 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1871;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1844 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1448, _1452, _1455, _1458));
        float _1848 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1450, _1453, _1456, _1459));
        float _1852 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1451, _1454, _1457, _1460));
        float _1859 = dot(vec4(cbModelParam._m0[39u]), vec4(_1828, _1829, _1830, 1.0));
        _1871 = dot(vec3(isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1859) ? 0.0 : (isnan(0.0) ? _1859 : max(0.0, _1859))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1871 = 1.0;
    }
    float _1882;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1873 = dot(vec4(cbModelParam._m0[40u]), vec4(_1828, _1829, _1830, 1.0));
        _1882 = dot(vec3(isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1873) ? 0.0 : (isnan(0.0) ? _1873 : max(0.0, _1873))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1882 = 1.0;
    }
    float _1886 = (_1882 * cbModelParam._m0[1u].x) + (_1871 * (1.0 - cbModelParam._m0[1u].x));
    float _1896 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _873);
    float _1897 = isnan(_1896) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1896 : min(cbModelParam._m0[25u].z, _1896));
    float _1977;
    float _1979;
    float _1981;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1944 = fma(_1119, cbModelParam._m0[13u].z, fma(_1115, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1111)) + cbModelParam._m0[13u].w;
        float _1948 = fma(_1119, cbModelParam._m0[14u].z, fma(_1115, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1111)) + cbModelParam._m0[14u].w;
        float _1952 = fma(_1119, cbModelParam._m0[15u].z, fma(_1115, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1111)) + cbModelParam._m0[15u].w;
        float _1955 = fma(_1057, cbModelParam._m0[13u].z, fma(_1056, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1055));
        float _1958 = fma(_1057, cbModelParam._m0[14u].z, fma(_1056, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1055));
        float _1961 = fma(_1057, cbModelParam._m0[15u].z, fma(_1056, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1055));
        float _1989;
        if (_1955 > 0.0)
        {
            _1989 = abs((1.0 - _1944) / _1955);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1944 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1989 = frontier_phi_17_15_ladder;
        }
        float _2160;
        if (_1958 > 0.0)
        {
            _2160 = abs((1.0 - _1948) / _1958);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1948 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2160 = frontier_phi_26_22_ladder;
        }
        float _2455;
        if (_1961 > 0.0)
        {
            _2455 = abs((1.0 - _1952) / _1961);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1952 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2455 = frontier_phi_38_33_ladder;
        }
        float _2457 = isnan(_2160) ? _1989 : (isnan(_1989) ? _2160 : min(_1989, _2160));
        float _2458 = isnan(_2455) ? _2457 : (isnan(_2457) ? _2455 : min(_2457, _2455));
        float _2462 = (_2458 * _1955) + _1944;
        float _2463 = (_2458 * _1958) + _1948;
        float _2464 = (_2458 * _1961) + _1952;
        float _2465 = _2458 * 9.9999997473787516355514526367188e-05;
        float _2467 = (-1.0) - _2465;
        float _2469 = _2465 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2464 > _2469) || ((_2464 < _2467) || ((_2463 > _2469) || ((_2463 < _2467) || ((_2462 < _2467) || (_2462 > _2469))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2464, cbModelParam._m0[9u].z, fma(_2463, cbModelParam._m0[9u].y, _2462 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2464, cbModelParam._m0[10u].z, fma(_2463, cbModelParam._m0[10u].y, _2462 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2464, cbModelParam._m0[11u].z, fma(_2463, cbModelParam._m0[11u].y, _2462 * cbModelParam._m0[11u].x))), _1897);
            frontier_phi_16_38_ladder = _2609.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2609.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2609.x * cbModelParam._m0[1u].y;
        }
        _1977 = frontier_phi_16_38_ladder_2;
        _1979 = frontier_phi_16_38_ladder_1;
        _1981 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1055, _1056, _1057), _1897);
        _1977 = _1965.x * cbModelParam._m0[1u].y;
        _1979 = _1965.y * cbModelParam._m0[1u].y;
        _1981 = _1965.z * cbModelParam._m0[1u].y;
    }
    float _1985 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _873);
    float _1986 = isnan(_1985) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1985 : min(cbModelParam._m0[25u].w, _1985));
    float _2075;
    float _2077;
    float _2079;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2039 = fma(_1119, cbModelParam._m0[21u].z, fma(_1115, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1111)) + cbModelParam._m0[21u].w;
        float _2043 = fma(_1119, cbModelParam._m0[22u].z, fma(_1115, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1111)) + cbModelParam._m0[22u].w;
        float _2047 = fma(_1119, cbModelParam._m0[23u].z, fma(_1115, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1111)) + cbModelParam._m0[23u].w;
        float _2050 = fma(_1057, cbModelParam._m0[21u].z, fma(_1056, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1055));
        float _2053 = fma(_1057, cbModelParam._m0[22u].z, fma(_1056, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1055));
        float _2056 = fma(_1057, cbModelParam._m0[23u].z, fma(_1056, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1055));
        float _2165;
        if (_2050 > 0.0)
        {
            _2165 = abs((1.0 - _2039) / _2050);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2039 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2165 = frontier_phi_28_24_ladder;
        }
        float _2482;
        if (_2053 > 0.0)
        {
            _2482 = abs((1.0 - _2043) / _2053);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2043 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2482 = frontier_phi_40_35_ladder;
        }
        float _2820;
        if (_2056 > 0.0)
        {
            _2820 = abs((1.0 - _2047) / _2056);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2047 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2820 = frontier_phi_50_47_ladder;
        }
        float _2822 = isnan(_2482) ? _2165 : (isnan(_2165) ? _2482 : min(_2165, _2482));
        float _2823 = isnan(_2820) ? _2822 : (isnan(_2822) ? _2820 : min(_2822, _2820));
        float _2827 = (_2823 * _2050) + _2039;
        float _2828 = (_2823 * _2053) + _2043;
        float _2829 = (_2823 * _2056) + _2047;
        float _2830 = _2823 * 9.9999997473787516355514526367188e-05;
        float _2831 = (-1.0) - _2830;
        float _2833 = _2830 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2829 > _2833) || ((_2829 < _2831) || ((_2828 > _2833) || ((_2828 < _2831) || ((_2827 < _2831) || (_2827 > _2833))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2951 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2829, cbModelParam._m0[17u].z, fma(_2828, cbModelParam._m0[17u].y, _2827 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2829, cbModelParam._m0[18u].z, fma(_2828, cbModelParam._m0[18u].y, _2827 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2829, cbModelParam._m0[19u].z, fma(_2828, cbModelParam._m0[19u].y, _2827 * cbModelParam._m0[19u].x))), _1986);
            frontier_phi_25_50_ladder = _2951.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2951.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2951.x * cbModelParam._m0[1u].z;
        }
        _2075 = frontier_phi_25_50_ladder_2;
        _2077 = frontier_phi_25_50_ladder_1;
        _2079 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2059 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1055, _1056, _1057), _1986);
        _2075 = _2059.x * cbModelParam._m0[1u].z;
        _2077 = _2059.y * cbModelParam._m0[1u].z;
        _2079 = _2059.z * cbModelParam._m0[1u].z;
    }
    float _2092 = (((_1082 * _1031) + _1083) * _1047) * ((cbModelParam._m0[1u].w * (_2075 - _1977)) + _1977);
    float _2094 = (((_1082 * _1033) + _1083) * _1047) * ((cbModelParam._m0[1u].w * (_2077 - _1979)) + _1979);
    float _2096 = (((_1082 * _1034) + _1083) * _1047) * ((cbModelParam._m0[1u].w * (_2079 - _1981)) + _1981);
    float _2099 = fma(_2096, cbSceneParam._m0[89u].z, fma(_2094, cbSceneParam._m0[89u].y, _2092 * cbSceneParam._m0[89u].x));
    float _2102 = fma(_2096, cbSceneParam._m0[90u].z, fma(_2094, cbSceneParam._m0[90u].y, _2092 * cbSceneParam._m0[90u].x));
    float _2105 = fma(_2096, cbSceneParam._m0[91u].z, fma(_2094, cbSceneParam._m0[91u].y, _2092 * cbSceneParam._m0[91u].x));
    float _2139 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2143 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2147 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2151 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2152 = _2139 / _2151;
    float _2153 = _2143 / _2151;
    float _2154 = _2147 / _2151;
    float _2301;
    float _2302;
    float _2303;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2181 = ((uint(_2154 > cbSceneParam._m0[59u].y) + uint(_2154 > cbSceneParam._m0[59u].x)) + uint(_2154 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2182 = _2181 + 43u;
        uint _2190 = _2181 + 44u;
        uint _2198 = _2181 + 45u;
        uint _2206 = _2181 + 46u;
        float _2217 = fma(_2151, cbSceneParam._m0[_2182].w, fma(_2147, cbSceneParam._m0[_2182].z, fma(_2143, cbSceneParam._m0[_2182].y, _2139 * cbSceneParam._m0[_2182].x)));
        float _2221 = fma(_2151, cbSceneParam._m0[_2190].w, fma(_2147, cbSceneParam._m0[_2190].z, fma(_2143, cbSceneParam._m0[_2190].y, _2139 * cbSceneParam._m0[_2190].x)));
        float _2229 = fma(_2151, cbSceneParam._m0[_2206].w, fma(_2147, cbSceneParam._m0[_2206].z, fma(_2143, cbSceneParam._m0[_2206].y, _2139 * cbSceneParam._m0[_2206].x)));
        float _2234 = cbSceneParam._m0[33u].z * _2229;
        float _2236 = cbSceneParam._m0[33u].w * _2229;
        float _2239 = fma(_2151, cbSceneParam._m0[_2198].w, fma(_2147, cbSceneParam._m0[_2198].z, fma(_2143, cbSceneParam._m0[_2198].y, _2139 * cbSceneParam._m0[_2198].x))) / _2229;
        float _2287 = (cbSceneParam._m0[33u].x - sqrt(((_2153 * _2153) + (_2152 * _2152)) + (_2154 * _2154))) * cbSceneParam._m0[33u].y;
        float _4709 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2294 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2234 + _2217) / _2229, (_2236 + _2221) / _2229), _2239), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2236 + _2217) / _2229, (_2221 - _2234) / _2229), _2239), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2217 - _2234) / _2229, (_2221 - _2236) / _2229), _2239), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2217 - _2236) / _2229, (_2234 + _2221) / _2229), _2239), 0.0)).x), vec4(0.25)));
        _2301 = 1.0 - (_2294 * cbSceneParam._m0[34u].x);
        _2302 = 1.0 - (_2294 * cbSceneParam._m0[34u].y);
        _2303 = 1.0 - (_2294 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2301 = 1.0;
        _2302 = 1.0;
        _2303 = 1.0;
    }
    float _2367;
    float _2369;
    float _2371;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2355 = fma(_2151, cbSceneParam._m0[63u].w, fma(_2147, cbSceneParam._m0[63u].z, fma(_2143, cbSceneParam._m0[63u].y, _2139 * cbSceneParam._m0[63u].x)));
        float _2356 = fma(_2151, cbSceneParam._m0[60u].w, fma(_2147, cbSceneParam._m0[60u].z, fma(_2143, cbSceneParam._m0[60u].y, _2139 * cbSceneParam._m0[60u].x))) / _2355;
        float _2357 = fma(_2151, cbSceneParam._m0[61u].w, fma(_2147, cbSceneParam._m0[61u].z, fma(_2143, cbSceneParam._m0[61u].y, _2139 * cbSceneParam._m0[61u].x))) / _2355;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2356 >= cbSceneParam._m0[64u].x) && (_2357 >= cbSceneParam._m0[64u].y)) && (_2356 <= cbSceneParam._m0[64u].z)) && (_2357 <= cbSceneParam._m0[64u].w))
        {
            float _2495 = fma(_2151, cbSceneParam._m0[62u].w, fma(_2147, cbSceneParam._m0[62u].z, fma(_2143, cbSceneParam._m0[62u].y, _2139 * cbSceneParam._m0[62u].x))) / _2355;
            float _2499 = isnan(cbSceneParam._m0[41u].w) ? _2495 : (isnan(_2495) ? cbSceneParam._m0[41u].w : max(_2495, cbSceneParam._m0[41u].w));
            float _2542 = (cbSceneParam._m0[33u].x - sqrt(((_2153 * _2153) + (_2152 * _2152)) + (_2154 * _2154))) * cbSceneParam._m0[33u].y;
            float _4725 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
            float _2549 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2356, cbSceneParam._m0[33u].w + _2357), _2499), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2356, _2357 - cbSceneParam._m0[33u].z), _2499), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2356 - cbSceneParam._m0[33u].z, _2357 - cbSceneParam._m0[33u].w), _2499), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2356 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2357), _2499), 0.0)).x), vec4(0.25)));
            float _2553 = 1.0 - (_2549 * cbSceneParam._m0[34u].x);
            float _2554 = 1.0 - (_2549 * cbSceneParam._m0[34u].y);
            float _2555 = 1.0 - (_2549 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2555) ? _2303 : (isnan(_2303) ? _2555 : min(_2303, _2555));
            frontier_phi_37_36_ladder_1 = isnan(_2554) ? _2302 : (isnan(_2302) ? _2554 : min(_2302, _2554));
            frontier_phi_37_36_ladder_2 = isnan(_2553) ? _2301 : (isnan(_2301) ? _2553 : min(_2301, _2553));
        }
        else
        {
            frontier_phi_37_36_ladder = _2303;
            frontier_phi_37_36_ladder_1 = _2302;
            frontier_phi_37_36_ladder_2 = _2301;
        }
        _2367 = frontier_phi_37_36_ladder_2;
        _2369 = frontier_phi_37_36_ladder_1;
        _2371 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2367 = _2301;
        _2369 = _2302;
        _2371 = _2303;
    }
    uvec4 _2376 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2378 = _2376.x * 14u;
    uint _2379 = _2378 + 13u;
    float _2386 = _1047 + (-1.0);
    float _2391 = (cbLight._m0[_2379].x * _2386) + 1.0;
    float _2392 = (cbLight._m0[_2379].y * _2386) + 1.0;
    float _2393 = (cbLight._m0[_2379].z * _2386) + 1.0;
    float _2394 = (cbLight._m0[_2379].w * _2386) + 1.0;
    uint _2395 = _2378 + 5u;
    float _2401 = isnan(1.0) ? _2392 : (isnan(_2392) ? 1.0 : min(_2392, 1.0));
    uint _2405 = _2378 + 4u;
    float _2414 = isnan(1.0) ? _2391 : (isnan(_2391) ? 1.0 : min(_2391, 1.0));
    uint _2418 = _2378 | 1u;
    float _2429 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_870, _871, _872));
    float _2432 = dot(vec3(cbLight._m0[_2418].xyz), vec3(_870, _871, _872));
    float _4761 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _4772 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2437 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * 0.3183098733425140380859375;
    float _2439 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * 0.3183098733425140380859375;
    float _2446 = ((cbLight._m0[_2395].x * _2401) * _2439) + (((cbLight._m0[_2405].x * _2367) * _2414) * _2437);
    float _2447 = ((_2401 * cbLight._m0[_2395].y) * _2439) + (((cbLight._m0[_2405].y * _2369) * _2414) * _2437);
    float _2448 = ((_2401 * cbLight._m0[_2395].z) * _2439) + (((cbLight._m0[_2405].z * _2371) * _2414) * _2437);
    uvec4 _2452 = floatBitsToUint(cbLight._m0[_2378 + 12u]);
    bool _2454 = _2452.x == 0u;
    float _2556;
    float _2558;
    float _2560;
    if (_2454)
    {
        _2556 = _2446;
        _2558 = _2447;
        _2560 = _2448;
    }
    else
    {
        uint _2564 = _2378 + 6u;
        float _2580 = (dot(vec3(cbLight._m0[_2378 + 2u].xyz), vec3(_870, _871, _872)) * 0.5) + 0.5;
        float _2581 = _2580 * _2580;
        float _4783 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2582 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2583 = isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0));
        _2556 = (((cbLight._m0[_2564].x * 0.3183098733425140380859375) * _2582) * _2583) + _2446;
        _2558 = (((cbLight._m0[_2564].y * 0.3183098733425140380859375) * _2582) * _2583) + _2447;
        _2560 = (((cbLight._m0[_2564].z * 0.3183098733425140380859375) * _2582) * _2583) + _2448;
    }
    bool _2563 = _2452.y == 0u;
    float _2618;
    float _2620;
    float _2622;
    if (_2563)
    {
        _2618 = _2556;
        _2620 = _2558;
        _2622 = _2560;
    }
    else
    {
        uint _2791 = _2378 + 7u;
        float _2807 = (dot(vec3(cbLight._m0[_2378 + 3u].xyz), vec3(_870, _871, _872)) * 0.5) + 0.5;
        float _2808 = _2807 * _2807;
        float _4799 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2809 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
        float _2810 = isnan(1.0) ? _2394 : (isnan(_2394) ? 1.0 : min(_2394, 1.0));
        _2618 = (((cbLight._m0[_2791].x * 0.3183098733425140380859375) * _2809) * _2810) + _2556;
        _2620 = (((cbLight._m0[_2791].y * 0.3183098733425140380859375) * _2809) * _2810) + _2558;
        _2622 = (((cbLight._m0[_2791].z * 0.3183098733425140380859375) * _2809) * _2810) + _2560;
    }
    uint _2625 = _2378 + 8u;
    float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _873) * 0.949999988079071044921875);
    float _2639 = _2638 * _2638;
    float _2640 = cbLight._m0[_2378].x + _949;
    float _2641 = cbLight._m0[_2378].y + _950;
    float _2642 = cbLight._m0[_2378].z + _951;
    float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
    float _2647 = _2646 * _2640;
    float _2648 = _2646 * _2641;
    float _2649 = _2646 * _2642;
    float _2650 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2378].xyz));
    float _4815 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2653 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
    float _4826 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _2654 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
    float _2655 = dot(vec3(_870, _871, _872), vec3(_2647, _2648, _2649));
    float _4837 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2658 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
    float _2659 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2647, _2648, _2649));
    float _4848 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2663 = _2639 * _2639;
    float _2667 = ((_2658 * _2658) * (_2663 + (-1.0))) + 1.0;
    float _2675 = exp2(log2(1.0 - (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) * 5.0);
    float _2676 = 0.959999978542327880859375 - _1028;
    float _2678 = 0.959999978542327880859375 - _1029;
    float _2679 = 0.959999978542327880859375 - _1030;
    float _2686 = 1.0 - _2639;
    float _2697 = (0.5 / (((_2654 * ((_2653 * _2686) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2654 * _2686) + _2639) * _2653))) * _2653;
    float _4859 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2699 = (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2663 / ((_2667 * _2667) * 3.141590118408203125));
    uint _2713 = _2378 + 9u;
    float _2724 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2418].w)) * _873) * 0.949999988079071044921875);
    float _2725 = _2724 * _2724;
    float _2726 = cbLight._m0[_2418].x + _949;
    float _2727 = cbLight._m0[_2418].y + _950;
    float _2728 = cbLight._m0[_2418].z + _951;
    float _2732 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
    float _2733 = _2732 * _2726;
    float _2734 = _2732 * _2727;
    float _2735 = _2732 * _2728;
    float _2736 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2418].xyz));
    float _4870 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2739 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
    float _2740 = dot(vec3(_870, _871, _872), vec3(_2733, _2734, _2735));
    float _4881 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
    float _2743 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
    float _2744 = dot(vec3(cbLight._m0[_2418].xyz), vec3(_2733, _2734, _2735));
    float _4892 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2748 = _2725 * _2725;
    float _2752 = ((_2743 * _2743) * (_2748 + (-1.0))) + 1.0;
    float _2759 = exp2(log2(1.0 - (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0)))) * 5.0);
    float _2766 = 1.0 - _2725;
    float _2776 = (0.5 / (((_2654 * ((_2739 * _2766) + _2725)) + 9.9999999392252902907785028219223e-09) + (((_2654 * _2766) + _2725) * _2739))) * _2739;
    float _4903 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
    float _2778 = (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2748 / ((_2752 * _2752) * 3.141590118408203125));
    float _2788 = (((((_2759 * _2676) + _1031) * cbLight._m0[_2713].x) * _2778) * _2401) + ((((cbLight._m0[_2625].x * _2367) * ((_2675 * _2676) + _1031)) * _2699) * _2414);
    float _2789 = (((((_2759 * _2678) + _1033) * cbLight._m0[_2713].y) * _2778) * _2401) + ((((cbLight._m0[_2625].y * _2369) * ((_2675 * _2678) + _1033)) * _2699) * _2414);
    float _2790 = (((((_2759 * _2679) + _1034) * cbLight._m0[_2713].z) * _2778) * _2401) + ((((cbLight._m0[_2625].z * _2371) * ((_2675 * _2679) + _1034)) * _2699) * _2414);
    float _2846;
    float _2848;
    float _2850;
    if (_2454)
    {
        _2846 = _2788;
        _2848 = _2789;
        _2850 = _2790;
    }
    else
    {
        uint _2852 = _2378 + 2u;
        uint _2856 = _2378 + 10u;
        float _2870 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2852].w)) * _873) * 0.949999988079071044921875);
        float _2871 = _2870 * _2870;
        float _2872 = cbLight._m0[_2852].x + _949;
        float _2873 = cbLight._m0[_2852].y + _950;
        float _2874 = cbLight._m0[_2852].z + _951;
        float _2878 = inversesqrt(dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874)));
        float _2879 = _2878 * _2872;
        float _2880 = _2878 * _2873;
        float _2881 = _2878 * _2874;
        float _2882 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2852].xyz));
        float _4914 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2885 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
        float _2886 = dot(vec3(_870, _871, _872), vec3(_2879, _2880, _2881));
        float _4925 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2889 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
        float _2890 = dot(vec3(cbLight._m0[_2852].xyz), vec3(_2879, _2880, _2881));
        float _4936 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2894 = _2871 * _2871;
        float _2898 = ((_2889 * _2889) * (_2894 + (-1.0))) + 1.0;
        float _2905 = exp2(log2(1.0 - (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0)))) * 5.0);
        float _2912 = 1.0 - _2871;
        float _2922 = (0.5 / (((_2654 * ((_2885 * _2912) + _2871)) + 9.9999999392252902907785028219223e-09) + (((_2654 * _2912) + _2871) * _2885))) * _2885;
        float _4947 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2924 = (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2894 / ((_2898 * _2898) * 3.141590118408203125));
        float _2925 = isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0));
        _2846 = (((((_2905 * _2676) + _1031) * cbLight._m0[_2856].x) * _2924) * _2925) + _2788;
        _2848 = (((((_2905 * _2678) + _1033) * cbLight._m0[_2856].y) * _2924) * _2925) + _2789;
        _2850 = (((((_2905 * _2679) + _1034) * cbLight._m0[_2856].z) * _2924) * _2925) + _2790;
    }
    float _2956;
    float _2958;
    float _2960;
    if (_2563)
    {
        _2956 = _2846;
        _2958 = _2848;
        _2960 = _2850;
    }
    else
    {
        uint _2967 = _2378 + 3u;
        uint _2971 = _2378 + 11u;
        float _2985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2967].w)) * _873) * 0.949999988079071044921875);
        float _2986 = _2985 * _2985;
        float _2987 = cbLight._m0[_2967].x + _949;
        float _2988 = cbLight._m0[_2967].y + _950;
        float _2989 = cbLight._m0[_2967].z + _951;
        float _2993 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
        float _2994 = _2993 * _2987;
        float _2995 = _2993 * _2988;
        float _2996 = _2993 * _2989;
        float _2997 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2967].xyz));
        float _4963 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        float _3000 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
        float _3001 = dot(vec3(_870, _871, _872), vec3(_2994, _2995, _2996));
        float _4974 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        float _3004 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
        float _3005 = dot(vec3(cbLight._m0[_2967].xyz), vec3(_2994, _2995, _2996));
        float _4985 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
        float _3009 = _2986 * _2986;
        float _3013 = ((_3004 * _3004) * (_3009 + (-1.0))) + 1.0;
        float _3020 = exp2(log2(1.0 - (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0)))) * 5.0);
        float _3027 = 1.0 - _2986;
        float _3037 = (0.5 / (((_2654 * ((_3000 * _3027) + _2986)) + 9.9999999392252902907785028219223e-09) + (((_2654 * _3027) + _2986) * _3000))) * _3000;
        float _4996 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
        float _3039 = (isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0))) * (_3009 / ((_3013 * _3013) * 3.141590118408203125));
        float _3040 = isnan(1.0) ? _2394 : (isnan(_2394) ? 1.0 : min(_2394, 1.0));
        _2956 = (((((_3020 * _2676) + _1031) * cbLight._m0[_2971].x) * _3039) * _3040) + _2846;
        _2958 = (((((_3020 * _2678) + _1033) * cbLight._m0[_2971].y) * _3039) * _3040) + _2848;
        _2960 = (((((_3020 * _2679) + _1034) * cbLight._m0[_2971].z) * _3039) * _3040) + _2850;
    }
    float _3106;
    float _3108;
    float _3110;
    float _3112;
    float _3114;
    float _3116;
    if (_2376.y == 0u)
    {
        uvec4 _3061 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3062 = _3061.x;
        uint _3073 = uint((float(_3061.y) * floor(float(uint(cbSceneParam._m0[85u].y * _970) / _3062))) + floor(float(uint(cbSceneParam._m0[85u].x * _969) / _3062)));
        float _3083 = (log2(_2154 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3084 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        uint _3087 = uint(isnan(14.0) ? _3084 : (isnan(_3084) ? 14.0 : min(_3084, 14.0)));
        uvec4 _3092 = texelFetch(g_lightClusterGridBuffer, int(((_3087 << 2u) + (_3073 << 6u)) >> 2u));
        uint _3093 = _3092.x;
        uint _3094 = _3061.z;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        if (((((1u << ((_3094 >> 4u) & 15u)) + 4294967295u) & _3093) == 0u) || ((_3094 & 240u) == 0u))
        {
            _3173 = 0.0;
            _3175 = 0.0;
            _3177 = 0.0;
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
        }
        else
        {
            float _3174;
            float _3176;
            float _3178;
            float _3180;
            float _3182;
            float _3184;
            float _3325 = 0.0;
            float _3326 = 0.0;
            float _3327 = 0.0;
            float _3328 = 0.0;
            float _3329 = 0.0;
            float _3330 = 0.0;
            uint _3331 = 0u;
            uint _3340;
            bool _3341;
            for (;;)
            {
                _3340 = texelFetch(g_lightClassification, int((((_3087 << 5u) + (_3073 << 9u)) + (_3331 << 2u)) >> 2u)).x;
                _3341 = _3340 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3341)
                {
                    frontier_phi_71_pred = _3330;
                    frontier_phi_71_pred_1 = _3329;
                    frontier_phi_71_pred_2 = _3328;
                    frontier_phi_71_pred_3 = _3327;
                    frontier_phi_71_pred_4 = _3326;
                    frontier_phi_71_pred_5 = _3325;
                }
                else
                {
                    float _3470;
                    float _3471;
                    float _3472;
                    float _3473;
                    float _3474;
                    float _3475;
                    uint _3476;
                    _3470 = _3325;
                    _3471 = _3326;
                    _3472 = _3327;
                    _3473 = _3328;
                    _3474 = _3329;
                    _3475 = _3330;
                    _3476 = _3340;
                    float _3397;
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    for (;;)
                    {
                        uint _3480 = uint(findLSB(_3476)) + (_3331 << 5u);
                        uint _3477 = (_3476 + 4294967295u) & _3476;
                        uint _3482 = _3480 * 48u;
                        vec4 _3496 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3482)).x, texelFetch(g_PointLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3482 + 3u)).x));
                        uint _3502 = (_3480 * 48u) + 4u;
                        vec4 _3515 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3502)).x, texelFetch(g_PointLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3502 + 3u)).x));
                        uint _3521 = (_3480 * 48u) + 8u;
                        vec3 _3532 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3521)).x, texelFetch(g_PointLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3521 + 2u)).x));
                        float _3536 = _3496.x - _2152;
                        float _3537 = _3496.y - _2153;
                        float _3538 = _3496.z - _2154;
                        float _3539 = dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538));
                        float _3542 = inversesqrt(_3539);
                        float _3543 = _3542 * _3536;
                        float _3544 = _3542 * _3537;
                        float _3545 = _3542 * _3538;
                        float _3546 = dot(vec3(_988, _991, _994), vec3(_3543, _3544, _3545));
                        float _3551 = 1.0 - (_3539 * _3496.w);
                        float _5022 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3552 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                        float _3553 = sqrt(_3539) * _3515.w;
                        float _3556 = 1.39999997615814208984375 / (_3553 + 1.39999997615814208984375);
                        float _3557 = _3556 * _3556;
                        float _3560 = ((1.0 - _3557) * _3546) + _3557;
                        float _3563 = _3553 * _3553;
                        float _3567 = ((isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0))) * _3552) / ((_3563 * 0.699999988079071044921875) + 1.0);
                        float _3571 = (-0.0) - _2152;
                        float _3572 = (-0.0) - _2153;
                        float _3573 = (-0.0) - _2154;
                        float _3577 = inversesqrt(dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573)));
                        float _3578 = _3577 * _3571;
                        float _3579 = _3577 * _3572;
                        float _3580 = _3577 * _3573;
                        float _3587 = exp2(log2(1.0 / ((_3563 * 3.5) + 5.0)) * 0.25);
                        float _3588 = 1.0 - _1063;
                        float _3595 = sqrt(1.0 - ((1.0 - (_3588 * _3588)) * (1.0 - (_3587 * _3587))));
                        float _3596 = _3595 * _3595;
                        float _3597 = _3596 * _3596;
                        float _3598 = _3578 + _3543;
                        float _3599 = _3579 + _3544;
                        float _3600 = _3580 + _3545;
                        float _3604 = inversesqrt(dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600)));
                        float _3608 = dot(vec3(_988, _991, _994), vec3(_3578, _3579, _3580));
                        float _5038 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                        float _3611 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                        float _3612 = dot(vec3(_988, _991, _994), vec3(_3604 * _3598, _3604 * _3599, _3604 * _3600));
                        float _5049 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                        float _3615 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
                        float _3619 = ((_3615 * _3615) * (_3597 + (-1.0))) + 1.0;
                        float _3620 = _3556 * _3596;
                        float _3621 = _3620 * _3620;
                        float _3624 = ((1.0 - _3621) * _3546) + _3621;
                        float _5060 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                        float _3625 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                        float _3626 = 1.0 - _3596;
                        float _3636 = (0.5 / (((_3625 * ((_3611 * _3626) + _3596)) + 9.9999999392252902907785028219223e-09) + (((_3625 * _3626) + _3596) * _3611))) * _3625;
                        float _5071 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                        float _3647 = (((_3597 * 3.1415927410125732421875) * (isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0)))) / ((_3619 * _3619) * ((_3563 * 2.1991131305694580078125) + 3.141590118408203125))) * _3552;
                        _3400 = (_3567 * _3515.x) + _3473;
                        _3401 = (_3567 * _3515.y) + _3474;
                        _3402 = (_3567 * _3515.z) + _3475;
                        _3397 = (_3647 * _3532.x) + _3470;
                        _3398 = (_3647 * _3532.y) + _3471;
                        _3399 = (_3647 * _3532.z) + _3472;
                        if (_3477 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3470 = _3397;
                            _3471 = _3398;
                            _3472 = _3399;
                            _3473 = _3400;
                            _3474 = _3401;
                            _3475 = _3402;
                            _3476 = _3477;
                        }
                    }
                    frontier_phi_71_pred = _3402;
                    frontier_phi_71_pred_1 = _3401;
                    frontier_phi_71_pred_2 = _3400;
                    frontier_phi_71_pred_3 = _3399;
                    frontier_phi_71_pred_4 = _3398;
                    frontier_phi_71_pred_5 = _3397;
                }
                _3184 = frontier_phi_71_pred;
                _3182 = frontier_phi_71_pred_1;
                _3180 = frontier_phi_71_pred_2;
                _3178 = frontier_phi_71_pred_3;
                _3176 = frontier_phi_71_pred_4;
                _3174 = frontier_phi_71_pred_5;
                uint _3332 = _3331 + 1u;
                if (_3332 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3325 = _3174;
                    _3326 = _3176;
                    _3327 = _3178;
                    _3328 = _3180;
                    _3329 = _3182;
                    _3330 = _3184;
                    _3331 = _3332;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3173 = _3174;
            _3175 = _3176;
            _3177 = _3178;
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
        }
        uvec4 _3187 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3188 = _3187.z;
        uint _3190 = (_3188 >> 8u) & 15u;
        float _3293;
        float _3295;
        float _3297;
        float _3299;
        float _3301;
        float _3303;
        if (((4294967295u << _3190) & _3093) == 0u)
        {
            _3293 = _3173;
            _3295 = _3175;
            _3297 = _3177;
            _3299 = _3179;
            _3301 = _3181;
            _3303 = _3183;
        }
        else
        {
            float _3318 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
            float _3319 = _3318 * _2152;
            float _3320 = _3318 * _2153;
            float _3321 = _3318 * _2154;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3190 < ((_3188 >> 12u) & 15u))
            {
                float _3294;
                float _3296;
                float _3298;
                float _3300;
                float _3302;
                float _3304;
                float _3453 = _3173;
                float _3454 = _3175;
                float _3455 = _3177;
                float _3456 = _3179;
                float _3457 = _3181;
                float _3458 = _3183;
                uint _3459 = _3190;
                uint _3468;
                bool _3469;
                for (;;)
                {
                    _3468 = texelFetch(g_lightClassification, int((((_3087 << 5u) + (_3073 << 9u)) + (_3459 << 2u)) >> 2u)).x;
                    _3469 = _3468 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3469)
                    {
                        frontier_phi_82_pred = _3458;
                        frontier_phi_82_pred_1 = _3457;
                        frontier_phi_82_pred_2 = _3456;
                        frontier_phi_82_pred_3 = _3455;
                        frontier_phi_82_pred_4 = _3454;
                        frontier_phi_82_pred_5 = _3453;
                    }
                    else
                    {
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3954;
                        float _3955;
                        float _3956;
                        float _3957;
                        float _3958;
                        float _3959;
                        float _3674 = _3453;
                        float _3675 = _3454;
                        float _3676 = _3455;
                        float _3677 = _3456;
                        float _3678 = _3457;
                        float _3679 = _3458;
                        uint _3680 = _3468;
                        uint _3681;
                        vec4 _3706;
                        float _3707;
                        vec4 _3722;
                        vec3 _3734;
                        vec4 _3749;
                        vec4 _3764;
                        float _3810;
                        bool _3811;
                        for (;;)
                        {
                            uint _3691 = ((_3459 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3680));
                            _3681 = (_3680 + 4294967295u) & _3680;
                            uint _3693 = _3691 * 40u;
                            _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            _3707 = _3706.w;
                            uint _3709 = (_3691 * 40u) + 4u;
                            _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            uint _3724 = (_3691 * 40u) + 8u;
                            _3734 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x));
                            uint _3736 = (_3691 * 40u) + 16u;
                            _3749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 3u)).x));
                            uint _3751 = (_3691 * 40u) + 20u;
                            _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            uint _3766 = (_3691 * 40u) + 24u;
                            vec4 _3779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 3u)).x));
                            uint _3785 = (_3691 * 40u) + 28u;
                            vec4 _3798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 3u)).x));
                            _3810 = fma(_2154, _3798.z, fma(_2153, _3798.y, _3798.x * _2152)) + _3798.w;
                            _3811 = !((fma(_2154, _3779.z, fma(_2153, _3779.y, _3779.x * _2152)) + _3779.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3811)
                            {
                                float _3838 = _3706.x - _2152;
                                float _3839 = _3706.y - _2153;
                                float _3840 = _3706.z - _2154;
                                float _3841 = dot(vec3(_3838, _3839, _3840), vec3(_3838, _3839, _3840));
                                float _3844 = inversesqrt(_3841);
                                float _3845 = _3844 * _3838;
                                float _3846 = _3844 * _3839;
                                float _3847 = _3844 * _3840;
                                float _3851 = 1.0 - (_3841 / (_3707 * _3707));
                                float _5082 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3852 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                                float _3856 = sqrt(_3841) * _3722.w;
                                float _3858 = 1.39999997615814208984375 / (_3856 + 1.39999997615814208984375);
                                float _3859 = _3858 * _3858;
                                float _3862 = ((1.0 - _3859) * dot(vec3(_3845, _3846, _3847), vec3(_988, _991, _994))) + _3859;
                                float _3865 = _3856 * _3856;
                                float _3869 = (fma(_2154, _3749.z, fma(_2153, _3749.y, _3749.x * _2152)) + _3749.w) / _3810;
                                float _3870 = (fma(_2154, _3764.z, fma(_2153, _3764.y, _3764.x * _2152)) + _3764.w) / _3810;
                                float _3874 = 1.0 - dot(vec2(_3869, _3870), vec2(_3869, _3870));
                                float _5098 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3875 = isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0));
                                float _3876 = _3875 * (((isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0))) * _3852) / ((_3865 * 0.699999988079071044921875) + 1.0));
                                float _3888 = exp2(log2(1.0 / ((_3865 * 3.5) + 5.0)) * 0.25);
                                float _3889 = 1.0 - _1063;
                                float _3896 = sqrt(1.0 - ((1.0 - (_3889 * _3889)) * (1.0 - (_3888 * _3888))));
                                float _3897 = _3896 * _3896;
                                float _3898 = _3897 * _3897;
                                float _3899 = _3845 - _3319;
                                float _3900 = _3846 - _3320;
                                float _3901 = _3847 - _3321;
                                float _3905 = inversesqrt(dot(vec3(_3899, _3900, _3901), vec3(_3899, _3900, _3901)));
                                float _3909 = dot(vec3(_988, _991, _994), vec3((-0.0) - _3319, (-0.0) - _3320, (-0.0) - _3321));
                                float _5109 = isnan(0.0) ? _3909 : (isnan(_3909) ? 0.0 : max(_3909, 0.0));
                                float _3912 = isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0));
                                float _3913 = dot(vec3(_988, _991, _994), vec3(_3905 * _3899, _3905 * _3900, _3905 * _3901));
                                float _5120 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3916 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
                                float _3920 = ((_3916 * _3916) * (_3898 + (-1.0))) + 1.0;
                                float _3921 = _3858 * _3897;
                                float _3922 = _3921 * _3921;
                                float _3928 = ((1.0 - _3922) * dot(vec3(_988, _991, _994), vec3(_3845, _3846, _3847))) + _3922;
                                float _5131 = isnan(0.0) ? _3928 : (isnan(_3928) ? 0.0 : max(_3928, 0.0));
                                float _3929 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
                                float _3930 = 1.0 - _3897;
                                float _3940 = (0.5 / (((_3929 * ((_3912 * _3930) + _3897)) + 9.9999999392252902907785028219223e-09) + (((_3929 * _3930) + _3897) * _3912))) * _3929;
                                float _5142 = isnan(0.0) ? _3940 : (isnan(_3940) ? 0.0 : max(_3940, 0.0));
                                float _3950 = (_3875 * _3852) * (((_3898 * 3.1415927410125732421875) * (isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0)))) / ((_3920 * _3920) * ((_3865 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3876 * _3722.z;
                                frontier_phi_88_pred_1 = _3876 * _3722.y;
                                frontier_phi_88_pred_2 = _3876 * _3722.x;
                                frontier_phi_88_pred_3 = _3950 * _3734.z;
                                frontier_phi_88_pred_4 = _3950 * _3734.y;
                                frontier_phi_88_pred_5 = _3950 * _3734.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3959 = frontier_phi_88_pred;
                            _3958 = frontier_phi_88_pred_1;
                            _3957 = frontier_phi_88_pred_2;
                            _3956 = frontier_phi_88_pred_3;
                            _3955 = frontier_phi_88_pred_4;
                            _3954 = frontier_phi_88_pred_5;
                            _3664 = _3957 + _3677;
                            _3665 = _3958 + _3678;
                            _3666 = _3959 + _3679;
                            _3661 = _3954 + _3674;
                            _3662 = _3955 + _3675;
                            _3663 = _3956 + _3676;
                            if (_3681 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3674 = _3661;
                                _3675 = _3662;
                                _3676 = _3663;
                                _3677 = _3664;
                                _3678 = _3665;
                                _3679 = _3666;
                                _3680 = _3681;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3666;
                        frontier_phi_82_pred_1 = _3665;
                        frontier_phi_82_pred_2 = _3664;
                        frontier_phi_82_pred_3 = _3663;
                        frontier_phi_82_pred_4 = _3662;
                        frontier_phi_82_pred_5 = _3661;
                    }
                    _3304 = frontier_phi_82_pred;
                    _3302 = frontier_phi_82_pred_1;
                    _3300 = frontier_phi_82_pred_2;
                    _3298 = frontier_phi_82_pred_3;
                    _3296 = frontier_phi_82_pred_4;
                    _3294 = frontier_phi_82_pred_5;
                    uint _3460 = _3459 + 1u;
                    if (_3460 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3453 = _3294;
                        _3454 = _3296;
                        _3455 = _3298;
                        _3456 = _3300;
                        _3457 = _3302;
                        _3458 = _3304;
                        _3459 = _3460;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3300;
                frontier_phi_63_64_ladder_1 = _3304;
                frontier_phi_63_64_ladder_2 = _3302;
                frontier_phi_63_64_ladder_3 = _3298;
                frontier_phi_63_64_ladder_4 = _3296;
                frontier_phi_63_64_ladder_5 = _3294;
            }
            else
            {
                frontier_phi_63_64_ladder = _3179;
                frontier_phi_63_64_ladder_1 = _3183;
                frontier_phi_63_64_ladder_2 = _3181;
                frontier_phi_63_64_ladder_3 = _3177;
                frontier_phi_63_64_ladder_4 = _3175;
                frontier_phi_63_64_ladder_5 = _3173;
            }
            _3293 = frontier_phi_63_64_ladder_5;
            _3295 = frontier_phi_63_64_ladder_4;
            _3297 = frontier_phi_63_64_ladder_3;
            _3299 = frontier_phi_63_64_ladder;
            _3301 = frontier_phi_63_64_ladder_2;
            _3303 = frontier_phi_63_64_ladder_1;
        }
        float _3308 = isnan(1.0) ? _1047 : (isnan(_1047) ? 1.0 : min(_1047, 1.0));
        _3106 = (_3308 * _3299) + _2618;
        _3108 = (_3308 * _3301) + _2620;
        _3110 = (_3308 * _3303) + _2622;
        _3112 = ((_3293 * _1031) * _3308) + _2956;
        _3114 = ((_3295 * _1033) * _3308) + _2958;
        _3116 = ((_3297 * _1034) * _3308) + _2960;
    }
    else
    {
        _3106 = _2618;
        _3108 = _2620;
        _3110 = _2622;
        _3112 = _2956;
        _3114 = _2958;
        _3116 = _2960;
    }
    float _5158 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _5169 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _5180 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _3133 = ((isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0))) * (_3106 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1047))) + ((_3112 + ((isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))) * _1886)) * cbPerFrame._m0[3u].x);
    float _3134 = ((isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0))) * (_3108 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1047))) + ((_3114 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1886)) * cbPerFrame._m0[3u].x);
    float _3135 = ((isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0))) * (_3110 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1047))) + ((_3116 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1886)) * cbPerFrame._m0[3u].x);
    uint _3136 = _265 + 6u;
    float _3144 = _969 / cbSceneParam._m0[86u].x;
    float _3145 = _970 / cbSceneParam._m0[86u].y;
    vec4 _3159 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3144, _3145, (log2((isnan(cbSceneParam._m0[77u].w) ? _892 : (isnan(_892) ? cbSceneParam._m0[77u].w : min(_892, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3161 = _3159.x;
    float _3162 = _3159.y;
    float _3163 = _3159.z;
    float _3164 = _3159.w;
    float _3235;
    float _3237;
    float _3239;
    float _3241;
    if (_892 > cbSceneParam._m0[78u].w)
    {
        float _3198 = isnan(_892) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _892 : min(cbSceneParam._m0[80u].w, _892));
        float _3199 = _3198 / _892;
        float _3210 = _3199 * _942;
        float _3211 = _943 * _3199;
        float _3212 = (-0.0) - _3211;
        float _3213 = _3199 * _944;
        float _3215 = (cbSceneParam._m0[77u].w * _3212) / _3198;
        float _3216 = _3215 + cbSceneParam._m0[79u].w;
        float _3217 = cbSceneParam._m0[79u].w - _3211;
        float _3223 = sqrt(((_3210 * _3210) + (_3211 * _3211)) + (_3213 * _3213));
        float _3226 = (1.0 - (cbSceneParam._m0[77u].w / _3198)) * _3223;
        float _3231 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3233 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3410;
        if (abs((_3212 - _3215) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3410 = ((((_3216 > 0.0) ? exp2(_3231 * _3216) : (2.0 - exp2(_3233 * _3216))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3226;
        }
        else
        {
            float _3354 = 1.0 / cbSceneParam._m0[80u].x;
            float _3355 = isnan(_3217) ? _3216 : (isnan(_3216) ? _3217 : max(_3216, _3217));
            float _3356 = isnan(_3217) ? _3216 : (isnan(_3216) ? _3217 : min(_3216, _3217));
            float _3365 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : min(_3355, 0.0));
            float _3366 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : min(_3356, 0.0));
            _3410 = ((abs(_3223 / _3212) * cbSceneParam._m0[80u].y) * ((((_3365 - _3366) * 2.0) - ((exp2(_3231 * (isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0)))) - exp2(_3231 * (isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0))))) * _3354)) - ((exp2(_3233 * _3365) - exp2(_3233 * _3366)) * _3354))) + (_3226 * cbSceneParam._m0[80u].z);
        }
        vec4 _3412 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3144, _3145, 1.0), 0.0);
        float _3421 = exp2((_3410 * (-1.44269502162933349609375)) * (1.0 - _3412.w));
        float _3422 = log2(_3421);
        float _3438 = log2(_3164);
        _3235 = (exp2(_3438 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3422 * cbSceneParam._m0[78u].x)) * _3412.x) / cbSceneParam._m0[78u].x)) + _3161;
        _3237 = (exp2(_3438 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3422 * cbSceneParam._m0[78u].y)) * _3412.y) / cbSceneParam._m0[78u].y)) + _3162;
        _3239 = (exp2(_3438 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3422 * cbSceneParam._m0[78u].z)) * _3412.z) / cbSceneParam._m0[78u].z)) + _3163;
        _3241 = _3421 * _3164;
    }
    else
    {
        _3235 = _3161;
        _3237 = _3162;
        _3239 = _3163;
        _3241 = _3164;
    }
    bool _3448;
    vec4 _3251;
    vec4 _3273;
    float _3275;
    float _3279;
    float _3280;
    float _3281;
    float _3282;
    bool _3292;
    for (;;)
    {
        _3251 = cbMatDynParam._m0[0u];
        float _3253 = roundEven(_3251.y);
        bool _3254 = _3253 == 3.0;
        float _3255 = log2(_3241);
        float _3262 = exp2(_3255 * cbSceneParam._m0[78u].x) * _3133;
        float _3263 = exp2(_3255 * cbSceneParam._m0[78u].y) * _3134;
        float _3264 = exp2(_3255 * cbSceneParam._m0[78u].z) * _3135;
        float _3271 = _958 + (-0.5);
        _3273 = cbMtdParam._m0[1u];
        _3275 = _3273.y * _3271;
        float _3278 = (_3253 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3279 = _3278 * (_3254 ? _3262 : (_3262 + (cbSceneParam._m0[72u].w * _3235)));
        _3280 = _3278 * (_3254 ? _3263 : (_3263 + (cbSceneParam._m0[72u].w * _3237)));
        _3281 = _3278 * (_3254 ? _3264 : (_3264 + (cbSceneParam._m0[72u].w * _3239)));
        _3282 = _3271 * 0.999000012874603271484375;
        _3292 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3292)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3282) < 0.5)
            {
                _3448 = true;
                break;
            }
        }
        uint _3389 = _1007 + uint(_3251.w);
        if ((cbInstanceData._m0[_3389].w < 1.0) && ((cbInstanceData._m0[_3389].w + _3282) < 0.5))
        {
            _3448 = true;
            break;
        }
        if ((_3275 + 1.0) < _3273.x)
        {
            _3448 = true;
            break;
        }
        _3448 = false;
        break;
    }
    float _3652;
    if (_3448)
    {
        discard_state = true;
        _3652 = 0.0;
    }
    else
    {
        _3652 = cbInstanceData._m0[_3136].w;
    }
    SV_Target.x = _3279;
    SV_Target.y = _3280;
    SV_Target.z = _3281;
    SV_Target.w = _3652;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3136].w;
    discard_exit();
}


