#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1362;
float _4026;
float _4027;
float _4028;
float _4029;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4038 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _440 = _436.z;
    float _449 = ((_419.z - _440) * _392) + _440;
    float _452 = ((((_419.x - _438) * _392) + _438) * 2.0) + (-1.0);
    float _454 = ((((_419.y - _439) * _392) + _439) * 2.0) + (-1.0);
    float _455 = dot(vec2(_452, _454), vec2(_452, _454));
    float _4049 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _460 = sqrt(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))));
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _488 = (((_476.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _452;
    float _489 = (((_476.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _454;
    float _492 = fma(_460, _243, fma(_489, _250, _488 * _236));
    float _495 = fma(_460, _244, fma(_489, _251, _488 * _237));
    float _498 = fma(_460, _245, fma(_489, _252, _488 * _238));
    float _502 = inversesqrt(dot(vec3(_492, _495, _498), vec3(_492, _495, _498)));
    vec4 _529 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _531 = _529.x;
    float _532 = 1.0 - _531;
    float _538 = (cbMtdParam._m0[19u].x + dot(vec4(_502 * _492, _502 * _495, _502 * _498, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_531 - _532) * cbMtdParam._m0[24u].z) + _532) * cbMtdParam._m0[21u].z);
    float _4060 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _541 = (-0.0) - cbMtdParam._m0[24u].x;
    float _543 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _543 : (isnan(_543) ? 1.0 : min(_543, 1.0));
    float _551 = _539 - ((_539 * TEXCOORD_8.x) * _544);
    float _552 = _539 - ((_539 * TEXCOORD_8.y) * _544);
    float _553 = _539 - ((_539 * TEXCOORD_8.z) * _544);
    float _560 = (_551 * (cbMtdParam._m0[17u].x - _399)) + _399;
    float _561 = (_552 * (cbMtdParam._m0[17u].y - _400)) + _400;
    float _562 = (_553 * (cbMtdParam._m0[17u].z - _401)) + _401;
    vec4 _574 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _576 = _574.x;
    float _577 = 1.0 - _576;
    float _605 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_576 - _577) * cbMtdParam._m0[24u].w) + _577) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4081 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _606 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _614 = ((((cbMtdParam._m0[10u].x - _560) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _606) + _560;
    float _615 = ((((cbMtdParam._m0[10u].y - _561) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _606) + _561;
    float _616 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _562)) * _606) + _562;
    vec4 _642 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _644 = _642.x;
    float _662 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _644) * _392) + _644;
    float _666 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _662) * cbMtdParam._m0[19u].z) + _662;
    float _668 = _666 - (_666 * _551);
    float _670 = _668 - (_668 * _606);
    float _674 = (cbMtdParam._m0[19u].w * (_476.z - _449)) + _449;
    vec4 _688 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _695 = (_688.x * 2.0) + (-1.0);
    float _696 = (_688.y * 2.0) + (-1.0);
    float _697 = dot(vec2(_695, _696), vec2(_695, _696));
    float _4092 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _705 = ((_688.z - _674) * _551) + _674;
    float _708 = ((cbMtdParam._m0[23u].y - _705) * _606) + _705;
    vec4 _727 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _733 = (_727.x * 2.0) + (-1.0);
    float _734 = (_727.y * 2.0) + (-1.0);
    float _735 = dot(vec2(_733, _734), vec2(_733, _734));
    float _4103 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _750 = ((sqrt(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) - _460) * _553) + _460;
    float _753 = (((_695 - _488) * _551) + _488) + (cbMtdParam._m0[21u].x * _488);
    float _754 = (((_696 - _489) * _552) + _489) + (cbMtdParam._m0[21u].x * _489);
    float _765 = (((_733 - _753) + (_753 * cbMtdParam._m0[22u].z)) * _606) + _753;
    float _766 = (((_734 - _754) + (_754 * cbMtdParam._m0[22u].z)) * _606) + _754;
    float _767 = (_606 * (sqrt(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) - _750)) + _750;
    float _769 = cbMtdParam._m0[22u].x + _476.w;
    float _772 = fma(_767, _243, fma(_766, _250, _765 * _236));
    float _775 = fma(_767, _244, fma(_766, _251, _765 * _237));
    float _778 = fma(_767, _245, fma(_766, _252, _765 * _238));
    float _782 = inversesqrt(dot(vec3(_772, _775, _778), vec3(_772, _775, _778)));
    float _783 = _782 * _772;
    float _784 = _782 * _775;
    float _785 = _782 * _778;
    float _4114 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _786 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4136 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4147 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4158 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4169 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _791 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _805 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _855 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _845);
    float _856 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _845);
    float _857 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _845);
    float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
    float _862 = _855 * _861;
    float _863 = _856 * _861;
    float _864 = _857 * _861;
    vec4 _869 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _871 = _869.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1043 = sqrt(((_855 * _855) + (_856 * _856)) + (_857 * _857));
        float _1049 = (cbMatDynParam._m0[5u].x * _1043) + cbMatDynParam._m0[5u].y;
        float _4180 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1054 = (cbMatDynParam._m0[5u].z * _1043) + cbMatDynParam._m0[5u].w;
        float _4191 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) - _1050)) + _1050) < ((_871 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _882 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _883 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _901 = fma(_785, cbSceneParam._m0[5u].z, fma(_784, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _783));
    float _904 = fma(_785, cbSceneParam._m0[6u].z, fma(_784, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _783));
    float _907 = fma(_785, cbSceneParam._m0[7u].z, fma(_784, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _783));
    uint _920 = _255 + 9u;
    uint _921 = _920 + uint(cbMatDynParam._m0[0u].w);
    float _927 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * cbInstanceData._m0[_921].x;
    float _928 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * cbInstanceData._m0[_921].y;
    float _929 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * cbInstanceData._m0[_921].z;
    float _4202 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _933 = 1.0 - _791;
    float _934 = _930 * _933;
    float _935 = _931 * _933;
    float _936 = _932 * _933;
    float _941 = (_930 + (-0.039999999105930328369140625)) * _791;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _791;
    float _943 = (_932 + (-0.039999999105930328369140625)) * _791;
    float _944 = _941 + 0.039999999105930328369140625;
    float _946 = _942 + 0.039999999105930328369140625;
    float _947 = _943 + 0.039999999105930328369140625;
    vec4 _956 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _882, cbSceneParam._m0[86u].y * _883));
    float _960 = ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * TEXCOORD_5.w) * _956.x;
    float _961 = dot(vec3(_783, _784, _785), vec3(_862, _863, _864));
    float _964 = _961 * 2.0;
    float _968 = (_964 * _783) - _862;
    float _969 = (_964 * _784) - _863;
    float _970 = (_964 * _785) - _864;
    float _974 = abs(dot(vec3(_862, _863, _864), vec3(_783, _784, _785)));
    float _4235 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _976 = sqrt(_786);
    float _989 = exp2((_976 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_976 * 3.0));
    float _995 = (1.0 - _989) * ((_976 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _996 = _989 * _976;
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1361;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1086 = fma(_1032, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024));
        float _1090 = fma(_1032, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024));
        float _1094 = fma(_1032, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024));
        float _1119 = _1024 + _783;
        float _1120 = _1028 + _784;
        float _1121 = _1032 + _785;
        float _1131 = fma(_1121, cbModelParam._m0[26u].z, fma(_1120, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1119)) - _1086;
        float _1132 = fma(_1121, cbModelParam._m0[27u].z, fma(_1120, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1119)) - _1090;
        float _1133 = fma(_1121, cbModelParam._m0[28u].z, fma(_1120, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1119)) - _1094;
        float _1137 = inversesqrt(dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133)));
        float _1150 = ((_1137 * _1131) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1086 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1137 * _1132) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1090 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1137 * _1133) / cbModelParam._m0[34u].z) + ((((((_1094 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        float _1189 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1155.x + (-0.5));
        float _1191 = _1189 * (_1155.y + (-0.5));
        float _1192 = _1189 * (_1155.z + (-0.5));
        float _1199 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1162.x + (-0.5));
        float _1201 = _1199 * (_1162.y + (-0.5));
        float _1202 = _1199 * (_1162.z + (-0.5));
        float _1209 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1169.x + (-0.5));
        float _1211 = _1209 * (_1169.y + (-0.5));
        float _1212 = _1209 * (_1169.z + (-0.5));
        float _1219 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1176.x + (-0.5));
        float _1221 = _1219 * (_1176.y + (-0.5));
        float _1222 = _1219 * (_1176.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1243 = (dot(vec3(_783, _784, _785), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1253 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _4283 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1255 + 1.0))) + _1260) * _1223;
        float _1270 = _1191 * 0.5;
        float _1271 = _1201 * 0.5;
        float _1272 = _1211 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_783, _784, _785), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4316 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1297 + 1.0))) + _1302) * _1224;
        float _1312 = _1192 * 0.5;
        float _1313 = _1202 * 0.5;
        float _1314 = _1212 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_783, _784, _785), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4349 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1339 + 1.0))) + _1344) * _1225;
        _1361 = _1192;
        _1363 = _1191;
        _1364 = _1190;
        _1365 = _1202;
        _1366 = _1201;
        _1367 = _1200;
        _1368 = _1212;
        _1369 = _1211;
        _1370 = _1210;
        _1371 = _1225;
        _1372 = _1224;
        _1373 = _1223;
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1362;
        _1363 = _1362;
        _1364 = _1362;
        _1365 = _1362;
        _1366 = _1362;
        _1367 = _1362;
        _1368 = _1362;
        _1369 = _1362;
        _1370 = _1362;
        _1371 = _1362;
        _1372 = _1362;
        _1373 = _1362;
        _1374 = 0.0;
        _1375 = 0.0;
        _1376 = 0.0;
    }
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1404 = fma(_1032, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1024));
        float _1408 = fma(_1032, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1024));
        float _1412 = fma(_1032, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1024));
        float _1435 = _1024 + _783;
        float _1436 = _1028 + _784;
        float _1437 = _1032 + _785;
        float _1447 = fma(_1437, cbModelParam._m0[30u].z, fma(_1436, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1435)) - _1404;
        float _1448 = fma(_1437, cbModelParam._m0[31u].z, fma(_1436, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1435)) - _1408;
        float _1449 = fma(_1437, cbModelParam._m0[32u].z, fma(_1436, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1435)) - _1412;
        float _1453 = inversesqrt(dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449)));
        float _1466 = ((_1453 * _1447) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1404 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1453 * _1448) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1408 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1453 * _1449) / cbModelParam._m0[35u].z) + ((((((_1412 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        float _1503 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1470.x + (-0.5));
        float _1505 = _1503 * (_1470.y + (-0.5));
        float _1506 = _1503 * (_1470.z + (-0.5));
        float _1513 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1477.x + (-0.5));
        float _1515 = _1513 * (_1477.y + (-0.5));
        float _1516 = _1513 * (_1477.z + (-0.5));
        float _1523 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1484.x + (-0.5));
        float _1525 = _1523 * (_1484.y + (-0.5));
        float _1526 = _1523 * (_1484.z + (-0.5));
        float _1533 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1491.x + (-0.5));
        float _1535 = _1533 * (_1491.y + (-0.5));
        float _1536 = _1533 * (_1491.z + (-0.5));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = _1504 * 0.5;
        float _1541 = _1514 * 0.5;
        float _1542 = _1524 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_783, _784, _785), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4390 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4401 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4412 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_1567 + 1.0))) + _1572) * _1537;
        float _1582 = _1505 * 0.5;
        float _1583 = _1515 * 0.5;
        float _1584 = _1525 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_783, _784, _785), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _4423 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4434 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4445 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_1609 + 1.0))) + _1614) * _1538;
        float _1624 = _1506 * 0.5;
        float _1625 = _1516 * 0.5;
        float _1626 = _1526 * 0.5;
        float _1627 = dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626));
        float _1632 = (_1627 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1627);
        float _1640 = (dot(vec3(_783, _784, _785), vec3(_1632 * _1624, _1632 * _1625, _1632 * _1626)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1649 = sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1651 = _1650 * 2.0;
        float _1655 = (1.0 - _1650) / (_1650 + 1.0);
        float _4478 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1665 = ((((1.0 - _1656) * (_1651 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1651 + 1.0))) + _1656) * _1539;
        _1673 = _1506;
        _1674 = _1505;
        _1675 = _1504;
        _1676 = _1516;
        _1677 = _1515;
        _1678 = _1514;
        _1679 = _1526;
        _1680 = _1525;
        _1681 = _1524;
        _1682 = _1539;
        _1683 = _1538;
        _1684 = _1537;
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)));
    }
    else
    {
        _1673 = _1362;
        _1674 = _1362;
        _1675 = _1362;
        _1676 = _1362;
        _1677 = _1362;
        _1678 = _1362;
        _1679 = _1362;
        _1680 = _1362;
        _1681 = _1362;
        _1682 = _1362;
        _1683 = _1362;
        _1684 = _1362;
        _1685 = 0.0;
        _1686 = 0.0;
        _1687 = 0.0;
    }
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1374)) + _1374;
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1375)) + _1375;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1376)) + _1376;
    float _1720 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1698, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1698, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1698, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1697));
    float _1741 = _968 * 0.5;
    float _1742 = _969 * 0.5;
    float _1743 = _970 * 0.5;
    float _1744 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1747 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1750 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1784;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1757 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1361, _1365, _1368, _1371));
        float _1761 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1363, _1366, _1369, _1372));
        float _1765 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1772 = dot(vec4(cbModelParam._m0[39u]), vec4(_1741, _1742, _1743, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1772) ? 0.0 : (isnan(0.0) ? _1772 : max(0.0, _1772))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1795;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1786 = dot(vec4(cbModelParam._m0[40u]), vec4(_1741, _1742, _1743, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1799 = (_1795 * cbModelParam._m0[1u].x) + (_1784 * (1.0 - cbModelParam._m0[1u].x));
    float _1809 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _786);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1809 : min(cbModelParam._m0[25u].z, _1809));
    float _1891;
    float _1893;
    float _1895;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1858 = fma(_1032, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1024)) + cbModelParam._m0[13u].w;
        float _1862 = fma(_1032, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1024)) + cbModelParam._m0[14u].w;
        float _1866 = fma(_1032, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1024)) + cbModelParam._m0[15u].w;
        float _1869 = fma(_970, cbModelParam._m0[13u].z, fma(_969, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _968));
        float _1872 = fma(_970, cbModelParam._m0[14u].z, fma(_969, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _968));
        float _1875 = fma(_970, cbModelParam._m0[15u].z, fma(_969, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _968));
        float _1903;
        if (_1869 > 0.0)
        {
            _1903 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1903 = frontier_phi_17_15_ladder;
        }
        float _2075;
        if (_1872 > 0.0)
        {
            _2075 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2075 = frontier_phi_26_22_ladder;
        }
        float _2370;
        if (_1875 > 0.0)
        {
            _2370 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2370 = frontier_phi_38_33_ladder;
        }
        float _2372 = isnan(_2075) ? _1903 : (isnan(_1903) ? _2075 : min(_1903, _2075));
        float _2373 = isnan(_2370) ? _2372 : (isnan(_2372) ? _2370 : min(_2372, _2370));
        float _2377 = (_2373 * _1869) + _1858;
        float _2378 = (_2373 * _1872) + _1862;
        float _2379 = (_2373 * _1875) + _1866;
        float _2380 = _2373 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2380;
        float _2384 = _2380 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 > _2384) || ((_2378 < _2382) || ((_2377 < _2382) || (_2377 > _2384))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2524 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2379, cbModelParam._m0[9u].z, fma(_2378, cbModelParam._m0[9u].y, _2377 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2379, cbModelParam._m0[10u].z, fma(_2378, cbModelParam._m0[10u].y, _2377 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2379, cbModelParam._m0[11u].z, fma(_2378, cbModelParam._m0[11u].y, _2377 * cbModelParam._m0[11u].x))), _1810);
            frontier_phi_16_38_ladder = _2524.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2524.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2524.x * cbModelParam._m0[1u].y;
        }
        _1891 = frontier_phi_16_38_ladder_2;
        _1893 = frontier_phi_16_38_ladder_1;
        _1895 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_968, _969, _970), _1810);
        _1891 = _1879.x * cbModelParam._m0[1u].y;
        _1893 = _1879.y * cbModelParam._m0[1u].y;
        _1895 = _1879.z * cbModelParam._m0[1u].y;
    }
    float _1899 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _786);
    float _1900 = isnan(_1899) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1899 : min(cbModelParam._m0[25u].w, _1899));
    float _1990;
    float _1992;
    float _1994;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1954 = fma(_1032, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1024)) + cbModelParam._m0[21u].w;
        float _1958 = fma(_1032, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1024)) + cbModelParam._m0[22u].w;
        float _1962 = fma(_1032, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1024)) + cbModelParam._m0[23u].w;
        float _1965 = fma(_970, cbModelParam._m0[21u].z, fma(_969, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _968));
        float _1968 = fma(_970, cbModelParam._m0[22u].z, fma(_969, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _968));
        float _1971 = fma(_970, cbModelParam._m0[23u].z, fma(_969, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _968));
        float _2080;
        if (_1965 > 0.0)
        {
            _2080 = abs((1.0 - _1954) / _1965);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1954 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2080 = frontier_phi_28_24_ladder;
        }
        float _2397;
        if (_1968 > 0.0)
        {
            _2397 = abs((1.0 - _1958) / _1968);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1958 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2397 = frontier_phi_40_35_ladder;
        }
        float _2735;
        if (_1971 > 0.0)
        {
            _2735 = abs((1.0 - _1962) / _1971);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1962 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2735 = frontier_phi_50_47_ladder;
        }
        float _2737 = isnan(_2397) ? _2080 : (isnan(_2080) ? _2397 : min(_2080, _2397));
        float _2738 = isnan(_2735) ? _2737 : (isnan(_2737) ? _2735 : min(_2737, _2735));
        float _2742 = (_2738 * _1965) + _1954;
        float _2743 = (_2738 * _1968) + _1958;
        float _2744 = (_2738 * _1971) + _1962;
        float _2745 = _2738 * 9.9999997473787516355514526367188e-05;
        float _2746 = (-1.0) - _2745;
        float _2748 = _2745 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2744 > _2748) || ((_2744 < _2746) || ((_2743 > _2748) || ((_2743 < _2746) || ((_2742 < _2746) || (_2742 > _2748))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2744, cbModelParam._m0[17u].z, fma(_2743, cbModelParam._m0[17u].y, _2742 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2744, cbModelParam._m0[18u].z, fma(_2743, cbModelParam._m0[18u].y, _2742 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2744, cbModelParam._m0[19u].z, fma(_2743, cbModelParam._m0[19u].y, _2742 * cbModelParam._m0[19u].x))), _1900);
            frontier_phi_25_50_ladder = _2866.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2866.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2866.x * cbModelParam._m0[1u].z;
        }
        _1990 = frontier_phi_25_50_ladder_2;
        _1992 = frontier_phi_25_50_ladder_1;
        _1994 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_968, _969, _970), _1900);
        _1990 = _1974.x * cbModelParam._m0[1u].z;
        _1992 = _1974.y * cbModelParam._m0[1u].z;
        _1994 = _1974.z * cbModelParam._m0[1u].z;
    }
    float _2007 = (((_995 * _944) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1990 - _1891)) + _1891);
    float _2009 = (((_995 * _946) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1992 - _1893)) + _1893);
    float _2011 = (((_995 * _947) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1994 - _1895)) + _1895);
    float _2014 = fma(_2011, cbSceneParam._m0[89u].z, fma(_2009, cbSceneParam._m0[89u].y, _2007 * cbSceneParam._m0[89u].x));
    float _2017 = fma(_2011, cbSceneParam._m0[90u].z, fma(_2009, cbSceneParam._m0[90u].y, _2007 * cbSceneParam._m0[90u].x));
    float _2020 = fma(_2011, cbSceneParam._m0[91u].z, fma(_2009, cbSceneParam._m0[91u].y, _2007 * cbSceneParam._m0[91u].x));
    float _2054 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2066 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2067 = _2054 / _2066;
    float _2068 = _2058 / _2066;
    float _2069 = _2062 / _2066;
    float _2216;
    float _2217;
    float _2218;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2096 = ((uint(_2069 > cbSceneParam._m0[59u].y) + uint(_2069 > cbSceneParam._m0[59u].x)) + uint(_2069 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2097 = _2096 + 43u;
        uint _2105 = _2096 + 44u;
        uint _2113 = _2096 + 45u;
        uint _2121 = _2096 + 46u;
        float _2132 = fma(_2066, cbSceneParam._m0[_2097].w, fma(_2062, cbSceneParam._m0[_2097].z, fma(_2058, cbSceneParam._m0[_2097].y, _2054 * cbSceneParam._m0[_2097].x)));
        float _2136 = fma(_2066, cbSceneParam._m0[_2105].w, fma(_2062, cbSceneParam._m0[_2105].z, fma(_2058, cbSceneParam._m0[_2105].y, _2054 * cbSceneParam._m0[_2105].x)));
        float _2144 = fma(_2066, cbSceneParam._m0[_2121].w, fma(_2062, cbSceneParam._m0[_2121].z, fma(_2058, cbSceneParam._m0[_2121].y, _2054 * cbSceneParam._m0[_2121].x)));
        float _2149 = cbSceneParam._m0[33u].z * _2144;
        float _2151 = cbSceneParam._m0[33u].w * _2144;
        float _2154 = fma(_2066, cbSceneParam._m0[_2113].w, fma(_2062, cbSceneParam._m0[_2113].z, fma(_2058, cbSceneParam._m0[_2113].y, _2054 * cbSceneParam._m0[_2113].x))) / _2144;
        float _2202 = (cbSceneParam._m0[33u].x - sqrt(((_2068 * _2068) + (_2067 * _2067)) + (_2069 * _2069))) * cbSceneParam._m0[33u].y;
        float _4604 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2209 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2149 + _2132) / _2144, (_2151 + _2136) / _2144), _2154), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 + _2132) / _2144, (_2136 - _2149) / _2144), _2154), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2132 - _2149) / _2144, (_2136 - _2151) / _2144), _2154), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2132 - _2151) / _2144, (_2149 + _2136) / _2144), _2154), 0.0)).x), vec4(0.25)));
        _2216 = 1.0 - (_2209 * cbSceneParam._m0[34u].x);
        _2217 = 1.0 - (_2209 * cbSceneParam._m0[34u].y);
        _2218 = 1.0 - (_2209 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2216 = 1.0;
        _2217 = 1.0;
        _2218 = 1.0;
    }
    float _2282;
    float _2284;
    float _2286;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2270 = fma(_2066, cbSceneParam._m0[63u].w, fma(_2062, cbSceneParam._m0[63u].z, fma(_2058, cbSceneParam._m0[63u].y, _2054 * cbSceneParam._m0[63u].x)));
        float _2271 = fma(_2066, cbSceneParam._m0[60u].w, fma(_2062, cbSceneParam._m0[60u].z, fma(_2058, cbSceneParam._m0[60u].y, _2054 * cbSceneParam._m0[60u].x))) / _2270;
        float _2272 = fma(_2066, cbSceneParam._m0[61u].w, fma(_2062, cbSceneParam._m0[61u].z, fma(_2058, cbSceneParam._m0[61u].y, _2054 * cbSceneParam._m0[61u].x))) / _2270;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2271 >= cbSceneParam._m0[64u].x) && (_2272 >= cbSceneParam._m0[64u].y)) && (_2271 <= cbSceneParam._m0[64u].z)) && (_2272 <= cbSceneParam._m0[64u].w))
        {
            float _2410 = fma(_2066, cbSceneParam._m0[62u].w, fma(_2062, cbSceneParam._m0[62u].z, fma(_2058, cbSceneParam._m0[62u].y, _2054 * cbSceneParam._m0[62u].x))) / _2270;
            float _2414 = isnan(cbSceneParam._m0[41u].w) ? _2410 : (isnan(_2410) ? cbSceneParam._m0[41u].w : max(_2410, cbSceneParam._m0[41u].w));
            float _2457 = (cbSceneParam._m0[33u].x - sqrt(((_2068 * _2068) + (_2067 * _2067)) + (_2069 * _2069))) * cbSceneParam._m0[33u].y;
            float _4620 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
            float _2464 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2271, cbSceneParam._m0[33u].w + _2272), _2414), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2271, _2272 - cbSceneParam._m0[33u].z), _2414), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2271 - cbSceneParam._m0[33u].z, _2272 - cbSceneParam._m0[33u].w), _2414), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2271 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2272), _2414), 0.0)).x), vec4(0.25)));
            float _2468 = 1.0 - (_2464 * cbSceneParam._m0[34u].x);
            float _2469 = 1.0 - (_2464 * cbSceneParam._m0[34u].y);
            float _2470 = 1.0 - (_2464 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2470) ? _2218 : (isnan(_2218) ? _2470 : min(_2218, _2470));
            frontier_phi_37_36_ladder_1 = isnan(_2469) ? _2217 : (isnan(_2217) ? _2469 : min(_2217, _2469));
            frontier_phi_37_36_ladder_2 = isnan(_2468) ? _2216 : (isnan(_2216) ? _2468 : min(_2216, _2468));
        }
        else
        {
            frontier_phi_37_36_ladder = _2218;
            frontier_phi_37_36_ladder_1 = _2217;
            frontier_phi_37_36_ladder_2 = _2216;
        }
        _2282 = frontier_phi_37_36_ladder_2;
        _2284 = frontier_phi_37_36_ladder_1;
        _2286 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2282 = _2216;
        _2284 = _2217;
        _2286 = _2218;
    }
    uvec4 _2291 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2293 = _2291.x * 14u;
    uint _2294 = _2293 + 13u;
    float _2301 = _960 + (-1.0);
    float _2306 = (cbLight._m0[_2294].x * _2301) + 1.0;
    float _2307 = (cbLight._m0[_2294].y * _2301) + 1.0;
    float _2308 = (cbLight._m0[_2294].z * _2301) + 1.0;
    float _2309 = (cbLight._m0[_2294].w * _2301) + 1.0;
    uint _2310 = _2293 + 5u;
    float _2316 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
    uint _2320 = _2293 + 4u;
    float _2329 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
    uint _2333 = _2293 | 1u;
    float _2344 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_783, _784, _785));
    float _2347 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_783, _784, _785));
    float _4656 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _4667 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2352 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * 0.3183098733425140380859375;
    float _2354 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * 0.3183098733425140380859375;
    float _2361 = ((cbLight._m0[_2310].x * _2316) * _2354) + (((cbLight._m0[_2320].x * _2282) * _2329) * _2352);
    float _2362 = ((_2316 * cbLight._m0[_2310].y) * _2354) + (((cbLight._m0[_2320].y * _2284) * _2329) * _2352);
    float _2363 = ((_2316 * cbLight._m0[_2310].z) * _2354) + (((cbLight._m0[_2320].z * _2286) * _2329) * _2352);
    uvec4 _2367 = floatBitsToUint(cbLight._m0[_2293 + 12u]);
    bool _2369 = _2367.x == 0u;
    float _2471;
    float _2473;
    float _2475;
    if (_2369)
    {
        _2471 = _2361;
        _2473 = _2362;
        _2475 = _2363;
    }
    else
    {
        uint _2479 = _2293 + 6u;
        float _2495 = (dot(vec3(cbLight._m0[_2293 + 2u].xyz), vec3(_783, _784, _785)) * 0.5) + 0.5;
        float _2496 = _2495 * _2495;
        float _4678 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2497 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2498 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2471 = (((cbLight._m0[_2479].x * 0.3183098733425140380859375) * _2497) * _2498) + _2361;
        _2473 = (((cbLight._m0[_2479].y * 0.3183098733425140380859375) * _2497) * _2498) + _2362;
        _2475 = (((cbLight._m0[_2479].z * 0.3183098733425140380859375) * _2497) * _2498) + _2363;
    }
    bool _2478 = _2367.y == 0u;
    float _2533;
    float _2535;
    float _2537;
    if (_2478)
    {
        _2533 = _2471;
        _2535 = _2473;
        _2537 = _2475;
    }
    else
    {
        uint _2706 = _2293 + 7u;
        float _2722 = (dot(vec3(cbLight._m0[_2293 + 3u].xyz), vec3(_783, _784, _785)) * 0.5) + 0.5;
        float _2723 = _2722 * _2722;
        float _4694 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2724 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2725 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
        _2533 = (((cbLight._m0[_2706].x * 0.3183098733425140380859375) * _2724) * _2725) + _2471;
        _2535 = (((cbLight._m0[_2706].y * 0.3183098733425140380859375) * _2724) * _2725) + _2473;
        _2537 = (((cbLight._m0[_2706].z * 0.3183098733425140380859375) * _2724) * _2725) + _2475;
    }
    uint _2540 = _2293 + 8u;
    float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _786) * 0.949999988079071044921875);
    float _2554 = _2553 * _2553;
    float _2555 = cbLight._m0[_2293].x + _862;
    float _2556 = cbLight._m0[_2293].y + _863;
    float _2557 = cbLight._m0[_2293].z + _864;
    float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
    float _2562 = _2561 * _2555;
    float _2563 = _2561 * _2556;
    float _2564 = _2561 * _2557;
    float _2565 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2293].xyz));
    float _4710 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _4721 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _2569 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2570 = dot(vec3(_783, _784, _785), vec3(_2562, _2563, _2564));
    float _4732 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2573 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2574 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2562, _2563, _2564));
    float _4743 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2578 = _2554 * _2554;
    float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
    float _2590 = exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0);
    float _2591 = 0.959999978542327880859375 - _941;
    float _2593 = 0.959999978542327880859375 - _942;
    float _2594 = 0.959999978542327880859375 - _943;
    float _2601 = 1.0 - _2554;
    float _2612 = (0.5 / (((_2569 * ((_2568 * _2601) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2601) + _2554) * _2568))) * _2568;
    float _4754 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2614 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
    uint _2628 = _2293 + 9u;
    float _2639 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2333].w)) * _786) * 0.949999988079071044921875);
    float _2640 = _2639 * _2639;
    float _2641 = cbLight._m0[_2333].x + _862;
    float _2642 = cbLight._m0[_2333].y + _863;
    float _2643 = cbLight._m0[_2333].z + _864;
    float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
    float _2648 = _2647 * _2641;
    float _2649 = _2647 * _2642;
    float _2650 = _2647 * _2643;
    float _2651 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2333].xyz));
    float _4765 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2654 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
    float _2655 = dot(vec3(_783, _784, _785), vec3(_2648, _2649, _2650));
    float _4776 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2658 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2659 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_2648, _2649, _2650));
    float _4787 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2663 = _2640 * _2640;
    float _2667 = ((_2658 * _2658) * (_2663 + (-1.0))) + 1.0;
    float _2674 = exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0);
    float _2681 = 1.0 - _2640;
    float _2691 = (0.5 / (((_2569 * ((_2654 * _2681) + _2640)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2681) + _2640) * _2654))) * _2654;
    float _4798 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2693 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2663 / ((_2667 * _2667) * 3.141590118408203125));
    float _2703 = (((((_2674 * _2591) + _944) * cbLight._m0[_2628].x) * _2693) * _2316) + ((((cbLight._m0[_2540].x * _2282) * ((_2590 * _2591) + _944)) * _2614) * _2329);
    float _2704 = (((((_2674 * _2593) + _946) * cbLight._m0[_2628].y) * _2693) * _2316) + ((((cbLight._m0[_2540].y * _2284) * ((_2590 * _2593) + _946)) * _2614) * _2329);
    float _2705 = (((((_2674 * _2594) + _947) * cbLight._m0[_2628].z) * _2693) * _2316) + ((((cbLight._m0[_2540].z * _2286) * ((_2590 * _2594) + _947)) * _2614) * _2329);
    float _2761;
    float _2763;
    float _2765;
    if (_2369)
    {
        _2761 = _2703;
        _2763 = _2704;
        _2765 = _2705;
    }
    else
    {
        uint _2767 = _2293 + 2u;
        uint _2771 = _2293 + 10u;
        float _2785 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2767].w)) * _786) * 0.949999988079071044921875);
        float _2786 = _2785 * _2785;
        float _2787 = cbLight._m0[_2767].x + _862;
        float _2788 = cbLight._m0[_2767].y + _863;
        float _2789 = cbLight._m0[_2767].z + _864;
        float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
        float _2794 = _2793 * _2787;
        float _2795 = _2793 * _2788;
        float _2796 = _2793 * _2789;
        float _2797 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2767].xyz));
        float _4809 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2800 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2801 = dot(vec3(_783, _784, _785), vec3(_2794, _2795, _2796));
        float _4820 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2804 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2805 = dot(vec3(cbLight._m0[_2767].xyz), vec3(_2794, _2795, _2796));
        float _4831 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2809 = _2786 * _2786;
        float _2813 = ((_2804 * _2804) * (_2809 + (-1.0))) + 1.0;
        float _2820 = exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0);
        float _2827 = 1.0 - _2786;
        float _2837 = (0.5 / (((_2569 * ((_2800 * _2827) + _2786)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2827) + _2786) * _2800))) * _2800;
        float _4842 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2839 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2809 / ((_2813 * _2813) * 3.141590118408203125));
        float _2840 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2761 = (((((_2820 * _2591) + _944) * cbLight._m0[_2771].x) * _2839) * _2840) + _2703;
        _2763 = (((((_2820 * _2593) + _946) * cbLight._m0[_2771].y) * _2839) * _2840) + _2704;
        _2765 = (((((_2820 * _2594) + _947) * cbLight._m0[_2771].z) * _2839) * _2840) + _2705;
    }
    float _2871;
    float _2873;
    float _2875;
    if (_2478)
    {
        _2871 = _2761;
        _2873 = _2763;
        _2875 = _2765;
    }
    else
    {
        uint _2882 = _2293 + 3u;
        uint _2886 = _2293 + 11u;
        float _2900 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2882].w)) * _786) * 0.949999988079071044921875);
        float _2901 = _2900 * _2900;
        float _2902 = cbLight._m0[_2882].x + _862;
        float _2903 = cbLight._m0[_2882].y + _863;
        float _2904 = cbLight._m0[_2882].z + _864;
        float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
        float _2909 = _2908 * _2902;
        float _2910 = _2908 * _2903;
        float _2911 = _2908 * _2904;
        float _2912 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2882].xyz));
        float _4858 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2915 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
        float _2916 = dot(vec3(_783, _784, _785), vec3(_2909, _2910, _2911));
        float _4869 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2919 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
        float _2920 = dot(vec3(cbLight._m0[_2882].xyz), vec3(_2909, _2910, _2911));
        float _4880 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2924 = _2901 * _2901;
        float _2928 = ((_2919 * _2919) * (_2924 + (-1.0))) + 1.0;
        float _2935 = exp2(log2(1.0 - (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) * 5.0);
        float _2942 = 1.0 - _2901;
        float _2952 = (0.5 / (((_2569 * ((_2915 * _2942) + _2901)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2942) + _2901) * _2915))) * _2915;
        float _4891 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2954 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2924 / ((_2928 * _2928) * 3.141590118408203125));
        float _2955 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
        _2871 = (((((_2935 * _2591) + _944) * cbLight._m0[_2886].x) * _2954) * _2955) + _2761;
        _2873 = (((((_2935 * _2593) + _946) * cbLight._m0[_2886].y) * _2954) * _2955) + _2763;
        _2875 = (((((_2935 * _2594) + _947) * cbLight._m0[_2886].z) * _2954) * _2955) + _2765;
    }
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    float _3029;
    float _3031;
    if (_2291.y == 0u)
    {
        uvec4 _2976 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2977 = _2976.x;
        uint _2988 = uint((float(_2976.y) * floor(float(uint(cbSceneParam._m0[85u].y * _883) / _2977))) + floor(float(uint(cbSceneParam._m0[85u].x * _882) / _2977)));
        float _2998 = (log2(_2069 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2999 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
        uint _3002 = uint(isnan(14.0) ? _2999 : (isnan(_2999) ? 14.0 : min(_2999, 14.0)));
        uvec4 _3007 = texelFetch(g_lightClusterGridBuffer, int(((_3002 << 2u) + (_2988 << 6u)) >> 2u));
        uint _3008 = _3007.x;
        uint _3009 = _2976.z;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        if (((((1u << ((_3009 >> 4u) & 15u)) + 4294967295u) & _3008) == 0u) || ((_3009 & 240u) == 0u))
        {
            _3088 = 0.0;
            _3090 = 0.0;
            _3092 = 0.0;
            _3094 = 0.0;
            _3096 = 0.0;
            _3098 = 0.0;
        }
        else
        {
            float _3089;
            float _3091;
            float _3093;
            float _3095;
            float _3097;
            float _3099;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            uint _3246 = 0u;
            uint _3255;
            bool _3256;
            for (;;)
            {
                _3255 = texelFetch(g_lightClassification, int((((_3002 << 5u) + (_2988 << 9u)) + (_3246 << 2u)) >> 2u)).x;
                _3256 = _3255 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3256)
                {
                    frontier_phi_71_pred = _3245;
                    frontier_phi_71_pred_1 = _3244;
                    frontier_phi_71_pred_2 = _3243;
                    frontier_phi_71_pred_3 = _3242;
                    frontier_phi_71_pred_4 = _3241;
                    frontier_phi_71_pred_5 = _3240;
                }
                else
                {
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    uint _3391;
                    _3385 = _3240;
                    _3386 = _3241;
                    _3387 = _3242;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3245;
                    _3391 = _3255;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    for (;;)
                    {
                        uint _3395 = uint(findLSB(_3391)) + (_3246 << 5u);
                        uint _3392 = (_3391 + 4294967295u) & _3391;
                        uint _3397 = _3395 * 48u;
                        vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 3u)).x));
                        uint _3417 = (_3395 * 48u) + 4u;
                        vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3417)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 3u)).x));
                        uint _3436 = (_3395 * 48u) + 8u;
                        vec3 _3447 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x));
                        float _3451 = _3411.x - _2067;
                        float _3452 = _3411.y - _2068;
                        float _3453 = _3411.z - _2069;
                        float _3454 = dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453));
                        float _3457 = inversesqrt(_3454);
                        float _3458 = _3457 * _3451;
                        float _3459 = _3457 * _3452;
                        float _3460 = _3457 * _3453;
                        float _3461 = dot(vec3(_901, _904, _907), vec3(_3458, _3459, _3460));
                        float _3466 = 1.0 - (_3454 * _3411.w);
                        float _4917 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3467 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                        float _3468 = sqrt(_3454) * _3430.w;
                        float _3471 = 1.39999997615814208984375 / (_3468 + 1.39999997615814208984375);
                        float _3472 = _3471 * _3471;
                        float _3475 = ((1.0 - _3472) * _3461) + _3472;
                        float _3478 = _3468 * _3468;
                        float _3482 = ((isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0))) * _3467) / ((_3478 * 0.699999988079071044921875) + 1.0);
                        float _3486 = (-0.0) - _2067;
                        float _3487 = (-0.0) - _2068;
                        float _3488 = (-0.0) - _2069;
                        float _3492 = inversesqrt(dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488)));
                        float _3493 = _3492 * _3486;
                        float _3494 = _3492 * _3487;
                        float _3495 = _3492 * _3488;
                        float _3502 = exp2(log2(1.0 / ((_3478 * 3.5) + 5.0)) * 0.25);
                        float _3503 = 1.0 - _976;
                        float _3510 = sqrt(1.0 - ((1.0 - (_3503 * _3503)) * (1.0 - (_3502 * _3502))));
                        float _3511 = _3510 * _3510;
                        float _3512 = _3511 * _3511;
                        float _3513 = _3493 + _3458;
                        float _3514 = _3494 + _3459;
                        float _3515 = _3495 + _3460;
                        float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                        float _3523 = dot(vec3(_901, _904, _907), vec3(_3493, _3494, _3495));
                        float _4933 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3526 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3527 = dot(vec3(_901, _904, _907), vec3(_3519 * _3513, _3519 * _3514, _3519 * _3515));
                        float _4944 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3530 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3534 = ((_3530 * _3530) * (_3512 + (-1.0))) + 1.0;
                        float _3535 = _3471 * _3511;
                        float _3536 = _3535 * _3535;
                        float _3539 = ((1.0 - _3536) * _3461) + _3536;
                        float _4955 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3540 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3541 = 1.0 - _3511;
                        float _3551 = (0.5 / (((_3540 * ((_3526 * _3541) + _3511)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3511) * _3526))) * _3540;
                        float _4966 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3562 = (((_3512 * 3.1415927410125732421875) * (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) / ((_3534 * _3534) * ((_3478 * 2.1991131305694580078125) + 3.141590118408203125))) * _3467;
                        _3315 = (_3482 * _3430.x) + _3388;
                        _3316 = (_3482 * _3430.y) + _3389;
                        _3317 = (_3482 * _3430.z) + _3390;
                        _3312 = (_3562 * _3447.x) + _3385;
                        _3313 = (_3562 * _3447.y) + _3386;
                        _3314 = (_3562 * _3447.z) + _3387;
                        if (_3392 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3385 = _3312;
                            _3386 = _3313;
                            _3387 = _3314;
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3317;
                            _3391 = _3392;
                        }
                    }
                    frontier_phi_71_pred = _3317;
                    frontier_phi_71_pred_1 = _3316;
                    frontier_phi_71_pred_2 = _3315;
                    frontier_phi_71_pred_3 = _3314;
                    frontier_phi_71_pred_4 = _3313;
                    frontier_phi_71_pred_5 = _3312;
                }
                _3099 = frontier_phi_71_pred;
                _3097 = frontier_phi_71_pred_1;
                _3095 = frontier_phi_71_pred_2;
                _3093 = frontier_phi_71_pred_3;
                _3091 = frontier_phi_71_pred_4;
                _3089 = frontier_phi_71_pred_5;
                uint _3247 = _3246 + 1u;
                if (_3247 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3240 = _3089;
                    _3241 = _3091;
                    _3242 = _3093;
                    _3243 = _3095;
                    _3244 = _3097;
                    _3245 = _3099;
                    _3246 = _3247;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3088 = _3089;
            _3090 = _3091;
            _3092 = _3093;
            _3094 = _3095;
            _3096 = _3097;
            _3098 = _3099;
        }
        uvec4 _3102 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3103 = _3102.z;
        uint _3105 = (_3103 >> 8u) & 15u;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        if (((4294967295u << _3105) & _3008) == 0u)
        {
            _3208 = _3088;
            _3210 = _3090;
            _3212 = _3092;
            _3214 = _3094;
            _3216 = _3096;
            _3218 = _3098;
        }
        else
        {
            float _3233 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
            float _3234 = _3233 * _2067;
            float _3235 = _3233 * _2068;
            float _3236 = _3233 * _2069;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3105 < ((_3103 >> 12u) & 15u))
            {
                float _3209;
                float _3211;
                float _3213;
                float _3215;
                float _3217;
                float _3219;
                float _3368 = _3088;
                float _3369 = _3090;
                float _3370 = _3092;
                float _3371 = _3094;
                float _3372 = _3096;
                float _3373 = _3098;
                uint _3374 = _3105;
                uint _3383;
                bool _3384;
                for (;;)
                {
                    _3383 = texelFetch(g_lightClassification, int((((_3002 << 5u) + (_2988 << 9u)) + (_3374 << 2u)) >> 2u)).x;
                    _3384 = _3383 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3384)
                    {
                        frontier_phi_82_pred = _3373;
                        frontier_phi_82_pred_1 = _3372;
                        frontier_phi_82_pred_2 = _3371;
                        frontier_phi_82_pred_3 = _3370;
                        frontier_phi_82_pred_4 = _3369;
                        frontier_phi_82_pred_5 = _3368;
                    }
                    else
                    {
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _3874;
                        float _3875;
                        float _3589 = _3368;
                        float _3590 = _3369;
                        float _3591 = _3370;
                        float _3592 = _3371;
                        float _3593 = _3372;
                        float _3594 = _3373;
                        uint _3595 = _3383;
                        uint _3596;
                        vec4 _3621;
                        float _3622;
                        vec4 _3637;
                        vec3 _3649;
                        vec4 _3664;
                        vec4 _3680;
                        float _3726;
                        bool _3727;
                        for (;;)
                        {
                            uint _3606 = ((_3374 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3595));
                            _3596 = (_3595 + 4294967295u) & _3595;
                            uint _3608 = _3606 * 40u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            _3622 = _3621.w;
                            uint _3624 = (_3606 * 40u) + 4u;
                            _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            uint _3639 = (_3606 * 40u) + 8u;
                            _3649 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x));
                            uint _3651 = (_3606 * 40u) + 16u;
                            _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            uint _3667 = (_3606 * 40u) + 20u;
                            _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            uint _3682 = (_3606 * 40u) + 24u;
                            vec4 _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            uint _3701 = (_3606 * 40u) + 28u;
                            vec4 _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            _3726 = fma(_2069, _3714.z, fma(_2068, _3714.y, _3714.x * _2067)) + _3714.w;
                            _3727 = !((fma(_2069, _3695.z, fma(_2068, _3695.y, _3695.x * _2067)) + _3695.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3727)
                            {
                                float _3754 = _3621.x - _2067;
                                float _3755 = _3621.y - _2068;
                                float _3756 = _3621.z - _2069;
                                float _3757 = dot(vec3(_3754, _3755, _3756), vec3(_3754, _3755, _3756));
                                float _3760 = inversesqrt(_3757);
                                float _3761 = _3760 * _3754;
                                float _3762 = _3760 * _3755;
                                float _3763 = _3760 * _3756;
                                float _3767 = 1.0 - (_3757 / (_3622 * _3622));
                                float _4977 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3768 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3772 = sqrt(_3757) * _3637.w;
                                float _3774 = 1.39999997615814208984375 / (_3772 + 1.39999997615814208984375);
                                float _3775 = _3774 * _3774;
                                float _3778 = ((1.0 - _3775) * dot(vec3(_3761, _3762, _3763), vec3(_901, _904, _907))) + _3775;
                                float _3781 = _3772 * _3772;
                                float _3785 = (fma(_2069, _3664.z, fma(_2068, _3664.y, _3664.x * _2067)) + _3664.w) / _3726;
                                float _3786 = (fma(_2069, _3680.z, fma(_2068, _3680.y, _3680.x * _2067)) + _3680.w) / _3726;
                                float _3790 = 1.0 - dot(vec2(_3785, _3786), vec2(_3785, _3786));
                                float _4993 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3791 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3792 = _3791 * (((isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0))) * _3768) / ((_3781 * 0.699999988079071044921875) + 1.0));
                                float _3804 = exp2(log2(1.0 / ((_3781 * 3.5) + 5.0)) * 0.25);
                                float _3805 = 1.0 - _976;
                                float _3812 = sqrt(1.0 - ((1.0 - (_3805 * _3805)) * (1.0 - (_3804 * _3804))));
                                float _3813 = _3812 * _3812;
                                float _3814 = _3813 * _3813;
                                float _3815 = _3761 - _3234;
                                float _3816 = _3762 - _3235;
                                float _3817 = _3763 - _3236;
                                float _3821 = inversesqrt(dot(vec3(_3815, _3816, _3817), vec3(_3815, _3816, _3817)));
                                float _3825 = dot(vec3(_901, _904, _907), vec3((-0.0) - _3234, (-0.0) - _3235, (-0.0) - _3236));
                                float _5004 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3828 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3829 = dot(vec3(_901, _904, _907), vec3(_3821 * _3815, _3821 * _3816, _3821 * _3817));
                                float _5015 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                                float _3832 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3836 = ((_3832 * _3832) * (_3814 + (-1.0))) + 1.0;
                                float _3837 = _3774 * _3813;
                                float _3838 = _3837 * _3837;
                                float _3844 = ((1.0 - _3838) * dot(vec3(_901, _904, _907), vec3(_3761, _3762, _3763))) + _3838;
                                float _5026 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3845 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                                float _3846 = 1.0 - _3813;
                                float _3856 = (0.5 / (((_3845 * ((_3828 * _3846) + _3813)) + 9.9999999392252902907785028219223e-09) + (((_3845 * _3846) + _3813) * _3828))) * _3845;
                                float _5037 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3866 = (_3791 * _3768) * (((_3814 * 3.1415927410125732421875) * (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0)))) / ((_3836 * _3836) * ((_3781 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3792 * _3637.z;
                                frontier_phi_88_pred_1 = _3792 * _3637.y;
                                frontier_phi_88_pred_2 = _3792 * _3637.x;
                                frontier_phi_88_pred_3 = _3866 * _3649.z;
                                frontier_phi_88_pred_4 = _3866 * _3649.y;
                                frontier_phi_88_pred_5 = _3866 * _3649.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3875 = frontier_phi_88_pred;
                            _3874 = frontier_phi_88_pred_1;
                            _3873 = frontier_phi_88_pred_2;
                            _3872 = frontier_phi_88_pred_3;
                            _3871 = frontier_phi_88_pred_4;
                            _3870 = frontier_phi_88_pred_5;
                            _3579 = _3873 + _3592;
                            _3580 = _3874 + _3593;
                            _3581 = _3875 + _3594;
                            _3576 = _3870 + _3589;
                            _3577 = _3871 + _3590;
                            _3578 = _3872 + _3591;
                            if (_3596 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3596;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3581;
                        frontier_phi_82_pred_1 = _3580;
                        frontier_phi_82_pred_2 = _3579;
                        frontier_phi_82_pred_3 = _3578;
                        frontier_phi_82_pred_4 = _3577;
                        frontier_phi_82_pred_5 = _3576;
                    }
                    _3219 = frontier_phi_82_pred;
                    _3217 = frontier_phi_82_pred_1;
                    _3215 = frontier_phi_82_pred_2;
                    _3213 = frontier_phi_82_pred_3;
                    _3211 = frontier_phi_82_pred_4;
                    _3209 = frontier_phi_82_pred_5;
                    uint _3375 = _3374 + 1u;
                    if (_3375 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3368 = _3209;
                        _3369 = _3211;
                        _3370 = _3213;
                        _3371 = _3215;
                        _3372 = _3217;
                        _3373 = _3219;
                        _3374 = _3375;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3215;
                frontier_phi_63_64_ladder_1 = _3219;
                frontier_phi_63_64_ladder_2 = _3217;
                frontier_phi_63_64_ladder_3 = _3213;
                frontier_phi_63_64_ladder_4 = _3211;
                frontier_phi_63_64_ladder_5 = _3209;
            }
            else
            {
                frontier_phi_63_64_ladder = _3094;
                frontier_phi_63_64_ladder_1 = _3098;
                frontier_phi_63_64_ladder_2 = _3096;
                frontier_phi_63_64_ladder_3 = _3092;
                frontier_phi_63_64_ladder_4 = _3090;
                frontier_phi_63_64_ladder_5 = _3088;
            }
            _3208 = frontier_phi_63_64_ladder_5;
            _3210 = frontier_phi_63_64_ladder_4;
            _3212 = frontier_phi_63_64_ladder_3;
            _3214 = frontier_phi_63_64_ladder;
            _3216 = frontier_phi_63_64_ladder_2;
            _3218 = frontier_phi_63_64_ladder_1;
        }
        float _3223 = isnan(1.0) ? _960 : (isnan(_960) ? 1.0 : min(_960, 1.0));
        _3021 = (_3223 * _3214) + _2533;
        _3023 = (_3223 * _3216) + _2535;
        _3025 = (_3223 * _3218) + _2537;
        _3027 = ((_3208 * _944) * _3223) + _2871;
        _3029 = ((_3210 * _946) * _3223) + _2873;
        _3031 = ((_3212 * _947) * _3223) + _2875;
    }
    else
    {
        _3021 = _2533;
        _3023 = _2535;
        _3025 = _2537;
        _3027 = _2871;
        _3029 = _2873;
        _3031 = _2875;
    }
    float _5053 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _5064 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _5075 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _3048 = ((isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_3021 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _960))) + ((_3027 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    float _3049 = ((isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3023 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _960))) + ((_3029 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    float _3050 = ((isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3025 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _960))) + ((_3031 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    uint _3051 = _255 + 6u;
    float _3059 = _882 / cbSceneParam._m0[86u].x;
    float _3060 = _883 / cbSceneParam._m0[86u].y;
    vec4 _3074 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3059, _3060, (log2((isnan(cbSceneParam._m0[77u].w) ? _805 : (isnan(_805) ? cbSceneParam._m0[77u].w : min(_805, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3076 = _3074.x;
    float _3077 = _3074.y;
    float _3078 = _3074.z;
    float _3079 = _3074.w;
    float _3150;
    float _3152;
    float _3154;
    float _3156;
    if (_805 > cbSceneParam._m0[78u].w)
    {
        float _3113 = isnan(_805) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _805 : min(cbSceneParam._m0[80u].w, _805));
        float _3114 = _3113 / _805;
        float _3125 = _3114 * _855;
        float _3126 = _856 * _3114;
        float _3127 = (-0.0) - _3126;
        float _3128 = _3114 * _857;
        float _3130 = (cbSceneParam._m0[77u].w * _3127) / _3113;
        float _3131 = _3130 + cbSceneParam._m0[79u].w;
        float _3132 = cbSceneParam._m0[79u].w - _3126;
        float _3138 = sqrt(((_3125 * _3125) + (_3126 * _3126)) + (_3128 * _3128));
        float _3141 = (1.0 - (cbSceneParam._m0[77u].w / _3113)) * _3138;
        float _3146 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3148 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3325;
        if (abs((_3127 - _3130) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3325 = ((((_3131 > 0.0) ? exp2(_3146 * _3131) : (2.0 - exp2(_3148 * _3131))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3141;
        }
        else
        {
            float _3269 = 1.0 / cbSceneParam._m0[80u].x;
            float _3270 = isnan(_3132) ? _3131 : (isnan(_3131) ? _3132 : max(_3131, _3132));
            float _3271 = isnan(_3132) ? _3131 : (isnan(_3131) ? _3132 : min(_3131, _3132));
            float _3280 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : min(_3270, 0.0));
            float _3281 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : min(_3271, 0.0));
            _3325 = ((abs(_3138 / _3127) * cbSceneParam._m0[80u].y) * ((((_3280 - _3281) * 2.0) - ((exp2(_3146 * (isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0)))) - exp2(_3146 * (isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))))) * _3269)) - ((exp2(_3148 * _3280) - exp2(_3148 * _3281)) * _3269))) + (_3141 * cbSceneParam._m0[80u].z);
        }
        vec4 _3327 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3059, _3060, 1.0), 0.0);
        float _3336 = exp2((_3325 * (-1.44269502162933349609375)) * (1.0 - _3327.w));
        float _3337 = log2(_3336);
        float _3353 = log2(_3079);
        _3150 = (exp2(_3353 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].x)) * _3327.x) / cbSceneParam._m0[78u].x)) + _3076;
        _3152 = (exp2(_3353 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].y)) * _3327.y) / cbSceneParam._m0[78u].y)) + _3077;
        _3154 = (exp2(_3353 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].z)) * _3327.z) / cbSceneParam._m0[78u].z)) + _3078;
        _3156 = _3336 * _3079;
    }
    else
    {
        _3150 = _3076;
        _3152 = _3077;
        _3154 = _3078;
        _3156 = _3079;
    }
    bool _3363;
    vec4 _3166;
    vec4 _3188;
    float _3190;
    float _3194;
    float _3195;
    float _3196;
    float _3197;
    bool _3207;
    for (;;)
    {
        _3166 = cbMatDynParam._m0[0u];
        float _3168 = roundEven(_3166.y);
        bool _3169 = _3168 == 3.0;
        float _3170 = log2(_3156);
        float _3177 = exp2(_3170 * cbSceneParam._m0[78u].x) * _3048;
        float _3178 = exp2(_3170 * cbSceneParam._m0[78u].y) * _3049;
        float _3179 = exp2(_3170 * cbSceneParam._m0[78u].z) * _3050;
        float _3186 = _871 + (-0.5);
        _3188 = cbMtdParam._m0[1u];
        _3190 = _3188.y * _3186;
        float _3193 = (_3168 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3194 = _3193 * (_3169 ? _3177 : (_3177 + (cbSceneParam._m0[72u].w * _3150)));
        _3195 = _3193 * (_3169 ? _3178 : (_3178 + (cbSceneParam._m0[72u].w * _3152)));
        _3196 = _3193 * (_3169 ? _3179 : (_3179 + (cbSceneParam._m0[72u].w * _3154)));
        _3197 = _3186 * 0.999000012874603271484375;
        _3207 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3207)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _3197) < 0.5)
            {
                _3363 = true;
                break;
            }
        }
        uint _3304 = _920 + uint(_3166.w);
        if ((cbInstanceData._m0[_3304].w < 1.0) && ((cbInstanceData._m0[_3304].w + _3197) < 0.5))
        {
            _3363 = true;
            break;
        }
        if ((_3190 + 1.0) < _3188.x)
        {
            _3363 = true;
            break;
        }
        _3363 = false;
        break;
    }
    float _3567;
    if (_3363)
    {
        discard_state = true;
        _3567 = 0.0;
    }
    else
    {
        _3567 = cbInstanceData._m0[_3051].w;
    }
    SV_Target.x = _3194;
    SV_Target.y = _3195;
    SV_Target.z = _3196;
    SV_Target.w = _3567;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3051].w;
    discard_exit();
}


