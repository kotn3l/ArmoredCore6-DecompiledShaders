#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1382;
float _4046;
float _4047;
float _4048;
float _4049;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4058 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4069 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4080 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4091 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) + _453;
    vec4 _475 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _500 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _519 = _517.x;
    float _520 = _517.y;
    float _521 = _517.z;
    float _530 = ((_500.z - _521) * _434) + _521;
    float _533 = ((((_500.x - _519) * _434) + _519) * 2.0) + (-1.0);
    float _534 = ((((_500.y - _520) * _434) + _520) * 2.0) + (-1.0);
    float _535 = dot(vec2(_533, _534), vec2(_533, _534));
    float _4102 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _540 = sqrt(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))));
    float _545 = _533 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_475.x * 2.0) + (-1.0)));
    float _546 = _534 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_475.y * 2.0) + (-1.0)));
    vec4 _559 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _573 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _575 = _573.x;
    float _576 = 1.0 - _575;
    float _602 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_575 - _576) * cbMtdParam._m0[24u].w) + _576) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4113 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _611 = ((((cbMtdParam._m0[10u].x - _460) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _603) + _460;
    float _612 = ((((cbMtdParam._m0[10u].y - _461) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _603) + _461;
    float _613 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _462)) * _603) + _462;
    vec4 _625 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _639 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _641 = _639.x;
    float _659 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _641) * _434) + _641;
    float _663 = ((_625.x - _659) * cbMtdParam._m0[19u].z) + _659;
    float _665 = _663 - (_663 * _603);
    float _670 = (((_475.z - _530) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _530;
    float _674 = ((cbMtdParam._m0[23u].y - _670) * _603) + _670;
    vec4 _693 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _695 = _693.x;
    float _696 = _693.y;
    float _700 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_252, _253, _254, 0.0));
    vec4 _715 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _302) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _303) + cbTextureTilingScale._m0[18u].w));
    float _717 = _715.x;
    float _722 = fract(_715.w + cbPerFrame._m0[22u].x);
    float _724 = (1.0 - _722) * _717;
    float _729 = ((_722 + (-1.0)) + _717) * 9.0;
    float _731 = ((_717 + (-1.0)) + _722) * 9.0;
    float _732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _733 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _747 = (_724 * ((_715.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _732 : (isnan(_732) ? 3.0 : min(_732, 3.0))) * 3.1415927410125732421875);
    float _749 = (_724 * ((_715.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _733 : (isnan(_733) ? 3.0 : min(_733, 3.0))) * 3.1415927410125732421875);
    float _753 = inversesqrt(dot(vec3(_747, _749, 1.0), vec3(_747, _749, 1.0)));
    float _769 = (((((0.5 - _695) + ((_747 * 0.5) * _753)) * _700) + _695) * 2.0) + (-1.0);
    float _770 = (((((0.5 - _696) + ((_753 * 0.5) * _749)) * _700) + _696) * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _4144 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _787 = ((((cbMtdParam._m0[22u].z * _545) - _545) + _769) * _603) + _545;
    float _788 = ((((cbMtdParam._m0[22u].z * _546) - _546) + _770) * _603) + _546;
    float _789 = (_603 * (sqrt(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) - _540)) + _540;
    float _791 = cbMtdParam._m0[22u].x + _559.w;
    float _794 = fma(_789, _252, fma(_788, _258 * TANGENT.x, (_244 * _236) * _787));
    float _797 = fma(_789, _253, fma(_788, _258 * TANGENT.y, (_244 * _237) * _787));
    float _800 = fma(_789, _254, fma(_788, _258 * TANGENT.z, (_244 * _238) * _787));
    float _804 = inversesqrt(dot(vec3(_794, _797, _800), vec3(_794, _797, _800)));
    float _805 = _804 * _794;
    float _806 = _804 * _797;
    float _807 = _804 * _800;
    float _4155 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _808 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4177 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4188 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4199 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4210 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _813 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _827 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _877 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _867);
    float _878 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _867);
    float _879 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _867);
    float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
    float _884 = _877 * _883;
    float _885 = _878 * _883;
    float _886 = _879 * _883;
    vec4 _891 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _893 = _891.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1064 = sqrt(((_877 * _877) + (_878 * _878)) + (_879 * _879));
        float _1070 = (cbMatDynParam._m0[5u].x * _1064) + cbMatDynParam._m0[5u].y;
        float _4221 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1075 = (cbMatDynParam._m0[5u].z * _1064) + cbMatDynParam._m0[5u].w;
        float _4232 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) - _1071)) + _1071) < ((_893 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _904 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _905 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _923 = fma(_807, cbSceneParam._m0[5u].z, fma(_806, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _805));
    float _926 = fma(_807, cbSceneParam._m0[6u].z, fma(_806, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _805));
    float _929 = fma(_807, cbSceneParam._m0[7u].z, fma(_806, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _805));
    uint _942 = _283 + 9u;
    uint _943 = _942 + uint(cbMatDynParam._m0[0u].w);
    float _949 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * cbInstanceData._m0[_943].x;
    float _950 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * cbInstanceData._m0[_943].y;
    float _951 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * cbInstanceData._m0[_943].z;
    float _4243 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _4254 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _4265 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _955 = 1.0 - _813;
    float _956 = _952 * _955;
    float _957 = _953 * _955;
    float _958 = _954 * _955;
    float _963 = (_952 + (-0.039999999105930328369140625)) * _813;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _813;
    float _965 = (_954 + (-0.039999999105930328369140625)) * _813;
    float _966 = _963 + 0.039999999105930328369140625;
    float _968 = _964 + 0.039999999105930328369140625;
    float _969 = _965 + 0.039999999105930328369140625;
    vec4 _978 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _904, cbSceneParam._m0[86u].y * _905));
    float _982 = ((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * TEXCOORD_5.w) * _978.x;
    float _983 = dot(vec3(_805, _806, _807), vec3(_884, _885, _886));
    float _986 = _983 * 2.0;
    float _990 = (_986 * _805) - _884;
    float _991 = (_986 * _806) - _885;
    float _992 = (_986 * _807) - _886;
    float _996 = abs(dot(vec3(_884, _885, _886), vec3(_805, _806, _807)));
    float _4276 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _998 = sqrt(_808);
    float _1010 = exp2((_998 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_998 * 3.0));
    float _1016 = (1.0 - _1010) * ((_998 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1017 = _1010 * _998;
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1381;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1107 = fma(_1053, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1045));
        float _1111 = fma(_1053, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1045));
        float _1115 = fma(_1053, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1045));
        float _1139 = _1045 + _805;
        float _1140 = _1049 + _806;
        float _1141 = _1053 + _807;
        float _1151 = fma(_1141, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139)) - _1107;
        float _1152 = fma(_1141, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139)) - _1111;
        float _1153 = fma(_1141, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139)) - _1115;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1107 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1111 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[34u].z) + ((((((_1115 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1209 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1175.x + (-0.5));
        float _1211 = _1209 * (_1175.y + (-0.5));
        float _1212 = _1209 * (_1175.z + (-0.5));
        float _1219 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1182.x + (-0.5));
        float _1221 = _1219 * (_1182.y + (-0.5));
        float _1222 = _1219 * (_1182.z + (-0.5));
        float _1229 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1189.x + (-0.5));
        float _1231 = _1229 * (_1189.y + (-0.5));
        float _1232 = _1229 * (_1189.z + (-0.5));
        float _1239 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1196.x + (-0.5));
        float _1241 = _1239 * (_1196.y + (-0.5));
        float _1242 = _1239 * (_1196.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1263 = (dot(vec3(_805, _806, _807), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1273 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4324 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1275 + 1.0))) + _1280) * _1243;
        float _1290 = _1211 * 0.5;
        float _1291 = _1221 * 0.5;
        float _1292 = _1231 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_805, _806, _807), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4357 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1317 + 1.0))) + _1322) * _1244;
        float _1332 = _1212 * 0.5;
        float _1333 = _1222 * 0.5;
        float _1334 = _1232 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_805, _806, _807), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4390 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1359 + 1.0))) + _1364) * _1245;
        _1381 = _1212;
        _1383 = _1211;
        _1384 = _1210;
        _1385 = _1222;
        _1386 = _1221;
        _1387 = _1220;
        _1388 = _1232;
        _1389 = _1231;
        _1390 = _1230;
        _1391 = _1245;
        _1392 = _1244;
        _1393 = _1243;
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1382;
        _1383 = _1382;
        _1384 = _1382;
        _1385 = _1382;
        _1386 = _1382;
        _1387 = _1382;
        _1388 = _1382;
        _1389 = _1382;
        _1390 = _1382;
        _1391 = _1382;
        _1392 = _1382;
        _1393 = _1382;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1424 = fma(_1053, cbModelParam._m0[30u].z, fma(_1049, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1045));
        float _1428 = fma(_1053, cbModelParam._m0[31u].z, fma(_1049, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1045));
        float _1432 = fma(_1053, cbModelParam._m0[32u].z, fma(_1049, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1045));
        float _1455 = _1045 + _805;
        float _1456 = _1049 + _806;
        float _1457 = _1053 + _807;
        float _1467 = fma(_1457, cbModelParam._m0[30u].z, fma(_1456, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1455)) - _1424;
        float _1468 = fma(_1457, cbModelParam._m0[31u].z, fma(_1456, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1455)) - _1428;
        float _1469 = fma(_1457, cbModelParam._m0[32u].z, fma(_1456, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1455)) - _1432;
        float _1473 = inversesqrt(dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469)));
        float _1486 = ((_1473 * _1467) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1424 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1473 * _1468) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1428 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1488 = ((_1473 * _1469) / cbModelParam._m0[35u].z) + ((((((_1432 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        float _1523 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1490.x + (-0.5));
        float _1525 = _1523 * (_1490.y + (-0.5));
        float _1526 = _1523 * (_1490.z + (-0.5));
        float _1533 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1497.x + (-0.5));
        float _1535 = _1533 * (_1497.y + (-0.5));
        float _1536 = _1533 * (_1497.z + (-0.5));
        float _1543 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1504.x + (-0.5));
        float _1545 = _1543 * (_1504.y + (-0.5));
        float _1546 = _1543 * (_1504.z + (-0.5));
        float _1553 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1511.x + (-0.5));
        float _1555 = _1553 * (_1511.y + (-0.5));
        float _1556 = _1553 * (_1511.z + (-0.5));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = _1524 * 0.5;
        float _1561 = _1534 * 0.5;
        float _1562 = _1544 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_805, _806, _807), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _4453 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1587 + 1.0))) + _1592) * _1557;
        float _1602 = _1525 * 0.5;
        float _1603 = _1535 * 0.5;
        float _1604 = _1545 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_805, _806, _807), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4464 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4475 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4486 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_1629 + 1.0))) + _1634) * _1558;
        float _1644 = _1526 * 0.5;
        float _1645 = _1536 * 0.5;
        float _1646 = _1546 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_805, _806, _807), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4497 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4508 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4519 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_1671 + 1.0))) + _1676) * _1559;
        _1693 = _1526;
        _1694 = _1525;
        _1695 = _1524;
        _1696 = _1536;
        _1697 = _1535;
        _1698 = _1534;
        _1699 = _1546;
        _1700 = _1545;
        _1701 = _1544;
        _1702 = _1559;
        _1703 = _1558;
        _1704 = _1557;
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
    }
    else
    {
        _1693 = _1382;
        _1694 = _1382;
        _1695 = _1382;
        _1696 = _1382;
        _1697 = _1382;
        _1698 = _1382;
        _1699 = _1382;
        _1700 = _1382;
        _1701 = _1382;
        _1702 = _1382;
        _1703 = _1382;
        _1704 = _1382;
        _1705 = 0.0;
        _1706 = 0.0;
        _1707 = 0.0;
    }
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1394)) + _1394;
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1395)) + _1395;
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1396)) + _1396;
    float _1740 = fma(_1719, cbSceneParam._m0[89u].z, fma(_1718, cbSceneParam._m0[89u].y, _1717 * cbSceneParam._m0[89u].x));
    float _1743 = fma(_1719, cbSceneParam._m0[90u].z, fma(_1718, cbSceneParam._m0[90u].y, _1717 * cbSceneParam._m0[90u].x));
    float _1746 = fma(_1719, cbSceneParam._m0[91u].z, fma(_1718, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1717));
    float _1761 = _990 * 0.5;
    float _1762 = _991 * 0.5;
    float _1763 = _992 * 0.5;
    float _1764 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1767 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1770 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1804;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1777 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1381, _1385, _1388, _1391));
        float _1781 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1785 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1792 = dot(vec4(cbModelParam._m0[39u]), vec4(_1761, _1762, _1763, 1.0));
        _1804 = dot(vec3(isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1804 = 1.0;
    }
    float _1815;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1806 = dot(vec4(cbModelParam._m0[40u]), vec4(_1761, _1762, _1763, 1.0));
        _1815 = dot(vec3(isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1806) ? 0.0 : (isnan(0.0) ? _1806 : max(0.0, _1806))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1815 = 1.0;
    }
    float _1819 = (_1815 * cbModelParam._m0[1u].x) + (_1804 * (1.0 - cbModelParam._m0[1u].x));
    float _1829 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _808);
    float _1830 = isnan(_1829) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1829 : min(cbModelParam._m0[25u].z, _1829));
    float _1912;
    float _1914;
    float _1916;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1879 = fma(_1053, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1045)) + cbModelParam._m0[13u].w;
        float _1883 = fma(_1053, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1045)) + cbModelParam._m0[14u].w;
        float _1887 = fma(_1053, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1045)) + cbModelParam._m0[15u].w;
        float _1890 = fma(_992, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _990));
        float _1893 = fma(_992, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _990));
        float _1896 = fma(_992, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _990));
        float _1924;
        if (_1890 > 0.0)
        {
            _1924 = abs((1.0 - _1879) / _1890);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1879 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1924 = frontier_phi_17_15_ladder;
        }
        float _2096;
        if (_1893 > 0.0)
        {
            _2096 = abs((1.0 - _1883) / _1893);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1883 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2096 = frontier_phi_26_22_ladder;
        }
        float _2391;
        if (_1896 > 0.0)
        {
            _2391 = abs((1.0 - _1887) / _1896);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1887 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2391 = frontier_phi_38_33_ladder;
        }
        float _2393 = isnan(_2096) ? _1924 : (isnan(_1924) ? _2096 : min(_1924, _2096));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1890) + _1879;
        float _2399 = (_2394 * _1893) + _1883;
        float _2400 = (_2394 * _1896) + _1887;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2403 = (-1.0) - _2401;
        float _2405 = _2401 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2400 > _2405) || ((_2400 < _2403) || ((_2399 > _2405) || ((_2399 < _2403) || ((_2398 < _2403) || (_2398 > _2405))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2545 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2400, cbModelParam._m0[9u].z, fma(_2399, cbModelParam._m0[9u].y, _2398 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2400, cbModelParam._m0[10u].z, fma(_2399, cbModelParam._m0[10u].y, _2398 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2400, cbModelParam._m0[11u].z, fma(_2399, cbModelParam._m0[11u].y, _2398 * cbModelParam._m0[11u].x))), _1830);
            frontier_phi_16_38_ladder = _2545.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2545.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2545.x * cbModelParam._m0[1u].y;
        }
        _1912 = frontier_phi_16_38_ladder_2;
        _1914 = frontier_phi_16_38_ladder_1;
        _1916 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_990, _991, _992), _1830);
        _1912 = _1900.x * cbModelParam._m0[1u].y;
        _1914 = _1900.y * cbModelParam._m0[1u].y;
        _1916 = _1900.z * cbModelParam._m0[1u].y;
    }
    float _1920 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _808);
    float _1921 = isnan(_1920) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1920 : min(cbModelParam._m0[25u].w, _1920));
    float _2011;
    float _2013;
    float _2015;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1975 = fma(_1053, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1045)) + cbModelParam._m0[21u].w;
        float _1979 = fma(_1053, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1045)) + cbModelParam._m0[22u].w;
        float _1983 = fma(_1053, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1045)) + cbModelParam._m0[23u].w;
        float _1986 = fma(_992, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _990));
        float _1989 = fma(_992, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _990));
        float _1992 = fma(_992, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _990));
        float _2101;
        if (_1986 > 0.0)
        {
            _2101 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2101 = frontier_phi_28_24_ladder;
        }
        float _2418;
        if (_1989 > 0.0)
        {
            _2418 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2418 = frontier_phi_40_35_ladder;
        }
        float _2756;
        if (_1992 > 0.0)
        {
            _2756 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2756 = frontier_phi_50_47_ladder;
        }
        float _2758 = isnan(_2418) ? _2101 : (isnan(_2101) ? _2418 : min(_2101, _2418));
        float _2759 = isnan(_2756) ? _2758 : (isnan(_2758) ? _2756 : min(_2758, _2756));
        float _2763 = (_2759 * _1986) + _1975;
        float _2764 = (_2759 * _1989) + _1979;
        float _2765 = (_2759 * _1992) + _1983;
        float _2766 = _2759 * 9.9999997473787516355514526367188e-05;
        float _2767 = (-1.0) - _2766;
        float _2769 = _2766 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2765 > _2769) || ((_2765 < _2767) || ((_2764 > _2769) || ((_2764 < _2767) || ((_2763 < _2767) || (_2763 > _2769))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2887 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2765, cbModelParam._m0[17u].z, fma(_2764, cbModelParam._m0[17u].y, _2763 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2765, cbModelParam._m0[18u].z, fma(_2764, cbModelParam._m0[18u].y, _2763 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2765, cbModelParam._m0[19u].z, fma(_2764, cbModelParam._m0[19u].y, _2763 * cbModelParam._m0[19u].x))), _1921);
            frontier_phi_25_50_ladder = _2887.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2887.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2887.x * cbModelParam._m0[1u].z;
        }
        _2011 = frontier_phi_25_50_ladder_2;
        _2013 = frontier_phi_25_50_ladder_1;
        _2015 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1995 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_990, _991, _992), _1921);
        _2011 = _1995.x * cbModelParam._m0[1u].z;
        _2013 = _1995.y * cbModelParam._m0[1u].z;
        _2015 = _1995.z * cbModelParam._m0[1u].z;
    }
    float _2028 = (((_1016 * _966) + _1017) * _982) * ((cbModelParam._m0[1u].w * (_2011 - _1912)) + _1912);
    float _2030 = (((_1016 * _968) + _1017) * _982) * ((cbModelParam._m0[1u].w * (_2013 - _1914)) + _1914);
    float _2032 = (((_1016 * _969) + _1017) * _982) * ((cbModelParam._m0[1u].w * (_2015 - _1916)) + _1916);
    float _2035 = fma(_2032, cbSceneParam._m0[89u].z, fma(_2030, cbSceneParam._m0[89u].y, _2028 * cbSceneParam._m0[89u].x));
    float _2038 = fma(_2032, cbSceneParam._m0[90u].z, fma(_2030, cbSceneParam._m0[90u].y, _2028 * cbSceneParam._m0[90u].x));
    float _2041 = fma(_2032, cbSceneParam._m0[91u].z, fma(_2030, cbSceneParam._m0[91u].y, _2028 * cbSceneParam._m0[91u].x));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2079 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2083 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2087 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2088 = _2075 / _2087;
    float _2089 = _2079 / _2087;
    float _2090 = _2083 / _2087;
    float _2237;
    float _2238;
    float _2239;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2117 = ((uint(_2090 > cbSceneParam._m0[59u].y) + uint(_2090 > cbSceneParam._m0[59u].x)) + uint(_2090 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2118 = _2117 + 43u;
        uint _2126 = _2117 + 44u;
        uint _2134 = _2117 + 45u;
        uint _2142 = _2117 + 46u;
        float _2153 = fma(_2087, cbSceneParam._m0[_2118].w, fma(_2083, cbSceneParam._m0[_2118].z, fma(_2079, cbSceneParam._m0[_2118].y, _2075 * cbSceneParam._m0[_2118].x)));
        float _2157 = fma(_2087, cbSceneParam._m0[_2126].w, fma(_2083, cbSceneParam._m0[_2126].z, fma(_2079, cbSceneParam._m0[_2126].y, _2075 * cbSceneParam._m0[_2126].x)));
        float _2165 = fma(_2087, cbSceneParam._m0[_2142].w, fma(_2083, cbSceneParam._m0[_2142].z, fma(_2079, cbSceneParam._m0[_2142].y, _2075 * cbSceneParam._m0[_2142].x)));
        float _2170 = cbSceneParam._m0[33u].z * _2165;
        float _2172 = cbSceneParam._m0[33u].w * _2165;
        float _2175 = fma(_2087, cbSceneParam._m0[_2134].w, fma(_2083, cbSceneParam._m0[_2134].z, fma(_2079, cbSceneParam._m0[_2134].y, _2075 * cbSceneParam._m0[_2134].x))) / _2165;
        float _2223 = (cbSceneParam._m0[33u].x - sqrt(((_2089 * _2089) + (_2088 * _2088)) + (_2090 * _2090))) * cbSceneParam._m0[33u].y;
        float _4645 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2230 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 + _2153) / _2165, (_2172 + _2157) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2172 + _2153) / _2165, (_2157 - _2170) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2153 - _2170) / _2165, (_2157 - _2172) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2153 - _2172) / _2165, (_2170 + _2157) / _2165), _2175), 0.0)).x), vec4(0.25)));
        _2237 = 1.0 - (_2230 * cbSceneParam._m0[34u].x);
        _2238 = 1.0 - (_2230 * cbSceneParam._m0[34u].y);
        _2239 = 1.0 - (_2230 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2237 = 1.0;
        _2238 = 1.0;
        _2239 = 1.0;
    }
    float _2303;
    float _2305;
    float _2307;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2291 = fma(_2087, cbSceneParam._m0[63u].w, fma(_2083, cbSceneParam._m0[63u].z, fma(_2079, cbSceneParam._m0[63u].y, _2075 * cbSceneParam._m0[63u].x)));
        float _2292 = fma(_2087, cbSceneParam._m0[60u].w, fma(_2083, cbSceneParam._m0[60u].z, fma(_2079, cbSceneParam._m0[60u].y, _2075 * cbSceneParam._m0[60u].x))) / _2291;
        float _2293 = fma(_2087, cbSceneParam._m0[61u].w, fma(_2083, cbSceneParam._m0[61u].z, fma(_2079, cbSceneParam._m0[61u].y, _2075 * cbSceneParam._m0[61u].x))) / _2291;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2292 >= cbSceneParam._m0[64u].x) && (_2293 >= cbSceneParam._m0[64u].y)) && (_2292 <= cbSceneParam._m0[64u].z)) && (_2293 <= cbSceneParam._m0[64u].w))
        {
            float _2431 = fma(_2087, cbSceneParam._m0[62u].w, fma(_2083, cbSceneParam._m0[62u].z, fma(_2079, cbSceneParam._m0[62u].y, _2075 * cbSceneParam._m0[62u].x))) / _2291;
            float _2435 = isnan(cbSceneParam._m0[41u].w) ? _2431 : (isnan(_2431) ? cbSceneParam._m0[41u].w : max(_2431, cbSceneParam._m0[41u].w));
            float _2478 = (cbSceneParam._m0[33u].x - sqrt(((_2089 * _2089) + (_2088 * _2088)) + (_2090 * _2090))) * cbSceneParam._m0[33u].y;
            float _4661 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
            float _2485 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2292, cbSceneParam._m0[33u].w + _2293), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2292, _2293 - cbSceneParam._m0[33u].z), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2292 - cbSceneParam._m0[33u].z, _2293 - cbSceneParam._m0[33u].w), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2292 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2293), _2435), 0.0)).x), vec4(0.25)));
            float _2489 = 1.0 - (_2485 * cbSceneParam._m0[34u].x);
            float _2490 = 1.0 - (_2485 * cbSceneParam._m0[34u].y);
            float _2491 = 1.0 - (_2485 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2491) ? _2239 : (isnan(_2239) ? _2491 : min(_2239, _2491));
            frontier_phi_37_36_ladder_1 = isnan(_2490) ? _2238 : (isnan(_2238) ? _2490 : min(_2238, _2490));
            frontier_phi_37_36_ladder_2 = isnan(_2489) ? _2237 : (isnan(_2237) ? _2489 : min(_2237, _2489));
        }
        else
        {
            frontier_phi_37_36_ladder = _2239;
            frontier_phi_37_36_ladder_1 = _2238;
            frontier_phi_37_36_ladder_2 = _2237;
        }
        _2303 = frontier_phi_37_36_ladder_2;
        _2305 = frontier_phi_37_36_ladder_1;
        _2307 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2303 = _2237;
        _2305 = _2238;
        _2307 = _2239;
    }
    uvec4 _2312 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2314 = _2312.x * 14u;
    uint _2315 = _2314 + 13u;
    float _2322 = _982 + (-1.0);
    float _2327 = (cbLight._m0[_2315].x * _2322) + 1.0;
    float _2328 = (cbLight._m0[_2315].y * _2322) + 1.0;
    float _2329 = (cbLight._m0[_2315].z * _2322) + 1.0;
    float _2330 = (cbLight._m0[_2315].w * _2322) + 1.0;
    uint _2331 = _2314 + 5u;
    float _2337 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
    uint _2341 = _2314 + 4u;
    float _2350 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
    uint _2354 = _2314 | 1u;
    float _2365 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_805, _806, _807));
    float _2368 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_805, _806, _807));
    float _4697 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _4708 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2373 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * 0.3183098733425140380859375;
    float _2375 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * 0.3183098733425140380859375;
    float _2382 = ((cbLight._m0[_2331].x * _2337) * _2375) + (((cbLight._m0[_2341].x * _2303) * _2350) * _2373);
    float _2383 = ((_2337 * cbLight._m0[_2331].y) * _2375) + (((cbLight._m0[_2341].y * _2305) * _2350) * _2373);
    float _2384 = ((_2337 * cbLight._m0[_2331].z) * _2375) + (((cbLight._m0[_2341].z * _2307) * _2350) * _2373);
    uvec4 _2388 = floatBitsToUint(cbLight._m0[_2314 + 12u]);
    bool _2390 = _2388.x == 0u;
    float _2492;
    float _2494;
    float _2496;
    if (_2390)
    {
        _2492 = _2382;
        _2494 = _2383;
        _2496 = _2384;
    }
    else
    {
        uint _2500 = _2314 + 6u;
        float _2516 = (dot(vec3(cbLight._m0[_2314 + 2u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2517 = _2516 * _2516;
        float _4719 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2518 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2519 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2492 = (((cbLight._m0[_2500].x * 0.3183098733425140380859375) * _2518) * _2519) + _2382;
        _2494 = (((cbLight._m0[_2500].y * 0.3183098733425140380859375) * _2518) * _2519) + _2383;
        _2496 = (((cbLight._m0[_2500].z * 0.3183098733425140380859375) * _2518) * _2519) + _2384;
    }
    bool _2499 = _2388.y == 0u;
    float _2554;
    float _2556;
    float _2558;
    if (_2499)
    {
        _2554 = _2492;
        _2556 = _2494;
        _2558 = _2496;
    }
    else
    {
        uint _2727 = _2314 + 7u;
        float _2743 = (dot(vec3(cbLight._m0[_2314 + 3u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2744 = _2743 * _2743;
        float _4735 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2745 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2746 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2554 = (((cbLight._m0[_2727].x * 0.3183098733425140380859375) * _2745) * _2746) + _2492;
        _2556 = (((cbLight._m0[_2727].y * 0.3183098733425140380859375) * _2745) * _2746) + _2494;
        _2558 = (((cbLight._m0[_2727].z * 0.3183098733425140380859375) * _2745) * _2746) + _2496;
    }
    uint _2561 = _2314 + 8u;
    float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _808) * 0.949999988079071044921875);
    float _2575 = _2574 * _2574;
    float _2576 = cbLight._m0[_2314].x + _884;
    float _2577 = cbLight._m0[_2314].y + _885;
    float _2578 = cbLight._m0[_2314].z + _886;
    float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
    float _2583 = _2582 * _2576;
    float _2584 = _2582 * _2577;
    float _2585 = _2582 * _2578;
    float _2586 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2314].xyz));
    float _4751 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _4762 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _2590 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2591 = dot(vec3(_805, _806, _807), vec3(_2583, _2584, _2585));
    float _4773 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2594 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _2595 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2583, _2584, _2585));
    float _4784 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2599 = _2575 * _2575;
    float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
    float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
    float _2612 = 0.959999978542327880859375 - _963;
    float _2614 = 0.959999978542327880859375 - _964;
    float _2615 = 0.959999978542327880859375 - _965;
    float _2622 = 1.0 - _2575;
    float _2633 = (0.5 / (((_2590 * ((_2589 * _2622) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2622) + _2575) * _2589))) * _2589;
    float _4795 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2635 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
    uint _2649 = _2314 + 9u;
    float _2660 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _808) * 0.949999988079071044921875);
    float _2661 = _2660 * _2660;
    float _2662 = cbLight._m0[_2354].x + _884;
    float _2663 = cbLight._m0[_2354].y + _885;
    float _2664 = cbLight._m0[_2354].z + _886;
    float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
    float _2669 = _2668 * _2662;
    float _2670 = _2668 * _2663;
    float _2671 = _2668 * _2664;
    float _2672 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2354].xyz));
    float _4806 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2675 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
    float _2676 = dot(vec3(_805, _806, _807), vec3(_2669, _2670, _2671));
    float _4817 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2679 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
    float _2680 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2669, _2670, _2671));
    float _4828 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2684 = _2661 * _2661;
    float _2688 = ((_2679 * _2679) * (_2684 + (-1.0))) + 1.0;
    float _2695 = exp2(log2(1.0 - (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) * 5.0);
    float _2702 = 1.0 - _2661;
    float _2712 = (0.5 / (((_2590 * ((_2675 * _2702) + _2661)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2702) + _2661) * _2675))) * _2675;
    float _4839 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2714 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2684 / ((_2688 * _2688) * 3.141590118408203125));
    float _2724 = (((((_2695 * _2612) + _966) * cbLight._m0[_2649].x) * _2714) * _2337) + ((((cbLight._m0[_2561].x * _2303) * ((_2611 * _2612) + _966)) * _2635) * _2350);
    float _2725 = (((((_2695 * _2614) + _968) * cbLight._m0[_2649].y) * _2714) * _2337) + ((((cbLight._m0[_2561].y * _2305) * ((_2611 * _2614) + _968)) * _2635) * _2350);
    float _2726 = (((((_2695 * _2615) + _969) * cbLight._m0[_2649].z) * _2714) * _2337) + ((((cbLight._m0[_2561].z * _2307) * ((_2611 * _2615) + _969)) * _2635) * _2350);
    float _2782;
    float _2784;
    float _2786;
    if (_2390)
    {
        _2782 = _2724;
        _2784 = _2725;
        _2786 = _2726;
    }
    else
    {
        uint _2788 = _2314 + 2u;
        uint _2792 = _2314 + 10u;
        float _2806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2788].w)) * _808) * 0.949999988079071044921875);
        float _2807 = _2806 * _2806;
        float _2808 = cbLight._m0[_2788].x + _884;
        float _2809 = cbLight._m0[_2788].y + _885;
        float _2810 = cbLight._m0[_2788].z + _886;
        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
        float _2815 = _2814 * _2808;
        float _2816 = _2814 * _2809;
        float _2817 = _2814 * _2810;
        float _2818 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2788].xyz));
        float _4850 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2822 = dot(vec3(_805, _806, _807), vec3(_2815, _2816, _2817));
        float _4861 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2825 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _2826 = dot(vec3(cbLight._m0[_2788].xyz), vec3(_2815, _2816, _2817));
        float _4872 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2830 = _2807 * _2807;
        float _2834 = ((_2825 * _2825) * (_2830 + (-1.0))) + 1.0;
        float _2841 = exp2(log2(1.0 - (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) * 5.0);
        float _2848 = 1.0 - _2807;
        float _2858 = (0.5 / (((_2590 * ((_2821 * _2848) + _2807)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2848) + _2807) * _2821))) * _2821;
        float _4883 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2860 = (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2830 / ((_2834 * _2834) * 3.141590118408203125));
        float _2861 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2782 = (((((_2841 * _2612) + _966) * cbLight._m0[_2792].x) * _2860) * _2861) + _2724;
        _2784 = (((((_2841 * _2614) + _968) * cbLight._m0[_2792].y) * _2860) * _2861) + _2725;
        _2786 = (((((_2841 * _2615) + _969) * cbLight._m0[_2792].z) * _2860) * _2861) + _2726;
    }
    float _2892;
    float _2894;
    float _2896;
    if (_2499)
    {
        _2892 = _2782;
        _2894 = _2784;
        _2896 = _2786;
    }
    else
    {
        uint _2903 = _2314 + 3u;
        uint _2907 = _2314 + 11u;
        float _2921 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2903].w)) * _808) * 0.949999988079071044921875);
        float _2922 = _2921 * _2921;
        float _2923 = cbLight._m0[_2903].x + _884;
        float _2924 = cbLight._m0[_2903].y + _885;
        float _2925 = cbLight._m0[_2903].z + _886;
        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
        float _2930 = _2929 * _2923;
        float _2931 = _2929 * _2924;
        float _2932 = _2929 * _2925;
        float _2933 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2903].xyz));
        float _4899 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2936 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
        float _2937 = dot(vec3(_805, _806, _807), vec3(_2930, _2931, _2932));
        float _4910 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2940 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
        float _2941 = dot(vec3(cbLight._m0[_2903].xyz), vec3(_2930, _2931, _2932));
        float _4921 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2945 = _2922 * _2922;
        float _2949 = ((_2940 * _2940) * (_2945 + (-1.0))) + 1.0;
        float _2956 = exp2(log2(1.0 - (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) * 5.0);
        float _2963 = 1.0 - _2922;
        float _2973 = (0.5 / (((_2590 * ((_2936 * _2963) + _2922)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2963) + _2922) * _2936))) * _2936;
        float _4932 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        float _2975 = (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2945 / ((_2949 * _2949) * 3.141590118408203125));
        float _2976 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2892 = (((((_2956 * _2612) + _966) * cbLight._m0[_2907].x) * _2975) * _2976) + _2782;
        _2894 = (((((_2956 * _2614) + _968) * cbLight._m0[_2907].y) * _2975) * _2976) + _2784;
        _2896 = (((((_2956 * _2615) + _969) * cbLight._m0[_2907].z) * _2975) * _2976) + _2786;
    }
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    if (_2312.y == 0u)
    {
        uvec4 _2997 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2998 = _2997.x;
        uint _3009 = uint((float(_2997.y) * floor(float(uint(cbSceneParam._m0[85u].y * _905) / _2998))) + floor(float(uint(cbSceneParam._m0[85u].x * _904) / _2998)));
        float _3019 = (log2(_2090 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3020 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        uint _3023 = uint(isnan(14.0) ? _3020 : (isnan(_3020) ? 14.0 : min(_3020, 14.0)));
        uvec4 _3028 = texelFetch(g_lightClusterGridBuffer, int(((_3023 << 2u) + (_3009 << 6u)) >> 2u));
        uint _3029 = _3028.x;
        uint _3030 = _2997.z;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        if (((((1u << ((_3030 >> 4u) & 15u)) + 4294967295u) & _3029) == 0u) || ((_3030 & 240u) == 0u))
        {
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
            _3119 = 0.0;
        }
        else
        {
            float _3110;
            float _3112;
            float _3114;
            float _3116;
            float _3118;
            float _3120;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            uint _3268 = 0u;
            uint _3277;
            bool _3278;
            for (;;)
            {
                _3277 = texelFetch(g_lightClassification, int((((_3023 << 5u) + (_3009 << 9u)) + (_3268 << 2u)) >> 2u)).x;
                _3278 = _3277 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3278)
                {
                    frontier_phi_71_pred = _3267;
                    frontier_phi_71_pred_1 = _3266;
                    frontier_phi_71_pred_2 = _3265;
                    frontier_phi_71_pred_3 = _3264;
                    frontier_phi_71_pred_4 = _3263;
                    frontier_phi_71_pred_5 = _3262;
                }
                else
                {
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    uint _3413;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3266;
                    _3412 = _3267;
                    _3413 = _3277;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    for (;;)
                    {
                        uint _3417 = uint(findLSB(_3413)) + (_3268 << 5u);
                        uint _3414 = (_3413 + 4294967295u) & _3413;
                        uint _3419 = _3417 * 48u;
                        vec4 _3433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3419)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 3u)).x));
                        uint _3439 = (_3417 * 48u) + 4u;
                        vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3439)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 3u)).x));
                        uint _3458 = (_3417 * 48u) + 8u;
                        vec3 _3469 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3458)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 2u)).x));
                        float _3473 = _3433.x - _2088;
                        float _3474 = _3433.y - _2089;
                        float _3475 = _3433.z - _2090;
                        float _3476 = dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475));
                        float _3479 = inversesqrt(_3476);
                        float _3480 = _3479 * _3473;
                        float _3481 = _3479 * _3474;
                        float _3482 = _3479 * _3475;
                        float _3483 = dot(vec3(_923, _926, _929), vec3(_3480, _3481, _3482));
                        float _3488 = 1.0 - (_3476 * _3433.w);
                        float _4958 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3489 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                        float _3490 = sqrt(_3476) * _3452.w;
                        float _3493 = 1.39999997615814208984375 / (_3490 + 1.39999997615814208984375);
                        float _3494 = _3493 * _3493;
                        float _3497 = ((1.0 - _3494) * _3483) + _3494;
                        float _3500 = _3490 * _3490;
                        float _3504 = ((isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0))) * _3489) / ((_3500 * 0.699999988079071044921875) + 1.0);
                        float _3508 = (-0.0) - _2088;
                        float _3509 = (-0.0) - _2089;
                        float _3510 = (-0.0) - _2090;
                        float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                        float _3515 = _3514 * _3508;
                        float _3516 = _3514 * _3509;
                        float _3517 = _3514 * _3510;
                        float _3524 = exp2(log2(1.0 / ((_3500 * 3.5) + 5.0)) * 0.25);
                        float _3525 = 1.0 - _998;
                        float _3532 = sqrt(1.0 - ((1.0 - (_3525 * _3525)) * (1.0 - (_3524 * _3524))));
                        float _3533 = _3532 * _3532;
                        float _3534 = _3533 * _3533;
                        float _3535 = _3515 + _3480;
                        float _3536 = _3516 + _3481;
                        float _3537 = _3517 + _3482;
                        float _3541 = inversesqrt(dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537)));
                        float _3545 = dot(vec3(_923, _926, _929), vec3(_3515, _3516, _3517));
                        float _4974 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                        float _3548 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                        float _3549 = dot(vec3(_923, _926, _929), vec3(_3541 * _3535, _3541 * _3536, _3541 * _3537));
                        float _4985 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3552 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                        float _3556 = ((_3552 * _3552) * (_3534 + (-1.0))) + 1.0;
                        float _3557 = _3493 * _3533;
                        float _3558 = _3557 * _3557;
                        float _3561 = ((1.0 - _3558) * _3483) + _3558;
                        float _4996 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3562 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                        float _3563 = 1.0 - _3533;
                        float _3573 = (0.5 / (((_3562 * ((_3548 * _3563) + _3533)) + 9.9999999392252902907785028219223e-09) + (((_3562 * _3563) + _3533) * _3548))) * _3562;
                        float _5007 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                        float _3583 = (((_3534 * 3.1415927410125732421875) * (isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0)))) / ((_3556 * _3556) * ((_3500 * 2.1991131305694580078125) + 3.141590118408203125))) * _3489;
                        _3337 = (_3504 * _3452.x) + _3410;
                        _3338 = (_3504 * _3452.y) + _3411;
                        _3339 = (_3504 * _3452.z) + _3412;
                        _3334 = (_3583 * _3469.x) + _3407;
                        _3335 = (_3583 * _3469.y) + _3408;
                        _3336 = (_3583 * _3469.z) + _3409;
                        if (_3414 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3338;
                            _3412 = _3339;
                            _3413 = _3414;
                        }
                    }
                    frontier_phi_71_pred = _3339;
                    frontier_phi_71_pred_1 = _3338;
                    frontier_phi_71_pred_2 = _3337;
                    frontier_phi_71_pred_3 = _3336;
                    frontier_phi_71_pred_4 = _3335;
                    frontier_phi_71_pred_5 = _3334;
                }
                _3120 = frontier_phi_71_pred;
                _3118 = frontier_phi_71_pred_1;
                _3116 = frontier_phi_71_pred_2;
                _3114 = frontier_phi_71_pred_3;
                _3112 = frontier_phi_71_pred_4;
                _3110 = frontier_phi_71_pred_5;
                uint _3269 = _3268 + 1u;
                if (_3269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3262 = _3110;
                    _3263 = _3112;
                    _3264 = _3114;
                    _3265 = _3116;
                    _3266 = _3118;
                    _3267 = _3120;
                    _3268 = _3269;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
            _3119 = _3120;
        }
        uvec4 _3123 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3124 = _3123.z;
        uint _3126 = (_3124 >> 8u) & 15u;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        if (((4294967295u << _3126) & _3029) == 0u)
        {
            _3230 = _3109;
            _3232 = _3111;
            _3234 = _3113;
            _3236 = _3115;
            _3238 = _3117;
            _3240 = _3119;
        }
        else
        {
            float _3255 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
            float _3256 = _3255 * _2088;
            float _3257 = _3255 * _2089;
            float _3258 = _3255 * _2090;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3126 < ((_3124 >> 12u) & 15u))
            {
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3241;
                float _3390 = _3109;
                float _3391 = _3111;
                float _3392 = _3113;
                float _3393 = _3115;
                float _3394 = _3117;
                float _3395 = _3119;
                uint _3396 = _3126;
                uint _3405;
                bool _3406;
                for (;;)
                {
                    _3405 = texelFetch(g_lightClassification, int((((_3023 << 5u) + (_3009 << 9u)) + (_3396 << 2u)) >> 2u)).x;
                    _3406 = _3405 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3406)
                    {
                        frontier_phi_82_pred = _3395;
                        frontier_phi_82_pred_1 = _3394;
                        frontier_phi_82_pred_2 = _3393;
                        frontier_phi_82_pred_3 = _3392;
                        frontier_phi_82_pred_4 = _3391;
                        frontier_phi_82_pred_5 = _3390;
                    }
                    else
                    {
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3610 = _3390;
                        float _3611 = _3391;
                        float _3612 = _3392;
                        float _3613 = _3393;
                        float _3614 = _3394;
                        float _3615 = _3395;
                        uint _3616 = _3405;
                        uint _3617;
                        vec4 _3642;
                        float _3643;
                        vec4 _3658;
                        vec3 _3670;
                        vec4 _3685;
                        vec4 _3700;
                        float _3746;
                        bool _3747;
                        for (;;)
                        {
                            uint _3627 = ((_3396 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3616));
                            _3617 = (_3616 + 4294967295u) & _3616;
                            uint _3629 = _3627 * 40u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            _3643 = _3642.w;
                            uint _3645 = (_3627 * 40u) + 4u;
                            _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            uint _3660 = (_3627 * 40u) + 8u;
                            _3670 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x));
                            uint _3672 = (_3627 * 40u) + 16u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3687 = (_3627 * 40u) + 20u;
                            _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            uint _3702 = (_3627 * 40u) + 24u;
                            vec4 _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            uint _3721 = (_3627 * 40u) + 28u;
                            vec4 _3734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 3u)).x));
                            _3746 = fma(_2090, _3734.z, fma(_2089, _3734.y, _3734.x * _2088)) + _3734.w;
                            _3747 = !((fma(_2090, _3715.z, fma(_2089, _3715.y, _3715.x * _2088)) + _3715.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3747)
                            {
                                float _3774 = _3642.x - _2088;
                                float _3775 = _3642.y - _2089;
                                float _3776 = _3642.z - _2090;
                                float _3777 = dot(vec3(_3774, _3775, _3776), vec3(_3774, _3775, _3776));
                                float _3780 = inversesqrt(_3777);
                                float _3781 = _3780 * _3774;
                                float _3782 = _3780 * _3775;
                                float _3783 = _3780 * _3776;
                                float _3787 = 1.0 - (_3777 / (_3643 * _3643));
                                float _5018 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3788 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3792 = sqrt(_3777) * _3658.w;
                                float _3794 = 1.39999997615814208984375 / (_3792 + 1.39999997615814208984375);
                                float _3795 = _3794 * _3794;
                                float _3798 = ((1.0 - _3795) * dot(vec3(_3781, _3782, _3783), vec3(_923, _926, _929))) + _3795;
                                float _3801 = _3792 * _3792;
                                float _3805 = (fma(_2090, _3685.z, fma(_2089, _3685.y, _3685.x * _2088)) + _3685.w) / _3746;
                                float _3806 = (fma(_2090, _3700.z, fma(_2089, _3700.y, _3700.x * _2088)) + _3700.w) / _3746;
                                float _3810 = 1.0 - dot(vec2(_3805, _3806), vec2(_3805, _3806));
                                float _5034 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3811 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3812 = _3811 * (((isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0))) * _3788) / ((_3801 * 0.699999988079071044921875) + 1.0));
                                float _3824 = exp2(log2(1.0 / ((_3801 * 3.5) + 5.0)) * 0.25);
                                float _3825 = 1.0 - _998;
                                float _3832 = sqrt(1.0 - ((1.0 - (_3825 * _3825)) * (1.0 - (_3824 * _3824))));
                                float _3833 = _3832 * _3832;
                                float _3834 = _3833 * _3833;
                                float _3835 = _3781 - _3256;
                                float _3836 = _3782 - _3257;
                                float _3837 = _3783 - _3258;
                                float _3841 = inversesqrt(dot(vec3(_3835, _3836, _3837), vec3(_3835, _3836, _3837)));
                                float _3845 = dot(vec3(_923, _926, _929), vec3((-0.0) - _3256, (-0.0) - _3257, (-0.0) - _3258));
                                float _5045 = isnan(0.0) ? _3845 : (isnan(_3845) ? 0.0 : max(_3845, 0.0));
                                float _3848 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                                float _3849 = dot(vec3(_923, _926, _929), vec3(_3841 * _3835, _3841 * _3836, _3841 * _3837));
                                float _5056 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3852 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
                                float _3856 = ((_3852 * _3852) * (_3834 + (-1.0))) + 1.0;
                                float _3857 = _3794 * _3833;
                                float _3858 = _3857 * _3857;
                                float _3864 = ((1.0 - _3858) * dot(vec3(_923, _926, _929), vec3(_3781, _3782, _3783))) + _3858;
                                float _5067 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3865 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                                float _3866 = 1.0 - _3833;
                                float _3876 = (0.5 / (((_3865 * ((_3848 * _3866) + _3833)) + 9.9999999392252902907785028219223e-09) + (((_3865 * _3866) + _3833) * _3848))) * _3865;
                                float _5078 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3886 = (_3811 * _3788) * (((_3834 * 3.1415927410125732421875) * (isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0)))) / ((_3856 * _3856) * ((_3801 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3812 * _3658.z;
                                frontier_phi_88_pred_1 = _3812 * _3658.y;
                                frontier_phi_88_pred_2 = _3812 * _3658.x;
                                frontier_phi_88_pred_3 = _3886 * _3670.z;
                                frontier_phi_88_pred_4 = _3886 * _3670.y;
                                frontier_phi_88_pred_5 = _3886 * _3670.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3895 = frontier_phi_88_pred;
                            _3894 = frontier_phi_88_pred_1;
                            _3893 = frontier_phi_88_pred_2;
                            _3892 = frontier_phi_88_pred_3;
                            _3891 = frontier_phi_88_pred_4;
                            _3890 = frontier_phi_88_pred_5;
                            _3600 = _3893 + _3613;
                            _3601 = _3894 + _3614;
                            _3602 = _3895 + _3615;
                            _3597 = _3890 + _3610;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            if (_3617 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3617;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3602;
                        frontier_phi_82_pred_1 = _3601;
                        frontier_phi_82_pred_2 = _3600;
                        frontier_phi_82_pred_3 = _3599;
                        frontier_phi_82_pred_4 = _3598;
                        frontier_phi_82_pred_5 = _3597;
                    }
                    _3241 = frontier_phi_82_pred;
                    _3239 = frontier_phi_82_pred_1;
                    _3237 = frontier_phi_82_pred_2;
                    _3235 = frontier_phi_82_pred_3;
                    _3233 = frontier_phi_82_pred_4;
                    _3231 = frontier_phi_82_pred_5;
                    uint _3397 = _3396 + 1u;
                    if (_3397 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3390 = _3231;
                        _3391 = _3233;
                        _3392 = _3235;
                        _3393 = _3237;
                        _3394 = _3239;
                        _3395 = _3241;
                        _3396 = _3397;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3237;
                frontier_phi_63_64_ladder_1 = _3241;
                frontier_phi_63_64_ladder_2 = _3239;
                frontier_phi_63_64_ladder_3 = _3235;
                frontier_phi_63_64_ladder_4 = _3233;
                frontier_phi_63_64_ladder_5 = _3231;
            }
            else
            {
                frontier_phi_63_64_ladder = _3115;
                frontier_phi_63_64_ladder_1 = _3119;
                frontier_phi_63_64_ladder_2 = _3117;
                frontier_phi_63_64_ladder_3 = _3113;
                frontier_phi_63_64_ladder_4 = _3111;
                frontier_phi_63_64_ladder_5 = _3109;
            }
            _3230 = frontier_phi_63_64_ladder_5;
            _3232 = frontier_phi_63_64_ladder_4;
            _3234 = frontier_phi_63_64_ladder_3;
            _3236 = frontier_phi_63_64_ladder;
            _3238 = frontier_phi_63_64_ladder_2;
            _3240 = frontier_phi_63_64_ladder_1;
        }
        float _3245 = isnan(1.0) ? _982 : (isnan(_982) ? 1.0 : min(_982, 1.0));
        _3042 = (_3245 * _3236) + _2554;
        _3044 = (_3245 * _3238) + _2556;
        _3046 = (_3245 * _3240) + _2558;
        _3048 = ((_3230 * _966) * _3245) + _2892;
        _3050 = ((_3232 * _968) * _3245) + _2894;
        _3052 = ((_3234 * _969) * _3245) + _2896;
    }
    else
    {
        _3042 = _2554;
        _3044 = _2556;
        _3046 = _2558;
        _3048 = _2892;
        _3050 = _2894;
        _3052 = _2896;
    }
    float _5094 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _5105 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _5116 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _3069 = ((isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0))) * (_3042 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _982))) + ((_3048 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1819)) * cbPerFrame._m0[3u].x);
    float _3070 = ((isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0))) * (_3044 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _982))) + ((_3050 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1819)) * cbPerFrame._m0[3u].x);
    float _3071 = ((isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0))) * (_3046 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _982))) + ((_3052 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1819)) * cbPerFrame._m0[3u].x);
    uint _3072 = _283 + 6u;
    float _3080 = _904 / cbSceneParam._m0[86u].x;
    float _3081 = _905 / cbSceneParam._m0[86u].y;
    vec4 _3095 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3080, _3081, (log2((isnan(cbSceneParam._m0[77u].w) ? _827 : (isnan(_827) ? cbSceneParam._m0[77u].w : min(_827, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3097 = _3095.x;
    float _3098 = _3095.y;
    float _3099 = _3095.z;
    float _3100 = _3095.w;
    float _3172;
    float _3174;
    float _3176;
    float _3178;
    if (_827 > cbSceneParam._m0[78u].w)
    {
        float _3134 = isnan(_827) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _827 : min(cbSceneParam._m0[80u].w, _827));
        float _3135 = _3134 / _827;
        float _3146 = _3135 * _877;
        float _3147 = _878 * _3135;
        float _3148 = (-0.0) - _3147;
        float _3150 = _3135 * _879;
        float _3152 = (cbSceneParam._m0[77u].w * _3148) / _3134;
        float _3153 = _3152 + cbSceneParam._m0[79u].w;
        float _3154 = cbSceneParam._m0[79u].w - _3147;
        float _3160 = sqrt(((_3146 * _3146) + (_3147 * _3147)) + (_3150 * _3150));
        float _3163 = (1.0 - (cbSceneParam._m0[77u].w / _3134)) * _3160;
        float _3168 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3170 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3347;
        if (abs((_3148 - _3152) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3347 = ((((_3153 > 0.0) ? exp2(_3168 * _3153) : (2.0 - exp2(_3170 * _3153))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3163;
        }
        else
        {
            float _3291 = 1.0 / cbSceneParam._m0[80u].x;
            float _3292 = isnan(_3154) ? _3153 : (isnan(_3153) ? _3154 : max(_3153, _3154));
            float _3293 = isnan(_3154) ? _3153 : (isnan(_3153) ? _3154 : min(_3153, _3154));
            float _3302 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : min(_3292, 0.0));
            float _3303 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : min(_3293, 0.0));
            _3347 = ((abs(_3160 / _3148) * cbSceneParam._m0[80u].y) * ((((_3302 - _3303) * 2.0) - ((exp2(_3168 * (isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0)))) - exp2(_3168 * (isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))))) * _3291)) - ((exp2(_3170 * _3302) - exp2(_3170 * _3303)) * _3291))) + (_3163 * cbSceneParam._m0[80u].z);
        }
        vec4 _3349 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3080, _3081, 1.0), 0.0);
        float _3358 = exp2((_3347 * (-1.44269502162933349609375)) * (1.0 - _3349.w));
        float _3359 = log2(_3358);
        float _3375 = log2(_3100);
        _3172 = (exp2(_3375 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3359 * cbSceneParam._m0[78u].x)) * _3349.x) / cbSceneParam._m0[78u].x)) + _3097;
        _3174 = (exp2(_3375 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3359 * cbSceneParam._m0[78u].y)) * _3349.y) / cbSceneParam._m0[78u].y)) + _3098;
        _3176 = (exp2(_3375 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3359 * cbSceneParam._m0[78u].z)) * _3349.z) / cbSceneParam._m0[78u].z)) + _3099;
        _3178 = _3358 * _3100;
    }
    else
    {
        _3172 = _3097;
        _3174 = _3098;
        _3176 = _3099;
        _3178 = _3100;
    }
    bool _3385;
    vec4 _3188;
    vec4 _3210;
    float _3212;
    float _3216;
    float _3217;
    float _3218;
    float _3219;
    bool _3229;
    for (;;)
    {
        _3188 = cbMatDynParam._m0[0u];
        float _3190 = roundEven(_3188.y);
        bool _3191 = _3190 == 3.0;
        float _3192 = log2(_3178);
        float _3199 = exp2(_3192 * cbSceneParam._m0[78u].x) * _3069;
        float _3200 = exp2(_3192 * cbSceneParam._m0[78u].y) * _3070;
        float _3201 = exp2(_3192 * cbSceneParam._m0[78u].z) * _3071;
        float _3208 = _893 + (-0.5);
        _3210 = cbMtdParam._m0[1u];
        _3212 = _3210.y * _3208;
        float _3215 = (_3190 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3216 = _3215 * (_3191 ? _3199 : (_3199 + (cbSceneParam._m0[72u].w * _3172)));
        _3217 = _3215 * (_3191 ? _3200 : (_3200 + (cbSceneParam._m0[72u].w * _3174)));
        _3218 = _3215 * (_3191 ? _3201 : (_3201 + (cbSceneParam._m0[72u].w * _3176)));
        _3219 = _3208 * 0.999000012874603271484375;
        _3229 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3229)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3219) < 0.5)
            {
                _3385 = true;
                break;
            }
        }
        uint _3326 = _942 + uint(_3188.w);
        if ((cbInstanceData._m0[_3326].w < 1.0) && ((cbInstanceData._m0[_3326].w + _3219) < 0.5))
        {
            _3385 = true;
            break;
        }
        if ((_3212 + 1.0) < _3210.x)
        {
            _3385 = true;
            break;
        }
        _3385 = false;
        break;
    }
    float _3588;
    if (_3385)
    {
        discard_state = true;
        _3588 = 0.0;
    }
    else
    {
        _3588 = cbInstanceData._m0[_3072].w;
    }
    SV_Target.x = _3216;
    SV_Target.y = _3217;
    SV_Target.z = _3218;
    SV_Target.w = _3588;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3072].w;
    discard_exit();
}


