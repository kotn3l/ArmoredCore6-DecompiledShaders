#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1378;
float _4042;
float _4043;
float _4044;
float _4045;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _370 = _368.x;
    float _382 = dot(vec4(_370, _368.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _399 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_370 - _382) * cbMtdParam._m0[24u].y) + _382) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4054 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _407 = (_400 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _408 = (_400 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _409 = (_400 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _427 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _452 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _471 = _469.x;
    float _472 = _469.y;
    float _473 = _469.z;
    float _482 = ((_452.z - _473) * _400) + _473;
    float _485 = ((((_452.x - _471) * _400) + _471) * 2.0) + (-1.0);
    float _486 = ((((_452.y - _472) * _400) + _472) * 2.0) + (-1.0);
    float _487 = dot(vec2(_485, _486), vec2(_485, _486));
    float _4065 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _492 = sqrt(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))));
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _533 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _535 = _533.x;
    float _536 = 1.0 - _535;
    float _542 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _545 = ((isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : min(_542, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _554 = (_545 - ((((((_535 - _536) * cbMtdParam._m0[24u].z) + _536) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _545))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4086 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _562 = (_555 * (cbMtdParam._m0[17u].x - _407)) + _407;
    float _563 = (_555 * (cbMtdParam._m0[17u].y - _408)) + _408;
    float _564 = (_555 * (cbMtdParam._m0[17u].z - _409)) + _409;
    vec4 _576 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _578 = _576.x;
    float _579 = 1.0 - _578;
    float _606 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_578 - _579) * cbMtdParam._m0[24u].w) + _579) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4097 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _615 = ((((cbMtdParam._m0[10u].x - _562) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _607) + _562;
    float _616 = ((((cbMtdParam._m0[10u].y - _563) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _607) + _563;
    float _617 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _564)) * _607) + _564;
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _643 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _645 = _643.x;
    float _663 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _645) * _400) + _645;
    float _667 = ((_629.x - _663) * cbMtdParam._m0[19u].z) + _663;
    float _669 = _667 - (_667 * _555);
    float _671 = _669 - (_669 * _607);
    float _676 = (((_427.z - _482) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _482;
    float _680 = ((_508.z - _676) * cbMtdParam._m0[19u].w) + _676;
    vec4 _694 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _701 = (_694.x * 2.0) + (-1.0);
    float _702 = (_694.y * 2.0) + (-1.0);
    float _703 = dot(vec2(_701, _702), vec2(_701, _702));
    float _4108 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _711 = (_555 * (_694.z - _680)) + _680;
    float _714 = ((cbMtdParam._m0[23u].y - _711) * _607) + _711;
    vec4 _733 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _739 = (_733.x * 2.0) + (-1.0);
    float _740 = (_733.y * 2.0) + (-1.0);
    float _741 = dot(vec2(_739, _740), vec2(_739, _740));
    float _4119 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _755 = (_485 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_427.x * 2.0) + (-1.0)))) + (((_508.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _756 = (_486 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_427.y * 2.0) + (-1.0)))) + (((_508.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _768 = (((_701 - _755) + (cbMtdParam._m0[21u].x * _755)) * _555) + _755;
    float _769 = (((_702 - _756) + (cbMtdParam._m0[21u].x * _756)) * _555) + _756;
    float _770 = (_555 * (sqrt(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) - _492)) + _492;
    float _781 = (((_739 - _768) + (_768 * cbMtdParam._m0[22u].z)) * _607) + _768;
    float _782 = (((_740 - _769) + (_769 * cbMtdParam._m0[22u].z)) * _607) + _769;
    float _783 = ((sqrt(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) - _770) * _607) + _770;
    float _785 = cbMtdParam._m0[22u].x + _508.w;
    float _788 = fma(_783, _250 * NORMAL.x, fma(_782, _257 * TANGENT.x, (_243 * _235) * _781));
    float _791 = fma(_783, _250 * NORMAL.y, fma(_782, _257 * TANGENT.y, (_243 * _236) * _781));
    float _794 = fma(_783, _250 * NORMAL.z, fma(_782, _257 * TANGENT.z, (_243 * _237) * _781));
    float _798 = inversesqrt(dot(vec3(_788, _791, _794), vec3(_788, _791, _794)));
    float _799 = _798 * _788;
    float _800 = _798 * _791;
    float _801 = _798 * _794;
    float _4130 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _802 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4152 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4163 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4174 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4185 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _807 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _821 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _871 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _861);
    float _872 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _861);
    float _873 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _861);
    float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
    float _878 = _871 * _877;
    float _879 = _872 * _877;
    float _880 = _873 * _877;
    vec4 _885 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _887 = _885.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1059 = sqrt(((_871 * _871) + (_872 * _872)) + (_873 * _873));
        float _1065 = (cbMatDynParam._m0[5u].x * _1059) + cbMatDynParam._m0[5u].y;
        float _4196 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1070 = (cbMatDynParam._m0[5u].z * _1059) + cbMatDynParam._m0[5u].w;
        float _4207 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) - _1066)) + _1066) < ((_887 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _898 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _899 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _917 = fma(_801, cbSceneParam._m0[5u].z, fma(_800, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _799));
    float _920 = fma(_801, cbSceneParam._m0[6u].z, fma(_800, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _799));
    float _923 = fma(_801, cbSceneParam._m0[7u].z, fma(_800, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _799));
    uint _936 = _263 + 9u;
    uint _937 = _936 + uint(cbMatDynParam._m0[0u].w);
    float _943 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * cbInstanceData._m0[_937].x;
    float _944 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * cbInstanceData._m0[_937].y;
    float _945 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * cbInstanceData._m0[_937].z;
    float _4218 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _4229 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _949 = 1.0 - _807;
    float _950 = _946 * _949;
    float _951 = _947 * _949;
    float _952 = _948 * _949;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _807;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _807;
    float _959 = (_948 + (-0.039999999105930328369140625)) * _807;
    float _960 = _957 + 0.039999999105930328369140625;
    float _962 = _958 + 0.039999999105930328369140625;
    float _963 = _959 + 0.039999999105930328369140625;
    vec4 _972 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _898, cbSceneParam._m0[86u].y * _899));
    float _976 = ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * TEXCOORD_5.w) * _972.x;
    float _977 = dot(vec3(_799, _800, _801), vec3(_878, _879, _880));
    float _980 = _977 * 2.0;
    float _984 = (_980 * _799) - _878;
    float _985 = (_980 * _800) - _879;
    float _986 = (_980 * _801) - _880;
    float _990 = abs(dot(vec3(_878, _879, _880), vec3(_799, _800, _801)));
    float _4251 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _992 = sqrt(_802);
    float _1005 = exp2((_992 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_992 * 3.0));
    float _1011 = (1.0 - _1005) * ((_992 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1012 = _1005 * _992;
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1377;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1102 = fma(_1048, cbModelParam._m0[26u].z, fma(_1044, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1040));
        float _1106 = fma(_1048, cbModelParam._m0[27u].z, fma(_1044, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1040));
        float _1110 = fma(_1048, cbModelParam._m0[28u].z, fma(_1044, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1040));
        float _1135 = _1040 + _799;
        float _1136 = _1044 + _800;
        float _1137 = _1048 + _801;
        float _1147 = fma(_1137, cbModelParam._m0[26u].z, fma(_1136, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1135)) - _1102;
        float _1148 = fma(_1137, cbModelParam._m0[27u].z, fma(_1136, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1135)) - _1106;
        float _1149 = fma(_1137, cbModelParam._m0[28u].z, fma(_1136, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1135)) - _1110;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1102 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1106 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[34u].z) + ((((((_1110 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1205 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1171.x + (-0.5));
        float _1207 = _1205 * (_1171.y + (-0.5));
        float _1208 = _1205 * (_1171.z + (-0.5));
        float _1215 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1178.x + (-0.5));
        float _1217 = _1215 * (_1178.y + (-0.5));
        float _1218 = _1215 * (_1178.z + (-0.5));
        float _1225 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1185.x + (-0.5));
        float _1227 = _1225 * (_1185.y + (-0.5));
        float _1228 = _1225 * (_1185.z + (-0.5));
        float _1235 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1192.x + (-0.5));
        float _1237 = _1235 * (_1192.y + (-0.5));
        float _1238 = _1235 * (_1192.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1259 = (dot(vec3(_799, _800, _801), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1269 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4299 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1271 + 1.0))) + _1276) * _1239;
        float _1286 = _1207 * 0.5;
        float _1287 = _1217 * 0.5;
        float _1288 = _1227 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_799, _800, _801), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4332 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1313 + 1.0))) + _1318) * _1240;
        float _1328 = _1208 * 0.5;
        float _1329 = _1218 * 0.5;
        float _1330 = _1228 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_799, _800, _801), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4365 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1355 + 1.0))) + _1360) * _1241;
        _1377 = _1208;
        _1379 = _1207;
        _1380 = _1206;
        _1381 = _1218;
        _1382 = _1217;
        _1383 = _1216;
        _1384 = _1228;
        _1385 = _1227;
        _1386 = _1226;
        _1387 = _1241;
        _1388 = _1240;
        _1389 = _1239;
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1378;
        _1379 = _1378;
        _1380 = _1378;
        _1381 = _1378;
        _1382 = _1378;
        _1383 = _1378;
        _1384 = _1378;
        _1385 = _1378;
        _1386 = _1378;
        _1387 = _1378;
        _1388 = _1378;
        _1389 = _1378;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1420 = fma(_1048, cbModelParam._m0[30u].z, fma(_1044, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1040));
        float _1424 = fma(_1048, cbModelParam._m0[31u].z, fma(_1044, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1040));
        float _1428 = fma(_1048, cbModelParam._m0[32u].z, fma(_1044, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1040));
        float _1451 = _1040 + _799;
        float _1452 = _1044 + _800;
        float _1453 = _1048 + _801;
        float _1463 = fma(_1453, cbModelParam._m0[30u].z, fma(_1452, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1451)) - _1420;
        float _1464 = fma(_1453, cbModelParam._m0[31u].z, fma(_1452, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1451)) - _1424;
        float _1465 = fma(_1453, cbModelParam._m0[32u].z, fma(_1452, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1451)) - _1428;
        float _1469 = inversesqrt(dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465)));
        float _1482 = ((_1469 * _1463) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1420 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1469 * _1464) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1424 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1469 * _1465) / cbModelParam._m0[35u].z) + ((((((_1428 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        float _1519 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1486.x + (-0.5));
        float _1521 = _1519 * (_1486.y + (-0.5));
        float _1522 = _1519 * (_1486.z + (-0.5));
        float _1529 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1493.x + (-0.5));
        float _1531 = _1529 * (_1493.y + (-0.5));
        float _1532 = _1529 * (_1493.z + (-0.5));
        float _1539 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1500.x + (-0.5));
        float _1541 = _1539 * (_1500.y + (-0.5));
        float _1542 = _1539 * (_1500.z + (-0.5));
        float _1549 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1507.x + (-0.5));
        float _1551 = _1549 * (_1507.y + (-0.5));
        float _1552 = _1549 * (_1507.z + (-0.5));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = _1520 * 0.5;
        float _1557 = _1530 * 0.5;
        float _1558 = _1540 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_799, _800, _801), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4428 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1583 + 1.0))) + _1588) * _1553;
        float _1598 = _1521 * 0.5;
        float _1599 = _1531 * 0.5;
        float _1600 = _1541 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_799, _800, _801), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4461 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1625 + 1.0))) + _1630) * _1554;
        float _1640 = _1522 * 0.5;
        float _1641 = _1532 * 0.5;
        float _1642 = _1542 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_799, _800, _801), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4472 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4483 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4494 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_1667 + 1.0))) + _1672) * _1555;
        _1689 = _1522;
        _1690 = _1521;
        _1691 = _1520;
        _1692 = _1532;
        _1693 = _1531;
        _1694 = _1530;
        _1695 = _1542;
        _1696 = _1541;
        _1697 = _1540;
        _1698 = _1555;
        _1699 = _1554;
        _1700 = _1553;
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
    }
    else
    {
        _1689 = _1378;
        _1690 = _1378;
        _1691 = _1378;
        _1692 = _1378;
        _1693 = _1378;
        _1694 = _1378;
        _1695 = _1378;
        _1696 = _1378;
        _1697 = _1378;
        _1698 = _1378;
        _1699 = _1378;
        _1700 = _1378;
        _1701 = 0.0;
        _1702 = 0.0;
        _1703 = 0.0;
    }
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1390)) + _1390;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1391)) + _1391;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1392)) + _1392;
    float _1736 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1714, cbSceneParam._m0[89u].y, _1713 * cbSceneParam._m0[89u].x));
    float _1739 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1714, cbSceneParam._m0[90u].y, _1713 * cbSceneParam._m0[90u].x));
    float _1742 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1714, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1713));
    float _1757 = _984 * 0.5;
    float _1758 = _985 * 0.5;
    float _1759 = _986 * 0.5;
    float _1760 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1763 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1766 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1800;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1773 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1377, _1381, _1384, _1387));
        float _1777 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1379, _1382, _1385, _1388));
        float _1781 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1788 = dot(vec4(cbModelParam._m0[39u]), vec4(_1757, _1758, _1759, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1811;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1802 = dot(vec4(cbModelParam._m0[40u]), vec4(_1757, _1758, _1759, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1815 = (_1811 * cbModelParam._m0[1u].x) + (_1800 * (1.0 - cbModelParam._m0[1u].x));
    float _1825 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _802);
    float _1826 = isnan(_1825) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1825 : min(cbModelParam._m0[25u].z, _1825));
    float _1907;
    float _1909;
    float _1911;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1874 = fma(_1048, cbModelParam._m0[13u].z, fma(_1044, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1040)) + cbModelParam._m0[13u].w;
        float _1878 = fma(_1048, cbModelParam._m0[14u].z, fma(_1044, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1040)) + cbModelParam._m0[14u].w;
        float _1882 = fma(_1048, cbModelParam._m0[15u].z, fma(_1044, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1040)) + cbModelParam._m0[15u].w;
        float _1885 = fma(_986, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _984));
        float _1888 = fma(_986, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _984));
        float _1891 = fma(_986, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _984));
        float _1919;
        if (_1885 > 0.0)
        {
            _1919 = abs((1.0 - _1874) / _1885);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1874 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1919 = frontier_phi_17_15_ladder;
        }
        float _2091;
        if (_1888 > 0.0)
        {
            _2091 = abs((1.0 - _1878) / _1888);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1878 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2091 = frontier_phi_26_22_ladder;
        }
        float _2386;
        if (_1891 > 0.0)
        {
            _2386 = abs((1.0 - _1882) / _1891);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1882 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2386 = frontier_phi_38_33_ladder;
        }
        float _2388 = isnan(_2091) ? _1919 : (isnan(_1919) ? _2091 : min(_1919, _2091));
        float _2389 = isnan(_2386) ? _2388 : (isnan(_2388) ? _2386 : min(_2388, _2386));
        float _2393 = (_2389 * _1885) + _1874;
        float _2394 = (_2389 * _1888) + _1878;
        float _2395 = (_2389 * _1891) + _1882;
        float _2396 = _2389 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2396;
        float _2400 = _2396 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 > _2400) || ((_2394 < _2398) || ((_2393 < _2398) || (_2393 > _2400))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2540 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2395, cbModelParam._m0[9u].z, fma(_2394, cbModelParam._m0[9u].y, _2393 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2395, cbModelParam._m0[10u].z, fma(_2394, cbModelParam._m0[10u].y, _2393 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2395, cbModelParam._m0[11u].z, fma(_2394, cbModelParam._m0[11u].y, _2393 * cbModelParam._m0[11u].x))), _1826);
            frontier_phi_16_38_ladder = _2540.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2540.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2540.x * cbModelParam._m0[1u].y;
        }
        _1907 = frontier_phi_16_38_ladder_2;
        _1909 = frontier_phi_16_38_ladder_1;
        _1911 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1895 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_984, _985, _986), _1826);
        _1907 = _1895.x * cbModelParam._m0[1u].y;
        _1909 = _1895.y * cbModelParam._m0[1u].y;
        _1911 = _1895.z * cbModelParam._m0[1u].y;
    }
    float _1915 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _802);
    float _1916 = isnan(_1915) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1915 : min(cbModelParam._m0[25u].w, _1915));
    float _2006;
    float _2008;
    float _2010;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1970 = fma(_1048, cbModelParam._m0[21u].z, fma(_1044, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1040)) + cbModelParam._m0[21u].w;
        float _1974 = fma(_1048, cbModelParam._m0[22u].z, fma(_1044, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1040)) + cbModelParam._m0[22u].w;
        float _1978 = fma(_1048, cbModelParam._m0[23u].z, fma(_1044, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1040)) + cbModelParam._m0[23u].w;
        float _1981 = fma(_986, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _984));
        float _1984 = fma(_986, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _984));
        float _1987 = fma(_986, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _984));
        float _2096;
        if (_1981 > 0.0)
        {
            _2096 = abs((1.0 - _1970) / _1981);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1970 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2096 = frontier_phi_28_24_ladder;
        }
        float _2413;
        if (_1984 > 0.0)
        {
            _2413 = abs((1.0 - _1974) / _1984);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1974 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2413 = frontier_phi_40_35_ladder;
        }
        float _2751;
        if (_1987 > 0.0)
        {
            _2751 = abs((1.0 - _1978) / _1987);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1978 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2751 = frontier_phi_50_47_ladder;
        }
        float _2753 = isnan(_2413) ? _2096 : (isnan(_2096) ? _2413 : min(_2096, _2413));
        float _2754 = isnan(_2751) ? _2753 : (isnan(_2753) ? _2751 : min(_2753, _2751));
        float _2758 = (_2754 * _1981) + _1970;
        float _2759 = (_2754 * _1984) + _1974;
        float _2760 = (_2754 * _1987) + _1978;
        float _2761 = _2754 * 9.9999997473787516355514526367188e-05;
        float _2762 = (-1.0) - _2761;
        float _2764 = _2761 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2760 > _2764) || ((_2760 < _2762) || ((_2759 > _2764) || ((_2759 < _2762) || ((_2758 < _2762) || (_2758 > _2764))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2882 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2760, cbModelParam._m0[17u].z, fma(_2759, cbModelParam._m0[17u].y, _2758 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2760, cbModelParam._m0[18u].z, fma(_2759, cbModelParam._m0[18u].y, _2758 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2760, cbModelParam._m0[19u].z, fma(_2759, cbModelParam._m0[19u].y, _2758 * cbModelParam._m0[19u].x))), _1916);
            frontier_phi_25_50_ladder = _2882.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2882.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2882.x * cbModelParam._m0[1u].z;
        }
        _2006 = frontier_phi_25_50_ladder_2;
        _2008 = frontier_phi_25_50_ladder_1;
        _2010 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1990 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_984, _985, _986), _1916);
        _2006 = _1990.x * cbModelParam._m0[1u].z;
        _2008 = _1990.y * cbModelParam._m0[1u].z;
        _2010 = _1990.z * cbModelParam._m0[1u].z;
    }
    float _2023 = (((_1011 * _960) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2006 - _1907)) + _1907);
    float _2025 = (((_1011 * _962) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2008 - _1909)) + _1909);
    float _2027 = (((_1011 * _963) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2010 - _1911)) + _1911);
    float _2030 = fma(_2027, cbSceneParam._m0[89u].z, fma(_2025, cbSceneParam._m0[89u].y, _2023 * cbSceneParam._m0[89u].x));
    float _2033 = fma(_2027, cbSceneParam._m0[90u].z, fma(_2025, cbSceneParam._m0[90u].y, _2023 * cbSceneParam._m0[90u].x));
    float _2036 = fma(_2027, cbSceneParam._m0[91u].z, fma(_2025, cbSceneParam._m0[91u].y, _2023 * cbSceneParam._m0[91u].x));
    float _2070 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2074 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2078 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2082 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2083 = _2070 / _2082;
    float _2084 = _2074 / _2082;
    float _2085 = _2078 / _2082;
    float _2232;
    float _2233;
    float _2234;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2112 = ((uint(_2085 > cbSceneParam._m0[59u].y) + uint(_2085 > cbSceneParam._m0[59u].x)) + uint(_2085 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2113 = _2112 + 43u;
        uint _2121 = _2112 + 44u;
        uint _2129 = _2112 + 45u;
        uint _2137 = _2112 + 46u;
        float _2148 = fma(_2082, cbSceneParam._m0[_2113].w, fma(_2078, cbSceneParam._m0[_2113].z, fma(_2074, cbSceneParam._m0[_2113].y, _2070 * cbSceneParam._m0[_2113].x)));
        float _2152 = fma(_2082, cbSceneParam._m0[_2121].w, fma(_2078, cbSceneParam._m0[_2121].z, fma(_2074, cbSceneParam._m0[_2121].y, _2070 * cbSceneParam._m0[_2121].x)));
        float _2160 = fma(_2082, cbSceneParam._m0[_2137].w, fma(_2078, cbSceneParam._m0[_2137].z, fma(_2074, cbSceneParam._m0[_2137].y, _2070 * cbSceneParam._m0[_2137].x)));
        float _2165 = cbSceneParam._m0[33u].z * _2160;
        float _2167 = cbSceneParam._m0[33u].w * _2160;
        float _2170 = fma(_2082, cbSceneParam._m0[_2129].w, fma(_2078, cbSceneParam._m0[_2129].z, fma(_2074, cbSceneParam._m0[_2129].y, _2070 * cbSceneParam._m0[_2129].x))) / _2160;
        float _2218 = (cbSceneParam._m0[33u].x - sqrt(((_2084 * _2084) + (_2083 * _2083)) + (_2085 * _2085))) * cbSceneParam._m0[33u].y;
        float _4620 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2225 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 + _2148) / _2160, (_2167 + _2152) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2167 + _2148) / _2160, (_2152 - _2165) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 - _2165) / _2160, (_2152 - _2167) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 - _2167) / _2160, (_2165 + _2152) / _2160), _2170), 0.0)).x), vec4(0.25)));
        _2232 = 1.0 - (_2225 * cbSceneParam._m0[34u].x);
        _2233 = 1.0 - (_2225 * cbSceneParam._m0[34u].y);
        _2234 = 1.0 - (_2225 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2232 = 1.0;
        _2233 = 1.0;
        _2234 = 1.0;
    }
    float _2298;
    float _2300;
    float _2302;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2286 = fma(_2082, cbSceneParam._m0[63u].w, fma(_2078, cbSceneParam._m0[63u].z, fma(_2074, cbSceneParam._m0[63u].y, _2070 * cbSceneParam._m0[63u].x)));
        float _2287 = fma(_2082, cbSceneParam._m0[60u].w, fma(_2078, cbSceneParam._m0[60u].z, fma(_2074, cbSceneParam._m0[60u].y, _2070 * cbSceneParam._m0[60u].x))) / _2286;
        float _2288 = fma(_2082, cbSceneParam._m0[61u].w, fma(_2078, cbSceneParam._m0[61u].z, fma(_2074, cbSceneParam._m0[61u].y, _2070 * cbSceneParam._m0[61u].x))) / _2286;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2287 >= cbSceneParam._m0[64u].x) && (_2288 >= cbSceneParam._m0[64u].y)) && (_2287 <= cbSceneParam._m0[64u].z)) && (_2288 <= cbSceneParam._m0[64u].w))
        {
            float _2426 = fma(_2082, cbSceneParam._m0[62u].w, fma(_2078, cbSceneParam._m0[62u].z, fma(_2074, cbSceneParam._m0[62u].y, _2070 * cbSceneParam._m0[62u].x))) / _2286;
            float _2430 = isnan(cbSceneParam._m0[41u].w) ? _2426 : (isnan(_2426) ? cbSceneParam._m0[41u].w : max(_2426, cbSceneParam._m0[41u].w));
            float _2473 = (cbSceneParam._m0[33u].x - sqrt(((_2084 * _2084) + (_2083 * _2083)) + (_2085 * _2085))) * cbSceneParam._m0[33u].y;
            float _4636 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
            float _2480 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2287, cbSceneParam._m0[33u].w + _2288), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2287, _2288 - cbSceneParam._m0[33u].z), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2287 - cbSceneParam._m0[33u].z, _2288 - cbSceneParam._m0[33u].w), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2287 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2288), _2430), 0.0)).x), vec4(0.25)));
            float _2484 = 1.0 - (_2480 * cbSceneParam._m0[34u].x);
            float _2485 = 1.0 - (_2480 * cbSceneParam._m0[34u].y);
            float _2486 = 1.0 - (_2480 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2486) ? _2234 : (isnan(_2234) ? _2486 : min(_2234, _2486));
            frontier_phi_37_36_ladder_1 = isnan(_2485) ? _2233 : (isnan(_2233) ? _2485 : min(_2233, _2485));
            frontier_phi_37_36_ladder_2 = isnan(_2484) ? _2232 : (isnan(_2232) ? _2484 : min(_2232, _2484));
        }
        else
        {
            frontier_phi_37_36_ladder = _2234;
            frontier_phi_37_36_ladder_1 = _2233;
            frontier_phi_37_36_ladder_2 = _2232;
        }
        _2298 = frontier_phi_37_36_ladder_2;
        _2300 = frontier_phi_37_36_ladder_1;
        _2302 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2298 = _2232;
        _2300 = _2233;
        _2302 = _2234;
    }
    uvec4 _2307 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2309 = _2307.x * 14u;
    uint _2310 = _2309 + 13u;
    float _2317 = _976 + (-1.0);
    float _2322 = (cbLight._m0[_2310].x * _2317) + 1.0;
    float _2323 = (cbLight._m0[_2310].y * _2317) + 1.0;
    float _2324 = (cbLight._m0[_2310].z * _2317) + 1.0;
    float _2325 = (cbLight._m0[_2310].w * _2317) + 1.0;
    uint _2326 = _2309 + 5u;
    float _2332 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
    uint _2336 = _2309 + 4u;
    float _2345 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
    uint _2349 = _2309 | 1u;
    float _2360 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_799, _800, _801));
    float _2363 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_799, _800, _801));
    float _4672 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _4683 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2368 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * 0.3183098733425140380859375;
    float _2370 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * 0.3183098733425140380859375;
    float _2377 = ((cbLight._m0[_2326].x * _2332) * _2370) + (((cbLight._m0[_2336].x * _2298) * _2345) * _2368);
    float _2378 = ((_2332 * cbLight._m0[_2326].y) * _2370) + (((cbLight._m0[_2336].y * _2300) * _2345) * _2368);
    float _2379 = ((_2332 * cbLight._m0[_2326].z) * _2370) + (((cbLight._m0[_2336].z * _2302) * _2345) * _2368);
    uvec4 _2383 = floatBitsToUint(cbLight._m0[_2309 + 12u]);
    bool _2385 = _2383.x == 0u;
    float _2487;
    float _2489;
    float _2491;
    if (_2385)
    {
        _2487 = _2377;
        _2489 = _2378;
        _2491 = _2379;
    }
    else
    {
        uint _2495 = _2309 + 6u;
        float _2511 = (dot(vec3(cbLight._m0[_2309 + 2u].xyz), vec3(_799, _800, _801)) * 0.5) + 0.5;
        float _2512 = _2511 * _2511;
        float _4694 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2513 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2514 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2487 = (((cbLight._m0[_2495].x * 0.3183098733425140380859375) * _2513) * _2514) + _2377;
        _2489 = (((cbLight._m0[_2495].y * 0.3183098733425140380859375) * _2513) * _2514) + _2378;
        _2491 = (((cbLight._m0[_2495].z * 0.3183098733425140380859375) * _2513) * _2514) + _2379;
    }
    bool _2494 = _2383.y == 0u;
    float _2549;
    float _2551;
    float _2553;
    if (_2494)
    {
        _2549 = _2487;
        _2551 = _2489;
        _2553 = _2491;
    }
    else
    {
        uint _2722 = _2309 + 7u;
        float _2738 = (dot(vec3(cbLight._m0[_2309 + 3u].xyz), vec3(_799, _800, _801)) * 0.5) + 0.5;
        float _2739 = _2738 * _2738;
        float _4710 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2740 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2741 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2549 = (((cbLight._m0[_2722].x * 0.3183098733425140380859375) * _2740) * _2741) + _2487;
        _2551 = (((cbLight._m0[_2722].y * 0.3183098733425140380859375) * _2740) * _2741) + _2489;
        _2553 = (((cbLight._m0[_2722].z * 0.3183098733425140380859375) * _2740) * _2741) + _2491;
    }
    uint _2556 = _2309 + 8u;
    float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _802) * 0.949999988079071044921875);
    float _2570 = _2569 * _2569;
    float _2571 = cbLight._m0[_2309].x + _878;
    float _2572 = cbLight._m0[_2309].y + _879;
    float _2573 = cbLight._m0[_2309].z + _880;
    float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
    float _2578 = _2577 * _2571;
    float _2579 = _2577 * _2572;
    float _2580 = _2577 * _2573;
    float _2581 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2309].xyz));
    float _4726 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2584 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _4737 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _2585 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2586 = dot(vec3(_799, _800, _801), vec3(_2578, _2579, _2580));
    float _4748 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2590 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2578, _2579, _2580));
    float _4759 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2594 = _2570 * _2570;
    float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
    float _2606 = exp2(log2(1.0 - (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) * 5.0);
    float _2607 = 0.959999978542327880859375 - _957;
    float _2609 = 0.959999978542327880859375 - _958;
    float _2610 = 0.959999978542327880859375 - _959;
    float _2617 = 1.0 - _2570;
    float _2628 = (0.5 / (((_2585 * ((_2584 * _2617) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2617) + _2570) * _2584))) * _2584;
    float _4770 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2630 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
    uint _2644 = _2309 + 9u;
    float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _802) * 0.949999988079071044921875);
    float _2656 = _2655 * _2655;
    float _2657 = cbLight._m0[_2349].x + _878;
    float _2658 = cbLight._m0[_2349].y + _879;
    float _2659 = cbLight._m0[_2349].z + _880;
    float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
    float _2664 = _2663 * _2657;
    float _2665 = _2663 * _2658;
    float _2666 = _2663 * _2659;
    float _2667 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2349].xyz));
    float _4781 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2670 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
    float _2671 = dot(vec3(_799, _800, _801), vec3(_2664, _2665, _2666));
    float _4792 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2674 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
    float _2675 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2664, _2665, _2666));
    float _4803 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2679 = _2656 * _2656;
    float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
    float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) * 5.0);
    float _2697 = 1.0 - _2656;
    float _2707 = (0.5 / (((_2585 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2697) + _2656) * _2670))) * _2670;
    float _4814 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2709 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
    float _2719 = (((((_2690 * _2607) + _960) * cbLight._m0[_2644].x) * _2709) * _2332) + ((((cbLight._m0[_2556].x * _2298) * ((_2606 * _2607) + _960)) * _2630) * _2345);
    float _2720 = (((((_2690 * _2609) + _962) * cbLight._m0[_2644].y) * _2709) * _2332) + ((((cbLight._m0[_2556].y * _2300) * ((_2606 * _2609) + _962)) * _2630) * _2345);
    float _2721 = (((((_2690 * _2610) + _963) * cbLight._m0[_2644].z) * _2709) * _2332) + ((((cbLight._m0[_2556].z * _2302) * ((_2606 * _2610) + _963)) * _2630) * _2345);
    float _2777;
    float _2779;
    float _2781;
    if (_2385)
    {
        _2777 = _2719;
        _2779 = _2720;
        _2781 = _2721;
    }
    else
    {
        uint _2783 = _2309 + 2u;
        uint _2787 = _2309 + 10u;
        float _2801 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2783].w)) * _802) * 0.949999988079071044921875);
        float _2802 = _2801 * _2801;
        float _2803 = cbLight._m0[_2783].x + _878;
        float _2804 = cbLight._m0[_2783].y + _879;
        float _2805 = cbLight._m0[_2783].z + _880;
        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
        float _2810 = _2809 * _2803;
        float _2811 = _2809 * _2804;
        float _2812 = _2809 * _2805;
        float _2813 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2783].xyz));
        float _4825 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2817 = dot(vec3(_799, _800, _801), vec3(_2810, _2811, _2812));
        float _4836 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2821 = dot(vec3(cbLight._m0[_2783].xyz), vec3(_2810, _2811, _2812));
        float _4847 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2825 = _2802 * _2802;
        float _2829 = ((_2820 * _2820) * (_2825 + (-1.0))) + 1.0;
        float _2836 = exp2(log2(1.0 - (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) * 5.0);
        float _2843 = 1.0 - _2802;
        float _2853 = (0.5 / (((_2585 * ((_2816 * _2843) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2843) + _2802) * _2816))) * _2816;
        float _4858 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2855 = (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2825 / ((_2829 * _2829) * 3.141590118408203125));
        float _2856 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2777 = (((((_2836 * _2607) + _960) * cbLight._m0[_2787].x) * _2855) * _2856) + _2719;
        _2779 = (((((_2836 * _2609) + _962) * cbLight._m0[_2787].y) * _2855) * _2856) + _2720;
        _2781 = (((((_2836 * _2610) + _963) * cbLight._m0[_2787].z) * _2855) * _2856) + _2721;
    }
    float _2887;
    float _2889;
    float _2891;
    if (_2494)
    {
        _2887 = _2777;
        _2889 = _2779;
        _2891 = _2781;
    }
    else
    {
        uint _2898 = _2309 + 3u;
        uint _2902 = _2309 + 11u;
        float _2916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2898].w)) * _802) * 0.949999988079071044921875);
        float _2917 = _2916 * _2916;
        float _2918 = cbLight._m0[_2898].x + _878;
        float _2919 = cbLight._m0[_2898].y + _879;
        float _2920 = cbLight._m0[_2898].z + _880;
        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
        float _2925 = _2924 * _2918;
        float _2926 = _2924 * _2919;
        float _2927 = _2924 * _2920;
        float _2928 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2898].xyz));
        float _4874 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2931 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
        float _2932 = dot(vec3(_799, _800, _801), vec3(_2925, _2926, _2927));
        float _4885 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2935 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
        float _2936 = dot(vec3(cbLight._m0[_2898].xyz), vec3(_2925, _2926, _2927));
        float _4896 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2940 = _2917 * _2917;
        float _2944 = ((_2935 * _2935) * (_2940 + (-1.0))) + 1.0;
        float _2951 = exp2(log2(1.0 - (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) * 5.0);
        float _2958 = 1.0 - _2917;
        float _2968 = (0.5 / (((_2585 * ((_2931 * _2958) + _2917)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2958) + _2917) * _2931))) * _2931;
        float _4907 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2970 = (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2940 / ((_2944 * _2944) * 3.141590118408203125));
        float _2971 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2887 = (((((_2951 * _2607) + _960) * cbLight._m0[_2902].x) * _2970) * _2971) + _2777;
        _2889 = (((((_2951 * _2609) + _962) * cbLight._m0[_2902].y) * _2970) * _2971) + _2779;
        _2891 = (((((_2951 * _2610) + _963) * cbLight._m0[_2902].z) * _2970) * _2971) + _2781;
    }
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    if (_2307.y == 0u)
    {
        uvec4 _2992 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2993 = _2992.x;
        uint _3004 = uint((float(_2992.y) * floor(float(uint(cbSceneParam._m0[85u].y * _899) / _2993))) + floor(float(uint(cbSceneParam._m0[85u].x * _898) / _2993)));
        float _3014 = (log2(_2085 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3015 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        uint _3018 = uint(isnan(14.0) ? _3015 : (isnan(_3015) ? 14.0 : min(_3015, 14.0)));
        uvec4 _3023 = texelFetch(g_lightClusterGridBuffer, int(((_3018 << 2u) + (_3004 << 6u)) >> 2u));
        uint _3024 = _3023.x;
        uint _3025 = _2992.z;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        if (((((1u << ((_3025 >> 4u) & 15u)) + 4294967295u) & _3024) == 0u) || ((_3025 & 240u) == 0u))
        {
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
        }
        else
        {
            float _3105;
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3115;
            float _3257 = 0.0;
            float _3258 = 0.0;
            float _3259 = 0.0;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            uint _3263 = 0u;
            uint _3272;
            bool _3273;
            for (;;)
            {
                _3272 = texelFetch(g_lightClassification, int((((_3018 << 5u) + (_3004 << 9u)) + (_3263 << 2u)) >> 2u)).x;
                _3273 = _3272 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3273)
                {
                    frontier_phi_71_pred = _3262;
                    frontier_phi_71_pred_1 = _3261;
                    frontier_phi_71_pred_2 = _3260;
                    frontier_phi_71_pred_3 = _3259;
                    frontier_phi_71_pred_4 = _3258;
                    frontier_phi_71_pred_5 = _3257;
                }
                else
                {
                    float _3402;
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    uint _3408;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3259;
                    _3405 = _3260;
                    _3406 = _3261;
                    _3407 = _3262;
                    _3408 = _3272;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    for (;;)
                    {
                        uint _3412 = uint(findLSB(_3408)) + (_3263 << 5u);
                        uint _3409 = (_3408 + 4294967295u) & _3408;
                        uint _3414 = _3412 * 48u;
                        vec4 _3428 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3414)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 3u)).x));
                        uint _3434 = (_3412 * 48u) + 4u;
                        vec4 _3447 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3434)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 3u)).x));
                        uint _3453 = (_3412 * 48u) + 8u;
                        vec3 _3464 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3453)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 2u)).x));
                        float _3468 = _3428.x - _2083;
                        float _3469 = _3428.y - _2084;
                        float _3470 = _3428.z - _2085;
                        float _3471 = dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470));
                        float _3474 = inversesqrt(_3471);
                        float _3475 = _3474 * _3468;
                        float _3476 = _3474 * _3469;
                        float _3477 = _3474 * _3470;
                        float _3478 = dot(vec3(_917, _920, _923), vec3(_3475, _3476, _3477));
                        float _3483 = 1.0 - (_3471 * _3428.w);
                        float _4933 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3484 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3485 = sqrt(_3471) * _3447.w;
                        float _3488 = 1.39999997615814208984375 / (_3485 + 1.39999997615814208984375);
                        float _3489 = _3488 * _3488;
                        float _3492 = ((1.0 - _3489) * _3478) + _3489;
                        float _3495 = _3485 * _3485;
                        float _3499 = ((isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0))) * _3484) / ((_3495 * 0.699999988079071044921875) + 1.0);
                        float _3503 = (-0.0) - _2083;
                        float _3504 = (-0.0) - _2084;
                        float _3505 = (-0.0) - _2085;
                        float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                        float _3510 = _3509 * _3503;
                        float _3511 = _3509 * _3504;
                        float _3512 = _3509 * _3505;
                        float _3519 = exp2(log2(1.0 / ((_3495 * 3.5) + 5.0)) * 0.25);
                        float _3520 = 1.0 - _992;
                        float _3527 = sqrt(1.0 - ((1.0 - (_3520 * _3520)) * (1.0 - (_3519 * _3519))));
                        float _3528 = _3527 * _3527;
                        float _3529 = _3528 * _3528;
                        float _3530 = _3510 + _3475;
                        float _3531 = _3511 + _3476;
                        float _3532 = _3512 + _3477;
                        float _3536 = inversesqrt(dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532)));
                        float _3540 = dot(vec3(_917, _920, _923), vec3(_3510, _3511, _3512));
                        float _4949 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3543 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                        float _3544 = dot(vec3(_917, _920, _923), vec3(_3536 * _3530, _3536 * _3531, _3536 * _3532));
                        float _4960 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3547 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                        float _3551 = ((_3547 * _3547) * (_3529 + (-1.0))) + 1.0;
                        float _3552 = _3488 * _3528;
                        float _3553 = _3552 * _3552;
                        float _3556 = ((1.0 - _3553) * _3478) + _3553;
                        float _4971 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                        float _3557 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                        float _3558 = 1.0 - _3528;
                        float _3568 = (0.5 / (((_3557 * ((_3543 * _3558) + _3528)) + 9.9999999392252902907785028219223e-09) + (((_3557 * _3558) + _3528) * _3543))) * _3557;
                        float _4982 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                        float _3579 = (((_3529 * 3.1415927410125732421875) * (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0)))) / ((_3551 * _3551) * ((_3495 * 2.1991131305694580078125) + 3.141590118408203125))) * _3484;
                        _3332 = (_3499 * _3447.x) + _3405;
                        _3333 = (_3499 * _3447.y) + _3406;
                        _3334 = (_3499 * _3447.z) + _3407;
                        _3329 = (_3579 * _3464.x) + _3402;
                        _3330 = (_3579 * _3464.y) + _3403;
                        _3331 = (_3579 * _3464.z) + _3404;
                        if (_3409 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3331;
                            _3405 = _3332;
                            _3406 = _3333;
                            _3407 = _3334;
                            _3408 = _3409;
                        }
                    }
                    frontier_phi_71_pred = _3334;
                    frontier_phi_71_pred_1 = _3333;
                    frontier_phi_71_pred_2 = _3332;
                    frontier_phi_71_pred_3 = _3331;
                    frontier_phi_71_pred_4 = _3330;
                    frontier_phi_71_pred_5 = _3329;
                }
                _3115 = frontier_phi_71_pred;
                _3113 = frontier_phi_71_pred_1;
                _3111 = frontier_phi_71_pred_2;
                _3109 = frontier_phi_71_pred_3;
                _3107 = frontier_phi_71_pred_4;
                _3105 = frontier_phi_71_pred_5;
                uint _3264 = _3263 + 1u;
                if (_3264 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3257 = _3105;
                    _3258 = _3107;
                    _3259 = _3109;
                    _3260 = _3111;
                    _3261 = _3113;
                    _3262 = _3115;
                    _3263 = _3264;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
        }
        uvec4 _3118 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3119 = _3118.z;
        uint _3121 = (_3119 >> 8u) & 15u;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        if (((4294967295u << _3121) & _3024) == 0u)
        {
            _3225 = _3104;
            _3227 = _3106;
            _3229 = _3108;
            _3231 = _3110;
            _3233 = _3112;
            _3235 = _3114;
        }
        else
        {
            float _3250 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
            float _3251 = _3250 * _2083;
            float _3252 = _3250 * _2084;
            float _3253 = _3250 * _2085;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3121 < ((_3119 >> 12u) & 15u))
            {
                float _3226;
                float _3228;
                float _3230;
                float _3232;
                float _3234;
                float _3236;
                float _3385 = _3104;
                float _3386 = _3106;
                float _3387 = _3108;
                float _3388 = _3110;
                float _3389 = _3112;
                float _3390 = _3114;
                uint _3391 = _3121;
                uint _3400;
                bool _3401;
                for (;;)
                {
                    _3400 = texelFetch(g_lightClassification, int((((_3018 << 5u) + (_3004 << 9u)) + (_3391 << 2u)) >> 2u)).x;
                    _3401 = _3400 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3401)
                    {
                        frontier_phi_82_pred = _3390;
                        frontier_phi_82_pred_1 = _3389;
                        frontier_phi_82_pred_2 = _3388;
                        frontier_phi_82_pred_3 = _3387;
                        frontier_phi_82_pred_4 = _3386;
                        frontier_phi_82_pred_5 = _3385;
                    }
                    else
                    {
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3606 = _3385;
                        float _3607 = _3386;
                        float _3608 = _3387;
                        float _3609 = _3388;
                        float _3610 = _3389;
                        float _3611 = _3390;
                        uint _3612 = _3400;
                        uint _3613;
                        vec4 _3638;
                        float _3639;
                        vec4 _3654;
                        vec3 _3666;
                        vec4 _3681;
                        vec4 _3696;
                        float _3742;
                        bool _3743;
                        for (;;)
                        {
                            uint _3623 = ((_3391 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3612));
                            _3613 = (_3612 + 4294967295u) & _3612;
                            uint _3625 = _3623 * 40u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            _3639 = _3638.w;
                            uint _3641 = (_3623 * 40u) + 4u;
                            _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            uint _3656 = (_3623 * 40u) + 8u;
                            _3666 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x));
                            uint _3668 = (_3623 * 40u) + 16u;
                            _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            uint _3683 = (_3623 * 40u) + 20u;
                            _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            uint _3698 = (_3623 * 40u) + 24u;
                            vec4 _3711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 3u)).x));
                            uint _3717 = (_3623 * 40u) + 28u;
                            vec4 _3730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 3u)).x));
                            _3742 = fma(_2085, _3730.z, fma(_2084, _3730.y, _3730.x * _2083)) + _3730.w;
                            _3743 = !((fma(_2085, _3711.z, fma(_2084, _3711.y, _3711.x * _2083)) + _3711.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3743)
                            {
                                float _3770 = _3638.x - _2083;
                                float _3771 = _3638.y - _2084;
                                float _3772 = _3638.z - _2085;
                                float _3773 = dot(vec3(_3770, _3771, _3772), vec3(_3770, _3771, _3772));
                                float _3776 = inversesqrt(_3773);
                                float _3777 = _3776 * _3770;
                                float _3778 = _3776 * _3771;
                                float _3779 = _3776 * _3772;
                                float _3783 = 1.0 - (_3773 / (_3639 * _3639));
                                float _4993 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3784 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3788 = sqrt(_3773) * _3654.w;
                                float _3790 = 1.39999997615814208984375 / (_3788 + 1.39999997615814208984375);
                                float _3791 = _3790 * _3790;
                                float _3794 = ((1.0 - _3791) * dot(vec3(_3777, _3778, _3779), vec3(_917, _920, _923))) + _3791;
                                float _3797 = _3788 * _3788;
                                float _3801 = (fma(_2085, _3681.z, fma(_2084, _3681.y, _3681.x * _2083)) + _3681.w) / _3742;
                                float _3802 = (fma(_2085, _3696.z, fma(_2084, _3696.y, _3696.x * _2083)) + _3696.w) / _3742;
                                float _3806 = 1.0 - dot(vec2(_3801, _3802), vec2(_3801, _3802));
                                float _5009 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3807 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3808 = _3807 * (((isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0))) * _3784) / ((_3797 * 0.699999988079071044921875) + 1.0));
                                float _3820 = exp2(log2(1.0 / ((_3797 * 3.5) + 5.0)) * 0.25);
                                float _3821 = 1.0 - _992;
                                float _3828 = sqrt(1.0 - ((1.0 - (_3821 * _3821)) * (1.0 - (_3820 * _3820))));
                                float _3829 = _3828 * _3828;
                                float _3830 = _3829 * _3829;
                                float _3831 = _3777 - _3251;
                                float _3832 = _3778 - _3252;
                                float _3833 = _3779 - _3253;
                                float _3837 = inversesqrt(dot(vec3(_3831, _3832, _3833), vec3(_3831, _3832, _3833)));
                                float _3841 = dot(vec3(_917, _920, _923), vec3((-0.0) - _3251, (-0.0) - _3252, (-0.0) - _3253));
                                float _5020 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3844 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3845 = dot(vec3(_917, _920, _923), vec3(_3837 * _3831, _3837 * _3832, _3837 * _3833));
                                float _5031 = isnan(0.0) ? _3845 : (isnan(_3845) ? 0.0 : max(_3845, 0.0));
                                float _3848 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                                float _3852 = ((_3848 * _3848) * (_3830 + (-1.0))) + 1.0;
                                float _3853 = _3790 * _3829;
                                float _3854 = _3853 * _3853;
                                float _3860 = ((1.0 - _3854) * dot(vec3(_917, _920, _923), vec3(_3777, _3778, _3779))) + _3854;
                                float _5042 = isnan(0.0) ? _3860 : (isnan(_3860) ? 0.0 : max(_3860, 0.0));
                                float _3861 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                                float _3862 = 1.0 - _3829;
                                float _3872 = (0.5 / (((_3861 * ((_3844 * _3862) + _3829)) + 9.9999999392252902907785028219223e-09) + (((_3861 * _3862) + _3829) * _3844))) * _3861;
                                float _5053 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3882 = (_3807 * _3784) * (((_3830 * 3.1415927410125732421875) * (isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0)))) / ((_3852 * _3852) * ((_3797 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3808 * _3654.z;
                                frontier_phi_88_pred_1 = _3808 * _3654.y;
                                frontier_phi_88_pred_2 = _3808 * _3654.x;
                                frontier_phi_88_pred_3 = _3882 * _3666.z;
                                frontier_phi_88_pred_4 = _3882 * _3666.y;
                                frontier_phi_88_pred_5 = _3882 * _3666.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3891 = frontier_phi_88_pred;
                            _3890 = frontier_phi_88_pred_1;
                            _3889 = frontier_phi_88_pred_2;
                            _3888 = frontier_phi_88_pred_3;
                            _3887 = frontier_phi_88_pred_4;
                            _3886 = frontier_phi_88_pred_5;
                            _3596 = _3889 + _3609;
                            _3597 = _3890 + _3610;
                            _3598 = _3891 + _3611;
                            _3593 = _3886 + _3606;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            if (_3613 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3613;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3598;
                        frontier_phi_82_pred_1 = _3597;
                        frontier_phi_82_pred_2 = _3596;
                        frontier_phi_82_pred_3 = _3595;
                        frontier_phi_82_pred_4 = _3594;
                        frontier_phi_82_pred_5 = _3593;
                    }
                    _3236 = frontier_phi_82_pred;
                    _3234 = frontier_phi_82_pred_1;
                    _3232 = frontier_phi_82_pred_2;
                    _3230 = frontier_phi_82_pred_3;
                    _3228 = frontier_phi_82_pred_4;
                    _3226 = frontier_phi_82_pred_5;
                    uint _3392 = _3391 + 1u;
                    if (_3392 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3385 = _3226;
                        _3386 = _3228;
                        _3387 = _3230;
                        _3388 = _3232;
                        _3389 = _3234;
                        _3390 = _3236;
                        _3391 = _3392;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3232;
                frontier_phi_63_64_ladder_1 = _3236;
                frontier_phi_63_64_ladder_2 = _3234;
                frontier_phi_63_64_ladder_3 = _3230;
                frontier_phi_63_64_ladder_4 = _3228;
                frontier_phi_63_64_ladder_5 = _3226;
            }
            else
            {
                frontier_phi_63_64_ladder = _3110;
                frontier_phi_63_64_ladder_1 = _3114;
                frontier_phi_63_64_ladder_2 = _3112;
                frontier_phi_63_64_ladder_3 = _3108;
                frontier_phi_63_64_ladder_4 = _3106;
                frontier_phi_63_64_ladder_5 = _3104;
            }
            _3225 = frontier_phi_63_64_ladder_5;
            _3227 = frontier_phi_63_64_ladder_4;
            _3229 = frontier_phi_63_64_ladder_3;
            _3231 = frontier_phi_63_64_ladder;
            _3233 = frontier_phi_63_64_ladder_2;
            _3235 = frontier_phi_63_64_ladder_1;
        }
        float _3240 = isnan(1.0) ? _976 : (isnan(_976) ? 1.0 : min(_976, 1.0));
        _3037 = (_3240 * _3231) + _2549;
        _3039 = (_3240 * _3233) + _2551;
        _3041 = (_3240 * _3235) + _2553;
        _3043 = ((_3225 * _960) * _3240) + _2887;
        _3045 = ((_3227 * _962) * _3240) + _2889;
        _3047 = ((_3229 * _963) * _3240) + _2891;
    }
    else
    {
        _3037 = _2549;
        _3039 = _2551;
        _3041 = _2553;
        _3043 = _2887;
        _3045 = _2889;
        _3047 = _2891;
    }
    float _5069 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _5080 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _5091 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _3064 = ((isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_3037 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _976))) + ((_3043 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1815)) * cbPerFrame._m0[3u].x);
    float _3065 = ((isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0))) * (_3039 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _976))) + ((_3045 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1815)) * cbPerFrame._m0[3u].x);
    float _3066 = ((isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0))) * (_3041 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _976))) + ((_3047 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1815)) * cbPerFrame._m0[3u].x);
    uint _3067 = _263 + 6u;
    float _3075 = _898 / cbSceneParam._m0[86u].x;
    float _3076 = _899 / cbSceneParam._m0[86u].y;
    vec4 _3090 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3075, _3076, (log2((isnan(cbSceneParam._m0[77u].w) ? _821 : (isnan(_821) ? cbSceneParam._m0[77u].w : min(_821, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3092 = _3090.x;
    float _3093 = _3090.y;
    float _3094 = _3090.z;
    float _3095 = _3090.w;
    float _3167;
    float _3169;
    float _3171;
    float _3173;
    if (_821 > cbSceneParam._m0[78u].w)
    {
        float _3129 = isnan(_821) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _821 : min(cbSceneParam._m0[80u].w, _821));
        float _3130 = _3129 / _821;
        float _3141 = _3130 * _871;
        float _3142 = _872 * _3130;
        float _3143 = (-0.0) - _3142;
        float _3145 = _3130 * _873;
        float _3147 = (cbSceneParam._m0[77u].w * _3143) / _3129;
        float _3148 = _3147 + cbSceneParam._m0[79u].w;
        float _3149 = cbSceneParam._m0[79u].w - _3142;
        float _3155 = sqrt(((_3141 * _3141) + (_3142 * _3142)) + (_3145 * _3145));
        float _3158 = (1.0 - (cbSceneParam._m0[77u].w / _3129)) * _3155;
        float _3163 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3165 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3342;
        if (abs((_3143 - _3147) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3342 = ((((_3148 > 0.0) ? exp2(_3163 * _3148) : (2.0 - exp2(_3165 * _3148))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3158;
        }
        else
        {
            float _3286 = 1.0 / cbSceneParam._m0[80u].x;
            float _3287 = isnan(_3149) ? _3148 : (isnan(_3148) ? _3149 : max(_3148, _3149));
            float _3288 = isnan(_3149) ? _3148 : (isnan(_3148) ? _3149 : min(_3148, _3149));
            float _3297 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : min(_3287, 0.0));
            float _3298 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : min(_3288, 0.0));
            _3342 = ((abs(_3155 / _3143) * cbSceneParam._m0[80u].y) * ((((_3297 - _3298) * 2.0) - ((exp2(_3163 * (isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0)))) - exp2(_3163 * (isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0))))) * _3286)) - ((exp2(_3165 * _3297) - exp2(_3165 * _3298)) * _3286))) + (_3158 * cbSceneParam._m0[80u].z);
        }
        vec4 _3344 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3075, _3076, 1.0), 0.0);
        float _3353 = exp2((_3342 * (-1.44269502162933349609375)) * (1.0 - _3344.w));
        float _3354 = log2(_3353);
        float _3370 = log2(_3095);
        _3167 = (exp2(_3370 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3354 * cbSceneParam._m0[78u].x)) * _3344.x) / cbSceneParam._m0[78u].x)) + _3092;
        _3169 = (exp2(_3370 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3354 * cbSceneParam._m0[78u].y)) * _3344.y) / cbSceneParam._m0[78u].y)) + _3093;
        _3171 = (exp2(_3370 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3354 * cbSceneParam._m0[78u].z)) * _3344.z) / cbSceneParam._m0[78u].z)) + _3094;
        _3173 = _3353 * _3095;
    }
    else
    {
        _3167 = _3092;
        _3169 = _3093;
        _3171 = _3094;
        _3173 = _3095;
    }
    bool _3380;
    vec4 _3183;
    vec4 _3205;
    float _3207;
    float _3211;
    float _3212;
    float _3213;
    float _3214;
    bool _3224;
    for (;;)
    {
        _3183 = cbMatDynParam._m0[0u];
        float _3185 = roundEven(_3183.y);
        bool _3186 = _3185 == 3.0;
        float _3187 = log2(_3173);
        float _3194 = exp2(_3187 * cbSceneParam._m0[78u].x) * _3064;
        float _3195 = exp2(_3187 * cbSceneParam._m0[78u].y) * _3065;
        float _3196 = exp2(_3187 * cbSceneParam._m0[78u].z) * _3066;
        float _3203 = _887 + (-0.5);
        _3205 = cbMtdParam._m0[1u];
        _3207 = _3205.y * _3203;
        float _3210 = (_3185 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3211 = _3210 * (_3186 ? _3194 : (_3194 + (cbSceneParam._m0[72u].w * _3167)));
        _3212 = _3210 * (_3186 ? _3195 : (_3195 + (cbSceneParam._m0[72u].w * _3169)));
        _3213 = _3210 * (_3186 ? _3196 : (_3196 + (cbSceneParam._m0[72u].w * _3171)));
        _3214 = _3203 * 0.999000012874603271484375;
        _3224 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3224)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3214) < 0.5)
            {
                _3380 = true;
                break;
            }
        }
        uint _3321 = _936 + uint(_3183.w);
        if ((cbInstanceData._m0[_3321].w < 1.0) && ((cbInstanceData._m0[_3321].w + _3214) < 0.5))
        {
            _3380 = true;
            break;
        }
        if ((_3207 + 1.0) < _3205.x)
        {
            _3380 = true;
            break;
        }
        _3380 = false;
        break;
    }
    float _3584;
    if (_3380)
    {
        discard_state = true;
        _3584 = 0.0;
    }
    else
    {
        _3584 = cbInstanceData._m0[_3067].w;
    }
    SV_Target.x = _3211;
    SV_Target.y = _3212;
    SV_Target.z = _3213;
    SV_Target.w = _3584;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3067].w;
    discard_exit();
}


