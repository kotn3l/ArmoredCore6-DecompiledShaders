#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1113;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _242 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3441 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3452 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3463 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _257 = _252 + 1u;
    uint _261 = _252 + 2u;
    float _270 = sqrt(((cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x));
    float _271 = _270 * TEXCOORD.z;
    float _272 = _270 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _271) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _272) + cbTextureTilingScale._m0[13u].w));
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _313 = _308.x * cbMtdParam._m0[9u].x;
    float _314 = _308.y * cbMtdParam._m0[9u].y;
    float _315 = _308.z * cbMtdParam._m0[9u].z;
    float _319 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _285.x) * _313;
    float _322 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _285.y) * _314;
    float _325 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _285.z) * _315;
    float _332 = ((_313 - _319) * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) + _319;
    float _333 = ((_314 - _322) * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) + _322;
    float _334 = ((_315 - _325) * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) + _325;
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _271) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _272) + cbTextureTilingScale._m0[20u].w));
    vec4 _378 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _382 = _378.z;
    float _386 = (_378.x * 2.0) + (-1.0);
    float _387 = (_378.y * 2.0) + (-1.0);
    float _388 = dot(vec2(_386, _387), vec2(_386, _387));
    float _3474 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _393 = sqrt(1.0 - (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))));
    float _398 = _386 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_352.x * 2.0) + (-1.0)));
    float _399 = _387 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_352.y * 2.0) + (-1.0)));
    float _402 = fma(_393, _219, fma(_399, _226, _398 * _212));
    float _405 = fma(_393, _220, fma(_399, _227, _398 * _213));
    float _408 = fma(_393, _221, fma(_399, _228, _398 * _214));
    float _412 = inversesqrt(dot(vec3(_402, _405, _408), vec3(_402, _405, _408)));
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _271) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _272) + cbTextureTilingScale._m0[11u].w));
    float _450 = _448.x;
    float _451 = 1.0 - _450;
    float _458 = ((_450 - _451) * cbMtdParam._m0[24u].z) + _451;
    float _460 = (cbMtdParam._m0[19u].x + dot(vec4(_412 * _402, _412 * _405, _412 * _408, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_458 * cbMtdParam._m0[21u].z);
    float _3485 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _476 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_458 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3496 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _481 = ((_461 * (cbMtdParam._m0[17u].x - _332)) * _477) + _332;
    float _482 = ((_461 * (cbMtdParam._m0[17u].y - _333)) * _477) + _333;
    float _483 = ((_461 * (cbMtdParam._m0[17u].z - _334)) * _477) + _334;
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _498 = _496.x;
    float _501 = _498 - ((_498 * _461) * _477);
    float _506 = (((_352.z - _382) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _382;
    vec4 _519 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _271) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _272) + cbTextureTilingScale._m0[15u].w));
    float _526 = (_519.x * 2.0) + (-1.0);
    float _527 = (_519.y * 2.0) + (-1.0);
    float _528 = dot(vec2(_526, _527), vec2(_526, _527));
    float _3507 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _537 = (((_519.z - _506) * _461) * _477) + _506;
    float _552 = (((cbMtdParam._m0[21u].x * _398) + ((_526 - _398) * _461)) * _477) + _398;
    float _553 = (((cbMtdParam._m0[21u].x * _399) + ((_527 - _399) * _461)) * _477) + _399;
    float _554 = (((sqrt(1.0 - (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) - _393) * _461) * _477) + _393;
    float _556 = cbMtdParam._m0[22u].x + _378.w;
    float _559 = fma(_554, _219, fma(_553, _226, _552 * _212));
    float _562 = fma(_554, _220, fma(_553, _227, _552 * _213));
    float _565 = fma(_554, _221, fma(_553, _228, _552 * _214));
    float _569 = inversesqrt(dot(vec3(_559, _562, _565), vec3(_559, _562, _565)));
    float _570 = _569 * _559;
    float _571 = _569 * _562;
    float _572 = _569 * _565;
    float _3518 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _573 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3540 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3551 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3562 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3573 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _578 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _592 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _643 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _633);
    float _644 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _633);
    float _645 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _633);
    float _649 = inversesqrt(dot(vec3(_643, _644, _645), vec3(_643, _644, _645)));
    float _650 = _643 * _649;
    float _651 = _644 * _649;
    float _652 = _645 * _649;
    float _658 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _659 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _680 = fma(_572, cbSceneParam._m0[5u].z, fma(_571, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _570));
    float _683 = fma(_572, cbSceneParam._m0[6u].z, fma(_571, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _570));
    float _686 = fma(_572, cbSceneParam._m0[7u].z, fma(_571, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _570));
    uint _700 = (_252 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _706 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * cbInstanceData._m0[_700].x;
    float _707 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * cbInstanceData._m0[_700].y;
    float _708 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_700].z;
    float _3584 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _3595 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _712 = 1.0 - _578;
    float _713 = _709 * _712;
    float _714 = _710 * _712;
    float _715 = _711 * _712;
    float _720 = (_709 + (-0.039999999105930328369140625)) * _578;
    float _721 = (_710 + (-0.039999999105930328369140625)) * _578;
    float _722 = (_711 + (-0.039999999105930328369140625)) * _578;
    float _723 = _720 + 0.039999999105930328369140625;
    float _725 = _721 + 0.039999999105930328369140625;
    float _726 = _722 + 0.039999999105930328369140625;
    vec4 _735 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _658, cbSceneParam._m0[86u].y * _659));
    float _739 = ((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * TEXCOORD_5.w) * _735.x;
    float _740 = dot(vec3(_570, _571, _572), vec3(_650, _651, _652));
    float _743 = _740 * 2.0;
    float _747 = (_743 * _570) - _650;
    float _748 = (_743 * _571) - _651;
    float _749 = (_743 * _572) - _652;
    float _753 = abs(dot(vec3(_650, _651, _652), vec3(_570, _571, _572)));
    float _3617 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _755 = sqrt(_573);
    float _768 = exp2((_755 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_755 * 3.0));
    float _774 = (1.0 - _768) * ((_755 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _775 = _768 * _755;
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1112;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _837 = fma(_811, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _803));
        float _841 = fma(_811, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _803));
        float _845 = fma(_811, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _803));
        float _870 = _803 + _570;
        float _871 = _807 + _571;
        float _872 = _811 + _572;
        float _882 = fma(_872, cbModelParam._m0[26u].z, fma(_871, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _870)) - _837;
        float _883 = fma(_872, cbModelParam._m0[27u].z, fma(_871, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _870)) - _841;
        float _884 = fma(_872, cbModelParam._m0[28u].z, fma(_871, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _870)) - _845;
        float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
        float _901 = ((_888 * _882) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_837 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_888 * _883) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_841 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_888 * _884) / cbModelParam._m0[34u].z) + ((((((_845 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        float _940 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_906.x + (-0.5));
        float _942 = _940 * (_906.y + (-0.5));
        float _943 = _940 * (_906.z + (-0.5));
        float _950 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_913.x + (-0.5));
        float _952 = _950 * (_913.y + (-0.5));
        float _953 = _950 * (_913.z + (-0.5));
        float _960 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_920.x + (-0.5));
        float _962 = _960 * (_920.y + (-0.5));
        float _963 = _960 * (_920.z + (-0.5));
        float _970 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_927.x + (-0.5));
        float _972 = _970 * (_927.y + (-0.5));
        float _973 = _970 * (_927.z + (-0.5));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = _941 * 0.5;
        float _978 = _951 * 0.5;
        float _979 = _961 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _994 = (dot(vec3(_570, _571, _572), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1004 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3665 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1006 + 1.0))) + _1011) * _974;
        float _1021 = _942 * 0.5;
        float _1022 = _952 * 0.5;
        float _1023 = _962 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_570, _571, _572), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3698 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1048 + 1.0))) + _1053) * _975;
        float _1063 = _943 * 0.5;
        float _1064 = _953 * 0.5;
        float _1065 = _963 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_570, _571, _572), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3731 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1090 + 1.0))) + _1095) * _976;
        _1112 = _943;
        _1114 = _942;
        _1115 = _941;
        _1116 = _953;
        _1117 = _952;
        _1118 = _951;
        _1119 = _963;
        _1120 = _962;
        _1121 = _961;
        _1122 = _976;
        _1123 = _975;
        _1124 = _974;
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
    }
    else
    {
        _1112 = _1113;
        _1114 = _1113;
        _1115 = _1113;
        _1116 = _1113;
        _1117 = _1113;
        _1118 = _1113;
        _1119 = _1113;
        _1120 = _1113;
        _1121 = _1113;
        _1122 = _1113;
        _1123 = _1113;
        _1124 = _1113;
        _1125 = 0.0;
        _1126 = 0.0;
        _1127 = 0.0;
    }
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1152 = fma(_811, cbModelParam._m0[30u].z, fma(_807, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _803));
        float _1156 = fma(_811, cbModelParam._m0[31u].z, fma(_807, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _803));
        float _1160 = fma(_811, cbModelParam._m0[32u].z, fma(_807, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _803));
        float _1183 = _803 + _570;
        float _1184 = _807 + _571;
        float _1185 = _811 + _572;
        float _1195 = fma(_1185, cbModelParam._m0[30u].z, fma(_1184, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1183)) - _1152;
        float _1196 = fma(_1185, cbModelParam._m0[31u].z, fma(_1184, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1183)) - _1156;
        float _1197 = fma(_1185, cbModelParam._m0[32u].z, fma(_1184, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1183)) - _1160;
        float _1201 = inversesqrt(dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197)));
        float _1214 = ((_1201 * _1195) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1152 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1201 * _1196) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1156 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1201 * _1197) / cbModelParam._m0[35u].z) + ((((((_1160 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        float _1251 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1218.x + (-0.5));
        float _1253 = _1251 * (_1218.y + (-0.5));
        float _1254 = _1251 * (_1218.z + (-0.5));
        float _1261 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1225.x + (-0.5));
        float _1263 = _1261 * (_1225.y + (-0.5));
        float _1264 = _1261 * (_1225.z + (-0.5));
        float _1271 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1232.x + (-0.5));
        float _1273 = _1271 * (_1232.y + (-0.5));
        float _1274 = _1271 * (_1232.z + (-0.5));
        float _1281 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1239.x + (-0.5));
        float _1283 = _1281 * (_1239.y + (-0.5));
        float _1284 = _1281 * (_1239.z + (-0.5));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = _1252 * 0.5;
        float _1289 = _1262 * 0.5;
        float _1290 = _1272 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_570, _571, _572), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3794 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1315 + 1.0))) + _1320) * _1285;
        float _1330 = _1253 * 0.5;
        float _1331 = _1263 * 0.5;
        float _1332 = _1273 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_570, _571, _572), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _3827 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1357 + 1.0))) + _1362) * _1286;
        float _1372 = _1254 * 0.5;
        float _1373 = _1264 * 0.5;
        float _1374 = _1274 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_570, _571, _572), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _3860 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1399 + 1.0))) + _1404) * _1287;
        _1421 = _1254;
        _1422 = _1253;
        _1423 = _1252;
        _1424 = _1264;
        _1425 = _1263;
        _1426 = _1262;
        _1427 = _1274;
        _1428 = _1273;
        _1429 = _1272;
        _1430 = _1287;
        _1431 = _1286;
        _1432 = _1285;
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
    }
    else
    {
        _1421 = _1113;
        _1422 = _1113;
        _1423 = _1113;
        _1424 = _1113;
        _1425 = _1113;
        _1426 = _1113;
        _1427 = _1113;
        _1428 = _1113;
        _1429 = _1113;
        _1430 = _1113;
        _1431 = _1113;
        _1432 = _1113;
        _1433 = 0.0;
        _1434 = 0.0;
        _1435 = 0.0;
    }
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1125)) + _1125;
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1126)) + _1126;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1127)) + _1127;
    float _1468 = fma(_1447, cbSceneParam._m0[89u].z, fma(_1446, cbSceneParam._m0[89u].y, _1445 * cbSceneParam._m0[89u].x));
    float _1471 = fma(_1447, cbSceneParam._m0[90u].z, fma(_1446, cbSceneParam._m0[90u].y, _1445 * cbSceneParam._m0[90u].x));
    float _1474 = fma(_1447, cbSceneParam._m0[91u].z, fma(_1446, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1445));
    float _1489 = _747 * 0.5;
    float _1490 = _748 * 0.5;
    float _1491 = _749 * 0.5;
    float _1492 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1495 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1498 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1532;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1505 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1112, _1116, _1119, _1122));
        float _1509 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1114, _1117, _1120, _1123));
        float _1513 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1520 = dot(vec4(cbModelParam._m0[39u]), vec4(_1489, _1490, _1491, 1.0));
        _1532 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1532 = 1.0;
    }
    float _1543;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1534 = dot(vec4(cbModelParam._m0[40u]), vec4(_1489, _1490, _1491, 1.0));
        _1543 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1543 = 1.0;
    }
    float _1547 = (_1543 * cbModelParam._m0[1u].x) + (_1532 * (1.0 - cbModelParam._m0[1u].x));
    float _1557 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _573);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1557 : min(cbModelParam._m0[25u].z, _1557));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1606 = fma(_811, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803)) + cbModelParam._m0[13u].w;
        float _1610 = fma(_811, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803)) + cbModelParam._m0[14u].w;
        float _1614 = fma(_811, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803)) + cbModelParam._m0[15u].w;
        float _1617 = fma(_749, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747));
        float _1620 = fma(_749, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747));
        float _1623 = fma(_749, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747));
        float _1651;
        if (_1617 > 0.0)
        {
            _1651 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1651 = frontier_phi_14_12_ladder;
        }
        float _1855;
        if (_1620 > 0.0)
        {
            _1855 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1855 = frontier_phi_23_19_ladder;
        }
        float _2109;
        if (_1623 > 0.0)
        {
            _2109 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2109 = frontier_phi_35_30_ladder;
        }
        float _2111 = isnan(_1855) ? _1651 : (isnan(_1651) ? _1855 : min(_1651, _1855));
        float _2112 = isnan(_2109) ? _2111 : (isnan(_2111) ? _2109 : min(_2111, _2109));
        float _2116 = (_2112 * _1617) + _1606;
        float _2117 = (_2112 * _1620) + _1610;
        float _2118 = (_2112 * _1623) + _1614;
        float _2119 = _2112 * 9.9999997473787516355514526367188e-05;
        float _2121 = (-1.0) - _2119;
        float _2123 = _2119 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2118 > _2123) || ((_2118 < _2121) || ((_2117 > _2123) || ((_2117 < _2121) || ((_2116 < _2121) || (_2116 > _2123))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2246 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2118, cbModelParam._m0[9u].z, fma(_2117, cbModelParam._m0[9u].y, _2116 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2118, cbModelParam._m0[10u].z, fma(_2117, cbModelParam._m0[10u].y, _2116 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2118, cbModelParam._m0[11u].z, fma(_2117, cbModelParam._m0[11u].y, _2116 * cbModelParam._m0[11u].x))), _1558);
            frontier_phi_13_35_ladder = _2246.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2246.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2246.x * cbModelParam._m0[1u].y;
        }
        _1639 = frontier_phi_13_35_ladder_2;
        _1641 = frontier_phi_13_35_ladder_1;
        _1643 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_747, _748, _749), _1558);
        _1639 = _1627.x * cbModelParam._m0[1u].y;
        _1641 = _1627.y * cbModelParam._m0[1u].y;
        _1643 = _1627.z * cbModelParam._m0[1u].y;
    }
    float _1647 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _573);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1647 : min(cbModelParam._m0[25u].w, _1647));
    float _1738;
    float _1740;
    float _1742;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1702 = fma(_811, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803)) + cbModelParam._m0[21u].w;
        float _1706 = fma(_811, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803)) + cbModelParam._m0[22u].w;
        float _1710 = fma(_811, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803)) + cbModelParam._m0[23u].w;
        float _1713 = fma(_749, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747));
        float _1716 = fma(_749, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747));
        float _1719 = fma(_749, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747));
        float _1860;
        if (_1713 > 0.0)
        {
            _1860 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1860 = frontier_phi_25_21_ladder;
        }
        float _2136;
        if (_1716 > 0.0)
        {
            _2136 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2136 = frontier_phi_37_32_ladder;
        }
        float _2349;
        if (_1719 > 0.0)
        {
            _2349 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2349 = frontier_phi_46_43_ladder;
        }
        float _2351 = isnan(_2136) ? _1860 : (isnan(_1860) ? _2136 : min(_1860, _2136));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1713) + _1702;
        float _2357 = (_2352 * _1716) + _1706;
        float _2358 = (_2352 * _1719) + _1710;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2360 = (-1.0) - _2359;
        float _2362 = _2359 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2358 > _2362) || ((_2358 < _2360) || ((_2357 > _2362) || ((_2357 < _2360) || ((_2356 < _2360) || (_2356 > _2362))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2557 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2358, cbModelParam._m0[17u].z, fma(_2357, cbModelParam._m0[17u].y, _2356 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2358, cbModelParam._m0[18u].z, fma(_2357, cbModelParam._m0[18u].y, _2356 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2358, cbModelParam._m0[19u].z, fma(_2357, cbModelParam._m0[19u].y, _2356 * cbModelParam._m0[19u].x))), _1648);
            frontier_phi_22_46_ladder = _2557.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2557.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2557.x * cbModelParam._m0[1u].z;
        }
        _1738 = frontier_phi_22_46_ladder_2;
        _1740 = frontier_phi_22_46_ladder_1;
        _1742 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_747, _748, _749), _1648);
        _1738 = _1722.x * cbModelParam._m0[1u].z;
        _1740 = _1722.y * cbModelParam._m0[1u].z;
        _1742 = _1722.z * cbModelParam._m0[1u].z;
    }
    float _1755 = (((_774 * _723) + _775) * _739) * ((cbModelParam._m0[1u].w * (_1738 - _1639)) + _1639);
    float _1757 = (((_774 * _725) + _775) * _739) * ((cbModelParam._m0[1u].w * (_1740 - _1641)) + _1641);
    float _1759 = (((_774 * _726) + _775) * _739) * ((cbModelParam._m0[1u].w * (_1742 - _1643)) + _1643);
    float _1762 = fma(_1759, cbSceneParam._m0[89u].z, fma(_1757, cbSceneParam._m0[89u].y, _1755 * cbSceneParam._m0[89u].x));
    float _1765 = fma(_1759, cbSceneParam._m0[90u].z, fma(_1757, cbSceneParam._m0[90u].y, _1755 * cbSceneParam._m0[90u].x));
    float _1768 = fma(_1759, cbSceneParam._m0[91u].z, fma(_1757, cbSceneParam._m0[91u].y, _1755 * cbSceneParam._m0[91u].x));
    uvec4 _1778 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _1780 = _1778.x * 14u;
    uint _1781 = _1780 + 13u;
    float _1788 = _739 + (-1.0);
    float _1793 = (cbLight._m0[_1781].x * _1788) + 1.0;
    float _1794 = (cbLight._m0[_1781].y * _1788) + 1.0;
    float _1795 = (cbLight._m0[_1781].z * _1788) + 1.0;
    float _1796 = (cbLight._m0[_1781].w * _1788) + 1.0;
    uint _1797 = _1780 + 5u;
    float _1803 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
    uint _1807 = _1780 + 4u;
    float _1814 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
    uint _1818 = _1780 | 1u;
    float _1829 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_570, _571, _572));
    float _1832 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_570, _571, _572));
    float _3996 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _4007 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1837 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 0.3183098733425140380859375;
    float _1839 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * 0.3183098733425140380859375;
    float _1846 = ((cbLight._m0[_1797].x * _1803) * _1839) + ((cbLight._m0[_1807].x * _1814) * _1837);
    float _1847 = ((_1803 * cbLight._m0[_1797].y) * _1839) + ((_1814 * cbLight._m0[_1807].y) * _1837);
    float _1848 = ((_1803 * cbLight._m0[_1797].z) * _1839) + ((_1814 * cbLight._m0[_1807].z) * _1837);
    uvec4 _1852 = floatBitsToUint(cbLight._m0[_1780 + 12u]);
    bool _1854 = _1852.x == 0u;
    float _1865;
    float _1867;
    float _1869;
    if (_1854)
    {
        _1865 = _1846;
        _1867 = _1847;
        _1869 = _1848;
    }
    else
    {
        uint _1873 = _1780 + 6u;
        float _1889 = (dot(vec3(cbLight._m0[_1780 + 2u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _1890 = _1889 * _1889;
        float _4018 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1891 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1892 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _1865 = (((cbLight._m0[_1873].x * 0.3183098733425140380859375) * _1891) * _1892) + _1846;
        _1867 = (((cbLight._m0[_1873].y * 0.3183098733425140380859375) * _1891) * _1892) + _1847;
        _1869 = (((cbLight._m0[_1873].z * 0.3183098733425140380859375) * _1891) * _1892) + _1848;
    }
    bool _1872 = _1852.y == 0u;
    float _1910;
    float _1912;
    float _1914;
    if (_1872)
    {
        _1910 = _1865;
        _1912 = _1867;
        _1914 = _1869;
    }
    else
    {
        uint _2080 = _1780 + 7u;
        float _2096 = (dot(vec3(cbLight._m0[_1780 + 3u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _2097 = _2096 * _2096;
        float _4034 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _2099 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _1910 = (((cbLight._m0[_2080].x * 0.3183098733425140380859375) * _2098) * _2099) + _1865;
        _1912 = (((cbLight._m0[_2080].y * 0.3183098733425140380859375) * _2098) * _2099) + _1867;
        _1914 = (((cbLight._m0[_2080].z * 0.3183098733425140380859375) * _2098) * _2099) + _1869;
    }
    uint _1917 = _1780 + 8u;
    float _1930 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1780].w)) * _573) * 0.949999988079071044921875);
    float _1931 = _1930 * _1930;
    float _1932 = cbLight._m0[_1780].x + _650;
    float _1933 = cbLight._m0[_1780].y + _651;
    float _1934 = cbLight._m0[_1780].z + _652;
    float _1938 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
    float _1939 = _1938 * _1932;
    float _1940 = _1938 * _1933;
    float _1941 = _1938 * _1934;
    float _1942 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1780].xyz));
    float _4050 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _1946 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _1947 = dot(vec3(_570, _571, _572), vec3(_1939, _1940, _1941));
    float _4072 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _1951 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_1939, _1940, _1941));
    float _4083 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1955 = _1931 * _1931;
    float _1959 = ((_1950 * _1950) * (_1955 + (-1.0))) + 1.0;
    float _1967 = exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0);
    float _1968 = 0.959999978542327880859375 - _720;
    float _1970 = 0.959999978542327880859375 - _721;
    float _1971 = 0.959999978542327880859375 - _722;
    float _1978 = 1.0 - _1931;
    float _1989 = (0.5 / (((_1946 * ((_1945 * _1978) + _1931)) + 9.9999999392252902907785028219223e-09) + (((_1946 * _1978) + _1931) * _1945))) * _1945;
    float _4094 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1991 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1955 / ((_1959 * _1959) * 3.141590118408203125));
    uint _2002 = _1780 + 9u;
    float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1818].w)) * _573) * 0.949999988079071044921875);
    float _2014 = _2013 * _2013;
    float _2015 = cbLight._m0[_1818].x + _650;
    float _2016 = cbLight._m0[_1818].y + _651;
    float _2017 = cbLight._m0[_1818].z + _652;
    float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
    float _2022 = _2021 * _2015;
    float _2023 = _2021 * _2016;
    float _2024 = _2021 * _2017;
    float _2025 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1818].xyz));
    float _4105 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _2029 = dot(vec3(_570, _571, _572), vec3(_2022, _2023, _2024));
    float _4116 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_2022, _2023, _2024));
    float _4127 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2037 = _2014 * _2014;
    float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
    float _2048 = exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0);
    float _2055 = 1.0 - _2014;
    float _2065 = (0.5 / (((_1946 * ((_2028 * _2055) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_1946 * _2055) + _2014) * _2028))) * _2028;
    float _4138 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2067 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
    float _2077 = (((((_2048 * _1968) + _723) * cbLight._m0[_2002].x) * _2067) * _1803) + (((((_1967 * _1968) + _723) * cbLight._m0[_1917].x) * _1991) * _1814);
    float _2078 = (((((_2048 * _1970) + _725) * cbLight._m0[_2002].y) * _2067) * _1803) + (((((_1967 * _1970) + _725) * cbLight._m0[_1917].y) * _1991) * _1814);
    float _2079 = (((((_2048 * _1971) + _726) * cbLight._m0[_2002].z) * _2067) * _1803) + (((((_1967 * _1971) + _726) * cbLight._m0[_1917].z) * _1991) * _1814);
    float _2141;
    float _2143;
    float _2145;
    if (_1854)
    {
        _2141 = _2077;
        _2143 = _2078;
        _2145 = _2079;
    }
    else
    {
        uint _2147 = _1780 + 2u;
        uint _2151 = _1780 + 10u;
        float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _573) * 0.949999988079071044921875);
        float _2166 = _2165 * _2165;
        float _2167 = cbLight._m0[_2147].x + _650;
        float _2168 = cbLight._m0[_2147].y + _651;
        float _2169 = cbLight._m0[_2147].z + _652;
        float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
        float _2174 = _2173 * _2167;
        float _2175 = _2173 * _2168;
        float _2176 = _2173 * _2169;
        float _2177 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2147].xyz));
        float _4149 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2181 = dot(vec3(_570, _571, _572), vec3(_2174, _2175, _2176));
        float _4160 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2185 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2174, _2175, _2176));
        float _4171 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2189 = _2166 * _2166;
        float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
        float _2200 = exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0);
        float _2207 = 1.0 - _2166;
        float _2217 = (0.5 / (((_1946 * ((_2180 * _2207) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_1946 * _2207) + _2166) * _2180))) * _2180;
        float _4182 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2219 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
        float _2220 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _2141 = (((((_2200 * _1968) + _723) * cbLight._m0[_2151].x) * _2219) * _2220) + _2077;
        _2143 = (((((_2200 * _1970) + _725) * cbLight._m0[_2151].y) * _2219) * _2220) + _2078;
        _2145 = (((((_2200 * _1971) + _726) * cbLight._m0[_2151].z) * _2219) * _2220) + _2079;
    }
    float _2255;
    float _2257;
    float _2259;
    if (_1872)
    {
        _2255 = _2141;
        _2257 = _2143;
        _2259 = _2145;
    }
    else
    {
        uint _2266 = _1780 + 3u;
        uint _2270 = _1780 + 11u;
        float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _573) * 0.949999988079071044921875);
        float _2285 = _2284 * _2284;
        float _2286 = cbLight._m0[_2266].x + _650;
        float _2287 = cbLight._m0[_2266].y + _651;
        float _2288 = cbLight._m0[_2266].z + _652;
        float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
        float _2293 = _2292 * _2286;
        float _2294 = _2292 * _2287;
        float _2295 = _2292 * _2288;
        float _2296 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2266].xyz));
        float _4198 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2300 = dot(vec3(_570, _571, _572), vec3(_2293, _2294, _2295));
        float _4209 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2304 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2293, _2294, _2295));
        float _4220 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2308 = _2285 * _2285;
        float _2312 = ((_2303 * _2303) * (_2308 + (-1.0))) + 1.0;
        float _2319 = exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0);
        float _2326 = 1.0 - _2285;
        float _2336 = (0.5 / (((_1946 * ((_2299 * _2326) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_1946 * _2326) + _2285) * _2299))) * _2299;
        float _4231 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2338 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2308 / ((_2312 * _2312) * 3.141590118408203125));
        float _2339 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _2255 = (((((_2319 * _1968) + _723) * cbLight._m0[_2270].x) * _2338) * _2339) + _2141;
        _2257 = (((((_2319 * _1970) + _725) * cbLight._m0[_2270].y) * _2338) * _2339) + _2143;
        _2259 = (((((_2319 * _1971) + _726) * cbLight._m0[_2270].z) * _2338) * _2339) + _2145;
    }
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    if (_1778.y == 0u)
    {
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2414;
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2414;
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2414;
        uvec4 _2429 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2430 = _2429.x;
        uint _2441 = uint((float(_2429.y) * floor(float(uint(cbSceneParam._m0[85u].y * _659) / _2430))) + floor(float(uint(cbSceneParam._m0[85u].x * _658) / _2430)));
        float _2451 = (log2(_2417 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2452 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        uint _2455 = uint(isnan(14.0) ? _2452 : (isnan(_2452) ? 14.0 : min(_2452, 14.0)));
        uvec4 _2460 = texelFetch(g_lightClusterGridBuffer, int(((_2455 << 2u) + (_2441 << 6u)) >> 2u));
        uint _2461 = _2460.x;
        uint _2462 = _2429.z;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        if (((((1u << ((_2462 >> 4u) & 15u)) + 4294967295u) & _2461) == 0u) || ((_2462 & 240u) == 0u))
        {
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
        }
        else
        {
            float _2563;
            float _2565;
            float _2567;
            float _2569;
            float _2571;
            float _2573;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            uint _2713 = 0u;
            uint _2722;
            bool _2723;
            for (;;)
            {
                _2722 = texelFetch(g_lightClassification, int((((_2455 << 5u) + (_2441 << 9u)) + (_2713 << 2u)) >> 2u)).x;
                _2723 = _2722 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2723)
                {
                    frontier_phi_61_pred = _2707;
                    frontier_phi_61_pred_1 = _2712;
                    frontier_phi_61_pred_2 = _2711;
                    frontier_phi_61_pred_3 = _2710;
                    frontier_phi_61_pred_4 = _2709;
                    frontier_phi_61_pred_5 = _2708;
                }
                else
                {
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    uint _2837;
                    _2831 = _2707;
                    _2832 = _2708;
                    _2833 = _2709;
                    _2834 = _2710;
                    _2835 = _2711;
                    _2836 = _2712;
                    _2837 = _2722;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    for (;;)
                    {
                        uint _2841 = uint(findLSB(_2837)) + (_2713 << 5u);
                        uint _2838 = (_2837 + 4294967295u) & _2837;
                        uint _2843 = _2841 * 48u;
                        vec4 _2857 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 3u)).x));
                        uint _2863 = (_2841 * 48u) + 4u;
                        vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 3u)).x));
                        uint _2882 = (_2841 * 48u) + 8u;
                        vec3 _2893 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x));
                        float _2897 = _2857.x - _2415;
                        float _2898 = _2857.y - _2416;
                        float _2899 = _2857.z - _2417;
                        float _2900 = dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899));
                        float _2903 = inversesqrt(_2900);
                        float _2904 = _2903 * _2897;
                        float _2905 = _2903 * _2898;
                        float _2906 = _2903 * _2899;
                        float _2907 = dot(vec3(_680, _683, _686), vec3(_2904, _2905, _2906));
                        float _2912 = 1.0 - (_2900 * _2857.w);
                        float _4257 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2913 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                        float _2914 = sqrt(_2900) * _2876.w;
                        float _2917 = 1.39999997615814208984375 / (_2914 + 1.39999997615814208984375);
                        float _2918 = _2917 * _2917;
                        float _2921 = ((1.0 - _2918) * _2907) + _2918;
                        float _2924 = _2914 * _2914;
                        float _2928 = ((isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0))) * _2913) / ((_2924 * 0.699999988079071044921875) + 1.0);
                        float _2932 = (-0.0) - _2415;
                        float _2933 = (-0.0) - _2416;
                        float _2934 = (-0.0) - _2417;
                        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
                        float _2939 = _2938 * _2932;
                        float _2940 = _2938 * _2933;
                        float _2941 = _2938 * _2934;
                        float _2949 = exp2(log2(1.0 / ((_2924 * 3.5) + 5.0)) * 0.25);
                        float _2950 = 1.0 - _755;
                        float _2957 = sqrt(1.0 - ((1.0 - (_2950 * _2950)) * (1.0 - (_2949 * _2949))));
                        float _2958 = _2957 * _2957;
                        float _2959 = _2958 * _2958;
                        float _2960 = _2939 + _2904;
                        float _2961 = _2940 + _2905;
                        float _2962 = _2941 + _2906;
                        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
                        float _2970 = dot(vec3(_680, _683, _686), vec3(_2939, _2940, _2941));
                        float _4273 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2973 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                        float _2974 = dot(vec3(_680, _683, _686), vec3(_2966 * _2960, _2966 * _2961, _2966 * _2962));
                        float _4284 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2977 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _2981 = ((_2977 * _2977) * (_2959 + (-1.0))) + 1.0;
                        float _2982 = _2917 * _2958;
                        float _2983 = _2982 * _2982;
                        float _2986 = ((1.0 - _2983) * _2907) + _2983;
                        float _4295 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2987 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _2988 = 1.0 - _2958;
                        float _2998 = (0.5 / (((_2987 * ((_2973 * _2988) + _2958)) + 9.9999999392252902907785028219223e-09) + (((_2987 * _2988) + _2958) * _2973))) * _2987;
                        float _4306 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3009 = (((_2959 * 3.1415927410125732421875) * (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) / ((_2981 * _2981) * ((_2924 * 2.1991131305694580078125) + 3.141590118408203125))) * _2913;
                        _2766 = (_2928 * _2876.x) + _2834;
                        _2767 = (_2928 * _2876.y) + _2835;
                        _2768 = (_2928 * _2876.z) + _2836;
                        _2763 = (_3009 * _2893.x) + _2831;
                        _2764 = (_3009 * _2893.y) + _2832;
                        _2765 = (_3009 * _2893.z) + _2833;
                        if (_2838 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2831 = _2763;
                            _2832 = _2764;
                            _2833 = _2765;
                            _2834 = _2766;
                            _2835 = _2767;
                            _2836 = _2768;
                            _2837 = _2838;
                        }
                    }
                    frontier_phi_61_pred = _2763;
                    frontier_phi_61_pred_1 = _2768;
                    frontier_phi_61_pred_2 = _2767;
                    frontier_phi_61_pred_3 = _2766;
                    frontier_phi_61_pred_4 = _2765;
                    frontier_phi_61_pred_5 = _2764;
                }
                _2563 = frontier_phi_61_pred;
                _2573 = frontier_phi_61_pred_1;
                _2571 = frontier_phi_61_pred_2;
                _2569 = frontier_phi_61_pred_3;
                _2567 = frontier_phi_61_pred_4;
                _2565 = frontier_phi_61_pred_5;
                uint _2714 = _2713 + 1u;
                if (_2714 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2707 = _2563;
                    _2708 = _2565;
                    _2709 = _2567;
                    _2710 = _2569;
                    _2711 = _2571;
                    _2712 = _2573;
                    _2713 = _2714;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
        }
        uvec4 _2576 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2577 = _2576.z;
        uint _2579 = (_2577 >> 8u) & 15u;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        if (((4294967295u << _2579) & _2461) == 0u)
        {
            _2675 = _2562;
            _2677 = _2564;
            _2679 = _2566;
            _2681 = _2568;
            _2683 = _2570;
            _2685 = _2572;
        }
        else
        {
            float _2700 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
            float _2701 = _2700 * _2415;
            float _2702 = _2700 * _2416;
            float _2703 = _2700 * _2417;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2579 < ((_2577 >> 12u) & 15u))
            {
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2684;
                float _2686;
                float _2814 = _2562;
                float _2815 = _2564;
                float _2816 = _2566;
                float _2817 = _2568;
                float _2818 = _2570;
                float _2819 = _2572;
                uint _2820 = _2579;
                uint _2829;
                bool _2830;
                for (;;)
                {
                    _2829 = texelFetch(g_lightClassification, int((((_2455 << 5u) + (_2441 << 9u)) + (_2820 << 2u)) >> 2u)).x;
                    _2830 = _2829 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2830)
                    {
                        frontier_phi_67_pred = _2817;
                        frontier_phi_67_pred_1 = _2818;
                        frontier_phi_67_pred_2 = _2819;
                        frontier_phi_67_pred_3 = _2816;
                        frontier_phi_67_pred_4 = _2815;
                        frontier_phi_67_pred_5 = _2814;
                    }
                    else
                    {
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3027 = _2814;
                        float _3028 = _2815;
                        float _3029 = _2816;
                        float _3030 = _2817;
                        float _3031 = _2818;
                        float _3032 = _2819;
                        uint _3033 = _2829;
                        uint _3034;
                        vec4 _3059;
                        float _3060;
                        vec4 _3075;
                        vec3 _3087;
                        vec4 _3102;
                        vec4 _3117;
                        float _3163;
                        bool _3164;
                        for (;;)
                        {
                            uint _3044 = ((_2820 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3033));
                            _3034 = (_3033 + 4294967295u) & _3033;
                            uint _3046 = _3044 * 40u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            _3060 = _3059.w;
                            uint _3062 = (_3044 * 40u) + 4u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3077 = (_3044 * 40u) + 8u;
                            _3087 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x));
                            uint _3089 = (_3044 * 40u) + 16u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3104 = (_3044 * 40u) + 20u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3119 = (_3044 * 40u) + 24u;
                            vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3138 = (_3044 * 40u) + 28u;
                            vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            _3163 = fma(_2417, _3151.z, fma(_2416, _3151.y, _3151.x * _2415)) + _3151.w;
                            _3164 = !((fma(_2417, _3132.z, fma(_2416, _3132.y, _3132.x * _2415)) + _3132.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3164)
                            {
                                float _3191 = _3059.x - _2415;
                                float _3192 = _3059.y - _2416;
                                float _3193 = _3059.z - _2417;
                                float _3194 = dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193));
                                float _3197 = inversesqrt(_3194);
                                float _3198 = _3197 * _3191;
                                float _3199 = _3197 * _3192;
                                float _3200 = _3197 * _3193;
                                float _3204 = 1.0 - (_3194 / (_3060 * _3060));
                                float _4317 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3205 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3209 = sqrt(_3194) * _3075.w;
                                float _3211 = 1.39999997615814208984375 / (_3209 + 1.39999997615814208984375);
                                float _3212 = _3211 * _3211;
                                float _3215 = ((1.0 - _3212) * dot(vec3(_3198, _3199, _3200), vec3(_680, _683, _686))) + _3212;
                                float _3218 = _3209 * _3209;
                                float _3222 = (fma(_2417, _3102.z, fma(_2416, _3102.y, _3102.x * _2415)) + _3102.w) / _3163;
                                float _3223 = (fma(_2417, _3117.z, fma(_2416, _3117.y, _3117.x * _2415)) + _3117.w) / _3163;
                                float _3227 = 1.0 - dot(vec2(_3222, _3223), vec2(_3222, _3223));
                                float _4333 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                                float _3229 = _3228 * (((isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))) * _3205) / ((_3218 * 0.699999988079071044921875) + 1.0));
                                float _3241 = exp2(log2(1.0 / ((_3218 * 3.5) + 5.0)) * 0.25);
                                float _3242 = 1.0 - _755;
                                float _3249 = sqrt(1.0 - ((1.0 - (_3242 * _3242)) * (1.0 - (_3241 * _3241))));
                                float _3250 = _3249 * _3249;
                                float _3251 = _3250 * _3250;
                                float _3252 = _3198 - _2701;
                                float _3253 = _3199 - _2702;
                                float _3254 = _3200 - _2703;
                                float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                                float _3262 = dot(vec3(_680, _683, _686), vec3((-0.0) - _2701, (-0.0) - _2702, (-0.0) - _2703));
                                float _4344 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3265 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3266 = dot(vec3(_680, _683, _686), vec3(_3258 * _3252, _3258 * _3253, _3258 * _3254));
                                float _4355 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3269 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3273 = ((_3269 * _3269) * (_3251 + (-1.0))) + 1.0;
                                float _3274 = _3211 * _3250;
                                float _3275 = _3274 * _3274;
                                float _3281 = ((1.0 - _3275) * dot(vec3(_680, _683, _686), vec3(_3198, _3199, _3200))) + _3275;
                                float _4366 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3283 = 1.0 - _3250;
                                float _3293 = (0.5 / (((_3282 * ((_3265 * _3283) + _3250)) + 9.9999999392252902907785028219223e-09) + (((_3282 * _3283) + _3250) * _3265))) * _3282;
                                float _4377 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3303 = (_3228 * _3205) * (((_3251 * 3.1415927410125732421875) * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) / ((_3273 * _3273) * ((_3218 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3303 * _3087.x;
                                frontier_phi_73_pred_1 = _3303 * _3087.y;
                                frontier_phi_73_pred_2 = _3229 * _3075.z;
                                frontier_phi_73_pred_3 = _3229 * _3075.y;
                                frontier_phi_73_pred_4 = _3229 * _3075.x;
                                frontier_phi_73_pred_5 = _3303 * _3087.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3307 = frontier_phi_73_pred;
                            _3308 = frontier_phi_73_pred_1;
                            _3312 = frontier_phi_73_pred_2;
                            _3311 = frontier_phi_73_pred_3;
                            _3310 = frontier_phi_73_pred_4;
                            _3309 = frontier_phi_73_pred_5;
                            _3017 = _3310 + _3030;
                            _3018 = _3311 + _3031;
                            _3019 = _3312 + _3032;
                            _3014 = _3307 + _3027;
                            _3015 = _3308 + _3028;
                            _3016 = _3309 + _3029;
                            if (_3034 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3034;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3017;
                        frontier_phi_67_pred_1 = _3018;
                        frontier_phi_67_pred_2 = _3019;
                        frontier_phi_67_pred_3 = _3016;
                        frontier_phi_67_pred_4 = _3015;
                        frontier_phi_67_pred_5 = _3014;
                    }
                    _2682 = frontier_phi_67_pred;
                    _2684 = frontier_phi_67_pred_1;
                    _2686 = frontier_phi_67_pred_2;
                    _2680 = frontier_phi_67_pred_3;
                    _2678 = frontier_phi_67_pred_4;
                    _2676 = frontier_phi_67_pred_5;
                    uint _2821 = _2820 + 1u;
                    if (_2821 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2814 = _2676;
                        _2815 = _2678;
                        _2816 = _2680;
                        _2817 = _2682;
                        _2818 = _2684;
                        _2819 = _2686;
                        _2820 = _2821;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2684;
                frontier_phi_55_56_ladder_1 = _2686;
                frontier_phi_55_56_ladder_2 = _2682;
                frontier_phi_55_56_ladder_3 = _2680;
                frontier_phi_55_56_ladder_4 = _2678;
                frontier_phi_55_56_ladder_5 = _2676;
            }
            else
            {
                frontier_phi_55_56_ladder = _2570;
                frontier_phi_55_56_ladder_1 = _2572;
                frontier_phi_55_56_ladder_2 = _2568;
                frontier_phi_55_56_ladder_3 = _2566;
                frontier_phi_55_56_ladder_4 = _2564;
                frontier_phi_55_56_ladder_5 = _2562;
            }
            _2675 = frontier_phi_55_56_ladder_5;
            _2677 = frontier_phi_55_56_ladder_4;
            _2679 = frontier_phi_55_56_ladder_3;
            _2681 = frontier_phi_55_56_ladder_2;
            _2683 = frontier_phi_55_56_ladder;
            _2685 = frontier_phi_55_56_ladder_1;
        }
        float _2690 = isnan(1.0) ? _739 : (isnan(_739) ? 1.0 : min(_739, 1.0));
        _2474 = (_2690 * _2681) + _1910;
        _2476 = (_2690 * _2683) + _1912;
        _2478 = (_2690 * _2685) + _1914;
        _2480 = ((_2675 * _723) * _2690) + _2255;
        _2482 = ((_2677 * _725) * _2690) + _2257;
        _2484 = ((_2679 * _726) * _2690) + _2259;
    }
    else
    {
        _2474 = _1910;
        _2476 = _1912;
        _2478 = _1914;
        _2480 = _2255;
        _2482 = _2257;
        _2484 = _2259;
    }
    float _4393 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4404 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4415 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    uint _2504 = _252 + 6u;
    float _2512 = _658 / cbSceneParam._m0[86u].x;
    float _2513 = _659 / cbSceneParam._m0[86u].y;
    vec4 _2527 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2512, _2513, (log2((isnan(cbSceneParam._m0[77u].w) ? _592 : (isnan(_592) ? cbSceneParam._m0[77u].w : min(_592, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2529 = _2527.x;
    float _2530 = _2527.y;
    float _2531 = _2527.z;
    float _2532 = _2527.w;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    if (_592 > cbSceneParam._m0[78u].w)
    {
        float _2587 = isnan(_592) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _592 : min(cbSceneParam._m0[80u].w, _592));
        float _2588 = _2587 / _592;
        float _2599 = _2588 * _643;
        float _2600 = _644 * _2588;
        float _2601 = (-0.0) - _2600;
        float _2603 = _2588 * _645;
        float _2605 = (cbSceneParam._m0[77u].w * _2601) / _2587;
        float _2606 = _2605 + cbSceneParam._m0[79u].w;
        float _2607 = cbSceneParam._m0[79u].w - _2600;
        float _2613 = sqrt(((_2599 * _2599) + (_2600 * _2600)) + (_2603 * _2603));
        float _2616 = (1.0 - (cbSceneParam._m0[77u].w / _2587)) * _2613;
        float _2621 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2623 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2776;
        if (abs((_2601 - _2605) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2776 = ((((_2606 > 0.0) ? exp2(_2621 * _2606) : (2.0 - exp2(_2623 * _2606))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2616;
        }
        else
        {
            float _2736 = 1.0 / cbSceneParam._m0[80u].x;
            float _2737 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : max(_2606, _2607));
            float _2738 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : min(_2606, _2607));
            float _2747 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : min(_2737, 0.0));
            float _2748 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : min(_2738, 0.0));
            _2776 = ((abs(_2613 / _2601) * cbSceneParam._m0[80u].y) * ((((_2747 - _2748) * 2.0) - ((exp2(_2621 * (isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0)))) - exp2(_2621 * (isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0))))) * _2736)) - ((exp2(_2623 * _2747) - exp2(_2623 * _2748)) * _2736))) + (_2616 * cbSceneParam._m0[80u].z);
        }
        vec4 _2778 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2512, _2513, 1.0), 0.0);
        float _2787 = exp2((_2776 * (-1.44269502162933349609375)) * (1.0 - _2778.w));
        float _2788 = log2(_2787);
        float _2804 = log2(_2532);
        _2625 = (exp2(_2804 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2788 * cbSceneParam._m0[78u].x)) * _2778.x) / cbSceneParam._m0[78u].x)) + _2529;
        _2627 = (exp2(_2804 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2788 * cbSceneParam._m0[78u].y)) * _2778.y) / cbSceneParam._m0[78u].y)) + _2530;
        _2629 = (exp2(_2804 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2788 * cbSceneParam._m0[78u].z)) * _2778.z) / cbSceneParam._m0[78u].z)) + _2531;
        _2631 = _2787 * _2532;
    }
    else
    {
        _2625 = _2529;
        _2627 = _2530;
        _2629 = _2531;
        _2631 = _2532;
    }
    float _2643 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2644 = _2643 == 3.0;
    float _2645 = log2(_2631);
    float _2652 = exp2(_2645 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2474 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _739))) + ((_2480 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1547)) * cbPerFrame._m0[3u].x));
    float _2653 = exp2(_2645 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2476 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _739))) + ((_2482 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1547)) * cbPerFrame._m0[3u].x));
    float _2654 = exp2(_2645 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2478 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _739))) + ((_2484 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1547)) * cbPerFrame._m0[3u].x));
    float _2663 = (_2643 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2663 * (_2644 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2625)));
    SV_Target.y = _2663 * (_2644 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2627)));
    SV_Target.z = _2663 * (_2644 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2629)));
    SV_Target.w = cbInstanceData._m0[_2504].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2504].w;
}


