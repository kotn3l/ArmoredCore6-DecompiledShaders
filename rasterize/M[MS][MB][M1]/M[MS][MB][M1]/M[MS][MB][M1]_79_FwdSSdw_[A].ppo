#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1343;
float _3748;
float _3749;
float _3750;
float _3751;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3760 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _460 = _458.x;
    float _461 = _458.y;
    float _462 = _458.z;
    float _471 = ((_441.z - _462) * _394) + _462;
    float _474 = ((((_441.x - _460) * _394) + _460) * 2.0) + (-1.0);
    float _475 = ((((_441.y - _461) * _394) + _461) * 2.0) + (-1.0);
    float _476 = dot(vec2(_474, _475), vec2(_474, _475));
    float _3771 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _481 = sqrt(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))));
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _515 = (_474 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_416.x * 2.0) + (-1.0)))) + (((_503.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _516 = (_475 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_416.y * 2.0) + (-1.0)))) + (((_503.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _530 = _528.x;
    float _531 = 1.0 - _530;
    float _559 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_530 - _531) * cbMtdParam._m0[24u].w) + _531) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3782 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _568 = ((((cbMtdParam._m0[10u].x - _401) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _560) + _401;
    float _569 = ((((cbMtdParam._m0[10u].y - _402) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _560) + _402;
    float _570 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _403)) * _560) + _403;
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _596 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _598 = _596.x;
    float _616 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _598) * _394) + _598;
    float _620 = ((_582.x - _616) * cbMtdParam._m0[19u].z) + _616;
    float _622 = _620 - (_620 * _560);
    float _627 = (((_416.z - _471) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _471;
    float _631 = ((_503.z - _627) * cbMtdParam._m0[19u].w) + _627;
    float _635 = ((cbMtdParam._m0[23u].y - _631) * _560) + _631;
    vec4 _654 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _656 = _654.x;
    float _657 = _654.y;
    float _661 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_245, _246, _247, 0.0));
    vec4 _676 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _276) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _277) + cbTextureTilingScale._m0[18u].w));
    float _678 = _676.x;
    float _683 = fract(_676.w + cbPerFrame._m0[22u].x);
    float _685 = (1.0 - _683) * _678;
    float _690 = ((_683 + (-1.0)) + _678) * 9.0;
    float _692 = ((_678 + (-1.0)) + _683) * 9.0;
    float _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _694 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _708 = (_685 * ((_676.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _693 : (isnan(_693) ? 3.0 : min(_693, 3.0))) * 3.1415927410125732421875);
    float _710 = (_685 * ((_676.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _694 : (isnan(_694) ? 3.0 : min(_694, 3.0))) * 3.1415927410125732421875);
    float _714 = inversesqrt(dot(vec3(_708, _710, 1.0), vec3(_708, _710, 1.0)));
    float _730 = (((((0.5 - _656) + ((_708 * 0.5) * _714)) * _661) + _656) * 2.0) + (-1.0);
    float _731 = (((((0.5 - _657) + ((_714 * 0.5) * _710)) * _661) + _657) * 2.0) + (-1.0);
    float _732 = dot(vec2(_730, _731), vec2(_730, _731));
    float _3813 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _748 = ((((cbMtdParam._m0[22u].z * _515) - _515) + _730) * _560) + _515;
    float _749 = ((((cbMtdParam._m0[22u].z * _516) - _516) + _731) * _560) + _516;
    float _750 = (_560 * (sqrt(1.0 - (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) - _481)) + _481;
    float _752 = cbMtdParam._m0[22u].x + _503.w;
    float _755 = fma(_750, _245, fma(_749, _251 * TANGENT.x, (_237 * _229) * _748));
    float _758 = fma(_750, _246, fma(_749, _251 * TANGENT.y, (_237 * _230) * _748));
    float _761 = fma(_750, _247, fma(_749, _251 * TANGENT.z, (_237 * _231) * _748));
    float _765 = inversesqrt(dot(vec3(_755, _758, _761), vec3(_755, _758, _761)));
    float _766 = _765 * _755;
    float _767 = _765 * _758;
    float _768 = _765 * _761;
    float _3824 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _769 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _3846 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3857 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3868 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _3879 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _774 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _788 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _838 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _828);
    float _839 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _828);
    float _840 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _828);
    float _844 = inversesqrt(dot(vec3(_838, _839, _840), vec3(_838, _839, _840)));
    float _845 = _838 * _844;
    float _846 = _839 * _844;
    float _847 = _840 * _844;
    vec4 _852 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _854 = _852.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1025 = sqrt(((_838 * _838) + (_839 * _839)) + (_840 * _840));
        float _1031 = (cbMatDynParam._m0[5u].x * _1025) + cbMatDynParam._m0[5u].y;
        float _3890 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1036 = (cbMatDynParam._m0[5u].z * _1025) + cbMatDynParam._m0[5u].w;
        float _3901 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) - _1032)) + _1032) < ((_854 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _865 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _866 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _884 = fma(_768, cbSceneParam._m0[5u].z, fma(_767, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _766));
    float _887 = fma(_768, cbSceneParam._m0[6u].z, fma(_767, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _766));
    float _890 = fma(_768, cbSceneParam._m0[7u].z, fma(_767, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _766));
    uint _903 = _257 + 9u;
    uint _904 = _903 + uint(cbMatDynParam._m0[0u].w);
    float _910 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * cbInstanceData._m0[_904].x;
    float _911 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_904].y;
    float _912 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_904].z;
    float _3912 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _916 = 1.0 - _774;
    float _917 = _913 * _916;
    float _918 = _914 * _916;
    float _919 = _915 * _916;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _774;
    float _925 = (_914 + (-0.039999999105930328369140625)) * _774;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _774;
    float _927 = _924 + 0.039999999105930328369140625;
    float _929 = _925 + 0.039999999105930328369140625;
    float _930 = _926 + 0.039999999105930328369140625;
    vec4 _939 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _865, cbSceneParam._m0[86u].y * _866));
    float _943 = ((isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * TEXCOORD_5.w) * _939.x;
    float _944 = dot(vec3(_766, _767, _768), vec3(_845, _846, _847));
    float _947 = _944 * 2.0;
    float _951 = (_947 * _766) - _845;
    float _952 = (_947 * _767) - _846;
    float _953 = (_947 * _768) - _847;
    float _957 = abs(dot(vec3(_845, _846, _847), vec3(_766, _767, _768)));
    float _3945 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _959 = sqrt(_769);
    float _971 = exp2((_959 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_959 * 3.0));
    float _977 = (1.0 - _971) * ((_959 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _978 = _971 * _959;
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1342;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1068 = fma(_1014, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006));
        float _1072 = fma(_1014, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006));
        float _1076 = fma(_1014, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006));
        float _1100 = _1006 + _766;
        float _1101 = _1010 + _767;
        float _1102 = _1014 + _768;
        float _1112 = fma(_1102, cbModelParam._m0[26u].z, fma(_1101, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1100)) - _1068;
        float _1113 = fma(_1102, cbModelParam._m0[27u].z, fma(_1101, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1100)) - _1072;
        float _1114 = fma(_1102, cbModelParam._m0[28u].z, fma(_1101, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1100)) - _1076;
        float _1118 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
        float _1131 = ((_1118 * _1112) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1068 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1118 * _1113) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1072 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1118 * _1114) / cbModelParam._m0[34u].z) + ((((((_1076 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        float _1170 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1136.x + (-0.5));
        float _1172 = _1170 * (_1136.y + (-0.5));
        float _1173 = _1170 * (_1136.z + (-0.5));
        float _1180 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1143.x + (-0.5));
        float _1182 = _1180 * (_1143.y + (-0.5));
        float _1183 = _1180 * (_1143.z + (-0.5));
        float _1190 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1150.x + (-0.5));
        float _1192 = _1190 * (_1150.y + (-0.5));
        float _1193 = _1190 * (_1150.z + (-0.5));
        float _1200 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1157.x + (-0.5));
        float _1202 = _1200 * (_1157.y + (-0.5));
        float _1203 = _1200 * (_1157.z + (-0.5));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = _1171 * 0.5;
        float _1208 = _1181 * 0.5;
        float _1209 = _1191 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1224 = (dot(vec3(_766, _767, _768), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1234 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3993 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1236 + 1.0))) + _1241) * _1204;
        float _1251 = _1172 * 0.5;
        float _1252 = _1182 * 0.5;
        float _1253 = _1192 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_766, _767, _768), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _4026 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1278 + 1.0))) + _1283) * _1205;
        float _1293 = _1173 * 0.5;
        float _1294 = _1183 * 0.5;
        float _1295 = _1193 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_766, _767, _768), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4059 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1320 + 1.0))) + _1325) * _1206;
        _1342 = _1173;
        _1344 = _1172;
        _1345 = _1171;
        _1346 = _1183;
        _1347 = _1182;
        _1348 = _1181;
        _1349 = _1193;
        _1350 = _1192;
        _1351 = _1191;
        _1352 = _1206;
        _1353 = _1205;
        _1354 = _1204;
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
    }
    else
    {
        _1342 = _1343;
        _1344 = _1343;
        _1345 = _1343;
        _1346 = _1343;
        _1347 = _1343;
        _1348 = _1343;
        _1349 = _1343;
        _1350 = _1343;
        _1351 = _1343;
        _1352 = _1343;
        _1353 = _1343;
        _1354 = _1343;
        _1355 = 0.0;
        _1356 = 0.0;
        _1357 = 0.0;
    }
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1385 = fma(_1014, cbModelParam._m0[30u].z, fma(_1010, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006));
        float _1389 = fma(_1014, cbModelParam._m0[31u].z, fma(_1010, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006));
        float _1393 = fma(_1014, cbModelParam._m0[32u].z, fma(_1010, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006));
        float _1416 = _1006 + _766;
        float _1417 = _1010 + _767;
        float _1418 = _1014 + _768;
        float _1428 = fma(_1418, cbModelParam._m0[30u].z, fma(_1417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1416)) - _1385;
        float _1429 = fma(_1418, cbModelParam._m0[31u].z, fma(_1417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1416)) - _1389;
        float _1430 = fma(_1418, cbModelParam._m0[32u].z, fma(_1417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1416)) - _1393;
        float _1434 = inversesqrt(dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430)));
        float _1447 = ((_1434 * _1428) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1385 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1434 * _1429) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1389 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1434 * _1430) / cbModelParam._m0[35u].z) + ((((((_1393 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        float _1484 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1451.x + (-0.5));
        float _1486 = _1484 * (_1451.y + (-0.5));
        float _1487 = _1484 * (_1451.z + (-0.5));
        float _1494 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1458.x + (-0.5));
        float _1496 = _1494 * (_1458.y + (-0.5));
        float _1497 = _1494 * (_1458.z + (-0.5));
        float _1504 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1465.x + (-0.5));
        float _1506 = _1504 * (_1465.y + (-0.5));
        float _1507 = _1504 * (_1465.z + (-0.5));
        float _1514 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1472.x + (-0.5));
        float _1516 = _1514 * (_1472.y + (-0.5));
        float _1517 = _1514 * (_1472.z + (-0.5));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = _1485 * 0.5;
        float _1522 = _1495 * 0.5;
        float _1523 = _1505 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_766, _767, _768), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4122 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1548 + 1.0))) + _1553) * _1518;
        float _1563 = _1486 * 0.5;
        float _1564 = _1496 * 0.5;
        float _1565 = _1506 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_766, _767, _768), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4155 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1590 + 1.0))) + _1595) * _1519;
        float _1605 = _1487 * 0.5;
        float _1606 = _1497 * 0.5;
        float _1607 = _1507 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_766, _767, _768), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4188 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1632 + 1.0))) + _1637) * _1520;
        _1654 = _1487;
        _1655 = _1486;
        _1656 = _1485;
        _1657 = _1497;
        _1658 = _1496;
        _1659 = _1495;
        _1660 = _1507;
        _1661 = _1506;
        _1662 = _1505;
        _1663 = _1520;
        _1664 = _1519;
        _1665 = _1518;
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
    }
    else
    {
        _1654 = _1343;
        _1655 = _1343;
        _1656 = _1343;
        _1657 = _1343;
        _1658 = _1343;
        _1659 = _1343;
        _1660 = _1343;
        _1661 = _1343;
        _1662 = _1343;
        _1663 = _1343;
        _1664 = _1343;
        _1665 = _1343;
        _1666 = 0.0;
        _1667 = 0.0;
        _1668 = 0.0;
    }
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1355)) + _1355;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1356)) + _1356;
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1357)) + _1357;
    float _1701 = fma(_1680, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1678 * cbSceneParam._m0[89u].x));
    float _1704 = fma(_1680, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1678 * cbSceneParam._m0[90u].x));
    float _1707 = fma(_1680, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1678));
    float _1722 = _951 * 0.5;
    float _1723 = _952 * 0.5;
    float _1724 = _953 * 0.5;
    float _1725 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1728 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1731 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1765;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1738 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1342, _1346, _1349, _1352));
        float _1742 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1344, _1347, _1350, _1353));
        float _1746 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1345, _1348, _1351, _1354));
        float _1753 = dot(vec4(cbModelParam._m0[39u]), vec4(_1722, _1723, _1724, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1753) ? 0.0 : (isnan(0.0) ? _1753 : max(0.0, _1753))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1776;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1767 = dot(vec4(cbModelParam._m0[40u]), vec4(_1722, _1723, _1724, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1780 = (_1776 * cbModelParam._m0[1u].x) + (_1765 * (1.0 - cbModelParam._m0[1u].x));
    float _1790 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _769);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1790 : min(cbModelParam._m0[25u].z, _1790));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1840 = fma(_1014, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1006)) + cbModelParam._m0[13u].w;
        float _1844 = fma(_1014, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1006)) + cbModelParam._m0[14u].w;
        float _1848 = fma(_1014, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1006)) + cbModelParam._m0[15u].w;
        float _1851 = fma(_953, cbModelParam._m0[13u].z, fma(_952, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951));
        float _1854 = fma(_953, cbModelParam._m0[14u].z, fma(_952, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951));
        float _1857 = fma(_953, cbModelParam._m0[15u].z, fma(_952, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951));
        float _1885;
        if (_1851 > 0.0)
        {
            _1885 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1885 = frontier_phi_17_15_ladder;
        }
        float _2109;
        if (_1854 > 0.0)
        {
            _2109 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2109 = frontier_phi_26_22_ladder;
        }
        float _2366;
        if (_1857 > 0.0)
        {
            _2366 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2366 = frontier_phi_38_33_ladder;
        }
        float _2368 = isnan(_2109) ? _1885 : (isnan(_1885) ? _2109 : min(_1885, _2109));
        float _2369 = isnan(_2366) ? _2368 : (isnan(_2368) ? _2366 : min(_2368, _2366));
        float _2373 = (_2369 * _1851) + _1840;
        float _2374 = (_2369 * _1854) + _1844;
        float _2375 = (_2369 * _1857) + _1848;
        float _2376 = _2369 * 9.9999997473787516355514526367188e-05;
        float _2378 = (-1.0) - _2376;
        float _2380 = _2376 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2375 > _2380) || ((_2375 < _2378) || ((_2374 > _2380) || ((_2374 < _2378) || ((_2373 < _2378) || (_2373 > _2380))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2503 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2375, cbModelParam._m0[9u].z, fma(_2374, cbModelParam._m0[9u].y, _2373 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2375, cbModelParam._m0[10u].z, fma(_2374, cbModelParam._m0[10u].y, _2373 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2375, cbModelParam._m0[11u].z, fma(_2374, cbModelParam._m0[11u].y, _2373 * cbModelParam._m0[11u].x))), _1791);
            frontier_phi_16_38_ladder = _2503.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2503.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2503.x * cbModelParam._m0[1u].y;
        }
        _1873 = frontier_phi_16_38_ladder_2;
        _1875 = frontier_phi_16_38_ladder_1;
        _1877 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_951, _952, _953), _1791);
        _1873 = _1861.x * cbModelParam._m0[1u].y;
        _1875 = _1861.y * cbModelParam._m0[1u].y;
        _1877 = _1861.z * cbModelParam._m0[1u].y;
    }
    float _1881 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _769);
    float _1882 = isnan(_1881) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1881 : min(cbModelParam._m0[25u].w, _1881));
    float _1972;
    float _1974;
    float _1976;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1936 = fma(_1014, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1006)) + cbModelParam._m0[21u].w;
        float _1940 = fma(_1014, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1006)) + cbModelParam._m0[22u].w;
        float _1944 = fma(_1014, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1006)) + cbModelParam._m0[23u].w;
        float _1947 = fma(_953, cbModelParam._m0[21u].z, fma(_952, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951));
        float _1950 = fma(_953, cbModelParam._m0[22u].z, fma(_952, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951));
        float _1953 = fma(_953, cbModelParam._m0[23u].z, fma(_952, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951));
        float _2114;
        if (_1947 > 0.0)
        {
            _2114 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2114 = frontier_phi_28_24_ladder;
        }
        float _2393;
        if (_1950 > 0.0)
        {
            _2393 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2393 = frontier_phi_40_35_ladder;
        }
        float _2606;
        if (_1953 > 0.0)
        {
            _2606 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2606 = frontier_phi_49_46_ladder;
        }
        float _2608 = isnan(_2393) ? _2114 : (isnan(_2114) ? _2393 : min(_2114, _2393));
        float _2609 = isnan(_2606) ? _2608 : (isnan(_2608) ? _2606 : min(_2608, _2606));
        float _2613 = (_2609 * _1947) + _1936;
        float _2614 = (_2609 * _1950) + _1940;
        float _2615 = (_2609 * _1953) + _1944;
        float _2616 = _2609 * 9.9999997473787516355514526367188e-05;
        float _2617 = (-1.0) - _2616;
        float _2619 = _2616 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2615 > _2619) || ((_2615 < _2617) || ((_2614 > _2619) || ((_2614 < _2617) || ((_2613 < _2617) || (_2613 > _2619))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2814 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2615, cbModelParam._m0[17u].z, fma(_2614, cbModelParam._m0[17u].y, _2613 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2615, cbModelParam._m0[18u].z, fma(_2614, cbModelParam._m0[18u].y, _2613 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2615, cbModelParam._m0[19u].z, fma(_2614, cbModelParam._m0[19u].y, _2613 * cbModelParam._m0[19u].x))), _1882);
            frontier_phi_25_49_ladder = _2814.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2814.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2814.x * cbModelParam._m0[1u].z;
        }
        _1972 = frontier_phi_25_49_ladder_2;
        _1974 = frontier_phi_25_49_ladder_1;
        _1976 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1956 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_951, _952, _953), _1882);
        _1972 = _1956.x * cbModelParam._m0[1u].z;
        _1974 = _1956.y * cbModelParam._m0[1u].z;
        _1976 = _1956.z * cbModelParam._m0[1u].z;
    }
    float _1989 = (((_977 * _927) + _978) * _943) * ((cbModelParam._m0[1u].w * (_1972 - _1873)) + _1873);
    float _1991 = (((_977 * _929) + _978) * _943) * ((cbModelParam._m0[1u].w * (_1974 - _1875)) + _1875);
    float _1993 = (((_977 * _930) + _978) * _943) * ((cbModelParam._m0[1u].w * (_1976 - _1877)) + _1877);
    float _1996 = fma(_1993, cbSceneParam._m0[89u].z, fma(_1991, cbSceneParam._m0[89u].y, _1989 * cbSceneParam._m0[89u].x));
    float _1999 = fma(_1993, cbSceneParam._m0[90u].z, fma(_1991, cbSceneParam._m0[90u].y, _1989 * cbSceneParam._m0[90u].x));
    float _2002 = fma(_1993, cbSceneParam._m0[91u].z, fma(_1991, cbSceneParam._m0[91u].y, _1989 * cbSceneParam._m0[91u].x));
    vec4 _2010 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_865, _866));
    float _2012 = _2010.w;
    float _2024 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2012);
    float _2025 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2012);
    float _2026 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2012);
    uvec4 _2030 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2032 = _2030.x * 14u;
    uint _2033 = _2032 + 13u;
    float _2040 = _943 + (-1.0);
    float _2045 = (cbLight._m0[_2033].x * _2040) + 1.0;
    float _2046 = (cbLight._m0[_2033].y * _2040) + 1.0;
    float _2047 = (cbLight._m0[_2033].z * _2040) + 1.0;
    float _2048 = (cbLight._m0[_2033].w * _2040) + 1.0;
    uint _2049 = _2032 + 5u;
    float _2055 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
    uint _2059 = _2032 + 4u;
    float _2068 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
    uint _2072 = _2032 | 1u;
    float _2083 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_766, _767, _768));
    float _2086 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_766, _767, _768));
    float _4324 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _4335 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2091 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 0.3183098733425140380859375;
    float _2093 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * 0.3183098733425140380859375;
    float _2100 = ((cbLight._m0[_2049].x * _2055) * _2093) + (((cbLight._m0[_2059].x * _2024) * _2068) * _2091);
    float _2101 = ((_2055 * cbLight._m0[_2049].y) * _2093) + (((cbLight._m0[_2059].y * _2025) * _2068) * _2091);
    float _2102 = ((_2055 * cbLight._m0[_2049].z) * _2093) + (((cbLight._m0[_2059].z * _2026) * _2068) * _2091);
    uvec4 _2106 = floatBitsToUint(cbLight._m0[_2032 + 12u]);
    bool _2108 = _2106.x == 0u;
    float _2119;
    float _2121;
    float _2123;
    if (_2108)
    {
        _2119 = _2100;
        _2121 = _2101;
        _2123 = _2102;
    }
    else
    {
        uint _2127 = _2032 + 6u;
        float _2143 = (dot(vec3(cbLight._m0[_2032 + 2u].xyz), vec3(_766, _767, _768)) * 0.5) + 0.5;
        float _2144 = _2143 * _2143;
        float _4346 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2145 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2146 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2119 = (((cbLight._m0[_2127].x * 0.3183098733425140380859375) * _2145) * _2146) + _2100;
        _2121 = (((cbLight._m0[_2127].y * 0.3183098733425140380859375) * _2145) * _2146) + _2101;
        _2123 = (((cbLight._m0[_2127].z * 0.3183098733425140380859375) * _2145) * _2146) + _2102;
    }
    bool _2126 = _2106.y == 0u;
    float _2164;
    float _2166;
    float _2168;
    if (_2126)
    {
        _2164 = _2119;
        _2166 = _2121;
        _2168 = _2123;
    }
    else
    {
        uint _2337 = _2032 + 7u;
        float _2353 = (dot(vec3(cbLight._m0[_2032 + 3u].xyz), vec3(_766, _767, _768)) * 0.5) + 0.5;
        float _2354 = _2353 * _2353;
        float _4362 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2355 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2356 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
        _2164 = (((cbLight._m0[_2337].x * 0.3183098733425140380859375) * _2355) * _2356) + _2119;
        _2166 = (((cbLight._m0[_2337].y * 0.3183098733425140380859375) * _2355) * _2356) + _2121;
        _2168 = (((cbLight._m0[_2337].z * 0.3183098733425140380859375) * _2355) * _2356) + _2123;
    }
    uint _2171 = _2032 + 8u;
    float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2032].w)) * _769) * 0.949999988079071044921875);
    float _2185 = _2184 * _2184;
    float _2186 = cbLight._m0[_2032].x + _845;
    float _2187 = cbLight._m0[_2032].y + _846;
    float _2188 = cbLight._m0[_2032].z + _847;
    float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
    float _2193 = _2192 * _2186;
    float _2194 = _2192 * _2187;
    float _2195 = _2192 * _2188;
    float _2196 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2032].xyz));
    float _4378 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _4389 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _2200 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2201 = dot(vec3(_766, _767, _768), vec3(_2193, _2194, _2195));
    float _4400 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2205 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_2193, _2194, _2195));
    float _4411 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2209 = _2185 * _2185;
    float _2213 = ((_2204 * _2204) * (_2209 + (-1.0))) + 1.0;
    float _2221 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
    float _2222 = 0.959999978542327880859375 - _924;
    float _2224 = 0.959999978542327880859375 - _925;
    float _2225 = 0.959999978542327880859375 - _926;
    float _2232 = 1.0 - _2185;
    float _2243 = (0.5 / (((_2200 * ((_2199 * _2232) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_2200 * _2232) + _2185) * _2199))) * _2199;
    float _4422 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2245 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2209 / ((_2213 * _2213) * 3.141590118408203125));
    uint _2259 = _2032 + 9u;
    float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _769) * 0.949999988079071044921875);
    float _2271 = _2270 * _2270;
    float _2272 = cbLight._m0[_2072].x + _845;
    float _2273 = cbLight._m0[_2072].y + _846;
    float _2274 = cbLight._m0[_2072].z + _847;
    float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
    float _2279 = _2278 * _2272;
    float _2280 = _2278 * _2273;
    float _2281 = _2278 * _2274;
    float _2282 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2072].xyz));
    float _4433 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2286 = dot(vec3(_766, _767, _768), vec3(_2279, _2280, _2281));
    float _4444 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2290 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2279, _2280, _2281));
    float _4455 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2294 = _2271 * _2271;
    float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
    float _2305 = exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0);
    float _2312 = 1.0 - _2271;
    float _2322 = (0.5 / (((_2200 * ((_2285 * _2312) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_2200 * _2312) + _2271) * _2285))) * _2285;
    float _4466 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2324 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
    float _2334 = (((((_2305 * _2222) + _927) * cbLight._m0[_2259].x) * _2324) * _2055) + ((((cbLight._m0[_2171].x * _2024) * ((_2221 * _2222) + _927)) * _2245) * _2068);
    float _2335 = (((((_2305 * _2224) + _929) * cbLight._m0[_2259].y) * _2324) * _2055) + ((((cbLight._m0[_2171].y * _2025) * ((_2221 * _2224) + _929)) * _2245) * _2068);
    float _2336 = (((((_2305 * _2225) + _930) * cbLight._m0[_2259].z) * _2324) * _2055) + ((((cbLight._m0[_2171].z * _2026) * ((_2221 * _2225) + _930)) * _2245) * _2068);
    float _2398;
    float _2400;
    float _2402;
    if (_2108)
    {
        _2398 = _2334;
        _2400 = _2335;
        _2402 = _2336;
    }
    else
    {
        uint _2404 = _2032 + 2u;
        uint _2408 = _2032 + 10u;
        float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2404].w)) * _769) * 0.949999988079071044921875);
        float _2423 = _2422 * _2422;
        float _2424 = cbLight._m0[_2404].x + _845;
        float _2425 = cbLight._m0[_2404].y + _846;
        float _2426 = cbLight._m0[_2404].z + _847;
        float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
        float _2431 = _2430 * _2424;
        float _2432 = _2430 * _2425;
        float _2433 = _2430 * _2426;
        float _2434 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2404].xyz));
        float _4477 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2438 = dot(vec3(_766, _767, _768), vec3(_2431, _2432, _2433));
        float _4488 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2442 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_2431, _2432, _2433));
        float _4499 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2446 = _2423 * _2423;
        float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
        float _2457 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
        float _2464 = 1.0 - _2423;
        float _2474 = (0.5 / (((_2200 * ((_2437 * _2464) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2200 * _2464) + _2423) * _2437))) * _2437;
        float _4510 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2476 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
        float _2477 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2398 = (((((_2457 * _2222) + _927) * cbLight._m0[_2408].x) * _2476) * _2477) + _2334;
        _2400 = (((((_2457 * _2224) + _929) * cbLight._m0[_2408].y) * _2476) * _2477) + _2335;
        _2402 = (((((_2457 * _2225) + _930) * cbLight._m0[_2408].z) * _2476) * _2477) + _2336;
    }
    float _2512;
    float _2514;
    float _2516;
    if (_2126)
    {
        _2512 = _2398;
        _2514 = _2400;
        _2516 = _2402;
    }
    else
    {
        uint _2523 = _2032 + 3u;
        uint _2527 = _2032 + 11u;
        float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2523].w)) * _769) * 0.949999988079071044921875);
        float _2542 = _2541 * _2541;
        float _2543 = cbLight._m0[_2523].x + _845;
        float _2544 = cbLight._m0[_2523].y + _846;
        float _2545 = cbLight._m0[_2523].z + _847;
        float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
        float _2550 = _2549 * _2543;
        float _2551 = _2549 * _2544;
        float _2552 = _2549 * _2545;
        float _2553 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2523].xyz));
        float _4526 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2557 = dot(vec3(_766, _767, _768), vec3(_2550, _2551, _2552));
        float _4537 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2561 = dot(vec3(cbLight._m0[_2523].xyz), vec3(_2550, _2551, _2552));
        float _4548 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2565 = _2542 * _2542;
        float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
        float _2576 = exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0);
        float _2583 = 1.0 - _2542;
        float _2593 = (0.5 / (((_2200 * ((_2556 * _2583) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2200 * _2583) + _2542) * _2556))) * _2556;
        float _4559 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2595 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
        float _2596 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
        _2512 = (((((_2576 * _2222) + _927) * cbLight._m0[_2527].x) * _2595) * _2596) + _2398;
        _2514 = (((((_2576 * _2224) + _929) * cbLight._m0[_2527].y) * _2595) * _2596) + _2400;
        _2516 = (((((_2576 * _2225) + _930) * cbLight._m0[_2527].z) * _2595) * _2596) + _2402;
    }
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    if (_2030.y == 0u)
    {
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2671;
        float _2673 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2671;
        float _2674 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2671;
        uvec4 _2686 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2687 = _2686.x;
        uint _2698 = uint((float(_2686.y) * floor(float(uint(cbSceneParam._m0[85u].y * _866) / _2687))) + floor(float(uint(cbSceneParam._m0[85u].x * _865) / _2687)));
        float _2708 = (log2(_2674 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2709 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        uint _2712 = uint(isnan(14.0) ? _2709 : (isnan(_2709) ? 14.0 : min(_2709, 14.0)));
        uvec4 _2717 = texelFetch(g_lightClusterGridBuffer, int(((_2712 << 2u) + (_2698 << 6u)) >> 2u));
        uint _2718 = _2717.x;
        uint _2719 = _2686.z;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        if (((((1u << ((_2719 >> 4u) & 15u)) + 4294967295u) & _2718) == 0u) || ((_2719 & 240u) == 0u))
        {
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
        }
        else
        {
            float _2820;
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            float _2977 = 0.0;
            uint _2978 = 0u;
            uint _2987;
            bool _2988;
            for (;;)
            {
                _2987 = texelFetch(g_lightClassification, int((((_2712 << 5u) + (_2698 << 9u)) + (_2978 << 2u)) >> 2u)).x;
                _2988 = _2987 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2988)
                {
                    frontier_phi_66_pred = _2972;
                    frontier_phi_66_pred_1 = _2977;
                    frontier_phi_66_pred_2 = _2976;
                    frontier_phi_66_pred_3 = _2975;
                    frontier_phi_66_pred_4 = _2974;
                    frontier_phi_66_pred_5 = _2973;
                }
                else
                {
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    uint _3123;
                    _3117 = _2972;
                    _3118 = _2973;
                    _3119 = _2974;
                    _3120 = _2975;
                    _3121 = _2976;
                    _3122 = _2977;
                    _3123 = _2987;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    for (;;)
                    {
                        uint _3127 = uint(findLSB(_3123)) + (_2978 << 5u);
                        uint _3124 = (_3123 + 4294967295u) & _3123;
                        uint _3129 = _3127 * 48u;
                        vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3129)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 3u)).x));
                        uint _3149 = (_3127 * 48u) + 4u;
                        vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3149)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 3u)).x));
                        uint _3168 = (_3127 * 48u) + 8u;
                        vec3 _3179 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3168)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 2u)).x));
                        float _3183 = _3143.x - _2672;
                        float _3184 = _3143.y - _2673;
                        float _3185 = _3143.z - _2674;
                        float _3186 = dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185));
                        float _3189 = inversesqrt(_3186);
                        float _3190 = _3189 * _3183;
                        float _3191 = _3189 * _3184;
                        float _3192 = _3189 * _3185;
                        float _3193 = dot(vec3(_884, _887, _890), vec3(_3190, _3191, _3192));
                        float _3198 = 1.0 - (_3186 * _3143.w);
                        float _4585 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3199 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3200 = sqrt(_3186) * _3162.w;
                        float _3203 = 1.39999997615814208984375 / (_3200 + 1.39999997615814208984375);
                        float _3204 = _3203 * _3203;
                        float _3207 = ((1.0 - _3204) * _3193) + _3204;
                        float _3210 = _3200 * _3200;
                        float _3214 = ((isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0))) * _3199) / ((_3210 * 0.699999988079071044921875) + 1.0);
                        float _3218 = (-0.0) - _2672;
                        float _3219 = (-0.0) - _2673;
                        float _3220 = (-0.0) - _2674;
                        float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                        float _3225 = _3224 * _3218;
                        float _3226 = _3224 * _3219;
                        float _3227 = _3224 * _3220;
                        float _3235 = exp2(log2(1.0 / ((_3210 * 3.5) + 5.0)) * 0.25);
                        float _3236 = 1.0 - _959;
                        float _3243 = sqrt(1.0 - ((1.0 - (_3236 * _3236)) * (1.0 - (_3235 * _3235))));
                        float _3244 = _3243 * _3243;
                        float _3245 = _3244 * _3244;
                        float _3246 = _3225 + _3190;
                        float _3247 = _3226 + _3191;
                        float _3248 = _3227 + _3192;
                        float _3252 = inversesqrt(dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248)));
                        float _3256 = dot(vec3(_884, _887, _890), vec3(_3225, _3226, _3227));
                        float _4601 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3259 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3260 = dot(vec3(_884, _887, _890), vec3(_3252 * _3246, _3252 * _3247, _3252 * _3248));
                        float _4612 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3263 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3267 = ((_3263 * _3263) * (_3245 + (-1.0))) + 1.0;
                        float _3268 = _3203 * _3244;
                        float _3269 = _3268 * _3268;
                        float _3272 = ((1.0 - _3269) * _3193) + _3269;
                        float _4623 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3273 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3274 = 1.0 - _3244;
                        float _3284 = (0.5 / (((_3273 * ((_3259 * _3274) + _3244)) + 9.9999999392252902907785028219223e-09) + (((_3273 * _3274) + _3244) * _3259))) * _3273;
                        float _4634 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3294 = (((_3245 * 3.1415927410125732421875) * (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) / ((_3267 * _3267) * ((_3210 * 2.1991131305694580078125) + 3.141590118408203125))) * _3199;
                        _3047 = (_3214 * _3162.x) + _3120;
                        _3048 = (_3214 * _3162.y) + _3121;
                        _3049 = (_3214 * _3162.z) + _3122;
                        _3044 = (_3294 * _3179.x) + _3117;
                        _3045 = (_3294 * _3179.y) + _3118;
                        _3046 = (_3294 * _3179.z) + _3119;
                        if (_3124 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3117 = _3044;
                            _3118 = _3045;
                            _3119 = _3046;
                            _3120 = _3047;
                            _3121 = _3048;
                            _3122 = _3049;
                            _3123 = _3124;
                        }
                    }
                    frontier_phi_66_pred = _3044;
                    frontier_phi_66_pred_1 = _3049;
                    frontier_phi_66_pred_2 = _3048;
                    frontier_phi_66_pred_3 = _3047;
                    frontier_phi_66_pred_4 = _3046;
                    frontier_phi_66_pred_5 = _3045;
                }
                _2820 = frontier_phi_66_pred;
                _2830 = frontier_phi_66_pred_1;
                _2828 = frontier_phi_66_pred_2;
                _2826 = frontier_phi_66_pred_3;
                _2824 = frontier_phi_66_pred_4;
                _2822 = frontier_phi_66_pred_5;
                uint _2979 = _2978 + 1u;
                if (_2979 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2972 = _2820;
                    _2973 = _2822;
                    _2974 = _2824;
                    _2975 = _2826;
                    _2976 = _2828;
                    _2977 = _2830;
                    _2978 = _2979;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
        }
        uvec4 _2833 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2834 = _2833.z;
        uint _2836 = (_2834 >> 8u) & 15u;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        if (((4294967295u << _2836) & _2718) == 0u)
        {
            _2940 = _2819;
            _2942 = _2821;
            _2944 = _2823;
            _2946 = _2825;
            _2948 = _2827;
            _2950 = _2829;
        }
        else
        {
            float _2965 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
            float _2966 = _2965 * _2672;
            float _2967 = _2965 * _2673;
            float _2968 = _2965 * _2674;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2836 < ((_2834 >> 12u) & 15u))
            {
                float _2941;
                float _2943;
                float _2945;
                float _2947;
                float _2949;
                float _2951;
                float _3100 = _2819;
                float _3101 = _2821;
                float _3102 = _2823;
                float _3103 = _2825;
                float _3104 = _2827;
                float _3105 = _2829;
                uint _3106 = _2836;
                uint _3115;
                bool _3116;
                for (;;)
                {
                    _3115 = texelFetch(g_lightClassification, int((((_2712 << 5u) + (_2698 << 9u)) + (_3106 << 2u)) >> 2u)).x;
                    _3116 = _3115 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3116)
                    {
                        frontier_phi_77_pred = _3105;
                        frontier_phi_77_pred_1 = _3104;
                        frontier_phi_77_pred_2 = _3103;
                        frontier_phi_77_pred_3 = _3102;
                        frontier_phi_77_pred_4 = _3101;
                        frontier_phi_77_pred_5 = _3100;
                    }
                    else
                    {
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3321 = _3100;
                        float _3322 = _3101;
                        float _3323 = _3102;
                        float _3324 = _3103;
                        float _3325 = _3104;
                        float _3326 = _3105;
                        uint _3327 = _3115;
                        uint _3328;
                        vec4 _3353;
                        float _3354;
                        vec4 _3369;
                        vec3 _3381;
                        vec4 _3396;
                        vec4 _3411;
                        float _3457;
                        bool _3458;
                        for (;;)
                        {
                            uint _3338 = ((_3106 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3327));
                            _3328 = (_3327 + 4294967295u) & _3327;
                            uint _3340 = _3338 * 40u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            _3354 = _3353.w;
                            uint _3356 = (_3338 * 40u) + 4u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3371 = (_3338 * 40u) + 8u;
                            _3381 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x));
                            uint _3383 = (_3338 * 40u) + 16u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3338 * 40u) + 20u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3338 * 40u) + 24u;
                            vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3432 = (_3338 * 40u) + 28u;
                            vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            _3457 = fma(_2674, _3445.z, fma(_2673, _3445.y, _3445.x * _2672)) + _3445.w;
                            _3458 = !((fma(_2674, _3426.z, fma(_2673, _3426.y, _3426.x * _2672)) + _3426.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3458)
                            {
                                float _3485 = _3353.x - _2672;
                                float _3486 = _3353.y - _2673;
                                float _3487 = _3353.z - _2674;
                                float _3488 = dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487));
                                float _3491 = inversesqrt(_3488);
                                float _3492 = _3491 * _3485;
                                float _3493 = _3491 * _3486;
                                float _3494 = _3491 * _3487;
                                float _3498 = 1.0 - (_3488 / (_3354 * _3354));
                                float _4645 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3503 = sqrt(_3488) * _3369.w;
                                float _3505 = 1.39999997615814208984375 / (_3503 + 1.39999997615814208984375);
                                float _3506 = _3505 * _3505;
                                float _3509 = ((1.0 - _3506) * dot(vec3(_3492, _3493, _3494), vec3(_884, _887, _890))) + _3506;
                                float _3512 = _3503 * _3503;
                                float _3516 = (fma(_2674, _3396.z, fma(_2673, _3396.y, _3396.x * _2672)) + _3396.w) / _3457;
                                float _3517 = (fma(_2674, _3411.z, fma(_2673, _3411.y, _3411.x * _2672)) + _3411.w) / _3457;
                                float _3521 = 1.0 - dot(vec2(_3516, _3517), vec2(_3516, _3517));
                                float _4661 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3523 = _3522 * (((isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0))) * _3499) / ((_3512 * 0.699999988079071044921875) + 1.0));
                                float _3535 = exp2(log2(1.0 / ((_3512 * 3.5) + 5.0)) * 0.25);
                                float _3536 = 1.0 - _959;
                                float _3543 = sqrt(1.0 - ((1.0 - (_3536 * _3536)) * (1.0 - (_3535 * _3535))));
                                float _3544 = _3543 * _3543;
                                float _3545 = _3544 * _3544;
                                float _3546 = _3492 - _2966;
                                float _3547 = _3493 - _2967;
                                float _3548 = _3494 - _2968;
                                float _3552 = inversesqrt(dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548)));
                                float _3556 = dot(vec3(_884, _887, _890), vec3((-0.0) - _2966, (-0.0) - _2967, (-0.0) - _2968));
                                float _4672 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3559 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3560 = dot(vec3(_884, _887, _890), vec3(_3552 * _3546, _3552 * _3547, _3552 * _3548));
                                float _4683 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3563 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3567 = ((_3563 * _3563) * (_3545 + (-1.0))) + 1.0;
                                float _3568 = _3505 * _3544;
                                float _3569 = _3568 * _3568;
                                float _3575 = ((1.0 - _3569) * dot(vec3(_884, _887, _890), vec3(_3492, _3493, _3494))) + _3569;
                                float _4694 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3577 = 1.0 - _3544;
                                float _3587 = (0.5 / (((_3576 * ((_3559 * _3577) + _3544)) + 9.9999999392252902907785028219223e-09) + (((_3576 * _3577) + _3544) * _3559))) * _3576;
                                float _4705 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3597 = (_3522 * _3499) * (((_3545 * 3.1415927410125732421875) * (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) / ((_3567 * _3567) * ((_3512 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3523 * _3369.y;
                                frontier_phi_83_pred_1 = _3523 * _3369.x;
                                frontier_phi_83_pred_2 = _3597 * _3381.z;
                                frontier_phi_83_pred_3 = _3597 * _3381.y;
                                frontier_phi_83_pred_4 = _3597 * _3381.x;
                                frontier_phi_83_pred_5 = _3523 * _3369.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3605 = frontier_phi_83_pred;
                            _3604 = frontier_phi_83_pred_1;
                            _3603 = frontier_phi_83_pred_2;
                            _3602 = frontier_phi_83_pred_3;
                            _3601 = frontier_phi_83_pred_4;
                            _3606 = frontier_phi_83_pred_5;
                            _3311 = _3604 + _3324;
                            _3312 = _3605 + _3325;
                            _3313 = _3606 + _3326;
                            _3308 = _3601 + _3321;
                            _3309 = _3602 + _3322;
                            _3310 = _3603 + _3323;
                            if (_3328 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3328;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3313;
                        frontier_phi_77_pred_1 = _3312;
                        frontier_phi_77_pred_2 = _3311;
                        frontier_phi_77_pred_3 = _3310;
                        frontier_phi_77_pred_4 = _3309;
                        frontier_phi_77_pred_5 = _3308;
                    }
                    _2951 = frontier_phi_77_pred;
                    _2949 = frontier_phi_77_pred_1;
                    _2947 = frontier_phi_77_pred_2;
                    _2945 = frontier_phi_77_pred_3;
                    _2943 = frontier_phi_77_pred_4;
                    _2941 = frontier_phi_77_pred_5;
                    uint _3107 = _3106 + 1u;
                    if (_3107 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3100 = _2941;
                        _3101 = _2943;
                        _3102 = _2945;
                        _3103 = _2947;
                        _3104 = _2949;
                        _3105 = _2951;
                        _3106 = _3107;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2945;
                frontier_phi_58_59_ladder_1 = _2951;
                frontier_phi_58_59_ladder_2 = _2949;
                frontier_phi_58_59_ladder_3 = _2947;
                frontier_phi_58_59_ladder_4 = _2943;
                frontier_phi_58_59_ladder_5 = _2941;
            }
            else
            {
                frontier_phi_58_59_ladder = _2823;
                frontier_phi_58_59_ladder_1 = _2829;
                frontier_phi_58_59_ladder_2 = _2827;
                frontier_phi_58_59_ladder_3 = _2825;
                frontier_phi_58_59_ladder_4 = _2821;
                frontier_phi_58_59_ladder_5 = _2819;
            }
            _2940 = frontier_phi_58_59_ladder_5;
            _2942 = frontier_phi_58_59_ladder_4;
            _2944 = frontier_phi_58_59_ladder;
            _2946 = frontier_phi_58_59_ladder_3;
            _2948 = frontier_phi_58_59_ladder_2;
            _2950 = frontier_phi_58_59_ladder_1;
        }
        float _2955 = isnan(1.0) ? _943 : (isnan(_943) ? 1.0 : min(_943, 1.0));
        _2731 = (_2955 * _2946) + _2164;
        _2733 = (_2955 * _2948) + _2166;
        _2735 = (_2955 * _2950) + _2168;
        _2737 = ((_2940 * _927) * _2955) + _2512;
        _2739 = ((_2942 * _929) * _2955) + _2514;
        _2741 = ((_2944 * _930) * _2955) + _2516;
    }
    else
    {
        _2731 = _2164;
        _2733 = _2166;
        _2735 = _2168;
        _2737 = _2512;
        _2739 = _2514;
        _2741 = _2516;
    }
    float _4721 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4732 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4743 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _2758 = ((isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2731 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _943))) + ((_2737 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1780)) * cbPerFrame._m0[3u].x);
    float _2759 = ((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2733 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _943))) + ((_2739 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1780)) * cbPerFrame._m0[3u].x);
    float _2760 = ((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2735 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _943))) + ((_2741 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1780)) * cbPerFrame._m0[3u].x);
    uint _2761 = _257 + 6u;
    float _2769 = _865 / cbSceneParam._m0[86u].x;
    float _2770 = _866 / cbSceneParam._m0[86u].y;
    vec4 _2784 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2769, _2770, (log2((isnan(cbSceneParam._m0[77u].w) ? _788 : (isnan(_788) ? cbSceneParam._m0[77u].w : min(_788, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2786 = _2784.x;
    float _2787 = _2784.y;
    float _2788 = _2784.z;
    float _2789 = _2784.w;
    float _2882;
    float _2884;
    float _2886;
    float _2888;
    if (_788 > cbSceneParam._m0[78u].w)
    {
        float _2844 = isnan(_788) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _788 : min(cbSceneParam._m0[80u].w, _788));
        float _2845 = _2844 / _788;
        float _2856 = _2845 * _838;
        float _2857 = _839 * _2845;
        float _2858 = (-0.0) - _2857;
        float _2860 = _2845 * _840;
        float _2862 = (cbSceneParam._m0[77u].w * _2858) / _2844;
        float _2863 = _2862 + cbSceneParam._m0[79u].w;
        float _2864 = cbSceneParam._m0[79u].w - _2857;
        float _2870 = sqrt(((_2856 * _2856) + (_2857 * _2857)) + (_2860 * _2860));
        float _2873 = (1.0 - (cbSceneParam._m0[77u].w / _2844)) * _2870;
        float _2878 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2880 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3057;
        if (abs((_2858 - _2862) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3057 = ((((_2863 > 0.0) ? exp2(_2878 * _2863) : (2.0 - exp2(_2880 * _2863))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2873;
        }
        else
        {
            float _3001 = 1.0 / cbSceneParam._m0[80u].x;
            float _3002 = isnan(_2864) ? _2863 : (isnan(_2863) ? _2864 : max(_2863, _2864));
            float _3003 = isnan(_2864) ? _2863 : (isnan(_2863) ? _2864 : min(_2863, _2864));
            float _3012 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : min(_3002, 0.0));
            float _3013 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : min(_3003, 0.0));
            _3057 = ((abs(_2870 / _2858) * cbSceneParam._m0[80u].y) * ((((_3012 - _3013) * 2.0) - ((exp2(_2878 * (isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0)))) - exp2(_2878 * (isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))))) * _3001)) - ((exp2(_2880 * _3012) - exp2(_2880 * _3013)) * _3001))) + (_2873 * cbSceneParam._m0[80u].z);
        }
        vec4 _3059 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2769, _2770, 1.0), 0.0);
        float _3068 = exp2((_3057 * (-1.44269502162933349609375)) * (1.0 - _3059.w));
        float _3069 = log2(_3068);
        float _3085 = log2(_2789);
        _2882 = (exp2(_3085 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3069 * cbSceneParam._m0[78u].x)) * _3059.x) / cbSceneParam._m0[78u].x)) + _2786;
        _2884 = (exp2(_3085 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3069 * cbSceneParam._m0[78u].y)) * _3059.y) / cbSceneParam._m0[78u].y)) + _2787;
        _2886 = (exp2(_3085 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3069 * cbSceneParam._m0[78u].z)) * _3059.z) / cbSceneParam._m0[78u].z)) + _2788;
        _2888 = _3068 * _2789;
    }
    else
    {
        _2882 = _2786;
        _2884 = _2787;
        _2886 = _2788;
        _2888 = _2789;
    }
    bool _3095;
    vec4 _2898;
    vec4 _2920;
    float _2922;
    float _2926;
    float _2927;
    float _2928;
    float _2929;
    bool _2939;
    for (;;)
    {
        _2898 = cbMatDynParam._m0[0u];
        float _2900 = roundEven(_2898.y);
        bool _2901 = _2900 == 3.0;
        float _2902 = log2(_2888);
        float _2909 = exp2(_2902 * cbSceneParam._m0[78u].x) * _2758;
        float _2910 = exp2(_2902 * cbSceneParam._m0[78u].y) * _2759;
        float _2911 = exp2(_2902 * cbSceneParam._m0[78u].z) * _2760;
        float _2918 = _854 + (-0.5);
        _2920 = cbMtdParam._m0[1u];
        _2922 = _2920.y * _2918;
        float _2925 = (_2900 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2926 = _2925 * (_2901 ? _2909 : (_2909 + (cbSceneParam._m0[72u].w * _2882)));
        _2927 = _2925 * (_2901 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2884)));
        _2928 = _2925 * (_2901 ? _2911 : (_2911 + (cbSceneParam._m0[72u].w * _2886)));
        _2929 = _2918 * 0.999000012874603271484375;
        _2939 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2939)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2929) < 0.5)
            {
                _3095 = true;
                break;
            }
        }
        uint _3036 = _903 + uint(_2898.w);
        if ((cbInstanceData._m0[_3036].w < 1.0) && ((cbInstanceData._m0[_3036].w + _2929) < 0.5))
        {
            _3095 = true;
            break;
        }
        if ((_2922 + 1.0) < _2920.x)
        {
            _3095 = true;
            break;
        }
        _3095 = false;
        break;
    }
    float _3299;
    if (_3095)
    {
        discard_state = true;
        _3299 = 0.0;
    }
    else
    {
        _3299 = cbInstanceData._m0[_2761].w;
    }
    SV_Target.x = _2926;
    SV_Target.y = _2927;
    SV_Target.z = _2928;
    SV_Target.w = _3299;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2761].w;
    discard_exit();
}


