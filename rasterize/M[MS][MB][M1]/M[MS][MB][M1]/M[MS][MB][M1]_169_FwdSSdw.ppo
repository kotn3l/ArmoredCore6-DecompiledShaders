#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1273;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3624 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3635 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3646 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _392 = _390.x;
    float _404 = dot(vec4(_392, _390.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _421 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_392 - _404) * cbMtdParam._m0[24u].y) + _404) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3657 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _429 = (_422 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _430 = (_422 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _431 = (_422 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _289) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _290) + cbTextureTilingScale._m0[3u].w));
    vec4 _468 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _470 = _468.x;
    float _480 = dot(vec4(_470, _468.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _494 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_470 - _480) * cbMtdParam._m0[24u].y) + _480) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3668 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _502 = (_495 * ((_448.x * cbMtdParam._m0[13u].x) - _429)) + _429;
    float _503 = (_495 * ((_448.y * cbMtdParam._m0[13u].y) - _430)) + _430;
    float _504 = (_495 * ((_448.z * cbMtdParam._m0[13u].z) - _431)) + _431;
    float _508 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _502;
    float _511 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _503;
    float _514 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _504;
    float _521 = ((_502 - _508) * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) + _508;
    float _522 = ((_503 - _511) * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) + _511;
    float _523 = ((_504 - _514) * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) + _514;
    vec4 _535 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _575 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _577 = _575.x;
    float _578 = _575.y;
    float _579 = _575.z;
    float _586 = ((_558.x - _577) * _422) + _577;
    float _587 = ((_558.y - _578) * _422) + _578;
    float _588 = ((_558.z - _579) * _422) + _579;
    vec4 _600 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _289) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _290) + cbTextureTilingScale._m0[2u].w));
    float _613 = ((_600.z - _588) * _495) + _588;
    float _616 = ((((_600.x - _586) * _495) + _586) * 2.0) + (-1.0);
    float _617 = ((((_600.y - _587) * _495) + _587) * 2.0) + (-1.0);
    float _618 = dot(vec2(_616, _617), vec2(_616, _617));
    float _3679 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _623 = sqrt(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))));
    float _628 = _616 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_535.x * 2.0) + (-1.0)));
    float _629 = _617 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_535.y * 2.0) + (-1.0)));
    vec4 _642 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _656 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _670 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _672 = _670.x;
    float _690 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _289) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _290) + cbTextureTilingScale._m0[9u].w)).x - _672) * _422) + _672;
    float _708 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _289) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _290) + cbTextureTilingScale._m0[21u].w)).x - _690) * _495) + _690;
    float _712 = ((_656.x - _708) * cbMtdParam._m0[19u].z) + _708;
    float _717 = (((_535.z - _613) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _613;
    float _719 = cbMtdParam._m0[22u].x + _642.w;
    float _722 = fma(_623, _236 * NORMAL.x, fma(_629, _243 * TANGENT.x, (_229 * _221) * _628));
    float _725 = fma(_623, _236 * NORMAL.y, fma(_629, _243 * TANGENT.y, (_229 * _222) * _628));
    float _728 = fma(_623, _236 * NORMAL.z, fma(_629, _243 * TANGENT.z, (_229 * _223) * _628));
    float _732 = inversesqrt(dot(vec3(_722, _725, _728), vec3(_722, _725, _728)));
    float _733 = _732 * _722;
    float _734 = _732 * _725;
    float _735 = _732 * _728;
    float _3690 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _736 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _3712 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3723 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3734 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3745 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _741 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _755 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _806 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _796);
    float _807 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _796);
    float _808 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _796);
    float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
    float _813 = _806 * _812;
    float _814 = _807 * _812;
    float _815 = _808 * _812;
    float _821 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _822 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _840 = fma(_735, cbSceneParam._m0[5u].z, fma(_734, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _733));
    float _843 = fma(_735, cbSceneParam._m0[6u].z, fma(_734, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _733));
    float _846 = fma(_735, cbSceneParam._m0[7u].z, fma(_734, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _733));
    uint _860 = (_270 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _866 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_860].x;
    float _867 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_860].y;
    float _868 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_860].z;
    float _3756 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _872 = 1.0 - _741;
    float _873 = _869 * _872;
    float _874 = _870 * _872;
    float _875 = _871 * _872;
    float _880 = (_869 + (-0.039999999105930328369140625)) * _741;
    float _881 = (_870 + (-0.039999999105930328369140625)) * _741;
    float _882 = (_871 + (-0.039999999105930328369140625)) * _741;
    float _883 = _880 + 0.039999999105930328369140625;
    float _885 = _881 + 0.039999999105930328369140625;
    float _886 = _882 + 0.039999999105930328369140625;
    vec4 _895 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _821, cbSceneParam._m0[86u].y * _822));
    float _899 = ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * TEXCOORD_5.w) * _895.x;
    float _900 = dot(vec3(_733, _734, _735), vec3(_813, _814, _815));
    float _903 = _900 * 2.0;
    float _907 = (_903 * _733) - _813;
    float _908 = (_903 * _734) - _814;
    float _909 = (_903 * _735) - _815;
    float _913 = abs(dot(vec3(_813, _814, _815), vec3(_733, _734, _735)));
    float _3789 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _915 = sqrt(_736);
    float _928 = exp2((_915 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_915 * 3.0));
    float _934 = (1.0 - _928) * ((_915 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _935 = _928 * _915;
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1272;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _997 = fma(_971, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963));
        float _1001 = fma(_971, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963));
        float _1005 = fma(_971, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963));
        float _1030 = _963 + _733;
        float _1031 = _967 + _734;
        float _1032 = _971 + _735;
        float _1042 = fma(_1032, cbModelParam._m0[26u].z, fma(_1031, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030)) - _997;
        float _1043 = fma(_1032, cbModelParam._m0[27u].z, fma(_1031, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030)) - _1001;
        float _1044 = fma(_1032, cbModelParam._m0[28u].z, fma(_1031, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030)) - _1005;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_997 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1001 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[34u].z) + ((((((_1005 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1100 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1066.x + (-0.5));
        float _1102 = _1100 * (_1066.y + (-0.5));
        float _1103 = _1100 * (_1066.z + (-0.5));
        float _1110 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1073.x + (-0.5));
        float _1112 = _1110 * (_1073.y + (-0.5));
        float _1113 = _1110 * (_1073.z + (-0.5));
        float _1120 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1080.x + (-0.5));
        float _1122 = _1120 * (_1080.y + (-0.5));
        float _1123 = _1120 * (_1080.z + (-0.5));
        float _1130 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1087.x + (-0.5));
        float _1132 = _1130 * (_1087.y + (-0.5));
        float _1133 = _1130 * (_1087.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1154 = (dot(vec3(_733, _734, _735), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1164 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3837 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1166 + 1.0))) + _1171) * _1134;
        float _1181 = _1102 * 0.5;
        float _1182 = _1112 * 0.5;
        float _1183 = _1122 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_733, _734, _735), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3870 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1208 + 1.0))) + _1213) * _1135;
        float _1223 = _1103 * 0.5;
        float _1224 = _1113 * 0.5;
        float _1225 = _1123 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_733, _734, _735), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3903 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1250 + 1.0))) + _1255) * _1136;
        _1272 = _1103;
        _1274 = _1102;
        _1275 = _1101;
        _1276 = _1113;
        _1277 = _1112;
        _1278 = _1111;
        _1279 = _1123;
        _1280 = _1122;
        _1281 = _1121;
        _1282 = _1136;
        _1283 = _1135;
        _1284 = _1134;
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
    }
    else
    {
        _1272 = _1273;
        _1274 = _1273;
        _1275 = _1273;
        _1276 = _1273;
        _1277 = _1273;
        _1278 = _1273;
        _1279 = _1273;
        _1280 = _1273;
        _1281 = _1273;
        _1282 = _1273;
        _1283 = _1273;
        _1284 = _1273;
        _1285 = 0.0;
        _1286 = 0.0;
        _1287 = 0.0;
    }
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1311 = fma(_971, cbModelParam._m0[30u].z, fma(_967, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963));
        float _1315 = fma(_971, cbModelParam._m0[31u].z, fma(_967, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963));
        float _1319 = fma(_971, cbModelParam._m0[32u].z, fma(_967, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963));
        float _1342 = _963 + _733;
        float _1343 = _967 + _734;
        float _1344 = _971 + _735;
        float _1354 = fma(_1344, cbModelParam._m0[30u].z, fma(_1343, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1342)) - _1311;
        float _1355 = fma(_1344, cbModelParam._m0[31u].z, fma(_1343, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1342)) - _1315;
        float _1356 = fma(_1344, cbModelParam._m0[32u].z, fma(_1343, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1342)) - _1319;
        float _1360 = inversesqrt(dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356)));
        float _1373 = ((_1360 * _1354) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1311 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1360 * _1355) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1315 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1360 * _1356) / cbModelParam._m0[35u].z) + ((((((_1319 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        float _1410 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1377.x + (-0.5));
        float _1412 = _1410 * (_1377.y + (-0.5));
        float _1413 = _1410 * (_1377.z + (-0.5));
        float _1420 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1384.x + (-0.5));
        float _1422 = _1420 * (_1384.y + (-0.5));
        float _1423 = _1420 * (_1384.z + (-0.5));
        float _1430 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1391.x + (-0.5));
        float _1432 = _1430 * (_1391.y + (-0.5));
        float _1433 = _1430 * (_1391.z + (-0.5));
        float _1440 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1398.x + (-0.5));
        float _1442 = _1440 * (_1398.y + (-0.5));
        float _1443 = _1440 * (_1398.z + (-0.5));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = _1411 * 0.5;
        float _1448 = _1421 * 0.5;
        float _1449 = _1431 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_733, _734, _735), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _3966 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1474 + 1.0))) + _1479) * _1444;
        float _1489 = _1412 * 0.5;
        float _1490 = _1422 * 0.5;
        float _1491 = _1432 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_733, _734, _735), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _3999 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1516 + 1.0))) + _1521) * _1445;
        float _1531 = _1413 * 0.5;
        float _1532 = _1423 * 0.5;
        float _1533 = _1433 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_733, _734, _735), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4032 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1558 + 1.0))) + _1563) * _1446;
        _1580 = _1413;
        _1581 = _1412;
        _1582 = _1411;
        _1583 = _1423;
        _1584 = _1422;
        _1585 = _1421;
        _1586 = _1433;
        _1587 = _1432;
        _1588 = _1431;
        _1589 = _1446;
        _1590 = _1445;
        _1591 = _1444;
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
    }
    else
    {
        _1580 = _1273;
        _1581 = _1273;
        _1582 = _1273;
        _1583 = _1273;
        _1584 = _1273;
        _1585 = _1273;
        _1586 = _1273;
        _1587 = _1273;
        _1588 = _1273;
        _1589 = _1273;
        _1590 = _1273;
        _1591 = _1273;
        _1592 = 0.0;
        _1593 = 0.0;
        _1594 = 0.0;
    }
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1285)) + _1285;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1286)) + _1286;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1287)) + _1287;
    float _1627 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1605, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1630 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1605, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1633 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1605, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1604));
    float _1648 = _907 * 0.5;
    float _1649 = _908 * 0.5;
    float _1650 = _909 * 0.5;
    float _1651 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1654 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1657 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1691;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1664 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1272, _1276, _1279, _1282));
        float _1668 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1672 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1275, _1278, _1281, _1284));
        float _1679 = dot(vec4(cbModelParam._m0[39u]), vec4(_1648, _1649, _1650, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1702;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1693 = dot(vec4(cbModelParam._m0[40u]), vec4(_1648, _1649, _1650, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1693) ? 0.0 : (isnan(0.0) ? _1693 : max(0.0, _1693))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1706 = (_1702 * cbModelParam._m0[1u].x) + (_1691 * (1.0 - cbModelParam._m0[1u].x));
    float _1716 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _736);
    float _1717 = isnan(_1716) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1716 : min(cbModelParam._m0[25u].z, _1716));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1766 = fma(_971, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963)) + cbModelParam._m0[13u].w;
        float _1770 = fma(_971, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963)) + cbModelParam._m0[14u].w;
        float _1774 = fma(_971, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963)) + cbModelParam._m0[15u].w;
        float _1777 = fma(_909, cbModelParam._m0[13u].z, fma(_908, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907));
        float _1780 = fma(_909, cbModelParam._m0[14u].z, fma(_908, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907));
        float _1783 = fma(_909, cbModelParam._m0[15u].z, fma(_908, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907));
        float _1811;
        if (_1777 > 0.0)
        {
            _1811 = abs((1.0 - _1766) / _1777);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1766 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1811 = frontier_phi_14_12_ladder;
        }
        float _2035;
        if (_1780 > 0.0)
        {
            _2035 = abs((1.0 - _1770) / _1780);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1770 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2035 = frontier_phi_23_19_ladder;
        }
        float _2292;
        if (_1783 > 0.0)
        {
            _2292 = abs((1.0 - _1774) / _1783);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1774 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2292 = frontier_phi_35_30_ladder;
        }
        float _2294 = isnan(_2035) ? _1811 : (isnan(_1811) ? _2035 : min(_1811, _2035));
        float _2295 = isnan(_2292) ? _2294 : (isnan(_2294) ? _2292 : min(_2294, _2292));
        float _2299 = (_2295 * _1777) + _1766;
        float _2300 = (_2295 * _1780) + _1770;
        float _2301 = (_2295 * _1783) + _1774;
        float _2302 = _2295 * 9.9999997473787516355514526367188e-05;
        float _2304 = (-1.0) - _2302;
        float _2306 = _2302 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2301 > _2306) || ((_2301 < _2304) || ((_2300 > _2306) || ((_2300 < _2304) || ((_2299 < _2304) || (_2299 > _2306))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2301, cbModelParam._m0[9u].z, fma(_2300, cbModelParam._m0[9u].y, _2299 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2301, cbModelParam._m0[10u].z, fma(_2300, cbModelParam._m0[10u].y, _2299 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2301, cbModelParam._m0[11u].z, fma(_2300, cbModelParam._m0[11u].y, _2299 * cbModelParam._m0[11u].x))), _1717);
            frontier_phi_13_35_ladder = _2429.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2429.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2429.x * cbModelParam._m0[1u].y;
        }
        _1799 = frontier_phi_13_35_ladder_2;
        _1801 = frontier_phi_13_35_ladder_1;
        _1803 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1787 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_907, _908, _909), _1717);
        _1799 = _1787.x * cbModelParam._m0[1u].y;
        _1801 = _1787.y * cbModelParam._m0[1u].y;
        _1803 = _1787.z * cbModelParam._m0[1u].y;
    }
    float _1807 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _736);
    float _1808 = isnan(_1807) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1807 : min(cbModelParam._m0[25u].w, _1807));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1862 = fma(_971, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963)) + cbModelParam._m0[21u].w;
        float _1866 = fma(_971, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963)) + cbModelParam._m0[22u].w;
        float _1870 = fma(_971, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963)) + cbModelParam._m0[23u].w;
        float _1873 = fma(_909, cbModelParam._m0[21u].z, fma(_908, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907));
        float _1876 = fma(_909, cbModelParam._m0[22u].z, fma(_908, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907));
        float _1879 = fma(_909, cbModelParam._m0[23u].z, fma(_908, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907));
        float _2040;
        if (_1873 > 0.0)
        {
            _2040 = abs((1.0 - _1862) / _1873);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1862 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2040 = frontier_phi_25_21_ladder;
        }
        float _2319;
        if (_1876 > 0.0)
        {
            _2319 = abs((1.0 - _1866) / _1876);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1866 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2319 = frontier_phi_37_32_ladder;
        }
        float _2532;
        if (_1879 > 0.0)
        {
            _2532 = abs((1.0 - _1870) / _1879);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1870 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2532 = frontier_phi_46_43_ladder;
        }
        float _2534 = isnan(_2319) ? _2040 : (isnan(_2040) ? _2319 : min(_2040, _2319));
        float _2535 = isnan(_2532) ? _2534 : (isnan(_2534) ? _2532 : min(_2534, _2532));
        float _2539 = (_2535 * _1873) + _1862;
        float _2540 = (_2535 * _1876) + _1866;
        float _2541 = (_2535 * _1879) + _1870;
        float _2542 = _2535 * 9.9999997473787516355514526367188e-05;
        float _2543 = (-1.0) - _2542;
        float _2545 = _2542 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2541 > _2545) || ((_2541 < _2543) || ((_2540 > _2545) || ((_2540 < _2543) || ((_2539 < _2543) || (_2539 > _2545))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2541, cbModelParam._m0[17u].z, fma(_2540, cbModelParam._m0[17u].y, _2539 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2541, cbModelParam._m0[18u].z, fma(_2540, cbModelParam._m0[18u].y, _2539 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2541, cbModelParam._m0[19u].z, fma(_2540, cbModelParam._m0[19u].y, _2539 * cbModelParam._m0[19u].x))), _1808);
            frontier_phi_22_46_ladder = _2740.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2740.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2740.x * cbModelParam._m0[1u].z;
        }
        _1898 = frontier_phi_22_46_ladder_2;
        _1900 = frontier_phi_22_46_ladder_1;
        _1902 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_907, _908, _909), _1808);
        _1898 = _1882.x * cbModelParam._m0[1u].z;
        _1900 = _1882.y * cbModelParam._m0[1u].z;
        _1902 = _1882.z * cbModelParam._m0[1u].z;
    }
    float _1915 = (((_934 * _883) + _935) * _899) * ((cbModelParam._m0[1u].w * (_1898 - _1799)) + _1799);
    float _1917 = (((_934 * _885) + _935) * _899) * ((cbModelParam._m0[1u].w * (_1900 - _1801)) + _1801);
    float _1919 = (((_934 * _886) + _935) * _899) * ((cbModelParam._m0[1u].w * (_1902 - _1803)) + _1803);
    float _1922 = fma(_1919, cbSceneParam._m0[89u].z, fma(_1917, cbSceneParam._m0[89u].y, _1915 * cbSceneParam._m0[89u].x));
    float _1925 = fma(_1919, cbSceneParam._m0[90u].z, fma(_1917, cbSceneParam._m0[90u].y, _1915 * cbSceneParam._m0[90u].x));
    float _1928 = fma(_1919, cbSceneParam._m0[91u].z, fma(_1917, cbSceneParam._m0[91u].y, _1915 * cbSceneParam._m0[91u].x));
    vec4 _1936 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_821, _822));
    float _1938 = _1936.w;
    float _1950 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1938);
    float _1951 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1938);
    float _1952 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1938);
    uvec4 _1956 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1958 = _1956.x * 14u;
    uint _1959 = _1958 + 13u;
    float _1966 = _899 + (-1.0);
    float _1971 = (cbLight._m0[_1959].x * _1966) + 1.0;
    float _1972 = (cbLight._m0[_1959].y * _1966) + 1.0;
    float _1973 = (cbLight._m0[_1959].z * _1966) + 1.0;
    float _1974 = (cbLight._m0[_1959].w * _1966) + 1.0;
    uint _1975 = _1958 + 5u;
    float _1981 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
    uint _1985 = _1958 + 4u;
    float _1994 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
    uint _1998 = _1958 | 1u;
    float _2009 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_733, _734, _735));
    float _2012 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_733, _734, _735));
    float _4168 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _4179 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2017 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * 0.3183098733425140380859375;
    float _2019 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * 0.3183098733425140380859375;
    float _2026 = ((cbLight._m0[_1975].x * _1981) * _2019) + (((cbLight._m0[_1985].x * _1950) * _1994) * _2017);
    float _2027 = ((_1981 * cbLight._m0[_1975].y) * _2019) + (((cbLight._m0[_1985].y * _1951) * _1994) * _2017);
    float _2028 = ((_1981 * cbLight._m0[_1975].z) * _2019) + (((cbLight._m0[_1985].z * _1952) * _1994) * _2017);
    uvec4 _2032 = floatBitsToUint(cbLight._m0[_1958 + 12u]);
    bool _2034 = _2032.x == 0u;
    float _2045;
    float _2047;
    float _2049;
    if (_2034)
    {
        _2045 = _2026;
        _2047 = _2027;
        _2049 = _2028;
    }
    else
    {
        uint _2053 = _1958 + 6u;
        float _2069 = (dot(vec3(cbLight._m0[_1958 + 2u].xyz), vec3(_733, _734, _735)) * 0.5) + 0.5;
        float _2070 = _2069 * _2069;
        float _4190 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2071 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2072 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2045 = (((cbLight._m0[_2053].x * 0.3183098733425140380859375) * _2071) * _2072) + _2026;
        _2047 = (((cbLight._m0[_2053].y * 0.3183098733425140380859375) * _2071) * _2072) + _2027;
        _2049 = (((cbLight._m0[_2053].z * 0.3183098733425140380859375) * _2071) * _2072) + _2028;
    }
    bool _2052 = _2032.y == 0u;
    float _2090;
    float _2092;
    float _2094;
    if (_2052)
    {
        _2090 = _2045;
        _2092 = _2047;
        _2094 = _2049;
    }
    else
    {
        uint _2263 = _1958 + 7u;
        float _2279 = (dot(vec3(cbLight._m0[_1958 + 3u].xyz), vec3(_733, _734, _735)) * 0.5) + 0.5;
        float _2280 = _2279 * _2279;
        float _4206 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2281 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2282 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2090 = (((cbLight._m0[_2263].x * 0.3183098733425140380859375) * _2281) * _2282) + _2045;
        _2092 = (((cbLight._m0[_2263].y * 0.3183098733425140380859375) * _2281) * _2282) + _2047;
        _2094 = (((cbLight._m0[_2263].z * 0.3183098733425140380859375) * _2281) * _2282) + _2049;
    }
    uint _2097 = _1958 + 8u;
    float _2110 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _736) * 0.949999988079071044921875);
    float _2111 = _2110 * _2110;
    float _2112 = cbLight._m0[_1958].x + _813;
    float _2113 = cbLight._m0[_1958].y + _814;
    float _2114 = cbLight._m0[_1958].z + _815;
    float _2118 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
    float _2119 = _2118 * _2112;
    float _2120 = _2118 * _2113;
    float _2121 = _2118 * _2114;
    float _2122 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_1958].xyz));
    float _4222 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _4233 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _2126 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2127 = dot(vec3(_733, _734, _735), vec3(_2119, _2120, _2121));
    float _4244 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2131 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_2119, _2120, _2121));
    float _4255 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2135 = _2111 * _2111;
    float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
    float _2147 = exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0);
    float _2148 = 0.959999978542327880859375 - _880;
    float _2150 = 0.959999978542327880859375 - _881;
    float _2151 = 0.959999978542327880859375 - _882;
    float _2158 = 1.0 - _2111;
    float _2169 = (0.5 / (((_2126 * ((_2125 * _2158) + _2111)) + 9.9999999392252902907785028219223e-09) + (((_2126 * _2158) + _2111) * _2125))) * _2125;
    float _4266 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2171 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
    uint _2185 = _1958 + 9u;
    float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1998].w)) * _736) * 0.949999988079071044921875);
    float _2197 = _2196 * _2196;
    float _2198 = cbLight._m0[_1998].x + _813;
    float _2199 = cbLight._m0[_1998].y + _814;
    float _2200 = cbLight._m0[_1998].z + _815;
    float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
    float _2205 = _2204 * _2198;
    float _2206 = _2204 * _2199;
    float _2207 = _2204 * _2200;
    float _2208 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_1998].xyz));
    float _4277 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2212 = dot(vec3(_733, _734, _735), vec3(_2205, _2206, _2207));
    float _4288 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2216 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_2205, _2206, _2207));
    float _4299 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2220 = _2197 * _2197;
    float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
    float _2231 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
    float _2238 = 1.0 - _2197;
    float _2248 = (0.5 / (((_2126 * ((_2211 * _2238) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_2126 * _2238) + _2197) * _2211))) * _2211;
    float _4310 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2250 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
    float _2260 = (((((_2231 * _2148) + _883) * cbLight._m0[_2185].x) * _2250) * _1981) + ((((cbLight._m0[_2097].x * _1950) * ((_2147 * _2148) + _883)) * _2171) * _1994);
    float _2261 = (((((_2231 * _2150) + _885) * cbLight._m0[_2185].y) * _2250) * _1981) + ((((cbLight._m0[_2097].y * _1951) * ((_2147 * _2150) + _885)) * _2171) * _1994);
    float _2262 = (((((_2231 * _2151) + _886) * cbLight._m0[_2185].z) * _2250) * _1981) + ((((cbLight._m0[_2097].z * _1952) * ((_2147 * _2151) + _886)) * _2171) * _1994);
    float _2324;
    float _2326;
    float _2328;
    if (_2034)
    {
        _2324 = _2260;
        _2326 = _2261;
        _2328 = _2262;
    }
    else
    {
        uint _2330 = _1958 + 2u;
        uint _2334 = _1958 + 10u;
        float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _736) * 0.949999988079071044921875);
        float _2349 = _2348 * _2348;
        float _2350 = cbLight._m0[_2330].x + _813;
        float _2351 = cbLight._m0[_2330].y + _814;
        float _2352 = cbLight._m0[_2330].z + _815;
        float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
        float _2357 = _2356 * _2350;
        float _2358 = _2356 * _2351;
        float _2359 = _2356 * _2352;
        float _2360 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2330].xyz));
        float _4321 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2364 = dot(vec3(_733, _734, _735), vec3(_2357, _2358, _2359));
        float _4332 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2368 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2357, _2358, _2359));
        float _4343 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2372 = _2349 * _2349;
        float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
        float _2383 = exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0);
        float _2390 = 1.0 - _2349;
        float _2400 = (0.5 / (((_2126 * ((_2363 * _2390) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2126 * _2390) + _2349) * _2363))) * _2363;
        float _4354 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2402 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
        float _2403 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2324 = (((((_2383 * _2148) + _883) * cbLight._m0[_2334].x) * _2402) * _2403) + _2260;
        _2326 = (((((_2383 * _2150) + _885) * cbLight._m0[_2334].y) * _2402) * _2403) + _2261;
        _2328 = (((((_2383 * _2151) + _886) * cbLight._m0[_2334].z) * _2402) * _2403) + _2262;
    }
    float _2438;
    float _2440;
    float _2442;
    if (_2052)
    {
        _2438 = _2324;
        _2440 = _2326;
        _2442 = _2328;
    }
    else
    {
        uint _2449 = _1958 + 3u;
        uint _2453 = _1958 + 11u;
        float _2467 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2449].w)) * _736) * 0.949999988079071044921875);
        float _2468 = _2467 * _2467;
        float _2469 = cbLight._m0[_2449].x + _813;
        float _2470 = cbLight._m0[_2449].y + _814;
        float _2471 = cbLight._m0[_2449].z + _815;
        float _2475 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
        float _2476 = _2475 * _2469;
        float _2477 = _2475 * _2470;
        float _2478 = _2475 * _2471;
        float _2479 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2449].xyz));
        float _4370 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2483 = dot(vec3(_733, _734, _735), vec3(_2476, _2477, _2478));
        float _4381 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2487 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_2476, _2477, _2478));
        float _4392 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2491 = _2468 * _2468;
        float _2495 = ((_2486 * _2486) * (_2491 + (-1.0))) + 1.0;
        float _2502 = exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0);
        float _2509 = 1.0 - _2468;
        float _2519 = (0.5 / (((_2126 * ((_2482 * _2509) + _2468)) + 9.9999999392252902907785028219223e-09) + (((_2126 * _2509) + _2468) * _2482))) * _2482;
        float _4403 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2521 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2491 / ((_2495 * _2495) * 3.141590118408203125));
        float _2522 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2438 = (((((_2502 * _2148) + _883) * cbLight._m0[_2453].x) * _2521) * _2522) + _2324;
        _2440 = (((((_2502 * _2150) + _885) * cbLight._m0[_2453].y) * _2521) * _2522) + _2326;
        _2442 = (((((_2502 * _2151) + _886) * cbLight._m0[_2453].z) * _2521) * _2522) + _2328;
    }
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    if (_1956.y == 0u)
    {
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2597;
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2597;
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2597;
        uvec4 _2612 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2613 = _2612.x;
        uint _2624 = uint((float(_2612.y) * floor(float(uint(cbSceneParam._m0[85u].y * _822) / _2613))) + floor(float(uint(cbSceneParam._m0[85u].x * _821) / _2613)));
        float _2634 = (log2(_2600 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2635 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        uint _2638 = uint(isnan(14.0) ? _2635 : (isnan(_2635) ? 14.0 : min(_2635, 14.0)));
        uvec4 _2643 = texelFetch(g_lightClusterGridBuffer, int(((_2638 << 2u) + (_2624 << 6u)) >> 2u));
        uint _2644 = _2643.x;
        uint _2645 = _2612.z;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        if (((((1u << ((_2645 >> 4u) & 15u)) + 4294967295u) & _2644) == 0u) || ((_2645 & 240u) == 0u))
        {
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
        }
        else
        {
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2756;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            uint _2896 = 0u;
            uint _2905;
            bool _2906;
            for (;;)
            {
                _2905 = texelFetch(g_lightClassification, int((((_2638 << 5u) + (_2624 << 9u)) + (_2896 << 2u)) >> 2u)).x;
                _2906 = _2905 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2906)
                {
                    frontier_phi_61_pred = _2890;
                    frontier_phi_61_pred_1 = _2895;
                    frontier_phi_61_pred_2 = _2894;
                    frontier_phi_61_pred_3 = _2893;
                    frontier_phi_61_pred_4 = _2892;
                    frontier_phi_61_pred_5 = _2891;
                }
                else
                {
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    uint _3020;
                    _3014 = _2890;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2894;
                    _3019 = _2895;
                    _3020 = _2905;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    for (;;)
                    {
                        uint _3024 = uint(findLSB(_3020)) + (_2896 << 5u);
                        uint _3021 = (_3020 + 4294967295u) & _3020;
                        uint _3026 = _3024 * 48u;
                        vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 3u)).x));
                        uint _3046 = (_3024 * 48u) + 4u;
                        vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 3u)).x));
                        uint _3065 = (_3024 * 48u) + 8u;
                        vec3 _3076 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x));
                        float _3080 = _3040.x - _2598;
                        float _3081 = _3040.y - _2599;
                        float _3082 = _3040.z - _2600;
                        float _3083 = dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082));
                        float _3086 = inversesqrt(_3083);
                        float _3087 = _3086 * _3080;
                        float _3088 = _3086 * _3081;
                        float _3089 = _3086 * _3082;
                        float _3090 = dot(vec3(_840, _843, _846), vec3(_3087, _3088, _3089));
                        float _3095 = 1.0 - (_3083 * _3040.w);
                        float _4429 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3096 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                        float _3097 = sqrt(_3083) * _3059.w;
                        float _3100 = 1.39999997615814208984375 / (_3097 + 1.39999997615814208984375);
                        float _3101 = _3100 * _3100;
                        float _3104 = ((1.0 - _3101) * _3090) + _3101;
                        float _3107 = _3097 * _3097;
                        float _3111 = ((isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0))) * _3096) / ((_3107 * 0.699999988079071044921875) + 1.0);
                        float _3115 = (-0.0) - _2598;
                        float _3116 = (-0.0) - _2599;
                        float _3117 = (-0.0) - _2600;
                        float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3132 = exp2(log2(1.0 / ((_3107 * 3.5) + 5.0)) * 0.25);
                        float _3133 = 1.0 - _915;
                        float _3140 = sqrt(1.0 - ((1.0 - (_3133 * _3133)) * (1.0 - (_3132 * _3132))));
                        float _3141 = _3140 * _3140;
                        float _3142 = _3141 * _3141;
                        float _3143 = _3122 + _3087;
                        float _3144 = _3123 + _3088;
                        float _3145 = _3124 + _3089;
                        float _3149 = inversesqrt(dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145)));
                        float _3153 = dot(vec3(_840, _843, _846), vec3(_3122, _3123, _3124));
                        float _4445 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3156 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3157 = dot(vec3(_840, _843, _846), vec3(_3149 * _3143, _3149 * _3144, _3149 * _3145));
                        float _4456 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3160 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3164 = ((_3160 * _3160) * (_3142 + (-1.0))) + 1.0;
                        float _3165 = _3100 * _3141;
                        float _3166 = _3165 * _3165;
                        float _3169 = ((1.0 - _3166) * _3090) + _3166;
                        float _4467 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3170 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3171 = 1.0 - _3141;
                        float _3181 = (0.5 / (((_3170 * ((_3156 * _3171) + _3141)) + 9.9999999392252902907785028219223e-09) + (((_3170 * _3171) + _3141) * _3156))) * _3170;
                        float _4478 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3192 = (((_3142 * 3.1415927410125732421875) * (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) / ((_3164 * _3164) * ((_3107 * 2.1991131305694580078125) + 3.141590118408203125))) * _3096;
                        _2949 = (_3111 * _3059.x) + _3017;
                        _2950 = (_3111 * _3059.y) + _3018;
                        _2951 = (_3111 * _3059.z) + _3019;
                        _2946 = (_3192 * _3076.x) + _3014;
                        _2947 = (_3192 * _3076.y) + _3015;
                        _2948 = (_3192 * _3076.z) + _3016;
                        if (_3021 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _2950;
                            _3019 = _2951;
                            _3020 = _3021;
                        }
                    }
                    frontier_phi_61_pred = _2946;
                    frontier_phi_61_pred_1 = _2951;
                    frontier_phi_61_pred_2 = _2950;
                    frontier_phi_61_pred_3 = _2949;
                    frontier_phi_61_pred_4 = _2948;
                    frontier_phi_61_pred_5 = _2947;
                }
                _2746 = frontier_phi_61_pred;
                _2756 = frontier_phi_61_pred_1;
                _2754 = frontier_phi_61_pred_2;
                _2752 = frontier_phi_61_pred_3;
                _2750 = frontier_phi_61_pred_4;
                _2748 = frontier_phi_61_pred_5;
                uint _2897 = _2896 + 1u;
                if (_2897 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2890 = _2746;
                    _2891 = _2748;
                    _2892 = _2750;
                    _2893 = _2752;
                    _2894 = _2754;
                    _2895 = _2756;
                    _2896 = _2897;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
        }
        uvec4 _2759 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2760 = _2759.z;
        uint _2762 = (_2760 >> 8u) & 15u;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        if (((4294967295u << _2762) & _2644) == 0u)
        {
            _2858 = _2745;
            _2860 = _2747;
            _2862 = _2749;
            _2864 = _2751;
            _2866 = _2753;
            _2868 = _2755;
        }
        else
        {
            float _2883 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
            float _2884 = _2883 * _2598;
            float _2885 = _2883 * _2599;
            float _2886 = _2883 * _2600;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2762 < ((_2760 >> 12u) & 15u))
            {
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _2997 = _2745;
                float _2998 = _2747;
                float _2999 = _2749;
                float _3000 = _2751;
                float _3001 = _2753;
                float _3002 = _2755;
                uint _3003 = _2762;
                uint _3012;
                bool _3013;
                for (;;)
                {
                    _3012 = texelFetch(g_lightClassification, int((((_2638 << 5u) + (_2624 << 9u)) + (_3003 << 2u)) >> 2u)).x;
                    _3013 = _3012 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3013)
                    {
                        frontier_phi_67_pred = _3000;
                        frontier_phi_67_pred_1 = _3001;
                        frontier_phi_67_pred_2 = _3002;
                        frontier_phi_67_pred_3 = _2999;
                        frontier_phi_67_pred_4 = _2998;
                        frontier_phi_67_pred_5 = _2997;
                    }
                    else
                    {
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3210 = _2997;
                        float _3211 = _2998;
                        float _3212 = _2999;
                        float _3213 = _3000;
                        float _3214 = _3001;
                        float _3215 = _3002;
                        uint _3216 = _3012;
                        uint _3217;
                        vec4 _3242;
                        float _3243;
                        vec4 _3258;
                        vec3 _3270;
                        vec4 _3285;
                        vec4 _3300;
                        float _3346;
                        bool _3347;
                        for (;;)
                        {
                            uint _3227 = ((_3003 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3216));
                            _3217 = (_3216 + 4294967295u) & _3216;
                            uint _3229 = _3227 * 40u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            _3243 = _3242.w;
                            uint _3245 = (_3227 * 40u) + 4u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3227 * 40u) + 8u;
                            _3270 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x));
                            uint _3272 = (_3227 * 40u) + 16u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3287 = (_3227 * 40u) + 20u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3302 = (_3227 * 40u) + 24u;
                            vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3321 = (_3227 * 40u) + 28u;
                            vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            _3346 = fma(_2600, _3334.z, fma(_2599, _3334.y, _3334.x * _2598)) + _3334.w;
                            _3347 = !((fma(_2600, _3315.z, fma(_2599, _3315.y, _3315.x * _2598)) + _3315.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3347)
                            {
                                float _3374 = _3242.x - _2598;
                                float _3375 = _3242.y - _2599;
                                float _3376 = _3242.z - _2600;
                                float _3377 = dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376));
                                float _3380 = inversesqrt(_3377);
                                float _3381 = _3380 * _3374;
                                float _3382 = _3380 * _3375;
                                float _3383 = _3380 * _3376;
                                float _3387 = 1.0 - (_3377 / (_3243 * _3243));
                                float _4489 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3392 = sqrt(_3377) * _3258.w;
                                float _3394 = 1.39999997615814208984375 / (_3392 + 1.39999997615814208984375);
                                float _3395 = _3394 * _3394;
                                float _3398 = ((1.0 - _3395) * dot(vec3(_3381, _3382, _3383), vec3(_840, _843, _846))) + _3395;
                                float _3401 = _3392 * _3392;
                                float _3405 = (fma(_2600, _3285.z, fma(_2599, _3285.y, _3285.x * _2598)) + _3285.w) / _3346;
                                float _3406 = (fma(_2600, _3300.z, fma(_2599, _3300.y, _3300.x * _2598)) + _3300.w) / _3346;
                                float _3410 = 1.0 - dot(vec2(_3405, _3406), vec2(_3405, _3406));
                                float _4505 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3411 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3412 = _3411 * (((isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))) * _3388) / ((_3401 * 0.699999988079071044921875) + 1.0));
                                float _3424 = exp2(log2(1.0 / ((_3401 * 3.5) + 5.0)) * 0.25);
                                float _3425 = 1.0 - _915;
                                float _3432 = sqrt(1.0 - ((1.0 - (_3425 * _3425)) * (1.0 - (_3424 * _3424))));
                                float _3433 = _3432 * _3432;
                                float _3434 = _3433 * _3433;
                                float _3435 = _3381 - _2884;
                                float _3436 = _3382 - _2885;
                                float _3437 = _3383 - _2886;
                                float _3441 = inversesqrt(dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437)));
                                float _3445 = dot(vec3(_840, _843, _846), vec3((-0.0) - _2884, (-0.0) - _2885, (-0.0) - _2886));
                                float _4516 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3448 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3449 = dot(vec3(_840, _843, _846), vec3(_3441 * _3435, _3441 * _3436, _3441 * _3437));
                                float _4527 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3452 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3456 = ((_3452 * _3452) * (_3434 + (-1.0))) + 1.0;
                                float _3457 = _3394 * _3433;
                                float _3458 = _3457 * _3457;
                                float _3464 = ((1.0 - _3458) * dot(vec3(_840, _843, _846), vec3(_3381, _3382, _3383))) + _3458;
                                float _4538 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3465 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3466 = 1.0 - _3433;
                                float _3476 = (0.5 / (((_3465 * ((_3448 * _3466) + _3433)) + 9.9999999392252902907785028219223e-09) + (((_3465 * _3466) + _3433) * _3448))) * _3465;
                                float _4549 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3486 = (_3411 * _3388) * (((_3434 * 3.1415927410125732421875) * (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) / ((_3456 * _3456) * ((_3401 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3486 * _3270.x;
                                frontier_phi_73_pred_1 = _3486 * _3270.y;
                                frontier_phi_73_pred_2 = _3412 * _3258.z;
                                frontier_phi_73_pred_3 = _3412 * _3258.y;
                                frontier_phi_73_pred_4 = _3412 * _3258.x;
                                frontier_phi_73_pred_5 = _3486 * _3270.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3490 = frontier_phi_73_pred;
                            _3491 = frontier_phi_73_pred_1;
                            _3495 = frontier_phi_73_pred_2;
                            _3494 = frontier_phi_73_pred_3;
                            _3493 = frontier_phi_73_pred_4;
                            _3492 = frontier_phi_73_pred_5;
                            _3200 = _3493 + _3213;
                            _3201 = _3494 + _3214;
                            _3202 = _3495 + _3215;
                            _3197 = _3490 + _3210;
                            _3198 = _3491 + _3211;
                            _3199 = _3492 + _3212;
                            if (_3217 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3217;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3200;
                        frontier_phi_67_pred_1 = _3201;
                        frontier_phi_67_pred_2 = _3202;
                        frontier_phi_67_pred_3 = _3199;
                        frontier_phi_67_pred_4 = _3198;
                        frontier_phi_67_pred_5 = _3197;
                    }
                    _2865 = frontier_phi_67_pred;
                    _2867 = frontier_phi_67_pred_1;
                    _2869 = frontier_phi_67_pred_2;
                    _2863 = frontier_phi_67_pred_3;
                    _2861 = frontier_phi_67_pred_4;
                    _2859 = frontier_phi_67_pred_5;
                    uint _3004 = _3003 + 1u;
                    if (_3004 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2997 = _2859;
                        _2998 = _2861;
                        _2999 = _2863;
                        _3000 = _2865;
                        _3001 = _2867;
                        _3002 = _2869;
                        _3003 = _3004;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2867;
                frontier_phi_55_56_ladder_1 = _2869;
                frontier_phi_55_56_ladder_2 = _2865;
                frontier_phi_55_56_ladder_3 = _2863;
                frontier_phi_55_56_ladder_4 = _2861;
                frontier_phi_55_56_ladder_5 = _2859;
            }
            else
            {
                frontier_phi_55_56_ladder = _2753;
                frontier_phi_55_56_ladder_1 = _2755;
                frontier_phi_55_56_ladder_2 = _2751;
                frontier_phi_55_56_ladder_3 = _2749;
                frontier_phi_55_56_ladder_4 = _2747;
                frontier_phi_55_56_ladder_5 = _2745;
            }
            _2858 = frontier_phi_55_56_ladder_5;
            _2860 = frontier_phi_55_56_ladder_4;
            _2862 = frontier_phi_55_56_ladder_3;
            _2864 = frontier_phi_55_56_ladder_2;
            _2866 = frontier_phi_55_56_ladder;
            _2868 = frontier_phi_55_56_ladder_1;
        }
        float _2873 = isnan(1.0) ? _899 : (isnan(_899) ? 1.0 : min(_899, 1.0));
        _2657 = (_2873 * _2864) + _2090;
        _2659 = (_2873 * _2866) + _2092;
        _2661 = (_2873 * _2868) + _2094;
        _2663 = ((_2858 * _883) * _2873) + _2438;
        _2665 = ((_2860 * _885) * _2873) + _2440;
        _2667 = ((_2862 * _886) * _2873) + _2442;
    }
    else
    {
        _2657 = _2090;
        _2659 = _2092;
        _2661 = _2094;
        _2663 = _2438;
        _2665 = _2440;
        _2667 = _2442;
    }
    float _4565 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4576 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4587 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    uint _2687 = _270 + 6u;
    float _2695 = _821 / cbSceneParam._m0[86u].x;
    float _2696 = _822 / cbSceneParam._m0[86u].y;
    vec4 _2710 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2695, _2696, (log2((isnan(cbSceneParam._m0[77u].w) ? _755 : (isnan(_755) ? cbSceneParam._m0[77u].w : min(_755, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2712 = _2710.x;
    float _2713 = _2710.y;
    float _2714 = _2710.z;
    float _2715 = _2710.w;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    if (_755 > cbSceneParam._m0[78u].w)
    {
        float _2770 = isnan(_755) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _755 : min(cbSceneParam._m0[80u].w, _755));
        float _2771 = _2770 / _755;
        float _2782 = _2771 * _806;
        float _2783 = _807 * _2771;
        float _2784 = (-0.0) - _2783;
        float _2786 = _2771 * _808;
        float _2788 = (cbSceneParam._m0[77u].w * _2784) / _2770;
        float _2789 = _2788 + cbSceneParam._m0[79u].w;
        float _2790 = cbSceneParam._m0[79u].w - _2783;
        float _2796 = sqrt(((_2782 * _2782) + (_2783 * _2783)) + (_2786 * _2786));
        float _2799 = (1.0 - (cbSceneParam._m0[77u].w / _2770)) * _2796;
        float _2804 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2806 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2959;
        if (abs((_2784 - _2788) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2959 = ((((_2789 > 0.0) ? exp2(_2804 * _2789) : (2.0 - exp2(_2806 * _2789))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2799;
        }
        else
        {
            float _2919 = 1.0 / cbSceneParam._m0[80u].x;
            float _2920 = isnan(_2790) ? _2789 : (isnan(_2789) ? _2790 : max(_2789, _2790));
            float _2921 = isnan(_2790) ? _2789 : (isnan(_2789) ? _2790 : min(_2789, _2790));
            float _2930 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : min(_2920, 0.0));
            float _2931 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : min(_2921, 0.0));
            _2959 = ((abs(_2796 / _2784) * cbSceneParam._m0[80u].y) * ((((_2930 - _2931) * 2.0) - ((exp2(_2804 * (isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0)))) - exp2(_2804 * (isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0))))) * _2919)) - ((exp2(_2806 * _2930) - exp2(_2806 * _2931)) * _2919))) + (_2799 * cbSceneParam._m0[80u].z);
        }
        vec4 _2961 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2695, _2696, 1.0), 0.0);
        float _2970 = exp2((_2959 * (-1.44269502162933349609375)) * (1.0 - _2961.w));
        float _2971 = log2(_2970);
        float _2987 = log2(_2715);
        _2808 = (exp2(_2987 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].x)) * _2961.x) / cbSceneParam._m0[78u].x)) + _2712;
        _2810 = (exp2(_2987 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].y)) * _2961.y) / cbSceneParam._m0[78u].y)) + _2713;
        _2812 = (exp2(_2987 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].z)) * _2961.z) / cbSceneParam._m0[78u].z)) + _2714;
        _2814 = _2970 * _2715;
    }
    else
    {
        _2808 = _2712;
        _2810 = _2713;
        _2812 = _2714;
        _2814 = _2715;
    }
    float _2826 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2827 = _2826 == 3.0;
    float _2828 = log2(_2814);
    float _2835 = exp2(_2828 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2657 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _899))) + ((_2663 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1706)) * cbPerFrame._m0[3u].x));
    float _2836 = exp2(_2828 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2659 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _899))) + ((_2665 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1706)) * cbPerFrame._m0[3u].x));
    float _2837 = exp2(_2828 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2661 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _899))) + ((_2667 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1706)) * cbPerFrame._m0[3u].x));
    float _2846 = (_2826 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2846 * (_2827 ? _2835 : (_2835 + (cbSceneParam._m0[72u].w * _2808)));
    SV_Target.y = _2846 * (_2827 ? _2836 : (_2836 + (cbSceneParam._m0[72u].w * _2810)));
    SV_Target.z = _2846 * (_2827 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2812)));
    SV_Target.w = cbInstanceData._m0[_2687].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2687].w;
}


