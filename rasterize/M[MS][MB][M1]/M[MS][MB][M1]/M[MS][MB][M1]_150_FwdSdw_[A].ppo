#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1483;
float _4144;
float _4145;
float _4146;
float _4147;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4156 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4167 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4178 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _408 = _406.x;
    float _420 = dot(vec4(_408, _406.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _437 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_408 - _420) * cbMtdParam._m0[24u].y) + _420) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4189 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _445 = (_438 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _446 = (_438 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _447 = (_438 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    float _451 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _445;
    float _454 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _446;
    float _457 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _447;
    float _464 = ((_445 - _451) * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) + _451;
    float _465 = ((_446 - _454) * (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) + _454;
    float _466 = ((_447 - _457) * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) + _457;
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _553 = _549.z;
    float _562 = ((_532.z - _553) * _438) + _553;
    float _565 = ((((_532.x - _551) * _438) + _551) * 2.0) + (-1.0);
    float _566 = ((((_532.y - _552) * _438) + _552) * 2.0) + (-1.0);
    float _567 = dot(vec2(_565, _566), vec2(_565, _566));
    float _4200 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))));
    vec4 _592 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _604 = (_565 + ((((_505.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_592.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _605 = (_566 + ((((_505.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_592.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _608 = fma(_572, _256, fma(_605, _263, _604 * _249));
    float _611 = fma(_572, _257, fma(_605, _264, _604 * _250));
    float _614 = fma(_572, _258, fma(_605, _265, _604 * _251));
    float _618 = inversesqrt(dot(vec3(_608, _611, _614), vec3(_608, _611, _614)));
    vec4 _645 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _647 = _645.x;
    float _648 = 1.0 - _647;
    float _654 = (cbMtdParam._m0[19u].x + dot(vec4(_618 * _608, _618 * _611, _618 * _614, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_647 - _648) * cbMtdParam._m0[24u].z) + _648) * cbMtdParam._m0[21u].z);
    float _4211 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _655 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _657 = (-0.0) - cbMtdParam._m0[24u].x;
    float _659 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _659 : (isnan(_659) ? 1.0 : min(_659, 1.0));
    float _667 = _655 - ((_655 * TEXCOORD_8.x) * _660);
    float _668 = _655 - ((_655 * TEXCOORD_8.y) * _660);
    float _669 = _655 - ((_655 * TEXCOORD_8.z) * _660);
    float _676 = (_667 * ((_485.x * cbMtdParam._m0[18u].x) - _464)) + _464;
    float _677 = (_668 * ((_485.y * cbMtdParam._m0[18u].y) - _465)) + _465;
    float _678 = (_669 * ((_485.z * cbMtdParam._m0[18u].z) - _466)) + _466;
    vec4 _690 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _692 = _690.x;
    float _693 = 1.0 - _692;
    float _719 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_692 - _693) * cbMtdParam._m0[24u].w) + _693) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4232 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _720 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _728 = ((((cbMtdParam._m0[10u].x - _676) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _720) + _676;
    float _729 = ((((cbMtdParam._m0[10u].y - _677) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _720) + _677;
    float _730 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _678)) * _720) + _678;
    vec4 _756 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _758 = _756.x;
    float _776 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _758) * _438) + _758;
    float _780 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _776) * cbMtdParam._m0[19u].z) + _776;
    float _782 = _780 - (_780 * _667);
    float _784 = _782 - (_782 * _720);
    float _789 = (((_505.z - _562) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _562;
    float _793 = ((_592.z - _789) * cbMtdParam._m0[19u].w) + _789;
    vec4 _807 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _814 = (_807.x * 2.0) + (-1.0);
    float _815 = (_807.y * 2.0) + (-1.0);
    float _816 = dot(vec2(_814, _815), vec2(_814, _815));
    float _4243 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _824 = ((_807.z - _793) * _667) + _793;
    float _827 = ((cbMtdParam._m0[23u].y - _824) * _720) + _824;
    vec4 _846 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _852 = (_846.x * 2.0) + (-1.0);
    float _853 = (_846.y * 2.0) + (-1.0);
    float _854 = dot(vec2(_852, _853), vec2(_852, _853));
    float _4254 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _869 = ((sqrt(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) - _572) * _669) + _572;
    float _872 = (((_814 - _604) * _667) + _604) + (cbMtdParam._m0[21u].x * _604);
    float _873 = (((_815 - _605) * _668) + _605) + (cbMtdParam._m0[21u].x * _605);
    float _884 = (((_852 - _872) + (_872 * cbMtdParam._m0[22u].z)) * _720) + _872;
    float _885 = (((_853 - _873) + (_873 * cbMtdParam._m0[22u].z)) * _720) + _873;
    float _886 = (_720 * (sqrt(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) - _869)) + _869;
    float _890 = cbMtdParam._m0[22u].x + _592.w;
    float _893 = fma(_886, _256, fma(_885, _263, _884 * _249));
    float _896 = fma(_886, _257, fma(_885, _264, _884 * _250));
    float _899 = fma(_886, _258, fma(_885, _265, _884 * _251));
    float _903 = inversesqrt(dot(vec3(_893, _896, _899), vec3(_893, _896, _899)));
    float _904 = _903 * _893;
    float _905 = _903 * _896;
    float _906 = _903 * _899;
    float _4265 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _907 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _4276 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4287 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4298 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4309 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4320 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _912 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _926 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _976 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _966);
    float _977 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _966);
    float _978 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _966);
    float _982 = inversesqrt(dot(vec3(_976, _977, _978), vec3(_976, _977, _978)));
    float _983 = _976 * _982;
    float _984 = _977 * _982;
    float _985 = _978 * _982;
    vec4 _990 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _992 = _990.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1164 = sqrt(((_976 * _976) + (_977 * _977)) + (_978 * _978));
        float _1170 = (cbMatDynParam._m0[5u].x * _1164) + cbMatDynParam._m0[5u].y;
        float _4331 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1175 = (cbMatDynParam._m0[5u].z * _1164) + cbMatDynParam._m0[5u].w;
        float _4342 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) - _1171)) + _1171) < ((_992 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1003 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1004 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1022 = fma(_906, cbSceneParam._m0[5u].z, fma(_905, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _904));
    float _1025 = fma(_906, cbSceneParam._m0[6u].z, fma(_905, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _904));
    float _1028 = fma(_906, cbSceneParam._m0[7u].z, fma(_905, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _904));
    uint _1041 = _287 + 9u;
    uint _1042 = _1041 + uint(cbMatDynParam._m0[0u].w);
    float _1048 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * cbInstanceData._m0[_1042].x;
    float _1049 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * cbInstanceData._m0[_1042].y;
    float _1050 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * cbInstanceData._m0[_1042].z;
    float _4353 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _4364 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _4375 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _1054 = 1.0 - _912;
    float _1055 = _1051 * _1054;
    float _1056 = _1052 * _1054;
    float _1057 = _1053 * _1054;
    float _1062 = (_1051 + (-0.039999999105930328369140625)) * _912;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _912;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _912;
    float _1065 = _1062 + 0.039999999105930328369140625;
    float _1067 = _1063 + 0.039999999105930328369140625;
    float _1068 = _1064 + 0.039999999105930328369140625;
    vec4 _1077 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1003, cbSceneParam._m0[86u].y * _1004));
    float _1081 = ((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * TEXCOORD_5.w) * _1077.x;
    float _1082 = dot(vec3(_904, _905, _906), vec3(_983, _984, _985));
    float _1085 = _1082 * 2.0;
    float _1089 = (_1085 * _904) - _983;
    float _1090 = (_1085 * _905) - _984;
    float _1091 = (_1085 * _906) - _985;
    float _1095 = abs(dot(vec3(_983, _984, _985), vec3(_904, _905, _906)));
    float _4386 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1097 = sqrt(_907);
    float _1110 = exp2((_1097 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1097 * 3.0));
    float _1116 = (1.0 - _1110) * ((_1097 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1117 = _1110 * _1097;
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1153 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1482;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1207 = fma(_1153, cbModelParam._m0[26u].z, fma(_1149, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1145));
        float _1211 = fma(_1153, cbModelParam._m0[27u].z, fma(_1149, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1145));
        float _1215 = fma(_1153, cbModelParam._m0[28u].z, fma(_1149, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1145));
        float _1240 = _1145 + _904;
        float _1241 = _1149 + _905;
        float _1242 = _1153 + _906;
        float _1252 = fma(_1242, cbModelParam._m0[26u].z, fma(_1241, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1240)) - _1207;
        float _1253 = fma(_1242, cbModelParam._m0[27u].z, fma(_1241, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1240)) - _1211;
        float _1254 = fma(_1242, cbModelParam._m0[28u].z, fma(_1241, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1240)) - _1215;
        float _1258 = inversesqrt(dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254)));
        float _1271 = ((_1258 * _1252) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1207 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1258 * _1253) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1211 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1258 * _1254) / cbModelParam._m0[34u].z) + ((((((_1215 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        float _1310 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1276.x + (-0.5));
        float _1312 = _1310 * (_1276.y + (-0.5));
        float _1313 = _1310 * (_1276.z + (-0.5));
        float _1320 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1283.x + (-0.5));
        float _1322 = _1320 * (_1283.y + (-0.5));
        float _1323 = _1320 * (_1283.z + (-0.5));
        float _1330 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1290.x + (-0.5));
        float _1332 = _1330 * (_1290.y + (-0.5));
        float _1333 = _1330 * (_1290.z + (-0.5));
        float _1340 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1297.x + (-0.5));
        float _1342 = _1340 * (_1297.y + (-0.5));
        float _1343 = _1340 * (_1297.z + (-0.5));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = _1311 * 0.5;
        float _1348 = _1321 * 0.5;
        float _1349 = _1331 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1364 = (dot(vec3(_904, _905, _906), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1374 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4434 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1376 + 1.0))) + _1381) * _1344;
        float _1391 = _1312 * 0.5;
        float _1392 = _1322 * 0.5;
        float _1393 = _1332 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_904, _905, _906), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4445 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4456 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4467 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_1418 + 1.0))) + _1423) * _1345;
        float _1433 = _1313 * 0.5;
        float _1434 = _1323 * 0.5;
        float _1435 = _1333 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_904, _905, _906), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4478 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4489 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4500 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_1460 + 1.0))) + _1465) * _1346;
        _1482 = _1313;
        _1484 = _1312;
        _1485 = _1311;
        _1486 = _1323;
        _1487 = _1322;
        _1488 = _1321;
        _1489 = _1333;
        _1490 = _1332;
        _1491 = _1331;
        _1492 = _1346;
        _1493 = _1345;
        _1494 = _1344;
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
    }
    else
    {
        _1482 = _1483;
        _1484 = _1483;
        _1485 = _1483;
        _1486 = _1483;
        _1487 = _1483;
        _1488 = _1483;
        _1489 = _1483;
        _1490 = _1483;
        _1491 = _1483;
        _1492 = _1483;
        _1493 = _1483;
        _1494 = _1483;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1525 = fma(_1153, cbModelParam._m0[30u].z, fma(_1149, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1145));
        float _1529 = fma(_1153, cbModelParam._m0[31u].z, fma(_1149, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1145));
        float _1533 = fma(_1153, cbModelParam._m0[32u].z, fma(_1149, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1145));
        float _1556 = _1145 + _904;
        float _1557 = _1149 + _905;
        float _1558 = _1153 + _906;
        float _1568 = fma(_1558, cbModelParam._m0[30u].z, fma(_1557, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1556)) - _1525;
        float _1569 = fma(_1558, cbModelParam._m0[31u].z, fma(_1557, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1556)) - _1529;
        float _1570 = fma(_1558, cbModelParam._m0[32u].z, fma(_1557, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1556)) - _1533;
        float _1574 = inversesqrt(dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570)));
        float _1587 = ((_1574 * _1568) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1525 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1574 * _1569) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1529 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1589 = ((_1574 * _1570) / cbModelParam._m0[35u].z) + ((((((_1533 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        float _1624 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1591.x + (-0.5));
        float _1626 = _1624 * (_1591.y + (-0.5));
        float _1627 = _1624 * (_1591.z + (-0.5));
        float _1634 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1598.x + (-0.5));
        float _1636 = _1634 * (_1598.y + (-0.5));
        float _1637 = _1634 * (_1598.z + (-0.5));
        float _1644 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1605.x + (-0.5));
        float _1646 = _1644 * (_1605.y + (-0.5));
        float _1647 = _1644 * (_1605.z + (-0.5));
        float _1654 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1612.x + (-0.5));
        float _1656 = _1654 * (_1612.y + (-0.5));
        float _1657 = _1654 * (_1612.z + (-0.5));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = _1625 * 0.5;
        float _1662 = _1635 * 0.5;
        float _1663 = _1645 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_904, _905, _906), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4541 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4552 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4563 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_1688 + 1.0))) + _1693) * _1658;
        float _1703 = _1626 * 0.5;
        float _1704 = _1636 * 0.5;
        float _1705 = _1646 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_904, _905, _906), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4574 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4585 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4596 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_1730 + 1.0))) + _1735) * _1659;
        float _1745 = _1627 * 0.5;
        float _1746 = _1637 * 0.5;
        float _1747 = _1647 * 0.5;
        float _1748 = dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747));
        float _1753 = (_1748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1748);
        float _1761 = (dot(vec3(_904, _905, _906), vec3(_1753 * _1745, _1753 * _1746, _1753 * _1747)) + 1.0) * 0.5;
        float _4607 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1770 = sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4618 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _1772 = _1771 * 2.0;
        float _1776 = (1.0 - _1771) / (_1771 + 1.0);
        float _4629 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _1786 = ((((1.0 - _1777) * (_1772 + 2.0)) * exp2(log2(isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_1772 + 1.0))) + _1777) * _1660;
        _1794 = _1627;
        _1795 = _1626;
        _1796 = _1625;
        _1797 = _1637;
        _1798 = _1636;
        _1799 = _1635;
        _1800 = _1647;
        _1801 = _1646;
        _1802 = _1645;
        _1803 = _1660;
        _1804 = _1659;
        _1805 = _1658;
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)));
    }
    else
    {
        _1794 = _1483;
        _1795 = _1483;
        _1796 = _1483;
        _1797 = _1483;
        _1798 = _1483;
        _1799 = _1483;
        _1800 = _1483;
        _1801 = _1483;
        _1802 = _1483;
        _1803 = _1483;
        _1804 = _1483;
        _1805 = _1483;
        _1806 = 0.0;
        _1807 = 0.0;
        _1808 = 0.0;
    }
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1495)) + _1495;
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1496)) + _1496;
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1497)) + _1497;
    float _1841 = fma(_1820, cbSceneParam._m0[89u].z, fma(_1819, cbSceneParam._m0[89u].y, _1818 * cbSceneParam._m0[89u].x));
    float _1844 = fma(_1820, cbSceneParam._m0[90u].z, fma(_1819, cbSceneParam._m0[90u].y, _1818 * cbSceneParam._m0[90u].x));
    float _1847 = fma(_1820, cbSceneParam._m0[91u].z, fma(_1819, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1818));
    float _1862 = _1089 * 0.5;
    float _1863 = _1090 * 0.5;
    float _1864 = _1091 * 0.5;
    float _1865 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1868 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1871 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1905;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1878 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1482, _1486, _1489, _1492));
        float _1882 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1484, _1487, _1490, _1493));
        float _1886 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1485, _1488, _1491, _1494));
        float _1893 = dot(vec4(cbModelParam._m0[39u]), vec4(_1862, _1863, _1864, 1.0));
        _1905 = dot(vec3(isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1893) ? 0.0 : (isnan(0.0) ? _1893 : max(0.0, _1893))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1905 = 1.0;
    }
    float _1916;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1907 = dot(vec4(cbModelParam._m0[40u]), vec4(_1862, _1863, _1864, 1.0));
        _1916 = dot(vec3(isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1907) ? 0.0 : (isnan(0.0) ? _1907 : max(0.0, _1907))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1916 = 1.0;
    }
    float _1920 = (_1916 * cbModelParam._m0[1u].x) + (_1905 * (1.0 - cbModelParam._m0[1u].x));
    float _1930 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _907);
    float _1931 = isnan(_1930) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1930 : min(cbModelParam._m0[25u].z, _1930));
    float _2011;
    float _2013;
    float _2015;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1978 = fma(_1153, cbModelParam._m0[13u].z, fma(_1149, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1145)) + cbModelParam._m0[13u].w;
        float _1982 = fma(_1153, cbModelParam._m0[14u].z, fma(_1149, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1145)) + cbModelParam._m0[14u].w;
        float _1986 = fma(_1153, cbModelParam._m0[15u].z, fma(_1149, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1145)) + cbModelParam._m0[15u].w;
        float _1989 = fma(_1091, cbModelParam._m0[13u].z, fma(_1090, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1089));
        float _1992 = fma(_1091, cbModelParam._m0[14u].z, fma(_1090, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1089));
        float _1995 = fma(_1091, cbModelParam._m0[15u].z, fma(_1090, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1089));
        float _2023;
        if (_1989 > 0.0)
        {
            _2023 = abs((1.0 - _1978) / _1989);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1978 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2023 = frontier_phi_17_15_ladder;
        }
        float _2194;
        if (_1992 > 0.0)
        {
            _2194 = abs((1.0 - _1982) / _1992);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1982 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2194 = frontier_phi_26_22_ladder;
        }
        float _2489;
        if (_1995 > 0.0)
        {
            _2489 = abs((1.0 - _1986) / _1995);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1986 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2489 = frontier_phi_38_33_ladder;
        }
        float _2491 = isnan(_2194) ? _2023 : (isnan(_2023) ? _2194 : min(_2023, _2194));
        float _2492 = isnan(_2489) ? _2491 : (isnan(_2491) ? _2489 : min(_2491, _2489));
        float _2496 = (_2492 * _1989) + _1978;
        float _2497 = (_2492 * _1992) + _1982;
        float _2498 = (_2492 * _1995) + _1986;
        float _2499 = _2492 * 9.9999997473787516355514526367188e-05;
        float _2501 = (-1.0) - _2499;
        float _2503 = _2499 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2498 > _2503) || ((_2498 < _2501) || ((_2497 > _2503) || ((_2497 < _2501) || ((_2496 < _2501) || (_2496 > _2503))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2643 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2498, cbModelParam._m0[9u].z, fma(_2497, cbModelParam._m0[9u].y, _2496 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2498, cbModelParam._m0[10u].z, fma(_2497, cbModelParam._m0[10u].y, _2496 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2498, cbModelParam._m0[11u].z, fma(_2497, cbModelParam._m0[11u].y, _2496 * cbModelParam._m0[11u].x))), _1931);
            frontier_phi_16_38_ladder = _2643.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2643.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2643.x * cbModelParam._m0[1u].y;
        }
        _2011 = frontier_phi_16_38_ladder_2;
        _2013 = frontier_phi_16_38_ladder_1;
        _2015 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1999 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1089, _1090, _1091), _1931);
        _2011 = _1999.x * cbModelParam._m0[1u].y;
        _2013 = _1999.y * cbModelParam._m0[1u].y;
        _2015 = _1999.z * cbModelParam._m0[1u].y;
    }
    float _2019 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _907);
    float _2020 = isnan(_2019) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2019 : min(cbModelParam._m0[25u].w, _2019));
    float _2109;
    float _2111;
    float _2113;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2073 = fma(_1153, cbModelParam._m0[21u].z, fma(_1149, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1145)) + cbModelParam._m0[21u].w;
        float _2077 = fma(_1153, cbModelParam._m0[22u].z, fma(_1149, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1145)) + cbModelParam._m0[22u].w;
        float _2081 = fma(_1153, cbModelParam._m0[23u].z, fma(_1149, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1145)) + cbModelParam._m0[23u].w;
        float _2084 = fma(_1091, cbModelParam._m0[21u].z, fma(_1090, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1089));
        float _2087 = fma(_1091, cbModelParam._m0[22u].z, fma(_1090, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1089));
        float _2090 = fma(_1091, cbModelParam._m0[23u].z, fma(_1090, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1089));
        float _2199;
        if (_2084 > 0.0)
        {
            _2199 = abs((1.0 - _2073) / _2084);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2073 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2199 = frontier_phi_28_24_ladder;
        }
        float _2516;
        if (_2087 > 0.0)
        {
            _2516 = abs((1.0 - _2077) / _2087);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2077 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2516 = frontier_phi_40_35_ladder;
        }
        float _2854;
        if (_2090 > 0.0)
        {
            _2854 = abs((1.0 - _2081) / _2090);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2081 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2854 = frontier_phi_50_47_ladder;
        }
        float _2856 = isnan(_2516) ? _2199 : (isnan(_2199) ? _2516 : min(_2199, _2516));
        float _2857 = isnan(_2854) ? _2856 : (isnan(_2856) ? _2854 : min(_2856, _2854));
        float _2861 = (_2857 * _2084) + _2073;
        float _2862 = (_2857 * _2087) + _2077;
        float _2863 = (_2857 * _2090) + _2081;
        float _2864 = _2857 * 9.9999997473787516355514526367188e-05;
        float _2865 = (-1.0) - _2864;
        float _2867 = _2864 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2863 > _2867) || ((_2863 < _2865) || ((_2862 > _2867) || ((_2862 < _2865) || ((_2861 < _2865) || (_2861 > _2867))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2985 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2863, cbModelParam._m0[17u].z, fma(_2862, cbModelParam._m0[17u].y, _2861 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2863, cbModelParam._m0[18u].z, fma(_2862, cbModelParam._m0[18u].y, _2861 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2863, cbModelParam._m0[19u].z, fma(_2862, cbModelParam._m0[19u].y, _2861 * cbModelParam._m0[19u].x))), _2020);
            frontier_phi_25_50_ladder = _2985.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2985.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2985.x * cbModelParam._m0[1u].z;
        }
        _2109 = frontier_phi_25_50_ladder_2;
        _2111 = frontier_phi_25_50_ladder_1;
        _2113 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2093 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1089, _1090, _1091), _2020);
        _2109 = _2093.x * cbModelParam._m0[1u].z;
        _2111 = _2093.y * cbModelParam._m0[1u].z;
        _2113 = _2093.z * cbModelParam._m0[1u].z;
    }
    float _2126 = (((_1116 * _1065) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2109 - _2011)) + _2011);
    float _2128 = (((_1116 * _1067) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2111 - _2013)) + _2013);
    float _2130 = (((_1116 * _1068) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2113 - _2015)) + _2015);
    float _2133 = fma(_2130, cbSceneParam._m0[89u].z, fma(_2128, cbSceneParam._m0[89u].y, _2126 * cbSceneParam._m0[89u].x));
    float _2136 = fma(_2130, cbSceneParam._m0[90u].z, fma(_2128, cbSceneParam._m0[90u].y, _2126 * cbSceneParam._m0[90u].x));
    float _2139 = fma(_2130, cbSceneParam._m0[91u].z, fma(_2128, cbSceneParam._m0[91u].y, _2126 * cbSceneParam._m0[91u].x));
    float _2173 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2177 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2181 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2185 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2186 = _2173 / _2185;
    float _2187 = _2177 / _2185;
    float _2188 = _2181 / _2185;
    float _2335;
    float _2336;
    float _2337;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2215 = ((uint(_2188 > cbSceneParam._m0[59u].y) + uint(_2188 > cbSceneParam._m0[59u].x)) + uint(_2188 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2216 = _2215 + 43u;
        uint _2224 = _2215 + 44u;
        uint _2232 = _2215 + 45u;
        uint _2240 = _2215 + 46u;
        float _2251 = fma(_2185, cbSceneParam._m0[_2216].w, fma(_2181, cbSceneParam._m0[_2216].z, fma(_2177, cbSceneParam._m0[_2216].y, _2173 * cbSceneParam._m0[_2216].x)));
        float _2255 = fma(_2185, cbSceneParam._m0[_2224].w, fma(_2181, cbSceneParam._m0[_2224].z, fma(_2177, cbSceneParam._m0[_2224].y, _2173 * cbSceneParam._m0[_2224].x)));
        float _2263 = fma(_2185, cbSceneParam._m0[_2240].w, fma(_2181, cbSceneParam._m0[_2240].z, fma(_2177, cbSceneParam._m0[_2240].y, _2173 * cbSceneParam._m0[_2240].x)));
        float _2268 = cbSceneParam._m0[33u].z * _2263;
        float _2270 = cbSceneParam._m0[33u].w * _2263;
        float _2273 = fma(_2185, cbSceneParam._m0[_2232].w, fma(_2181, cbSceneParam._m0[_2232].z, fma(_2177, cbSceneParam._m0[_2232].y, _2173 * cbSceneParam._m0[_2232].x))) / _2263;
        float _2321 = (cbSceneParam._m0[33u].x - sqrt(((_2187 * _2187) + (_2186 * _2186)) + (_2188 * _2188))) * cbSceneParam._m0[33u].y;
        float _4755 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2328 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2268 + _2251) / _2263, (_2270 + _2255) / _2263), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2270 + _2251) / _2263, (_2255 - _2268) / _2263), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2251 - _2268) / _2263, (_2255 - _2270) / _2263), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2251 - _2270) / _2263, (_2268 + _2255) / _2263), _2273), 0.0)).x), vec4(0.25)));
        _2335 = 1.0 - (_2328 * cbSceneParam._m0[34u].x);
        _2336 = 1.0 - (_2328 * cbSceneParam._m0[34u].y);
        _2337 = 1.0 - (_2328 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2335 = 1.0;
        _2336 = 1.0;
        _2337 = 1.0;
    }
    float _2401;
    float _2403;
    float _2405;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2389 = fma(_2185, cbSceneParam._m0[63u].w, fma(_2181, cbSceneParam._m0[63u].z, fma(_2177, cbSceneParam._m0[63u].y, _2173 * cbSceneParam._m0[63u].x)));
        float _2390 = fma(_2185, cbSceneParam._m0[60u].w, fma(_2181, cbSceneParam._m0[60u].z, fma(_2177, cbSceneParam._m0[60u].y, _2173 * cbSceneParam._m0[60u].x))) / _2389;
        float _2391 = fma(_2185, cbSceneParam._m0[61u].w, fma(_2181, cbSceneParam._m0[61u].z, fma(_2177, cbSceneParam._m0[61u].y, _2173 * cbSceneParam._m0[61u].x))) / _2389;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2390 >= cbSceneParam._m0[64u].x) && (_2391 >= cbSceneParam._m0[64u].y)) && (_2390 <= cbSceneParam._m0[64u].z)) && (_2391 <= cbSceneParam._m0[64u].w))
        {
            float _2529 = fma(_2185, cbSceneParam._m0[62u].w, fma(_2181, cbSceneParam._m0[62u].z, fma(_2177, cbSceneParam._m0[62u].y, _2173 * cbSceneParam._m0[62u].x))) / _2389;
            float _2533 = isnan(cbSceneParam._m0[41u].w) ? _2529 : (isnan(_2529) ? cbSceneParam._m0[41u].w : max(_2529, cbSceneParam._m0[41u].w));
            float _2576 = (cbSceneParam._m0[33u].x - sqrt(((_2187 * _2187) + (_2186 * _2186)) + (_2188 * _2188))) * cbSceneParam._m0[33u].y;
            float _4771 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
            float _2583 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2390, cbSceneParam._m0[33u].w + _2391), _2533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2390, _2391 - cbSceneParam._m0[33u].z), _2533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2390 - cbSceneParam._m0[33u].z, _2391 - cbSceneParam._m0[33u].w), _2533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2390 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2391), _2533), 0.0)).x), vec4(0.25)));
            float _2587 = 1.0 - (_2583 * cbSceneParam._m0[34u].x);
            float _2588 = 1.0 - (_2583 * cbSceneParam._m0[34u].y);
            float _2589 = 1.0 - (_2583 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2589) ? _2337 : (isnan(_2337) ? _2589 : min(_2337, _2589));
            frontier_phi_37_36_ladder_1 = isnan(_2588) ? _2336 : (isnan(_2336) ? _2588 : min(_2336, _2588));
            frontier_phi_37_36_ladder_2 = isnan(_2587) ? _2335 : (isnan(_2335) ? _2587 : min(_2335, _2587));
        }
        else
        {
            frontier_phi_37_36_ladder = _2337;
            frontier_phi_37_36_ladder_1 = _2336;
            frontier_phi_37_36_ladder_2 = _2335;
        }
        _2401 = frontier_phi_37_36_ladder_2;
        _2403 = frontier_phi_37_36_ladder_1;
        _2405 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2401 = _2335;
        _2403 = _2336;
        _2405 = _2337;
    }
    uvec4 _2410 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2412 = _2410.x * 14u;
    uint _2413 = _2412 + 13u;
    float _2420 = _1081 + (-1.0);
    float _2425 = (cbLight._m0[_2413].x * _2420) + 1.0;
    float _2426 = (cbLight._m0[_2413].y * _2420) + 1.0;
    float _2427 = (cbLight._m0[_2413].z * _2420) + 1.0;
    float _2428 = (cbLight._m0[_2413].w * _2420) + 1.0;
    uint _2429 = _2412 + 5u;
    float _2435 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
    uint _2439 = _2412 + 4u;
    float _2448 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
    uint _2452 = _2412 | 1u;
    float _2463 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_904, _905, _906));
    float _2466 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_904, _905, _906));
    float _4807 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _4818 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2471 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * 0.3183098733425140380859375;
    float _2473 = (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * 0.3183098733425140380859375;
    float _2480 = ((cbLight._m0[_2429].x * _2435) * _2473) + (((cbLight._m0[_2439].x * _2401) * _2448) * _2471);
    float _2481 = ((_2435 * cbLight._m0[_2429].y) * _2473) + (((cbLight._m0[_2439].y * _2403) * _2448) * _2471);
    float _2482 = ((_2435 * cbLight._m0[_2429].z) * _2473) + (((cbLight._m0[_2439].z * _2405) * _2448) * _2471);
    uvec4 _2486 = floatBitsToUint(cbLight._m0[_2412 + 12u]);
    bool _2488 = _2486.x == 0u;
    float _2590;
    float _2592;
    float _2594;
    if (_2488)
    {
        _2590 = _2480;
        _2592 = _2481;
        _2594 = _2482;
    }
    else
    {
        uint _2598 = _2412 + 6u;
        float _2614 = (dot(vec3(cbLight._m0[_2412 + 2u].xyz), vec3(_904, _905, _906)) * 0.5) + 0.5;
        float _2615 = _2614 * _2614;
        float _4829 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2616 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2617 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
        _2590 = (((cbLight._m0[_2598].x * 0.3183098733425140380859375) * _2616) * _2617) + _2480;
        _2592 = (((cbLight._m0[_2598].y * 0.3183098733425140380859375) * _2616) * _2617) + _2481;
        _2594 = (((cbLight._m0[_2598].z * 0.3183098733425140380859375) * _2616) * _2617) + _2482;
    }
    bool _2597 = _2486.y == 0u;
    float _2652;
    float _2654;
    float _2656;
    if (_2597)
    {
        _2652 = _2590;
        _2654 = _2592;
        _2656 = _2594;
    }
    else
    {
        uint _2825 = _2412 + 7u;
        float _2841 = (dot(vec3(cbLight._m0[_2412 + 3u].xyz), vec3(_904, _905, _906)) * 0.5) + 0.5;
        float _2842 = _2841 * _2841;
        float _4845 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2843 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2844 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
        _2652 = (((cbLight._m0[_2825].x * 0.3183098733425140380859375) * _2843) * _2844) + _2590;
        _2654 = (((cbLight._m0[_2825].y * 0.3183098733425140380859375) * _2843) * _2844) + _2592;
        _2656 = (((cbLight._m0[_2825].z * 0.3183098733425140380859375) * _2843) * _2844) + _2594;
    }
    uint _2659 = _2412 + 8u;
    float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2412].w)) * _907) * 0.949999988079071044921875);
    float _2673 = _2672 * _2672;
    float _2674 = cbLight._m0[_2412].x + _983;
    float _2675 = cbLight._m0[_2412].y + _984;
    float _2676 = cbLight._m0[_2412].z + _985;
    float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
    float _2681 = _2680 * _2674;
    float _2682 = _2680 * _2675;
    float _2683 = _2680 * _2676;
    float _2684 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_2412].xyz));
    float _4861 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2687 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
    float _4872 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _2688 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
    float _2689 = dot(vec3(_904, _905, _906), vec3(_2681, _2682, _2683));
    float _4883 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2692 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
    float _2693 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_2681, _2682, _2683));
    float _4894 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2697 = _2673 * _2673;
    float _2701 = ((_2692 * _2692) * (_2697 + (-1.0))) + 1.0;
    float _2709 = exp2(log2(1.0 - (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) * 5.0);
    float _2710 = 0.959999978542327880859375 - _1062;
    float _2712 = 0.959999978542327880859375 - _1063;
    float _2713 = 0.959999978542327880859375 - _1064;
    float _2720 = 1.0 - _2673;
    float _2731 = (0.5 / (((_2688 * ((_2687 * _2720) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2688 * _2720) + _2673) * _2687))) * _2687;
    float _4905 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2733 = (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2697 / ((_2701 * _2701) * 3.141590118408203125));
    uint _2747 = _2412 + 9u;
    float _2758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2452].w)) * _907) * 0.949999988079071044921875);
    float _2759 = _2758 * _2758;
    float _2760 = cbLight._m0[_2452].x + _983;
    float _2761 = cbLight._m0[_2452].y + _984;
    float _2762 = cbLight._m0[_2452].z + _985;
    float _2766 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
    float _2767 = _2766 * _2760;
    float _2768 = _2766 * _2761;
    float _2769 = _2766 * _2762;
    float _2770 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_2452].xyz));
    float _4916 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2773 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
    float _2774 = dot(vec3(_904, _905, _906), vec3(_2767, _2768, _2769));
    float _4927 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
    float _2777 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
    float _2778 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_2767, _2768, _2769));
    float _4938 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
    float _2782 = _2759 * _2759;
    float _2786 = ((_2777 * _2777) * (_2782 + (-1.0))) + 1.0;
    float _2793 = exp2(log2(1.0 - (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0)))) * 5.0);
    float _2800 = 1.0 - _2759;
    float _2810 = (0.5 / (((_2688 * ((_2773 * _2800) + _2759)) + 9.9999999392252902907785028219223e-09) + (((_2688 * _2800) + _2759) * _2773))) * _2773;
    float _4949 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
    float _2812 = (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2782 / ((_2786 * _2786) * 3.141590118408203125));
    float _2822 = (((((_2793 * _2710) + _1065) * cbLight._m0[_2747].x) * _2812) * _2435) + ((((cbLight._m0[_2659].x * _2401) * ((_2709 * _2710) + _1065)) * _2733) * _2448);
    float _2823 = (((((_2793 * _2712) + _1067) * cbLight._m0[_2747].y) * _2812) * _2435) + ((((cbLight._m0[_2659].y * _2403) * ((_2709 * _2712) + _1067)) * _2733) * _2448);
    float _2824 = (((((_2793 * _2713) + _1068) * cbLight._m0[_2747].z) * _2812) * _2435) + ((((cbLight._m0[_2659].z * _2405) * ((_2709 * _2713) + _1068)) * _2733) * _2448);
    float _2880;
    float _2882;
    float _2884;
    if (_2488)
    {
        _2880 = _2822;
        _2882 = _2823;
        _2884 = _2824;
    }
    else
    {
        uint _2886 = _2412 + 2u;
        uint _2890 = _2412 + 10u;
        float _2904 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2886].w)) * _907) * 0.949999988079071044921875);
        float _2905 = _2904 * _2904;
        float _2906 = cbLight._m0[_2886].x + _983;
        float _2907 = cbLight._m0[_2886].y + _984;
        float _2908 = cbLight._m0[_2886].z + _985;
        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
        float _2913 = _2912 * _2906;
        float _2914 = _2912 * _2907;
        float _2915 = _2912 * _2908;
        float _2916 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_2886].xyz));
        float _4960 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2919 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
        float _2920 = dot(vec3(_904, _905, _906), vec3(_2913, _2914, _2915));
        float _4971 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2923 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
        float _2924 = dot(vec3(cbLight._m0[_2886].xyz), vec3(_2913, _2914, _2915));
        float _4982 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2928 = _2905 * _2905;
        float _2932 = ((_2923 * _2923) * (_2928 + (-1.0))) + 1.0;
        float _2939 = exp2(log2(1.0 - (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0)))) * 5.0);
        float _2946 = 1.0 - _2905;
        float _2956 = (0.5 / (((_2688 * ((_2919 * _2946) + _2905)) + 9.9999999392252902907785028219223e-09) + (((_2688 * _2946) + _2905) * _2919))) * _2919;
        float _4993 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2958 = (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (_2928 / ((_2932 * _2932) * 3.141590118408203125));
        float _2959 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
        _2880 = (((((_2939 * _2710) + _1065) * cbLight._m0[_2890].x) * _2958) * _2959) + _2822;
        _2882 = (((((_2939 * _2712) + _1067) * cbLight._m0[_2890].y) * _2958) * _2959) + _2823;
        _2884 = (((((_2939 * _2713) + _1068) * cbLight._m0[_2890].z) * _2958) * _2959) + _2824;
    }
    float _2990;
    float _2992;
    float _2994;
    if (_2597)
    {
        _2990 = _2880;
        _2992 = _2882;
        _2994 = _2884;
    }
    else
    {
        uint _3001 = _2412 + 3u;
        uint _3005 = _2412 + 11u;
        float _3019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3001].w)) * _907) * 0.949999988079071044921875);
        float _3020 = _3019 * _3019;
        float _3021 = cbLight._m0[_3001].x + _983;
        float _3022 = cbLight._m0[_3001].y + _984;
        float _3023 = cbLight._m0[_3001].z + _985;
        float _3027 = inversesqrt(dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023)));
        float _3028 = _3027 * _3021;
        float _3029 = _3027 * _3022;
        float _3030 = _3027 * _3023;
        float _3031 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_3001].xyz));
        float _5009 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
        float _3034 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
        float _3035 = dot(vec3(_904, _905, _906), vec3(_3028, _3029, _3030));
        float _5020 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
        float _3038 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
        float _3039 = dot(vec3(cbLight._m0[_3001].xyz), vec3(_3028, _3029, _3030));
        float _5031 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
        float _3043 = _3020 * _3020;
        float _3047 = ((_3038 * _3038) * (_3043 + (-1.0))) + 1.0;
        float _3054 = exp2(log2(1.0 - (isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0)))) * 5.0);
        float _3061 = 1.0 - _3020;
        float _3071 = (0.5 / (((_2688 * ((_3034 * _3061) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_2688 * _3061) + _3020) * _3034))) * _3034;
        float _5042 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
        float _3073 = (isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0))) * (_3043 / ((_3047 * _3047) * 3.141590118408203125));
        float _3074 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
        _2990 = (((((_3054 * _2710) + _1065) * cbLight._m0[_3005].x) * _3073) * _3074) + _2880;
        _2992 = (((((_3054 * _2712) + _1067) * cbLight._m0[_3005].y) * _3073) * _3074) + _2882;
        _2994 = (((((_3054 * _2713) + _1068) * cbLight._m0[_3005].z) * _3073) * _3074) + _2884;
    }
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    float _3148;
    float _3150;
    if (_2410.y == 0u)
    {
        uvec4 _3095 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3096 = _3095.x;
        uint _3107 = uint((float(_3095.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1004) / _3096))) + floor(float(uint(cbSceneParam._m0[85u].x * _1003) / _3096)));
        float _3117 = (log2(_2188 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3118 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
        uint _3121 = uint(isnan(14.0) ? _3118 : (isnan(_3118) ? 14.0 : min(_3118, 14.0)));
        uvec4 _3126 = texelFetch(g_lightClusterGridBuffer, int(((_3121 << 2u) + (_3107 << 6u)) >> 2u));
        uint _3127 = _3126.x;
        uint _3128 = _3095.z;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        if (((((1u << ((_3128 >> 4u) & 15u)) + 4294967295u) & _3127) == 0u) || ((_3128 & 240u) == 0u))
        {
            _3207 = 0.0;
            _3209 = 0.0;
            _3211 = 0.0;
            _3213 = 0.0;
            _3215 = 0.0;
            _3217 = 0.0;
        }
        else
        {
            float _3208;
            float _3210;
            float _3212;
            float _3214;
            float _3216;
            float _3218;
            float _3359 = 0.0;
            float _3360 = 0.0;
            float _3361 = 0.0;
            float _3362 = 0.0;
            float _3363 = 0.0;
            float _3364 = 0.0;
            uint _3365 = 0u;
            uint _3374;
            bool _3375;
            for (;;)
            {
                _3374 = texelFetch(g_lightClassification, int((((_3121 << 5u) + (_3107 << 9u)) + (_3365 << 2u)) >> 2u)).x;
                _3375 = _3374 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3375)
                {
                    frontier_phi_71_pred = _3364;
                    frontier_phi_71_pred_1 = _3363;
                    frontier_phi_71_pred_2 = _3362;
                    frontier_phi_71_pred_3 = _3361;
                    frontier_phi_71_pred_4 = _3360;
                    frontier_phi_71_pred_5 = _3359;
                }
                else
                {
                    float _3504;
                    float _3505;
                    float _3506;
                    float _3507;
                    float _3508;
                    float _3509;
                    uint _3510;
                    _3504 = _3359;
                    _3505 = _3360;
                    _3506 = _3361;
                    _3507 = _3362;
                    _3508 = _3363;
                    _3509 = _3364;
                    _3510 = _3374;
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    for (;;)
                    {
                        uint _3514 = uint(findLSB(_3510)) + (_3365 << 5u);
                        uint _3511 = (_3510 + 4294967295u) & _3510;
                        uint _3516 = _3514 * 48u;
                        vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3516)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 3u)).x));
                        uint _3536 = (_3514 * 48u) + 4u;
                        vec4 _3549 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3536)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 3u)).x));
                        uint _3555 = (_3514 * 48u) + 8u;
                        vec3 _3566 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3555)).x, texelFetch(g_PointLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3555 + 2u)).x));
                        float _3570 = _3530.x - _2186;
                        float _3571 = _3530.y - _2187;
                        float _3572 = _3530.z - _2188;
                        float _3573 = dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572));
                        float _3576 = inversesqrt(_3573);
                        float _3577 = _3576 * _3570;
                        float _3578 = _3576 * _3571;
                        float _3579 = _3576 * _3572;
                        float _3580 = dot(vec3(_1022, _1025, _1028), vec3(_3577, _3578, _3579));
                        float _3585 = 1.0 - (_3573 * _3530.w);
                        float _5068 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                        float _3586 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                        float _3587 = sqrt(_3573) * _3549.w;
                        float _3590 = 1.39999997615814208984375 / (_3587 + 1.39999997615814208984375);
                        float _3591 = _3590 * _3590;
                        float _3594 = ((1.0 - _3591) * _3580) + _3591;
                        float _3597 = _3587 * _3587;
                        float _3601 = ((isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0))) * _3586) / ((_3597 * 0.699999988079071044921875) + 1.0);
                        float _3605 = (-0.0) - _2186;
                        float _3606 = (-0.0) - _2187;
                        float _3607 = (-0.0) - _2188;
                        float _3611 = inversesqrt(dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607)));
                        float _3612 = _3611 * _3605;
                        float _3613 = _3611 * _3606;
                        float _3614 = _3611 * _3607;
                        float _3621 = exp2(log2(1.0 / ((_3597 * 3.5) + 5.0)) * 0.25);
                        float _3622 = 1.0 - _1097;
                        float _3629 = sqrt(1.0 - ((1.0 - (_3622 * _3622)) * (1.0 - (_3621 * _3621))));
                        float _3630 = _3629 * _3629;
                        float _3631 = _3630 * _3630;
                        float _3632 = _3612 + _3577;
                        float _3633 = _3613 + _3578;
                        float _3634 = _3614 + _3579;
                        float _3638 = inversesqrt(dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634)));
                        float _3642 = dot(vec3(_1022, _1025, _1028), vec3(_3612, _3613, _3614));
                        float _5084 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                        float _3645 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                        float _3646 = dot(vec3(_1022, _1025, _1028), vec3(_3638 * _3632, _3638 * _3633, _3638 * _3634));
                        float _5095 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                        float _3649 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                        float _3653 = ((_3649 * _3649) * (_3631 + (-1.0))) + 1.0;
                        float _3654 = _3590 * _3630;
                        float _3655 = _3654 * _3654;
                        float _3658 = ((1.0 - _3655) * _3580) + _3655;
                        float _5106 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                        float _3659 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
                        float _3660 = 1.0 - _3630;
                        float _3670 = (0.5 / (((_3659 * ((_3645 * _3660) + _3630)) + 9.9999999392252902907785028219223e-09) + (((_3659 * _3660) + _3630) * _3645))) * _3659;
                        float _5117 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                        float _3681 = (((_3631 * 3.1415927410125732421875) * (isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0)))) / ((_3653 * _3653) * ((_3597 * 2.1991131305694580078125) + 3.141590118408203125))) * _3586;
                        _3434 = (_3601 * _3549.x) + _3507;
                        _3435 = (_3601 * _3549.y) + _3508;
                        _3436 = (_3601 * _3549.z) + _3509;
                        _3431 = (_3681 * _3566.x) + _3504;
                        _3432 = (_3681 * _3566.y) + _3505;
                        _3433 = (_3681 * _3566.z) + _3506;
                        if (_3511 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3504 = _3431;
                            _3505 = _3432;
                            _3506 = _3433;
                            _3507 = _3434;
                            _3508 = _3435;
                            _3509 = _3436;
                            _3510 = _3511;
                        }
                    }
                    frontier_phi_71_pred = _3436;
                    frontier_phi_71_pred_1 = _3435;
                    frontier_phi_71_pred_2 = _3434;
                    frontier_phi_71_pred_3 = _3433;
                    frontier_phi_71_pred_4 = _3432;
                    frontier_phi_71_pred_5 = _3431;
                }
                _3218 = frontier_phi_71_pred;
                _3216 = frontier_phi_71_pred_1;
                _3214 = frontier_phi_71_pred_2;
                _3212 = frontier_phi_71_pred_3;
                _3210 = frontier_phi_71_pred_4;
                _3208 = frontier_phi_71_pred_5;
                uint _3366 = _3365 + 1u;
                if (_3366 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3359 = _3208;
                    _3360 = _3210;
                    _3361 = _3212;
                    _3362 = _3214;
                    _3363 = _3216;
                    _3364 = _3218;
                    _3365 = _3366;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3207 = _3208;
            _3209 = _3210;
            _3211 = _3212;
            _3213 = _3214;
            _3215 = _3216;
            _3217 = _3218;
        }
        uvec4 _3221 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3222 = _3221.z;
        uint _3224 = (_3222 >> 8u) & 15u;
        float _3327;
        float _3329;
        float _3331;
        float _3333;
        float _3335;
        float _3337;
        if (((4294967295u << _3224) & _3127) == 0u)
        {
            _3327 = _3207;
            _3329 = _3209;
            _3331 = _3211;
            _3333 = _3213;
            _3335 = _3215;
            _3337 = _3217;
        }
        else
        {
            float _3352 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
            float _3353 = _3352 * _2186;
            float _3354 = _3352 * _2187;
            float _3355 = _3352 * _2188;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3224 < ((_3222 >> 12u) & 15u))
            {
                float _3328;
                float _3330;
                float _3332;
                float _3334;
                float _3336;
                float _3338;
                float _3487 = _3207;
                float _3488 = _3209;
                float _3489 = _3211;
                float _3490 = _3213;
                float _3491 = _3215;
                float _3492 = _3217;
                uint _3493 = _3224;
                uint _3502;
                bool _3503;
                for (;;)
                {
                    _3502 = texelFetch(g_lightClassification, int((((_3121 << 5u) + (_3107 << 9u)) + (_3493 << 2u)) >> 2u)).x;
                    _3503 = _3502 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3503)
                    {
                        frontier_phi_82_pred = _3492;
                        frontier_phi_82_pred_1 = _3491;
                        frontier_phi_82_pred_2 = _3490;
                        frontier_phi_82_pred_3 = _3489;
                        frontier_phi_82_pred_4 = _3488;
                        frontier_phi_82_pred_5 = _3487;
                    }
                    else
                    {
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3988;
                        float _3989;
                        float _3990;
                        float _3991;
                        float _3992;
                        float _3993;
                        float _3708 = _3487;
                        float _3709 = _3488;
                        float _3710 = _3489;
                        float _3711 = _3490;
                        float _3712 = _3491;
                        float _3713 = _3492;
                        uint _3714 = _3502;
                        uint _3715;
                        vec4 _3740;
                        float _3741;
                        vec4 _3756;
                        vec3 _3768;
                        vec4 _3783;
                        vec4 _3798;
                        float _3844;
                        bool _3845;
                        for (;;)
                        {
                            uint _3725 = ((_3493 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3714));
                            _3715 = (_3714 + 4294967295u) & _3714;
                            uint _3727 = _3725 * 40u;
                            _3740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 3u)).x));
                            _3741 = _3740.w;
                            uint _3743 = (_3725 * 40u) + 4u;
                            _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            uint _3758 = (_3725 * 40u) + 8u;
                            _3768 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x));
                            uint _3770 = (_3725 * 40u) + 16u;
                            _3783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 3u)).x));
                            uint _3785 = (_3725 * 40u) + 20u;
                            _3798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 3u)).x));
                            uint _3800 = (_3725 * 40u) + 24u;
                            vec4 _3813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 3u)).x));
                            uint _3819 = (_3725 * 40u) + 28u;
                            vec4 _3832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 3u)).x));
                            _3844 = fma(_2188, _3832.z, fma(_2187, _3832.y, _3832.x * _2186)) + _3832.w;
                            _3845 = !((fma(_2188, _3813.z, fma(_2187, _3813.y, _3813.x * _2186)) + _3813.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3845)
                            {
                                float _3872 = _3740.x - _2186;
                                float _3873 = _3740.y - _2187;
                                float _3874 = _3740.z - _2188;
                                float _3875 = dot(vec3(_3872, _3873, _3874), vec3(_3872, _3873, _3874));
                                float _3878 = inversesqrt(_3875);
                                float _3879 = _3878 * _3872;
                                float _3880 = _3878 * _3873;
                                float _3881 = _3878 * _3874;
                                float _3885 = 1.0 - (_3875 / (_3741 * _3741));
                                float _5128 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3886 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
                                float _3890 = sqrt(_3875) * _3756.w;
                                float _3892 = 1.39999997615814208984375 / (_3890 + 1.39999997615814208984375);
                                float _3893 = _3892 * _3892;
                                float _3896 = ((1.0 - _3893) * dot(vec3(_3879, _3880, _3881), vec3(_1022, _1025, _1028))) + _3893;
                                float _3899 = _3890 * _3890;
                                float _3903 = (fma(_2188, _3783.z, fma(_2187, _3783.y, _3783.x * _2186)) + _3783.w) / _3844;
                                float _3904 = (fma(_2188, _3798.z, fma(_2187, _3798.y, _3798.x * _2186)) + _3798.w) / _3844;
                                float _3908 = 1.0 - dot(vec2(_3903, _3904), vec2(_3903, _3904));
                                float _5144 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                                float _3909 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
                                float _3910 = _3909 * (((isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0))) * _3886) / ((_3899 * 0.699999988079071044921875) + 1.0));
                                float _3922 = exp2(log2(1.0 / ((_3899 * 3.5) + 5.0)) * 0.25);
                                float _3923 = 1.0 - _1097;
                                float _3930 = sqrt(1.0 - ((1.0 - (_3923 * _3923)) * (1.0 - (_3922 * _3922))));
                                float _3931 = _3930 * _3930;
                                float _3932 = _3931 * _3931;
                                float _3933 = _3879 - _3353;
                                float _3934 = _3880 - _3354;
                                float _3935 = _3881 - _3355;
                                float _3939 = inversesqrt(dot(vec3(_3933, _3934, _3935), vec3(_3933, _3934, _3935)));
                                float _3943 = dot(vec3(_1022, _1025, _1028), vec3((-0.0) - _3353, (-0.0) - _3354, (-0.0) - _3355));
                                float _5155 = isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0));
                                float _3946 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
                                float _3947 = dot(vec3(_1022, _1025, _1028), vec3(_3939 * _3933, _3939 * _3934, _3939 * _3935));
                                float _5166 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3950 = isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0));
                                float _3954 = ((_3950 * _3950) * (_3932 + (-1.0))) + 1.0;
                                float _3955 = _3892 * _3931;
                                float _3956 = _3955 * _3955;
                                float _3962 = ((1.0 - _3956) * dot(vec3(_1022, _1025, _1028), vec3(_3879, _3880, _3881))) + _3956;
                                float _5177 = isnan(0.0) ? _3962 : (isnan(_3962) ? 0.0 : max(_3962, 0.0));
                                float _3963 = isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0));
                                float _3964 = 1.0 - _3931;
                                float _3974 = (0.5 / (((_3963 * ((_3946 * _3964) + _3931)) + 9.9999999392252902907785028219223e-09) + (((_3963 * _3964) + _3931) * _3946))) * _3963;
                                float _5188 = isnan(0.0) ? _3974 : (isnan(_3974) ? 0.0 : max(_3974, 0.0));
                                float _3984 = (_3909 * _3886) * (((_3932 * 3.1415927410125732421875) * (isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0)))) / ((_3954 * _3954) * ((_3899 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3910 * _3756.z;
                                frontier_phi_88_pred_1 = _3910 * _3756.y;
                                frontier_phi_88_pred_2 = _3910 * _3756.x;
                                frontier_phi_88_pred_3 = _3984 * _3768.z;
                                frontier_phi_88_pred_4 = _3984 * _3768.y;
                                frontier_phi_88_pred_5 = _3984 * _3768.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3993 = frontier_phi_88_pred;
                            _3992 = frontier_phi_88_pred_1;
                            _3991 = frontier_phi_88_pred_2;
                            _3990 = frontier_phi_88_pred_3;
                            _3989 = frontier_phi_88_pred_4;
                            _3988 = frontier_phi_88_pred_5;
                            _3698 = _3991 + _3711;
                            _3699 = _3992 + _3712;
                            _3700 = _3993 + _3713;
                            _3695 = _3988 + _3708;
                            _3696 = _3989 + _3709;
                            _3697 = _3990 + _3710;
                            if (_3715 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3708 = _3695;
                                _3709 = _3696;
                                _3710 = _3697;
                                _3711 = _3698;
                                _3712 = _3699;
                                _3713 = _3700;
                                _3714 = _3715;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3700;
                        frontier_phi_82_pred_1 = _3699;
                        frontier_phi_82_pred_2 = _3698;
                        frontier_phi_82_pred_3 = _3697;
                        frontier_phi_82_pred_4 = _3696;
                        frontier_phi_82_pred_5 = _3695;
                    }
                    _3338 = frontier_phi_82_pred;
                    _3336 = frontier_phi_82_pred_1;
                    _3334 = frontier_phi_82_pred_2;
                    _3332 = frontier_phi_82_pred_3;
                    _3330 = frontier_phi_82_pred_4;
                    _3328 = frontier_phi_82_pred_5;
                    uint _3494 = _3493 + 1u;
                    if (_3494 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3487 = _3328;
                        _3488 = _3330;
                        _3489 = _3332;
                        _3490 = _3334;
                        _3491 = _3336;
                        _3492 = _3338;
                        _3493 = _3494;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3334;
                frontier_phi_63_64_ladder_1 = _3338;
                frontier_phi_63_64_ladder_2 = _3336;
                frontier_phi_63_64_ladder_3 = _3332;
                frontier_phi_63_64_ladder_4 = _3330;
                frontier_phi_63_64_ladder_5 = _3328;
            }
            else
            {
                frontier_phi_63_64_ladder = _3213;
                frontier_phi_63_64_ladder_1 = _3217;
                frontier_phi_63_64_ladder_2 = _3215;
                frontier_phi_63_64_ladder_3 = _3211;
                frontier_phi_63_64_ladder_4 = _3209;
                frontier_phi_63_64_ladder_5 = _3207;
            }
            _3327 = frontier_phi_63_64_ladder_5;
            _3329 = frontier_phi_63_64_ladder_4;
            _3331 = frontier_phi_63_64_ladder_3;
            _3333 = frontier_phi_63_64_ladder;
            _3335 = frontier_phi_63_64_ladder_2;
            _3337 = frontier_phi_63_64_ladder_1;
        }
        float _3342 = isnan(1.0) ? _1081 : (isnan(_1081) ? 1.0 : min(_1081, 1.0));
        _3140 = (_3342 * _3333) + _2652;
        _3142 = (_3342 * _3335) + _2654;
        _3144 = (_3342 * _3337) + _2656;
        _3146 = ((_3327 * _1065) * _3342) + _2990;
        _3148 = ((_3329 * _1067) * _3342) + _2992;
        _3150 = ((_3331 * _1068) * _3342) + _2994;
    }
    else
    {
        _3140 = _2652;
        _3142 = _2654;
        _3144 = _2656;
        _3146 = _2990;
        _3148 = _2992;
        _3150 = _2994;
    }
    float _5204 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _5215 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _5226 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _3167 = ((isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0))) * (_3140 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1081))) + ((_3146 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1920)) * cbPerFrame._m0[3u].x);
    float _3168 = ((isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0))) * (_3142 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1081))) + ((_3148 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1920)) * cbPerFrame._m0[3u].x);
    float _3169 = ((isnan(1.0) ? _5226 : (isnan(_5226) ? 1.0 : min(_5226, 1.0))) * (_3144 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1081))) + ((_3150 + ((isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))) * _1920)) * cbPerFrame._m0[3u].x);
    uint _3170 = _287 + 6u;
    float _3178 = _1003 / cbSceneParam._m0[86u].x;
    float _3179 = _1004 / cbSceneParam._m0[86u].y;
    vec4 _3193 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3178, _3179, (log2((isnan(cbSceneParam._m0[77u].w) ? _926 : (isnan(_926) ? cbSceneParam._m0[77u].w : min(_926, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3195 = _3193.x;
    float _3196 = _3193.y;
    float _3197 = _3193.z;
    float _3198 = _3193.w;
    float _3269;
    float _3271;
    float _3273;
    float _3275;
    if (_926 > cbSceneParam._m0[78u].w)
    {
        float _3232 = isnan(_926) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _926 : min(cbSceneParam._m0[80u].w, _926));
        float _3233 = _3232 / _926;
        float _3244 = _3233 * _976;
        float _3245 = _977 * _3233;
        float _3246 = (-0.0) - _3245;
        float _3247 = _3233 * _978;
        float _3249 = (cbSceneParam._m0[77u].w * _3246) / _3232;
        float _3250 = _3249 + cbSceneParam._m0[79u].w;
        float _3251 = cbSceneParam._m0[79u].w - _3245;
        float _3257 = sqrt(((_3244 * _3244) + (_3245 * _3245)) + (_3247 * _3247));
        float _3260 = (1.0 - (cbSceneParam._m0[77u].w / _3232)) * _3257;
        float _3265 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3267 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3444;
        if (abs((_3246 - _3249) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3444 = ((((_3250 > 0.0) ? exp2(_3265 * _3250) : (2.0 - exp2(_3267 * _3250))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3260;
        }
        else
        {
            float _3388 = 1.0 / cbSceneParam._m0[80u].x;
            float _3389 = isnan(_3251) ? _3250 : (isnan(_3250) ? _3251 : max(_3250, _3251));
            float _3390 = isnan(_3251) ? _3250 : (isnan(_3250) ? _3251 : min(_3250, _3251));
            float _3399 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : min(_3389, 0.0));
            float _3400 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : min(_3390, 0.0));
            _3444 = ((abs(_3257 / _3246) * cbSceneParam._m0[80u].y) * ((((_3399 - _3400) * 2.0) - ((exp2(_3265 * (isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0)))) - exp2(_3265 * (isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))))) * _3388)) - ((exp2(_3267 * _3399) - exp2(_3267 * _3400)) * _3388))) + (_3260 * cbSceneParam._m0[80u].z);
        }
        vec4 _3446 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3178, _3179, 1.0), 0.0);
        float _3455 = exp2((_3444 * (-1.44269502162933349609375)) * (1.0 - _3446.w));
        float _3456 = log2(_3455);
        float _3472 = log2(_3198);
        _3269 = (exp2(_3472 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3456 * cbSceneParam._m0[78u].x)) * _3446.x) / cbSceneParam._m0[78u].x)) + _3195;
        _3271 = (exp2(_3472 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3456 * cbSceneParam._m0[78u].y)) * _3446.y) / cbSceneParam._m0[78u].y)) + _3196;
        _3273 = (exp2(_3472 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3456 * cbSceneParam._m0[78u].z)) * _3446.z) / cbSceneParam._m0[78u].z)) + _3197;
        _3275 = _3455 * _3198;
    }
    else
    {
        _3269 = _3195;
        _3271 = _3196;
        _3273 = _3197;
        _3275 = _3198;
    }
    bool _3482;
    vec4 _3285;
    vec4 _3307;
    float _3309;
    float _3313;
    float _3314;
    float _3315;
    float _3316;
    bool _3326;
    for (;;)
    {
        _3285 = cbMatDynParam._m0[0u];
        float _3287 = roundEven(_3285.y);
        bool _3288 = _3287 == 3.0;
        float _3289 = log2(_3275);
        float _3296 = exp2(_3289 * cbSceneParam._m0[78u].x) * _3167;
        float _3297 = exp2(_3289 * cbSceneParam._m0[78u].y) * _3168;
        float _3298 = exp2(_3289 * cbSceneParam._m0[78u].z) * _3169;
        float _3305 = _992 + (-0.5);
        _3307 = cbMtdParam._m0[1u];
        _3309 = _3307.y * _3305;
        float _3312 = (_3287 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3313 = _3312 * (_3288 ? _3296 : (_3296 + (cbSceneParam._m0[72u].w * _3269)));
        _3314 = _3312 * (_3288 ? _3297 : (_3297 + (cbSceneParam._m0[72u].w * _3271)));
        _3315 = _3312 * (_3288 ? _3298 : (_3298 + (cbSceneParam._m0[72u].w * _3273)));
        _3316 = _3305 * 0.999000012874603271484375;
        _3326 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3326)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3316) < 0.5)
            {
                _3482 = true;
                break;
            }
        }
        uint _3423 = _1041 + uint(_3285.w);
        if ((cbInstanceData._m0[_3423].w < 1.0) && ((cbInstanceData._m0[_3423].w + _3316) < 0.5))
        {
            _3482 = true;
            break;
        }
        if ((_3309 + 1.0) < _3307.x)
        {
            _3482 = true;
            break;
        }
        _3482 = false;
        break;
    }
    float _3686;
    if (_3482)
    {
        discard_state = true;
        _3686 = 0.0;
    }
    else
    {
        _3686 = cbInstanceData._m0[_3170].w;
    }
    SV_Target.x = _3313;
    SV_Target.y = _3314;
    SV_Target.z = _3315;
    SV_Target.w = _3686;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3170].w;
    discard_exit();
}


