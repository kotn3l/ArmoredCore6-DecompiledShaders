#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1182;
float _3586;
float _3587;
float _3588;
float _3589;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3598 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3609 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3620 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _321 = _316.x * cbMtdParam._m0[9u].x;
    float _322 = _316.y * cbMtdParam._m0[9u].y;
    float _323 = _316.z * cbMtdParam._m0[9u].z;
    float _327 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _321;
    float _330 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _322;
    float _333 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _323;
    float _340 = ((_321 - _327) * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) + _327;
    float _341 = ((_322 - _330) * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) + _330;
    float _342 = ((_323 - _333) * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) + _333;
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _279) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _280) + cbTextureTilingScale._m0[14u].w));
    vec4 _381 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _411 = _407.z;
    float _415 = (_407.x * 2.0) + (-1.0);
    float _416 = (_407.y * 2.0) + (-1.0);
    float _417 = dot(vec2(_415, _416), vec2(_415, _416));
    float _3631 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _422 = sqrt(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))));
    float _427 = _415 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_381.x * 2.0) + (-1.0)));
    float _428 = _416 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_381.y * 2.0) + (-1.0)));
    float _431 = fma(_422, _227, fma(_428, _234, _427 * _220));
    float _434 = fma(_422, _228, fma(_428, _235, _427 * _221));
    float _437 = fma(_422, _229, fma(_428, _236, _427 * _222));
    float _441 = inversesqrt(dot(vec3(_431, _434, _437), vec3(_431, _434, _437)));
    vec4 _477 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _279) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _280) + cbTextureTilingScale._m0[11u].w));
    float _479 = _477.x;
    float _480 = 1.0 - _479;
    float _487 = ((_479 - _480) * cbMtdParam._m0[24u].z) + _480;
    float _489 = (cbMtdParam._m0[19u].x + dot(vec4(_441 * _431, _441 * _434, _441 * _437, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_487 * cbMtdParam._m0[21u].z);
    float _3642 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _505 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_487 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3653 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _510 = ((_490 * ((_361.x * cbMtdParam._m0[18u].x) - _340)) * _506) + _340;
    float _511 = ((_490 * ((_361.y * cbMtdParam._m0[18u].y) - _341)) * _506) + _341;
    float _512 = ((_490 * ((_361.z * cbMtdParam._m0[18u].z) - _342)) * _506) + _342;
    vec4 _525 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _527 = _525.x;
    float _530 = _527 - ((_527 * _490) * _506);
    float _535 = (((_381.z - _411) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _411;
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _279) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _280) + cbTextureTilingScale._m0[15u].w));
    float _555 = (_548.x * 2.0) + (-1.0);
    float _556 = (_548.y * 2.0) + (-1.0);
    float _557 = dot(vec2(_555, _556), vec2(_555, _556));
    float _3664 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _566 = (((_548.z - _535) * _490) * _506) + _535;
    float _581 = (((cbMtdParam._m0[21u].x * _427) + ((_555 - _427) * _490)) * _506) + _427;
    float _582 = (((cbMtdParam._m0[21u].x * _428) + ((_556 - _428) * _490)) * _506) + _428;
    float _583 = (((sqrt(1.0 - (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) - _422) * _490) * _506) + _422;
    float _585 = cbMtdParam._m0[22u].x + _407.w;
    float _588 = fma(_583, _227, fma(_582, _234, _581 * _220));
    float _591 = fma(_583, _228, fma(_582, _235, _581 * _221));
    float _594 = fma(_583, _229, fma(_582, _236, _581 * _222));
    float _598 = inversesqrt(dot(vec3(_588, _591, _594), vec3(_588, _591, _594)));
    float _599 = _598 * _588;
    float _600 = _598 * _591;
    float _601 = _598 * _594;
    float _3675 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _602 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _3697 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3708 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3719 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3730 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _607 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _621 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _672 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _662);
    float _673 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _662);
    float _674 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _662);
    float _678 = inversesqrt(dot(vec3(_672, _673, _674), vec3(_672, _673, _674)));
    float _679 = _672 * _678;
    float _680 = _673 * _678;
    float _681 = _674 * _678;
    vec4 _686 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _688 = _686.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _863 = sqrt(((_672 * _672) + (_673 * _673)) + (_674 * _674));
        float _869 = (cbMatDynParam._m0[5u].x * _863) + cbMatDynParam._m0[5u].y;
        float _3741 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _874 = (cbMatDynParam._m0[5u].z * _863) + cbMatDynParam._m0[5u].w;
        float _3752 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) - _870)) + _870) < ((_688 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _700 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _701 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _721 = fma(_601, cbSceneParam._m0[5u].z, fma(_600, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _599));
    float _724 = fma(_601, cbSceneParam._m0[6u].z, fma(_600, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _599));
    float _727 = fma(_601, cbSceneParam._m0[7u].z, fma(_600, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _599));
    uint _740 = _260 + 9u;
    uint _741 = _740 + uint(cbMatDynParam._m0[0u].w);
    float _747 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) * cbInstanceData._m0[_741].x;
    float _748 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) * cbInstanceData._m0[_741].y;
    float _749 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * cbInstanceData._m0[_741].z;
    float _3763 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _753 = 1.0 - _607;
    float _754 = _750 * _753;
    float _755 = _751 * _753;
    float _756 = _752 * _753;
    float _761 = (_750 + (-0.039999999105930328369140625)) * _607;
    float _762 = (_751 + (-0.039999999105930328369140625)) * _607;
    float _763 = (_752 + (-0.039999999105930328369140625)) * _607;
    float _764 = _761 + 0.039999999105930328369140625;
    float _766 = _762 + 0.039999999105930328369140625;
    float _767 = _763 + 0.039999999105930328369140625;
    vec4 _776 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _700, cbSceneParam._m0[86u].y * _701));
    float _780 = ((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * TEXCOORD_5.w) * _776.x;
    float _781 = dot(vec3(_599, _600, _601), vec3(_679, _680, _681));
    float _784 = _781 * 2.0;
    float _788 = (_784 * _599) - _679;
    float _789 = (_784 * _600) - _680;
    float _790 = (_784 * _601) - _681;
    float _794 = abs(dot(vec3(_679, _680, _681), vec3(_599, _600, _601)));
    float _3796 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _796 = sqrt(_602);
    float _809 = exp2((_796 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_796 * 3.0));
    float _815 = (1.0 - _809) * ((_796 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _816 = _809 * _796;
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1181;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _906 = fma(_852, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844));
        float _910 = fma(_852, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844));
        float _914 = fma(_852, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844));
        float _939 = _844 + _599;
        float _940 = _848 + _600;
        float _941 = _852 + _601;
        float _951 = fma(_941, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939)) - _906;
        float _952 = fma(_941, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939)) - _910;
        float _953 = fma(_941, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939)) - _914;
        float _957 = inversesqrt(dot(vec3(_951, _952, _953), vec3(_951, _952, _953)));
        float _970 = ((_957 * _951) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_906 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_957 * _952) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_910 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_957 * _953) / cbModelParam._m0[34u].z) + ((((((_914 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        float _1009 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_975.x + (-0.5));
        float _1011 = _1009 * (_975.y + (-0.5));
        float _1012 = _1009 * (_975.z + (-0.5));
        float _1019 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_982.x + (-0.5));
        float _1021 = _1019 * (_982.y + (-0.5));
        float _1022 = _1019 * (_982.z + (-0.5));
        float _1029 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_989.x + (-0.5));
        float _1031 = _1029 * (_989.y + (-0.5));
        float _1032 = _1029 * (_989.z + (-0.5));
        float _1039 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_996.x + (-0.5));
        float _1041 = _1039 * (_996.y + (-0.5));
        float _1042 = _1039 * (_996.z + (-0.5));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = _1010 * 0.5;
        float _1047 = _1020 * 0.5;
        float _1048 = _1030 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1063 = (dot(vec3(_599, _600, _601), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1073 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3844 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1075 + 1.0))) + _1080) * _1043;
        float _1090 = _1011 * 0.5;
        float _1091 = _1021 * 0.5;
        float _1092 = _1031 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_599, _600, _601), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3877 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1117 + 1.0))) + _1122) * _1044;
        float _1132 = _1012 * 0.5;
        float _1133 = _1022 * 0.5;
        float _1134 = _1032 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_599, _600, _601), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3910 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1159 + 1.0))) + _1164) * _1045;
        _1181 = _1012;
        _1183 = _1011;
        _1184 = _1010;
        _1185 = _1022;
        _1186 = _1021;
        _1187 = _1020;
        _1188 = _1032;
        _1189 = _1031;
        _1190 = _1030;
        _1191 = _1045;
        _1192 = _1044;
        _1193 = _1043;
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _1182;
        _1183 = _1182;
        _1184 = _1182;
        _1185 = _1182;
        _1186 = _1182;
        _1187 = _1182;
        _1188 = _1182;
        _1189 = _1182;
        _1190 = _1182;
        _1191 = _1182;
        _1192 = _1182;
        _1193 = _1182;
        _1194 = 0.0;
        _1195 = 0.0;
        _1196 = 0.0;
    }
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1224 = fma(_852, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844));
        float _1228 = fma(_852, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844));
        float _1232 = fma(_852, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844));
        float _1255 = _844 + _599;
        float _1256 = _848 + _600;
        float _1257 = _852 + _601;
        float _1267 = fma(_1257, cbModelParam._m0[30u].z, fma(_1256, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1255)) - _1224;
        float _1268 = fma(_1257, cbModelParam._m0[31u].z, fma(_1256, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1255)) - _1228;
        float _1269 = fma(_1257, cbModelParam._m0[32u].z, fma(_1256, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1255)) - _1232;
        float _1273 = inversesqrt(dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269)));
        float _1286 = ((_1273 * _1267) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1224 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1273 * _1268) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1228 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1273 * _1269) / cbModelParam._m0[35u].z) + ((((((_1232 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        float _1323 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1290.x + (-0.5));
        float _1325 = _1323 * (_1290.y + (-0.5));
        float _1326 = _1323 * (_1290.z + (-0.5));
        float _1333 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1297.x + (-0.5));
        float _1335 = _1333 * (_1297.y + (-0.5));
        float _1336 = _1333 * (_1297.z + (-0.5));
        float _1343 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1304.x + (-0.5));
        float _1345 = _1343 * (_1304.y + (-0.5));
        float _1346 = _1343 * (_1304.z + (-0.5));
        float _1353 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1311.x + (-0.5));
        float _1355 = _1353 * (_1311.y + (-0.5));
        float _1356 = _1353 * (_1311.z + (-0.5));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = _1324 * 0.5;
        float _1361 = _1334 * 0.5;
        float _1362 = _1344 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_599, _600, _601), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _3973 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1387 + 1.0))) + _1392) * _1357;
        float _1402 = _1325 * 0.5;
        float _1403 = _1335 * 0.5;
        float _1404 = _1345 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_599, _600, _601), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4006 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1429 + 1.0))) + _1434) * _1358;
        float _1444 = _1326 * 0.5;
        float _1445 = _1336 * 0.5;
        float _1446 = _1346 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_599, _600, _601), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4039 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1471 + 1.0))) + _1476) * _1359;
        _1493 = _1326;
        _1494 = _1325;
        _1495 = _1324;
        _1496 = _1336;
        _1497 = _1335;
        _1498 = _1334;
        _1499 = _1346;
        _1500 = _1345;
        _1501 = _1344;
        _1502 = _1359;
        _1503 = _1358;
        _1504 = _1357;
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
    }
    else
    {
        _1493 = _1182;
        _1494 = _1182;
        _1495 = _1182;
        _1496 = _1182;
        _1497 = _1182;
        _1498 = _1182;
        _1499 = _1182;
        _1500 = _1182;
        _1501 = _1182;
        _1502 = _1182;
        _1503 = _1182;
        _1504 = _1182;
        _1505 = 0.0;
        _1506 = 0.0;
        _1507 = 0.0;
    }
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1194)) + _1194;
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1195)) + _1195;
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1196)) + _1196;
    float _1540 = fma(_1519, cbSceneParam._m0[89u].z, fma(_1518, cbSceneParam._m0[89u].y, _1517 * cbSceneParam._m0[89u].x));
    float _1543 = fma(_1519, cbSceneParam._m0[90u].z, fma(_1518, cbSceneParam._m0[90u].y, _1517 * cbSceneParam._m0[90u].x));
    float _1546 = fma(_1519, cbSceneParam._m0[91u].z, fma(_1518, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1517));
    float _1561 = _788 * 0.5;
    float _1562 = _789 * 0.5;
    float _1563 = _790 * 0.5;
    float _1564 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1567 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1570 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1604;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1577 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1181, _1185, _1188, _1191));
        float _1581 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1585 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1592 = dot(vec4(cbModelParam._m0[39u]), vec4(_1561, _1562, _1563, 1.0));
        _1604 = dot(vec3(isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1592) ? 0.0 : (isnan(0.0) ? _1592 : max(0.0, _1592))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1604 = 1.0;
    }
    float _1615;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1606 = dot(vec4(cbModelParam._m0[40u]), vec4(_1561, _1562, _1563, 1.0));
        _1615 = dot(vec3(isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1606) ? 0.0 : (isnan(0.0) ? _1606 : max(0.0, _1606))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1615 = 1.0;
    }
    float _1619 = (_1615 * cbModelParam._m0[1u].x) + (_1604 * (1.0 - cbModelParam._m0[1u].x));
    float _1629 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _602);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1629 : min(cbModelParam._m0[25u].z, _1629));
    float _1710;
    float _1712;
    float _1714;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1677 = fma(_852, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844)) + cbModelParam._m0[13u].w;
        float _1681 = fma(_852, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844)) + cbModelParam._m0[14u].w;
        float _1685 = fma(_852, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844)) + cbModelParam._m0[15u].w;
        float _1688 = fma(_790, cbModelParam._m0[13u].z, fma(_789, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788));
        float _1691 = fma(_790, cbModelParam._m0[14u].z, fma(_789, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788));
        float _1694 = fma(_790, cbModelParam._m0[15u].z, fma(_789, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788));
        float _1722;
        if (_1688 > 0.0)
        {
            _1722 = abs((1.0 - _1677) / _1688);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1677 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1722 = frontier_phi_17_15_ladder;
        }
        float _1946;
        if (_1691 > 0.0)
        {
            _1946 = abs((1.0 - _1681) / _1691);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1681 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1946 = frontier_phi_26_22_ladder;
        }
        float _2203;
        if (_1694 > 0.0)
        {
            _2203 = abs((1.0 - _1685) / _1694);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1685 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2203 = frontier_phi_38_33_ladder;
        }
        float _2205 = isnan(_1946) ? _1722 : (isnan(_1722) ? _1946 : min(_1722, _1946));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1688) + _1677;
        float _2211 = (_2206 * _1691) + _1681;
        float _2212 = (_2206 * _1694) + _1685;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2215 = (-1.0) - _2213;
        float _2217 = _2213 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2212 > _2217) || ((_2212 < _2215) || ((_2211 > _2217) || ((_2211 < _2215) || ((_2210 < _2215) || (_2210 > _2217))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2340 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2212, cbModelParam._m0[9u].z, fma(_2211, cbModelParam._m0[9u].y, _2210 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2212, cbModelParam._m0[10u].z, fma(_2211, cbModelParam._m0[10u].y, _2210 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2212, cbModelParam._m0[11u].z, fma(_2211, cbModelParam._m0[11u].y, _2210 * cbModelParam._m0[11u].x))), _1630);
            frontier_phi_16_38_ladder = _2340.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2340.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2340.x * cbModelParam._m0[1u].y;
        }
        _1710 = frontier_phi_16_38_ladder_2;
        _1712 = frontier_phi_16_38_ladder_1;
        _1714 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1698 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_788, _789, _790), _1630);
        _1710 = _1698.x * cbModelParam._m0[1u].y;
        _1712 = _1698.y * cbModelParam._m0[1u].y;
        _1714 = _1698.z * cbModelParam._m0[1u].y;
    }
    float _1718 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _602);
    float _1719 = isnan(_1718) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1718 : min(cbModelParam._m0[25u].w, _1718));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1772 = fma(_852, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844)) + cbModelParam._m0[21u].w;
        float _1776 = fma(_852, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844)) + cbModelParam._m0[22u].w;
        float _1780 = fma(_852, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844)) + cbModelParam._m0[23u].w;
        float _1783 = fma(_790, cbModelParam._m0[21u].z, fma(_789, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788));
        float _1786 = fma(_790, cbModelParam._m0[22u].z, fma(_789, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788));
        float _1789 = fma(_790, cbModelParam._m0[23u].z, fma(_789, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788));
        float _1951;
        if (_1783 > 0.0)
        {
            _1951 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1951 = frontier_phi_28_24_ladder;
        }
        float _2230;
        if (_1786 > 0.0)
        {
            _2230 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2230 = frontier_phi_40_35_ladder;
        }
        float _2443;
        if (_1789 > 0.0)
        {
            _2443 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2443 = frontier_phi_49_46_ladder;
        }
        float _2445 = isnan(_2230) ? _1951 : (isnan(_1951) ? _2230 : min(_1951, _2230));
        float _2446 = isnan(_2443) ? _2445 : (isnan(_2445) ? _2443 : min(_2445, _2443));
        float _2450 = (_2446 * _1783) + _1772;
        float _2451 = (_2446 * _1786) + _1776;
        float _2452 = (_2446 * _1789) + _1780;
        float _2453 = _2446 * 9.9999997473787516355514526367188e-05;
        float _2454 = (-1.0) - _2453;
        float _2456 = _2453 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2452 > _2456) || ((_2452 < _2454) || ((_2451 > _2456) || ((_2451 < _2454) || ((_2450 < _2454) || (_2450 > _2456))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2651 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2452, cbModelParam._m0[17u].z, fma(_2451, cbModelParam._m0[17u].y, _2450 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2452, cbModelParam._m0[18u].z, fma(_2451, cbModelParam._m0[18u].y, _2450 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2452, cbModelParam._m0[19u].z, fma(_2451, cbModelParam._m0[19u].y, _2450 * cbModelParam._m0[19u].x))), _1719);
            frontier_phi_25_49_ladder = _2651.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2651.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2651.x * cbModelParam._m0[1u].z;
        }
        _1808 = frontier_phi_25_49_ladder_2;
        _1810 = frontier_phi_25_49_ladder_1;
        _1812 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1792 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_788, _789, _790), _1719);
        _1808 = _1792.x * cbModelParam._m0[1u].z;
        _1810 = _1792.y * cbModelParam._m0[1u].z;
        _1812 = _1792.z * cbModelParam._m0[1u].z;
    }
    float _1825 = (((_815 * _764) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1808 - _1710)) + _1710);
    float _1827 = (((_815 * _766) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1810 - _1712)) + _1712);
    float _1829 = (((_815 * _767) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1812 - _1714)) + _1714);
    float _1832 = fma(_1829, cbSceneParam._m0[89u].z, fma(_1827, cbSceneParam._m0[89u].y, _1825 * cbSceneParam._m0[89u].x));
    float _1835 = fma(_1829, cbSceneParam._m0[90u].z, fma(_1827, cbSceneParam._m0[90u].y, _1825 * cbSceneParam._m0[90u].x));
    float _1838 = fma(_1829, cbSceneParam._m0[91u].z, fma(_1827, cbSceneParam._m0[91u].y, _1825 * cbSceneParam._m0[91u].x));
    vec4 _1846 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_700, _701));
    float _1848 = _1846.w;
    float _1860 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1848);
    float _1861 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1848);
    float _1862 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1848);
    uvec4 _1866 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1868 = _1866.x * 14u;
    uint _1869 = _1868 + 13u;
    float _1876 = _780 + (-1.0);
    float _1881 = (cbLight._m0[_1869].x * _1876) + 1.0;
    float _1882 = (cbLight._m0[_1869].y * _1876) + 1.0;
    float _1883 = (cbLight._m0[_1869].z * _1876) + 1.0;
    float _1884 = (cbLight._m0[_1869].w * _1876) + 1.0;
    uint _1885 = _1868 + 5u;
    float _1891 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
    uint _1895 = _1868 + 4u;
    float _1905 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
    uint _1909 = _1868 | 1u;
    float _1920 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_599, _600, _601));
    float _1923 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_599, _600, _601));
    float _4175 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _4186 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1928 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.3183098733425140380859375;
    float _1930 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * 0.3183098733425140380859375;
    float _1937 = ((cbLight._m0[_1885].x * _1891) * _1930) + (((cbLight._m0[_1895].x * _1860) * _1905) * _1928);
    float _1938 = ((_1891 * cbLight._m0[_1885].y) * _1930) + (((cbLight._m0[_1895].y * _1861) * _1905) * _1928);
    float _1939 = ((_1891 * cbLight._m0[_1885].z) * _1930) + (((cbLight._m0[_1895].z * _1862) * _1905) * _1928);
    uvec4 _1943 = floatBitsToUint(cbLight._m0[_1868 + 12u]);
    bool _1945 = _1943.x == 0u;
    float _1956;
    float _1958;
    float _1960;
    if (_1945)
    {
        _1956 = _1937;
        _1958 = _1938;
        _1960 = _1939;
    }
    else
    {
        uint _1964 = _1868 + 6u;
        float _1980 = (dot(vec3(cbLight._m0[_1868 + 2u].xyz), vec3(_599, _600, _601)) * 0.5) + 0.5;
        float _1981 = _1980 * _1980;
        float _4197 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1982 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1983 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
        _1956 = (((cbLight._m0[_1964].x * 0.3183098733425140380859375) * _1982) * _1983) + _1937;
        _1958 = (((cbLight._m0[_1964].y * 0.3183098733425140380859375) * _1982) * _1983) + _1938;
        _1960 = (((cbLight._m0[_1964].z * 0.3183098733425140380859375) * _1982) * _1983) + _1939;
    }
    bool _1963 = _1943.y == 0u;
    float _2001;
    float _2003;
    float _2005;
    if (_1963)
    {
        _2001 = _1956;
        _2003 = _1958;
        _2005 = _1960;
    }
    else
    {
        uint _2174 = _1868 + 7u;
        float _2190 = (dot(vec3(cbLight._m0[_1868 + 3u].xyz), vec3(_599, _600, _601)) * 0.5) + 0.5;
        float _2191 = _2190 * _2190;
        float _4213 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2192 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2193 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _2001 = (((cbLight._m0[_2174].x * 0.3183098733425140380859375) * _2192) * _2193) + _1956;
        _2003 = (((cbLight._m0[_2174].y * 0.3183098733425140380859375) * _2192) * _2193) + _1958;
        _2005 = (((cbLight._m0[_2174].z * 0.3183098733425140380859375) * _2192) * _2193) + _1960;
    }
    uint _2008 = _1868 + 8u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1868].w)) * _602) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1868].x + _679;
    float _2024 = cbLight._m0[_1868].y + _680;
    float _2025 = cbLight._m0[_1868].z + _681;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_1868].xyz));
    float _4229 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _2037 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _2038 = dot(vec3(_599, _600, _601), vec3(_2030, _2031, _2032));
    float _4251 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _2042 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_2030, _2031, _2032));
    float _4262 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2046 = _2022 * _2022;
    float _2050 = ((_2041 * _2041) * (_2046 + (-1.0))) + 1.0;
    float _2058 = exp2(log2(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * 5.0);
    float _2059 = 0.959999978542327880859375 - _761;
    float _2061 = 0.959999978542327880859375 - _762;
    float _2062 = 0.959999978542327880859375 - _763;
    float _2069 = 1.0 - _2022;
    float _2080 = (0.5 / (((_2037 * ((_2036 * _2069) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2069) + _2022) * _2036))) * _2036;
    float _4273 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2082 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2046 / ((_2050 * _2050) * 3.141590118408203125));
    uint _2096 = _1868 + 9u;
    float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _602) * 0.949999988079071044921875);
    float _2108 = _2107 * _2107;
    float _2109 = cbLight._m0[_1909].x + _679;
    float _2110 = cbLight._m0[_1909].y + _680;
    float _2111 = cbLight._m0[_1909].z + _681;
    float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
    float _2116 = _2115 * _2109;
    float _2117 = _2115 * _2110;
    float _2118 = _2115 * _2111;
    float _2119 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_1909].xyz));
    float _4284 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2123 = dot(vec3(_599, _600, _601), vec3(_2116, _2117, _2118));
    float _4295 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _2127 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_2116, _2117, _2118));
    float _4306 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2131 = _2108 * _2108;
    float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
    float _2142 = exp2(log2(1.0 - (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) * 5.0);
    float _2149 = 1.0 - _2108;
    float _2159 = (0.5 / (((_2037 * ((_2122 * _2149) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2149) + _2108) * _2122))) * _2122;
    float _4317 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2161 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
    float _2171 = (((((_2142 * _2059) + _764) * cbLight._m0[_2096].x) * _2161) * _1891) + ((((cbLight._m0[_2008].x * _1860) * ((_2058 * _2059) + _764)) * _2082) * _1905);
    float _2172 = (((((_2142 * _2061) + _766) * cbLight._m0[_2096].y) * _2161) * _1891) + ((((cbLight._m0[_2008].y * _1861) * ((_2058 * _2061) + _766)) * _2082) * _1905);
    float _2173 = (((((_2142 * _2062) + _767) * cbLight._m0[_2096].z) * _2161) * _1891) + ((((cbLight._m0[_2008].z * _1862) * ((_2058 * _2062) + _767)) * _2082) * _1905);
    float _2235;
    float _2237;
    float _2239;
    if (_1945)
    {
        _2235 = _2171;
        _2237 = _2172;
        _2239 = _2173;
    }
    else
    {
        uint _2241 = _1868 + 2u;
        uint _2245 = _1868 + 10u;
        float _2259 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _602) * 0.949999988079071044921875);
        float _2260 = _2259 * _2259;
        float _2261 = cbLight._m0[_2241].x + _679;
        float _2262 = cbLight._m0[_2241].y + _680;
        float _2263 = cbLight._m0[_2241].z + _681;
        float _2267 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
        float _2268 = _2267 * _2261;
        float _2269 = _2267 * _2262;
        float _2270 = _2267 * _2263;
        float _2271 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_2241].xyz));
        float _4328 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2275 = dot(vec3(_599, _600, _601), vec3(_2268, _2269, _2270));
        float _4339 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2279 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2268, _2269, _2270));
        float _4350 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2283 = _2260 * _2260;
        float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
        float _2294 = exp2(log2(1.0 - (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) * 5.0);
        float _2301 = 1.0 - _2260;
        float _2311 = (0.5 / (((_2037 * ((_2274 * _2301) + _2260)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2301) + _2260) * _2274))) * _2274;
        float _4361 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2313 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
        float _2314 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
        _2235 = (((((_2294 * _2059) + _764) * cbLight._m0[_2245].x) * _2313) * _2314) + _2171;
        _2237 = (((((_2294 * _2061) + _766) * cbLight._m0[_2245].y) * _2313) * _2314) + _2172;
        _2239 = (((((_2294 * _2062) + _767) * cbLight._m0[_2245].z) * _2313) * _2314) + _2173;
    }
    float _2349;
    float _2351;
    float _2353;
    if (_1963)
    {
        _2349 = _2235;
        _2351 = _2237;
        _2353 = _2239;
    }
    else
    {
        uint _2360 = _1868 + 3u;
        uint _2364 = _1868 + 11u;
        float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _602) * 0.949999988079071044921875);
        float _2379 = _2378 * _2378;
        float _2380 = cbLight._m0[_2360].x + _679;
        float _2381 = cbLight._m0[_2360].y + _680;
        float _2382 = cbLight._m0[_2360].z + _681;
        float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
        float _2387 = _2386 * _2380;
        float _2388 = _2386 * _2381;
        float _2389 = _2386 * _2382;
        float _2390 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_2360].xyz));
        float _4377 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2394 = dot(vec3(_599, _600, _601), vec3(_2387, _2388, _2389));
        float _4388 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2398 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2387, _2388, _2389));
        float _4399 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2402 = _2379 * _2379;
        float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
        float _2413 = exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0);
        float _2420 = 1.0 - _2379;
        float _2430 = (0.5 / (((_2037 * ((_2393 * _2420) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2420) + _2379) * _2393))) * _2393;
        float _4410 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2432 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
        float _2433 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _2349 = (((((_2413 * _2059) + _764) * cbLight._m0[_2364].x) * _2432) * _2433) + _2235;
        _2351 = (((((_2413 * _2061) + _766) * cbLight._m0[_2364].y) * _2432) * _2433) + _2237;
        _2353 = (((((_2413 * _2062) + _767) * cbLight._m0[_2364].z) * _2432) * _2433) + _2239;
    }
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    if (_1866.y == 0u)
    {
        float _2508 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2508;
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2508;
        float _2511 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2508;
        uvec4 _2523 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2524 = _2523.x;
        uint _2535 = uint((float(_2523.y) * floor(float(uint(cbSceneParam._m0[85u].y * _701) / _2524))) + floor(float(uint(cbSceneParam._m0[85u].x * _700) / _2524)));
        float _2545 = (log2(_2511 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2546 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        uint _2549 = uint(isnan(14.0) ? _2546 : (isnan(_2546) ? 14.0 : min(_2546, 14.0)));
        uvec4 _2554 = texelFetch(g_lightClusterGridBuffer, int(((_2549 << 2u) + (_2535 << 6u)) >> 2u));
        uint _2555 = _2554.x;
        uint _2556 = _2523.z;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        if (((((1u << ((_2556 >> 4u) & 15u)) + 4294967295u) & _2555) == 0u) || ((_2556 & 240u) == 0u))
        {
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
        }
        else
        {
            float _2657;
            float _2659;
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            uint _2815 = 0u;
            uint _2824;
            bool _2825;
            for (;;)
            {
                _2824 = texelFetch(g_lightClassification, int((((_2549 << 5u) + (_2535 << 9u)) + (_2815 << 2u)) >> 2u)).x;
                _2825 = _2824 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2825)
                {
                    frontier_phi_66_pred = _2809;
                    frontier_phi_66_pred_1 = _2814;
                    frontier_phi_66_pred_2 = _2813;
                    frontier_phi_66_pred_3 = _2812;
                    frontier_phi_66_pred_4 = _2811;
                    frontier_phi_66_pred_5 = _2810;
                }
                else
                {
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    uint _2960;
                    _2954 = _2809;
                    _2955 = _2810;
                    _2956 = _2811;
                    _2957 = _2812;
                    _2958 = _2813;
                    _2959 = _2814;
                    _2960 = _2824;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    for (;;)
                    {
                        uint _2964 = uint(findLSB(_2960)) + (_2815 << 5u);
                        uint _2961 = (_2960 + 4294967295u) & _2960;
                        uint _2966 = _2964 * 48u;
                        vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 3u)).x));
                        uint _2986 = (_2964 * 48u) + 4u;
                        vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 3u)).x));
                        uint _3005 = (_2964 * 48u) + 8u;
                        vec3 _3016 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 2u)).x));
                        float _3020 = _2980.x - _2509;
                        float _3021 = _2980.y - _2510;
                        float _3022 = _2980.z - _2511;
                        float _3023 = dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022));
                        float _3026 = inversesqrt(_3023);
                        float _3027 = _3026 * _3020;
                        float _3028 = _3026 * _3021;
                        float _3029 = _3026 * _3022;
                        float _3030 = dot(vec3(_721, _724, _727), vec3(_3027, _3028, _3029));
                        float _3035 = 1.0 - (_3023 * _2980.w);
                        float _4436 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3036 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3037 = sqrt(_3023) * _2999.w;
                        float _3040 = 1.39999997615814208984375 / (_3037 + 1.39999997615814208984375);
                        float _3041 = _3040 * _3040;
                        float _3044 = ((1.0 - _3041) * _3030) + _3041;
                        float _3047 = _3037 * _3037;
                        float _3051 = ((isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))) * _3036) / ((_3047 * 0.699999988079071044921875) + 1.0);
                        float _3055 = (-0.0) - _2509;
                        float _3056 = (-0.0) - _2510;
                        float _3057 = (-0.0) - _2511;
                        float _3061 = inversesqrt(dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057)));
                        float _3062 = _3061 * _3055;
                        float _3063 = _3061 * _3056;
                        float _3064 = _3061 * _3057;
                        float _3072 = exp2(log2(1.0 / ((_3047 * 3.5) + 5.0)) * 0.25);
                        float _3073 = 1.0 - _796;
                        float _3080 = sqrt(1.0 - ((1.0 - (_3073 * _3073)) * (1.0 - (_3072 * _3072))));
                        float _3081 = _3080 * _3080;
                        float _3082 = _3081 * _3081;
                        float _3083 = _3062 + _3027;
                        float _3084 = _3063 + _3028;
                        float _3085 = _3064 + _3029;
                        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                        float _3093 = dot(vec3(_721, _724, _727), vec3(_3062, _3063, _3064));
                        float _4452 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3096 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3097 = dot(vec3(_721, _724, _727), vec3(_3089 * _3083, _3089 * _3084, _3089 * _3085));
                        float _4463 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3100 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3104 = ((_3100 * _3100) * (_3082 + (-1.0))) + 1.0;
                        float _3105 = _3040 * _3081;
                        float _3106 = _3105 * _3105;
                        float _3109 = ((1.0 - _3106) * _3030) + _3106;
                        float _4474 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3110 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3111 = 1.0 - _3081;
                        float _3121 = (0.5 / (((_3110 * ((_3096 * _3111) + _3081)) + 9.9999999392252902907785028219223e-09) + (((_3110 * _3111) + _3081) * _3096))) * _3110;
                        float _4485 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3132 = (((_3082 * 3.1415927410125732421875) * (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) / ((_3104 * _3104) * ((_3047 * 2.1991131305694580078125) + 3.141590118408203125))) * _3036;
                        _2884 = (_3051 * _2999.x) + _2957;
                        _2885 = (_3051 * _2999.y) + _2958;
                        _2886 = (_3051 * _2999.z) + _2959;
                        _2881 = (_3132 * _3016.x) + _2954;
                        _2882 = (_3132 * _3016.y) + _2955;
                        _2883 = (_3132 * _3016.z) + _2956;
                        if (_2961 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2954 = _2881;
                            _2955 = _2882;
                            _2956 = _2883;
                            _2957 = _2884;
                            _2958 = _2885;
                            _2959 = _2886;
                            _2960 = _2961;
                        }
                    }
                    frontier_phi_66_pred = _2881;
                    frontier_phi_66_pred_1 = _2886;
                    frontier_phi_66_pred_2 = _2885;
                    frontier_phi_66_pred_3 = _2884;
                    frontier_phi_66_pred_4 = _2883;
                    frontier_phi_66_pred_5 = _2882;
                }
                _2657 = frontier_phi_66_pred;
                _2667 = frontier_phi_66_pred_1;
                _2665 = frontier_phi_66_pred_2;
                _2663 = frontier_phi_66_pred_3;
                _2661 = frontier_phi_66_pred_4;
                _2659 = frontier_phi_66_pred_5;
                uint _2816 = _2815 + 1u;
                if (_2816 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2809 = _2657;
                    _2810 = _2659;
                    _2811 = _2661;
                    _2812 = _2663;
                    _2813 = _2665;
                    _2814 = _2667;
                    _2815 = _2816;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
        }
        uvec4 _2670 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2671 = _2670.z;
        uint _2673 = (_2671 >> 8u) & 15u;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        if (((4294967295u << _2673) & _2555) == 0u)
        {
            _2777 = _2656;
            _2779 = _2658;
            _2781 = _2660;
            _2783 = _2662;
            _2785 = _2664;
            _2787 = _2666;
        }
        else
        {
            float _2802 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
            float _2803 = _2802 * _2509;
            float _2804 = _2802 * _2510;
            float _2805 = _2802 * _2511;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2673 < ((_2671 >> 12u) & 15u))
            {
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2937 = _2656;
                float _2938 = _2658;
                float _2939 = _2660;
                float _2940 = _2662;
                float _2941 = _2664;
                float _2942 = _2666;
                uint _2943 = _2673;
                uint _2952;
                bool _2953;
                for (;;)
                {
                    _2952 = texelFetch(g_lightClassification, int((((_2549 << 5u) + (_2535 << 9u)) + (_2943 << 2u)) >> 2u)).x;
                    _2953 = _2952 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2953)
                    {
                        frontier_phi_77_pred = _2942;
                        frontier_phi_77_pred_1 = _2941;
                        frontier_phi_77_pred_2 = _2940;
                        frontier_phi_77_pred_3 = _2939;
                        frontier_phi_77_pred_4 = _2938;
                        frontier_phi_77_pred_5 = _2937;
                    }
                    else
                    {
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3159 = _2937;
                        float _3160 = _2938;
                        float _3161 = _2939;
                        float _3162 = _2940;
                        float _3163 = _2941;
                        float _3164 = _2942;
                        uint _3165 = _2952;
                        uint _3166;
                        vec4 _3191;
                        float _3192;
                        vec4 _3207;
                        vec3 _3219;
                        vec4 _3234;
                        vec4 _3249;
                        float _3295;
                        bool _3296;
                        for (;;)
                        {
                            uint _3176 = ((_2943 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3165));
                            _3166 = (_3165 + 4294967295u) & _3165;
                            uint _3178 = _3176 * 40u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            _3192 = _3191.w;
                            uint _3194 = (_3176 * 40u) + 4u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3209 = (_3176 * 40u) + 8u;
                            _3219 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x));
                            uint _3221 = (_3176 * 40u) + 16u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3236 = (_3176 * 40u) + 20u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            uint _3251 = (_3176 * 40u) + 24u;
                            vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            uint _3270 = (_3176 * 40u) + 28u;
                            vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            _3295 = fma(_2511, _3283.z, fma(_2510, _3283.y, _3283.x * _2509)) + _3283.w;
                            _3296 = !((fma(_2511, _3264.z, fma(_2510, _3264.y, _3264.x * _2509)) + _3264.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3296)
                            {
                                float _3323 = _3191.x - _2509;
                                float _3324 = _3191.y - _2510;
                                float _3325 = _3191.z - _2511;
                                float _3326 = dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325));
                                float _3329 = inversesqrt(_3326);
                                float _3330 = _3329 * _3323;
                                float _3331 = _3329 * _3324;
                                float _3332 = _3329 * _3325;
                                float _3336 = 1.0 - (_3326 / (_3192 * _3192));
                                float _4496 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3337 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3341 = sqrt(_3326) * _3207.w;
                                float _3343 = 1.39999997615814208984375 / (_3341 + 1.39999997615814208984375);
                                float _3344 = _3343 * _3343;
                                float _3347 = ((1.0 - _3344) * dot(vec3(_3330, _3331, _3332), vec3(_721, _724, _727))) + _3344;
                                float _3350 = _3341 * _3341;
                                float _3354 = (fma(_2511, _3234.z, fma(_2510, _3234.y, _3234.x * _2509)) + _3234.w) / _3295;
                                float _3355 = (fma(_2511, _3249.z, fma(_2510, _3249.y, _3249.x * _2509)) + _3249.w) / _3295;
                                float _3359 = 1.0 - dot(vec2(_3354, _3355), vec2(_3354, _3355));
                                float _4512 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3361 = _3360 * (((isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0))) * _3337) / ((_3350 * 0.699999988079071044921875) + 1.0));
                                float _3373 = exp2(log2(1.0 / ((_3350 * 3.5) + 5.0)) * 0.25);
                                float _3374 = 1.0 - _796;
                                float _3381 = sqrt(1.0 - ((1.0 - (_3374 * _3374)) * (1.0 - (_3373 * _3373))));
                                float _3382 = _3381 * _3381;
                                float _3383 = _3382 * _3382;
                                float _3384 = _3330 - _2803;
                                float _3385 = _3331 - _2804;
                                float _3386 = _3332 - _2805;
                                float _3390 = inversesqrt(dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386)));
                                float _3394 = dot(vec3(_721, _724, _727), vec3((-0.0) - _2803, (-0.0) - _2804, (-0.0) - _2805));
                                float _4523 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3397 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3398 = dot(vec3(_721, _724, _727), vec3(_3390 * _3384, _3390 * _3385, _3390 * _3386));
                                float _4534 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3401 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3405 = ((_3401 * _3401) * (_3383 + (-1.0))) + 1.0;
                                float _3406 = _3343 * _3382;
                                float _3407 = _3406 * _3406;
                                float _3413 = ((1.0 - _3407) * dot(vec3(_721, _724, _727), vec3(_3330, _3331, _3332))) + _3407;
                                float _4545 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3414 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3415 = 1.0 - _3382;
                                float _3425 = (0.5 / (((_3414 * ((_3397 * _3415) + _3382)) + 9.9999999392252902907785028219223e-09) + (((_3414 * _3415) + _3382) * _3397))) * _3414;
                                float _4556 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3435 = (_3360 * _3337) * (((_3383 * 3.1415927410125732421875) * (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) / ((_3405 * _3405) * ((_3350 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3361 * _3207.y;
                                frontier_phi_83_pred_1 = _3361 * _3207.x;
                                frontier_phi_83_pred_2 = _3435 * _3219.z;
                                frontier_phi_83_pred_3 = _3435 * _3219.y;
                                frontier_phi_83_pred_4 = _3435 * _3219.x;
                                frontier_phi_83_pred_5 = _3361 * _3207.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3443 = frontier_phi_83_pred;
                            _3442 = frontier_phi_83_pred_1;
                            _3441 = frontier_phi_83_pred_2;
                            _3440 = frontier_phi_83_pred_3;
                            _3439 = frontier_phi_83_pred_4;
                            _3444 = frontier_phi_83_pred_5;
                            _3149 = _3442 + _3162;
                            _3150 = _3443 + _3163;
                            _3151 = _3444 + _3164;
                            _3146 = _3439 + _3159;
                            _3147 = _3440 + _3160;
                            _3148 = _3441 + _3161;
                            if (_3166 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3166;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3151;
                        frontier_phi_77_pred_1 = _3150;
                        frontier_phi_77_pred_2 = _3149;
                        frontier_phi_77_pred_3 = _3148;
                        frontier_phi_77_pred_4 = _3147;
                        frontier_phi_77_pred_5 = _3146;
                    }
                    _2788 = frontier_phi_77_pred;
                    _2786 = frontier_phi_77_pred_1;
                    _2784 = frontier_phi_77_pred_2;
                    _2782 = frontier_phi_77_pred_3;
                    _2780 = frontier_phi_77_pred_4;
                    _2778 = frontier_phi_77_pred_5;
                    uint _2944 = _2943 + 1u;
                    if (_2944 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2937 = _2778;
                        _2938 = _2780;
                        _2939 = _2782;
                        _2940 = _2784;
                        _2941 = _2786;
                        _2942 = _2788;
                        _2943 = _2944;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2782;
                frontier_phi_58_59_ladder_1 = _2788;
                frontier_phi_58_59_ladder_2 = _2786;
                frontier_phi_58_59_ladder_3 = _2784;
                frontier_phi_58_59_ladder_4 = _2780;
                frontier_phi_58_59_ladder_5 = _2778;
            }
            else
            {
                frontier_phi_58_59_ladder = _2660;
                frontier_phi_58_59_ladder_1 = _2666;
                frontier_phi_58_59_ladder_2 = _2664;
                frontier_phi_58_59_ladder_3 = _2662;
                frontier_phi_58_59_ladder_4 = _2658;
                frontier_phi_58_59_ladder_5 = _2656;
            }
            _2777 = frontier_phi_58_59_ladder_5;
            _2779 = frontier_phi_58_59_ladder_4;
            _2781 = frontier_phi_58_59_ladder;
            _2783 = frontier_phi_58_59_ladder_3;
            _2785 = frontier_phi_58_59_ladder_2;
            _2787 = frontier_phi_58_59_ladder_1;
        }
        float _2792 = isnan(1.0) ? _780 : (isnan(_780) ? 1.0 : min(_780, 1.0));
        _2568 = (_2792 * _2783) + _2001;
        _2570 = (_2792 * _2785) + _2003;
        _2572 = (_2792 * _2787) + _2005;
        _2574 = ((_2777 * _764) * _2792) + _2349;
        _2576 = ((_2779 * _766) * _2792) + _2351;
        _2578 = ((_2781 * _767) * _2792) + _2353;
    }
    else
    {
        _2568 = _2001;
        _2570 = _2003;
        _2572 = _2005;
        _2574 = _2349;
        _2576 = _2351;
        _2578 = _2353;
    }
    float _4572 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4583 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4594 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _2595 = ((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2568 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _780))) + ((_2574 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1619)) * cbPerFrame._m0[3u].x);
    float _2596 = ((isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2570 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _780))) + ((_2576 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1619)) * cbPerFrame._m0[3u].x);
    float _2597 = ((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2572 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _780))) + ((_2578 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1619)) * cbPerFrame._m0[3u].x);
    uint _2598 = _260 + 6u;
    float _2606 = _700 / cbSceneParam._m0[86u].x;
    float _2607 = _701 / cbSceneParam._m0[86u].y;
    vec4 _2621 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2606, _2607, (log2((isnan(cbSceneParam._m0[77u].w) ? _621 : (isnan(_621) ? cbSceneParam._m0[77u].w : min(_621, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2623 = _2621.x;
    float _2624 = _2621.y;
    float _2625 = _2621.z;
    float _2626 = _2621.w;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    if (_621 > cbSceneParam._m0[78u].w)
    {
        float _2681 = isnan(_621) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _621 : min(cbSceneParam._m0[80u].w, _621));
        float _2682 = _2681 / _621;
        float _2693 = _2682 * _672;
        float _2694 = _673 * _2682;
        float _2695 = (-0.0) - _2694;
        float _2697 = _2682 * _674;
        float _2699 = (cbSceneParam._m0[77u].w * _2695) / _2681;
        float _2700 = _2699 + cbSceneParam._m0[79u].w;
        float _2701 = cbSceneParam._m0[79u].w - _2694;
        float _2707 = sqrt(((_2693 * _2693) + (_2694 * _2694)) + (_2697 * _2697));
        float _2710 = (1.0 - (cbSceneParam._m0[77u].w / _2681)) * _2707;
        float _2715 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2717 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2894;
        if (abs((_2695 - _2699) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2894 = ((((_2700 > 0.0) ? exp2(_2715 * _2700) : (2.0 - exp2(_2717 * _2700))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2710;
        }
        else
        {
            float _2838 = 1.0 / cbSceneParam._m0[80u].x;
            float _2839 = isnan(_2701) ? _2700 : (isnan(_2700) ? _2701 : max(_2700, _2701));
            float _2840 = isnan(_2701) ? _2700 : (isnan(_2700) ? _2701 : min(_2700, _2701));
            float _2849 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : min(_2839, 0.0));
            float _2850 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : min(_2840, 0.0));
            _2894 = ((abs(_2707 / _2695) * cbSceneParam._m0[80u].y) * ((((_2849 - _2850) * 2.0) - ((exp2(_2715 * (isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0)))) - exp2(_2715 * (isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0))))) * _2838)) - ((exp2(_2717 * _2849) - exp2(_2717 * _2850)) * _2838))) + (_2710 * cbSceneParam._m0[80u].z);
        }
        vec4 _2896 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2606, _2607, 1.0), 0.0);
        float _2905 = exp2((_2894 * (-1.44269502162933349609375)) * (1.0 - _2896.w));
        float _2906 = log2(_2905);
        float _2922 = log2(_2626);
        _2719 = (exp2(_2922 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].x)) * _2896.x) / cbSceneParam._m0[78u].x)) + _2623;
        _2721 = (exp2(_2922 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].y)) * _2896.y) / cbSceneParam._m0[78u].y)) + _2624;
        _2723 = (exp2(_2922 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].z)) * _2896.z) / cbSceneParam._m0[78u].z)) + _2625;
        _2725 = _2905 * _2626;
    }
    else
    {
        _2719 = _2623;
        _2721 = _2624;
        _2723 = _2625;
        _2725 = _2626;
    }
    bool _2932;
    vec4 _2735;
    vec4 _2757;
    float _2759;
    float _2763;
    float _2764;
    float _2765;
    float _2766;
    bool _2776;
    for (;;)
    {
        _2735 = cbMatDynParam._m0[0u];
        float _2737 = roundEven(_2735.y);
        bool _2738 = _2737 == 3.0;
        float _2739 = log2(_2725);
        float _2746 = exp2(_2739 * cbSceneParam._m0[78u].x) * _2595;
        float _2747 = exp2(_2739 * cbSceneParam._m0[78u].y) * _2596;
        float _2748 = exp2(_2739 * cbSceneParam._m0[78u].z) * _2597;
        float _2755 = _688 + (-0.5);
        _2757 = cbMtdParam._m0[1u];
        _2759 = _2757.y * _2755;
        float _2762 = (_2737 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2763 = _2762 * (_2738 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2719)));
        _2764 = _2762 * (_2738 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2721)));
        _2765 = _2762 * (_2738 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2723)));
        _2766 = _2755 * 0.999000012874603271484375;
        _2776 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2776)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _2766) < 0.5)
            {
                _2932 = true;
                break;
            }
        }
        uint _2873 = _740 + uint(_2735.w);
        if ((cbInstanceData._m0[_2873].w < 1.0) && ((cbInstanceData._m0[_2873].w + _2766) < 0.5))
        {
            _2932 = true;
            break;
        }
        if ((_2759 + 1.0) < _2757.x)
        {
            _2932 = true;
            break;
        }
        _2932 = false;
        break;
    }
    float _3137;
    if (_2932)
    {
        discard_state = true;
        _3137 = 0.0;
    }
    else
    {
        _3137 = cbInstanceData._m0[_2598].w;
    }
    SV_Target.x = _2763;
    SV_Target.y = _2764;
    SV_Target.z = _2765;
    SV_Target.w = _3137;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2598].w;
    discard_exit();
}


