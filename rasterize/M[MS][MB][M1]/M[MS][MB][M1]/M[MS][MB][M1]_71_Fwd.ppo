#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1264;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3593 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3604 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3615 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _406 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_394 - _406) * cbMtdParam._m0[24u].y) + _406) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3626 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _431 = (_424 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _432 = (_424 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _433 = (_424 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    float _437 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _431;
    float _440 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _432;
    float _443 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _433;
    float _450 = ((_431 - _437) * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) + _437;
    float _451 = ((_432 - _440) * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) + _440;
    float _452 = ((_433 - _443) * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) + _443;
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _509 = _507.x;
    float _510 = _507.y;
    float _511 = _507.z;
    float _520 = ((_490.z - _511) * _424) + _511;
    float _523 = ((((_490.x - _509) * _424) + _509) * 2.0) + (-1.0);
    float _524 = ((((_490.y - _510) * _424) + _510) * 2.0) + (-1.0);
    float _525 = dot(vec2(_523, _524), vec2(_523, _524));
    float _3637 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _530 = sqrt(1.0 - (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))));
    float _535 = _523 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_465.x * 2.0) + (-1.0)));
    float _536 = _524 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_465.y * 2.0) + (-1.0)));
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _563 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _565 = _563.x;
    float _566 = 1.0 - _565;
    float _592 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_565 - _566) * cbMtdParam._m0[24u].w) + _566) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3648 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _601 = ((((cbMtdParam._m0[10u].x - _450) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _593) + _450;
    float _602 = ((((cbMtdParam._m0[10u].y - _451) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _593) + _451;
    float _603 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _452)) * _593) + _452;
    vec4 _615 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _631 = _629.x;
    float _649 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _292) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _293) + cbTextureTilingScale._m0[9u].w)).x - _631) * _424) + _631;
    float _653 = ((_615.x - _649) * cbMtdParam._m0[19u].z) + _649;
    float _655 = _653 - (_653 * _593);
    float _660 = (((_465.z - _520) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _520;
    float _664 = ((cbMtdParam._m0[23u].y - _660) * _593) + _660;
    vec4 _683 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _689 = (_683.x * 2.0) + (-1.0);
    float _690 = (_683.y * 2.0) + (-1.0);
    float _691 = dot(vec2(_689, _690), vec2(_689, _690));
    float _3659 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _707 = (_593 * (((cbMtdParam._m0[22u].z * _535) - _535) + _689)) + _535;
    float _708 = (_593 * (((cbMtdParam._m0[22u].z * _536) - _536) + _690)) + _536;
    float _709 = (_593 * (sqrt(1.0 - (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) - _530)) + _530;
    float _711 = cbMtdParam._m0[22u].x + _549.w;
    float _714 = fma(_709, _241 * NORMAL.x, fma(_708, _248 * TANGENT.x, (_234 * _226) * _707));
    float _717 = fma(_709, _241 * NORMAL.y, fma(_708, _248 * TANGENT.y, (_234 * _227) * _707));
    float _720 = fma(_709, _241 * NORMAL.z, fma(_708, _248 * TANGENT.z, (_234 * _228) * _707));
    float _724 = inversesqrt(dot(vec3(_714, _717, _720), vec3(_714, _717, _720)));
    float _725 = _724 * _714;
    float _726 = _724 * _717;
    float _727 = _724 * _720;
    float _3670 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _728 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3692 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3703 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3714 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3725 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _733 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _747 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _797 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _787);
    float _798 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _787);
    float _799 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _787);
    float _803 = inversesqrt(dot(vec3(_797, _798, _799), vec3(_797, _798, _799)));
    float _804 = _797 * _803;
    float _805 = _798 * _803;
    float _806 = _799 * _803;
    float _812 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _813 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _831 = fma(_727, cbSceneParam._m0[5u].z, fma(_726, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _725));
    float _834 = fma(_727, cbSceneParam._m0[6u].z, fma(_726, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _725));
    float _837 = fma(_727, cbSceneParam._m0[7u].z, fma(_726, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _725));
    uint _851 = (_273 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _857 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_851].x;
    float _858 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) * cbInstanceData._m0[_851].y;
    float _859 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_851].z;
    float _3736 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _863 = 1.0 - _733;
    float _864 = _860 * _863;
    float _865 = _861 * _863;
    float _866 = _862 * _863;
    float _871 = (_860 + (-0.039999999105930328369140625)) * _733;
    float _872 = (_861 + (-0.039999999105930328369140625)) * _733;
    float _873 = (_862 + (-0.039999999105930328369140625)) * _733;
    float _874 = _871 + 0.039999999105930328369140625;
    float _876 = _872 + 0.039999999105930328369140625;
    float _877 = _873 + 0.039999999105930328369140625;
    vec4 _886 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _812, cbSceneParam._m0[86u].y * _813));
    float _890 = ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * TEXCOORD_5.w) * _886.x;
    float _891 = dot(vec3(_725, _726, _727), vec3(_804, _805, _806));
    float _894 = _891 * 2.0;
    float _898 = (_894 * _725) - _804;
    float _899 = (_894 * _726) - _805;
    float _900 = (_894 * _727) - _806;
    float _904 = abs(dot(vec3(_804, _805, _806), vec3(_725, _726, _727)));
    float _3769 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _906 = sqrt(_728);
    float _919 = exp2((_906 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_906 * 3.0));
    float _925 = (1.0 - _919) * ((_906 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _926 = _919 * _906;
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1263;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _988 = fma(_962, cbModelParam._m0[26u].z, fma(_958, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954));
        float _992 = fma(_962, cbModelParam._m0[27u].z, fma(_958, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954));
        float _996 = fma(_962, cbModelParam._m0[28u].z, fma(_958, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954));
        float _1021 = _954 + _725;
        float _1022 = _958 + _726;
        float _1023 = _962 + _727;
        float _1033 = fma(_1023, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1021)) - _988;
        float _1034 = fma(_1023, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1021)) - _992;
        float _1035 = fma(_1023, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1021)) - _996;
        float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
        float _1052 = ((_1039 * _1033) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_988 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1039 * _1034) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_992 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1039 * _1035) / cbModelParam._m0[34u].z) + ((((((_996 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        float _1091 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1057.x + (-0.5));
        float _1093 = _1091 * (_1057.y + (-0.5));
        float _1094 = _1091 * (_1057.z + (-0.5));
        float _1101 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1064.x + (-0.5));
        float _1103 = _1101 * (_1064.y + (-0.5));
        float _1104 = _1101 * (_1064.z + (-0.5));
        float _1111 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1071.x + (-0.5));
        float _1113 = _1111 * (_1071.y + (-0.5));
        float _1114 = _1111 * (_1071.z + (-0.5));
        float _1121 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1078.x + (-0.5));
        float _1123 = _1121 * (_1078.y + (-0.5));
        float _1124 = _1121 * (_1078.z + (-0.5));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = _1092 * 0.5;
        float _1129 = _1102 * 0.5;
        float _1130 = _1112 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1145 = (dot(vec3(_725, _726, _727), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1155 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3817 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1157 + 1.0))) + _1162) * _1125;
        float _1172 = _1093 * 0.5;
        float _1173 = _1103 * 0.5;
        float _1174 = _1113 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_725, _726, _727), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3850 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1199 + 1.0))) + _1204) * _1126;
        float _1214 = _1094 * 0.5;
        float _1215 = _1104 * 0.5;
        float _1216 = _1114 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_725, _726, _727), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3883 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1241 + 1.0))) + _1246) * _1127;
        _1263 = _1094;
        _1265 = _1093;
        _1266 = _1092;
        _1267 = _1104;
        _1268 = _1103;
        _1269 = _1102;
        _1270 = _1114;
        _1271 = _1113;
        _1272 = _1112;
        _1273 = _1127;
        _1274 = _1126;
        _1275 = _1125;
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
    }
    else
    {
        _1263 = _1264;
        _1265 = _1264;
        _1266 = _1264;
        _1267 = _1264;
        _1268 = _1264;
        _1269 = _1264;
        _1270 = _1264;
        _1271 = _1264;
        _1272 = _1264;
        _1273 = _1264;
        _1274 = _1264;
        _1275 = _1264;
        _1276 = 0.0;
        _1277 = 0.0;
        _1278 = 0.0;
    }
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1303 = fma(_962, cbModelParam._m0[30u].z, fma(_958, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954));
        float _1307 = fma(_962, cbModelParam._m0[31u].z, fma(_958, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954));
        float _1311 = fma(_962, cbModelParam._m0[32u].z, fma(_958, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954));
        float _1334 = _954 + _725;
        float _1335 = _958 + _726;
        float _1336 = _962 + _727;
        float _1346 = fma(_1336, cbModelParam._m0[30u].z, fma(_1335, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1334)) - _1303;
        float _1347 = fma(_1336, cbModelParam._m0[31u].z, fma(_1335, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1334)) - _1307;
        float _1348 = fma(_1336, cbModelParam._m0[32u].z, fma(_1335, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1334)) - _1311;
        float _1352 = inversesqrt(dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348)));
        float _1365 = ((_1352 * _1346) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1303 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1352 * _1347) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1307 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1352 * _1348) / cbModelParam._m0[35u].z) + ((((((_1311 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        float _1402 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1369.x + (-0.5));
        float _1404 = _1402 * (_1369.y + (-0.5));
        float _1405 = _1402 * (_1369.z + (-0.5));
        float _1412 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1376.x + (-0.5));
        float _1414 = _1412 * (_1376.y + (-0.5));
        float _1415 = _1412 * (_1376.z + (-0.5));
        float _1422 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1383.x + (-0.5));
        float _1424 = _1422 * (_1383.y + (-0.5));
        float _1425 = _1422 * (_1383.z + (-0.5));
        float _1432 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1390.x + (-0.5));
        float _1434 = _1432 * (_1390.y + (-0.5));
        float _1435 = _1432 * (_1390.z + (-0.5));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = _1403 * 0.5;
        float _1440 = _1413 * 0.5;
        float _1441 = _1423 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_725, _726, _727), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _3946 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1466 + 1.0))) + _1471) * _1436;
        float _1481 = _1404 * 0.5;
        float _1482 = _1414 * 0.5;
        float _1483 = _1424 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_725, _726, _727), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _3979 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1508 + 1.0))) + _1513) * _1437;
        float _1523 = _1405 * 0.5;
        float _1524 = _1415 * 0.5;
        float _1525 = _1425 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_725, _726, _727), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4012 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1550 + 1.0))) + _1555) * _1438;
        _1572 = _1405;
        _1573 = _1404;
        _1574 = _1403;
        _1575 = _1415;
        _1576 = _1414;
        _1577 = _1413;
        _1578 = _1425;
        _1579 = _1424;
        _1580 = _1423;
        _1581 = _1438;
        _1582 = _1437;
        _1583 = _1436;
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
    }
    else
    {
        _1572 = _1264;
        _1573 = _1264;
        _1574 = _1264;
        _1575 = _1264;
        _1576 = _1264;
        _1577 = _1264;
        _1578 = _1264;
        _1579 = _1264;
        _1580 = _1264;
        _1581 = _1264;
        _1582 = _1264;
        _1583 = _1264;
        _1584 = 0.0;
        _1585 = 0.0;
        _1586 = 0.0;
    }
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1276)) + _1276;
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1277)) + _1277;
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1278)) + _1278;
    float _1619 = fma(_1598, cbSceneParam._m0[89u].z, fma(_1597, cbSceneParam._m0[89u].y, _1596 * cbSceneParam._m0[89u].x));
    float _1622 = fma(_1598, cbSceneParam._m0[90u].z, fma(_1597, cbSceneParam._m0[90u].y, _1596 * cbSceneParam._m0[90u].x));
    float _1625 = fma(_1598, cbSceneParam._m0[91u].z, fma(_1597, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1596));
    float _1640 = _898 * 0.5;
    float _1641 = _899 * 0.5;
    float _1642 = _900 * 0.5;
    float _1643 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1646 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1649 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1683;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1656 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1263, _1267, _1270, _1273));
        float _1660 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1664 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1266, _1269, _1272, _1275));
        float _1671 = dot(vec4(cbModelParam._m0[39u]), vec4(_1640, _1641, _1642, 1.0));
        _1683 = dot(vec3(isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1671) ? 0.0 : (isnan(0.0) ? _1671 : max(0.0, _1671))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1683 = 1.0;
    }
    float _1694;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1685 = dot(vec4(cbModelParam._m0[40u]), vec4(_1640, _1641, _1642, 1.0));
        _1694 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1685) ? 0.0 : (isnan(0.0) ? _1685 : max(0.0, _1685))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1694 = 1.0;
    }
    float _1698 = (_1694 * cbModelParam._m0[1u].x) + (_1683 * (1.0 - cbModelParam._m0[1u].x));
    float _1708 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _728);
    float _1709 = isnan(_1708) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1708 : min(cbModelParam._m0[25u].z, _1708));
    float _1791;
    float _1793;
    float _1795;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1758 = fma(_962, cbModelParam._m0[13u].z, fma(_958, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _954)) + cbModelParam._m0[13u].w;
        float _1762 = fma(_962, cbModelParam._m0[14u].z, fma(_958, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _954)) + cbModelParam._m0[14u].w;
        float _1766 = fma(_962, cbModelParam._m0[15u].z, fma(_958, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _954)) + cbModelParam._m0[15u].w;
        float _1769 = fma(_900, cbModelParam._m0[13u].z, fma(_899, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898));
        float _1772 = fma(_900, cbModelParam._m0[14u].z, fma(_899, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898));
        float _1775 = fma(_900, cbModelParam._m0[15u].z, fma(_899, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898));
        float _1803;
        if (_1769 > 0.0)
        {
            _1803 = abs((1.0 - _1758) / _1769);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1758 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1803 = frontier_phi_14_12_ladder;
        }
        float _2007;
        if (_1772 > 0.0)
        {
            _2007 = abs((1.0 - _1762) / _1772);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1762 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2007 = frontier_phi_23_19_ladder;
        }
        float _2261;
        if (_1775 > 0.0)
        {
            _2261 = abs((1.0 - _1766) / _1775);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1766 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2261 = frontier_phi_35_30_ladder;
        }
        float _2263 = isnan(_2007) ? _1803 : (isnan(_1803) ? _2007 : min(_1803, _2007));
        float _2264 = isnan(_2261) ? _2263 : (isnan(_2263) ? _2261 : min(_2263, _2261));
        float _2268 = (_2264 * _1769) + _1758;
        float _2269 = (_2264 * _1772) + _1762;
        float _2270 = (_2264 * _1775) + _1766;
        float _2271 = _2264 * 9.9999997473787516355514526367188e-05;
        float _2273 = (-1.0) - _2271;
        float _2275 = _2271 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2270 > _2275) || ((_2270 < _2273) || ((_2269 > _2275) || ((_2269 < _2273) || ((_2268 < _2273) || (_2268 > _2275))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2270, cbModelParam._m0[9u].z, fma(_2269, cbModelParam._m0[9u].y, _2268 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2270, cbModelParam._m0[10u].z, fma(_2269, cbModelParam._m0[10u].y, _2268 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2270, cbModelParam._m0[11u].z, fma(_2269, cbModelParam._m0[11u].y, _2268 * cbModelParam._m0[11u].x))), _1709);
            frontier_phi_13_35_ladder = _2398.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2398.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2398.x * cbModelParam._m0[1u].y;
        }
        _1791 = frontier_phi_13_35_ladder_2;
        _1793 = frontier_phi_13_35_ladder_1;
        _1795 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1779 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_898, _899, _900), _1709);
        _1791 = _1779.x * cbModelParam._m0[1u].y;
        _1793 = _1779.y * cbModelParam._m0[1u].y;
        _1795 = _1779.z * cbModelParam._m0[1u].y;
    }
    float _1799 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _728);
    float _1800 = isnan(_1799) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1799 : min(cbModelParam._m0[25u].w, _1799));
    float _1891;
    float _1893;
    float _1895;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1855 = fma(_962, cbModelParam._m0[21u].z, fma(_958, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _954)) + cbModelParam._m0[21u].w;
        float _1859 = fma(_962, cbModelParam._m0[22u].z, fma(_958, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _954)) + cbModelParam._m0[22u].w;
        float _1863 = fma(_962, cbModelParam._m0[23u].z, fma(_958, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _954)) + cbModelParam._m0[23u].w;
        float _1866 = fma(_900, cbModelParam._m0[21u].z, fma(_899, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898));
        float _1869 = fma(_900, cbModelParam._m0[22u].z, fma(_899, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898));
        float _1872 = fma(_900, cbModelParam._m0[23u].z, fma(_899, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898));
        float _2012;
        if (_1866 > 0.0)
        {
            _2012 = abs((1.0 - _1855) / _1866);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1855 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2012 = frontier_phi_25_21_ladder;
        }
        float _2288;
        if (_1869 > 0.0)
        {
            _2288 = abs((1.0 - _1859) / _1869);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1859 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2288 = frontier_phi_37_32_ladder;
        }
        float _2501;
        if (_1872 > 0.0)
        {
            _2501 = abs((1.0 - _1863) / _1872);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1863 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2501 = frontier_phi_46_43_ladder;
        }
        float _2503 = isnan(_2288) ? _2012 : (isnan(_2012) ? _2288 : min(_2012, _2288));
        float _2504 = isnan(_2501) ? _2503 : (isnan(_2503) ? _2501 : min(_2503, _2501));
        float _2508 = (_2504 * _1866) + _1855;
        float _2509 = (_2504 * _1869) + _1859;
        float _2510 = (_2504 * _1872) + _1863;
        float _2511 = _2504 * 9.9999997473787516355514526367188e-05;
        float _2512 = (-1.0) - _2511;
        float _2514 = _2511 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2510 > _2514) || ((_2510 < _2512) || ((_2509 > _2514) || ((_2509 < _2512) || ((_2508 < _2512) || (_2508 > _2514))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2510, cbModelParam._m0[17u].z, fma(_2509, cbModelParam._m0[17u].y, _2508 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2510, cbModelParam._m0[18u].z, fma(_2509, cbModelParam._m0[18u].y, _2508 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2510, cbModelParam._m0[19u].z, fma(_2509, cbModelParam._m0[19u].y, _2508 * cbModelParam._m0[19u].x))), _1800);
            frontier_phi_22_46_ladder = _2709.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2709.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2709.x * cbModelParam._m0[1u].z;
        }
        _1891 = frontier_phi_22_46_ladder_2;
        _1893 = frontier_phi_22_46_ladder_1;
        _1895 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_898, _899, _900), _1800);
        _1891 = _1875.x * cbModelParam._m0[1u].z;
        _1893 = _1875.y * cbModelParam._m0[1u].z;
        _1895 = _1875.z * cbModelParam._m0[1u].z;
    }
    float _1908 = (((_925 * _874) + _926) * _890) * ((cbModelParam._m0[1u].w * (_1891 - _1791)) + _1791);
    float _1910 = (((_925 * _876) + _926) * _890) * ((cbModelParam._m0[1u].w * (_1893 - _1793)) + _1793);
    float _1912 = (((_925 * _877) + _926) * _890) * ((cbModelParam._m0[1u].w * (_1895 - _1795)) + _1795);
    float _1915 = fma(_1912, cbSceneParam._m0[89u].z, fma(_1910, cbSceneParam._m0[89u].y, _1908 * cbSceneParam._m0[89u].x));
    float _1918 = fma(_1912, cbSceneParam._m0[90u].z, fma(_1910, cbSceneParam._m0[90u].y, _1908 * cbSceneParam._m0[90u].x));
    float _1921 = fma(_1912, cbSceneParam._m0[91u].z, fma(_1910, cbSceneParam._m0[91u].y, _1908 * cbSceneParam._m0[91u].x));
    uvec4 _1931 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _1933 = _1931.x * 14u;
    uint _1934 = _1933 + 13u;
    float _1941 = _890 + (-1.0);
    float _1946 = (cbLight._m0[_1934].x * _1941) + 1.0;
    float _1947 = (cbLight._m0[_1934].y * _1941) + 1.0;
    float _1948 = (cbLight._m0[_1934].z * _1941) + 1.0;
    float _1949 = (cbLight._m0[_1934].w * _1941) + 1.0;
    uint _1950 = _1933 + 5u;
    float _1956 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
    uint _1960 = _1933 + 4u;
    float _1966 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
    uint _1970 = _1933 | 1u;
    float _1981 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_725, _726, _727));
    float _1984 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_725, _726, _727));
    float _4148 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _4159 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1989 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.3183098733425140380859375;
    float _1991 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * 0.3183098733425140380859375;
    float _1998 = ((cbLight._m0[_1950].x * _1956) * _1991) + ((cbLight._m0[_1960].x * _1966) * _1989);
    float _1999 = ((_1956 * cbLight._m0[_1950].y) * _1991) + ((_1966 * cbLight._m0[_1960].y) * _1989);
    float _2000 = ((_1956 * cbLight._m0[_1950].z) * _1991) + ((_1966 * cbLight._m0[_1960].z) * _1989);
    uvec4 _2004 = floatBitsToUint(cbLight._m0[_1933 + 12u]);
    bool _2006 = _2004.x == 0u;
    float _2017;
    float _2019;
    float _2021;
    if (_2006)
    {
        _2017 = _1998;
        _2019 = _1999;
        _2021 = _2000;
    }
    else
    {
        uint _2025 = _1933 + 6u;
        float _2041 = (dot(vec3(cbLight._m0[_1933 + 2u].xyz), vec3(_725, _726, _727)) * 0.5) + 0.5;
        float _2042 = _2041 * _2041;
        float _4170 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2043 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2044 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2017 = (((cbLight._m0[_2025].x * 0.3183098733425140380859375) * _2043) * _2044) + _1998;
        _2019 = (((cbLight._m0[_2025].y * 0.3183098733425140380859375) * _2043) * _2044) + _1999;
        _2021 = (((cbLight._m0[_2025].z * 0.3183098733425140380859375) * _2043) * _2044) + _2000;
    }
    bool _2024 = _2004.y == 0u;
    float _2062;
    float _2064;
    float _2066;
    if (_2024)
    {
        _2062 = _2017;
        _2064 = _2019;
        _2066 = _2021;
    }
    else
    {
        uint _2232 = _1933 + 7u;
        float _2248 = (dot(vec3(cbLight._m0[_1933 + 3u].xyz), vec3(_725, _726, _727)) * 0.5) + 0.5;
        float _2249 = _2248 * _2248;
        float _4186 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2250 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2251 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2062 = (((cbLight._m0[_2232].x * 0.3183098733425140380859375) * _2250) * _2251) + _2017;
        _2064 = (((cbLight._m0[_2232].y * 0.3183098733425140380859375) * _2250) * _2251) + _2019;
        _2066 = (((cbLight._m0[_2232].z * 0.3183098733425140380859375) * _2250) * _2251) + _2021;
    }
    uint _2069 = _1933 + 8u;
    float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1933].w)) * _728) * 0.949999988079071044921875);
    float _2083 = _2082 * _2082;
    float _2084 = cbLight._m0[_1933].x + _804;
    float _2085 = cbLight._m0[_1933].y + _805;
    float _2086 = cbLight._m0[_1933].z + _806;
    float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
    float _2091 = _2090 * _2084;
    float _2092 = _2090 * _2085;
    float _2093 = _2090 * _2086;
    float _2094 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_1933].xyz));
    float _4202 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _2098 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2099 = dot(vec3(_725, _726, _727), vec3(_2091, _2092, _2093));
    float _4224 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2103 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_2091, _2092, _2093));
    float _4235 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2107 = _2083 * _2083;
    float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
    float _2119 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
    float _2120 = 0.959999978542327880859375 - _871;
    float _2122 = 0.959999978542327880859375 - _872;
    float _2123 = 0.959999978542327880859375 - _873;
    float _2130 = 1.0 - _2083;
    float _2141 = (0.5 / (((_2098 * ((_2097 * _2130) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2130) + _2083) * _2097))) * _2097;
    float _4246 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2143 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
    uint _2154 = _1933 + 9u;
    float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _728) * 0.949999988079071044921875);
    float _2166 = _2165 * _2165;
    float _2167 = cbLight._m0[_1970].x + _804;
    float _2168 = cbLight._m0[_1970].y + _805;
    float _2169 = cbLight._m0[_1970].z + _806;
    float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
    float _2174 = _2173 * _2167;
    float _2175 = _2173 * _2168;
    float _2176 = _2173 * _2169;
    float _2177 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_1970].xyz));
    float _4257 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2181 = dot(vec3(_725, _726, _727), vec3(_2174, _2175, _2176));
    float _4268 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2185 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2174, _2175, _2176));
    float _4279 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2189 = _2166 * _2166;
    float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
    float _2200 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
    float _2207 = 1.0 - _2166;
    float _2217 = (0.5 / (((_2098 * ((_2180 * _2207) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2207) + _2166) * _2180))) * _2180;
    float _4290 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2219 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
    float _2229 = (((((_2200 * _2120) + _874) * cbLight._m0[_2154].x) * _2219) * _1956) + (((((_2119 * _2120) + _874) * cbLight._m0[_2069].x) * _2143) * _1966);
    float _2230 = (((((_2200 * _2122) + _876) * cbLight._m0[_2154].y) * _2219) * _1956) + (((((_2119 * _2122) + _876) * cbLight._m0[_2069].y) * _2143) * _1966);
    float _2231 = (((((_2200 * _2123) + _877) * cbLight._m0[_2154].z) * _2219) * _1956) + (((((_2119 * _2123) + _877) * cbLight._m0[_2069].z) * _2143) * _1966);
    float _2293;
    float _2295;
    float _2297;
    if (_2006)
    {
        _2293 = _2229;
        _2295 = _2230;
        _2297 = _2231;
    }
    else
    {
        uint _2299 = _1933 + 2u;
        uint _2303 = _1933 + 10u;
        float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _728) * 0.949999988079071044921875);
        float _2318 = _2317 * _2317;
        float _2319 = cbLight._m0[_2299].x + _804;
        float _2320 = cbLight._m0[_2299].y + _805;
        float _2321 = cbLight._m0[_2299].z + _806;
        float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
        float _2326 = _2325 * _2319;
        float _2327 = _2325 * _2320;
        float _2328 = _2325 * _2321;
        float _2329 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_2299].xyz));
        float _4301 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2332 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2333 = dot(vec3(_725, _726, _727), vec3(_2326, _2327, _2328));
        float _4312 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2336 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2337 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2326, _2327, _2328));
        float _4323 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2341 = _2318 * _2318;
        float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
        float _2352 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
        float _2359 = 1.0 - _2318;
        float _2369 = (0.5 / (((_2098 * ((_2332 * _2359) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2359) + _2318) * _2332))) * _2332;
        float _4334 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2371 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
        float _2372 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2293 = (((((_2352 * _2120) + _874) * cbLight._m0[_2303].x) * _2371) * _2372) + _2229;
        _2295 = (((((_2352 * _2122) + _876) * cbLight._m0[_2303].y) * _2371) * _2372) + _2230;
        _2297 = (((((_2352 * _2123) + _877) * cbLight._m0[_2303].z) * _2371) * _2372) + _2231;
    }
    float _2407;
    float _2409;
    float _2411;
    if (_2024)
    {
        _2407 = _2293;
        _2409 = _2295;
        _2411 = _2297;
    }
    else
    {
        uint _2418 = _1933 + 3u;
        uint _2422 = _1933 + 11u;
        float _2436 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2418].w)) * _728) * 0.949999988079071044921875);
        float _2437 = _2436 * _2436;
        float _2438 = cbLight._m0[_2418].x + _804;
        float _2439 = cbLight._m0[_2418].y + _805;
        float _2440 = cbLight._m0[_2418].z + _806;
        float _2444 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
        float _2445 = _2444 * _2438;
        float _2446 = _2444 * _2439;
        float _2447 = _2444 * _2440;
        float _2448 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_2418].xyz));
        float _4350 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2451 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2452 = dot(vec3(_725, _726, _727), vec3(_2445, _2446, _2447));
        float _4361 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2456 = dot(vec3(cbLight._m0[_2418].xyz), vec3(_2445, _2446, _2447));
        float _4372 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2460 = _2437 * _2437;
        float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
        float _2471 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
        float _2478 = 1.0 - _2437;
        float _2488 = (0.5 / (((_2098 * ((_2451 * _2478) + _2437)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2478) + _2437) * _2451))) * _2451;
        float _4383 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2490 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
        float _2491 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2407 = (((((_2471 * _2120) + _874) * cbLight._m0[_2422].x) * _2490) * _2491) + _2293;
        _2409 = (((((_2471 * _2122) + _876) * cbLight._m0[_2422].y) * _2490) * _2491) + _2295;
        _2411 = (((((_2471 * _2123) + _877) * cbLight._m0[_2422].z) * _2490) * _2491) + _2297;
    }
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    if (_1931.y == 0u)
    {
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2566;
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2566;
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2566;
        uvec4 _2581 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2582 = _2581.x;
        uint _2593 = uint((float(_2581.y) * floor(float(uint(cbSceneParam._m0[85u].y * _813) / _2582))) + floor(float(uint(cbSceneParam._m0[85u].x * _812) / _2582)));
        float _2603 = (log2(_2569 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2604 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        uint _2607 = uint(isnan(14.0) ? _2604 : (isnan(_2604) ? 14.0 : min(_2604, 14.0)));
        uvec4 _2612 = texelFetch(g_lightClusterGridBuffer, int(((_2607 << 2u) + (_2593 << 6u)) >> 2u));
        uint _2613 = _2612.x;
        uint _2614 = _2581.z;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        if (((((1u << ((_2614 >> 4u) & 15u)) + 4294967295u) & _2613) == 0u) || ((_2614 & 240u) == 0u))
        {
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
        }
        else
        {
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            uint _2865 = 0u;
            uint _2874;
            bool _2875;
            for (;;)
            {
                _2874 = texelFetch(g_lightClassification, int((((_2607 << 5u) + (_2593 << 9u)) + (_2865 << 2u)) >> 2u)).x;
                _2875 = _2874 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2875)
                {
                    frontier_phi_61_pred = _2859;
                    frontier_phi_61_pred_1 = _2864;
                    frontier_phi_61_pred_2 = _2863;
                    frontier_phi_61_pred_3 = _2862;
                    frontier_phi_61_pred_4 = _2861;
                    frontier_phi_61_pred_5 = _2860;
                }
                else
                {
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    uint _2989;
                    _2983 = _2859;
                    _2984 = _2860;
                    _2985 = _2861;
                    _2986 = _2862;
                    _2987 = _2863;
                    _2988 = _2864;
                    _2989 = _2874;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    for (;;)
                    {
                        uint _2993 = uint(findLSB(_2989)) + (_2865 << 5u);
                        uint _2990 = (_2989 + 4294967295u) & _2989;
                        uint _2995 = _2993 * 48u;
                        vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 3u)).x));
                        uint _3015 = (_2993 * 48u) + 4u;
                        vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3015)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 3u)).x));
                        uint _3034 = (_2993 * 48u) + 8u;
                        vec3 _3045 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x));
                        float _3049 = _3009.x - _2567;
                        float _3050 = _3009.y - _2568;
                        float _3051 = _3009.z - _2569;
                        float _3052 = dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051));
                        float _3055 = inversesqrt(_3052);
                        float _3056 = _3055 * _3049;
                        float _3057 = _3055 * _3050;
                        float _3058 = _3055 * _3051;
                        float _3059 = dot(vec3(_831, _834, _837), vec3(_3056, _3057, _3058));
                        float _3064 = 1.0 - (_3052 * _3009.w);
                        float _4409 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3065 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3066 = sqrt(_3052) * _3028.w;
                        float _3069 = 1.39999997615814208984375 / (_3066 + 1.39999997615814208984375);
                        float _3070 = _3069 * _3069;
                        float _3073 = ((1.0 - _3070) * _3059) + _3070;
                        float _3076 = _3066 * _3066;
                        float _3080 = ((isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))) * _3065) / ((_3076 * 0.699999988079071044921875) + 1.0);
                        float _3084 = (-0.0) - _2567;
                        float _3085 = (-0.0) - _2568;
                        float _3086 = (-0.0) - _2569;
                        float _3090 = inversesqrt(dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086)));
                        float _3091 = _3090 * _3084;
                        float _3092 = _3090 * _3085;
                        float _3093 = _3090 * _3086;
                        float _3101 = exp2(log2(1.0 / ((_3076 * 3.5) + 5.0)) * 0.25);
                        float _3102 = 1.0 - _906;
                        float _3109 = sqrt(1.0 - ((1.0 - (_3102 * _3102)) * (1.0 - (_3101 * _3101))));
                        float _3110 = _3109 * _3109;
                        float _3111 = _3110 * _3110;
                        float _3112 = _3091 + _3056;
                        float _3113 = _3092 + _3057;
                        float _3114 = _3093 + _3058;
                        float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
                        float _3122 = dot(vec3(_831, _834, _837), vec3(_3091, _3092, _3093));
                        float _4425 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3125 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3126 = dot(vec3(_831, _834, _837), vec3(_3118 * _3112, _3118 * _3113, _3118 * _3114));
                        float _4436 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3129 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3133 = ((_3129 * _3129) * (_3111 + (-1.0))) + 1.0;
                        float _3134 = _3069 * _3110;
                        float _3135 = _3134 * _3134;
                        float _3138 = ((1.0 - _3135) * _3059) + _3135;
                        float _4447 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3139 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3140 = 1.0 - _3110;
                        float _3150 = (0.5 / (((_3139 * ((_3125 * _3140) + _3110)) + 9.9999999392252902907785028219223e-09) + (((_3139 * _3140) + _3110) * _3125))) * _3139;
                        float _4458 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3161 = (((_3111 * 3.1415927410125732421875) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) / ((_3133 * _3133) * ((_3076 * 2.1991131305694580078125) + 3.141590118408203125))) * _3065;
                        _2918 = (_3080 * _3028.x) + _2986;
                        _2919 = (_3080 * _3028.y) + _2987;
                        _2920 = (_3080 * _3028.z) + _2988;
                        _2915 = (_3161 * _3045.x) + _2983;
                        _2916 = (_3161 * _3045.y) + _2984;
                        _2917 = (_3161 * _3045.z) + _2985;
                        if (_2990 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2990;
                        }
                    }
                    frontier_phi_61_pred = _2915;
                    frontier_phi_61_pred_1 = _2920;
                    frontier_phi_61_pred_2 = _2919;
                    frontier_phi_61_pred_3 = _2918;
                    frontier_phi_61_pred_4 = _2917;
                    frontier_phi_61_pred_5 = _2916;
                }
                _2715 = frontier_phi_61_pred;
                _2725 = frontier_phi_61_pred_1;
                _2723 = frontier_phi_61_pred_2;
                _2721 = frontier_phi_61_pred_3;
                _2719 = frontier_phi_61_pred_4;
                _2717 = frontier_phi_61_pred_5;
                uint _2866 = _2865 + 1u;
                if (_2866 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2859 = _2715;
                    _2860 = _2717;
                    _2861 = _2719;
                    _2862 = _2721;
                    _2863 = _2723;
                    _2864 = _2725;
                    _2865 = _2866;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
        }
        uvec4 _2728 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2729 = _2728.z;
        uint _2731 = (_2729 >> 8u) & 15u;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((4294967295u << _2731) & _2613) == 0u)
        {
            _2827 = _2714;
            _2829 = _2716;
            _2831 = _2718;
            _2833 = _2720;
            _2835 = _2722;
            _2837 = _2724;
        }
        else
        {
            float _2852 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
            float _2853 = _2852 * _2567;
            float _2854 = _2852 * _2568;
            float _2855 = _2852 * _2569;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2731 < ((_2729 >> 12u) & 15u))
            {
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2966 = _2714;
                float _2967 = _2716;
                float _2968 = _2718;
                float _2969 = _2720;
                float _2970 = _2722;
                float _2971 = _2724;
                uint _2972 = _2731;
                uint _2981;
                bool _2982;
                for (;;)
                {
                    _2981 = texelFetch(g_lightClassification, int((((_2607 << 5u) + (_2593 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                    _2982 = _2981 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2982)
                    {
                        frontier_phi_67_pred = _2969;
                        frontier_phi_67_pred_1 = _2970;
                        frontier_phi_67_pred_2 = _2971;
                        frontier_phi_67_pred_3 = _2968;
                        frontier_phi_67_pred_4 = _2967;
                        frontier_phi_67_pred_5 = _2966;
                    }
                    else
                    {
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3179 = _2966;
                        float _3180 = _2967;
                        float _3181 = _2968;
                        float _3182 = _2969;
                        float _3183 = _2970;
                        float _3184 = _2971;
                        uint _3185 = _2981;
                        uint _3186;
                        vec4 _3211;
                        float _3212;
                        vec4 _3227;
                        vec3 _3239;
                        vec4 _3254;
                        vec4 _3269;
                        float _3315;
                        bool _3316;
                        for (;;)
                        {
                            uint _3196 = ((_2972 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3185));
                            _3186 = (_3185 + 4294967295u) & _3185;
                            uint _3198 = _3196 * 40u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            _3212 = _3211.w;
                            uint _3214 = (_3196 * 40u) + 4u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3229 = (_3196 * 40u) + 8u;
                            _3239 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x));
                            uint _3241 = (_3196 * 40u) + 16u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            uint _3256 = (_3196 * 40u) + 20u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3271 = (_3196 * 40u) + 24u;
                            vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3290 = (_3196 * 40u) + 28u;
                            vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            _3315 = fma(_2569, _3303.z, fma(_2568, _3303.y, _3303.x * _2567)) + _3303.w;
                            _3316 = !((fma(_2569, _3284.z, fma(_2568, _3284.y, _3284.x * _2567)) + _3284.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3316)
                            {
                                float _3343 = _3211.x - _2567;
                                float _3344 = _3211.y - _2568;
                                float _3345 = _3211.z - _2569;
                                float _3346 = dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345));
                                float _3349 = inversesqrt(_3346);
                                float _3350 = _3349 * _3343;
                                float _3351 = _3349 * _3344;
                                float _3352 = _3349 * _3345;
                                float _3356 = 1.0 - (_3346 / (_3212 * _3212));
                                float _4469 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3357 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3361 = sqrt(_3346) * _3227.w;
                                float _3363 = 1.39999997615814208984375 / (_3361 + 1.39999997615814208984375);
                                float _3364 = _3363 * _3363;
                                float _3367 = ((1.0 - _3364) * dot(vec3(_3350, _3351, _3352), vec3(_831, _834, _837))) + _3364;
                                float _3370 = _3361 * _3361;
                                float _3374 = (fma(_2569, _3254.z, fma(_2568, _3254.y, _3254.x * _2567)) + _3254.w) / _3315;
                                float _3375 = (fma(_2569, _3269.z, fma(_2568, _3269.y, _3269.x * _2567)) + _3269.w) / _3315;
                                float _3379 = 1.0 - dot(vec2(_3374, _3375), vec2(_3374, _3375));
                                float _4485 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3380 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3381 = _3380 * (((isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0))) * _3357) / ((_3370 * 0.699999988079071044921875) + 1.0));
                                float _3393 = exp2(log2(1.0 / ((_3370 * 3.5) + 5.0)) * 0.25);
                                float _3394 = 1.0 - _906;
                                float _3401 = sqrt(1.0 - ((1.0 - (_3394 * _3394)) * (1.0 - (_3393 * _3393))));
                                float _3402 = _3401 * _3401;
                                float _3403 = _3402 * _3402;
                                float _3404 = _3350 - _2853;
                                float _3405 = _3351 - _2854;
                                float _3406 = _3352 - _2855;
                                float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                                float _3414 = dot(vec3(_831, _834, _837), vec3((-0.0) - _2853, (-0.0) - _2854, (-0.0) - _2855));
                                float _4496 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3417 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3418 = dot(vec3(_831, _834, _837), vec3(_3410 * _3404, _3410 * _3405, _3410 * _3406));
                                float _4507 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3421 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3425 = ((_3421 * _3421) * (_3403 + (-1.0))) + 1.0;
                                float _3426 = _3363 * _3402;
                                float _3427 = _3426 * _3426;
                                float _3433 = ((1.0 - _3427) * dot(vec3(_831, _834, _837), vec3(_3350, _3351, _3352))) + _3427;
                                float _4518 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3434 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3435 = 1.0 - _3402;
                                float _3445 = (0.5 / (((_3434 * ((_3417 * _3435) + _3402)) + 9.9999999392252902907785028219223e-09) + (((_3434 * _3435) + _3402) * _3417))) * _3434;
                                float _4529 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3455 = (_3380 * _3357) * (((_3403 * 3.1415927410125732421875) * (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) / ((_3425 * _3425) * ((_3370 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3455 * _3239.x;
                                frontier_phi_73_pred_1 = _3455 * _3239.y;
                                frontier_phi_73_pred_2 = _3381 * _3227.z;
                                frontier_phi_73_pred_3 = _3381 * _3227.y;
                                frontier_phi_73_pred_4 = _3381 * _3227.x;
                                frontier_phi_73_pred_5 = _3455 * _3239.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3459 = frontier_phi_73_pred;
                            _3460 = frontier_phi_73_pred_1;
                            _3464 = frontier_phi_73_pred_2;
                            _3463 = frontier_phi_73_pred_3;
                            _3462 = frontier_phi_73_pred_4;
                            _3461 = frontier_phi_73_pred_5;
                            _3169 = _3462 + _3182;
                            _3170 = _3463 + _3183;
                            _3171 = _3464 + _3184;
                            _3166 = _3459 + _3179;
                            _3167 = _3460 + _3180;
                            _3168 = _3461 + _3181;
                            if (_3186 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3186;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3169;
                        frontier_phi_67_pred_1 = _3170;
                        frontier_phi_67_pred_2 = _3171;
                        frontier_phi_67_pred_3 = _3168;
                        frontier_phi_67_pred_4 = _3167;
                        frontier_phi_67_pred_5 = _3166;
                    }
                    _2834 = frontier_phi_67_pred;
                    _2836 = frontier_phi_67_pred_1;
                    _2838 = frontier_phi_67_pred_2;
                    _2832 = frontier_phi_67_pred_3;
                    _2830 = frontier_phi_67_pred_4;
                    _2828 = frontier_phi_67_pred_5;
                    uint _2973 = _2972 + 1u;
                    if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2966 = _2828;
                        _2967 = _2830;
                        _2968 = _2832;
                        _2969 = _2834;
                        _2970 = _2836;
                        _2971 = _2838;
                        _2972 = _2973;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2836;
                frontier_phi_55_56_ladder_1 = _2838;
                frontier_phi_55_56_ladder_2 = _2834;
                frontier_phi_55_56_ladder_3 = _2832;
                frontier_phi_55_56_ladder_4 = _2830;
                frontier_phi_55_56_ladder_5 = _2828;
            }
            else
            {
                frontier_phi_55_56_ladder = _2722;
                frontier_phi_55_56_ladder_1 = _2724;
                frontier_phi_55_56_ladder_2 = _2720;
                frontier_phi_55_56_ladder_3 = _2718;
                frontier_phi_55_56_ladder_4 = _2716;
                frontier_phi_55_56_ladder_5 = _2714;
            }
            _2827 = frontier_phi_55_56_ladder_5;
            _2829 = frontier_phi_55_56_ladder_4;
            _2831 = frontier_phi_55_56_ladder_3;
            _2833 = frontier_phi_55_56_ladder_2;
            _2835 = frontier_phi_55_56_ladder;
            _2837 = frontier_phi_55_56_ladder_1;
        }
        float _2842 = isnan(1.0) ? _890 : (isnan(_890) ? 1.0 : min(_890, 1.0));
        _2626 = (_2842 * _2833) + _2062;
        _2628 = (_2842 * _2835) + _2064;
        _2630 = (_2842 * _2837) + _2066;
        _2632 = ((_2827 * _874) * _2842) + _2407;
        _2634 = ((_2829 * _876) * _2842) + _2409;
        _2636 = ((_2831 * _877) * _2842) + _2411;
    }
    else
    {
        _2626 = _2062;
        _2628 = _2064;
        _2630 = _2066;
        _2632 = _2407;
        _2634 = _2409;
        _2636 = _2411;
    }
    float _4545 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4556 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4567 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    uint _2656 = _273 + 6u;
    float _2664 = _812 / cbSceneParam._m0[86u].x;
    float _2665 = _813 / cbSceneParam._m0[86u].y;
    vec4 _2679 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2664, _2665, (log2((isnan(cbSceneParam._m0[77u].w) ? _747 : (isnan(_747) ? cbSceneParam._m0[77u].w : min(_747, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2681 = _2679.x;
    float _2682 = _2679.y;
    float _2683 = _2679.z;
    float _2684 = _2679.w;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    if (_747 > cbSceneParam._m0[78u].w)
    {
        float _2739 = isnan(_747) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _747 : min(cbSceneParam._m0[80u].w, _747));
        float _2740 = _2739 / _747;
        float _2751 = _2740 * _797;
        float _2752 = _798 * _2740;
        float _2753 = (-0.0) - _2752;
        float _2755 = _2740 * _799;
        float _2757 = (cbSceneParam._m0[77u].w * _2753) / _2739;
        float _2758 = _2757 + cbSceneParam._m0[79u].w;
        float _2759 = cbSceneParam._m0[79u].w - _2752;
        float _2765 = sqrt(((_2751 * _2751) + (_2752 * _2752)) + (_2755 * _2755));
        float _2768 = (1.0 - (cbSceneParam._m0[77u].w / _2739)) * _2765;
        float _2773 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2775 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2928;
        if (abs((_2753 - _2757) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2928 = ((((_2758 > 0.0) ? exp2(_2773 * _2758) : (2.0 - exp2(_2775 * _2758))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2768;
        }
        else
        {
            float _2888 = 1.0 / cbSceneParam._m0[80u].x;
            float _2889 = isnan(_2759) ? _2758 : (isnan(_2758) ? _2759 : max(_2758, _2759));
            float _2890 = isnan(_2759) ? _2758 : (isnan(_2758) ? _2759 : min(_2758, _2759));
            float _2899 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : min(_2889, 0.0));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            _2928 = ((abs(_2765 / _2753) * cbSceneParam._m0[80u].y) * ((((_2899 - _2900) * 2.0) - ((exp2(_2773 * (isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0)))) - exp2(_2773 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))))) * _2888)) - ((exp2(_2775 * _2899) - exp2(_2775 * _2900)) * _2888))) + (_2768 * cbSceneParam._m0[80u].z);
        }
        vec4 _2930 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2664, _2665, 1.0), 0.0);
        float _2939 = exp2((_2928 * (-1.44269502162933349609375)) * (1.0 - _2930.w));
        float _2940 = log2(_2939);
        float _2956 = log2(_2684);
        _2777 = (exp2(_2956 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].x)) * _2930.x) / cbSceneParam._m0[78u].x)) + _2681;
        _2779 = (exp2(_2956 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].y)) * _2930.y) / cbSceneParam._m0[78u].y)) + _2682;
        _2781 = (exp2(_2956 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].z)) * _2930.z) / cbSceneParam._m0[78u].z)) + _2683;
        _2783 = _2939 * _2684;
    }
    else
    {
        _2777 = _2681;
        _2779 = _2682;
        _2781 = _2683;
        _2783 = _2684;
    }
    float _2795 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2796 = _2795 == 3.0;
    float _2797 = log2(_2783);
    float _2804 = exp2(_2797 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2626 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _890))) + ((_2632 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1698)) * cbPerFrame._m0[3u].x));
    float _2805 = exp2(_2797 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2628 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _890))) + ((_2634 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1698)) * cbPerFrame._m0[3u].x));
    float _2806 = exp2(_2797 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2630 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _890))) + ((_2636 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1698)) * cbPerFrame._m0[3u].x));
    float _2815 = (_2795 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2815 * (_2796 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2777)));
    SV_Target.y = _2815 * (_2796 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2779)));
    SV_Target.z = _2815 * (_2796 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2781)));
    SV_Target.w = cbInstanceData._m0[_2656].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2656].w;
}


