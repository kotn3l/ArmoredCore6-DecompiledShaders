#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1362;
float _4025;
float _4026;
float _4027;
float _4028;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _256 + 1u;
    uint _266 = _256 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _365 = _363.x;
    float _377 = dot(vec4(_365, _363.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _394 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_365 - _377) * cbMtdParam._m0[24u].y) + _377) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4037 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _402 = (_395 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _403 = (_395 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _404 = (_395 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _453 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _467 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_443 - _453) * cbMtdParam._m0[24u].y) + _453) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4048 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _475 = (_468 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402;
    float _476 = (_468 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403;
    float _477 = (_468 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404;
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _538 = _534.z;
    float _545 = ((_517.x - _536) * _395) + _536;
    float _546 = ((_517.y - _537) * _395) + _537;
    float _547 = ((_517.z - _538) * _395) + _538;
    vec4 _559 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _572 = ((_559.z - _547) * _468) + _547;
    float _575 = ((((_559.x - _545) * _468) + _545) * 2.0) + (-1.0);
    float _576 = ((((_559.y - _546) * _468) + _546) * 2.0) + (-1.0);
    float _577 = dot(vec2(_575, _576), vec2(_575, _576));
    float _4059 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _582 = sqrt(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))));
    vec4 _595 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _613 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _615 = _613.x;
    float _616 = 1.0 - _615;
    float _629 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_615 - _616) * cbMtdParam._m0[24u].z) + _616) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4070 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _637 = (_630 * (cbMtdParam._m0[17u].x - _475)) + _475;
    float _638 = (_630 * (cbMtdParam._m0[17u].y - _476)) + _476;
    float _639 = (_630 * (cbMtdParam._m0[17u].z - _477)) + _477;
    vec4 _651 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _665 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _667 = _665.x;
    float _685 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _667) * _395) + _667;
    float _702 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _685) * _468) + _685;
    float _706 = ((_651.x - _702) * cbMtdParam._m0[19u].z) + _702;
    float _708 = _706 - (_706 * _630);
    float _713 = (((_494.z - _572) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _572;
    vec4 _726 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _733 = (_726.x * 2.0) + (-1.0);
    float _734 = (_726.y * 2.0) + (-1.0);
    float _735 = dot(vec2(_733, _734), vec2(_733, _734));
    float _4081 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _743 = (_630 * (_726.z - _713)) + _713;
    float _748 = _575 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_494.x * 2.0) + (-1.0)));
    float _749 = _576 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_494.y * 2.0) + (-1.0)));
    float _761 = (((_733 - _748) + (cbMtdParam._m0[21u].x * _748)) * _630) + _748;
    float _762 = (((_734 - _749) + (cbMtdParam._m0[21u].x * _749)) * _630) + _749;
    float _763 = (_630 * (sqrt(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) - _582)) + _582;
    float _768 = cbMtdParam._m0[22u].x + _595.w;
    float _771 = fma(_763, _243 * NORMAL.x, fma(_762, _250 * TANGENT.x, (_236 * _228) * _761));
    float _774 = fma(_763, _243 * NORMAL.y, fma(_762, _250 * TANGENT.y, (_236 * _229) * _761));
    float _777 = fma(_763, _243 * NORMAL.z, fma(_762, _250 * TANGENT.z, (_236 * _230) * _761));
    float _781 = inversesqrt(dot(vec3(_771, _774, _777), vec3(_771, _774, _777)));
    float _782 = _781 * _771;
    float _783 = _781 * _774;
    float _784 = _781 * _777;
    float _4092 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _785 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4114 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4125 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4136 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4147 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _790 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _804 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _855 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _845);
    float _856 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _845);
    float _857 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _845);
    float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
    float _862 = _855 * _861;
    float _863 = _856 * _861;
    float _864 = _857 * _861;
    vec4 _869 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _871 = _869.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1043 = sqrt(((_855 * _855) + (_856 * _856)) + (_857 * _857));
        float _1049 = (cbMatDynParam._m0[5u].x * _1043) + cbMatDynParam._m0[5u].y;
        float _4158 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1054 = (cbMatDynParam._m0[5u].z * _1043) + cbMatDynParam._m0[5u].w;
        float _4169 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) - _1050)) + _1050) < ((_871 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _882 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _883 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _901 = fma(_784, cbSceneParam._m0[5u].z, fma(_783, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _782));
    float _904 = fma(_784, cbSceneParam._m0[6u].z, fma(_783, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _782));
    float _907 = fma(_784, cbSceneParam._m0[7u].z, fma(_783, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _782));
    uint _920 = _256 + 9u;
    uint _921 = _920 + uint(cbMatDynParam._m0[0u].w);
    float _927 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * cbInstanceData._m0[_921].x;
    float _928 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * cbInstanceData._m0[_921].y;
    float _929 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * cbInstanceData._m0[_921].z;
    float _4180 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _4191 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _4202 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _933 = 1.0 - _790;
    float _934 = _930 * _933;
    float _935 = _931 * _933;
    float _936 = _932 * _933;
    float _941 = (_930 + (-0.039999999105930328369140625)) * _790;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _790;
    float _943 = (_932 + (-0.039999999105930328369140625)) * _790;
    float _944 = _941 + 0.039999999105930328369140625;
    float _946 = _942 + 0.039999999105930328369140625;
    float _947 = _943 + 0.039999999105930328369140625;
    vec4 _956 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _882, cbSceneParam._m0[86u].y * _883));
    float _960 = ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * TEXCOORD_5.w) * _956.x;
    float _961 = dot(vec3(_782, _783, _784), vec3(_862, _863, _864));
    float _964 = _961 * 2.0;
    float _968 = (_964 * _782) - _862;
    float _969 = (_964 * _783) - _863;
    float _970 = (_964 * _784) - _864;
    float _974 = abs(dot(vec3(_862, _863, _864), vec3(_782, _783, _784)));
    float _4213 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _976 = sqrt(_785);
    float _989 = exp2((_976 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_976 * 3.0));
    float _995 = (1.0 - _989) * ((_976 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _996 = _989 * _976;
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1361;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1086 = fma(_1032, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024));
        float _1090 = fma(_1032, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024));
        float _1094 = fma(_1032, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024));
        float _1119 = _1024 + _782;
        float _1120 = _1028 + _783;
        float _1121 = _1032 + _784;
        float _1131 = fma(_1121, cbModelParam._m0[26u].z, fma(_1120, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1119)) - _1086;
        float _1132 = fma(_1121, cbModelParam._m0[27u].z, fma(_1120, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1119)) - _1090;
        float _1133 = fma(_1121, cbModelParam._m0[28u].z, fma(_1120, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1119)) - _1094;
        float _1137 = inversesqrt(dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133)));
        float _1150 = ((_1137 * _1131) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1086 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1137 * _1132) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1090 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1137 * _1133) / cbModelParam._m0[34u].z) + ((((((_1094 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        float _1189 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1155.x + (-0.5));
        float _1191 = _1189 * (_1155.y + (-0.5));
        float _1192 = _1189 * (_1155.z + (-0.5));
        float _1199 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1162.x + (-0.5));
        float _1201 = _1199 * (_1162.y + (-0.5));
        float _1202 = _1199 * (_1162.z + (-0.5));
        float _1209 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1169.x + (-0.5));
        float _1211 = _1209 * (_1169.y + (-0.5));
        float _1212 = _1209 * (_1169.z + (-0.5));
        float _1219 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1176.x + (-0.5));
        float _1221 = _1219 * (_1176.y + (-0.5));
        float _1222 = _1219 * (_1176.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1243 = (dot(vec3(_782, _783, _784), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1253 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _4261 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1255 + 1.0))) + _1260) * _1223;
        float _1270 = _1191 * 0.5;
        float _1271 = _1201 * 0.5;
        float _1272 = _1211 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_782, _783, _784), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4294 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1297 + 1.0))) + _1302) * _1224;
        float _1312 = _1192 * 0.5;
        float _1313 = _1202 * 0.5;
        float _1314 = _1212 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_782, _783, _784), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4327 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1339 + 1.0))) + _1344) * _1225;
        _1361 = _1192;
        _1363 = _1191;
        _1364 = _1190;
        _1365 = _1202;
        _1366 = _1201;
        _1367 = _1200;
        _1368 = _1212;
        _1369 = _1211;
        _1370 = _1210;
        _1371 = _1225;
        _1372 = _1224;
        _1373 = _1223;
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1362;
        _1363 = _1362;
        _1364 = _1362;
        _1365 = _1362;
        _1366 = _1362;
        _1367 = _1362;
        _1368 = _1362;
        _1369 = _1362;
        _1370 = _1362;
        _1371 = _1362;
        _1372 = _1362;
        _1373 = _1362;
        _1374 = 0.0;
        _1375 = 0.0;
        _1376 = 0.0;
    }
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1403 = fma(_1032, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1024));
        float _1407 = fma(_1032, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1024));
        float _1411 = fma(_1032, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1024));
        float _1434 = _1024 + _782;
        float _1435 = _1028 + _783;
        float _1436 = _1032 + _784;
        float _1446 = fma(_1436, cbModelParam._m0[30u].z, fma(_1435, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1434)) - _1403;
        float _1447 = fma(_1436, cbModelParam._m0[31u].z, fma(_1435, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1434)) - _1407;
        float _1448 = fma(_1436, cbModelParam._m0[32u].z, fma(_1435, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1434)) - _1411;
        float _1452 = inversesqrt(dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448)));
        float _1465 = ((_1452 * _1446) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1403 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1466 = ((_1452 * _1447) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1407 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1452 * _1448) / cbModelParam._m0[35u].z) + ((((((_1411 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        float _1502 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1469.x + (-0.5));
        float _1504 = _1502 * (_1469.y + (-0.5));
        float _1505 = _1502 * (_1469.z + (-0.5));
        float _1512 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1476.x + (-0.5));
        float _1514 = _1512 * (_1476.y + (-0.5));
        float _1515 = _1512 * (_1476.z + (-0.5));
        float _1522 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1483.x + (-0.5));
        float _1524 = _1522 * (_1483.y + (-0.5));
        float _1525 = _1522 * (_1483.z + (-0.5));
        float _1532 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1490.x + (-0.5));
        float _1534 = _1532 * (_1490.y + (-0.5));
        float _1535 = _1532 * (_1490.z + (-0.5));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = _1503 * 0.5;
        float _1540 = _1513 * 0.5;
        float _1541 = _1523 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_782, _783, _784), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4390 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1566 + 1.0))) + _1571) * _1536;
        float _1581 = _1504 * 0.5;
        float _1582 = _1514 * 0.5;
        float _1583 = _1524 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_782, _783, _784), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4401 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4412 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4423 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_1608 + 1.0))) + _1613) * _1537;
        float _1623 = _1505 * 0.5;
        float _1624 = _1515 * 0.5;
        float _1625 = _1525 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_782, _783, _784), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4456 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1650 + 1.0))) + _1655) * _1538;
        _1672 = _1505;
        _1673 = _1504;
        _1674 = _1503;
        _1675 = _1515;
        _1676 = _1514;
        _1677 = _1513;
        _1678 = _1525;
        _1679 = _1524;
        _1680 = _1523;
        _1681 = _1538;
        _1682 = _1537;
        _1683 = _1536;
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
    }
    else
    {
        _1672 = _1362;
        _1673 = _1362;
        _1674 = _1362;
        _1675 = _1362;
        _1676 = _1362;
        _1677 = _1362;
        _1678 = _1362;
        _1679 = _1362;
        _1680 = _1362;
        _1681 = _1362;
        _1682 = _1362;
        _1683 = _1362;
        _1684 = 0.0;
        _1685 = 0.0;
        _1686 = 0.0;
    }
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1374)) + _1374;
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1375)) + _1375;
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1376)) + _1376;
    float _1719 = fma(_1698, cbSceneParam._m0[89u].z, fma(_1697, cbSceneParam._m0[89u].y, _1696 * cbSceneParam._m0[89u].x));
    float _1722 = fma(_1698, cbSceneParam._m0[90u].z, fma(_1697, cbSceneParam._m0[90u].y, _1696 * cbSceneParam._m0[90u].x));
    float _1725 = fma(_1698, cbSceneParam._m0[91u].z, fma(_1697, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1696));
    float _1740 = _968 * 0.5;
    float _1741 = _969 * 0.5;
    float _1742 = _970 * 0.5;
    float _1743 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1746 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1749 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1783;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1756 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1361, _1365, _1368, _1371));
        float _1760 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1363, _1366, _1369, _1372));
        float _1764 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1771 = dot(vec4(cbModelParam._m0[39u]), vec4(_1740, _1741, _1742, 1.0));
        _1783 = dot(vec3(isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1771) ? 0.0 : (isnan(0.0) ? _1771 : max(0.0, _1771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1783 = 1.0;
    }
    float _1794;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1785 = dot(vec4(cbModelParam._m0[40u]), vec4(_1740, _1741, _1742, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1785) ? 0.0 : (isnan(0.0) ? _1785 : max(0.0, _1785))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1798 = (_1794 * cbModelParam._m0[1u].x) + (_1783 * (1.0 - cbModelParam._m0[1u].x));
    float _1808 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _785);
    float _1809 = isnan(_1808) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1808 : min(cbModelParam._m0[25u].z, _1808));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1857 = fma(_1032, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1024)) + cbModelParam._m0[13u].w;
        float _1861 = fma(_1032, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1024)) + cbModelParam._m0[14u].w;
        float _1865 = fma(_1032, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1024)) + cbModelParam._m0[15u].w;
        float _1868 = fma(_970, cbModelParam._m0[13u].z, fma(_969, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _968));
        float _1871 = fma(_970, cbModelParam._m0[14u].z, fma(_969, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _968));
        float _1874 = fma(_970, cbModelParam._m0[15u].z, fma(_969, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _968));
        float _1902;
        if (_1868 > 0.0)
        {
            _1902 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1902 = frontier_phi_17_15_ladder;
        }
        float _2074;
        if (_1871 > 0.0)
        {
            _2074 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2074 = frontier_phi_26_22_ladder;
        }
        float _2369;
        if (_1874 > 0.0)
        {
            _2369 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2369 = frontier_phi_38_33_ladder;
        }
        float _2371 = isnan(_2074) ? _1902 : (isnan(_1902) ? _2074 : min(_1902, _2074));
        float _2372 = isnan(_2369) ? _2371 : (isnan(_2371) ? _2369 : min(_2371, _2369));
        float _2376 = (_2372 * _1868) + _1857;
        float _2377 = (_2372 * _1871) + _1861;
        float _2378 = (_2372 * _1874) + _1865;
        float _2379 = _2372 * 9.9999997473787516355514526367188e-05;
        float _2381 = (-1.0) - _2379;
        float _2383 = _2379 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2378 > _2383) || ((_2378 < _2381) || ((_2377 > _2383) || ((_2377 < _2381) || ((_2376 < _2381) || (_2376 > _2383))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2523 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2378, cbModelParam._m0[9u].z, fma(_2377, cbModelParam._m0[9u].y, _2376 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2378, cbModelParam._m0[10u].z, fma(_2377, cbModelParam._m0[10u].y, _2376 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2378, cbModelParam._m0[11u].z, fma(_2377, cbModelParam._m0[11u].y, _2376 * cbModelParam._m0[11u].x))), _1809);
            frontier_phi_16_38_ladder = _2523.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2523.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2523.x * cbModelParam._m0[1u].y;
        }
        _1890 = frontier_phi_16_38_ladder_2;
        _1892 = frontier_phi_16_38_ladder_1;
        _1894 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1878 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_968, _969, _970), _1809);
        _1890 = _1878.x * cbModelParam._m0[1u].y;
        _1892 = _1878.y * cbModelParam._m0[1u].y;
        _1894 = _1878.z * cbModelParam._m0[1u].y;
    }
    float _1898 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _785);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1898 : min(cbModelParam._m0[25u].w, _1898));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1953 = fma(_1032, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1024)) + cbModelParam._m0[21u].w;
        float _1957 = fma(_1032, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1024)) + cbModelParam._m0[22u].w;
        float _1961 = fma(_1032, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1024)) + cbModelParam._m0[23u].w;
        float _1964 = fma(_970, cbModelParam._m0[21u].z, fma(_969, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _968));
        float _1967 = fma(_970, cbModelParam._m0[22u].z, fma(_969, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _968));
        float _1970 = fma(_970, cbModelParam._m0[23u].z, fma(_969, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _968));
        float _2079;
        if (_1964 > 0.0)
        {
            _2079 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2079 = frontier_phi_28_24_ladder;
        }
        float _2396;
        if (_1967 > 0.0)
        {
            _2396 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2396 = frontier_phi_40_35_ladder;
        }
        float _2734;
        if (_1970 > 0.0)
        {
            _2734 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2734 = frontier_phi_50_47_ladder;
        }
        float _2736 = isnan(_2396) ? _2079 : (isnan(_2079) ? _2396 : min(_2079, _2396));
        float _2737 = isnan(_2734) ? _2736 : (isnan(_2736) ? _2734 : min(_2736, _2734));
        float _2741 = (_2737 * _1964) + _1953;
        float _2742 = (_2737 * _1967) + _1957;
        float _2743 = (_2737 * _1970) + _1961;
        float _2744 = _2737 * 9.9999997473787516355514526367188e-05;
        float _2745 = (-1.0) - _2744;
        float _2747 = _2744 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2743 > _2747) || ((_2743 < _2745) || ((_2742 > _2747) || ((_2742 < _2745) || ((_2741 < _2745) || (_2741 > _2747))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2865 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2743, cbModelParam._m0[17u].z, fma(_2742, cbModelParam._m0[17u].y, _2741 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2743, cbModelParam._m0[18u].z, fma(_2742, cbModelParam._m0[18u].y, _2741 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2743, cbModelParam._m0[19u].z, fma(_2742, cbModelParam._m0[19u].y, _2741 * cbModelParam._m0[19u].x))), _1899);
            frontier_phi_25_50_ladder = _2865.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2865.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2865.x * cbModelParam._m0[1u].z;
        }
        _1989 = frontier_phi_25_50_ladder_2;
        _1991 = frontier_phi_25_50_ladder_1;
        _1993 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_968, _969, _970), _1899);
        _1989 = _1973.x * cbModelParam._m0[1u].z;
        _1991 = _1973.y * cbModelParam._m0[1u].z;
        _1993 = _1973.z * cbModelParam._m0[1u].z;
    }
    float _2006 = (((_995 * _944) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1989 - _1890)) + _1890);
    float _2008 = (((_995 * _946) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1991 - _1892)) + _1892);
    float _2010 = (((_995 * _947) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1993 - _1894)) + _1894);
    float _2013 = fma(_2010, cbSceneParam._m0[89u].z, fma(_2008, cbSceneParam._m0[89u].y, _2006 * cbSceneParam._m0[89u].x));
    float _2016 = fma(_2010, cbSceneParam._m0[90u].z, fma(_2008, cbSceneParam._m0[90u].y, _2006 * cbSceneParam._m0[90u].x));
    float _2019 = fma(_2010, cbSceneParam._m0[91u].z, fma(_2008, cbSceneParam._m0[91u].y, _2006 * cbSceneParam._m0[91u].x));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2061 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2065 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2066 = _2053 / _2065;
    float _2067 = _2057 / _2065;
    float _2068 = _2061 / _2065;
    float _2215;
    float _2216;
    float _2217;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2095 = ((uint(_2068 > cbSceneParam._m0[59u].y) + uint(_2068 > cbSceneParam._m0[59u].x)) + uint(_2068 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2096 = _2095 + 43u;
        uint _2104 = _2095 + 44u;
        uint _2112 = _2095 + 45u;
        uint _2120 = _2095 + 46u;
        float _2131 = fma(_2065, cbSceneParam._m0[_2096].w, fma(_2061, cbSceneParam._m0[_2096].z, fma(_2057, cbSceneParam._m0[_2096].y, _2053 * cbSceneParam._m0[_2096].x)));
        float _2135 = fma(_2065, cbSceneParam._m0[_2104].w, fma(_2061, cbSceneParam._m0[_2104].z, fma(_2057, cbSceneParam._m0[_2104].y, _2053 * cbSceneParam._m0[_2104].x)));
        float _2143 = fma(_2065, cbSceneParam._m0[_2120].w, fma(_2061, cbSceneParam._m0[_2120].z, fma(_2057, cbSceneParam._m0[_2120].y, _2053 * cbSceneParam._m0[_2120].x)));
        float _2148 = cbSceneParam._m0[33u].z * _2143;
        float _2150 = cbSceneParam._m0[33u].w * _2143;
        float _2153 = fma(_2065, cbSceneParam._m0[_2112].w, fma(_2061, cbSceneParam._m0[_2112].z, fma(_2057, cbSceneParam._m0[_2112].y, _2053 * cbSceneParam._m0[_2112].x))) / _2143;
        float _2201 = (cbSceneParam._m0[33u].x - sqrt(((_2067 * _2067) + (_2066 * _2066)) + (_2068 * _2068))) * cbSceneParam._m0[33u].y;
        float _4582 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2208 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 + _2131) / _2143, (_2150 + _2135) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 + _2131) / _2143, (_2135 - _2148) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 - _2148) / _2143, (_2135 - _2150) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 - _2150) / _2143, (_2148 + _2135) / _2143), _2153), 0.0)).x), vec4(0.25)));
        _2215 = 1.0 - (_2208 * cbSceneParam._m0[34u].x);
        _2216 = 1.0 - (_2208 * cbSceneParam._m0[34u].y);
        _2217 = 1.0 - (_2208 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2215 = 1.0;
        _2216 = 1.0;
        _2217 = 1.0;
    }
    float _2281;
    float _2283;
    float _2285;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2269 = fma(_2065, cbSceneParam._m0[63u].w, fma(_2061, cbSceneParam._m0[63u].z, fma(_2057, cbSceneParam._m0[63u].y, _2053 * cbSceneParam._m0[63u].x)));
        float _2270 = fma(_2065, cbSceneParam._m0[60u].w, fma(_2061, cbSceneParam._m0[60u].z, fma(_2057, cbSceneParam._m0[60u].y, _2053 * cbSceneParam._m0[60u].x))) / _2269;
        float _2271 = fma(_2065, cbSceneParam._m0[61u].w, fma(_2061, cbSceneParam._m0[61u].z, fma(_2057, cbSceneParam._m0[61u].y, _2053 * cbSceneParam._m0[61u].x))) / _2269;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2270 >= cbSceneParam._m0[64u].x) && (_2271 >= cbSceneParam._m0[64u].y)) && (_2270 <= cbSceneParam._m0[64u].z)) && (_2271 <= cbSceneParam._m0[64u].w))
        {
            float _2409 = fma(_2065, cbSceneParam._m0[62u].w, fma(_2061, cbSceneParam._m0[62u].z, fma(_2057, cbSceneParam._m0[62u].y, _2053 * cbSceneParam._m0[62u].x))) / _2269;
            float _2413 = isnan(cbSceneParam._m0[41u].w) ? _2409 : (isnan(_2409) ? cbSceneParam._m0[41u].w : max(_2409, cbSceneParam._m0[41u].w));
            float _2456 = (cbSceneParam._m0[33u].x - sqrt(((_2067 * _2067) + (_2066 * _2066)) + (_2068 * _2068))) * cbSceneParam._m0[33u].y;
            float _4598 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
            float _2463 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2270, cbSceneParam._m0[33u].w + _2271), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2270, _2271 - cbSceneParam._m0[33u].z), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2270 - cbSceneParam._m0[33u].z, _2271 - cbSceneParam._m0[33u].w), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2270 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2271), _2413), 0.0)).x), vec4(0.25)));
            float _2467 = 1.0 - (_2463 * cbSceneParam._m0[34u].x);
            float _2468 = 1.0 - (_2463 * cbSceneParam._m0[34u].y);
            float _2469 = 1.0 - (_2463 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2469) ? _2217 : (isnan(_2217) ? _2469 : min(_2217, _2469));
            frontier_phi_37_36_ladder_1 = isnan(_2468) ? _2216 : (isnan(_2216) ? _2468 : min(_2216, _2468));
            frontier_phi_37_36_ladder_2 = isnan(_2467) ? _2215 : (isnan(_2215) ? _2467 : min(_2215, _2467));
        }
        else
        {
            frontier_phi_37_36_ladder = _2217;
            frontier_phi_37_36_ladder_1 = _2216;
            frontier_phi_37_36_ladder_2 = _2215;
        }
        _2281 = frontier_phi_37_36_ladder_2;
        _2283 = frontier_phi_37_36_ladder_1;
        _2285 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2281 = _2215;
        _2283 = _2216;
        _2285 = _2217;
    }
    uvec4 _2290 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2292 = _2290.x * 14u;
    uint _2293 = _2292 + 13u;
    float _2300 = _960 + (-1.0);
    float _2305 = (cbLight._m0[_2293].x * _2300) + 1.0;
    float _2306 = (cbLight._m0[_2293].y * _2300) + 1.0;
    float _2307 = (cbLight._m0[_2293].z * _2300) + 1.0;
    float _2308 = (cbLight._m0[_2293].w * _2300) + 1.0;
    uint _2309 = _2292 + 5u;
    float _2315 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
    uint _2319 = _2292 + 4u;
    float _2328 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    uint _2332 = _2292 | 1u;
    float _2343 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_782, _783, _784));
    float _2346 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_782, _783, _784));
    float _4634 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _4645 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2351 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * 0.3183098733425140380859375;
    float _2353 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * 0.3183098733425140380859375;
    float _2360 = ((cbLight._m0[_2309].x * _2315) * _2353) + (((cbLight._m0[_2319].x * _2281) * _2328) * _2351);
    float _2361 = ((_2315 * cbLight._m0[_2309].y) * _2353) + (((cbLight._m0[_2319].y * _2283) * _2328) * _2351);
    float _2362 = ((_2315 * cbLight._m0[_2309].z) * _2353) + (((cbLight._m0[_2319].z * _2285) * _2328) * _2351);
    uvec4 _2366 = floatBitsToUint(cbLight._m0[_2292 + 12u]);
    bool _2368 = _2366.x == 0u;
    float _2470;
    float _2472;
    float _2474;
    if (_2368)
    {
        _2470 = _2360;
        _2472 = _2361;
        _2474 = _2362;
    }
    else
    {
        uint _2478 = _2292 + 6u;
        float _2494 = (dot(vec3(cbLight._m0[_2292 + 2u].xyz), vec3(_782, _783, _784)) * 0.5) + 0.5;
        float _2495 = _2494 * _2494;
        float _4656 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2496 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2497 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2470 = (((cbLight._m0[_2478].x * 0.3183098733425140380859375) * _2496) * _2497) + _2360;
        _2472 = (((cbLight._m0[_2478].y * 0.3183098733425140380859375) * _2496) * _2497) + _2361;
        _2474 = (((cbLight._m0[_2478].z * 0.3183098733425140380859375) * _2496) * _2497) + _2362;
    }
    bool _2477 = _2366.y == 0u;
    float _2532;
    float _2534;
    float _2536;
    if (_2477)
    {
        _2532 = _2470;
        _2534 = _2472;
        _2536 = _2474;
    }
    else
    {
        uint _2705 = _2292 + 7u;
        float _2721 = (dot(vec3(cbLight._m0[_2292 + 3u].xyz), vec3(_782, _783, _784)) * 0.5) + 0.5;
        float _2722 = _2721 * _2721;
        float _4672 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2723 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2724 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2532 = (((cbLight._m0[_2705].x * 0.3183098733425140380859375) * _2723) * _2724) + _2470;
        _2534 = (((cbLight._m0[_2705].y * 0.3183098733425140380859375) * _2723) * _2724) + _2472;
        _2536 = (((cbLight._m0[_2705].z * 0.3183098733425140380859375) * _2723) * _2724) + _2474;
    }
    uint _2539 = _2292 + 8u;
    float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _785) * 0.949999988079071044921875);
    float _2553 = _2552 * _2552;
    float _2554 = cbLight._m0[_2292].x + _862;
    float _2555 = cbLight._m0[_2292].y + _863;
    float _2556 = cbLight._m0[_2292].z + _864;
    float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
    float _2561 = _2560 * _2554;
    float _2562 = _2560 * _2555;
    float _2563 = _2560 * _2556;
    float _2564 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2292].xyz));
    float _4688 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _4699 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _2568 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    float _2569 = dot(vec3(_782, _783, _784), vec3(_2561, _2562, _2563));
    float _4710 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2573 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2561, _2562, _2563));
    float _4721 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2577 = _2553 * _2553;
    float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
    float _2589 = exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0);
    float _2590 = 0.959999978542327880859375 - _941;
    float _2592 = 0.959999978542327880859375 - _942;
    float _2593 = 0.959999978542327880859375 - _943;
    float _2600 = 1.0 - _2553;
    float _2611 = (0.5 / (((_2568 * ((_2567 * _2600) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2600) + _2553) * _2567))) * _2567;
    float _4732 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2613 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
    uint _2627 = _2292 + 9u;
    float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _785) * 0.949999988079071044921875);
    float _2639 = _2638 * _2638;
    float _2640 = cbLight._m0[_2332].x + _862;
    float _2641 = cbLight._m0[_2332].y + _863;
    float _2642 = cbLight._m0[_2332].z + _864;
    float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
    float _2647 = _2646 * _2640;
    float _2648 = _2646 * _2641;
    float _2649 = _2646 * _2642;
    float _2650 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2332].xyz));
    float _4743 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2653 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
    float _2654 = dot(vec3(_782, _783, _784), vec3(_2647, _2648, _2649));
    float _4754 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
    float _2658 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2647, _2648, _2649));
    float _4765 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2662 = _2639 * _2639;
    float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
    float _2673 = exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0);
    float _2680 = 1.0 - _2639;
    float _2690 = (0.5 / (((_2568 * ((_2653 * _2680) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2680) + _2639) * _2653))) * _2653;
    float _4776 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2692 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
    float _2702 = (((((_2673 * _2590) + _944) * cbLight._m0[_2627].x) * _2692) * _2315) + ((((cbLight._m0[_2539].x * _2281) * ((_2589 * _2590) + _944)) * _2613) * _2328);
    float _2703 = (((((_2673 * _2592) + _946) * cbLight._m0[_2627].y) * _2692) * _2315) + ((((cbLight._m0[_2539].y * _2283) * ((_2589 * _2592) + _946)) * _2613) * _2328);
    float _2704 = (((((_2673 * _2593) + _947) * cbLight._m0[_2627].z) * _2692) * _2315) + ((((cbLight._m0[_2539].z * _2285) * ((_2589 * _2593) + _947)) * _2613) * _2328);
    float _2760;
    float _2762;
    float _2764;
    if (_2368)
    {
        _2760 = _2702;
        _2762 = _2703;
        _2764 = _2704;
    }
    else
    {
        uint _2766 = _2292 + 2u;
        uint _2770 = _2292 + 10u;
        float _2784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2766].w)) * _785) * 0.949999988079071044921875);
        float _2785 = _2784 * _2784;
        float _2786 = cbLight._m0[_2766].x + _862;
        float _2787 = cbLight._m0[_2766].y + _863;
        float _2788 = cbLight._m0[_2766].z + _864;
        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
        float _2793 = _2792 * _2786;
        float _2794 = _2792 * _2787;
        float _2795 = _2792 * _2788;
        float _2796 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2766].xyz));
        float _4787 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2800 = dot(vec3(_782, _783, _784), vec3(_2793, _2794, _2795));
        float _4798 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2803 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2804 = dot(vec3(cbLight._m0[_2766].xyz), vec3(_2793, _2794, _2795));
        float _4809 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2808 = _2785 * _2785;
        float _2812 = ((_2803 * _2803) * (_2808 + (-1.0))) + 1.0;
        float _2819 = exp2(log2(1.0 - (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) * 5.0);
        float _2826 = 1.0 - _2785;
        float _2836 = (0.5 / (((_2568 * ((_2799 * _2826) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2826) + _2785) * _2799))) * _2799;
        float _4820 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2838 = (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2808 / ((_2812 * _2812) * 3.141590118408203125));
        float _2839 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2760 = (((((_2819 * _2590) + _944) * cbLight._m0[_2770].x) * _2838) * _2839) + _2702;
        _2762 = (((((_2819 * _2592) + _946) * cbLight._m0[_2770].y) * _2838) * _2839) + _2703;
        _2764 = (((((_2819 * _2593) + _947) * cbLight._m0[_2770].z) * _2838) * _2839) + _2704;
    }
    float _2870;
    float _2872;
    float _2874;
    if (_2477)
    {
        _2870 = _2760;
        _2872 = _2762;
        _2874 = _2764;
    }
    else
    {
        uint _2881 = _2292 + 3u;
        uint _2885 = _2292 + 11u;
        float _2899 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2881].w)) * _785) * 0.949999988079071044921875);
        float _2900 = _2899 * _2899;
        float _2901 = cbLight._m0[_2881].x + _862;
        float _2902 = cbLight._m0[_2881].y + _863;
        float _2903 = cbLight._m0[_2881].z + _864;
        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
        float _2908 = _2907 * _2901;
        float _2909 = _2907 * _2902;
        float _2910 = _2907 * _2903;
        float _2911 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2881].xyz));
        float _4836 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2914 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2915 = dot(vec3(_782, _783, _784), vec3(_2908, _2909, _2910));
        float _4847 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2918 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
        float _2919 = dot(vec3(cbLight._m0[_2881].xyz), vec3(_2908, _2909, _2910));
        float _4858 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2923 = _2900 * _2900;
        float _2927 = ((_2918 * _2918) * (_2923 + (-1.0))) + 1.0;
        float _2934 = exp2(log2(1.0 - (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) * 5.0);
        float _2941 = 1.0 - _2900;
        float _2951 = (0.5 / (((_2568 * ((_2914 * _2941) + _2900)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2941) + _2900) * _2914))) * _2914;
        float _4869 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2953 = (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2923 / ((_2927 * _2927) * 3.141590118408203125));
        float _2954 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2870 = (((((_2934 * _2590) + _944) * cbLight._m0[_2885].x) * _2953) * _2954) + _2760;
        _2872 = (((((_2934 * _2592) + _946) * cbLight._m0[_2885].y) * _2953) * _2954) + _2762;
        _2874 = (((((_2934 * _2593) + _947) * cbLight._m0[_2885].z) * _2953) * _2954) + _2764;
    }
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    if (_2290.y == 0u)
    {
        uvec4 _2975 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2976 = _2975.x;
        uint _2987 = uint((float(_2975.y) * floor(float(uint(cbSceneParam._m0[85u].y * _883) / _2976))) + floor(float(uint(cbSceneParam._m0[85u].x * _882) / _2976)));
        float _2997 = (log2(_2068 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2998 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        uint _3001 = uint(isnan(14.0) ? _2998 : (isnan(_2998) ? 14.0 : min(_2998, 14.0)));
        uvec4 _3006 = texelFetch(g_lightClusterGridBuffer, int(((_3001 << 2u) + (_2987 << 6u)) >> 2u));
        uint _3007 = _3006.x;
        uint _3008 = _2975.z;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        if (((((1u << ((_3008 >> 4u) & 15u)) + 4294967295u) & _3007) == 0u) || ((_3008 & 240u) == 0u))
        {
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
        }
        else
        {
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            uint _3246 = 0u;
            uint _3255;
            bool _3256;
            for (;;)
            {
                _3255 = texelFetch(g_lightClassification, int((((_3001 << 5u) + (_2987 << 9u)) + (_3246 << 2u)) >> 2u)).x;
                _3256 = _3255 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3256)
                {
                    frontier_phi_71_pred = _3245;
                    frontier_phi_71_pred_1 = _3244;
                    frontier_phi_71_pred_2 = _3243;
                    frontier_phi_71_pred_3 = _3242;
                    frontier_phi_71_pred_4 = _3241;
                    frontier_phi_71_pred_5 = _3240;
                }
                else
                {
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    uint _3391;
                    _3385 = _3240;
                    _3386 = _3241;
                    _3387 = _3242;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3245;
                    _3391 = _3255;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    for (;;)
                    {
                        uint _3395 = uint(findLSB(_3391)) + (_3246 << 5u);
                        uint _3392 = (_3391 + 4294967295u) & _3391;
                        uint _3397 = _3395 * 48u;
                        vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 3u)).x));
                        uint _3417 = (_3395 * 48u) + 4u;
                        vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3417)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 3u)).x));
                        uint _3436 = (_3395 * 48u) + 8u;
                        vec3 _3447 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x));
                        float _3451 = _3411.x - _2066;
                        float _3452 = _3411.y - _2067;
                        float _3453 = _3411.z - _2068;
                        float _3454 = dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453));
                        float _3457 = inversesqrt(_3454);
                        float _3458 = _3457 * _3451;
                        float _3459 = _3457 * _3452;
                        float _3460 = _3457 * _3453;
                        float _3461 = dot(vec3(_901, _904, _907), vec3(_3458, _3459, _3460));
                        float _3466 = 1.0 - (_3454 * _3411.w);
                        float _4895 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3467 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                        float _3468 = sqrt(_3454) * _3430.w;
                        float _3471 = 1.39999997615814208984375 / (_3468 + 1.39999997615814208984375);
                        float _3472 = _3471 * _3471;
                        float _3475 = ((1.0 - _3472) * _3461) + _3472;
                        float _3478 = _3468 * _3468;
                        float _3482 = ((isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0))) * _3467) / ((_3478 * 0.699999988079071044921875) + 1.0);
                        float _3486 = (-0.0) - _2066;
                        float _3487 = (-0.0) - _2067;
                        float _3488 = (-0.0) - _2068;
                        float _3492 = inversesqrt(dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488)));
                        float _3493 = _3492 * _3486;
                        float _3494 = _3492 * _3487;
                        float _3495 = _3492 * _3488;
                        float _3502 = exp2(log2(1.0 / ((_3478 * 3.5) + 5.0)) * 0.25);
                        float _3503 = 1.0 - _976;
                        float _3510 = sqrt(1.0 - ((1.0 - (_3503 * _3503)) * (1.0 - (_3502 * _3502))));
                        float _3511 = _3510 * _3510;
                        float _3512 = _3511 * _3511;
                        float _3513 = _3493 + _3458;
                        float _3514 = _3494 + _3459;
                        float _3515 = _3495 + _3460;
                        float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                        float _3523 = dot(vec3(_901, _904, _907), vec3(_3493, _3494, _3495));
                        float _4911 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3526 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                        float _3527 = dot(vec3(_901, _904, _907), vec3(_3519 * _3513, _3519 * _3514, _3519 * _3515));
                        float _4922 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3530 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                        float _3534 = ((_3530 * _3530) * (_3512 + (-1.0))) + 1.0;
                        float _3535 = _3471 * _3511;
                        float _3536 = _3535 * _3535;
                        float _3539 = ((1.0 - _3536) * _3461) + _3536;
                        float _4933 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3540 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3541 = 1.0 - _3511;
                        float _3551 = (0.5 / (((_3540 * ((_3526 * _3541) + _3511)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3511) * _3526))) * _3540;
                        float _4944 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3562 = (((_3512 * 3.1415927410125732421875) * (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0)))) / ((_3534 * _3534) * ((_3478 * 2.1991131305694580078125) + 3.141590118408203125))) * _3467;
                        _3315 = (_3482 * _3430.x) + _3388;
                        _3316 = (_3482 * _3430.y) + _3389;
                        _3317 = (_3482 * _3430.z) + _3390;
                        _3312 = (_3562 * _3447.x) + _3385;
                        _3313 = (_3562 * _3447.y) + _3386;
                        _3314 = (_3562 * _3447.z) + _3387;
                        if (_3392 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3385 = _3312;
                            _3386 = _3313;
                            _3387 = _3314;
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3317;
                            _3391 = _3392;
                        }
                    }
                    frontier_phi_71_pred = _3317;
                    frontier_phi_71_pred_1 = _3316;
                    frontier_phi_71_pred_2 = _3315;
                    frontier_phi_71_pred_3 = _3314;
                    frontier_phi_71_pred_4 = _3313;
                    frontier_phi_71_pred_5 = _3312;
                }
                _3098 = frontier_phi_71_pred;
                _3096 = frontier_phi_71_pred_1;
                _3094 = frontier_phi_71_pred_2;
                _3092 = frontier_phi_71_pred_3;
                _3090 = frontier_phi_71_pred_4;
                _3088 = frontier_phi_71_pred_5;
                uint _3247 = _3246 + 1u;
                if (_3247 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3240 = _3088;
                    _3241 = _3090;
                    _3242 = _3092;
                    _3243 = _3094;
                    _3244 = _3096;
                    _3245 = _3098;
                    _3246 = _3247;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
        }
        uvec4 _3101 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3102 = _3101.z;
        uint _3104 = (_3102 >> 8u) & 15u;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        if (((4294967295u << _3104) & _3007) == 0u)
        {
            _3208 = _3087;
            _3210 = _3089;
            _3212 = _3091;
            _3214 = _3093;
            _3216 = _3095;
            _3218 = _3097;
        }
        else
        {
            float _3233 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
            float _3234 = _3233 * _2066;
            float _3235 = _3233 * _2067;
            float _3236 = _3233 * _2068;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3104 < ((_3102 >> 12u) & 15u))
            {
                float _3209;
                float _3211;
                float _3213;
                float _3215;
                float _3217;
                float _3219;
                float _3368 = _3087;
                float _3369 = _3089;
                float _3370 = _3091;
                float _3371 = _3093;
                float _3372 = _3095;
                float _3373 = _3097;
                uint _3374 = _3104;
                uint _3383;
                bool _3384;
                for (;;)
                {
                    _3383 = texelFetch(g_lightClassification, int((((_3001 << 5u) + (_2987 << 9u)) + (_3374 << 2u)) >> 2u)).x;
                    _3384 = _3383 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3384)
                    {
                        frontier_phi_82_pred = _3373;
                        frontier_phi_82_pred_1 = _3372;
                        frontier_phi_82_pred_2 = _3371;
                        frontier_phi_82_pred_3 = _3370;
                        frontier_phi_82_pred_4 = _3369;
                        frontier_phi_82_pred_5 = _3368;
                    }
                    else
                    {
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _3874;
                        float _3589 = _3368;
                        float _3590 = _3369;
                        float _3591 = _3370;
                        float _3592 = _3371;
                        float _3593 = _3372;
                        float _3594 = _3373;
                        uint _3595 = _3383;
                        uint _3596;
                        vec4 _3621;
                        float _3622;
                        vec4 _3637;
                        vec3 _3649;
                        vec4 _3664;
                        vec4 _3679;
                        float _3725;
                        bool _3726;
                        for (;;)
                        {
                            uint _3606 = ((_3374 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3595));
                            _3596 = (_3595 + 4294967295u) & _3595;
                            uint _3608 = _3606 * 40u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            _3622 = _3621.w;
                            uint _3624 = (_3606 * 40u) + 4u;
                            _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            uint _3639 = (_3606 * 40u) + 8u;
                            _3649 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x));
                            uint _3651 = (_3606 * 40u) + 16u;
                            _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            uint _3666 = (_3606 * 40u) + 20u;
                            _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            uint _3681 = (_3606 * 40u) + 24u;
                            vec4 _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3700 = (_3606 * 40u) + 28u;
                            vec4 _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            _3725 = fma(_2068, _3713.z, fma(_2067, _3713.y, _3713.x * _2066)) + _3713.w;
                            _3726 = !((fma(_2068, _3694.z, fma(_2067, _3694.y, _3694.x * _2066)) + _3694.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3726)
                            {
                                float _3753 = _3621.x - _2066;
                                float _3754 = _3621.y - _2067;
                                float _3755 = _3621.z - _2068;
                                float _3756 = dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755));
                                float _3759 = inversesqrt(_3756);
                                float _3760 = _3759 * _3753;
                                float _3761 = _3759 * _3754;
                                float _3762 = _3759 * _3755;
                                float _3766 = 1.0 - (_3756 / (_3622 * _3622));
                                float _4955 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3767 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3771 = sqrt(_3756) * _3637.w;
                                float _3773 = 1.39999997615814208984375 / (_3771 + 1.39999997615814208984375);
                                float _3774 = _3773 * _3773;
                                float _3777 = ((1.0 - _3774) * dot(vec3(_3760, _3761, _3762), vec3(_901, _904, _907))) + _3774;
                                float _3780 = _3771 * _3771;
                                float _3784 = (fma(_2068, _3664.z, fma(_2067, _3664.y, _3664.x * _2066)) + _3664.w) / _3725;
                                float _3785 = (fma(_2068, _3679.z, fma(_2067, _3679.y, _3679.x * _2066)) + _3679.w) / _3725;
                                float _3789 = 1.0 - dot(vec2(_3784, _3785), vec2(_3784, _3785));
                                float _4971 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3790 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3791 = _3790 * (((isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0))) * _3767) / ((_3780 * 0.699999988079071044921875) + 1.0));
                                float _3803 = exp2(log2(1.0 / ((_3780 * 3.5) + 5.0)) * 0.25);
                                float _3804 = 1.0 - _976;
                                float _3811 = sqrt(1.0 - ((1.0 - (_3804 * _3804)) * (1.0 - (_3803 * _3803))));
                                float _3812 = _3811 * _3811;
                                float _3813 = _3812 * _3812;
                                float _3814 = _3760 - _3234;
                                float _3815 = _3761 - _3235;
                                float _3816 = _3762 - _3236;
                                float _3820 = inversesqrt(dot(vec3(_3814, _3815, _3816), vec3(_3814, _3815, _3816)));
                                float _3824 = dot(vec3(_901, _904, _907), vec3((-0.0) - _3234, (-0.0) - _3235, (-0.0) - _3236));
                                float _4982 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3827 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                                float _3828 = dot(vec3(_901, _904, _907), vec3(_3820 * _3814, _3820 * _3815, _3820 * _3816));
                                float _4993 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3831 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3835 = ((_3831 * _3831) * (_3813 + (-1.0))) + 1.0;
                                float _3836 = _3773 * _3812;
                                float _3837 = _3836 * _3836;
                                float _3843 = ((1.0 - _3837) * dot(vec3(_901, _904, _907), vec3(_3760, _3761, _3762))) + _3837;
                                float _5004 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3844 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3845 = 1.0 - _3812;
                                float _3855 = (0.5 / (((_3844 * ((_3827 * _3845) + _3812)) + 9.9999999392252902907785028219223e-09) + (((_3844 * _3845) + _3812) * _3827))) * _3844;
                                float _5015 = isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0));
                                float _3865 = (_3790 * _3767) * (((_3813 * 3.1415927410125732421875) * (isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0)))) / ((_3835 * _3835) * ((_3780 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3791 * _3637.z;
                                frontier_phi_88_pred_1 = _3791 * _3637.y;
                                frontier_phi_88_pred_2 = _3791 * _3637.x;
                                frontier_phi_88_pred_3 = _3865 * _3649.z;
                                frontier_phi_88_pred_4 = _3865 * _3649.y;
                                frontier_phi_88_pred_5 = _3865 * _3649.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3874 = frontier_phi_88_pred;
                            _3873 = frontier_phi_88_pred_1;
                            _3872 = frontier_phi_88_pred_2;
                            _3871 = frontier_phi_88_pred_3;
                            _3870 = frontier_phi_88_pred_4;
                            _3869 = frontier_phi_88_pred_5;
                            _3579 = _3872 + _3592;
                            _3580 = _3873 + _3593;
                            _3581 = _3874 + _3594;
                            _3576 = _3869 + _3589;
                            _3577 = _3870 + _3590;
                            _3578 = _3871 + _3591;
                            if (_3596 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3596;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3581;
                        frontier_phi_82_pred_1 = _3580;
                        frontier_phi_82_pred_2 = _3579;
                        frontier_phi_82_pred_3 = _3578;
                        frontier_phi_82_pred_4 = _3577;
                        frontier_phi_82_pred_5 = _3576;
                    }
                    _3219 = frontier_phi_82_pred;
                    _3217 = frontier_phi_82_pred_1;
                    _3215 = frontier_phi_82_pred_2;
                    _3213 = frontier_phi_82_pred_3;
                    _3211 = frontier_phi_82_pred_4;
                    _3209 = frontier_phi_82_pred_5;
                    uint _3375 = _3374 + 1u;
                    if (_3375 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3368 = _3209;
                        _3369 = _3211;
                        _3370 = _3213;
                        _3371 = _3215;
                        _3372 = _3217;
                        _3373 = _3219;
                        _3374 = _3375;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3215;
                frontier_phi_63_64_ladder_1 = _3219;
                frontier_phi_63_64_ladder_2 = _3217;
                frontier_phi_63_64_ladder_3 = _3213;
                frontier_phi_63_64_ladder_4 = _3211;
                frontier_phi_63_64_ladder_5 = _3209;
            }
            else
            {
                frontier_phi_63_64_ladder = _3093;
                frontier_phi_63_64_ladder_1 = _3097;
                frontier_phi_63_64_ladder_2 = _3095;
                frontier_phi_63_64_ladder_3 = _3091;
                frontier_phi_63_64_ladder_4 = _3089;
                frontier_phi_63_64_ladder_5 = _3087;
            }
            _3208 = frontier_phi_63_64_ladder_5;
            _3210 = frontier_phi_63_64_ladder_4;
            _3212 = frontier_phi_63_64_ladder_3;
            _3214 = frontier_phi_63_64_ladder;
            _3216 = frontier_phi_63_64_ladder_2;
            _3218 = frontier_phi_63_64_ladder_1;
        }
        float _3223 = isnan(1.0) ? _960 : (isnan(_960) ? 1.0 : min(_960, 1.0));
        _3020 = (_3223 * _3214) + _2532;
        _3022 = (_3223 * _3216) + _2534;
        _3024 = (_3223 * _3218) + _2536;
        _3026 = ((_3208 * _944) * _3223) + _2870;
        _3028 = ((_3210 * _946) * _3223) + _2872;
        _3030 = ((_3212 * _947) * _3223) + _2874;
    }
    else
    {
        _3020 = _2532;
        _3022 = _2534;
        _3024 = _2536;
        _3026 = _2870;
        _3028 = _2872;
        _3030 = _2874;
    }
    float _5031 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _5042 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _5053 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _3047 = ((isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0))) * (_3020 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _960))) + ((_3026 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1798)) * cbPerFrame._m0[3u].x);
    float _3048 = ((isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0))) * (_3022 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _960))) + ((_3028 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1798)) * cbPerFrame._m0[3u].x);
    float _3049 = ((isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_3024 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _960))) + ((_3030 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1798)) * cbPerFrame._m0[3u].x);
    uint _3050 = _256 + 6u;
    float _3058 = _882 / cbSceneParam._m0[86u].x;
    float _3059 = _883 / cbSceneParam._m0[86u].y;
    vec4 _3073 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3058, _3059, (log2((isnan(cbSceneParam._m0[77u].w) ? _804 : (isnan(_804) ? cbSceneParam._m0[77u].w : min(_804, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3075 = _3073.x;
    float _3076 = _3073.y;
    float _3077 = _3073.z;
    float _3078 = _3073.w;
    float _3150;
    float _3152;
    float _3154;
    float _3156;
    if (_804 > cbSceneParam._m0[78u].w)
    {
        float _3112 = isnan(_804) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _804 : min(cbSceneParam._m0[80u].w, _804));
        float _3113 = _3112 / _804;
        float _3124 = _3113 * _855;
        float _3125 = _856 * _3113;
        float _3126 = (-0.0) - _3125;
        float _3128 = _3113 * _857;
        float _3130 = (cbSceneParam._m0[77u].w * _3126) / _3112;
        float _3131 = _3130 + cbSceneParam._m0[79u].w;
        float _3132 = cbSceneParam._m0[79u].w - _3125;
        float _3138 = sqrt(((_3124 * _3124) + (_3125 * _3125)) + (_3128 * _3128));
        float _3141 = (1.0 - (cbSceneParam._m0[77u].w / _3112)) * _3138;
        float _3146 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3148 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3325;
        if (abs((_3126 - _3130) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3325 = ((((_3131 > 0.0) ? exp2(_3146 * _3131) : (2.0 - exp2(_3148 * _3131))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3141;
        }
        else
        {
            float _3269 = 1.0 / cbSceneParam._m0[80u].x;
            float _3270 = isnan(_3132) ? _3131 : (isnan(_3131) ? _3132 : max(_3131, _3132));
            float _3271 = isnan(_3132) ? _3131 : (isnan(_3131) ? _3132 : min(_3131, _3132));
            float _3280 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : min(_3270, 0.0));
            float _3281 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : min(_3271, 0.0));
            _3325 = ((abs(_3138 / _3126) * cbSceneParam._m0[80u].y) * ((((_3280 - _3281) * 2.0) - ((exp2(_3146 * (isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0)))) - exp2(_3146 * (isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))))) * _3269)) - ((exp2(_3148 * _3280) - exp2(_3148 * _3281)) * _3269))) + (_3141 * cbSceneParam._m0[80u].z);
        }
        vec4 _3327 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3058, _3059, 1.0), 0.0);
        float _3336 = exp2((_3325 * (-1.44269502162933349609375)) * (1.0 - _3327.w));
        float _3337 = log2(_3336);
        float _3353 = log2(_3078);
        _3150 = (exp2(_3353 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].x)) * _3327.x) / cbSceneParam._m0[78u].x)) + _3075;
        _3152 = (exp2(_3353 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].y)) * _3327.y) / cbSceneParam._m0[78u].y)) + _3076;
        _3154 = (exp2(_3353 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].z)) * _3327.z) / cbSceneParam._m0[78u].z)) + _3077;
        _3156 = _3336 * _3078;
    }
    else
    {
        _3150 = _3075;
        _3152 = _3076;
        _3154 = _3077;
        _3156 = _3078;
    }
    bool _3363;
    vec4 _3166;
    vec4 _3188;
    float _3190;
    float _3194;
    float _3195;
    float _3196;
    float _3197;
    bool _3207;
    for (;;)
    {
        _3166 = cbMatDynParam._m0[0u];
        float _3168 = roundEven(_3166.y);
        bool _3169 = _3168 == 3.0;
        float _3170 = log2(_3156);
        float _3177 = exp2(_3170 * cbSceneParam._m0[78u].x) * _3047;
        float _3178 = exp2(_3170 * cbSceneParam._m0[78u].y) * _3048;
        float _3179 = exp2(_3170 * cbSceneParam._m0[78u].z) * _3049;
        float _3186 = _871 + (-0.5);
        _3188 = cbMtdParam._m0[1u];
        _3190 = _3188.y * _3186;
        float _3193 = (_3168 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3194 = _3193 * (_3169 ? _3177 : (_3177 + (cbSceneParam._m0[72u].w * _3150)));
        _3195 = _3193 * (_3169 ? _3178 : (_3178 + (cbSceneParam._m0[72u].w * _3152)));
        _3196 = _3193 * (_3169 ? _3179 : (_3179 + (cbSceneParam._m0[72u].w * _3154)));
        _3197 = _3186 * 0.999000012874603271484375;
        _3207 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3207)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _3197) < 0.5)
            {
                _3363 = true;
                break;
            }
        }
        uint _3304 = _920 + uint(_3166.w);
        if ((cbInstanceData._m0[_3304].w < 1.0) && ((cbInstanceData._m0[_3304].w + _3197) < 0.5))
        {
            _3363 = true;
            break;
        }
        if ((_3190 + 1.0) < _3188.x)
        {
            _3363 = true;
            break;
        }
        _3363 = false;
        break;
    }
    float _3567;
    if (_3363)
    {
        discard_state = true;
        _3567 = 0.0;
    }
    else
    {
        _3567 = cbInstanceData._m0[_3050].w;
    }
    SV_Target.x = _3194;
    SV_Target.y = _3195;
    SV_Target.z = _3196;
    SV_Target.w = _3567;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3050].w;
    discard_exit();
}


