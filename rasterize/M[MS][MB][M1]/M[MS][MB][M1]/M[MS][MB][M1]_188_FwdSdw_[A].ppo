#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1481;
float _4144;
float _4145;
float _4146;
float _4147;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _311.x * cbMtdParam._m0[11u].x;
    float _318 = _311.y * cbMtdParam._m0[11u].y;
    float _319 = _311.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _379 = _377.x;
    float _391 = dot(vec4(_379, _377.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _408 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_379 - _391) * cbMtdParam._m0[24u].y) + _391) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4156 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _416 = (_409 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _417 = (_409 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _418 = (_409 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _435 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _457 = _455.x;
    float _467 = dot(vec4(_457, _455.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _481 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_457 - _467) * cbMtdParam._m0[24u].y) + _467) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4167 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _489 = (_482 * ((_435.x * cbMtdParam._m0[13u].x) - _416)) + _416;
    float _490 = (_482 * ((_435.y * cbMtdParam._m0[13u].y) - _417)) + _417;
    float _491 = (_482 * ((_435.z * cbMtdParam._m0[13u].z) - _418)) + _418;
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _550 = _548.x;
    float _551 = _548.y;
    float _552 = _548.z;
    float _559 = ((_531.x - _550) * _409) + _550;
    float _560 = ((_531.y - _551) * _409) + _551;
    float _561 = ((_531.z - _552) * _409) + _552;
    vec4 _573 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _290) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _291) + cbTextureTilingScale._m0[2u].w));
    float _586 = ((_573.z - _561) * _482) + _561;
    float _589 = ((((_573.x - _559) * _482) + _559) * 2.0) + (-1.0);
    float _590 = ((((_573.y - _560) * _482) + _560) * 2.0) + (-1.0);
    float _591 = dot(vec2(_589, _590), vec2(_589, _590));
    float _4178 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _596 = sqrt(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))));
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _627 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _629 = _627.x;
    float _630 = 1.0 - _629;
    float _636 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _639 = ((isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : min(_636, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _648 = (_639 - ((((((_629 - _630) * cbMtdParam._m0[24u].z) + _630) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _639))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4199 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _649 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _656 = (_649 * (cbMtdParam._m0[17u].x - _489)) + _489;
    float _657 = (_649 * (cbMtdParam._m0[17u].y - _490)) + _490;
    float _658 = (_649 * (cbMtdParam._m0[17u].z - _491)) + _491;
    vec4 _670 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _672 = _670.x;
    float _673 = 1.0 - _672;
    float _700 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_672 - _673) * cbMtdParam._m0[24u].w) + _673) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4210 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _709 = ((((cbMtdParam._m0[10u].x - _656) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _701) + _656;
    float _710 = ((((cbMtdParam._m0[10u].y - _657) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _701) + _657;
    float _711 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _658)) * _701) + _658;
    vec4 _737 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _739 = _737.x;
    float _757 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _290) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _291) + cbTextureTilingScale._m0[9u].w)).x - _739) * _409) + _739;
    float _774 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _290) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _291) + cbTextureTilingScale._m0[21u].w)).x - _757) * _482) + _757;
    float _778 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _774) * cbMtdParam._m0[19u].z) + _774;
    float _780 = _778 - (_778 * _649);
    float _782 = _780 - (_780 * _701);
    float _787 = (((_508.z - _586) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _586;
    vec4 _801 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _808 = (_801.x * 2.0) + (-1.0);
    float _809 = (_801.y * 2.0) + (-1.0);
    float _810 = dot(vec2(_808, _809), vec2(_808, _809));
    float _4221 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _818 = (_649 * (_801.z - _787)) + _787;
    float _821 = ((cbMtdParam._m0[23u].y - _818) * _701) + _818;
    vec4 _840 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _846 = (_840.x * 2.0) + (-1.0);
    float _847 = (_840.y * 2.0) + (-1.0);
    float _848 = dot(vec2(_846, _847), vec2(_846, _847));
    float _4232 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _858 = _589 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_508.x * 2.0) + (-1.0)));
    float _859 = _590 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_508.y * 2.0) + (-1.0)));
    float _871 = (((_808 - _858) + (cbMtdParam._m0[21u].x * _858)) * _649) + _858;
    float _872 = (((_809 - _859) + (cbMtdParam._m0[21u].x * _859)) * _649) + _859;
    float _873 = (_649 * (sqrt(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) - _596)) + _596;
    float _884 = (((_846 - _871) + (_871 * cbMtdParam._m0[22u].z)) * _701) + _871;
    float _885 = (((_847 - _872) + (_872 * cbMtdParam._m0[22u].z)) * _701) + _872;
    float _886 = ((sqrt(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) - _873) * _701) + _873;
    float _888 = cbMtdParam._m0[22u].x + _609.w;
    float _891 = fma(_886, _258 * NORMAL.x, fma(_885, _265 * TANGENT.x, (_251 * _243) * _884));
    float _894 = fma(_886, _258 * NORMAL.y, fma(_885, _265 * TANGENT.y, (_251 * _244) * _884));
    float _897 = fma(_886, _258 * NORMAL.z, fma(_885, _265 * TANGENT.z, (_251 * _245) * _884));
    float _901 = inversesqrt(dot(vec3(_891, _894, _897), vec3(_891, _894, _897)));
    float _902 = _901 * _891;
    float _903 = _901 * _894;
    float _904 = _901 * _897;
    float _4243 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _905 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _4254 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4265 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4276 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4287 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4298 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _910 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _924 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _974 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _964);
    float _975 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _964);
    float _976 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _964);
    float _980 = inversesqrt(dot(vec3(_974, _975, _976), vec3(_974, _975, _976)));
    float _981 = _974 * _980;
    float _982 = _975 * _980;
    float _983 = _976 * _980;
    vec4 _988 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _990 = _988.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1162 = sqrt(((_974 * _974) + (_975 * _975)) + (_976 * _976));
        float _1168 = (cbMatDynParam._m0[5u].x * _1162) + cbMatDynParam._m0[5u].y;
        float _4309 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1173 = (cbMatDynParam._m0[5u].z * _1162) + cbMatDynParam._m0[5u].w;
        float _4320 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) - _1169)) + _1169) < ((_990 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1001 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1002 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1020 = fma(_904, cbSceneParam._m0[5u].z, fma(_903, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _902));
    float _1023 = fma(_904, cbSceneParam._m0[6u].z, fma(_903, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _902));
    float _1026 = fma(_904, cbSceneParam._m0[7u].z, fma(_903, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _902));
    uint _1039 = _271 + 9u;
    uint _1040 = _1039 + uint(cbMatDynParam._m0[0u].w);
    float _1046 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * cbInstanceData._m0[_1040].x;
    float _1047 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * cbInstanceData._m0[_1040].y;
    float _1048 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * cbInstanceData._m0[_1040].z;
    float _4331 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _4342 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _4353 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _1052 = 1.0 - _910;
    float _1053 = _1049 * _1052;
    float _1054 = _1050 * _1052;
    float _1055 = _1051 * _1052;
    float _1060 = (_1049 + (-0.039999999105930328369140625)) * _910;
    float _1061 = (_1050 + (-0.039999999105930328369140625)) * _910;
    float _1062 = (_1051 + (-0.039999999105930328369140625)) * _910;
    float _1063 = _1060 + 0.039999999105930328369140625;
    float _1065 = _1061 + 0.039999999105930328369140625;
    float _1066 = _1062 + 0.039999999105930328369140625;
    vec4 _1075 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1001, cbSceneParam._m0[86u].y * _1002));
    float _1079 = ((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * TEXCOORD_5.w) * _1075.x;
    float _1080 = dot(vec3(_902, _903, _904), vec3(_981, _982, _983));
    float _1083 = _1080 * 2.0;
    float _1087 = (_1083 * _902) - _981;
    float _1088 = (_1083 * _903) - _982;
    float _1089 = (_1083 * _904) - _983;
    float _1093 = abs(dot(vec3(_981, _982, _983), vec3(_902, _903, _904)));
    float _4364 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1095 = sqrt(_905);
    float _1108 = exp2((_1095 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1095 * 3.0));
    float _1114 = (1.0 - _1108) * ((_1095 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1115 = _1108 * _1095;
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1151 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1480;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1205 = fma(_1151, cbModelParam._m0[26u].z, fma(_1147, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1143));
        float _1209 = fma(_1151, cbModelParam._m0[27u].z, fma(_1147, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1143));
        float _1213 = fma(_1151, cbModelParam._m0[28u].z, fma(_1147, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1143));
        float _1238 = _1143 + _902;
        float _1239 = _1147 + _903;
        float _1240 = _1151 + _904;
        float _1250 = fma(_1240, cbModelParam._m0[26u].z, fma(_1239, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1238)) - _1205;
        float _1251 = fma(_1240, cbModelParam._m0[27u].z, fma(_1239, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1238)) - _1209;
        float _1252 = fma(_1240, cbModelParam._m0[28u].z, fma(_1239, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1238)) - _1213;
        float _1256 = inversesqrt(dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252)));
        float _1269 = ((_1256 * _1250) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1205 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1256 * _1251) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1209 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1256 * _1252) / cbModelParam._m0[34u].z) + ((((((_1213 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        float _1308 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1274.x + (-0.5));
        float _1310 = _1308 * (_1274.y + (-0.5));
        float _1311 = _1308 * (_1274.z + (-0.5));
        float _1318 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1281.x + (-0.5));
        float _1320 = _1318 * (_1281.y + (-0.5));
        float _1321 = _1318 * (_1281.z + (-0.5));
        float _1328 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1288.x + (-0.5));
        float _1330 = _1328 * (_1288.y + (-0.5));
        float _1331 = _1328 * (_1288.z + (-0.5));
        float _1338 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1295.x + (-0.5));
        float _1340 = _1338 * (_1295.y + (-0.5));
        float _1341 = _1338 * (_1295.z + (-0.5));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = _1309 * 0.5;
        float _1346 = _1319 * 0.5;
        float _1347 = _1329 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1362 = (dot(vec3(_902, _903, _904), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4390 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1372 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4401 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4412 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_1374 + 1.0))) + _1379) * _1342;
        float _1389 = _1310 * 0.5;
        float _1390 = _1320 * 0.5;
        float _1391 = _1330 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_902, _903, _904), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4423 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4434 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4445 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_1416 + 1.0))) + _1421) * _1343;
        float _1431 = _1311 * 0.5;
        float _1432 = _1321 * 0.5;
        float _1433 = _1331 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_902, _903, _904), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4478 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1458 + 1.0))) + _1463) * _1344;
        _1480 = _1311;
        _1482 = _1310;
        _1483 = _1309;
        _1484 = _1321;
        _1485 = _1320;
        _1486 = _1319;
        _1487 = _1331;
        _1488 = _1330;
        _1489 = _1329;
        _1490 = _1344;
        _1491 = _1343;
        _1492 = _1342;
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1494 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
    }
    else
    {
        _1480 = _1481;
        _1482 = _1481;
        _1483 = _1481;
        _1484 = _1481;
        _1485 = _1481;
        _1486 = _1481;
        _1487 = _1481;
        _1488 = _1481;
        _1489 = _1481;
        _1490 = _1481;
        _1491 = _1481;
        _1492 = _1481;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1522 = fma(_1151, cbModelParam._m0[30u].z, fma(_1147, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1143));
        float _1526 = fma(_1151, cbModelParam._m0[31u].z, fma(_1147, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1143));
        float _1530 = fma(_1151, cbModelParam._m0[32u].z, fma(_1147, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1143));
        float _1553 = _1143 + _902;
        float _1554 = _1147 + _903;
        float _1555 = _1151 + _904;
        float _1565 = fma(_1555, cbModelParam._m0[30u].z, fma(_1554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1553)) - _1522;
        float _1566 = fma(_1555, cbModelParam._m0[31u].z, fma(_1554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1553)) - _1526;
        float _1567 = fma(_1555, cbModelParam._m0[32u].z, fma(_1554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1553)) - _1530;
        float _1571 = inversesqrt(dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567)));
        float _1584 = ((_1571 * _1565) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1522 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1585 = ((_1571 * _1566) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1526 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1586 = ((_1571 * _1567) / cbModelParam._m0[35u].z) + ((((((_1530 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        float _1621 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1588.x + (-0.5));
        float _1623 = _1621 * (_1588.y + (-0.5));
        float _1624 = _1621 * (_1588.z + (-0.5));
        float _1631 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1595.x + (-0.5));
        float _1633 = _1631 * (_1595.y + (-0.5));
        float _1634 = _1631 * (_1595.z + (-0.5));
        float _1641 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1602.x + (-0.5));
        float _1643 = _1641 * (_1602.y + (-0.5));
        float _1644 = _1641 * (_1602.z + (-0.5));
        float _1651 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1609.x + (-0.5));
        float _1653 = _1651 * (_1609.y + (-0.5));
        float _1654 = _1651 * (_1609.z + (-0.5));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = _1622 * 0.5;
        float _1659 = _1632 * 0.5;
        float _1660 = _1642 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_902, _903, _904), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4519 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4530 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4541 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_1685 + 1.0))) + _1690) * _1655;
        float _1700 = _1623 * 0.5;
        float _1701 = _1633 * 0.5;
        float _1702 = _1643 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_902, _903, _904), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4552 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4563 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4574 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_1727 + 1.0))) + _1732) * _1656;
        float _1742 = _1624 * 0.5;
        float _1743 = _1634 * 0.5;
        float _1744 = _1644 * 0.5;
        float _1745 = dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744));
        float _1750 = (_1745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1745);
        float _1758 = (dot(vec3(_902, _903, _904), vec3(_1750 * _1742, _1750 * _1743, _1750 * _1744)) + 1.0) * 0.5;
        float _4585 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1767 = sqrt(((_1743 * _1743) + (_1742 * _1742)) + (_1744 * _1744)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4596 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _1769 = _1768 * 2.0;
        float _1773 = (1.0 - _1768) / (_1768 + 1.0);
        float _4607 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _1783 = ((((1.0 - _1774) * (_1769 + 2.0)) * exp2(log2(isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_1769 + 1.0))) + _1774) * _1657;
        _1791 = _1624;
        _1792 = _1623;
        _1793 = _1622;
        _1794 = _1634;
        _1795 = _1633;
        _1796 = _1632;
        _1797 = _1644;
        _1798 = _1643;
        _1799 = _1642;
        _1800 = _1657;
        _1801 = _1656;
        _1802 = _1655;
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)));
    }
    else
    {
        _1791 = _1481;
        _1792 = _1481;
        _1793 = _1481;
        _1794 = _1481;
        _1795 = _1481;
        _1796 = _1481;
        _1797 = _1481;
        _1798 = _1481;
        _1799 = _1481;
        _1800 = _1481;
        _1801 = _1481;
        _1802 = _1481;
        _1803 = 0.0;
        _1804 = 0.0;
        _1805 = 0.0;
    }
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1493)) + _1493;
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1494)) + _1494;
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1495)) + _1495;
    float _1838 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1841 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1844 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1815));
    float _1859 = _1087 * 0.5;
    float _1860 = _1088 * 0.5;
    float _1861 = _1089 * 0.5;
    float _1862 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1865 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1868 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1902;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1875 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1480, _1484, _1487, _1490));
        float _1879 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1482, _1485, _1488, _1491));
        float _1883 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1483, _1486, _1489, _1492));
        float _1890 = dot(vec4(cbModelParam._m0[39u]), vec4(_1859, _1860, _1861, 1.0));
        _1902 = dot(vec3(isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1890) ? 0.0 : (isnan(0.0) ? _1890 : max(0.0, _1890))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1902 = 1.0;
    }
    float _1913;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1904 = dot(vec4(cbModelParam._m0[40u]), vec4(_1859, _1860, _1861, 1.0));
        _1913 = dot(vec3(isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1904) ? 0.0 : (isnan(0.0) ? _1904 : max(0.0, _1904))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1913 = 1.0;
    }
    float _1917 = (_1913 * cbModelParam._m0[1u].x) + (_1902 * (1.0 - cbModelParam._m0[1u].x));
    float _1927 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _905);
    float _1928 = isnan(_1927) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1927 : min(cbModelParam._m0[25u].z, _1927));
    float _2009;
    float _2011;
    float _2013;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1976 = fma(_1151, cbModelParam._m0[13u].z, fma(_1147, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1143)) + cbModelParam._m0[13u].w;
        float _1980 = fma(_1151, cbModelParam._m0[14u].z, fma(_1147, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1143)) + cbModelParam._m0[14u].w;
        float _1984 = fma(_1151, cbModelParam._m0[15u].z, fma(_1147, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1143)) + cbModelParam._m0[15u].w;
        float _1987 = fma(_1089, cbModelParam._m0[13u].z, fma(_1088, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1087));
        float _1990 = fma(_1089, cbModelParam._m0[14u].z, fma(_1088, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1087));
        float _1993 = fma(_1089, cbModelParam._m0[15u].z, fma(_1088, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1087));
        float _2021;
        if (_1987 > 0.0)
        {
            _2021 = abs((1.0 - _1976) / _1987);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1976 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2021 = frontier_phi_17_15_ladder;
        }
        float _2193;
        if (_1990 > 0.0)
        {
            _2193 = abs((1.0 - _1980) / _1990);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1980 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2193 = frontier_phi_26_22_ladder;
        }
        float _2488;
        if (_1993 > 0.0)
        {
            _2488 = abs((1.0 - _1984) / _1993);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1984 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2488 = frontier_phi_38_33_ladder;
        }
        float _2490 = isnan(_2193) ? _2021 : (isnan(_2021) ? _2193 : min(_2021, _2193));
        float _2491 = isnan(_2488) ? _2490 : (isnan(_2490) ? _2488 : min(_2490, _2488));
        float _2495 = (_2491 * _1987) + _1976;
        float _2496 = (_2491 * _1990) + _1980;
        float _2497 = (_2491 * _1993) + _1984;
        float _2498 = _2491 * 9.9999997473787516355514526367188e-05;
        float _2500 = (-1.0) - _2498;
        float _2502 = _2498 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2497 > _2502) || ((_2497 < _2500) || ((_2496 > _2502) || ((_2496 < _2500) || ((_2495 < _2500) || (_2495 > _2502))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2497, cbModelParam._m0[9u].z, fma(_2496, cbModelParam._m0[9u].y, _2495 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2497, cbModelParam._m0[10u].z, fma(_2496, cbModelParam._m0[10u].y, _2495 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2497, cbModelParam._m0[11u].z, fma(_2496, cbModelParam._m0[11u].y, _2495 * cbModelParam._m0[11u].x))), _1928);
            frontier_phi_16_38_ladder = _2642.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2642.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2642.x * cbModelParam._m0[1u].y;
        }
        _2009 = frontier_phi_16_38_ladder_2;
        _2011 = frontier_phi_16_38_ladder_1;
        _2013 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1997 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1087, _1088, _1089), _1928);
        _2009 = _1997.x * cbModelParam._m0[1u].y;
        _2011 = _1997.y * cbModelParam._m0[1u].y;
        _2013 = _1997.z * cbModelParam._m0[1u].y;
    }
    float _2017 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _905);
    float _2018 = isnan(_2017) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2017 : min(cbModelParam._m0[25u].w, _2017));
    float _2108;
    float _2110;
    float _2112;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2072 = fma(_1151, cbModelParam._m0[21u].z, fma(_1147, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1143)) + cbModelParam._m0[21u].w;
        float _2076 = fma(_1151, cbModelParam._m0[22u].z, fma(_1147, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1143)) + cbModelParam._m0[22u].w;
        float _2080 = fma(_1151, cbModelParam._m0[23u].z, fma(_1147, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1143)) + cbModelParam._m0[23u].w;
        float _2083 = fma(_1089, cbModelParam._m0[21u].z, fma(_1088, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1087));
        float _2086 = fma(_1089, cbModelParam._m0[22u].z, fma(_1088, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1087));
        float _2089 = fma(_1089, cbModelParam._m0[23u].z, fma(_1088, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1087));
        float _2198;
        if (_2083 > 0.0)
        {
            _2198 = abs((1.0 - _2072) / _2083);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2072 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2198 = frontier_phi_28_24_ladder;
        }
        float _2515;
        if (_2086 > 0.0)
        {
            _2515 = abs((1.0 - _2076) / _2086);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2076 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2515 = frontier_phi_40_35_ladder;
        }
        float _2853;
        if (_2089 > 0.0)
        {
            _2853 = abs((1.0 - _2080) / _2089);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2080 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2853 = frontier_phi_50_47_ladder;
        }
        float _2855 = isnan(_2515) ? _2198 : (isnan(_2198) ? _2515 : min(_2198, _2515));
        float _2856 = isnan(_2853) ? _2855 : (isnan(_2855) ? _2853 : min(_2855, _2853));
        float _2860 = (_2856 * _2083) + _2072;
        float _2861 = (_2856 * _2086) + _2076;
        float _2862 = (_2856 * _2089) + _2080;
        float _2863 = _2856 * 9.9999997473787516355514526367188e-05;
        float _2864 = (-1.0) - _2863;
        float _2866 = _2863 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2862 > _2866) || ((_2862 < _2864) || ((_2861 > _2866) || ((_2861 < _2864) || ((_2860 < _2864) || (_2860 > _2866))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2984 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2862, cbModelParam._m0[17u].z, fma(_2861, cbModelParam._m0[17u].y, _2860 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2862, cbModelParam._m0[18u].z, fma(_2861, cbModelParam._m0[18u].y, _2860 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2862, cbModelParam._m0[19u].z, fma(_2861, cbModelParam._m0[19u].y, _2860 * cbModelParam._m0[19u].x))), _2018);
            frontier_phi_25_50_ladder = _2984.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2984.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2984.x * cbModelParam._m0[1u].z;
        }
        _2108 = frontier_phi_25_50_ladder_2;
        _2110 = frontier_phi_25_50_ladder_1;
        _2112 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2092 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1087, _1088, _1089), _2018);
        _2108 = _2092.x * cbModelParam._m0[1u].z;
        _2110 = _2092.y * cbModelParam._m0[1u].z;
        _2112 = _2092.z * cbModelParam._m0[1u].z;
    }
    float _2125 = (((_1114 * _1063) + _1115) * _1079) * ((cbModelParam._m0[1u].w * (_2108 - _2009)) + _2009);
    float _2127 = (((_1114 * _1065) + _1115) * _1079) * ((cbModelParam._m0[1u].w * (_2110 - _2011)) + _2011);
    float _2129 = (((_1114 * _1066) + _1115) * _1079) * ((cbModelParam._m0[1u].w * (_2112 - _2013)) + _2013);
    float _2132 = fma(_2129, cbSceneParam._m0[89u].z, fma(_2127, cbSceneParam._m0[89u].y, _2125 * cbSceneParam._m0[89u].x));
    float _2135 = fma(_2129, cbSceneParam._m0[90u].z, fma(_2127, cbSceneParam._m0[90u].y, _2125 * cbSceneParam._m0[90u].x));
    float _2138 = fma(_2129, cbSceneParam._m0[91u].z, fma(_2127, cbSceneParam._m0[91u].y, _2125 * cbSceneParam._m0[91u].x));
    float _2172 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2176 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2180 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2184 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2185 = _2172 / _2184;
    float _2186 = _2176 / _2184;
    float _2187 = _2180 / _2184;
    float _2334;
    float _2335;
    float _2336;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2214 = ((uint(_2187 > cbSceneParam._m0[59u].y) + uint(_2187 > cbSceneParam._m0[59u].x)) + uint(_2187 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2215 = _2214 + 43u;
        uint _2223 = _2214 + 44u;
        uint _2231 = _2214 + 45u;
        uint _2239 = _2214 + 46u;
        float _2250 = fma(_2184, cbSceneParam._m0[_2215].w, fma(_2180, cbSceneParam._m0[_2215].z, fma(_2176, cbSceneParam._m0[_2215].y, _2172 * cbSceneParam._m0[_2215].x)));
        float _2254 = fma(_2184, cbSceneParam._m0[_2223].w, fma(_2180, cbSceneParam._m0[_2223].z, fma(_2176, cbSceneParam._m0[_2223].y, _2172 * cbSceneParam._m0[_2223].x)));
        float _2262 = fma(_2184, cbSceneParam._m0[_2239].w, fma(_2180, cbSceneParam._m0[_2239].z, fma(_2176, cbSceneParam._m0[_2239].y, _2172 * cbSceneParam._m0[_2239].x)));
        float _2267 = cbSceneParam._m0[33u].z * _2262;
        float _2269 = cbSceneParam._m0[33u].w * _2262;
        float _2272 = fma(_2184, cbSceneParam._m0[_2231].w, fma(_2180, cbSceneParam._m0[_2231].z, fma(_2176, cbSceneParam._m0[_2231].y, _2172 * cbSceneParam._m0[_2231].x))) / _2262;
        float _2320 = (cbSceneParam._m0[33u].x - sqrt(((_2186 * _2186) + (_2185 * _2185)) + (_2187 * _2187))) * cbSceneParam._m0[33u].y;
        float _4733 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2327 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2267 + _2250) / _2262, (_2269 + _2254) / _2262), _2272), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2269 + _2250) / _2262, (_2254 - _2267) / _2262), _2272), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2250 - _2267) / _2262, (_2254 - _2269) / _2262), _2272), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2250 - _2269) / _2262, (_2267 + _2254) / _2262), _2272), 0.0)).x), vec4(0.25)));
        _2334 = 1.0 - (_2327 * cbSceneParam._m0[34u].x);
        _2335 = 1.0 - (_2327 * cbSceneParam._m0[34u].y);
        _2336 = 1.0 - (_2327 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2334 = 1.0;
        _2335 = 1.0;
        _2336 = 1.0;
    }
    float _2400;
    float _2402;
    float _2404;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2388 = fma(_2184, cbSceneParam._m0[63u].w, fma(_2180, cbSceneParam._m0[63u].z, fma(_2176, cbSceneParam._m0[63u].y, _2172 * cbSceneParam._m0[63u].x)));
        float _2389 = fma(_2184, cbSceneParam._m0[60u].w, fma(_2180, cbSceneParam._m0[60u].z, fma(_2176, cbSceneParam._m0[60u].y, _2172 * cbSceneParam._m0[60u].x))) / _2388;
        float _2390 = fma(_2184, cbSceneParam._m0[61u].w, fma(_2180, cbSceneParam._m0[61u].z, fma(_2176, cbSceneParam._m0[61u].y, _2172 * cbSceneParam._m0[61u].x))) / _2388;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2389 >= cbSceneParam._m0[64u].x) && (_2390 >= cbSceneParam._m0[64u].y)) && (_2389 <= cbSceneParam._m0[64u].z)) && (_2390 <= cbSceneParam._m0[64u].w))
        {
            float _2528 = fma(_2184, cbSceneParam._m0[62u].w, fma(_2180, cbSceneParam._m0[62u].z, fma(_2176, cbSceneParam._m0[62u].y, _2172 * cbSceneParam._m0[62u].x))) / _2388;
            float _2532 = isnan(cbSceneParam._m0[41u].w) ? _2528 : (isnan(_2528) ? cbSceneParam._m0[41u].w : max(_2528, cbSceneParam._m0[41u].w));
            float _2575 = (cbSceneParam._m0[33u].x - sqrt(((_2186 * _2186) + (_2185 * _2185)) + (_2187 * _2187))) * cbSceneParam._m0[33u].y;
            float _4749 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
            float _2582 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2389, cbSceneParam._m0[33u].w + _2390), _2532), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2389, _2390 - cbSceneParam._m0[33u].z), _2532), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2389 - cbSceneParam._m0[33u].z, _2390 - cbSceneParam._m0[33u].w), _2532), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2389 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2390), _2532), 0.0)).x), vec4(0.25)));
            float _2586 = 1.0 - (_2582 * cbSceneParam._m0[34u].x);
            float _2587 = 1.0 - (_2582 * cbSceneParam._m0[34u].y);
            float _2588 = 1.0 - (_2582 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2588) ? _2336 : (isnan(_2336) ? _2588 : min(_2336, _2588));
            frontier_phi_37_36_ladder_1 = isnan(_2587) ? _2335 : (isnan(_2335) ? _2587 : min(_2335, _2587));
            frontier_phi_37_36_ladder_2 = isnan(_2586) ? _2334 : (isnan(_2334) ? _2586 : min(_2334, _2586));
        }
        else
        {
            frontier_phi_37_36_ladder = _2336;
            frontier_phi_37_36_ladder_1 = _2335;
            frontier_phi_37_36_ladder_2 = _2334;
        }
        _2400 = frontier_phi_37_36_ladder_2;
        _2402 = frontier_phi_37_36_ladder_1;
        _2404 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2400 = _2334;
        _2402 = _2335;
        _2404 = _2336;
    }
    uvec4 _2409 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2411 = _2409.x * 14u;
    uint _2412 = _2411 + 13u;
    float _2419 = _1079 + (-1.0);
    float _2424 = (cbLight._m0[_2412].x * _2419) + 1.0;
    float _2425 = (cbLight._m0[_2412].y * _2419) + 1.0;
    float _2426 = (cbLight._m0[_2412].z * _2419) + 1.0;
    float _2427 = (cbLight._m0[_2412].w * _2419) + 1.0;
    uint _2428 = _2411 + 5u;
    float _2434 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
    uint _2438 = _2411 + 4u;
    float _2447 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
    uint _2451 = _2411 | 1u;
    float _2462 = dot(vec3(cbLight._m0[_2411].xyz), vec3(_902, _903, _904));
    float _2465 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_902, _903, _904));
    float _4785 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _4796 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2470 = (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * 0.3183098733425140380859375;
    float _2472 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * 0.3183098733425140380859375;
    float _2479 = ((cbLight._m0[_2428].x * _2434) * _2472) + (((cbLight._m0[_2438].x * _2400) * _2447) * _2470);
    float _2480 = ((_2434 * cbLight._m0[_2428].y) * _2472) + (((cbLight._m0[_2438].y * _2402) * _2447) * _2470);
    float _2481 = ((_2434 * cbLight._m0[_2428].z) * _2472) + (((cbLight._m0[_2438].z * _2404) * _2447) * _2470);
    uvec4 _2485 = floatBitsToUint(cbLight._m0[_2411 + 12u]);
    bool _2487 = _2485.x == 0u;
    float _2589;
    float _2591;
    float _2593;
    if (_2487)
    {
        _2589 = _2479;
        _2591 = _2480;
        _2593 = _2481;
    }
    else
    {
        uint _2597 = _2411 + 6u;
        float _2613 = (dot(vec3(cbLight._m0[_2411 + 2u].xyz), vec3(_902, _903, _904)) * 0.5) + 0.5;
        float _2614 = _2613 * _2613;
        float _4807 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2615 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
        float _2616 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
        _2589 = (((cbLight._m0[_2597].x * 0.3183098733425140380859375) * _2615) * _2616) + _2479;
        _2591 = (((cbLight._m0[_2597].y * 0.3183098733425140380859375) * _2615) * _2616) + _2480;
        _2593 = (((cbLight._m0[_2597].z * 0.3183098733425140380859375) * _2615) * _2616) + _2481;
    }
    bool _2596 = _2485.y == 0u;
    float _2651;
    float _2653;
    float _2655;
    if (_2596)
    {
        _2651 = _2589;
        _2653 = _2591;
        _2655 = _2593;
    }
    else
    {
        uint _2824 = _2411 + 7u;
        float _2840 = (dot(vec3(cbLight._m0[_2411 + 3u].xyz), vec3(_902, _903, _904)) * 0.5) + 0.5;
        float _2841 = _2840 * _2840;
        float _4823 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2842 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2843 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
        _2651 = (((cbLight._m0[_2824].x * 0.3183098733425140380859375) * _2842) * _2843) + _2589;
        _2653 = (((cbLight._m0[_2824].y * 0.3183098733425140380859375) * _2842) * _2843) + _2591;
        _2655 = (((cbLight._m0[_2824].z * 0.3183098733425140380859375) * _2842) * _2843) + _2593;
    }
    uint _2658 = _2411 + 8u;
    float _2671 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2411].w)) * _905) * 0.949999988079071044921875);
    float _2672 = _2671 * _2671;
    float _2673 = cbLight._m0[_2411].x + _981;
    float _2674 = cbLight._m0[_2411].y + _982;
    float _2675 = cbLight._m0[_2411].z + _983;
    float _2679 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
    float _2680 = _2679 * _2673;
    float _2681 = _2679 * _2674;
    float _2682 = _2679 * _2675;
    float _2683 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2411].xyz));
    float _4839 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2686 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
    float _4850 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _2687 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
    float _2688 = dot(vec3(_902, _903, _904), vec3(_2680, _2681, _2682));
    float _4861 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2691 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
    float _2692 = dot(vec3(cbLight._m0[_2411].xyz), vec3(_2680, _2681, _2682));
    float _4872 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2696 = _2672 * _2672;
    float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
    float _2708 = exp2(log2(1.0 - (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) * 5.0);
    float _2709 = 0.959999978542327880859375 - _1060;
    float _2711 = 0.959999978542327880859375 - _1061;
    float _2712 = 0.959999978542327880859375 - _1062;
    float _2719 = 1.0 - _2672;
    float _2730 = (0.5 / (((_2687 * ((_2686 * _2719) + _2672)) + 9.9999999392252902907785028219223e-09) + (((_2687 * _2719) + _2672) * _2686))) * _2686;
    float _4883 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
    float _2732 = (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
    uint _2746 = _2411 + 9u;
    float _2757 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2451].w)) * _905) * 0.949999988079071044921875);
    float _2758 = _2757 * _2757;
    float _2759 = cbLight._m0[_2451].x + _981;
    float _2760 = cbLight._m0[_2451].y + _982;
    float _2761 = cbLight._m0[_2451].z + _983;
    float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
    float _2766 = _2765 * _2759;
    float _2767 = _2765 * _2760;
    float _2768 = _2765 * _2761;
    float _2769 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2451].xyz));
    float _4894 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
    float _2772 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
    float _2773 = dot(vec3(_902, _903, _904), vec3(_2766, _2767, _2768));
    float _4905 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
    float _2776 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
    float _2777 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_2766, _2767, _2768));
    float _4916 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
    float _2781 = _2758 * _2758;
    float _2785 = ((_2776 * _2776) * (_2781 + (-1.0))) + 1.0;
    float _2792 = exp2(log2(1.0 - (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0)))) * 5.0);
    float _2799 = 1.0 - _2758;
    float _2809 = (0.5 / (((_2687 * ((_2772 * _2799) + _2758)) + 9.9999999392252902907785028219223e-09) + (((_2687 * _2799) + _2758) * _2772))) * _2772;
    float _4927 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
    float _2811 = (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2781 / ((_2785 * _2785) * 3.141590118408203125));
    float _2821 = (((((_2792 * _2709) + _1063) * cbLight._m0[_2746].x) * _2811) * _2434) + ((((cbLight._m0[_2658].x * _2400) * ((_2708 * _2709) + _1063)) * _2732) * _2447);
    float _2822 = (((((_2792 * _2711) + _1065) * cbLight._m0[_2746].y) * _2811) * _2434) + ((((cbLight._m0[_2658].y * _2402) * ((_2708 * _2711) + _1065)) * _2732) * _2447);
    float _2823 = (((((_2792 * _2712) + _1066) * cbLight._m0[_2746].z) * _2811) * _2434) + ((((cbLight._m0[_2658].z * _2404) * ((_2708 * _2712) + _1066)) * _2732) * _2447);
    float _2879;
    float _2881;
    float _2883;
    if (_2487)
    {
        _2879 = _2821;
        _2881 = _2822;
        _2883 = _2823;
    }
    else
    {
        uint _2885 = _2411 + 2u;
        uint _2889 = _2411 + 10u;
        float _2903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2885].w)) * _905) * 0.949999988079071044921875);
        float _2904 = _2903 * _2903;
        float _2905 = cbLight._m0[_2885].x + _981;
        float _2906 = cbLight._m0[_2885].y + _982;
        float _2907 = cbLight._m0[_2885].z + _983;
        float _2911 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
        float _2912 = _2911 * _2905;
        float _2913 = _2911 * _2906;
        float _2914 = _2911 * _2907;
        float _2915 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2885].xyz));
        float _4938 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2918 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
        float _2919 = dot(vec3(_902, _903, _904), vec3(_2912, _2913, _2914));
        float _4949 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2922 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
        float _2923 = dot(vec3(cbLight._m0[_2885].xyz), vec3(_2912, _2913, _2914));
        float _4960 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2927 = _2904 * _2904;
        float _2931 = ((_2922 * _2922) * (_2927 + (-1.0))) + 1.0;
        float _2938 = exp2(log2(1.0 - (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0)))) * 5.0);
        float _2945 = 1.0 - _2904;
        float _2955 = (0.5 / (((_2687 * ((_2918 * _2945) + _2904)) + 9.9999999392252902907785028219223e-09) + (((_2687 * _2945) + _2904) * _2918))) * _2918;
        float _4971 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2957 = (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0))) * (_2927 / ((_2931 * _2931) * 3.141590118408203125));
        float _2958 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
        _2879 = (((((_2938 * _2709) + _1063) * cbLight._m0[_2889].x) * _2957) * _2958) + _2821;
        _2881 = (((((_2938 * _2711) + _1065) * cbLight._m0[_2889].y) * _2957) * _2958) + _2822;
        _2883 = (((((_2938 * _2712) + _1066) * cbLight._m0[_2889].z) * _2957) * _2958) + _2823;
    }
    float _2989;
    float _2991;
    float _2993;
    if (_2596)
    {
        _2989 = _2879;
        _2991 = _2881;
        _2993 = _2883;
    }
    else
    {
        uint _3000 = _2411 + 3u;
        uint _3004 = _2411 + 11u;
        float _3018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3000].w)) * _905) * 0.949999988079071044921875);
        float _3019 = _3018 * _3018;
        float _3020 = cbLight._m0[_3000].x + _981;
        float _3021 = cbLight._m0[_3000].y + _982;
        float _3022 = cbLight._m0[_3000].z + _983;
        float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
        float _3027 = _3026 * _3020;
        float _3028 = _3026 * _3021;
        float _3029 = _3026 * _3022;
        float _3030 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_3000].xyz));
        float _4987 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
        float _3033 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
        float _3034 = dot(vec3(_902, _903, _904), vec3(_3027, _3028, _3029));
        float _4998 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
        float _3037 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
        float _3038 = dot(vec3(cbLight._m0[_3000].xyz), vec3(_3027, _3028, _3029));
        float _5009 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
        float _3042 = _3019 * _3019;
        float _3046 = ((_3037 * _3037) * (_3042 + (-1.0))) + 1.0;
        float _3053 = exp2(log2(1.0 - (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) * 5.0);
        float _3060 = 1.0 - _3019;
        float _3070 = (0.5 / (((_2687 * ((_3033 * _3060) + _3019)) + 9.9999999392252902907785028219223e-09) + (((_2687 * _3060) + _3019) * _3033))) * _3033;
        float _5020 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
        float _3072 = (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_3042 / ((_3046 * _3046) * 3.141590118408203125));
        float _3073 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
        _2989 = (((((_3053 * _2709) + _1063) * cbLight._m0[_3004].x) * _3072) * _3073) + _2879;
        _2991 = (((((_3053 * _2711) + _1065) * cbLight._m0[_3004].y) * _3072) * _3073) + _2881;
        _2993 = (((((_3053 * _2712) + _1066) * cbLight._m0[_3004].z) * _3072) * _3073) + _2883;
    }
    float _3139;
    float _3141;
    float _3143;
    float _3145;
    float _3147;
    float _3149;
    if (_2409.y == 0u)
    {
        uvec4 _3094 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3095 = _3094.x;
        uint _3106 = uint((float(_3094.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1002) / _3095))) + floor(float(uint(cbSceneParam._m0[85u].x * _1001) / _3095)));
        float _3116 = (log2(_2187 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3117 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
        uint _3120 = uint(isnan(14.0) ? _3117 : (isnan(_3117) ? 14.0 : min(_3117, 14.0)));
        uvec4 _3125 = texelFetch(g_lightClusterGridBuffer, int(((_3120 << 2u) + (_3106 << 6u)) >> 2u));
        uint _3126 = _3125.x;
        uint _3127 = _3094.z;
        float _3206;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        if (((((1u << ((_3127 >> 4u) & 15u)) + 4294967295u) & _3126) == 0u) || ((_3127 & 240u) == 0u))
        {
            _3206 = 0.0;
            _3208 = 0.0;
            _3210 = 0.0;
            _3212 = 0.0;
            _3214 = 0.0;
            _3216 = 0.0;
        }
        else
        {
            float _3207;
            float _3209;
            float _3211;
            float _3213;
            float _3215;
            float _3217;
            float _3359 = 0.0;
            float _3360 = 0.0;
            float _3361 = 0.0;
            float _3362 = 0.0;
            float _3363 = 0.0;
            float _3364 = 0.0;
            uint _3365 = 0u;
            uint _3374;
            bool _3375;
            for (;;)
            {
                _3374 = texelFetch(g_lightClassification, int((((_3120 << 5u) + (_3106 << 9u)) + (_3365 << 2u)) >> 2u)).x;
                _3375 = _3374 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3375)
                {
                    frontier_phi_71_pred = _3364;
                    frontier_phi_71_pred_1 = _3363;
                    frontier_phi_71_pred_2 = _3362;
                    frontier_phi_71_pred_3 = _3361;
                    frontier_phi_71_pred_4 = _3360;
                    frontier_phi_71_pred_5 = _3359;
                }
                else
                {
                    float _3504;
                    float _3505;
                    float _3506;
                    float _3507;
                    float _3508;
                    float _3509;
                    uint _3510;
                    _3504 = _3359;
                    _3505 = _3360;
                    _3506 = _3361;
                    _3507 = _3362;
                    _3508 = _3363;
                    _3509 = _3364;
                    _3510 = _3374;
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    for (;;)
                    {
                        uint _3514 = uint(findLSB(_3510)) + (_3365 << 5u);
                        uint _3511 = (_3510 + 4294967295u) & _3510;
                        uint _3516 = _3514 * 48u;
                        vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3516)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 3u)).x));
                        uint _3536 = (_3514 * 48u) + 4u;
                        vec4 _3549 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3536)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 3u)).x));
                        uint _3555 = (_3514 * 48u) + 8u;
                        vec3 _3566 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3555)).x, texelFetch(g_PointLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3555 + 2u)).x));
                        float _3570 = _3530.x - _2185;
                        float _3571 = _3530.y - _2186;
                        float _3572 = _3530.z - _2187;
                        float _3573 = dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572));
                        float _3576 = inversesqrt(_3573);
                        float _3577 = _3576 * _3570;
                        float _3578 = _3576 * _3571;
                        float _3579 = _3576 * _3572;
                        float _3580 = dot(vec3(_1020, _1023, _1026), vec3(_3577, _3578, _3579));
                        float _3585 = 1.0 - (_3573 * _3530.w);
                        float _5046 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                        float _3586 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                        float _3587 = sqrt(_3573) * _3549.w;
                        float _3590 = 1.39999997615814208984375 / (_3587 + 1.39999997615814208984375);
                        float _3591 = _3590 * _3590;
                        float _3594 = ((1.0 - _3591) * _3580) + _3591;
                        float _3597 = _3587 * _3587;
                        float _3601 = ((isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0))) * _3586) / ((_3597 * 0.699999988079071044921875) + 1.0);
                        float _3605 = (-0.0) - _2185;
                        float _3606 = (-0.0) - _2186;
                        float _3607 = (-0.0) - _2187;
                        float _3611 = inversesqrt(dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607)));
                        float _3612 = _3611 * _3605;
                        float _3613 = _3611 * _3606;
                        float _3614 = _3611 * _3607;
                        float _3621 = exp2(log2(1.0 / ((_3597 * 3.5) + 5.0)) * 0.25);
                        float _3622 = 1.0 - _1095;
                        float _3629 = sqrt(1.0 - ((1.0 - (_3622 * _3622)) * (1.0 - (_3621 * _3621))));
                        float _3630 = _3629 * _3629;
                        float _3631 = _3630 * _3630;
                        float _3632 = _3612 + _3577;
                        float _3633 = _3613 + _3578;
                        float _3634 = _3614 + _3579;
                        float _3638 = inversesqrt(dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634)));
                        float _3642 = dot(vec3(_1020, _1023, _1026), vec3(_3612, _3613, _3614));
                        float _5062 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                        float _3645 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                        float _3646 = dot(vec3(_1020, _1023, _1026), vec3(_3638 * _3632, _3638 * _3633, _3638 * _3634));
                        float _5073 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                        float _3649 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                        float _3653 = ((_3649 * _3649) * (_3631 + (-1.0))) + 1.0;
                        float _3654 = _3590 * _3630;
                        float _3655 = _3654 * _3654;
                        float _3658 = ((1.0 - _3655) * _3580) + _3655;
                        float _5084 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                        float _3659 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                        float _3660 = 1.0 - _3630;
                        float _3670 = (0.5 / (((_3659 * ((_3645 * _3660) + _3630)) + 9.9999999392252902907785028219223e-09) + (((_3659 * _3660) + _3630) * _3645))) * _3659;
                        float _5095 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                        float _3681 = (((_3631 * 3.1415927410125732421875) * (isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0)))) / ((_3653 * _3653) * ((_3597 * 2.1991131305694580078125) + 3.141590118408203125))) * _3586;
                        _3434 = (_3601 * _3549.x) + _3507;
                        _3435 = (_3601 * _3549.y) + _3508;
                        _3436 = (_3601 * _3549.z) + _3509;
                        _3431 = (_3681 * _3566.x) + _3504;
                        _3432 = (_3681 * _3566.y) + _3505;
                        _3433 = (_3681 * _3566.z) + _3506;
                        if (_3511 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3504 = _3431;
                            _3505 = _3432;
                            _3506 = _3433;
                            _3507 = _3434;
                            _3508 = _3435;
                            _3509 = _3436;
                            _3510 = _3511;
                        }
                    }
                    frontier_phi_71_pred = _3436;
                    frontier_phi_71_pred_1 = _3435;
                    frontier_phi_71_pred_2 = _3434;
                    frontier_phi_71_pred_3 = _3433;
                    frontier_phi_71_pred_4 = _3432;
                    frontier_phi_71_pred_5 = _3431;
                }
                _3217 = frontier_phi_71_pred;
                _3215 = frontier_phi_71_pred_1;
                _3213 = frontier_phi_71_pred_2;
                _3211 = frontier_phi_71_pred_3;
                _3209 = frontier_phi_71_pred_4;
                _3207 = frontier_phi_71_pred_5;
                uint _3366 = _3365 + 1u;
                if (_3366 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3359 = _3207;
                    _3360 = _3209;
                    _3361 = _3211;
                    _3362 = _3213;
                    _3363 = _3215;
                    _3364 = _3217;
                    _3365 = _3366;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3206 = _3207;
            _3208 = _3209;
            _3210 = _3211;
            _3212 = _3213;
            _3214 = _3215;
            _3216 = _3217;
        }
        uvec4 _3220 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3221 = _3220.z;
        uint _3223 = (_3221 >> 8u) & 15u;
        float _3327;
        float _3329;
        float _3331;
        float _3333;
        float _3335;
        float _3337;
        if (((4294967295u << _3223) & _3126) == 0u)
        {
            _3327 = _3206;
            _3329 = _3208;
            _3331 = _3210;
            _3333 = _3212;
            _3335 = _3214;
            _3337 = _3216;
        }
        else
        {
            float _3352 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
            float _3353 = _3352 * _2185;
            float _3354 = _3352 * _2186;
            float _3355 = _3352 * _2187;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3223 < ((_3221 >> 12u) & 15u))
            {
                float _3328;
                float _3330;
                float _3332;
                float _3334;
                float _3336;
                float _3338;
                float _3487 = _3206;
                float _3488 = _3208;
                float _3489 = _3210;
                float _3490 = _3212;
                float _3491 = _3214;
                float _3492 = _3216;
                uint _3493 = _3223;
                uint _3502;
                bool _3503;
                for (;;)
                {
                    _3502 = texelFetch(g_lightClassification, int((((_3120 << 5u) + (_3106 << 9u)) + (_3493 << 2u)) >> 2u)).x;
                    _3503 = _3502 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3503)
                    {
                        frontier_phi_82_pred = _3492;
                        frontier_phi_82_pred_1 = _3491;
                        frontier_phi_82_pred_2 = _3490;
                        frontier_phi_82_pred_3 = _3489;
                        frontier_phi_82_pred_4 = _3488;
                        frontier_phi_82_pred_5 = _3487;
                    }
                    else
                    {
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3988;
                        float _3989;
                        float _3990;
                        float _3991;
                        float _3992;
                        float _3993;
                        float _3708 = _3487;
                        float _3709 = _3488;
                        float _3710 = _3489;
                        float _3711 = _3490;
                        float _3712 = _3491;
                        float _3713 = _3492;
                        uint _3714 = _3502;
                        uint _3715;
                        vec4 _3740;
                        float _3741;
                        vec4 _3756;
                        vec3 _3768;
                        vec4 _3783;
                        vec4 _3798;
                        float _3844;
                        bool _3845;
                        for (;;)
                        {
                            uint _3725 = ((_3493 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3714));
                            _3715 = (_3714 + 4294967295u) & _3714;
                            uint _3727 = _3725 * 40u;
                            _3740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 3u)).x));
                            _3741 = _3740.w;
                            uint _3743 = (_3725 * 40u) + 4u;
                            _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            uint _3758 = (_3725 * 40u) + 8u;
                            _3768 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x));
                            uint _3770 = (_3725 * 40u) + 16u;
                            _3783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 3u)).x));
                            uint _3785 = (_3725 * 40u) + 20u;
                            _3798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 3u)).x));
                            uint _3800 = (_3725 * 40u) + 24u;
                            vec4 _3813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 3u)).x));
                            uint _3819 = (_3725 * 40u) + 28u;
                            vec4 _3832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 3u)).x));
                            _3844 = fma(_2187, _3832.z, fma(_2186, _3832.y, _3832.x * _2185)) + _3832.w;
                            _3845 = !((fma(_2187, _3813.z, fma(_2186, _3813.y, _3813.x * _2185)) + _3813.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3845)
                            {
                                float _3872 = _3740.x - _2185;
                                float _3873 = _3740.y - _2186;
                                float _3874 = _3740.z - _2187;
                                float _3875 = dot(vec3(_3872, _3873, _3874), vec3(_3872, _3873, _3874));
                                float _3878 = inversesqrt(_3875);
                                float _3879 = _3878 * _3872;
                                float _3880 = _3878 * _3873;
                                float _3881 = _3878 * _3874;
                                float _3885 = 1.0 - (_3875 / (_3741 * _3741));
                                float _5106 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3886 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
                                float _3890 = sqrt(_3875) * _3756.w;
                                float _3892 = 1.39999997615814208984375 / (_3890 + 1.39999997615814208984375);
                                float _3893 = _3892 * _3892;
                                float _3896 = ((1.0 - _3893) * dot(vec3(_3879, _3880, _3881), vec3(_1020, _1023, _1026))) + _3893;
                                float _3899 = _3890 * _3890;
                                float _3903 = (fma(_2187, _3783.z, fma(_2186, _3783.y, _3783.x * _2185)) + _3783.w) / _3844;
                                float _3904 = (fma(_2187, _3798.z, fma(_2186, _3798.y, _3798.x * _2185)) + _3798.w) / _3844;
                                float _3908 = 1.0 - dot(vec2(_3903, _3904), vec2(_3903, _3904));
                                float _5122 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                                float _3909 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                                float _3910 = _3909 * (((isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0))) * _3886) / ((_3899 * 0.699999988079071044921875) + 1.0));
                                float _3922 = exp2(log2(1.0 / ((_3899 * 3.5) + 5.0)) * 0.25);
                                float _3923 = 1.0 - _1095;
                                float _3930 = sqrt(1.0 - ((1.0 - (_3923 * _3923)) * (1.0 - (_3922 * _3922))));
                                float _3931 = _3930 * _3930;
                                float _3932 = _3931 * _3931;
                                float _3933 = _3879 - _3353;
                                float _3934 = _3880 - _3354;
                                float _3935 = _3881 - _3355;
                                float _3939 = inversesqrt(dot(vec3(_3933, _3934, _3935), vec3(_3933, _3934, _3935)));
                                float _3943 = dot(vec3(_1020, _1023, _1026), vec3((-0.0) - _3353, (-0.0) - _3354, (-0.0) - _3355));
                                float _5133 = isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0));
                                float _3946 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                                float _3947 = dot(vec3(_1020, _1023, _1026), vec3(_3939 * _3933, _3939 * _3934, _3939 * _3935));
                                float _5144 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3950 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
                                float _3954 = ((_3950 * _3950) * (_3932 + (-1.0))) + 1.0;
                                float _3955 = _3892 * _3931;
                                float _3956 = _3955 * _3955;
                                float _3962 = ((1.0 - _3956) * dot(vec3(_1020, _1023, _1026), vec3(_3879, _3880, _3881))) + _3956;
                                float _5155 = isnan(0.0) ? _3962 : (isnan(_3962) ? 0.0 : max(_3962, 0.0));
                                float _3963 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
                                float _3964 = 1.0 - _3931;
                                float _3974 = (0.5 / (((_3963 * ((_3946 * _3964) + _3931)) + 9.9999999392252902907785028219223e-09) + (((_3963 * _3964) + _3931) * _3946))) * _3963;
                                float _5166 = isnan(0.0) ? _3974 : (isnan(_3974) ? 0.0 : max(_3974, 0.0));
                                float _3984 = (_3909 * _3886) * (((_3932 * 3.1415927410125732421875) * (isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0)))) / ((_3954 * _3954) * ((_3899 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3910 * _3756.z;
                                frontier_phi_88_pred_1 = _3910 * _3756.y;
                                frontier_phi_88_pred_2 = _3910 * _3756.x;
                                frontier_phi_88_pred_3 = _3984 * _3768.z;
                                frontier_phi_88_pred_4 = _3984 * _3768.y;
                                frontier_phi_88_pred_5 = _3984 * _3768.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3993 = frontier_phi_88_pred;
                            _3992 = frontier_phi_88_pred_1;
                            _3991 = frontier_phi_88_pred_2;
                            _3990 = frontier_phi_88_pred_3;
                            _3989 = frontier_phi_88_pred_4;
                            _3988 = frontier_phi_88_pred_5;
                            _3698 = _3991 + _3711;
                            _3699 = _3992 + _3712;
                            _3700 = _3993 + _3713;
                            _3695 = _3988 + _3708;
                            _3696 = _3989 + _3709;
                            _3697 = _3990 + _3710;
                            if (_3715 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3708 = _3695;
                                _3709 = _3696;
                                _3710 = _3697;
                                _3711 = _3698;
                                _3712 = _3699;
                                _3713 = _3700;
                                _3714 = _3715;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3700;
                        frontier_phi_82_pred_1 = _3699;
                        frontier_phi_82_pred_2 = _3698;
                        frontier_phi_82_pred_3 = _3697;
                        frontier_phi_82_pred_4 = _3696;
                        frontier_phi_82_pred_5 = _3695;
                    }
                    _3338 = frontier_phi_82_pred;
                    _3336 = frontier_phi_82_pred_1;
                    _3334 = frontier_phi_82_pred_2;
                    _3332 = frontier_phi_82_pred_3;
                    _3330 = frontier_phi_82_pred_4;
                    _3328 = frontier_phi_82_pred_5;
                    uint _3494 = _3493 + 1u;
                    if (_3494 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3487 = _3328;
                        _3488 = _3330;
                        _3489 = _3332;
                        _3490 = _3334;
                        _3491 = _3336;
                        _3492 = _3338;
                        _3493 = _3494;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3334;
                frontier_phi_63_64_ladder_1 = _3338;
                frontier_phi_63_64_ladder_2 = _3336;
                frontier_phi_63_64_ladder_3 = _3332;
                frontier_phi_63_64_ladder_4 = _3330;
                frontier_phi_63_64_ladder_5 = _3328;
            }
            else
            {
                frontier_phi_63_64_ladder = _3212;
                frontier_phi_63_64_ladder_1 = _3216;
                frontier_phi_63_64_ladder_2 = _3214;
                frontier_phi_63_64_ladder_3 = _3210;
                frontier_phi_63_64_ladder_4 = _3208;
                frontier_phi_63_64_ladder_5 = _3206;
            }
            _3327 = frontier_phi_63_64_ladder_5;
            _3329 = frontier_phi_63_64_ladder_4;
            _3331 = frontier_phi_63_64_ladder_3;
            _3333 = frontier_phi_63_64_ladder;
            _3335 = frontier_phi_63_64_ladder_2;
            _3337 = frontier_phi_63_64_ladder_1;
        }
        float _3342 = isnan(1.0) ? _1079 : (isnan(_1079) ? 1.0 : min(_1079, 1.0));
        _3139 = (_3342 * _3333) + _2651;
        _3141 = (_3342 * _3335) + _2653;
        _3143 = (_3342 * _3337) + _2655;
        _3145 = ((_3327 * _1063) * _3342) + _2989;
        _3147 = ((_3329 * _1065) * _3342) + _2991;
        _3149 = ((_3331 * _1066) * _3342) + _2993;
    }
    else
    {
        _3139 = _2651;
        _3141 = _2653;
        _3143 = _2655;
        _3145 = _2989;
        _3147 = _2991;
        _3149 = _2993;
    }
    float _5182 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _5193 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _5204 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _3166 = ((isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0))) * (_3139 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1079))) + ((_3145 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1917)) * cbPerFrame._m0[3u].x);
    float _3167 = ((isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0))) * (_3141 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1079))) + ((_3147 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1917)) * cbPerFrame._m0[3u].x);
    float _3168 = ((isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0))) * (_3143 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1079))) + ((_3149 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1917)) * cbPerFrame._m0[3u].x);
    uint _3169 = _271 + 6u;
    float _3177 = _1001 / cbSceneParam._m0[86u].x;
    float _3178 = _1002 / cbSceneParam._m0[86u].y;
    vec4 _3192 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3177, _3178, (log2((isnan(cbSceneParam._m0[77u].w) ? _924 : (isnan(_924) ? cbSceneParam._m0[77u].w : min(_924, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3194 = _3192.x;
    float _3195 = _3192.y;
    float _3196 = _3192.z;
    float _3197 = _3192.w;
    float _3269;
    float _3271;
    float _3273;
    float _3275;
    if (_924 > cbSceneParam._m0[78u].w)
    {
        float _3231 = isnan(_924) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _924 : min(cbSceneParam._m0[80u].w, _924));
        float _3232 = _3231 / _924;
        float _3243 = _3232 * _974;
        float _3244 = _975 * _3232;
        float _3245 = (-0.0) - _3244;
        float _3247 = _3232 * _976;
        float _3249 = (cbSceneParam._m0[77u].w * _3245) / _3231;
        float _3250 = _3249 + cbSceneParam._m0[79u].w;
        float _3251 = cbSceneParam._m0[79u].w - _3244;
        float _3257 = sqrt(((_3243 * _3243) + (_3244 * _3244)) + (_3247 * _3247));
        float _3260 = (1.0 - (cbSceneParam._m0[77u].w / _3231)) * _3257;
        float _3265 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3267 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3444;
        if (abs((_3245 - _3249) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3444 = ((((_3250 > 0.0) ? exp2(_3265 * _3250) : (2.0 - exp2(_3267 * _3250))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3260;
        }
        else
        {
            float _3388 = 1.0 / cbSceneParam._m0[80u].x;
            float _3389 = isnan(_3251) ? _3250 : (isnan(_3250) ? _3251 : max(_3250, _3251));
            float _3390 = isnan(_3251) ? _3250 : (isnan(_3250) ? _3251 : min(_3250, _3251));
            float _3399 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : min(_3389, 0.0));
            float _3400 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : min(_3390, 0.0));
            _3444 = ((abs(_3257 / _3245) * cbSceneParam._m0[80u].y) * ((((_3399 - _3400) * 2.0) - ((exp2(_3265 * (isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0)))) - exp2(_3265 * (isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))))) * _3388)) - ((exp2(_3267 * _3399) - exp2(_3267 * _3400)) * _3388))) + (_3260 * cbSceneParam._m0[80u].z);
        }
        vec4 _3446 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3177, _3178, 1.0), 0.0);
        float _3455 = exp2((_3444 * (-1.44269502162933349609375)) * (1.0 - _3446.w));
        float _3456 = log2(_3455);
        float _3472 = log2(_3197);
        _3269 = (exp2(_3472 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3456 * cbSceneParam._m0[78u].x)) * _3446.x) / cbSceneParam._m0[78u].x)) + _3194;
        _3271 = (exp2(_3472 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3456 * cbSceneParam._m0[78u].y)) * _3446.y) / cbSceneParam._m0[78u].y)) + _3195;
        _3273 = (exp2(_3472 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3456 * cbSceneParam._m0[78u].z)) * _3446.z) / cbSceneParam._m0[78u].z)) + _3196;
        _3275 = _3455 * _3197;
    }
    else
    {
        _3269 = _3194;
        _3271 = _3195;
        _3273 = _3196;
        _3275 = _3197;
    }
    bool _3482;
    vec4 _3285;
    vec4 _3307;
    float _3309;
    float _3313;
    float _3314;
    float _3315;
    float _3316;
    bool _3326;
    for (;;)
    {
        _3285 = cbMatDynParam._m0[0u];
        float _3287 = roundEven(_3285.y);
        bool _3288 = _3287 == 3.0;
        float _3289 = log2(_3275);
        float _3296 = exp2(_3289 * cbSceneParam._m0[78u].x) * _3166;
        float _3297 = exp2(_3289 * cbSceneParam._m0[78u].y) * _3167;
        float _3298 = exp2(_3289 * cbSceneParam._m0[78u].z) * _3168;
        float _3305 = _990 + (-0.5);
        _3307 = cbMtdParam._m0[1u];
        _3309 = _3307.y * _3305;
        float _3312 = (_3287 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3313 = _3312 * (_3288 ? _3296 : (_3296 + (cbSceneParam._m0[72u].w * _3269)));
        _3314 = _3312 * (_3288 ? _3297 : (_3297 + (cbSceneParam._m0[72u].w * _3271)));
        _3315 = _3312 * (_3288 ? _3298 : (_3298 + (cbSceneParam._m0[72u].w * _3273)));
        _3316 = _3305 * 0.999000012874603271484375;
        _3326 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3326)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _3316) < 0.5)
            {
                _3482 = true;
                break;
            }
        }
        uint _3423 = _1039 + uint(_3285.w);
        if ((cbInstanceData._m0[_3423].w < 1.0) && ((cbInstanceData._m0[_3423].w + _3316) < 0.5))
        {
            _3482 = true;
            break;
        }
        if ((_3309 + 1.0) < _3307.x)
        {
            _3482 = true;
            break;
        }
        _3482 = false;
        break;
    }
    float _3686;
    if (_3482)
    {
        discard_state = true;
        _3686 = 0.0;
    }
    else
    {
        _3686 = cbInstanceData._m0[_3169].w;
    }
    SV_Target.x = _3313;
    SV_Target.y = _3314;
    SV_Target.z = _3315;
    SV_Target.w = _3686;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3169].w;
    discard_exit();
}


