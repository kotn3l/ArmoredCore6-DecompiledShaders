#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1304;
float _3969;
float _3970;
float _3971;
float _3972;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].y) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3981 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _397 = (_390 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _398 = (_390 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _399 = (_390 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _412 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _429 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _431 = _429.x;
    float _432 = _429.y;
    float _433 = _429.z;
    float _442 = ((_412.z - _433) * _390) + _433;
    float _445 = ((((_412.x - _431) * _390) + _431) * 2.0) + (-1.0);
    float _447 = ((((_412.y - _432) * _390) + _432) * 2.0) + (-1.0);
    float _448 = dot(vec2(_445, _447), vec2(_445, _447));
    float _3992 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _453 = sqrt(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))));
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _481 = (((_469.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _445;
    float _482 = (((_469.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _447;
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _496 = _494.x;
    float _497 = 1.0 - _496;
    float _525 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_496 - _497) * cbMtdParam._m0[24u].w) + _497) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4003 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _534 = ((((cbMtdParam._m0[10u].x - _397) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _526) + _397;
    float _535 = ((((cbMtdParam._m0[10u].y - _398) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _526) + _398;
    float _536 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _399)) * _526) + _399;
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _562 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _564 = _562.x;
    float _582 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _564) * _390) + _564;
    float _586 = ((_548.x - _582) * cbMtdParam._m0[19u].z) + _582;
    float _588 = _586 - (_586 * _526);
    float _592 = (cbMtdParam._m0[19u].w * (_469.z - _442)) + _442;
    float _596 = ((cbMtdParam._m0[23u].y - _592) * _526) + _592;
    vec4 _615 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _617 = _615.x;
    float _618 = _615.y;
    float _622 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_241, _242, _243, 0.0));
    vec4 _637 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _272) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _273) + cbTextureTilingScale._m0[18u].w));
    float _639 = _637.x;
    float _644 = fract(_637.w + cbPerFrame._m0[22u].x);
    float _646 = (1.0 - _644) * _639;
    float _651 = ((_644 + (-1.0)) + _639) * 9.0;
    float _653 = ((_639 + (-1.0)) + _644) * 9.0;
    float _654 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _655 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _669 = (_646 * ((_637.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _654 : (isnan(_654) ? 3.0 : min(_654, 3.0))) * 3.1415927410125732421875);
    float _671 = (_646 * ((_637.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _655 : (isnan(_655) ? 3.0 : min(_655, 3.0))) * 3.1415927410125732421875);
    float _675 = inversesqrt(dot(vec3(_669, _671, 1.0), vec3(_669, _671, 1.0)));
    float _691 = (((((0.5 - _617) + ((_669 * 0.5) * _675)) * _622) + _617) * 2.0) + (-1.0);
    float _692 = (((((0.5 - _618) + ((_675 * 0.5) * _671)) * _622) + _618) * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _4034 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _709 = ((((cbMtdParam._m0[22u].z * _481) - _481) + _691) * _526) + _481;
    float _710 = ((((cbMtdParam._m0[22u].z * _482) - _482) + _692) * _526) + _482;
    float _711 = (_526 * (sqrt(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) - _453)) + _453;
    float _713 = cbMtdParam._m0[22u].x + _469.w;
    float _716 = fma(_711, _241, fma(_710, _247 * TANGENT.x, (_233 * _225) * _709));
    float _719 = fma(_711, _242, fma(_710, _247 * TANGENT.y, (_233 * _226) * _709));
    float _722 = fma(_711, _243, fma(_710, _247 * TANGENT.z, (_233 * _227) * _709));
    float _726 = inversesqrt(dot(vec3(_716, _719, _722), vec3(_716, _719, _722)));
    float _727 = _726 * _716;
    float _728 = _726 * _719;
    float _729 = _726 * _722;
    float _4045 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _730 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4067 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4078 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4089 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4100 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _735 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _749 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _799 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _789);
    float _800 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _789);
    float _801 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _789);
    float _805 = inversesqrt(dot(vec3(_799, _800, _801), vec3(_799, _800, _801)));
    float _806 = _799 * _805;
    float _807 = _800 * _805;
    float _808 = _801 * _805;
    vec4 _813 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _815 = _813.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _986 = sqrt(((_799 * _799) + (_800 * _800)) + (_801 * _801));
        float _992 = (cbMatDynParam._m0[5u].x * _986) + cbMatDynParam._m0[5u].y;
        float _4111 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _997 = (cbMatDynParam._m0[5u].z * _986) + cbMatDynParam._m0[5u].w;
        float _4122 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) - _993)) + _993) < ((_815 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _826 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _827 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _845 = fma(_729, cbSceneParam._m0[5u].z, fma(_728, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _727));
    float _848 = fma(_729, cbSceneParam._m0[6u].z, fma(_728, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _727));
    float _851 = fma(_729, cbSceneParam._m0[7u].z, fma(_728, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _727));
    uint _864 = _253 + 9u;
    uint _865 = _864 + uint(cbMatDynParam._m0[0u].w);
    float _871 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * cbInstanceData._m0[_865].x;
    float _872 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * cbInstanceData._m0[_865].y;
    float _873 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) * cbInstanceData._m0[_865].z;
    float _4133 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _877 = 1.0 - _735;
    float _878 = _874 * _877;
    float _879 = _875 * _877;
    float _880 = _876 * _877;
    float _885 = (_874 + (-0.039999999105930328369140625)) * _735;
    float _886 = (_875 + (-0.039999999105930328369140625)) * _735;
    float _887 = (_876 + (-0.039999999105930328369140625)) * _735;
    float _888 = _885 + 0.039999999105930328369140625;
    float _890 = _886 + 0.039999999105930328369140625;
    float _891 = _887 + 0.039999999105930328369140625;
    vec4 _900 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _826, cbSceneParam._m0[86u].y * _827));
    float _904 = ((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * TEXCOORD_5.w) * _900.x;
    float _905 = dot(vec3(_727, _728, _729), vec3(_806, _807, _808));
    float _908 = _905 * 2.0;
    float _912 = (_908 * _727) - _806;
    float _913 = (_908 * _728) - _807;
    float _914 = (_908 * _729) - _808;
    float _918 = abs(dot(vec3(_806, _807, _808), vec3(_727, _728, _729)));
    float _4166 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _920 = sqrt(_730);
    float _932 = exp2((_920 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_920 * 3.0));
    float _938 = (1.0 - _932) * ((_920 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _939 = _932 * _920;
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1303;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1029 = fma(_975, cbModelParam._m0[26u].z, fma(_971, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967));
        float _1033 = fma(_975, cbModelParam._m0[27u].z, fma(_971, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967));
        float _1037 = fma(_975, cbModelParam._m0[28u].z, fma(_971, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967));
        float _1061 = _967 + _727;
        float _1062 = _971 + _728;
        float _1063 = _975 + _729;
        float _1073 = fma(_1063, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061)) - _1029;
        float _1074 = fma(_1063, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061)) - _1033;
        float _1075 = fma(_1063, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061)) - _1037;
        float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
        float _1092 = ((_1079 * _1073) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1029 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1079 * _1074) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1033 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1079 * _1075) / cbModelParam._m0[34u].z) + ((((((_1037 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        float _1131 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1097.x + (-0.5));
        float _1133 = _1131 * (_1097.y + (-0.5));
        float _1134 = _1131 * (_1097.z + (-0.5));
        float _1141 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1104.x + (-0.5));
        float _1143 = _1141 * (_1104.y + (-0.5));
        float _1144 = _1141 * (_1104.z + (-0.5));
        float _1151 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1111.x + (-0.5));
        float _1153 = _1151 * (_1111.y + (-0.5));
        float _1154 = _1151 * (_1111.z + (-0.5));
        float _1161 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1118.x + (-0.5));
        float _1163 = _1161 * (_1118.y + (-0.5));
        float _1164 = _1161 * (_1118.z + (-0.5));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = _1132 * 0.5;
        float _1169 = _1142 * 0.5;
        float _1170 = _1152 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1185 = (dot(vec3(_727, _728, _729), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1195 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _4214 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1197 + 1.0))) + _1202) * _1165;
        float _1212 = _1133 * 0.5;
        float _1213 = _1143 * 0.5;
        float _1214 = _1153 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_727, _728, _729), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _4247 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1239 + 1.0))) + _1244) * _1166;
        float _1254 = _1134 * 0.5;
        float _1255 = _1144 * 0.5;
        float _1256 = _1154 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_727, _728, _729), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _4280 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1281 + 1.0))) + _1286) * _1167;
        _1303 = _1134;
        _1305 = _1133;
        _1306 = _1132;
        _1307 = _1144;
        _1308 = _1143;
        _1309 = _1142;
        _1310 = _1154;
        _1311 = _1153;
        _1312 = _1152;
        _1313 = _1167;
        _1314 = _1166;
        _1315 = _1165;
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
    }
    else
    {
        _1303 = _1304;
        _1305 = _1304;
        _1306 = _1304;
        _1307 = _1304;
        _1308 = _1304;
        _1309 = _1304;
        _1310 = _1304;
        _1311 = _1304;
        _1312 = _1304;
        _1313 = _1304;
        _1314 = _1304;
        _1315 = _1304;
        _1316 = 0.0;
        _1317 = 0.0;
        _1318 = 0.0;
    }
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1346 = fma(_975, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967));
        float _1350 = fma(_975, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967));
        float _1354 = fma(_975, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967));
        float _1377 = _967 + _727;
        float _1378 = _971 + _728;
        float _1379 = _975 + _729;
        float _1389 = fma(_1379, cbModelParam._m0[30u].z, fma(_1378, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1377)) - _1346;
        float _1390 = fma(_1379, cbModelParam._m0[31u].z, fma(_1378, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1377)) - _1350;
        float _1391 = fma(_1379, cbModelParam._m0[32u].z, fma(_1378, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1377)) - _1354;
        float _1395 = inversesqrt(dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391)));
        float _1408 = ((_1395 * _1389) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1346 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1395 * _1390) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1350 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1395 * _1391) / cbModelParam._m0[35u].z) + ((((((_1354 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        float _1445 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1412.x + (-0.5));
        float _1447 = _1445 * (_1412.y + (-0.5));
        float _1448 = _1445 * (_1412.z + (-0.5));
        float _1455 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1419.x + (-0.5));
        float _1457 = _1455 * (_1419.y + (-0.5));
        float _1458 = _1455 * (_1419.z + (-0.5));
        float _1465 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1426.x + (-0.5));
        float _1467 = _1465 * (_1426.y + (-0.5));
        float _1468 = _1465 * (_1426.z + (-0.5));
        float _1475 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1433.x + (-0.5));
        float _1477 = _1475 * (_1433.y + (-0.5));
        float _1478 = _1475 * (_1433.z + (-0.5));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = _1446 * 0.5;
        float _1483 = _1456 * 0.5;
        float _1484 = _1466 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_727, _728, _729), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4343 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1509 + 1.0))) + _1514) * _1479;
        float _1524 = _1447 * 0.5;
        float _1525 = _1457 * 0.5;
        float _1526 = _1467 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_727, _728, _729), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4354 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4365 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4376 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_1551 + 1.0))) + _1556) * _1480;
        float _1566 = _1448 * 0.5;
        float _1567 = _1458 * 0.5;
        float _1568 = _1468 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_727, _728, _729), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4409 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1593 + 1.0))) + _1598) * _1481;
        _1615 = _1448;
        _1616 = _1447;
        _1617 = _1446;
        _1618 = _1458;
        _1619 = _1457;
        _1620 = _1456;
        _1621 = _1468;
        _1622 = _1467;
        _1623 = _1466;
        _1624 = _1481;
        _1625 = _1480;
        _1626 = _1479;
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
    }
    else
    {
        _1615 = _1304;
        _1616 = _1304;
        _1617 = _1304;
        _1618 = _1304;
        _1619 = _1304;
        _1620 = _1304;
        _1621 = _1304;
        _1622 = _1304;
        _1623 = _1304;
        _1624 = _1304;
        _1625 = _1304;
        _1626 = _1304;
        _1627 = 0.0;
        _1628 = 0.0;
        _1629 = 0.0;
    }
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1316)) + _1316;
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1317)) + _1317;
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1318)) + _1318;
    float _1662 = fma(_1641, cbSceneParam._m0[89u].z, fma(_1640, cbSceneParam._m0[89u].y, _1639 * cbSceneParam._m0[89u].x));
    float _1665 = fma(_1641, cbSceneParam._m0[90u].z, fma(_1640, cbSceneParam._m0[90u].y, _1639 * cbSceneParam._m0[90u].x));
    float _1668 = fma(_1641, cbSceneParam._m0[91u].z, fma(_1640, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1639));
    float _1683 = _912 * 0.5;
    float _1684 = _913 * 0.5;
    float _1685 = _914 * 0.5;
    float _1686 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1689 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1692 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1726;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1699 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1303, _1307, _1310, _1313));
        float _1703 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1707 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1306, _1309, _1312, _1315));
        float _1714 = dot(vec4(cbModelParam._m0[39u]), vec4(_1683, _1684, _1685, 1.0));
        _1726 = dot(vec3(isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1714) ? 0.0 : (isnan(0.0) ? _1714 : max(0.0, _1714))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1726 = 1.0;
    }
    float _1737;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1728 = dot(vec4(cbModelParam._m0[40u]), vec4(_1683, _1684, _1685, 1.0));
        _1737 = dot(vec3(isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1728) ? 0.0 : (isnan(0.0) ? _1728 : max(0.0, _1728))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1737 = 1.0;
    }
    float _1741 = (_1737 * cbModelParam._m0[1u].x) + (_1726 * (1.0 - cbModelParam._m0[1u].x));
    float _1751 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _730);
    float _1752 = isnan(_1751) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1751 : min(cbModelParam._m0[25u].z, _1751));
    float _1834;
    float _1836;
    float _1838;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1801 = fma(_975, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _967)) + cbModelParam._m0[13u].w;
        float _1805 = fma(_975, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _967)) + cbModelParam._m0[14u].w;
        float _1809 = fma(_975, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _967)) + cbModelParam._m0[15u].w;
        float _1812 = fma(_914, cbModelParam._m0[13u].z, fma(_913, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _912));
        float _1815 = fma(_914, cbModelParam._m0[14u].z, fma(_913, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _912));
        float _1818 = fma(_914, cbModelParam._m0[15u].z, fma(_913, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _912));
        float _1846;
        if (_1812 > 0.0)
        {
            _1846 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1846 = frontier_phi_17_15_ladder;
        }
        float _2018;
        if (_1815 > 0.0)
        {
            _2018 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2018 = frontier_phi_26_22_ladder;
        }
        float _2313;
        if (_1818 > 0.0)
        {
            _2313 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2313 = frontier_phi_38_33_ladder;
        }
        float _2315 = isnan(_2018) ? _1846 : (isnan(_1846) ? _2018 : min(_1846, _2018));
        float _2316 = isnan(_2313) ? _2315 : (isnan(_2315) ? _2313 : min(_2315, _2313));
        float _2320 = (_2316 * _1812) + _1801;
        float _2321 = (_2316 * _1815) + _1805;
        float _2322 = (_2316 * _1818) + _1809;
        float _2323 = _2316 * 9.9999997473787516355514526367188e-05;
        float _2325 = (-1.0) - _2323;
        float _2327 = _2323 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2322 > _2327) || ((_2322 < _2325) || ((_2321 > _2327) || ((_2321 < _2325) || ((_2320 < _2325) || (_2320 > _2327))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2467 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2322, cbModelParam._m0[9u].z, fma(_2321, cbModelParam._m0[9u].y, _2320 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2322, cbModelParam._m0[10u].z, fma(_2321, cbModelParam._m0[10u].y, _2320 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2322, cbModelParam._m0[11u].z, fma(_2321, cbModelParam._m0[11u].y, _2320 * cbModelParam._m0[11u].x))), _1752);
            frontier_phi_16_38_ladder = _2467.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2467.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2467.x * cbModelParam._m0[1u].y;
        }
        _1834 = frontier_phi_16_38_ladder_2;
        _1836 = frontier_phi_16_38_ladder_1;
        _1838 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1822 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_912, _913, _914), _1752);
        _1834 = _1822.x * cbModelParam._m0[1u].y;
        _1836 = _1822.y * cbModelParam._m0[1u].y;
        _1838 = _1822.z * cbModelParam._m0[1u].y;
    }
    float _1842 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _730);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1842 : min(cbModelParam._m0[25u].w, _1842));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1897 = fma(_975, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _967)) + cbModelParam._m0[21u].w;
        float _1901 = fma(_975, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _967)) + cbModelParam._m0[22u].w;
        float _1905 = fma(_975, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _967)) + cbModelParam._m0[23u].w;
        float _1908 = fma(_914, cbModelParam._m0[21u].z, fma(_913, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _912));
        float _1911 = fma(_914, cbModelParam._m0[22u].z, fma(_913, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _912));
        float _1914 = fma(_914, cbModelParam._m0[23u].z, fma(_913, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _912));
        float _2023;
        if (_1908 > 0.0)
        {
            _2023 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2023 = frontier_phi_28_24_ladder;
        }
        float _2340;
        if (_1911 > 0.0)
        {
            _2340 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2340 = frontier_phi_40_35_ladder;
        }
        float _2678;
        if (_1914 > 0.0)
        {
            _2678 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2678 = frontier_phi_50_47_ladder;
        }
        float _2680 = isnan(_2340) ? _2023 : (isnan(_2023) ? _2340 : min(_2023, _2340));
        float _2681 = isnan(_2678) ? _2680 : (isnan(_2680) ? _2678 : min(_2680, _2678));
        float _2685 = (_2681 * _1908) + _1897;
        float _2686 = (_2681 * _1911) + _1901;
        float _2687 = (_2681 * _1914) + _1905;
        float _2688 = _2681 * 9.9999997473787516355514526367188e-05;
        float _2689 = (-1.0) - _2688;
        float _2691 = _2688 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2687 > _2691) || ((_2687 < _2689) || ((_2686 > _2691) || ((_2686 < _2689) || ((_2685 < _2689) || (_2685 > _2691))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2809 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2687, cbModelParam._m0[17u].z, fma(_2686, cbModelParam._m0[17u].y, _2685 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2687, cbModelParam._m0[18u].z, fma(_2686, cbModelParam._m0[18u].y, _2685 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2687, cbModelParam._m0[19u].z, fma(_2686, cbModelParam._m0[19u].y, _2685 * cbModelParam._m0[19u].x))), _1843);
            frontier_phi_25_50_ladder = _2809.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2809.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2809.x * cbModelParam._m0[1u].z;
        }
        _1933 = frontier_phi_25_50_ladder_2;
        _1935 = frontier_phi_25_50_ladder_1;
        _1937 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_912, _913, _914), _1843);
        _1933 = _1917.x * cbModelParam._m0[1u].z;
        _1935 = _1917.y * cbModelParam._m0[1u].z;
        _1937 = _1917.z * cbModelParam._m0[1u].z;
    }
    float _1950 = (((_938 * _888) + _939) * _904) * ((cbModelParam._m0[1u].w * (_1933 - _1834)) + _1834);
    float _1952 = (((_938 * _890) + _939) * _904) * ((cbModelParam._m0[1u].w * (_1935 - _1836)) + _1836);
    float _1954 = (((_938 * _891) + _939) * _904) * ((cbModelParam._m0[1u].w * (_1937 - _1838)) + _1838);
    float _1957 = fma(_1954, cbSceneParam._m0[89u].z, fma(_1952, cbSceneParam._m0[89u].y, _1950 * cbSceneParam._m0[89u].x));
    float _1960 = fma(_1954, cbSceneParam._m0[90u].z, fma(_1952, cbSceneParam._m0[90u].y, _1950 * cbSceneParam._m0[90u].x));
    float _1963 = fma(_1954, cbSceneParam._m0[91u].z, fma(_1952, cbSceneParam._m0[91u].y, _1950 * cbSceneParam._m0[91u].x));
    float _1997 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2001 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2005 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2009 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2010 = _1997 / _2009;
    float _2011 = _2001 / _2009;
    float _2012 = _2005 / _2009;
    float _2159;
    float _2160;
    float _2161;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2039 = ((uint(_2012 > cbSceneParam._m0[59u].y) + uint(_2012 > cbSceneParam._m0[59u].x)) + uint(_2012 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2040 = _2039 + 43u;
        uint _2048 = _2039 + 44u;
        uint _2056 = _2039 + 45u;
        uint _2064 = _2039 + 46u;
        float _2075 = fma(_2009, cbSceneParam._m0[_2040].w, fma(_2005, cbSceneParam._m0[_2040].z, fma(_2001, cbSceneParam._m0[_2040].y, _1997 * cbSceneParam._m0[_2040].x)));
        float _2079 = fma(_2009, cbSceneParam._m0[_2048].w, fma(_2005, cbSceneParam._m0[_2048].z, fma(_2001, cbSceneParam._m0[_2048].y, _1997 * cbSceneParam._m0[_2048].x)));
        float _2087 = fma(_2009, cbSceneParam._m0[_2064].w, fma(_2005, cbSceneParam._m0[_2064].z, fma(_2001, cbSceneParam._m0[_2064].y, _1997 * cbSceneParam._m0[_2064].x)));
        float _2092 = cbSceneParam._m0[33u].z * _2087;
        float _2094 = cbSceneParam._m0[33u].w * _2087;
        float _2097 = fma(_2009, cbSceneParam._m0[_2056].w, fma(_2005, cbSceneParam._m0[_2056].z, fma(_2001, cbSceneParam._m0[_2056].y, _1997 * cbSceneParam._m0[_2056].x))) / _2087;
        float _2145 = (cbSceneParam._m0[33u].x - sqrt(((_2011 * _2011) + (_2010 * _2010)) + (_2012 * _2012))) * cbSceneParam._m0[33u].y;
        float _4535 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2152 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2092 + _2075) / _2087, (_2094 + _2079) / _2087), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2094 + _2075) / _2087, (_2079 - _2092) / _2087), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2075 - _2092) / _2087, (_2079 - _2094) / _2087), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2075 - _2094) / _2087, (_2092 + _2079) / _2087), _2097), 0.0)).x), vec4(0.25)));
        _2159 = 1.0 - (_2152 * cbSceneParam._m0[34u].x);
        _2160 = 1.0 - (_2152 * cbSceneParam._m0[34u].y);
        _2161 = 1.0 - (_2152 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2159 = 1.0;
        _2160 = 1.0;
        _2161 = 1.0;
    }
    float _2225;
    float _2227;
    float _2229;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2213 = fma(_2009, cbSceneParam._m0[63u].w, fma(_2005, cbSceneParam._m0[63u].z, fma(_2001, cbSceneParam._m0[63u].y, _1997 * cbSceneParam._m0[63u].x)));
        float _2214 = fma(_2009, cbSceneParam._m0[60u].w, fma(_2005, cbSceneParam._m0[60u].z, fma(_2001, cbSceneParam._m0[60u].y, _1997 * cbSceneParam._m0[60u].x))) / _2213;
        float _2215 = fma(_2009, cbSceneParam._m0[61u].w, fma(_2005, cbSceneParam._m0[61u].z, fma(_2001, cbSceneParam._m0[61u].y, _1997 * cbSceneParam._m0[61u].x))) / _2213;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2214 >= cbSceneParam._m0[64u].x) && (_2215 >= cbSceneParam._m0[64u].y)) && (_2214 <= cbSceneParam._m0[64u].z)) && (_2215 <= cbSceneParam._m0[64u].w))
        {
            float _2353 = fma(_2009, cbSceneParam._m0[62u].w, fma(_2005, cbSceneParam._m0[62u].z, fma(_2001, cbSceneParam._m0[62u].y, _1997 * cbSceneParam._m0[62u].x))) / _2213;
            float _2357 = isnan(cbSceneParam._m0[41u].w) ? _2353 : (isnan(_2353) ? cbSceneParam._m0[41u].w : max(_2353, cbSceneParam._m0[41u].w));
            float _2400 = (cbSceneParam._m0[33u].x - sqrt(((_2011 * _2011) + (_2010 * _2010)) + (_2012 * _2012))) * cbSceneParam._m0[33u].y;
            float _4551 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
            float _2407 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2214, cbSceneParam._m0[33u].w + _2215), _2357), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2214, _2215 - cbSceneParam._m0[33u].z), _2357), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2214 - cbSceneParam._m0[33u].z, _2215 - cbSceneParam._m0[33u].w), _2357), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2214 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2215), _2357), 0.0)).x), vec4(0.25)));
            float _2411 = 1.0 - (_2407 * cbSceneParam._m0[34u].x);
            float _2412 = 1.0 - (_2407 * cbSceneParam._m0[34u].y);
            float _2413 = 1.0 - (_2407 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2413) ? _2161 : (isnan(_2161) ? _2413 : min(_2161, _2413));
            frontier_phi_37_36_ladder_1 = isnan(_2412) ? _2160 : (isnan(_2160) ? _2412 : min(_2160, _2412));
            frontier_phi_37_36_ladder_2 = isnan(_2411) ? _2159 : (isnan(_2159) ? _2411 : min(_2159, _2411));
        }
        else
        {
            frontier_phi_37_36_ladder = _2161;
            frontier_phi_37_36_ladder_1 = _2160;
            frontier_phi_37_36_ladder_2 = _2159;
        }
        _2225 = frontier_phi_37_36_ladder_2;
        _2227 = frontier_phi_37_36_ladder_1;
        _2229 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2225 = _2159;
        _2227 = _2160;
        _2229 = _2161;
    }
    uvec4 _2234 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2236 = _2234.x * 14u;
    uint _2237 = _2236 + 13u;
    float _2244 = _904 + (-1.0);
    float _2249 = (cbLight._m0[_2237].x * _2244) + 1.0;
    float _2250 = (cbLight._m0[_2237].y * _2244) + 1.0;
    float _2251 = (cbLight._m0[_2237].z * _2244) + 1.0;
    float _2252 = (cbLight._m0[_2237].w * _2244) + 1.0;
    uint _2253 = _2236 + 5u;
    float _2259 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
    uint _2263 = _2236 + 4u;
    float _2272 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
    uint _2276 = _2236 | 1u;
    float _2287 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_727, _728, _729));
    float _2290 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_727, _728, _729));
    float _4587 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _4598 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2295 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * 0.3183098733425140380859375;
    float _2297 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * 0.3183098733425140380859375;
    float _2304 = ((cbLight._m0[_2253].x * _2259) * _2297) + (((cbLight._m0[_2263].x * _2225) * _2272) * _2295);
    float _2305 = ((_2259 * cbLight._m0[_2253].y) * _2297) + (((cbLight._m0[_2263].y * _2227) * _2272) * _2295);
    float _2306 = ((_2259 * cbLight._m0[_2253].z) * _2297) + (((cbLight._m0[_2263].z * _2229) * _2272) * _2295);
    uvec4 _2310 = floatBitsToUint(cbLight._m0[_2236 + 12u]);
    bool _2312 = _2310.x == 0u;
    float _2414;
    float _2416;
    float _2418;
    if (_2312)
    {
        _2414 = _2304;
        _2416 = _2305;
        _2418 = _2306;
    }
    else
    {
        uint _2422 = _2236 + 6u;
        float _2438 = (dot(vec3(cbLight._m0[_2236 + 2u].xyz), vec3(_727, _728, _729)) * 0.5) + 0.5;
        float _2439 = _2438 * _2438;
        float _4609 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2440 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2441 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2414 = (((cbLight._m0[_2422].x * 0.3183098733425140380859375) * _2440) * _2441) + _2304;
        _2416 = (((cbLight._m0[_2422].y * 0.3183098733425140380859375) * _2440) * _2441) + _2305;
        _2418 = (((cbLight._m0[_2422].z * 0.3183098733425140380859375) * _2440) * _2441) + _2306;
    }
    bool _2421 = _2310.y == 0u;
    float _2476;
    float _2478;
    float _2480;
    if (_2421)
    {
        _2476 = _2414;
        _2478 = _2416;
        _2480 = _2418;
    }
    else
    {
        uint _2649 = _2236 + 7u;
        float _2665 = (dot(vec3(cbLight._m0[_2236 + 3u].xyz), vec3(_727, _728, _729)) * 0.5) + 0.5;
        float _2666 = _2665 * _2665;
        float _4625 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2667 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2668 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2476 = (((cbLight._m0[_2649].x * 0.3183098733425140380859375) * _2667) * _2668) + _2414;
        _2478 = (((cbLight._m0[_2649].y * 0.3183098733425140380859375) * _2667) * _2668) + _2416;
        _2480 = (((cbLight._m0[_2649].z * 0.3183098733425140380859375) * _2667) * _2668) + _2418;
    }
    uint _2483 = _2236 + 8u;
    float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _730) * 0.949999988079071044921875);
    float _2497 = _2496 * _2496;
    float _2498 = cbLight._m0[_2236].x + _806;
    float _2499 = cbLight._m0[_2236].y + _807;
    float _2500 = cbLight._m0[_2236].z + _808;
    float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
    float _2505 = _2504 * _2498;
    float _2506 = _2504 * _2499;
    float _2507 = _2504 * _2500;
    float _2508 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2236].xyz));
    float _4641 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2511 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _4652 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _2512 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2513 = dot(vec3(_727, _728, _729), vec3(_2505, _2506, _2507));
    float _4663 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2516 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _2517 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2505, _2506, _2507));
    float _4674 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2521 = _2497 * _2497;
    float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
    float _2533 = exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0);
    float _2534 = 0.959999978542327880859375 - _885;
    float _2536 = 0.959999978542327880859375 - _886;
    float _2537 = 0.959999978542327880859375 - _887;
    float _2544 = 1.0 - _2497;
    float _2555 = (0.5 / (((_2512 * ((_2511 * _2544) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2512 * _2544) + _2497) * _2511))) * _2511;
    float _4685 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2557 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
    uint _2571 = _2236 + 9u;
    float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _730) * 0.949999988079071044921875);
    float _2583 = _2582 * _2582;
    float _2584 = cbLight._m0[_2276].x + _806;
    float _2585 = cbLight._m0[_2276].y + _807;
    float _2586 = cbLight._m0[_2276].z + _808;
    float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
    float _2591 = _2590 * _2584;
    float _2592 = _2590 * _2585;
    float _2593 = _2590 * _2586;
    float _2594 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2276].xyz));
    float _4696 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2597 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _2598 = dot(vec3(_727, _728, _729), vec3(_2591, _2592, _2593));
    float _4707 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2601 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2602 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2591, _2592, _2593));
    float _4718 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2606 = _2583 * _2583;
    float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
    float _2617 = exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0);
    float _2624 = 1.0 - _2583;
    float _2634 = (0.5 / (((_2512 * ((_2597 * _2624) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2512 * _2624) + _2583) * _2597))) * _2597;
    float _4729 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2636 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
    float _2646 = (((((_2617 * _2534) + _888) * cbLight._m0[_2571].x) * _2636) * _2259) + ((((cbLight._m0[_2483].x * _2225) * ((_2533 * _2534) + _888)) * _2557) * _2272);
    float _2647 = (((((_2617 * _2536) + _890) * cbLight._m0[_2571].y) * _2636) * _2259) + ((((cbLight._m0[_2483].y * _2227) * ((_2533 * _2536) + _890)) * _2557) * _2272);
    float _2648 = (((((_2617 * _2537) + _891) * cbLight._m0[_2571].z) * _2636) * _2259) + ((((cbLight._m0[_2483].z * _2229) * ((_2533 * _2537) + _891)) * _2557) * _2272);
    float _2704;
    float _2706;
    float _2708;
    if (_2312)
    {
        _2704 = _2646;
        _2706 = _2647;
        _2708 = _2648;
    }
    else
    {
        uint _2710 = _2236 + 2u;
        uint _2714 = _2236 + 10u;
        float _2728 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2710].w)) * _730) * 0.949999988079071044921875);
        float _2729 = _2728 * _2728;
        float _2730 = cbLight._m0[_2710].x + _806;
        float _2731 = cbLight._m0[_2710].y + _807;
        float _2732 = cbLight._m0[_2710].z + _808;
        float _2736 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
        float _2737 = _2736 * _2730;
        float _2738 = _2736 * _2731;
        float _2739 = _2736 * _2732;
        float _2740 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2710].xyz));
        float _4740 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2743 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2744 = dot(vec3(_727, _728, _729), vec3(_2737, _2738, _2739));
        float _4751 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2747 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2748 = dot(vec3(cbLight._m0[_2710].xyz), vec3(_2737, _2738, _2739));
        float _4762 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2752 = _2729 * _2729;
        float _2756 = ((_2747 * _2747) * (_2752 + (-1.0))) + 1.0;
        float _2763 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
        float _2770 = 1.0 - _2729;
        float _2780 = (0.5 / (((_2512 * ((_2743 * _2770) + _2729)) + 9.9999999392252902907785028219223e-09) + (((_2512 * _2770) + _2729) * _2743))) * _2743;
        float _4773 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2782 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2752 / ((_2756 * _2756) * 3.141590118408203125));
        float _2783 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2704 = (((((_2763 * _2534) + _888) * cbLight._m0[_2714].x) * _2782) * _2783) + _2646;
        _2706 = (((((_2763 * _2536) + _890) * cbLight._m0[_2714].y) * _2782) * _2783) + _2647;
        _2708 = (((((_2763 * _2537) + _891) * cbLight._m0[_2714].z) * _2782) * _2783) + _2648;
    }
    float _2814;
    float _2816;
    float _2818;
    if (_2421)
    {
        _2814 = _2704;
        _2816 = _2706;
        _2818 = _2708;
    }
    else
    {
        uint _2825 = _2236 + 3u;
        uint _2829 = _2236 + 11u;
        float _2843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2825].w)) * _730) * 0.949999988079071044921875);
        float _2844 = _2843 * _2843;
        float _2845 = cbLight._m0[_2825].x + _806;
        float _2846 = cbLight._m0[_2825].y + _807;
        float _2847 = cbLight._m0[_2825].z + _808;
        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
        float _2852 = _2851 * _2845;
        float _2853 = _2851 * _2846;
        float _2854 = _2851 * _2847;
        float _2855 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2825].xyz));
        float _4789 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2858 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
        float _2859 = dot(vec3(_727, _728, _729), vec3(_2852, _2853, _2854));
        float _4800 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2862 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2863 = dot(vec3(cbLight._m0[_2825].xyz), vec3(_2852, _2853, _2854));
        float _4811 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2867 = _2844 * _2844;
        float _2871 = ((_2862 * _2862) * (_2867 + (-1.0))) + 1.0;
        float _2878 = exp2(log2(1.0 - (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) * 5.0);
        float _2885 = 1.0 - _2844;
        float _2895 = (0.5 / (((_2512 * ((_2858 * _2885) + _2844)) + 9.9999999392252902907785028219223e-09) + (((_2512 * _2885) + _2844) * _2858))) * _2858;
        float _4822 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2897 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2867 / ((_2871 * _2871) * 3.141590118408203125));
        float _2898 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2814 = (((((_2878 * _2534) + _888) * cbLight._m0[_2829].x) * _2897) * _2898) + _2704;
        _2816 = (((((_2878 * _2536) + _890) * cbLight._m0[_2829].y) * _2897) * _2898) + _2706;
        _2818 = (((((_2878 * _2537) + _891) * cbLight._m0[_2829].z) * _2897) * _2898) + _2708;
    }
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_2234.y == 0u)
    {
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.x;
        uint _2931 = uint((float(_2919.y) * floor(float(uint(cbSceneParam._m0[85u].y * _827) / _2920))) + floor(float(uint(cbSceneParam._m0[85u].x * _826) / _2920)));
        float _2941 = (log2(_2012 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2942 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        uint _2945 = uint(isnan(14.0) ? _2942 : (isnan(_2942) ? 14.0 : min(_2942, 14.0)));
        uvec4 _2950 = texelFetch(g_lightClusterGridBuffer, int(((_2945 << 2u) + (_2931 << 6u)) >> 2u));
        uint _2951 = _2950.x;
        uint _2952 = _2919.z;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        if (((((1u << ((_2952 >> 4u) & 15u)) + 4294967295u) & _2951) == 0u) || ((_2952 & 240u) == 0u))
        {
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
        }
        else
        {
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3042;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            uint _3190 = 0u;
            uint _3199;
            bool _3200;
            for (;;)
            {
                _3199 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3190 << 2u)) >> 2u)).x;
                _3200 = _3199 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3200)
                {
                    frontier_phi_71_pred = _3189;
                    frontier_phi_71_pred_1 = _3188;
                    frontier_phi_71_pred_2 = _3187;
                    frontier_phi_71_pred_3 = _3186;
                    frontier_phi_71_pred_4 = _3185;
                    frontier_phi_71_pred_5 = _3184;
                }
                else
                {
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    uint _3335;
                    _3329 = _3184;
                    _3330 = _3185;
                    _3331 = _3186;
                    _3332 = _3187;
                    _3333 = _3188;
                    _3334 = _3189;
                    _3335 = _3199;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    for (;;)
                    {
                        uint _3339 = uint(findLSB(_3335)) + (_3190 << 5u);
                        uint _3336 = (_3335 + 4294967295u) & _3335;
                        uint _3341 = _3339 * 48u;
                        vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3341)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 3u)).x));
                        uint _3361 = (_3339 * 48u) + 4u;
                        vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 3u)).x));
                        uint _3380 = (_3339 * 48u) + 8u;
                        vec3 _3391 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3380)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 2u)).x));
                        float _3395 = _3355.x - _2010;
                        float _3396 = _3355.y - _2011;
                        float _3397 = _3355.z - _2012;
                        float _3398 = dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397));
                        float _3401 = inversesqrt(_3398);
                        float _3402 = _3401 * _3395;
                        float _3403 = _3401 * _3396;
                        float _3404 = _3401 * _3397;
                        float _3405 = dot(vec3(_845, _848, _851), vec3(_3402, _3403, _3404));
                        float _3410 = 1.0 - (_3398 * _3355.w);
                        float _4848 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3411 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3412 = sqrt(_3398) * _3374.w;
                        float _3415 = 1.39999997615814208984375 / (_3412 + 1.39999997615814208984375);
                        float _3416 = _3415 * _3415;
                        float _3419 = ((1.0 - _3416) * _3405) + _3416;
                        float _3422 = _3412 * _3412;
                        float _3426 = ((isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))) * _3411) / ((_3422 * 0.699999988079071044921875) + 1.0);
                        float _3430 = (-0.0) - _2010;
                        float _3431 = (-0.0) - _2011;
                        float _3432 = (-0.0) - _2012;
                        float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                        float _3437 = _3436 * _3430;
                        float _3438 = _3436 * _3431;
                        float _3439 = _3436 * _3432;
                        float _3446 = exp2(log2(1.0 / ((_3422 * 3.5) + 5.0)) * 0.25);
                        float _3447 = 1.0 - _920;
                        float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                        float _3455 = _3454 * _3454;
                        float _3456 = _3455 * _3455;
                        float _3457 = _3437 + _3402;
                        float _3458 = _3438 + _3403;
                        float _3459 = _3439 + _3404;
                        float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                        float _3467 = dot(vec3(_845, _848, _851), vec3(_3437, _3438, _3439));
                        float _4864 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3470 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                        float _3471 = dot(vec3(_845, _848, _851), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                        float _4875 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3474 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                        float _3479 = _3415 * _3455;
                        float _3480 = _3479 * _3479;
                        float _3483 = ((1.0 - _3480) * _3405) + _3480;
                        float _4886 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3484 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3485 = 1.0 - _3455;
                        float _3495 = (0.5 / (((_3484 * ((_3470 * _3485) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3484 * _3485) + _3455) * _3470))) * _3484;
                        float _4897 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3505 = (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) / ((_3478 * _3478) * ((_3422 * 2.1991131305694580078125) + 3.141590118408203125))) * _3411;
                        _3259 = (_3426 * _3374.x) + _3332;
                        _3260 = (_3426 * _3374.y) + _3333;
                        _3261 = (_3426 * _3374.z) + _3334;
                        _3256 = (_3505 * _3391.x) + _3329;
                        _3257 = (_3505 * _3391.y) + _3330;
                        _3258 = (_3505 * _3391.z) + _3331;
                        if (_3336 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3329 = _3256;
                            _3330 = _3257;
                            _3331 = _3258;
                            _3332 = _3259;
                            _3333 = _3260;
                            _3334 = _3261;
                            _3335 = _3336;
                        }
                    }
                    frontier_phi_71_pred = _3261;
                    frontier_phi_71_pred_1 = _3260;
                    frontier_phi_71_pred_2 = _3259;
                    frontier_phi_71_pred_3 = _3258;
                    frontier_phi_71_pred_4 = _3257;
                    frontier_phi_71_pred_5 = _3256;
                }
                _3042 = frontier_phi_71_pred;
                _3040 = frontier_phi_71_pred_1;
                _3038 = frontier_phi_71_pred_2;
                _3036 = frontier_phi_71_pred_3;
                _3034 = frontier_phi_71_pred_4;
                _3032 = frontier_phi_71_pred_5;
                uint _3191 = _3190 + 1u;
                if (_3191 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3184 = _3032;
                    _3185 = _3034;
                    _3186 = _3036;
                    _3187 = _3038;
                    _3188 = _3040;
                    _3189 = _3042;
                    _3190 = _3191;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
        }
        uvec4 _3045 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3046 = _3045.z;
        uint _3048 = (_3046 >> 8u) & 15u;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        if (((4294967295u << _3048) & _2951) == 0u)
        {
            _3152 = _3031;
            _3154 = _3033;
            _3156 = _3035;
            _3158 = _3037;
            _3160 = _3039;
            _3162 = _3041;
        }
        else
        {
            float _3177 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
            float _3178 = _3177 * _2010;
            float _3179 = _3177 * _2011;
            float _3180 = _3177 * _2012;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3048 < ((_3046 >> 12u) & 15u))
            {
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3312 = _3031;
                float _3313 = _3033;
                float _3314 = _3035;
                float _3315 = _3037;
                float _3316 = _3039;
                float _3317 = _3041;
                uint _3318 = _3048;
                uint _3327;
                bool _3328;
                for (;;)
                {
                    _3327 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3318 << 2u)) >> 2u)).x;
                    _3328 = _3327 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3328)
                    {
                        frontier_phi_82_pred = _3317;
                        frontier_phi_82_pred_1 = _3316;
                        frontier_phi_82_pred_2 = _3315;
                        frontier_phi_82_pred_3 = _3314;
                        frontier_phi_82_pred_4 = _3313;
                        frontier_phi_82_pred_5 = _3312;
                    }
                    else
                    {
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3532 = _3312;
                        float _3533 = _3313;
                        float _3534 = _3314;
                        float _3535 = _3315;
                        float _3536 = _3316;
                        float _3537 = _3317;
                        uint _3538 = _3327;
                        uint _3539;
                        vec4 _3564;
                        float _3565;
                        vec4 _3580;
                        vec3 _3592;
                        vec4 _3607;
                        vec4 _3623;
                        float _3669;
                        bool _3670;
                        for (;;)
                        {
                            uint _3549 = ((_3318 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3538));
                            _3539 = (_3538 + 4294967295u) & _3538;
                            uint _3551 = _3549 * 40u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            _3565 = _3564.w;
                            uint _3567 = (_3549 * 40u) + 4u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3582 = (_3549 * 40u) + 8u;
                            _3592 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x));
                            uint _3594 = (_3549 * 40u) + 16u;
                            _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            uint _3610 = (_3549 * 40u) + 20u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3549 * 40u) + 24u;
                            vec4 _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3644 = (_3549 * 40u) + 28u;
                            vec4 _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            _3669 = fma(_2012, _3657.z, fma(_2011, _3657.y, _3657.x * _2010)) + _3657.w;
                            _3670 = !((fma(_2012, _3638.z, fma(_2011, _3638.y, _3638.x * _2010)) + _3638.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3670)
                            {
                                float _3697 = _3564.x - _2010;
                                float _3698 = _3564.y - _2011;
                                float _3699 = _3564.z - _2012;
                                float _3700 = dot(vec3(_3697, _3698, _3699), vec3(_3697, _3698, _3699));
                                float _3703 = inversesqrt(_3700);
                                float _3704 = _3703 * _3697;
                                float _3705 = _3703 * _3698;
                                float _3706 = _3703 * _3699;
                                float _3710 = 1.0 - (_3700 / (_3565 * _3565));
                                float _4908 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3715 = sqrt(_3700) * _3580.w;
                                float _3717 = 1.39999997615814208984375 / (_3715 + 1.39999997615814208984375);
                                float _3718 = _3717 * _3717;
                                float _3721 = ((1.0 - _3718) * dot(vec3(_3704, _3705, _3706), vec3(_845, _848, _851))) + _3718;
                                float _3724 = _3715 * _3715;
                                float _3728 = (fma(_2012, _3607.z, fma(_2011, _3607.y, _3607.x * _2010)) + _3607.w) / _3669;
                                float _3729 = (fma(_2012, _3623.z, fma(_2011, _3623.y, _3623.x * _2010)) + _3623.w) / _3669;
                                float _3733 = 1.0 - dot(vec2(_3728, _3729), vec2(_3728, _3729));
                                float _4924 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3734 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                                float _3735 = _3734 * (((isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0))) * _3711) / ((_3724 * 0.699999988079071044921875) + 1.0));
                                float _3747 = exp2(log2(1.0 / ((_3724 * 3.5) + 5.0)) * 0.25);
                                float _3748 = 1.0 - _920;
                                float _3755 = sqrt(1.0 - ((1.0 - (_3748 * _3748)) * (1.0 - (_3747 * _3747))));
                                float _3756 = _3755 * _3755;
                                float _3757 = _3756 * _3756;
                                float _3758 = _3704 - _3178;
                                float _3759 = _3705 - _3179;
                                float _3760 = _3706 - _3180;
                                float _3764 = inversesqrt(dot(vec3(_3758, _3759, _3760), vec3(_3758, _3759, _3760)));
                                float _3768 = dot(vec3(_845, _848, _851), vec3((-0.0) - _3178, (-0.0) - _3179, (-0.0) - _3180));
                                float _4935 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3771 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3772 = dot(vec3(_845, _848, _851), vec3(_3764 * _3758, _3764 * _3759, _3764 * _3760));
                                float _4946 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3775 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3779 = ((_3775 * _3775) * (_3757 + (-1.0))) + 1.0;
                                float _3780 = _3717 * _3756;
                                float _3781 = _3780 * _3780;
                                float _3787 = ((1.0 - _3781) * dot(vec3(_845, _848, _851), vec3(_3704, _3705, _3706))) + _3781;
                                float _4957 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3788 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3789 = 1.0 - _3756;
                                float _3799 = (0.5 / (((_3788 * ((_3771 * _3789) + _3756)) + 9.9999999392252902907785028219223e-09) + (((_3788 * _3789) + _3756) * _3771))) * _3788;
                                float _4968 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3809 = (_3734 * _3711) * (((_3757 * 3.1415927410125732421875) * (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0)))) / ((_3779 * _3779) * ((_3724 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3735 * _3580.z;
                                frontier_phi_88_pred_1 = _3735 * _3580.y;
                                frontier_phi_88_pred_2 = _3735 * _3580.x;
                                frontier_phi_88_pred_3 = _3809 * _3592.z;
                                frontier_phi_88_pred_4 = _3809 * _3592.y;
                                frontier_phi_88_pred_5 = _3809 * _3592.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3818 = frontier_phi_88_pred;
                            _3817 = frontier_phi_88_pred_1;
                            _3816 = frontier_phi_88_pred_2;
                            _3815 = frontier_phi_88_pred_3;
                            _3814 = frontier_phi_88_pred_4;
                            _3813 = frontier_phi_88_pred_5;
                            _3522 = _3816 + _3535;
                            _3523 = _3817 + _3536;
                            _3524 = _3818 + _3537;
                            _3519 = _3813 + _3532;
                            _3520 = _3814 + _3533;
                            _3521 = _3815 + _3534;
                            if (_3539 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3539;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3524;
                        frontier_phi_82_pred_1 = _3523;
                        frontier_phi_82_pred_2 = _3522;
                        frontier_phi_82_pred_3 = _3521;
                        frontier_phi_82_pred_4 = _3520;
                        frontier_phi_82_pred_5 = _3519;
                    }
                    _3163 = frontier_phi_82_pred;
                    _3161 = frontier_phi_82_pred_1;
                    _3159 = frontier_phi_82_pred_2;
                    _3157 = frontier_phi_82_pred_3;
                    _3155 = frontier_phi_82_pred_4;
                    _3153 = frontier_phi_82_pred_5;
                    uint _3319 = _3318 + 1u;
                    if (_3319 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3312 = _3153;
                        _3313 = _3155;
                        _3314 = _3157;
                        _3315 = _3159;
                        _3316 = _3161;
                        _3317 = _3163;
                        _3318 = _3319;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3159;
                frontier_phi_63_64_ladder_1 = _3163;
                frontier_phi_63_64_ladder_2 = _3161;
                frontier_phi_63_64_ladder_3 = _3157;
                frontier_phi_63_64_ladder_4 = _3155;
                frontier_phi_63_64_ladder_5 = _3153;
            }
            else
            {
                frontier_phi_63_64_ladder = _3037;
                frontier_phi_63_64_ladder_1 = _3041;
                frontier_phi_63_64_ladder_2 = _3039;
                frontier_phi_63_64_ladder_3 = _3035;
                frontier_phi_63_64_ladder_4 = _3033;
                frontier_phi_63_64_ladder_5 = _3031;
            }
            _3152 = frontier_phi_63_64_ladder_5;
            _3154 = frontier_phi_63_64_ladder_4;
            _3156 = frontier_phi_63_64_ladder_3;
            _3158 = frontier_phi_63_64_ladder;
            _3160 = frontier_phi_63_64_ladder_2;
            _3162 = frontier_phi_63_64_ladder_1;
        }
        float _3167 = isnan(1.0) ? _904 : (isnan(_904) ? 1.0 : min(_904, 1.0));
        _2964 = (_3167 * _3158) + _2476;
        _2966 = (_3167 * _3160) + _2478;
        _2968 = (_3167 * _3162) + _2480;
        _2970 = ((_3152 * _888) * _3167) + _2814;
        _2972 = ((_3154 * _890) * _3167) + _2816;
        _2974 = ((_3156 * _891) * _3167) + _2818;
    }
    else
    {
        _2964 = _2476;
        _2966 = _2478;
        _2968 = _2480;
        _2970 = _2814;
        _2972 = _2816;
        _2974 = _2818;
    }
    float _4984 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4995 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _5006 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _2991 = ((isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * (_2964 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _904))) + ((_2970 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1741)) * cbPerFrame._m0[3u].x);
    float _2992 = ((isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_2966 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _904))) + ((_2972 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1741)) * cbPerFrame._m0[3u].x);
    float _2993 = ((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2968 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _904))) + ((_2974 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1741)) * cbPerFrame._m0[3u].x);
    uint _2994 = _253 + 6u;
    float _3002 = _826 / cbSceneParam._m0[86u].x;
    float _3003 = _827 / cbSceneParam._m0[86u].y;
    vec4 _3017 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3002, _3003, (log2((isnan(cbSceneParam._m0[77u].w) ? _749 : (isnan(_749) ? cbSceneParam._m0[77u].w : min(_749, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3019 = _3017.x;
    float _3020 = _3017.y;
    float _3021 = _3017.z;
    float _3022 = _3017.w;
    float _3094;
    float _3096;
    float _3098;
    float _3100;
    if (_749 > cbSceneParam._m0[78u].w)
    {
        float _3056 = isnan(_749) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _749 : min(cbSceneParam._m0[80u].w, _749));
        float _3057 = _3056 / _749;
        float _3068 = _3057 * _799;
        float _3069 = _800 * _3057;
        float _3070 = (-0.0) - _3069;
        float _3072 = _3057 * _801;
        float _3074 = (cbSceneParam._m0[77u].w * _3070) / _3056;
        float _3075 = _3074 + cbSceneParam._m0[79u].w;
        float _3076 = cbSceneParam._m0[79u].w - _3069;
        float _3082 = sqrt(((_3068 * _3068) + (_3069 * _3069)) + (_3072 * _3072));
        float _3085 = (1.0 - (cbSceneParam._m0[77u].w / _3056)) * _3082;
        float _3090 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3092 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3269;
        if (abs((_3070 - _3074) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3269 = ((((_3075 > 0.0) ? exp2(_3090 * _3075) : (2.0 - exp2(_3092 * _3075))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3085;
        }
        else
        {
            float _3213 = 1.0 / cbSceneParam._m0[80u].x;
            float _3214 = isnan(_3076) ? _3075 : (isnan(_3075) ? _3076 : max(_3075, _3076));
            float _3215 = isnan(_3076) ? _3075 : (isnan(_3075) ? _3076 : min(_3075, _3076));
            float _3224 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : min(_3214, 0.0));
            float _3225 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : min(_3215, 0.0));
            _3269 = ((abs(_3082 / _3070) * cbSceneParam._m0[80u].y) * ((((_3224 - _3225) * 2.0) - ((exp2(_3090 * (isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0)))) - exp2(_3090 * (isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))))) * _3213)) - ((exp2(_3092 * _3224) - exp2(_3092 * _3225)) * _3213))) + (_3085 * cbSceneParam._m0[80u].z);
        }
        vec4 _3271 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3002, _3003, 1.0), 0.0);
        float _3280 = exp2((_3269 * (-1.44269502162933349609375)) * (1.0 - _3271.w));
        float _3281 = log2(_3280);
        float _3297 = log2(_3022);
        _3094 = (exp2(_3297 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].x)) * _3271.x) / cbSceneParam._m0[78u].x)) + _3019;
        _3096 = (exp2(_3297 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].y)) * _3271.y) / cbSceneParam._m0[78u].y)) + _3020;
        _3098 = (exp2(_3297 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].z)) * _3271.z) / cbSceneParam._m0[78u].z)) + _3021;
        _3100 = _3280 * _3022;
    }
    else
    {
        _3094 = _3019;
        _3096 = _3020;
        _3098 = _3021;
        _3100 = _3022;
    }
    bool _3307;
    vec4 _3110;
    vec4 _3132;
    float _3134;
    float _3138;
    float _3139;
    float _3140;
    float _3141;
    bool _3151;
    for (;;)
    {
        _3110 = cbMatDynParam._m0[0u];
        float _3112 = roundEven(_3110.y);
        bool _3113 = _3112 == 3.0;
        float _3114 = log2(_3100);
        float _3121 = exp2(_3114 * cbSceneParam._m0[78u].x) * _2991;
        float _3122 = exp2(_3114 * cbSceneParam._m0[78u].y) * _2992;
        float _3123 = exp2(_3114 * cbSceneParam._m0[78u].z) * _2993;
        float _3130 = _815 + (-0.5);
        _3132 = cbMtdParam._m0[1u];
        _3134 = _3132.y * _3130;
        float _3137 = (_3112 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3138 = _3137 * (_3113 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3094)));
        _3139 = _3137 * (_3113 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3096)));
        _3140 = _3137 * (_3113 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3098)));
        _3141 = _3130 * 0.999000012874603271484375;
        _3151 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3151)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _3141) < 0.5)
            {
                _3307 = true;
                break;
            }
        }
        uint _3248 = _864 + uint(_3110.w);
        if ((cbInstanceData._m0[_3248].w < 1.0) && ((cbInstanceData._m0[_3248].w + _3141) < 0.5))
        {
            _3307 = true;
            break;
        }
        if ((_3134 + 1.0) < _3132.x)
        {
            _3307 = true;
            break;
        }
        _3307 = false;
        break;
    }
    float _3510;
    if (_3307)
    {
        discard_state = true;
        _3510 = 0.0;
    }
    else
    {
        _3510 = cbInstanceData._m0[_2994].w;
    }
    SV_Target.x = _3138;
    SV_Target.y = _3139;
    SV_Target.z = _3140;
    SV_Target.w = _3510;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2994].w;
    discard_exit();
}


