#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1552;
float _3956;
float _3957;
float _3958;
float _3959;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3968 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3979 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3990 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[24u].y) + _427) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4001 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _452 = (_445 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _453 = (_445 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _454 = (_445 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _491 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _493 = _491.x;
    float _503 = dot(vec4(_493, _491.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _517 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_493 - _503) * cbMtdParam._m0[24u].y) + _503) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4012 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _525 = (_518 * ((_471.x * cbMtdParam._m0[13u].x) - _452)) + _452;
    float _526 = (_518 * ((_471.y * cbMtdParam._m0[13u].y) - _453)) + _453;
    float _527 = (_518 * ((_471.z * cbMtdParam._m0[13u].z) - _454)) + _454;
    float _531 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _525;
    float _534 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _526;
    float _537 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _527;
    float _544 = ((_525 - _531) * (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) + _531;
    float _545 = ((_526 - _534) * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) + _534;
    float _546 = ((_527 - _537) * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) + _537;
    vec4 _563 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _605 = _603.x;
    float _606 = _603.y;
    float _607 = _603.z;
    float _614 = ((_586.x - _605) * _445) + _605;
    float _615 = ((_586.y - _606) * _445) + _606;
    float _616 = ((_586.z - _607) * _445) + _607;
    vec4 _628 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _641 = ((_628.z - _616) * _518) + _616;
    float _644 = ((((_628.x - _614) * _518) + _614) * 2.0) + (-1.0);
    float _645 = ((((_628.y - _615) * _518) + _615) * 2.0) + (-1.0);
    float _646 = dot(vec2(_644, _645), vec2(_644, _645));
    float _4023 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _651 = sqrt(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))));
    vec4 _665 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _690 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _692 = _690.x;
    float _693 = 1.0 - _692;
    float _699 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _702 = ((isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : min(_699, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _711 = (_702 - ((((((_692 - _693) * cbMtdParam._m0[24u].z) + _693) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _702))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4044 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _712 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _719 = (_712 * (cbMtdParam._m0[17u].x - _544)) + _544;
    float _720 = (_712 * (cbMtdParam._m0[17u].y - _545)) + _545;
    float _721 = (_712 * (cbMtdParam._m0[17u].z - _546)) + _546;
    vec4 _733 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _735 = _733.x;
    float _736 = 1.0 - _735;
    float _761 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_735 - _736) * cbMtdParam._m0[24u].w) + _736) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4055 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _762 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _770 = ((((cbMtdParam._m0[10u].x - _719) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _762) + _719;
    float _771 = ((((cbMtdParam._m0[10u].y - _720) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _762) + _720;
    float _772 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _721)) * _762) + _721;
    vec4 _798 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _800 = _798.x;
    float _818 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _800) * _445) + _800;
    float _835 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _818) * _518) + _818;
    float _839 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _835) * cbMtdParam._m0[19u].z) + _835;
    float _841 = _839 - (_839 * _712);
    float _843 = _841 - (_841 * _762);
    float _848 = (((_563.z - _641) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _641;
    float _852 = ((_665.z - _848) * cbMtdParam._m0[19u].w) + _848;
    vec4 _866 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _873 = (_866.x * 2.0) + (-1.0);
    float _874 = (_866.y * 2.0) + (-1.0);
    float _875 = dot(vec2(_873, _874), vec2(_873, _874));
    float _4066 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _883 = (_712 * (_866.z - _852)) + _852;
    float _886 = ((cbMtdParam._m0[23u].y - _883) * _762) + _883;
    vec4 _907 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _913 = (_907.x * 2.0) + (-1.0);
    float _914 = (_907.y * 2.0) + (-1.0);
    float _915 = dot(vec2(_913, _914), vec2(_913, _914));
    float _4077 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _929 = (_644 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_563.x * 2.0) + (-1.0)))) + (((_665.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _930 = (_645 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_563.y * 2.0) + (-1.0)))) + (((_665.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _942 = (((_873 - _929) + (cbMtdParam._m0[21u].x * _929)) * _712) + _929;
    float _943 = (((_874 - _930) + (cbMtdParam._m0[21u].x * _930)) * _712) + _930;
    float _944 = (_712 * (sqrt(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) - _651)) + _651;
    float _955 = (((_913 - _942) + (_942 * cbMtdParam._m0[22u].z)) * _762) + _942;
    float _956 = (((_914 - _943) + (_943 * cbMtdParam._m0[22u].z)) * _762) + _943;
    float _957 = ((sqrt(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) - _944) * _762) + _944;
    float _959 = cbMtdParam._m0[22u].x + _665.w;
    float _962 = fma(_957, _261 * NORMAL.x, fma(_956, _268 * TANGENT.x, (_254 * _246) * _955));
    float _965 = fma(_957, _261 * NORMAL.y, fma(_956, _268 * TANGENT.y, (_254 * _247) * _955));
    float _968 = fma(_957, _261 * NORMAL.z, fma(_956, _268 * TANGENT.z, (_254 * _248) * _955));
    float _972 = inversesqrt(dot(vec3(_962, _965, _968), vec3(_962, _965, _968)));
    float _973 = _972 * _962;
    float _974 = _972 * _965;
    float _975 = _972 * _968;
    float _4088 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _976 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _4110 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4121 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4132 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4143 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _981 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _995 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1045 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1035);
    float _1046 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1035);
    float _1047 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1035);
    float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
    float _1052 = _1045 * _1051;
    float _1053 = _1046 * _1051;
    float _1054 = _1047 * _1051;
    vec4 _1059 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1061 = _1059.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1233 = sqrt(((_1045 * _1045) + (_1046 * _1046)) + (_1047 * _1047));
        float _1239 = (cbMatDynParam._m0[5u].x * _1233) + cbMatDynParam._m0[5u].y;
        float _4154 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1244 = (cbMatDynParam._m0[5u].z * _1233) + cbMatDynParam._m0[5u].w;
        float _4165 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) - _1240)) + _1240) < ((_1061 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1072 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1073 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1091 = fma(_975, cbSceneParam._m0[5u].z, fma(_974, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _973));
    float _1094 = fma(_975, cbSceneParam._m0[6u].z, fma(_974, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _973));
    float _1097 = fma(_975, cbSceneParam._m0[7u].z, fma(_974, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _973));
    uint _1110 = _293 + 9u;
    uint _1111 = _1110 + uint(cbMatDynParam._m0[0u].w);
    float _1117 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * cbInstanceData._m0[_1111].x;
    float _1118 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * cbInstanceData._m0[_1111].y;
    float _1119 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * cbInstanceData._m0[_1111].z;
    float _4176 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _1120 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1121 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _4198 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1122 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _1123 = 1.0 - _981;
    float _1124 = _1120 * _1123;
    float _1125 = _1121 * _1123;
    float _1126 = _1122 * _1123;
    float _1131 = (_1120 + (-0.039999999105930328369140625)) * _981;
    float _1132 = (_1121 + (-0.039999999105930328369140625)) * _981;
    float _1133 = (_1122 + (-0.039999999105930328369140625)) * _981;
    float _1134 = _1131 + 0.039999999105930328369140625;
    float _1136 = _1132 + 0.039999999105930328369140625;
    float _1137 = _1133 + 0.039999999105930328369140625;
    vec4 _1146 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1072, cbSceneParam._m0[86u].y * _1073));
    float _1150 = ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * TEXCOORD_5.w) * _1146.x;
    float _1151 = dot(vec3(_973, _974, _975), vec3(_1052, _1053, _1054));
    float _1154 = _1151 * 2.0;
    float _1158 = (_1154 * _973) - _1052;
    float _1159 = (_1154 * _974) - _1053;
    float _1160 = (_1154 * _975) - _1054;
    float _1164 = abs(dot(vec3(_1052, _1053, _1054), vec3(_973, _974, _975)));
    float _4209 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _1166 = sqrt(_976);
    float _1179 = exp2((_1166 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1166 * 3.0));
    float _1185 = (1.0 - _1179) * ((_1166 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1186 = _1179 * _1166;
    float _1214 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1218 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1222 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1551;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1276 = fma(_1222, cbModelParam._m0[26u].z, fma(_1218, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1214));
        float _1280 = fma(_1222, cbModelParam._m0[27u].z, fma(_1218, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1214));
        float _1284 = fma(_1222, cbModelParam._m0[28u].z, fma(_1218, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1214));
        float _1309 = _1214 + _973;
        float _1310 = _1218 + _974;
        float _1311 = _1222 + _975;
        float _1321 = fma(_1311, cbModelParam._m0[26u].z, fma(_1310, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1309)) - _1276;
        float _1322 = fma(_1311, cbModelParam._m0[27u].z, fma(_1310, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1309)) - _1280;
        float _1323 = fma(_1311, cbModelParam._m0[28u].z, fma(_1310, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1309)) - _1284;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1340 = ((_1327 * _1321) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1276 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1327 * _1322) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1280 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1327 * _1323) / cbModelParam._m0[34u].z) + ((((((_1284 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        float _1379 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1345.x + (-0.5));
        float _1381 = _1379 * (_1345.y + (-0.5));
        float _1382 = _1379 * (_1345.z + (-0.5));
        float _1389 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1352.x + (-0.5));
        float _1391 = _1389 * (_1352.y + (-0.5));
        float _1392 = _1389 * (_1352.z + (-0.5));
        float _1399 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1359.x + (-0.5));
        float _1401 = _1399 * (_1359.y + (-0.5));
        float _1402 = _1399 * (_1359.z + (-0.5));
        float _1409 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1366.x + (-0.5));
        float _1411 = _1409 * (_1366.y + (-0.5));
        float _1412 = _1409 * (_1366.z + (-0.5));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = _1380 * 0.5;
        float _1417 = _1390 * 0.5;
        float _1418 = _1400 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1433 = (dot(vec3(_973, _974, _975), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1443 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4257 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1445 + 1.0))) + _1450) * _1413;
        float _1460 = _1381 * 0.5;
        float _1461 = _1391 * 0.5;
        float _1462 = _1401 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_973, _974, _975), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4290 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1487 + 1.0))) + _1492) * _1414;
        float _1502 = _1382 * 0.5;
        float _1503 = _1392 * 0.5;
        float _1504 = _1402 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_973, _974, _975), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4323 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1529 + 1.0))) + _1534) * _1415;
        _1551 = _1382;
        _1553 = _1381;
        _1554 = _1380;
        _1555 = _1392;
        _1556 = _1391;
        _1557 = _1390;
        _1558 = _1402;
        _1559 = _1401;
        _1560 = _1400;
        _1561 = _1415;
        _1562 = _1414;
        _1563 = _1413;
        _1564 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1565 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1552;
        _1553 = _1552;
        _1554 = _1552;
        _1555 = _1552;
        _1556 = _1552;
        _1557 = _1552;
        _1558 = _1552;
        _1559 = _1552;
        _1560 = _1552;
        _1561 = _1552;
        _1562 = _1552;
        _1563 = _1552;
        _1564 = 0.0;
        _1565 = 0.0;
        _1566 = 0.0;
    }
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1593 = fma(_1222, cbModelParam._m0[30u].z, fma(_1218, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1214));
        float _1597 = fma(_1222, cbModelParam._m0[31u].z, fma(_1218, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1214));
        float _1601 = fma(_1222, cbModelParam._m0[32u].z, fma(_1218, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1214));
        float _1624 = _1214 + _973;
        float _1625 = _1218 + _974;
        float _1626 = _1222 + _975;
        float _1636 = fma(_1626, cbModelParam._m0[30u].z, fma(_1625, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1624)) - _1593;
        float _1637 = fma(_1626, cbModelParam._m0[31u].z, fma(_1625, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1624)) - _1597;
        float _1638 = fma(_1626, cbModelParam._m0[32u].z, fma(_1625, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1624)) - _1601;
        float _1642 = inversesqrt(dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638)));
        float _1655 = ((_1642 * _1636) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1593 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1656 = ((_1642 * _1637) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1597 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1657 = ((_1642 * _1638) / cbModelParam._m0[35u].z) + ((((((_1601 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1655, _1656, _1657), 0.0);
        vec4 _1666 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1655, _1656, _1657), 0.0);
        vec4 _1673 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1655, _1656, _1657), 0.0);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1655, _1656, _1657), 0.0);
        float _1692 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1693 = _1692 * (_1659.x + (-0.5));
        float _1694 = _1692 * (_1659.y + (-0.5));
        float _1695 = _1692 * (_1659.z + (-0.5));
        float _1702 = exp2((_1666.w + (-0.5)) * 20.0) * 2.0;
        float _1703 = _1702 * (_1666.x + (-0.5));
        float _1704 = _1702 * (_1666.y + (-0.5));
        float _1705 = _1702 * (_1666.z + (-0.5));
        float _1712 = exp2((_1673.w + (-0.5)) * 20.0) * 2.0;
        float _1713 = _1712 * (_1673.x + (-0.5));
        float _1714 = _1712 * (_1673.y + (-0.5));
        float _1715 = _1712 * (_1673.z + (-0.5));
        float _1722 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1723 = _1722 * (_1680.x + (-0.5));
        float _1724 = _1722 * (_1680.y + (-0.5));
        float _1725 = _1722 * (_1680.z + (-0.5));
        float _1726 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1727 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1728 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1729 = _1693 * 0.5;
        float _1730 = _1703 * 0.5;
        float _1731 = _1713 * 0.5;
        float _1732 = dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731));
        float _1737 = (_1732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1732);
        float _1745 = (dot(vec3(_973, _974, _975), vec3(_1737 * _1729, _1737 * _1730, _1737 * _1731)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1754 = sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731)) / (_1726 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1756 = _1755 * 2.0;
        float _1760 = (1.0 - _1755) / (_1755 + 1.0);
        float _4386 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1770 = ((((1.0 - _1761) * (_1756 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1756 + 1.0))) + _1761) * _1726;
        float _1771 = _1694 * 0.5;
        float _1772 = _1704 * 0.5;
        float _1773 = _1714 * 0.5;
        float _1774 = dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773));
        float _1779 = (_1774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1774);
        float _1787 = (dot(vec3(_973, _974, _975), vec3(_1779 * _1771, _1779 * _1772, _1779 * _1773)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1796 = sqrt(((_1772 * _1772) + (_1771 * _1771)) + (_1773 * _1773)) / (_1727 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1798 = _1797 * 2.0;
        float _1802 = (1.0 - _1797) / (_1797 + 1.0);
        float _4419 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1812 = ((((1.0 - _1803) * (_1798 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1798 + 1.0))) + _1803) * _1727;
        float _1813 = _1695 * 0.5;
        float _1814 = _1705 * 0.5;
        float _1815 = _1715 * 0.5;
        float _1816 = dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815));
        float _1821 = (_1816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1816);
        float _1829 = (dot(vec3(_973, _974, _975), vec3(_1821 * _1813, _1821 * _1814, _1821 * _1815)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1838 = sqrt(((_1814 * _1814) + (_1813 * _1813)) + (_1815 * _1815)) / (_1728 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1840 = _1839 * 2.0;
        float _1844 = (1.0 - _1839) / (_1839 + 1.0);
        float _4452 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1854 = ((((1.0 - _1845) * (_1840 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1840 + 1.0))) + _1845) * _1728;
        _1862 = _1695;
        _1863 = _1694;
        _1864 = _1693;
        _1865 = _1705;
        _1866 = _1704;
        _1867 = _1703;
        _1868 = _1715;
        _1869 = _1714;
        _1870 = _1713;
        _1871 = _1728;
        _1872 = _1727;
        _1873 = _1726;
        _1874 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)));
        _1875 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)));
        _1876 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)));
    }
    else
    {
        _1862 = _1552;
        _1863 = _1552;
        _1864 = _1552;
        _1865 = _1552;
        _1866 = _1552;
        _1867 = _1552;
        _1868 = _1552;
        _1869 = _1552;
        _1870 = _1552;
        _1871 = _1552;
        _1872 = _1552;
        _1873 = _1552;
        _1874 = 0.0;
        _1875 = 0.0;
        _1876 = 0.0;
    }
    float _1886 = (cbModelParam._m0[1u].x * (_1874 - _1564)) + _1564;
    float _1887 = (cbModelParam._m0[1u].x * (_1875 - _1565)) + _1565;
    float _1888 = (cbModelParam._m0[1u].x * (_1876 - _1566)) + _1566;
    float _1909 = fma(_1888, cbSceneParam._m0[89u].z, fma(_1887, cbSceneParam._m0[89u].y, _1886 * cbSceneParam._m0[89u].x));
    float _1912 = fma(_1888, cbSceneParam._m0[90u].z, fma(_1887, cbSceneParam._m0[90u].y, _1886 * cbSceneParam._m0[90u].x));
    float _1915 = fma(_1888, cbSceneParam._m0[91u].z, fma(_1887, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1886));
    float _1930 = _1158 * 0.5;
    float _1931 = _1159 * 0.5;
    float _1932 = _1160 * 0.5;
    float _1933 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1864, _1867, _1870, _1873));
    float _1936 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1863, _1866, _1869, _1872));
    float _1939 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1862, _1865, _1868, _1871));
    float _1973;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1946 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1551, _1555, _1558, _1561));
        float _1950 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1553, _1556, _1559, _1562));
        float _1954 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1554, _1557, _1560, _1563));
        float _1961 = dot(vec4(cbModelParam._m0[39u]), vec4(_1930, _1931, _1932, 1.0));
        _1973 = dot(vec3(isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)), isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0)), isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1961) ? 0.0 : (isnan(0.0) ? _1961 : max(0.0, _1961))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1973 = 1.0;
    }
    float _1984;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1975 = dot(vec4(cbModelParam._m0[40u]), vec4(_1930, _1931, _1932, 1.0));
        _1984 = dot(vec3(isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)), isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1975) ? 0.0 : (isnan(0.0) ? _1975 : max(0.0, _1975))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1984 = 1.0;
    }
    float _1988 = (_1984 * cbModelParam._m0[1u].x) + (_1973 * (1.0 - cbModelParam._m0[1u].x));
    float _1998 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _976);
    float _1999 = isnan(_1998) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1998 : min(cbModelParam._m0[25u].z, _1998));
    float _2080;
    float _2082;
    float _2084;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2047 = fma(_1222, cbModelParam._m0[13u].z, fma(_1218, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1214)) + cbModelParam._m0[13u].w;
        float _2051 = fma(_1222, cbModelParam._m0[14u].z, fma(_1218, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1214)) + cbModelParam._m0[14u].w;
        float _2055 = fma(_1222, cbModelParam._m0[15u].z, fma(_1218, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1214)) + cbModelParam._m0[15u].w;
        float _2058 = fma(_1160, cbModelParam._m0[13u].z, fma(_1159, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1158));
        float _2061 = fma(_1160, cbModelParam._m0[14u].z, fma(_1159, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1158));
        float _2064 = fma(_1160, cbModelParam._m0[15u].z, fma(_1159, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1158));
        float _2092;
        if (_2058 > 0.0)
        {
            _2092 = abs((1.0 - _2047) / _2058);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2047 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2092 = frontier_phi_17_15_ladder;
        }
        float _2316;
        if (_2061 > 0.0)
        {
            _2316 = abs((1.0 - _2051) / _2061);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2051 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2316 = frontier_phi_26_22_ladder;
        }
        float _2573;
        if (_2064 > 0.0)
        {
            _2573 = abs((1.0 - _2055) / _2064);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2055 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2573 = frontier_phi_38_33_ladder;
        }
        float _2575 = isnan(_2316) ? _2092 : (isnan(_2092) ? _2316 : min(_2092, _2316));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _2058) + _2047;
        float _2581 = (_2576 * _2061) + _2051;
        float _2582 = (_2576 * _2064) + _2055;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2585 = (-1.0) - _2583;
        float _2587 = _2583 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2582 > _2587) || ((_2582 < _2585) || ((_2581 > _2587) || ((_2581 < _2585) || ((_2580 < _2585) || (_2580 > _2587))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2710 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2582, cbModelParam._m0[9u].z, fma(_2581, cbModelParam._m0[9u].y, _2580 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2582, cbModelParam._m0[10u].z, fma(_2581, cbModelParam._m0[10u].y, _2580 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2582, cbModelParam._m0[11u].z, fma(_2581, cbModelParam._m0[11u].y, _2580 * cbModelParam._m0[11u].x))), _1999);
            frontier_phi_16_38_ladder = _2710.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2710.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2710.x * cbModelParam._m0[1u].y;
        }
        _2080 = frontier_phi_16_38_ladder_2;
        _2082 = frontier_phi_16_38_ladder_1;
        _2084 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2068 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1158, _1159, _1160), _1999);
        _2080 = _2068.x * cbModelParam._m0[1u].y;
        _2082 = _2068.y * cbModelParam._m0[1u].y;
        _2084 = _2068.z * cbModelParam._m0[1u].y;
    }
    float _2088 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _976);
    float _2089 = isnan(_2088) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2088 : min(cbModelParam._m0[25u].w, _2088));
    float _2179;
    float _2181;
    float _2183;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2143 = fma(_1222, cbModelParam._m0[21u].z, fma(_1218, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1214)) + cbModelParam._m0[21u].w;
        float _2147 = fma(_1222, cbModelParam._m0[22u].z, fma(_1218, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1214)) + cbModelParam._m0[22u].w;
        float _2151 = fma(_1222, cbModelParam._m0[23u].z, fma(_1218, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1214)) + cbModelParam._m0[23u].w;
        float _2154 = fma(_1160, cbModelParam._m0[21u].z, fma(_1159, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1158));
        float _2157 = fma(_1160, cbModelParam._m0[22u].z, fma(_1159, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1158));
        float _2160 = fma(_1160, cbModelParam._m0[23u].z, fma(_1159, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1158));
        float _2321;
        if (_2154 > 0.0)
        {
            _2321 = abs((1.0 - _2143) / _2154);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2154 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2143 + 1.0) / _2154);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2321 = frontier_phi_28_24_ladder;
        }
        float _2600;
        if (_2157 > 0.0)
        {
            _2600 = abs((1.0 - _2147) / _2157);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2147 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2600 = frontier_phi_40_35_ladder;
        }
        float _2813;
        if (_2160 > 0.0)
        {
            _2813 = abs((1.0 - _2151) / _2160);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2151 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2813 = frontier_phi_49_46_ladder;
        }
        float _2815 = isnan(_2600) ? _2321 : (isnan(_2321) ? _2600 : min(_2321, _2600));
        float _2816 = isnan(_2813) ? _2815 : (isnan(_2815) ? _2813 : min(_2815, _2813));
        float _2820 = (_2816 * _2154) + _2143;
        float _2821 = (_2816 * _2157) + _2147;
        float _2822 = (_2816 * _2160) + _2151;
        float _2823 = _2816 * 9.9999997473787516355514526367188e-05;
        float _2824 = (-1.0) - _2823;
        float _2826 = _2823 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2822 > _2826) || ((_2822 < _2824) || ((_2821 > _2826) || ((_2821 < _2824) || ((_2820 < _2824) || (_2820 > _2826))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2822, cbModelParam._m0[17u].z, fma(_2821, cbModelParam._m0[17u].y, _2820 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2822, cbModelParam._m0[18u].z, fma(_2821, cbModelParam._m0[18u].y, _2820 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2822, cbModelParam._m0[19u].z, fma(_2821, cbModelParam._m0[19u].y, _2820 * cbModelParam._m0[19u].x))), _2089);
            frontier_phi_25_49_ladder = _3021.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3021.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3021.x * cbModelParam._m0[1u].z;
        }
        _2179 = frontier_phi_25_49_ladder_2;
        _2181 = frontier_phi_25_49_ladder_1;
        _2183 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2163 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1158, _1159, _1160), _2089);
        _2179 = _2163.x * cbModelParam._m0[1u].z;
        _2181 = _2163.y * cbModelParam._m0[1u].z;
        _2183 = _2163.z * cbModelParam._m0[1u].z;
    }
    float _2196 = (((_1185 * _1134) + _1186) * _1150) * ((cbModelParam._m0[1u].w * (_2179 - _2080)) + _2080);
    float _2198 = (((_1185 * _1136) + _1186) * _1150) * ((cbModelParam._m0[1u].w * (_2181 - _2082)) + _2082);
    float _2200 = (((_1185 * _1137) + _1186) * _1150) * ((cbModelParam._m0[1u].w * (_2183 - _2084)) + _2084);
    float _2203 = fma(_2200, cbSceneParam._m0[89u].z, fma(_2198, cbSceneParam._m0[89u].y, _2196 * cbSceneParam._m0[89u].x));
    float _2206 = fma(_2200, cbSceneParam._m0[90u].z, fma(_2198, cbSceneParam._m0[90u].y, _2196 * cbSceneParam._m0[90u].x));
    float _2209 = fma(_2200, cbSceneParam._m0[91u].z, fma(_2198, cbSceneParam._m0[91u].y, _2196 * cbSceneParam._m0[91u].x));
    vec4 _2217 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1072, _1073));
    float _2219 = _2217.w;
    float _2231 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2219);
    float _2232 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2219);
    float _2233 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2219);
    uvec4 _2237 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2239 = _2237.x * 14u;
    uint _2240 = _2239 + 13u;
    float _2247 = _1150 + (-1.0);
    float _2252 = (cbLight._m0[_2240].x * _2247) + 1.0;
    float _2253 = (cbLight._m0[_2240].y * _2247) + 1.0;
    float _2254 = (cbLight._m0[_2240].z * _2247) + 1.0;
    float _2255 = (cbLight._m0[_2240].w * _2247) + 1.0;
    uint _2256 = _2239 + 5u;
    float _2262 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
    uint _2266 = _2239 + 4u;
    float _2275 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
    uint _2279 = _2239 | 1u;
    float _2290 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_973, _974, _975));
    float _2293 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_973, _974, _975));
    float _4588 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _4599 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2298 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * 0.3183098733425140380859375;
    float _2300 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * 0.3183098733425140380859375;
    float _2307 = ((cbLight._m0[_2256].x * _2262) * _2300) + (((cbLight._m0[_2266].x * _2231) * _2275) * _2298);
    float _2308 = ((_2262 * cbLight._m0[_2256].y) * _2300) + (((cbLight._m0[_2266].y * _2232) * _2275) * _2298);
    float _2309 = ((_2262 * cbLight._m0[_2256].z) * _2300) + (((cbLight._m0[_2266].z * _2233) * _2275) * _2298);
    uvec4 _2313 = floatBitsToUint(cbLight._m0[_2239 + 12u]);
    bool _2315 = _2313.x == 0u;
    float _2326;
    float _2328;
    float _2330;
    if (_2315)
    {
        _2326 = _2307;
        _2328 = _2308;
        _2330 = _2309;
    }
    else
    {
        uint _2334 = _2239 + 6u;
        float _2350 = (dot(vec3(cbLight._m0[_2239 + 2u].xyz), vec3(_973, _974, _975)) * 0.5) + 0.5;
        float _2351 = _2350 * _2350;
        float _4610 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2352 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2353 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2326 = (((cbLight._m0[_2334].x * 0.3183098733425140380859375) * _2352) * _2353) + _2307;
        _2328 = (((cbLight._m0[_2334].y * 0.3183098733425140380859375) * _2352) * _2353) + _2308;
        _2330 = (((cbLight._m0[_2334].z * 0.3183098733425140380859375) * _2352) * _2353) + _2309;
    }
    bool _2333 = _2313.y == 0u;
    float _2371;
    float _2373;
    float _2375;
    if (_2333)
    {
        _2371 = _2326;
        _2373 = _2328;
        _2375 = _2330;
    }
    else
    {
        uint _2544 = _2239 + 7u;
        float _2560 = (dot(vec3(cbLight._m0[_2239 + 3u].xyz), vec3(_973, _974, _975)) * 0.5) + 0.5;
        float _2561 = _2560 * _2560;
        float _4626 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2562 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2563 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
        _2371 = (((cbLight._m0[_2544].x * 0.3183098733425140380859375) * _2562) * _2563) + _2326;
        _2373 = (((cbLight._m0[_2544].y * 0.3183098733425140380859375) * _2562) * _2563) + _2328;
        _2375 = (((cbLight._m0[_2544].z * 0.3183098733425140380859375) * _2562) * _2563) + _2330;
    }
    uint _2378 = _2239 + 8u;
    float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _976) * 0.949999988079071044921875);
    float _2392 = _2391 * _2391;
    float _2393 = cbLight._m0[_2239].x + _1052;
    float _2394 = cbLight._m0[_2239].y + _1053;
    float _2395 = cbLight._m0[_2239].z + _1054;
    float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
    float _2400 = _2399 * _2393;
    float _2401 = _2399 * _2394;
    float _2402 = _2399 * _2395;
    float _2403 = dot(vec3(_973, _974, _975), vec3(cbLight._m0[_2239].xyz));
    float _4642 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _4653 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _2407 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _2408 = dot(vec3(_973, _974, _975), vec3(_2400, _2401, _2402));
    float _4664 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _2412 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2400, _2401, _2402));
    float _4675 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2416 = _2392 * _2392;
    float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
    float _2428 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
    float _2429 = 0.959999978542327880859375 - _1131;
    float _2431 = 0.959999978542327880859375 - _1132;
    float _2432 = 0.959999978542327880859375 - _1133;
    float _2439 = 1.0 - _2392;
    float _2450 = (0.5 / (((_2407 * ((_2406 * _2439) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2439) + _2392) * _2406))) * _2406;
    float _4686 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2452 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
    uint _2466 = _2239 + 9u;
    float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _976) * 0.949999988079071044921875);
    float _2478 = _2477 * _2477;
    float _2479 = cbLight._m0[_2279].x + _1052;
    float _2480 = cbLight._m0[_2279].y + _1053;
    float _2481 = cbLight._m0[_2279].z + _1054;
    float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
    float _2486 = _2485 * _2479;
    float _2487 = _2485 * _2480;
    float _2488 = _2485 * _2481;
    float _2489 = dot(vec3(_973, _974, _975), vec3(cbLight._m0[_2279].xyz));
    float _4697 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
    float _2493 = dot(vec3(_973, _974, _975), vec3(_2486, _2487, _2488));
    float _4708 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
    float _2497 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2486, _2487, _2488));
    float _4719 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2501 = _2478 * _2478;
    float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
    float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
    float _2519 = 1.0 - _2478;
    float _2529 = (0.5 / (((_2407 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2519) + _2478) * _2492))) * _2492;
    float _4730 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2531 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
    float _2541 = (((((_2512 * _2429) + _1134) * cbLight._m0[_2466].x) * _2531) * _2262) + ((((cbLight._m0[_2378].x * _2231) * ((_2428 * _2429) + _1134)) * _2452) * _2275);
    float _2542 = (((((_2512 * _2431) + _1136) * cbLight._m0[_2466].y) * _2531) * _2262) + ((((cbLight._m0[_2378].y * _2232) * ((_2428 * _2431) + _1136)) * _2452) * _2275);
    float _2543 = (((((_2512 * _2432) + _1137) * cbLight._m0[_2466].z) * _2531) * _2262) + ((((cbLight._m0[_2378].z * _2233) * ((_2428 * _2432) + _1137)) * _2452) * _2275);
    float _2605;
    float _2607;
    float _2609;
    if (_2315)
    {
        _2605 = _2541;
        _2607 = _2542;
        _2609 = _2543;
    }
    else
    {
        uint _2611 = _2239 + 2u;
        uint _2615 = _2239 + 10u;
        float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2611].w)) * _976) * 0.949999988079071044921875);
        float _2630 = _2629 * _2629;
        float _2631 = cbLight._m0[_2611].x + _1052;
        float _2632 = cbLight._m0[_2611].y + _1053;
        float _2633 = cbLight._m0[_2611].z + _1054;
        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
        float _2638 = _2637 * _2631;
        float _2639 = _2637 * _2632;
        float _2640 = _2637 * _2633;
        float _2641 = dot(vec3(_973, _974, _975), vec3(cbLight._m0[_2611].xyz));
        float _4741 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2645 = dot(vec3(_973, _974, _975), vec3(_2638, _2639, _2640));
        float _4752 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2649 = dot(vec3(cbLight._m0[_2611].xyz), vec3(_2638, _2639, _2640));
        float _4763 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2653 = _2630 * _2630;
        float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
        float _2664 = exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0);
        float _2671 = 1.0 - _2630;
        float _2681 = (0.5 / (((_2407 * ((_2644 * _2671) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2671) + _2630) * _2644))) * _2644;
        float _4774 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2683 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
        float _2684 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2605 = (((((_2664 * _2429) + _1134) * cbLight._m0[_2615].x) * _2683) * _2684) + _2541;
        _2607 = (((((_2664 * _2431) + _1136) * cbLight._m0[_2615].y) * _2683) * _2684) + _2542;
        _2609 = (((((_2664 * _2432) + _1137) * cbLight._m0[_2615].z) * _2683) * _2684) + _2543;
    }
    float _2719;
    float _2721;
    float _2723;
    if (_2333)
    {
        _2719 = _2605;
        _2721 = _2607;
        _2723 = _2609;
    }
    else
    {
        uint _2730 = _2239 + 3u;
        uint _2734 = _2239 + 11u;
        float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2730].w)) * _976) * 0.949999988079071044921875);
        float _2749 = _2748 * _2748;
        float _2750 = cbLight._m0[_2730].x + _1052;
        float _2751 = cbLight._m0[_2730].y + _1053;
        float _2752 = cbLight._m0[_2730].z + _1054;
        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
        float _2757 = _2756 * _2750;
        float _2758 = _2756 * _2751;
        float _2759 = _2756 * _2752;
        float _2760 = dot(vec3(_973, _974, _975), vec3(cbLight._m0[_2730].xyz));
        float _4790 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2763 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2764 = dot(vec3(_973, _974, _975), vec3(_2757, _2758, _2759));
        float _4801 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2767 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2768 = dot(vec3(cbLight._m0[_2730].xyz), vec3(_2757, _2758, _2759));
        float _4812 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2772 = _2749 * _2749;
        float _2776 = ((_2767 * _2767) * (_2772 + (-1.0))) + 1.0;
        float _2783 = exp2(log2(1.0 - (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) * 5.0);
        float _2790 = 1.0 - _2749;
        float _2800 = (0.5 / (((_2407 * ((_2763 * _2790) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2790) + _2749) * _2763))) * _2763;
        float _4823 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2802 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2772 / ((_2776 * _2776) * 3.141590118408203125));
        float _2803 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
        _2719 = (((((_2783 * _2429) + _1134) * cbLight._m0[_2734].x) * _2802) * _2803) + _2605;
        _2721 = (((((_2783 * _2431) + _1136) * cbLight._m0[_2734].y) * _2802) * _2803) + _2607;
        _2723 = (((((_2783 * _2432) + _1137) * cbLight._m0[_2734].z) * _2802) * _2803) + _2609;
    }
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    if (_2237.y == 0u)
    {
        float _2878 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2879 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2878;
        float _2880 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2878;
        float _2881 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2878;
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.x;
        uint _2905 = uint((float(_2893.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1073) / _2894))) + floor(float(uint(cbSceneParam._m0[85u].x * _1072) / _2894)));
        float _2915 = (log2(_2881 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2916 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        uint _2919 = uint(isnan(14.0) ? _2916 : (isnan(_2916) ? 14.0 : min(_2916, 14.0)));
        uvec4 _2924 = texelFetch(g_lightClusterGridBuffer, int(((_2919 << 2u) + (_2905 << 6u)) >> 2u));
        uint _2925 = _2924.x;
        uint _2926 = _2893.z;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        if (((((1u << ((_2926 >> 4u) & 15u)) + 4294967295u) & _2925) == 0u) || ((_2926 & 240u) == 0u))
        {
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
            _3034 = 0.0;
            _3036 = 0.0;
        }
        else
        {
            float _3027;
            float _3029;
            float _3031;
            float _3033;
            float _3035;
            float _3037;
            float _3179 = 0.0;
            float _3180 = 0.0;
            float _3181 = 0.0;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            uint _3185 = 0u;
            uint _3194;
            bool _3195;
            for (;;)
            {
                _3194 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3185 << 2u)) >> 2u)).x;
                _3195 = _3194 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3195)
                {
                    frontier_phi_66_pred = _3179;
                    frontier_phi_66_pred_1 = _3184;
                    frontier_phi_66_pred_2 = _3183;
                    frontier_phi_66_pred_3 = _3182;
                    frontier_phi_66_pred_4 = _3181;
                    frontier_phi_66_pred_5 = _3180;
                }
                else
                {
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    uint _3330;
                    _3324 = _3179;
                    _3325 = _3180;
                    _3326 = _3181;
                    _3327 = _3182;
                    _3328 = _3183;
                    _3329 = _3184;
                    _3330 = _3194;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    for (;;)
                    {
                        uint _3334 = uint(findLSB(_3330)) + (_3185 << 5u);
                        uint _3331 = (_3330 + 4294967295u) & _3330;
                        uint _3336 = _3334 * 48u;
                        vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 3u)).x));
                        uint _3356 = (_3334 * 48u) + 4u;
                        vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3356)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 3u)).x));
                        uint _3375 = (_3334 * 48u) + 8u;
                        vec3 _3386 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x));
                        float _3390 = _3350.x - _2879;
                        float _3391 = _3350.y - _2880;
                        float _3392 = _3350.z - _2881;
                        float _3393 = dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392));
                        float _3396 = inversesqrt(_3393);
                        float _3397 = _3396 * _3390;
                        float _3398 = _3396 * _3391;
                        float _3399 = _3396 * _3392;
                        float _3400 = dot(vec3(_1091, _1094, _1097), vec3(_3397, _3398, _3399));
                        float _3405 = 1.0 - (_3393 * _3350.w);
                        float _4849 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3406 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                        float _3407 = sqrt(_3393) * _3369.w;
                        float _3410 = 1.39999997615814208984375 / (_3407 + 1.39999997615814208984375);
                        float _3411 = _3410 * _3410;
                        float _3414 = ((1.0 - _3411) * _3400) + _3411;
                        float _3417 = _3407 * _3407;
                        float _3421 = ((isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0))) * _3406) / ((_3417 * 0.699999988079071044921875) + 1.0);
                        float _3425 = (-0.0) - _2879;
                        float _3426 = (-0.0) - _2880;
                        float _3427 = (-0.0) - _2881;
                        float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                        float _3432 = _3431 * _3425;
                        float _3433 = _3431 * _3426;
                        float _3434 = _3431 * _3427;
                        float _3442 = exp2(log2(1.0 / ((_3417 * 3.5) + 5.0)) * 0.25);
                        float _3443 = 1.0 - _1166;
                        float _3450 = sqrt(1.0 - ((1.0 - (_3443 * _3443)) * (1.0 - (_3442 * _3442))));
                        float _3451 = _3450 * _3450;
                        float _3452 = _3451 * _3451;
                        float _3453 = _3432 + _3397;
                        float _3454 = _3433 + _3398;
                        float _3455 = _3434 + _3399;
                        float _3459 = inversesqrt(dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455)));
                        float _3463 = dot(vec3(_1091, _1094, _1097), vec3(_3432, _3433, _3434));
                        float _4865 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3466 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                        float _3467 = dot(vec3(_1091, _1094, _1097), vec3(_3459 * _3453, _3459 * _3454, _3459 * _3455));
                        float _4876 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3470 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                        float _3474 = ((_3470 * _3470) * (_3452 + (-1.0))) + 1.0;
                        float _3475 = _3410 * _3451;
                        float _3476 = _3475 * _3475;
                        float _3479 = ((1.0 - _3476) * _3400) + _3476;
                        float _4887 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3480 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                        float _3481 = 1.0 - _3451;
                        float _3491 = (0.5 / (((_3480 * ((_3466 * _3481) + _3451)) + 9.9999999392252902907785028219223e-09) + (((_3480 * _3481) + _3451) * _3466))) * _3480;
                        float _4898 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3502 = (((_3452 * 3.1415927410125732421875) * (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) / ((_3474 * _3474) * ((_3417 * 2.1991131305694580078125) + 3.141590118408203125))) * _3406;
                        _3254 = (_3421 * _3369.x) + _3327;
                        _3255 = (_3421 * _3369.y) + _3328;
                        _3256 = (_3421 * _3369.z) + _3329;
                        _3251 = (_3502 * _3386.x) + _3324;
                        _3252 = (_3502 * _3386.y) + _3325;
                        _3253 = (_3502 * _3386.z) + _3326;
                        if (_3331 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3324 = _3251;
                            _3325 = _3252;
                            _3326 = _3253;
                            _3327 = _3254;
                            _3328 = _3255;
                            _3329 = _3256;
                            _3330 = _3331;
                        }
                    }
                    frontier_phi_66_pred = _3251;
                    frontier_phi_66_pred_1 = _3256;
                    frontier_phi_66_pred_2 = _3255;
                    frontier_phi_66_pred_3 = _3254;
                    frontier_phi_66_pred_4 = _3253;
                    frontier_phi_66_pred_5 = _3252;
                }
                _3027 = frontier_phi_66_pred;
                _3037 = frontier_phi_66_pred_1;
                _3035 = frontier_phi_66_pred_2;
                _3033 = frontier_phi_66_pred_3;
                _3031 = frontier_phi_66_pred_4;
                _3029 = frontier_phi_66_pred_5;
                uint _3186 = _3185 + 1u;
                if (_3186 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3179 = _3027;
                    _3180 = _3029;
                    _3181 = _3031;
                    _3182 = _3033;
                    _3183 = _3035;
                    _3184 = _3037;
                    _3185 = _3186;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
            _3034 = _3035;
            _3036 = _3037;
        }
        uvec4 _3040 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3041 = _3040.z;
        uint _3043 = (_3041 >> 8u) & 15u;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        if (((4294967295u << _3043) & _2925) == 0u)
        {
            _3147 = _3026;
            _3149 = _3028;
            _3151 = _3030;
            _3153 = _3032;
            _3155 = _3034;
            _3157 = _3036;
        }
        else
        {
            float _3172 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
            float _3173 = _3172 * _2879;
            float _3174 = _3172 * _2880;
            float _3175 = _3172 * _2881;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3043 < ((_3041 >> 12u) & 15u))
            {
                float _3148;
                float _3150;
                float _3152;
                float _3154;
                float _3156;
                float _3158;
                float _3307 = _3026;
                float _3308 = _3028;
                float _3309 = _3030;
                float _3310 = _3032;
                float _3311 = _3034;
                float _3312 = _3036;
                uint _3313 = _3043;
                uint _3322;
                bool _3323;
                for (;;)
                {
                    _3322 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3313 << 2u)) >> 2u)).x;
                    _3323 = _3322 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3323)
                    {
                        frontier_phi_77_pred = _3312;
                        frontier_phi_77_pred_1 = _3311;
                        frontier_phi_77_pred_2 = _3310;
                        frontier_phi_77_pred_3 = _3309;
                        frontier_phi_77_pred_4 = _3308;
                        frontier_phi_77_pred_5 = _3307;
                    }
                    else
                    {
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3529 = _3307;
                        float _3530 = _3308;
                        float _3531 = _3309;
                        float _3532 = _3310;
                        float _3533 = _3311;
                        float _3534 = _3312;
                        uint _3535 = _3322;
                        uint _3536;
                        vec4 _3561;
                        float _3562;
                        vec4 _3577;
                        vec3 _3589;
                        vec4 _3604;
                        vec4 _3619;
                        float _3665;
                        bool _3666;
                        for (;;)
                        {
                            uint _3546 = ((_3313 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3535));
                            _3536 = (_3535 + 4294967295u) & _3535;
                            uint _3548 = _3546 * 40u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            _3562 = _3561.w;
                            uint _3564 = (_3546 * 40u) + 4u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3579 = (_3546 * 40u) + 8u;
                            _3589 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x));
                            uint _3591 = (_3546 * 40u) + 16u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3606 = (_3546 * 40u) + 20u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3621 = (_3546 * 40u) + 24u;
                            vec4 _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            uint _3640 = (_3546 * 40u) + 28u;
                            vec4 _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            _3665 = fma(_2881, _3653.z, fma(_2880, _3653.y, _3653.x * _2879)) + _3653.w;
                            _3666 = !((fma(_2881, _3634.z, fma(_2880, _3634.y, _3634.x * _2879)) + _3634.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3666)
                            {
                                float _3693 = _3561.x - _2879;
                                float _3694 = _3561.y - _2880;
                                float _3695 = _3561.z - _2881;
                                float _3696 = dot(vec3(_3693, _3694, _3695), vec3(_3693, _3694, _3695));
                                float _3699 = inversesqrt(_3696);
                                float _3700 = _3699 * _3693;
                                float _3701 = _3699 * _3694;
                                float _3702 = _3699 * _3695;
                                float _3706 = 1.0 - (_3696 / (_3562 * _3562));
                                float _4909 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3707 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3711 = sqrt(_3696) * _3577.w;
                                float _3713 = 1.39999997615814208984375 / (_3711 + 1.39999997615814208984375);
                                float _3714 = _3713 * _3713;
                                float _3717 = ((1.0 - _3714) * dot(vec3(_3700, _3701, _3702), vec3(_1091, _1094, _1097))) + _3714;
                                float _3720 = _3711 * _3711;
                                float _3724 = (fma(_2881, _3604.z, fma(_2880, _3604.y, _3604.x * _2879)) + _3604.w) / _3665;
                                float _3725 = (fma(_2881, _3619.z, fma(_2880, _3619.y, _3619.x * _2879)) + _3619.w) / _3665;
                                float _3729 = 1.0 - dot(vec2(_3724, _3725), vec2(_3724, _3725));
                                float _4925 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3730 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                                float _3731 = _3730 * (((isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0))) * _3707) / ((_3720 * 0.699999988079071044921875) + 1.0));
                                float _3743 = exp2(log2(1.0 / ((_3720 * 3.5) + 5.0)) * 0.25);
                                float _3744 = 1.0 - _1166;
                                float _3751 = sqrt(1.0 - ((1.0 - (_3744 * _3744)) * (1.0 - (_3743 * _3743))));
                                float _3752 = _3751 * _3751;
                                float _3753 = _3752 * _3752;
                                float _3754 = _3700 - _3173;
                                float _3755 = _3701 - _3174;
                                float _3756 = _3702 - _3175;
                                float _3760 = inversesqrt(dot(vec3(_3754, _3755, _3756), vec3(_3754, _3755, _3756)));
                                float _3764 = dot(vec3(_1091, _1094, _1097), vec3((-0.0) - _3173, (-0.0) - _3174, (-0.0) - _3175));
                                float _4936 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3767 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                                float _3768 = dot(vec3(_1091, _1094, _1097), vec3(_3760 * _3754, _3760 * _3755, _3760 * _3756));
                                float _4947 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3771 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3775 = ((_3771 * _3771) * (_3753 + (-1.0))) + 1.0;
                                float _3776 = _3713 * _3752;
                                float _3777 = _3776 * _3776;
                                float _3783 = ((1.0 - _3777) * dot(vec3(_1091, _1094, _1097), vec3(_3700, _3701, _3702))) + _3777;
                                float _4958 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3784 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3785 = 1.0 - _3752;
                                float _3795 = (0.5 / (((_3784 * ((_3767 * _3785) + _3752)) + 9.9999999392252902907785028219223e-09) + (((_3784 * _3785) + _3752) * _3767))) * _3784;
                                float _4969 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3805 = (_3730 * _3707) * (((_3753 * 3.1415927410125732421875) * (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0)))) / ((_3775 * _3775) * ((_3720 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3731 * _3577.y;
                                frontier_phi_83_pred_1 = _3731 * _3577.x;
                                frontier_phi_83_pred_2 = _3805 * _3589.z;
                                frontier_phi_83_pred_3 = _3805 * _3589.y;
                                frontier_phi_83_pred_4 = _3805 * _3589.x;
                                frontier_phi_83_pred_5 = _3731 * _3577.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3813 = frontier_phi_83_pred;
                            _3812 = frontier_phi_83_pred_1;
                            _3811 = frontier_phi_83_pred_2;
                            _3810 = frontier_phi_83_pred_3;
                            _3809 = frontier_phi_83_pred_4;
                            _3814 = frontier_phi_83_pred_5;
                            _3519 = _3812 + _3532;
                            _3520 = _3813 + _3533;
                            _3521 = _3814 + _3534;
                            _3516 = _3809 + _3529;
                            _3517 = _3810 + _3530;
                            _3518 = _3811 + _3531;
                            if (_3536 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3536;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3521;
                        frontier_phi_77_pred_1 = _3520;
                        frontier_phi_77_pred_2 = _3519;
                        frontier_phi_77_pred_3 = _3518;
                        frontier_phi_77_pred_4 = _3517;
                        frontier_phi_77_pred_5 = _3516;
                    }
                    _3158 = frontier_phi_77_pred;
                    _3156 = frontier_phi_77_pred_1;
                    _3154 = frontier_phi_77_pred_2;
                    _3152 = frontier_phi_77_pred_3;
                    _3150 = frontier_phi_77_pred_4;
                    _3148 = frontier_phi_77_pred_5;
                    uint _3314 = _3313 + 1u;
                    if (_3314 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3307 = _3148;
                        _3308 = _3150;
                        _3309 = _3152;
                        _3310 = _3154;
                        _3311 = _3156;
                        _3312 = _3158;
                        _3313 = _3314;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3152;
                frontier_phi_58_59_ladder_1 = _3158;
                frontier_phi_58_59_ladder_2 = _3156;
                frontier_phi_58_59_ladder_3 = _3154;
                frontier_phi_58_59_ladder_4 = _3150;
                frontier_phi_58_59_ladder_5 = _3148;
            }
            else
            {
                frontier_phi_58_59_ladder = _3030;
                frontier_phi_58_59_ladder_1 = _3036;
                frontier_phi_58_59_ladder_2 = _3034;
                frontier_phi_58_59_ladder_3 = _3032;
                frontier_phi_58_59_ladder_4 = _3028;
                frontier_phi_58_59_ladder_5 = _3026;
            }
            _3147 = frontier_phi_58_59_ladder_5;
            _3149 = frontier_phi_58_59_ladder_4;
            _3151 = frontier_phi_58_59_ladder;
            _3153 = frontier_phi_58_59_ladder_3;
            _3155 = frontier_phi_58_59_ladder_2;
            _3157 = frontier_phi_58_59_ladder_1;
        }
        float _3162 = isnan(1.0) ? _1150 : (isnan(_1150) ? 1.0 : min(_1150, 1.0));
        _2938 = (_3162 * _3153) + _2371;
        _2940 = (_3162 * _3155) + _2373;
        _2942 = (_3162 * _3157) + _2375;
        _2944 = ((_3147 * _1134) * _3162) + _2719;
        _2946 = ((_3149 * _1136) * _3162) + _2721;
        _2948 = ((_3151 * _1137) * _3162) + _2723;
    }
    else
    {
        _2938 = _2371;
        _2940 = _2373;
        _2942 = _2375;
        _2944 = _2719;
        _2946 = _2721;
        _2948 = _2723;
    }
    float _4985 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _4996 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _5007 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _2965 = ((isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0))) * (_2938 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1150))) + ((_2944 + ((isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0))) * _1988)) * cbPerFrame._m0[3u].x);
    float _2966 = ((isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0))) * (_2940 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1150))) + ((_2946 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1988)) * cbPerFrame._m0[3u].x);
    float _2967 = ((isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0))) * (_2942 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1150))) + ((_2948 + ((isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0))) * _1988)) * cbPerFrame._m0[3u].x);
    uint _2968 = _293 + 6u;
    float _2976 = _1072 / cbSceneParam._m0[86u].x;
    float _2977 = _1073 / cbSceneParam._m0[86u].y;
    vec4 _2991 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2976, _2977, (log2((isnan(cbSceneParam._m0[77u].w) ? _995 : (isnan(_995) ? cbSceneParam._m0[77u].w : min(_995, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2993 = _2991.x;
    float _2994 = _2991.y;
    float _2995 = _2991.z;
    float _2996 = _2991.w;
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    if (_995 > cbSceneParam._m0[78u].w)
    {
        float _3051 = isnan(_995) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _995 : min(cbSceneParam._m0[80u].w, _995));
        float _3052 = _3051 / _995;
        float _3063 = _3052 * _1045;
        float _3064 = _1046 * _3052;
        float _3065 = (-0.0) - _3064;
        float _3067 = _3052 * _1047;
        float _3069 = (cbSceneParam._m0[77u].w * _3065) / _3051;
        float _3070 = _3069 + cbSceneParam._m0[79u].w;
        float _3071 = cbSceneParam._m0[79u].w - _3064;
        float _3077 = sqrt(((_3063 * _3063) + (_3064 * _3064)) + (_3067 * _3067));
        float _3080 = (1.0 - (cbSceneParam._m0[77u].w / _3051)) * _3077;
        float _3085 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3087 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3264;
        if (abs((_3065 - _3069) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3264 = ((((_3070 > 0.0) ? exp2(_3085 * _3070) : (2.0 - exp2(_3087 * _3070))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3080;
        }
        else
        {
            float _3208 = 1.0 / cbSceneParam._m0[80u].x;
            float _3209 = isnan(_3071) ? _3070 : (isnan(_3070) ? _3071 : max(_3070, _3071));
            float _3210 = isnan(_3071) ? _3070 : (isnan(_3070) ? _3071 : min(_3070, _3071));
            float _3219 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : min(_3209, 0.0));
            float _3220 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : min(_3210, 0.0));
            _3264 = ((abs(_3077 / _3065) * cbSceneParam._m0[80u].y) * ((((_3219 - _3220) * 2.0) - ((exp2(_3085 * (isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0)))) - exp2(_3085 * (isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))))) * _3208)) - ((exp2(_3087 * _3219) - exp2(_3087 * _3220)) * _3208))) + (_3080 * cbSceneParam._m0[80u].z);
        }
        vec4 _3266 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2976, _2977, 1.0), 0.0);
        float _3275 = exp2((_3264 * (-1.44269502162933349609375)) * (1.0 - _3266.w));
        float _3276 = log2(_3275);
        float _3292 = log2(_2996);
        _3089 = (exp2(_3292 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].x)) * _3266.x) / cbSceneParam._m0[78u].x)) + _2993;
        _3091 = (exp2(_3292 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].y)) * _3266.y) / cbSceneParam._m0[78u].y)) + _2994;
        _3093 = (exp2(_3292 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].z)) * _3266.z) / cbSceneParam._m0[78u].z)) + _2995;
        _3095 = _3275 * _2996;
    }
    else
    {
        _3089 = _2993;
        _3091 = _2994;
        _3093 = _2995;
        _3095 = _2996;
    }
    bool _3302;
    vec4 _3105;
    vec4 _3127;
    float _3129;
    float _3133;
    float _3134;
    float _3135;
    float _3136;
    bool _3146;
    for (;;)
    {
        _3105 = cbMatDynParam._m0[0u];
        float _3107 = roundEven(_3105.y);
        bool _3108 = _3107 == 3.0;
        float _3109 = log2(_3095);
        float _3116 = exp2(_3109 * cbSceneParam._m0[78u].x) * _2965;
        float _3117 = exp2(_3109 * cbSceneParam._m0[78u].y) * _2966;
        float _3118 = exp2(_3109 * cbSceneParam._m0[78u].z) * _2967;
        float _3125 = _1061 + (-0.5);
        _3127 = cbMtdParam._m0[1u];
        _3129 = _3127.y * _3125;
        float _3132 = (_3107 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3133 = _3132 * (_3108 ? _3116 : (_3116 + (cbSceneParam._m0[72u].w * _3089)));
        _3134 = _3132 * (_3108 ? _3117 : (_3117 + (cbSceneParam._m0[72u].w * _3091)));
        _3135 = _3132 * (_3108 ? _3118 : (_3118 + (cbSceneParam._m0[72u].w * _3093)));
        _3136 = _3125 * 0.999000012874603271484375;
        _3146 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3146)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3136) < 0.5)
            {
                _3302 = true;
                break;
            }
        }
        uint _3243 = _1110 + uint(_3105.w);
        if ((cbInstanceData._m0[_3243].w < 1.0) && ((cbInstanceData._m0[_3243].w + _3136) < 0.5))
        {
            _3302 = true;
            break;
        }
        if ((_3129 + 1.0) < _3127.x)
        {
            _3302 = true;
            break;
        }
        _3302 = false;
        break;
    }
    float _3507;
    if (_3302)
    {
        discard_state = true;
        _3507 = 0.0;
    }
    else
    {
        _3507 = cbInstanceData._m0[_2968].w;
    }
    SV_Target.x = _3133;
    SV_Target.y = _3134;
    SV_Target.z = _3135;
    SV_Target.w = _3507;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2968].w;
    discard_exit();
}


