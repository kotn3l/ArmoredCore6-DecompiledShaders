#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1041;
float _3425;
float _3426;
float _3427;
float _3428;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    float _242 = _241 * TEXCOORD.z;
    float _243 = _241 * TEXCOORD.w;
    vec4 _262 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _288 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _292 = _288.z;
    float _297 = (_288.x * 2.0) + (-1.0);
    float _299 = (_288.y * 2.0) + (-1.0);
    float _300 = dot(vec2(_297, _299), vec2(_297, _299));
    float _3437 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _306 = sqrt(1.0 - (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))));
    float _309 = fma(_306, _210, fma(_299, _217, _297 * _203));
    float _312 = fma(_306, _211, fma(_299, _218, _297 * _204));
    float _315 = fma(_306, _212, fma(_299, _219, _297 * _205));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _242) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _243) + cbTextureTilingScale._m0[11u].w));
    float _357 = _355.x;
    float _358 = 1.0 - _357;
    float _367 = (cbMtdParam._m0[19u].x + dot(vec4(_319 * _309, _319 * _312, _319 * _315, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_357 - _358) * cbMtdParam._m0[24u].z) + _358) * cbMtdParam._m0[21u].z);
    float _3448 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _375 = (_368 * (cbMtdParam._m0[17u].x - _268)) + _268;
    float _376 = (_368 * (cbMtdParam._m0[17u].y - _269)) + _269;
    float _377 = (_368 * (cbMtdParam._m0[17u].z - _270)) + _270;
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _392 = _390.x;
    float _394 = _392 - (_392 * _368);
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _242) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _243) + cbTextureTilingScale._m0[15u].w));
    float _414 = (_407.x * 2.0) + (-1.0);
    float _415 = (_407.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_414, _415), vec2(_414, _415));
    float _3459 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _424 = ((_407.z - _292) * _368) + _292;
    float _434 = ((sqrt(1.0 - (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) - _306) * _368) + _306;
    float _437 = (((_414 - _297) * _368) + _297) + (cbMtdParam._m0[21u].x * _297);
    float _438 = (((_415 - _299) * _368) + _299) + (cbMtdParam._m0[21u].x * _299);
    float _443 = cbMtdParam._m0[22u].x + _288.w;
    float _446 = fma(_434, _210, fma(_438, _217, _437 * _203));
    float _449 = fma(_434, _211, fma(_438, _218, _437 * _204));
    float _452 = fma(_434, _212, fma(_438, _219, _437 * _205));
    float _456 = inversesqrt(dot(vec3(_446, _449, _452), vec3(_446, _449, _452)));
    float _457 = _456 * _446;
    float _458 = _456 * _449;
    float _459 = _456 * _452;
    float _3470 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _460 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _3481 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3492 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3503 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3514 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3525 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _465 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _479 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _530 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _520);
    float _531 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _520);
    float _532 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _520);
    float _536 = inversesqrt(dot(vec3(_530, _531, _532), vec3(_530, _531, _532)));
    float _537 = _530 * _536;
    float _538 = _531 * _536;
    float _539 = _532 * _536;
    vec4 _544 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _546 = _544.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _721 = sqrt(((_530 * _530) + (_531 * _531)) + (_532 * _532));
        float _727 = (cbMatDynParam._m0[5u].x * _721) + cbMatDynParam._m0[5u].y;
        float _3536 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _732 = (cbMatDynParam._m0[5u].z * _721) + cbMatDynParam._m0[5u].w;
        float _3547 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) - _728)) + _728) < ((_546 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _558 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _559 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _579 = fma(_459, cbSceneParam._m0[5u].z, fma(_458, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _457));
    float _582 = fma(_459, cbSceneParam._m0[6u].z, fma(_458, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _457));
    float _585 = fma(_459, cbSceneParam._m0[7u].z, fma(_458, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _457));
    uint _598 = _222 + 9u;
    uint _599 = _598 + uint(cbMatDynParam._m0[0u].w);
    float _605 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * cbInstanceData._m0[_599].x;
    float _606 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * cbInstanceData._m0[_599].y;
    float _607 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * cbInstanceData._m0[_599].z;
    float _3558 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _3569 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _611 = 1.0 - _465;
    float _612 = _608 * _611;
    float _613 = _609 * _611;
    float _614 = _610 * _611;
    float _619 = (_608 + (-0.039999999105930328369140625)) * _465;
    float _620 = (_609 + (-0.039999999105930328369140625)) * _465;
    float _621 = (_610 + (-0.039999999105930328369140625)) * _465;
    float _622 = _619 + 0.039999999105930328369140625;
    float _624 = _620 + 0.039999999105930328369140625;
    float _625 = _621 + 0.039999999105930328369140625;
    vec4 _634 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _558, cbSceneParam._m0[86u].y * _559));
    float _638 = ((isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * TEXCOORD_5.w) * _634.x;
    float _639 = dot(vec3(_457, _458, _459), vec3(_537, _538, _539));
    float _642 = _639 * 2.0;
    float _646 = (_642 * _457) - _537;
    float _647 = (_642 * _458) - _538;
    float _648 = (_642 * _459) - _539;
    float _652 = abs(dot(vec3(_537, _538, _539), vec3(_457, _458, _459)));
    float _3591 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _654 = sqrt(_460);
    float _667 = exp2((_654 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_654 * 3.0));
    float _673 = (1.0 - _667) * ((_654 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _674 = _667 * _654;
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1040;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _765 = fma(_710, cbModelParam._m0[26u].z, fma(_706, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _702));
        float _769 = fma(_710, cbModelParam._m0[27u].z, fma(_706, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _702));
        float _773 = fma(_710, cbModelParam._m0[28u].z, fma(_706, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _702));
        float _798 = _702 + _457;
        float _799 = _706 + _458;
        float _800 = _710 + _459;
        float _810 = fma(_800, cbModelParam._m0[26u].z, fma(_799, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798)) - _765;
        float _811 = fma(_800, cbModelParam._m0[27u].z, fma(_799, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798)) - _769;
        float _812 = fma(_800, cbModelParam._m0[28u].z, fma(_799, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798)) - _773;
        float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
        float _829 = ((_816 * _810) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_765 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_816 * _811) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_769 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_816 * _812) / cbModelParam._m0[34u].z) + ((((((_773 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        float _868 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_834.x + (-0.5));
        float _870 = _868 * (_834.y + (-0.5));
        float _871 = _868 * (_834.z + (-0.5));
        float _878 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_841.x + (-0.5));
        float _880 = _878 * (_841.y + (-0.5));
        float _881 = _878 * (_841.z + (-0.5));
        float _888 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_848.x + (-0.5));
        float _890 = _888 * (_848.y + (-0.5));
        float _891 = _888 * (_848.z + (-0.5));
        float _898 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_855.x + (-0.5));
        float _900 = _898 * (_855.y + (-0.5));
        float _901 = _898 * (_855.z + (-0.5));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = _869 * 0.5;
        float _906 = _879 * 0.5;
        float _907 = _889 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _922 = (dot(vec3(_457, _458, _459), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _932 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3639 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_934 + 1.0))) + _939) * _902;
        float _949 = _870 * 0.5;
        float _950 = _880 * 0.5;
        float _951 = _890 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_457, _458, _459), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3672 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_976 + 1.0))) + _981) * _903;
        float _991 = _871 * 0.5;
        float _992 = _881 * 0.5;
        float _993 = _891 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_457, _458, _459), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3705 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1018 + 1.0))) + _1023) * _904;
        _1040 = _871;
        _1042 = _870;
        _1043 = _869;
        _1044 = _881;
        _1045 = _880;
        _1046 = _879;
        _1047 = _891;
        _1048 = _890;
        _1049 = _889;
        _1050 = _904;
        _1051 = _903;
        _1052 = _902;
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
    }
    else
    {
        _1040 = _1041;
        _1042 = _1041;
        _1043 = _1041;
        _1044 = _1041;
        _1045 = _1041;
        _1046 = _1041;
        _1047 = _1041;
        _1048 = _1041;
        _1049 = _1041;
        _1050 = _1041;
        _1051 = _1041;
        _1052 = _1041;
        _1053 = 0.0;
        _1054 = 0.0;
        _1055 = 0.0;
    }
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1083 = fma(_710, cbModelParam._m0[30u].z, fma(_706, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _702));
        float _1087 = fma(_710, cbModelParam._m0[31u].z, fma(_706, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _702));
        float _1091 = fma(_710, cbModelParam._m0[32u].z, fma(_706, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _702));
        float _1114 = _702 + _457;
        float _1115 = _706 + _458;
        float _1116 = _710 + _459;
        float _1126 = fma(_1116, cbModelParam._m0[30u].z, fma(_1115, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1114)) - _1083;
        float _1127 = fma(_1116, cbModelParam._m0[31u].z, fma(_1115, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1114)) - _1087;
        float _1128 = fma(_1116, cbModelParam._m0[32u].z, fma(_1115, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1114)) - _1091;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1083 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1087 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[35u].z) + ((((((_1091 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1182 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1149.x + (-0.5));
        float _1184 = _1182 * (_1149.y + (-0.5));
        float _1185 = _1182 * (_1149.z + (-0.5));
        float _1192 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1156.x + (-0.5));
        float _1194 = _1192 * (_1156.y + (-0.5));
        float _1195 = _1192 * (_1156.z + (-0.5));
        float _1202 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1163.x + (-0.5));
        float _1204 = _1202 * (_1163.y + (-0.5));
        float _1205 = _1202 * (_1163.z + (-0.5));
        float _1212 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1170.x + (-0.5));
        float _1214 = _1212 * (_1170.y + (-0.5));
        float _1215 = _1212 * (_1170.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_457, _458, _459), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3768 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1246 + 1.0))) + _1251) * _1216;
        float _1261 = _1184 * 0.5;
        float _1262 = _1194 * 0.5;
        float _1263 = _1204 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_457, _458, _459), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3801 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1288 + 1.0))) + _1293) * _1217;
        float _1303 = _1185 * 0.5;
        float _1304 = _1195 * 0.5;
        float _1305 = _1205 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_457, _458, _459), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3834 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1330 + 1.0))) + _1335) * _1218;
        _1352 = _1185;
        _1353 = _1184;
        _1354 = _1183;
        _1355 = _1195;
        _1356 = _1194;
        _1357 = _1193;
        _1358 = _1205;
        _1359 = _1204;
        _1360 = _1203;
        _1361 = _1218;
        _1362 = _1217;
        _1363 = _1216;
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1041;
        _1353 = _1041;
        _1354 = _1041;
        _1355 = _1041;
        _1356 = _1041;
        _1357 = _1041;
        _1358 = _1041;
        _1359 = _1041;
        _1360 = _1041;
        _1361 = _1041;
        _1362 = _1041;
        _1363 = _1041;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1053)) + _1053;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1054)) + _1054;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1055)) + _1055;
    float _1399 = fma(_1378, cbSceneParam._m0[89u].z, fma(_1377, cbSceneParam._m0[89u].y, _1376 * cbSceneParam._m0[89u].x));
    float _1402 = fma(_1378, cbSceneParam._m0[90u].z, fma(_1377, cbSceneParam._m0[90u].y, _1376 * cbSceneParam._m0[90u].x));
    float _1405 = fma(_1378, cbSceneParam._m0[91u].z, fma(_1377, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1376));
    float _1420 = _646 * 0.5;
    float _1421 = _647 * 0.5;
    float _1422 = _648 * 0.5;
    float _1423 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1426 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1429 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1463;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1436 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1040, _1044, _1047, _1050));
        float _1440 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1444 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1451 = dot(vec4(cbModelParam._m0[39u]), vec4(_1420, _1421, _1422, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1451) ? 0.0 : (isnan(0.0) ? _1451 : max(0.0, _1451))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1474;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1465 = dot(vec4(cbModelParam._m0[40u]), vec4(_1420, _1421, _1422, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1478 = (_1474 * cbModelParam._m0[1u].x) + (_1463 * (1.0 - cbModelParam._m0[1u].x));
    float _1488 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _460);
    float _1489 = isnan(_1488) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1488 : min(cbModelParam._m0[25u].z, _1488));
    float _1570;
    float _1572;
    float _1574;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1537 = fma(_710, cbModelParam._m0[13u].z, fma(_706, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _702)) + cbModelParam._m0[13u].w;
        float _1541 = fma(_710, cbModelParam._m0[14u].z, fma(_706, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _702)) + cbModelParam._m0[14u].w;
        float _1545 = fma(_710, cbModelParam._m0[15u].z, fma(_706, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _702)) + cbModelParam._m0[15u].w;
        float _1548 = fma(_648, cbModelParam._m0[13u].z, fma(_647, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _646));
        float _1551 = fma(_648, cbModelParam._m0[14u].z, fma(_647, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _646));
        float _1554 = fma(_648, cbModelParam._m0[15u].z, fma(_647, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _646));
        float _1582;
        if (_1548 > 0.0)
        {
            _1582 = abs((1.0 - _1537) / _1548);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1537 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1582 = frontier_phi_17_15_ladder;
        }
        float _1786;
        if (_1551 > 0.0)
        {
            _1786 = abs((1.0 - _1541) / _1551);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1541 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1786 = frontier_phi_26_22_ladder;
        }
        float _2040;
        if (_1554 > 0.0)
        {
            _2040 = abs((1.0 - _1545) / _1554);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1545 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2040 = frontier_phi_38_33_ladder;
        }
        float _2042 = isnan(_1786) ? _1582 : (isnan(_1582) ? _1786 : min(_1582, _1786));
        float _2043 = isnan(_2040) ? _2042 : (isnan(_2042) ? _2040 : min(_2042, _2040));
        float _2047 = (_2043 * _1548) + _1537;
        float _2048 = (_2043 * _1551) + _1541;
        float _2049 = (_2043 * _1554) + _1545;
        float _2050 = _2043 * 9.9999997473787516355514526367188e-05;
        float _2052 = (-1.0) - _2050;
        float _2054 = _2050 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2049 > _2054) || ((_2049 < _2052) || ((_2048 > _2054) || ((_2048 < _2052) || ((_2047 < _2052) || (_2047 > _2054))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2177 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2049, cbModelParam._m0[9u].z, fma(_2048, cbModelParam._m0[9u].y, _2047 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2049, cbModelParam._m0[10u].z, fma(_2048, cbModelParam._m0[10u].y, _2047 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2049, cbModelParam._m0[11u].z, fma(_2048, cbModelParam._m0[11u].y, _2047 * cbModelParam._m0[11u].x))), _1489);
            frontier_phi_16_38_ladder = _2177.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2177.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2177.x * cbModelParam._m0[1u].y;
        }
        _1570 = frontier_phi_16_38_ladder_2;
        _1572 = frontier_phi_16_38_ladder_1;
        _1574 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1558 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_646, _647, _648), _1489);
        _1570 = _1558.x * cbModelParam._m0[1u].y;
        _1572 = _1558.y * cbModelParam._m0[1u].y;
        _1574 = _1558.z * cbModelParam._m0[1u].y;
    }
    float _1578 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _460);
    float _1579 = isnan(_1578) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1578 : min(cbModelParam._m0[25u].w, _1578));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1633 = fma(_710, cbModelParam._m0[21u].z, fma(_706, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _702)) + cbModelParam._m0[21u].w;
        float _1637 = fma(_710, cbModelParam._m0[22u].z, fma(_706, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _702)) + cbModelParam._m0[22u].w;
        float _1641 = fma(_710, cbModelParam._m0[23u].z, fma(_706, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _702)) + cbModelParam._m0[23u].w;
        float _1644 = fma(_648, cbModelParam._m0[21u].z, fma(_647, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _646));
        float _1647 = fma(_648, cbModelParam._m0[22u].z, fma(_647, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _646));
        float _1650 = fma(_648, cbModelParam._m0[23u].z, fma(_647, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _646));
        float _1791;
        if (_1644 > 0.0)
        {
            _1791 = abs((1.0 - _1633) / _1644);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1633 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1791 = frontier_phi_28_24_ladder;
        }
        float _2067;
        if (_1647 > 0.0)
        {
            _2067 = abs((1.0 - _1637) / _1647);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1637 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2067 = frontier_phi_40_35_ladder;
        }
        float _2280;
        if (_1650 > 0.0)
        {
            _2280 = abs((1.0 - _1641) / _1650);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1641 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2280 = frontier_phi_49_46_ladder;
        }
        float _2282 = isnan(_2067) ? _1791 : (isnan(_1791) ? _2067 : min(_1791, _2067));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1644) + _1633;
        float _2288 = (_2283 * _1647) + _1637;
        float _2289 = (_2283 * _1650) + _1641;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2290;
        float _2293 = _2290 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2289 > _2293) || ((_2289 < _2291) || ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 < _2291) || (_2287 > _2293))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2488 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2289, cbModelParam._m0[17u].z, fma(_2288, cbModelParam._m0[17u].y, _2287 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2289, cbModelParam._m0[18u].z, fma(_2288, cbModelParam._m0[18u].y, _2287 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2289, cbModelParam._m0[19u].z, fma(_2288, cbModelParam._m0[19u].y, _2287 * cbModelParam._m0[19u].x))), _1579);
            frontier_phi_25_49_ladder = _2488.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2488.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2488.x * cbModelParam._m0[1u].z;
        }
        _1669 = frontier_phi_25_49_ladder_2;
        _1671 = frontier_phi_25_49_ladder_1;
        _1673 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1653 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_646, _647, _648), _1579);
        _1669 = _1653.x * cbModelParam._m0[1u].z;
        _1671 = _1653.y * cbModelParam._m0[1u].z;
        _1673 = _1653.z * cbModelParam._m0[1u].z;
    }
    float _1686 = (((_673 * _622) + _674) * _638) * ((cbModelParam._m0[1u].w * (_1669 - _1570)) + _1570);
    float _1688 = (((_673 * _624) + _674) * _638) * ((cbModelParam._m0[1u].w * (_1671 - _1572)) + _1572);
    float _1690 = (((_673 * _625) + _674) * _638) * ((cbModelParam._m0[1u].w * (_1673 - _1574)) + _1574);
    float _1693 = fma(_1690, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1686 * cbSceneParam._m0[89u].x));
    float _1696 = fma(_1690, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1686 * cbSceneParam._m0[90u].x));
    float _1699 = fma(_1690, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, _1686 * cbSceneParam._m0[91u].x));
    uvec4 _1709 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1711 = _1709.x * 14u;
    uint _1712 = _1711 + 13u;
    float _1719 = _638 + (-1.0);
    float _1724 = (cbLight._m0[_1712].x * _1719) + 1.0;
    float _1725 = (cbLight._m0[_1712].y * _1719) + 1.0;
    float _1726 = (cbLight._m0[_1712].z * _1719) + 1.0;
    float _1727 = (cbLight._m0[_1712].w * _1719) + 1.0;
    uint _1728 = _1711 + 5u;
    float _1734 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    uint _1738 = _1711 + 4u;
    float _1745 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
    uint _1749 = _1711 | 1u;
    float _1760 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_457, _458, _459));
    float _1763 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_457, _458, _459));
    float _3970 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _3981 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1768 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * 0.3183098733425140380859375;
    float _1770 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * 0.3183098733425140380859375;
    float _1777 = ((cbLight._m0[_1728].x * _1734) * _1770) + ((cbLight._m0[_1738].x * _1745) * _1768);
    float _1778 = ((_1734 * cbLight._m0[_1728].y) * _1770) + ((_1745 * cbLight._m0[_1738].y) * _1768);
    float _1779 = ((_1734 * cbLight._m0[_1728].z) * _1770) + ((_1745 * cbLight._m0[_1738].z) * _1768);
    uvec4 _1783 = floatBitsToUint(cbLight._m0[_1711 + 12u]);
    bool _1785 = _1783.x == 0u;
    float _1796;
    float _1798;
    float _1800;
    if (_1785)
    {
        _1796 = _1777;
        _1798 = _1778;
        _1800 = _1779;
    }
    else
    {
        uint _1804 = _1711 + 6u;
        float _1820 = (dot(vec3(cbLight._m0[_1711 + 2u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _1821 = _1820 * _1820;
        float _3992 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1823 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _1796 = (((cbLight._m0[_1804].x * 0.3183098733425140380859375) * _1822) * _1823) + _1777;
        _1798 = (((cbLight._m0[_1804].y * 0.3183098733425140380859375) * _1822) * _1823) + _1778;
        _1800 = (((cbLight._m0[_1804].z * 0.3183098733425140380859375) * _1822) * _1823) + _1779;
    }
    bool _1803 = _1783.y == 0u;
    float _1841;
    float _1843;
    float _1845;
    if (_1803)
    {
        _1841 = _1796;
        _1843 = _1798;
        _1845 = _1800;
    }
    else
    {
        uint _2011 = _1711 + 7u;
        float _2027 = (dot(vec3(cbLight._m0[_1711 + 3u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _2028 = _2027 * _2027;
        float _4008 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2029 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _2030 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _1841 = (((cbLight._m0[_2011].x * 0.3183098733425140380859375) * _2029) * _2030) + _1796;
        _1843 = (((cbLight._m0[_2011].y * 0.3183098733425140380859375) * _2029) * _2030) + _1798;
        _1845 = (((cbLight._m0[_2011].z * 0.3183098733425140380859375) * _2029) * _2030) + _1800;
    }
    uint _1848 = _1711 + 8u;
    float _1861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1711].w)) * _460) * 0.949999988079071044921875);
    float _1862 = _1861 * _1861;
    float _1863 = cbLight._m0[_1711].x + _537;
    float _1864 = cbLight._m0[_1711].y + _538;
    float _1865 = cbLight._m0[_1711].z + _539;
    float _1869 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
    float _1870 = _1869 * _1863;
    float _1871 = _1869 * _1864;
    float _1872 = _1869 * _1865;
    float _1873 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1711].xyz));
    float _4024 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _1877 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1878 = dot(vec3(_457, _458, _459), vec3(_1870, _1871, _1872));
    float _4046 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1881 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _1882 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_1870, _1871, _1872));
    float _4057 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1886 = _1862 * _1862;
    float _1890 = ((_1881 * _1881) * (_1886 + (-1.0))) + 1.0;
    float _1898 = exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0);
    float _1899 = 0.959999978542327880859375 - _619;
    float _1901 = 0.959999978542327880859375 - _620;
    float _1902 = 0.959999978542327880859375 - _621;
    float _1909 = 1.0 - _1862;
    float _1920 = (0.5 / (((_1877 * ((_1876 * _1909) + _1862)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _1909) + _1862) * _1876))) * _1876;
    float _4068 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1922 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1886 / ((_1890 * _1890) * 3.141590118408203125));
    uint _1933 = _1711 + 9u;
    float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1749].w)) * _460) * 0.949999988079071044921875);
    float _1945 = _1944 * _1944;
    float _1946 = cbLight._m0[_1749].x + _537;
    float _1947 = cbLight._m0[_1749].y + _538;
    float _1948 = cbLight._m0[_1749].z + _539;
    float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
    float _1953 = _1952 * _1946;
    float _1954 = _1952 * _1947;
    float _1955 = _1952 * _1948;
    float _1956 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1749].xyz));
    float _4079 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _1960 = dot(vec3(_457, _458, _459), vec3(_1953, _1954, _1955));
    float _4090 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1963 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _1964 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_1953, _1954, _1955));
    float _4101 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1968 = _1945 * _1945;
    float _1972 = ((_1963 * _1963) * (_1968 + (-1.0))) + 1.0;
    float _1979 = exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0);
    float _1986 = 1.0 - _1945;
    float _1996 = (0.5 / (((_1877 * ((_1959 * _1986) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _1986) + _1945) * _1959))) * _1959;
    float _4112 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1998 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1968 / ((_1972 * _1972) * 3.141590118408203125));
    float _2008 = (((((_1979 * _1899) + _622) * cbLight._m0[_1933].x) * _1998) * _1734) + (((((_1898 * _1899) + _622) * cbLight._m0[_1848].x) * _1922) * _1745);
    float _2009 = (((((_1979 * _1901) + _624) * cbLight._m0[_1933].y) * _1998) * _1734) + (((((_1898 * _1901) + _624) * cbLight._m0[_1848].y) * _1922) * _1745);
    float _2010 = (((((_1979 * _1902) + _625) * cbLight._m0[_1933].z) * _1998) * _1734) + (((((_1898 * _1902) + _625) * cbLight._m0[_1848].z) * _1922) * _1745);
    float _2072;
    float _2074;
    float _2076;
    if (_1785)
    {
        _2072 = _2008;
        _2074 = _2009;
        _2076 = _2010;
    }
    else
    {
        uint _2078 = _1711 + 2u;
        uint _2082 = _1711 + 10u;
        float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _460) * 0.949999988079071044921875);
        float _2097 = _2096 * _2096;
        float _2098 = cbLight._m0[_2078].x + _537;
        float _2099 = cbLight._m0[_2078].y + _538;
        float _2100 = cbLight._m0[_2078].z + _539;
        float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
        float _2105 = _2104 * _2098;
        float _2106 = _2104 * _2099;
        float _2107 = _2104 * _2100;
        float _2108 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2078].xyz));
        float _4123 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2111 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2112 = dot(vec3(_457, _458, _459), vec3(_2105, _2106, _2107));
        float _4134 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2115 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2116 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2105, _2106, _2107));
        float _4145 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2120 = _2097 * _2097;
        float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
        float _2131 = exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0);
        float _2138 = 1.0 - _2097;
        float _2148 = (0.5 / (((_1877 * ((_2111 * _2138) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _2138) + _2097) * _2111))) * _2111;
        float _4156 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2150 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
        float _2151 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _2072 = (((((_2131 * _1899) + _622) * cbLight._m0[_2082].x) * _2150) * _2151) + _2008;
        _2074 = (((((_2131 * _1901) + _624) * cbLight._m0[_2082].y) * _2150) * _2151) + _2009;
        _2076 = (((((_2131 * _1902) + _625) * cbLight._m0[_2082].z) * _2150) * _2151) + _2010;
    }
    float _2186;
    float _2188;
    float _2190;
    if (_1803)
    {
        _2186 = _2072;
        _2188 = _2074;
        _2190 = _2076;
    }
    else
    {
        uint _2197 = _1711 + 3u;
        uint _2201 = _1711 + 11u;
        float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _460) * 0.949999988079071044921875);
        float _2216 = _2215 * _2215;
        float _2217 = cbLight._m0[_2197].x + _537;
        float _2218 = cbLight._m0[_2197].y + _538;
        float _2219 = cbLight._m0[_2197].z + _539;
        float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
        float _2224 = _2223 * _2217;
        float _2225 = _2223 * _2218;
        float _2226 = _2223 * _2219;
        float _2227 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2197].xyz));
        float _4172 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2230 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2231 = dot(vec3(_457, _458, _459), vec3(_2224, _2225, _2226));
        float _4183 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2235 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2224, _2225, _2226));
        float _4194 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2239 = _2216 * _2216;
        float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
        float _2250 = exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0);
        float _2257 = 1.0 - _2216;
        float _2267 = (0.5 / (((_1877 * ((_2230 * _2257) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _2257) + _2216) * _2230))) * _2230;
        float _4205 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2269 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
        float _2270 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _2186 = (((((_2250 * _1899) + _622) * cbLight._m0[_2201].x) * _2269) * _2270) + _2072;
        _2188 = (((((_2250 * _1901) + _624) * cbLight._m0[_2201].y) * _2269) * _2270) + _2074;
        _2190 = (((((_2250 * _1902) + _625) * cbLight._m0[_2201].z) * _2269) * _2270) + _2076;
    }
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    if (_1709.y == 0u)
    {
        float _2345 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2345;
        float _2347 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2345;
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2345;
        uvec4 _2360 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2361 = _2360.x;
        uint _2372 = uint((float(_2360.y) * floor(float(uint(cbSceneParam._m0[85u].y * _559) / _2361))) + floor(float(uint(cbSceneParam._m0[85u].x * _558) / _2361)));
        float _2382 = (log2(_2348 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2383 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        uint _2386 = uint(isnan(14.0) ? _2383 : (isnan(_2383) ? 14.0 : min(_2383, 14.0)));
        uvec4 _2391 = texelFetch(g_lightClusterGridBuffer, int(((_2386 << 2u) + (_2372 << 6u)) >> 2u));
        uint _2392 = _2391.x;
        uint _2393 = _2360.z;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        if (((((1u << ((_2393 >> 4u) & 15u)) + 4294967295u) & _2392) == 0u) || ((_2393 & 240u) == 0u))
        {
            _2493 = 0.0;
            _2495 = 0.0;
            _2497 = 0.0;
            _2499 = 0.0;
            _2501 = 0.0;
            _2503 = 0.0;
        }
        else
        {
            float _2494;
            float _2496;
            float _2498;
            float _2500;
            float _2502;
            float _2504;
            float _2646 = 0.0;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            uint _2652 = 0u;
            uint _2661;
            bool _2662;
            for (;;)
            {
                _2661 = texelFetch(g_lightClassification, int((((_2386 << 5u) + (_2372 << 9u)) + (_2652 << 2u)) >> 2u)).x;
                _2662 = _2661 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2662)
                {
                    frontier_phi_66_pred = _2646;
                    frontier_phi_66_pred_1 = _2651;
                    frontier_phi_66_pred_2 = _2650;
                    frontier_phi_66_pred_3 = _2649;
                    frontier_phi_66_pred_4 = _2648;
                    frontier_phi_66_pred_5 = _2647;
                }
                else
                {
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    uint _2797;
                    _2791 = _2646;
                    _2792 = _2647;
                    _2793 = _2648;
                    _2794 = _2649;
                    _2795 = _2650;
                    _2796 = _2651;
                    _2797 = _2661;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    for (;;)
                    {
                        uint _2801 = uint(findLSB(_2797)) + (_2652 << 5u);
                        uint _2798 = (_2797 + 4294967295u) & _2797;
                        uint _2803 = _2801 * 48u;
                        vec4 _2817 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 3u)).x));
                        uint _2823 = (_2801 * 48u) + 4u;
                        vec4 _2836 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 3u)).x));
                        uint _2842 = (_2801 * 48u) + 8u;
                        vec3 _2853 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2842)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 2u)).x));
                        float _2857 = _2817.x - _2346;
                        float _2858 = _2817.y - _2347;
                        float _2859 = _2817.z - _2348;
                        float _2860 = dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859));
                        float _2863 = inversesqrt(_2860);
                        float _2864 = _2863 * _2857;
                        float _2865 = _2863 * _2858;
                        float _2866 = _2863 * _2859;
                        float _2867 = dot(vec3(_579, _582, _585), vec3(_2864, _2865, _2866));
                        float _2872 = 1.0 - (_2860 * _2817.w);
                        float _4231 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2873 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                        float _2874 = sqrt(_2860) * _2836.w;
                        float _2877 = 1.39999997615814208984375 / (_2874 + 1.39999997615814208984375);
                        float _2878 = _2877 * _2877;
                        float _2881 = ((1.0 - _2878) * _2867) + _2878;
                        float _2884 = _2874 * _2874;
                        float _2888 = ((isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0))) * _2873) / ((_2884 * 0.699999988079071044921875) + 1.0);
                        float _2892 = (-0.0) - _2346;
                        float _2893 = (-0.0) - _2347;
                        float _2894 = (-0.0) - _2348;
                        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
                        float _2899 = _2898 * _2892;
                        float _2900 = _2898 * _2893;
                        float _2901 = _2898 * _2894;
                        float _2909 = exp2(log2(1.0 / ((_2884 * 3.5) + 5.0)) * 0.25);
                        float _2910 = 1.0 - _654;
                        float _2917 = sqrt(1.0 - ((1.0 - (_2910 * _2910)) * (1.0 - (_2909 * _2909))));
                        float _2918 = _2917 * _2917;
                        float _2919 = _2918 * _2918;
                        float _2920 = _2899 + _2864;
                        float _2921 = _2900 + _2865;
                        float _2922 = _2901 + _2866;
                        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
                        float _2930 = dot(vec3(_579, _582, _585), vec3(_2899, _2900, _2901));
                        float _4247 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2933 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2934 = dot(vec3(_579, _582, _585), vec3(_2926 * _2920, _2926 * _2921, _2926 * _2922));
                        float _4258 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2937 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                        float _2941 = ((_2937 * _2937) * (_2919 + (-1.0))) + 1.0;
                        float _2942 = _2877 * _2918;
                        float _2943 = _2942 * _2942;
                        float _2946 = ((1.0 - _2943) * _2867) + _2943;
                        float _4269 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2947 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                        float _2948 = 1.0 - _2918;
                        float _2958 = (0.5 / (((_2947 * ((_2933 * _2948) + _2918)) + 9.9999999392252902907785028219223e-09) + (((_2947 * _2948) + _2918) * _2933))) * _2947;
                        float _4280 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2969 = (((_2919 * 3.1415927410125732421875) * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) / ((_2941 * _2941) * ((_2884 * 2.1991131305694580078125) + 3.141590118408203125))) * _2873;
                        _2721 = (_2888 * _2836.x) + _2794;
                        _2722 = (_2888 * _2836.y) + _2795;
                        _2723 = (_2888 * _2836.z) + _2796;
                        _2718 = (_2969 * _2853.x) + _2791;
                        _2719 = (_2969 * _2853.y) + _2792;
                        _2720 = (_2969 * _2853.z) + _2793;
                        if (_2798 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2791 = _2718;
                            _2792 = _2719;
                            _2793 = _2720;
                            _2794 = _2721;
                            _2795 = _2722;
                            _2796 = _2723;
                            _2797 = _2798;
                        }
                    }
                    frontier_phi_66_pred = _2718;
                    frontier_phi_66_pred_1 = _2723;
                    frontier_phi_66_pred_2 = _2722;
                    frontier_phi_66_pred_3 = _2721;
                    frontier_phi_66_pred_4 = _2720;
                    frontier_phi_66_pred_5 = _2719;
                }
                _2494 = frontier_phi_66_pred;
                _2504 = frontier_phi_66_pred_1;
                _2502 = frontier_phi_66_pred_2;
                _2500 = frontier_phi_66_pred_3;
                _2498 = frontier_phi_66_pred_4;
                _2496 = frontier_phi_66_pred_5;
                uint _2653 = _2652 + 1u;
                if (_2653 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2646 = _2494;
                    _2647 = _2496;
                    _2648 = _2498;
                    _2649 = _2500;
                    _2650 = _2502;
                    _2651 = _2504;
                    _2652 = _2653;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2493 = _2494;
            _2495 = _2496;
            _2497 = _2498;
            _2499 = _2500;
            _2501 = _2502;
            _2503 = _2504;
        }
        uvec4 _2507 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2508 = _2507.z;
        uint _2510 = (_2508 >> 8u) & 15u;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        if (((4294967295u << _2510) & _2392) == 0u)
        {
            _2614 = _2493;
            _2616 = _2495;
            _2618 = _2497;
            _2620 = _2499;
            _2622 = _2501;
            _2624 = _2503;
        }
        else
        {
            float _2639 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
            float _2640 = _2639 * _2346;
            float _2641 = _2639 * _2347;
            float _2642 = _2639 * _2348;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2510 < ((_2508 >> 12u) & 15u))
            {
                float _2615;
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2774 = _2493;
                float _2775 = _2495;
                float _2776 = _2497;
                float _2777 = _2499;
                float _2778 = _2501;
                float _2779 = _2503;
                uint _2780 = _2510;
                uint _2789;
                bool _2790;
                for (;;)
                {
                    _2789 = texelFetch(g_lightClassification, int((((_2386 << 5u) + (_2372 << 9u)) + (_2780 << 2u)) >> 2u)).x;
                    _2790 = _2789 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2790)
                    {
                        frontier_phi_77_pred = _2779;
                        frontier_phi_77_pred_1 = _2778;
                        frontier_phi_77_pred_2 = _2777;
                        frontier_phi_77_pred_3 = _2776;
                        frontier_phi_77_pred_4 = _2775;
                        frontier_phi_77_pred_5 = _2774;
                    }
                    else
                    {
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _2996 = _2774;
                        float _2997 = _2775;
                        float _2998 = _2776;
                        float _2999 = _2777;
                        float _3000 = _2778;
                        float _3001 = _2779;
                        uint _3002 = _2789;
                        uint _3003;
                        vec4 _3028;
                        float _3029;
                        vec4 _3044;
                        vec3 _3056;
                        vec4 _3072;
                        vec4 _3088;
                        float _3134;
                        bool _3135;
                        for (;;)
                        {
                            uint _3013 = ((_2780 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3002));
                            _3003 = (_3002 + 4294967295u) & _3002;
                            uint _3015 = _3013 * 40u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            _3029 = _3028.w;
                            uint _3031 = (_3013 * 40u) + 4u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3046 = (_3013 * 40u) + 8u;
                            _3056 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x));
                            uint _3059 = (_3013 * 40u) + 16u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3075 = (_3013 * 40u) + 20u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3090 = (_3013 * 40u) + 24u;
                            vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3109 = (_3013 * 40u) + 28u;
                            vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            _3134 = fma(_2348, _3122.z, fma(_2347, _3122.y, _3122.x * _2346)) + _3122.w;
                            _3135 = !((fma(_2348, _3103.z, fma(_2347, _3103.y, _3103.x * _2346)) + _3103.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3135)
                            {
                                float _3162 = _3028.x - _2346;
                                float _3163 = _3028.y - _2347;
                                float _3164 = _3028.z - _2348;
                                float _3165 = dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164));
                                float _3168 = inversesqrt(_3165);
                                float _3169 = _3168 * _3162;
                                float _3170 = _3168 * _3163;
                                float _3171 = _3168 * _3164;
                                float _3175 = 1.0 - (_3165 / (_3029 * _3029));
                                float _4291 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3180 = sqrt(_3165) * _3044.w;
                                float _3182 = 1.39999997615814208984375 / (_3180 + 1.39999997615814208984375);
                                float _3183 = _3182 * _3182;
                                float _3186 = ((1.0 - _3183) * dot(vec3(_3169, _3170, _3171), vec3(_579, _582, _585))) + _3183;
                                float _3189 = _3180 * _3180;
                                float _3193 = (fma(_2348, _3072.z, fma(_2347, _3072.y, _3072.x * _2346)) + _3072.w) / _3134;
                                float _3194 = (fma(_2348, _3088.z, fma(_2347, _3088.y, _3088.x * _2346)) + _3088.w) / _3134;
                                float _3198 = 1.0 - dot(vec2(_3193, _3194), vec2(_3193, _3194));
                                float _4307 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3200 = _3199 * (((isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))) * _3176) / ((_3189 * 0.699999988079071044921875) + 1.0));
                                float _3212 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                                float _3213 = 1.0 - _654;
                                float _3220 = sqrt(1.0 - ((1.0 - (_3213 * _3213)) * (1.0 - (_3212 * _3212))));
                                float _3221 = _3220 * _3220;
                                float _3222 = _3221 * _3221;
                                float _3223 = _3169 - _2640;
                                float _3224 = _3170 - _2641;
                                float _3225 = _3171 - _2642;
                                float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                                float _3233 = dot(vec3(_579, _582, _585), vec3((-0.0) - _2640, (-0.0) - _2641, (-0.0) - _2642));
                                float _4318 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                                float _3237 = dot(vec3(_579, _582, _585), vec3(_3229 * _3223, _3229 * _3224, _3229 * _3225));
                                float _4329 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3240 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3244 = ((_3240 * _3240) * (_3222 + (-1.0))) + 1.0;
                                float _3245 = _3182 * _3221;
                                float _3246 = _3245 * _3245;
                                float _3252 = ((1.0 - _3246) * dot(vec3(_579, _582, _585), vec3(_3169, _3170, _3171))) + _3246;
                                float _4340 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3254 = 1.0 - _3221;
                                float _3264 = (0.5 / (((_3253 * ((_3236 * _3254) + _3221)) + 9.9999999392252902907785028219223e-09) + (((_3253 * _3254) + _3221) * _3236))) * _3253;
                                float _4351 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3274 = (_3199 * _3176) * (((_3222 * 3.1415927410125732421875) * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) / ((_3244 * _3244) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3200 * _3044.y;
                                frontier_phi_83_pred_1 = _3200 * _3044.x;
                                frontier_phi_83_pred_2 = _3274 * _3056.z;
                                frontier_phi_83_pred_3 = _3274 * _3056.y;
                                frontier_phi_83_pred_4 = _3274 * _3056.x;
                                frontier_phi_83_pred_5 = _3200 * _3044.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3282 = frontier_phi_83_pred;
                            _3281 = frontier_phi_83_pred_1;
                            _3280 = frontier_phi_83_pred_2;
                            _3279 = frontier_phi_83_pred_3;
                            _3278 = frontier_phi_83_pred_4;
                            _3283 = frontier_phi_83_pred_5;
                            _2986 = _3281 + _2999;
                            _2987 = _3282 + _3000;
                            _2988 = _3283 + _3001;
                            _2983 = _3278 + _2996;
                            _2984 = _3279 + _2997;
                            _2985 = _3280 + _2998;
                            if (_3003 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _3003;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2988;
                        frontier_phi_77_pred_1 = _2987;
                        frontier_phi_77_pred_2 = _2986;
                        frontier_phi_77_pred_3 = _2985;
                        frontier_phi_77_pred_4 = _2984;
                        frontier_phi_77_pred_5 = _2983;
                    }
                    _2625 = frontier_phi_77_pred;
                    _2623 = frontier_phi_77_pred_1;
                    _2621 = frontier_phi_77_pred_2;
                    _2619 = frontier_phi_77_pred_3;
                    _2617 = frontier_phi_77_pred_4;
                    _2615 = frontier_phi_77_pred_5;
                    uint _2781 = _2780 + 1u;
                    if (_2781 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2774 = _2615;
                        _2775 = _2617;
                        _2776 = _2619;
                        _2777 = _2621;
                        _2778 = _2623;
                        _2779 = _2625;
                        _2780 = _2781;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2619;
                frontier_phi_58_59_ladder_1 = _2625;
                frontier_phi_58_59_ladder_2 = _2623;
                frontier_phi_58_59_ladder_3 = _2621;
                frontier_phi_58_59_ladder_4 = _2617;
                frontier_phi_58_59_ladder_5 = _2615;
            }
            else
            {
                frontier_phi_58_59_ladder = _2497;
                frontier_phi_58_59_ladder_1 = _2503;
                frontier_phi_58_59_ladder_2 = _2501;
                frontier_phi_58_59_ladder_3 = _2499;
                frontier_phi_58_59_ladder_4 = _2495;
                frontier_phi_58_59_ladder_5 = _2493;
            }
            _2614 = frontier_phi_58_59_ladder_5;
            _2616 = frontier_phi_58_59_ladder_4;
            _2618 = frontier_phi_58_59_ladder;
            _2620 = frontier_phi_58_59_ladder_3;
            _2622 = frontier_phi_58_59_ladder_2;
            _2624 = frontier_phi_58_59_ladder_1;
        }
        float _2629 = isnan(1.0) ? _638 : (isnan(_638) ? 1.0 : min(_638, 1.0));
        _2405 = (_2629 * _2620) + _1841;
        _2407 = (_2629 * _2622) + _1843;
        _2409 = (_2629 * _2624) + _1845;
        _2411 = ((_2614 * _622) * _2629) + _2186;
        _2413 = ((_2616 * _624) * _2629) + _2188;
        _2415 = ((_2618 * _625) * _2629) + _2190;
    }
    else
    {
        _2405 = _1841;
        _2407 = _1843;
        _2409 = _1845;
        _2411 = _2186;
        _2413 = _2188;
        _2415 = _2190;
    }
    float _4367 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4378 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4389 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _2432 = ((isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2405 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _638))) + ((_2411 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1478)) * cbPerFrame._m0[3u].x);
    float _2433 = ((isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2407 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _638))) + ((_2413 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1478)) * cbPerFrame._m0[3u].x);
    float _2434 = ((isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2409 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _638))) + ((_2415 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1478)) * cbPerFrame._m0[3u].x);
    uint _2435 = _222 + 6u;
    float _2443 = _558 / cbSceneParam._m0[86u].x;
    float _2444 = _559 / cbSceneParam._m0[86u].y;
    vec4 _2458 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2443, _2444, (log2((isnan(cbSceneParam._m0[77u].w) ? _479 : (isnan(_479) ? cbSceneParam._m0[77u].w : min(_479, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2460 = _2458.x;
    float _2461 = _2458.y;
    float _2462 = _2458.z;
    float _2463 = _2458.w;
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    if (_479 > cbSceneParam._m0[78u].w)
    {
        float _2518 = isnan(_479) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _479 : min(cbSceneParam._m0[80u].w, _479));
        float _2519 = _2518 / _479;
        float _2530 = _2519 * _530;
        float _2531 = _531 * _2519;
        float _2532 = (-0.0) - _2531;
        float _2534 = _2519 * _532;
        float _2536 = (cbSceneParam._m0[77u].w * _2532) / _2518;
        float _2537 = _2536 + cbSceneParam._m0[79u].w;
        float _2538 = cbSceneParam._m0[79u].w - _2531;
        float _2544 = sqrt(((_2530 * _2530) + (_2531 * _2531)) + (_2534 * _2534));
        float _2547 = (1.0 - (cbSceneParam._m0[77u].w / _2518)) * _2544;
        float _2552 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2554 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2731;
        if (abs((_2532 - _2536) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2731 = ((((_2537 > 0.0) ? exp2(_2552 * _2537) : (2.0 - exp2(_2554 * _2537))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2547;
        }
        else
        {
            float _2675 = 1.0 / cbSceneParam._m0[80u].x;
            float _2676 = isnan(_2538) ? _2537 : (isnan(_2537) ? _2538 : max(_2537, _2538));
            float _2677 = isnan(_2538) ? _2537 : (isnan(_2537) ? _2538 : min(_2537, _2538));
            float _2686 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : min(_2676, 0.0));
            float _2687 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : min(_2677, 0.0));
            _2731 = ((abs(_2544 / _2532) * cbSceneParam._m0[80u].y) * ((((_2686 - _2687) * 2.0) - ((exp2(_2552 * (isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0)))) - exp2(_2552 * (isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0))))) * _2675)) - ((exp2(_2554 * _2686) - exp2(_2554 * _2687)) * _2675))) + (_2547 * cbSceneParam._m0[80u].z);
        }
        vec4 _2733 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2443, _2444, 1.0), 0.0);
        float _2742 = exp2((_2731 * (-1.44269502162933349609375)) * (1.0 - _2733.w));
        float _2743 = log2(_2742);
        float _2759 = log2(_2463);
        _2556 = (exp2(_2759 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2743 * cbSceneParam._m0[78u].x)) * _2733.x) / cbSceneParam._m0[78u].x)) + _2460;
        _2558 = (exp2(_2759 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2743 * cbSceneParam._m0[78u].y)) * _2733.y) / cbSceneParam._m0[78u].y)) + _2461;
        _2560 = (exp2(_2759 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2743 * cbSceneParam._m0[78u].z)) * _2733.z) / cbSceneParam._m0[78u].z)) + _2462;
        _2562 = _2742 * _2463;
    }
    else
    {
        _2556 = _2460;
        _2558 = _2461;
        _2560 = _2462;
        _2562 = _2463;
    }
    bool _2769;
    vec4 _2572;
    vec4 _2594;
    float _2596;
    float _2600;
    float _2601;
    float _2602;
    float _2603;
    bool _2613;
    for (;;)
    {
        _2572 = cbMatDynParam._m0[0u];
        float _2574 = roundEven(_2572.y);
        bool _2575 = _2574 == 3.0;
        float _2576 = log2(_2562);
        float _2583 = exp2(_2576 * cbSceneParam._m0[78u].x) * _2432;
        float _2584 = exp2(_2576 * cbSceneParam._m0[78u].y) * _2433;
        float _2585 = exp2(_2576 * cbSceneParam._m0[78u].z) * _2434;
        float _2592 = _546 + (-0.5);
        _2594 = cbMtdParam._m0[1u];
        _2596 = _2594.y * _2592;
        float _2599 = (_2574 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2600 = _2599 * (_2575 ? _2583 : (_2583 + (cbSceneParam._m0[72u].w * _2556)));
        _2601 = _2599 * (_2575 ? _2584 : (_2584 + (cbSceneParam._m0[72u].w * _2558)));
        _2602 = _2599 * (_2575 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2560)));
        _2603 = _2592 * 0.999000012874603271484375;
        _2613 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2613)
        {
            if ((cbInstanceData._m0[_222 + 7u].x + _2603) < 0.5)
            {
                _2769 = true;
                break;
            }
        }
        uint _2710 = _598 + uint(_2572.w);
        if ((cbInstanceData._m0[_2710].w < 1.0) && ((cbInstanceData._m0[_2710].w + _2603) < 0.5))
        {
            _2769 = true;
            break;
        }
        if ((_2596 + 1.0) < _2594.x)
        {
            _2769 = true;
            break;
        }
        _2769 = false;
        break;
    }
    float _2974;
    if (_2769)
    {
        discard_state = true;
        _2974 = 0.0;
    }
    else
    {
        _2974 = cbInstanceData._m0[_2435].w;
    }
    SV_Target.x = _2600;
    SV_Target.y = _2601;
    SV_Target.z = _2602;
    SV_Target.w = _2974;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2435].w;
    discard_exit();
}


