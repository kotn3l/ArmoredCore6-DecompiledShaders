#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1138;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3488 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3499 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3510 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _261 = _256 + 1u;
    uint _265 = _256 + 2u;
    float _274 = sqrt(((cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x));
    float _275 = _274 * TEXCOORD.z;
    float _276 = _274 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _275) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _317 = _312.x * cbMtdParam._m0[9u].x;
    float _318 = _312.y * cbMtdParam._m0[9u].y;
    float _319 = _312.z * cbMtdParam._m0[9u].z;
    float _323 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _289.x) * _317;
    float _326 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _289.y) * _318;
    float _329 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _289.z) * _319;
    float _336 = ((_317 - _323) * (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) + _323;
    float _337 = ((_318 - _326) * (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) + _326;
    float _338 = ((_319 - _329) * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) + _329;
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _275) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _276) + cbTextureTilingScale._m0[14u].w));
    vec4 _377 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _275) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _276) + cbTextureTilingScale._m0[20u].w));
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _407 = _403.z;
    float _411 = (_403.x * 2.0) + (-1.0);
    float _412 = (_403.y * 2.0) + (-1.0);
    float _413 = dot(vec2(_411, _412), vec2(_411, _412));
    float _3521 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _418 = sqrt(1.0 - (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))));
    float _423 = _411 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_377.x * 2.0) + (-1.0)));
    float _424 = _412 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_377.y * 2.0) + (-1.0)));
    float _427 = fma(_418, _223, fma(_424, _230, _423 * _216));
    float _430 = fma(_418, _224, fma(_424, _231, _423 * _217));
    float _433 = fma(_418, _225, fma(_424, _232, _423 * _218));
    float _437 = inversesqrt(dot(vec3(_427, _430, _433), vec3(_427, _430, _433)));
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _275) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _276) + cbTextureTilingScale._m0[11u].w));
    float _475 = _473.x;
    float _476 = 1.0 - _475;
    float _483 = ((_475 - _476) * cbMtdParam._m0[24u].z) + _476;
    float _485 = (cbMtdParam._m0[19u].x + dot(vec4(_437 * _427, _437 * _430, _437 * _433, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_483 * cbMtdParam._m0[21u].z);
    float _3532 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _501 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_483 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3543 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _502 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _506 = ((_486 * ((_357.x * cbMtdParam._m0[18u].x) - _336)) * _502) + _336;
    float _507 = ((_486 * ((_357.y * cbMtdParam._m0[18u].y) - _337)) * _502) + _337;
    float _508 = ((_486 * ((_357.z * cbMtdParam._m0[18u].z) - _338)) * _502) + _338;
    vec4 _521 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _523 = _521.x;
    float _526 = _523 - ((_523 * _486) * _502);
    float _531 = (((_377.z - _407) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _407;
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _275) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _276) + cbTextureTilingScale._m0[15u].w));
    float _551 = (_544.x * 2.0) + (-1.0);
    float _552 = (_544.y * 2.0) + (-1.0);
    float _553 = dot(vec2(_551, _552), vec2(_551, _552));
    float _3554 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _562 = (((_544.z - _531) * _486) * _502) + _531;
    float _577 = (((cbMtdParam._m0[21u].x * _423) + ((_551 - _423) * _486)) * _502) + _423;
    float _578 = (((cbMtdParam._m0[21u].x * _424) + ((_552 - _424) * _486)) * _502) + _424;
    float _579 = (((sqrt(1.0 - (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) - _418) * _486) * _502) + _418;
    float _581 = cbMtdParam._m0[22u].x + _403.w;
    float _584 = fma(_579, _223, fma(_578, _230, _577 * _216));
    float _587 = fma(_579, _224, fma(_578, _231, _577 * _217));
    float _590 = fma(_579, _225, fma(_578, _232, _577 * _218));
    float _594 = inversesqrt(dot(vec3(_584, _587, _590), vec3(_584, _587, _590)));
    float _595 = _594 * _584;
    float _596 = _594 * _587;
    float _597 = _594 * _590;
    float _3565 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _598 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3587 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3598 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3609 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3620 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _603 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _617 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _668 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _658);
    float _669 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _658);
    float _670 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _658);
    float _674 = inversesqrt(dot(vec3(_668, _669, _670), vec3(_668, _669, _670)));
    float _675 = _668 * _674;
    float _676 = _669 * _674;
    float _677 = _670 * _674;
    float _683 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _684 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _705 = fma(_597, cbSceneParam._m0[5u].z, fma(_596, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _595));
    float _708 = fma(_597, cbSceneParam._m0[6u].z, fma(_596, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _595));
    float _711 = fma(_597, cbSceneParam._m0[7u].z, fma(_596, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _595));
    uint _725 = (_256 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _731 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_725].x;
    float _732 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_725].y;
    float _733 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_725].z;
    float _3631 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _737 = 1.0 - _603;
    float _738 = _734 * _737;
    float _739 = _735 * _737;
    float _740 = _736 * _737;
    float _745 = (_734 + (-0.039999999105930328369140625)) * _603;
    float _746 = (_735 + (-0.039999999105930328369140625)) * _603;
    float _747 = (_736 + (-0.039999999105930328369140625)) * _603;
    float _748 = _745 + 0.039999999105930328369140625;
    float _750 = _746 + 0.039999999105930328369140625;
    float _751 = _747 + 0.039999999105930328369140625;
    vec4 _760 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _683, cbSceneParam._m0[86u].y * _684));
    float _764 = ((isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * TEXCOORD_5.w) * _760.x;
    float _765 = dot(vec3(_595, _596, _597), vec3(_675, _676, _677));
    float _768 = _765 * 2.0;
    float _772 = (_768 * _595) - _675;
    float _773 = (_768 * _596) - _676;
    float _774 = (_768 * _597) - _677;
    float _778 = abs(dot(vec3(_675, _676, _677), vec3(_595, _596, _597)));
    float _3664 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _780 = sqrt(_598);
    float _793 = exp2((_780 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_780 * 3.0));
    float _799 = (1.0 - _793) * ((_780 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _800 = _793 * _780;
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1137;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _862 = fma(_836, cbModelParam._m0[26u].z, fma(_832, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _828));
        float _866 = fma(_836, cbModelParam._m0[27u].z, fma(_832, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _828));
        float _870 = fma(_836, cbModelParam._m0[28u].z, fma(_832, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _828));
        float _895 = _828 + _595;
        float _896 = _832 + _596;
        float _897 = _836 + _597;
        float _907 = fma(_897, cbModelParam._m0[26u].z, fma(_896, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _895)) - _862;
        float _908 = fma(_897, cbModelParam._m0[27u].z, fma(_896, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _895)) - _866;
        float _909 = fma(_897, cbModelParam._m0[28u].z, fma(_896, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _895)) - _870;
        float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
        float _926 = ((_913 * _907) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_862 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_913 * _908) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_866 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_913 * _909) / cbModelParam._m0[34u].z) + ((((((_870 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        float _965 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_931.x + (-0.5));
        float _967 = _965 * (_931.y + (-0.5));
        float _968 = _965 * (_931.z + (-0.5));
        float _975 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_938.x + (-0.5));
        float _977 = _975 * (_938.y + (-0.5));
        float _978 = _975 * (_938.z + (-0.5));
        float _985 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_945.x + (-0.5));
        float _987 = _985 * (_945.y + (-0.5));
        float _988 = _985 * (_945.z + (-0.5));
        float _995 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_952.x + (-0.5));
        float _997 = _995 * (_952.y + (-0.5));
        float _998 = _995 * (_952.z + (-0.5));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = _966 * 0.5;
        float _1003 = _976 * 0.5;
        float _1004 = _986 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1019 = (dot(vec3(_595, _596, _597), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1029 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3712 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1031 + 1.0))) + _1036) * _999;
        float _1046 = _967 * 0.5;
        float _1047 = _977 * 0.5;
        float _1048 = _987 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_595, _596, _597), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3745 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1073 + 1.0))) + _1078) * _1000;
        float _1088 = _968 * 0.5;
        float _1089 = _978 * 0.5;
        float _1090 = _988 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_595, _596, _597), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3778 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1115 + 1.0))) + _1120) * _1001;
        _1137 = _968;
        _1139 = _967;
        _1140 = _966;
        _1141 = _978;
        _1142 = _977;
        _1143 = _976;
        _1144 = _988;
        _1145 = _987;
        _1146 = _986;
        _1147 = _1001;
        _1148 = _1000;
        _1149 = _999;
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
    }
    else
    {
        _1137 = _1138;
        _1139 = _1138;
        _1140 = _1138;
        _1141 = _1138;
        _1142 = _1138;
        _1143 = _1138;
        _1144 = _1138;
        _1145 = _1138;
        _1146 = _1138;
        _1147 = _1138;
        _1148 = _1138;
        _1149 = _1138;
        _1150 = 0.0;
        _1151 = 0.0;
        _1152 = 0.0;
    }
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1177 = fma(_836, cbModelParam._m0[30u].z, fma(_832, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _828));
        float _1181 = fma(_836, cbModelParam._m0[31u].z, fma(_832, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _828));
        float _1185 = fma(_836, cbModelParam._m0[32u].z, fma(_832, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _828));
        float _1208 = _828 + _595;
        float _1209 = _832 + _596;
        float _1210 = _836 + _597;
        float _1220 = fma(_1210, cbModelParam._m0[30u].z, fma(_1209, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1208)) - _1177;
        float _1221 = fma(_1210, cbModelParam._m0[31u].z, fma(_1209, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1208)) - _1181;
        float _1222 = fma(_1210, cbModelParam._m0[32u].z, fma(_1209, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1208)) - _1185;
        float _1226 = inversesqrt(dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222)));
        float _1239 = ((_1226 * _1220) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1177 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1226 * _1221) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1181 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1226 * _1222) / cbModelParam._m0[35u].z) + ((((((_1185 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        float _1276 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1243.x + (-0.5));
        float _1278 = _1276 * (_1243.y + (-0.5));
        float _1279 = _1276 * (_1243.z + (-0.5));
        float _1286 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1250.x + (-0.5));
        float _1288 = _1286 * (_1250.y + (-0.5));
        float _1289 = _1286 * (_1250.z + (-0.5));
        float _1296 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1257.x + (-0.5));
        float _1298 = _1296 * (_1257.y + (-0.5));
        float _1299 = _1296 * (_1257.z + (-0.5));
        float _1306 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1264.x + (-0.5));
        float _1308 = _1306 * (_1264.y + (-0.5));
        float _1309 = _1306 * (_1264.z + (-0.5));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = _1277 * 0.5;
        float _1314 = _1287 * 0.5;
        float _1315 = _1297 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_595, _596, _597), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3841 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1340 + 1.0))) + _1345) * _1310;
        float _1355 = _1278 * 0.5;
        float _1356 = _1288 * 0.5;
        float _1357 = _1298 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_595, _596, _597), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _3874 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1382 + 1.0))) + _1387) * _1311;
        float _1397 = _1279 * 0.5;
        float _1398 = _1289 * 0.5;
        float _1399 = _1299 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_595, _596, _597), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _3907 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1424 + 1.0))) + _1429) * _1312;
        _1446 = _1279;
        _1447 = _1278;
        _1448 = _1277;
        _1449 = _1289;
        _1450 = _1288;
        _1451 = _1287;
        _1452 = _1299;
        _1453 = _1298;
        _1454 = _1297;
        _1455 = _1312;
        _1456 = _1311;
        _1457 = _1310;
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
    }
    else
    {
        _1446 = _1138;
        _1447 = _1138;
        _1448 = _1138;
        _1449 = _1138;
        _1450 = _1138;
        _1451 = _1138;
        _1452 = _1138;
        _1453 = _1138;
        _1454 = _1138;
        _1455 = _1138;
        _1456 = _1138;
        _1457 = _1138;
        _1458 = 0.0;
        _1459 = 0.0;
        _1460 = 0.0;
    }
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1150)) + _1150;
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1151)) + _1151;
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1152)) + _1152;
    float _1493 = fma(_1472, cbSceneParam._m0[89u].z, fma(_1471, cbSceneParam._m0[89u].y, _1470 * cbSceneParam._m0[89u].x));
    float _1496 = fma(_1472, cbSceneParam._m0[90u].z, fma(_1471, cbSceneParam._m0[90u].y, _1470 * cbSceneParam._m0[90u].x));
    float _1499 = fma(_1472, cbSceneParam._m0[91u].z, fma(_1471, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1470));
    float _1514 = _772 * 0.5;
    float _1515 = _773 * 0.5;
    float _1516 = _774 * 0.5;
    float _1517 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1520 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1523 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1557;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1530 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1137, _1141, _1144, _1147));
        float _1534 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1139, _1142, _1145, _1148));
        float _1538 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1140, _1143, _1146, _1149));
        float _1545 = dot(vec4(cbModelParam._m0[39u]), vec4(_1514, _1515, _1516, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1545) ? 0.0 : (isnan(0.0) ? _1545 : max(0.0, _1545))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1568;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1559 = dot(vec4(cbModelParam._m0[40u]), vec4(_1514, _1515, _1516, 1.0));
        _1568 = dot(vec3(isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1568 = 1.0;
    }
    float _1572 = (_1568 * cbModelParam._m0[1u].x) + (_1557 * (1.0 - cbModelParam._m0[1u].x));
    float _1582 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _598);
    float _1583 = isnan(_1582) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1582 : min(cbModelParam._m0[25u].z, _1582));
    float _1663;
    float _1665;
    float _1667;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1630 = fma(_836, cbModelParam._m0[13u].z, fma(_832, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _828)) + cbModelParam._m0[13u].w;
        float _1634 = fma(_836, cbModelParam._m0[14u].z, fma(_832, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _828)) + cbModelParam._m0[14u].w;
        float _1638 = fma(_836, cbModelParam._m0[15u].z, fma(_832, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _828)) + cbModelParam._m0[15u].w;
        float _1641 = fma(_774, cbModelParam._m0[13u].z, fma(_773, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _772));
        float _1644 = fma(_774, cbModelParam._m0[14u].z, fma(_773, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _772));
        float _1647 = fma(_774, cbModelParam._m0[15u].z, fma(_773, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _772));
        float _1675;
        if (_1641 > 0.0)
        {
            _1675 = abs((1.0 - _1630) / _1641);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1630 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1675 = frontier_phi_14_12_ladder;
        }
        float _1899;
        if (_1644 > 0.0)
        {
            _1899 = abs((1.0 - _1634) / _1644);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1634 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1899 = frontier_phi_23_19_ladder;
        }
        float _2156;
        if (_1647 > 0.0)
        {
            _2156 = abs((1.0 - _1638) / _1647);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1638 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2156 = frontier_phi_35_30_ladder;
        }
        float _2158 = isnan(_1899) ? _1675 : (isnan(_1675) ? _1899 : min(_1675, _1899));
        float _2159 = isnan(_2156) ? _2158 : (isnan(_2158) ? _2156 : min(_2158, _2156));
        float _2163 = (_2159 * _1641) + _1630;
        float _2164 = (_2159 * _1644) + _1634;
        float _2165 = (_2159 * _1647) + _1638;
        float _2166 = _2159 * 9.9999997473787516355514526367188e-05;
        float _2168 = (-1.0) - _2166;
        float _2170 = _2166 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2165 > _2170) || ((_2165 < _2168) || ((_2164 > _2170) || ((_2164 < _2168) || ((_2163 < _2168) || (_2163 > _2170))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2293 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2165, cbModelParam._m0[9u].z, fma(_2164, cbModelParam._m0[9u].y, _2163 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2165, cbModelParam._m0[10u].z, fma(_2164, cbModelParam._m0[10u].y, _2163 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2165, cbModelParam._m0[11u].z, fma(_2164, cbModelParam._m0[11u].y, _2163 * cbModelParam._m0[11u].x))), _1583);
            frontier_phi_13_35_ladder = _2293.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2293.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2293.x * cbModelParam._m0[1u].y;
        }
        _1663 = frontier_phi_13_35_ladder_2;
        _1665 = frontier_phi_13_35_ladder_1;
        _1667 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1651 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_772, _773, _774), _1583);
        _1663 = _1651.x * cbModelParam._m0[1u].y;
        _1665 = _1651.y * cbModelParam._m0[1u].y;
        _1667 = _1651.z * cbModelParam._m0[1u].y;
    }
    float _1671 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _598);
    float _1672 = isnan(_1671) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1671 : min(cbModelParam._m0[25u].w, _1671));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1725 = fma(_836, cbModelParam._m0[21u].z, fma(_832, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _828)) + cbModelParam._m0[21u].w;
        float _1729 = fma(_836, cbModelParam._m0[22u].z, fma(_832, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _828)) + cbModelParam._m0[22u].w;
        float _1733 = fma(_836, cbModelParam._m0[23u].z, fma(_832, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _828)) + cbModelParam._m0[23u].w;
        float _1736 = fma(_774, cbModelParam._m0[21u].z, fma(_773, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _772));
        float _1739 = fma(_774, cbModelParam._m0[22u].z, fma(_773, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _772));
        float _1742 = fma(_774, cbModelParam._m0[23u].z, fma(_773, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _772));
        float _1904;
        if (_1736 > 0.0)
        {
            _1904 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1904 = frontier_phi_25_21_ladder;
        }
        float _2183;
        if (_1739 > 0.0)
        {
            _2183 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2183 = frontier_phi_37_32_ladder;
        }
        float _2396;
        if (_1742 > 0.0)
        {
            _2396 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2396 = frontier_phi_46_43_ladder;
        }
        float _2398 = isnan(_2183) ? _1904 : (isnan(_1904) ? _2183 : min(_1904, _2183));
        float _2399 = isnan(_2396) ? _2398 : (isnan(_2398) ? _2396 : min(_2398, _2396));
        float _2403 = (_2399 * _1736) + _1725;
        float _2404 = (_2399 * _1739) + _1729;
        float _2405 = (_2399 * _1742) + _1733;
        float _2406 = _2399 * 9.9999997473787516355514526367188e-05;
        float _2407 = (-1.0) - _2406;
        float _2409 = _2406 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2405 > _2409) || ((_2405 < _2407) || ((_2404 > _2409) || ((_2404 < _2407) || ((_2403 < _2407) || (_2403 > _2409))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2405, cbModelParam._m0[17u].z, fma(_2404, cbModelParam._m0[17u].y, _2403 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2405, cbModelParam._m0[18u].z, fma(_2404, cbModelParam._m0[18u].y, _2403 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2405, cbModelParam._m0[19u].z, fma(_2404, cbModelParam._m0[19u].y, _2403 * cbModelParam._m0[19u].x))), _1672);
            frontier_phi_22_46_ladder = _2604.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2604.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2604.x * cbModelParam._m0[1u].z;
        }
        _1761 = frontier_phi_22_46_ladder_2;
        _1763 = frontier_phi_22_46_ladder_1;
        _1765 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_772, _773, _774), _1672);
        _1761 = _1745.x * cbModelParam._m0[1u].z;
        _1763 = _1745.y * cbModelParam._m0[1u].z;
        _1765 = _1745.z * cbModelParam._m0[1u].z;
    }
    float _1778 = (((_799 * _748) + _800) * _764) * ((cbModelParam._m0[1u].w * (_1761 - _1663)) + _1663);
    float _1780 = (((_799 * _750) + _800) * _764) * ((cbModelParam._m0[1u].w * (_1763 - _1665)) + _1665);
    float _1782 = (((_799 * _751) + _800) * _764) * ((cbModelParam._m0[1u].w * (_1765 - _1667)) + _1667);
    float _1785 = fma(_1782, cbSceneParam._m0[89u].z, fma(_1780, cbSceneParam._m0[89u].y, _1778 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1782, cbSceneParam._m0[90u].z, fma(_1780, cbSceneParam._m0[90u].y, _1778 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1782, cbSceneParam._m0[91u].z, fma(_1780, cbSceneParam._m0[91u].y, _1778 * cbSceneParam._m0[91u].x));
    vec4 _1799 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_683, _684));
    float _1801 = _1799.w;
    float _1813 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1801);
    float _1814 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1801);
    float _1815 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1801);
    uvec4 _1819 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _1821 = _1819.x * 14u;
    uint _1822 = _1821 + 13u;
    float _1829 = _764 + (-1.0);
    float _1834 = (cbLight._m0[_1822].x * _1829) + 1.0;
    float _1835 = (cbLight._m0[_1822].y * _1829) + 1.0;
    float _1836 = (cbLight._m0[_1822].z * _1829) + 1.0;
    float _1837 = (cbLight._m0[_1822].w * _1829) + 1.0;
    uint _1838 = _1821 + 5u;
    float _1844 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
    uint _1848 = _1821 + 4u;
    float _1858 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
    uint _1862 = _1821 | 1u;
    float _1873 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_595, _596, _597));
    float _1876 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_595, _596, _597));
    float _4043 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _4054 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1881 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1883 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.3183098733425140380859375;
    float _1890 = ((cbLight._m0[_1838].x * _1844) * _1883) + (((cbLight._m0[_1848].x * _1813) * _1858) * _1881);
    float _1891 = ((_1844 * cbLight._m0[_1838].y) * _1883) + (((cbLight._m0[_1848].y * _1814) * _1858) * _1881);
    float _1892 = ((_1844 * cbLight._m0[_1838].z) * _1883) + (((cbLight._m0[_1848].z * _1815) * _1858) * _1881);
    uvec4 _1896 = floatBitsToUint(cbLight._m0[_1821 + 12u]);
    bool _1898 = _1896.x == 0u;
    float _1909;
    float _1911;
    float _1913;
    if (_1898)
    {
        _1909 = _1890;
        _1911 = _1891;
        _1913 = _1892;
    }
    else
    {
        uint _1917 = _1821 + 6u;
        float _1933 = (dot(vec3(cbLight._m0[_1821 + 2u].xyz), vec3(_595, _596, _597)) * 0.5) + 0.5;
        float _1934 = _1933 * _1933;
        float _4065 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1935 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1936 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _1909 = (((cbLight._m0[_1917].x * 0.3183098733425140380859375) * _1935) * _1936) + _1890;
        _1911 = (((cbLight._m0[_1917].y * 0.3183098733425140380859375) * _1935) * _1936) + _1891;
        _1913 = (((cbLight._m0[_1917].z * 0.3183098733425140380859375) * _1935) * _1936) + _1892;
    }
    bool _1916 = _1896.y == 0u;
    float _1954;
    float _1956;
    float _1958;
    if (_1916)
    {
        _1954 = _1909;
        _1956 = _1911;
        _1958 = _1913;
    }
    else
    {
        uint _2127 = _1821 + 7u;
        float _2143 = (dot(vec3(cbLight._m0[_1821 + 3u].xyz), vec3(_595, _596, _597)) * 0.5) + 0.5;
        float _2144 = _2143 * _2143;
        float _4081 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2145 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2146 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _1954 = (((cbLight._m0[_2127].x * 0.3183098733425140380859375) * _2145) * _2146) + _1909;
        _1956 = (((cbLight._m0[_2127].y * 0.3183098733425140380859375) * _2145) * _2146) + _1911;
        _1958 = (((cbLight._m0[_2127].z * 0.3183098733425140380859375) * _2145) * _2146) + _1913;
    }
    uint _1961 = _1821 + 8u;
    float _1974 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1821].w)) * _598) * 0.949999988079071044921875);
    float _1975 = _1974 * _1974;
    float _1976 = cbLight._m0[_1821].x + _675;
    float _1977 = cbLight._m0[_1821].y + _676;
    float _1978 = cbLight._m0[_1821].z + _677;
    float _1982 = inversesqrt(dot(vec3(_1976, _1977, _1978), vec3(_1976, _1977, _1978)));
    float _1983 = _1982 * _1976;
    float _1984 = _1982 * _1977;
    float _1985 = _1982 * _1978;
    float _1986 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_1821].xyz));
    float _4097 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _4108 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _1990 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _1991 = dot(vec3(_595, _596, _597), vec3(_1983, _1984, _1985));
    float _4119 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _1995 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_1983, _1984, _1985));
    float _4130 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1999 = _1975 * _1975;
    float _2003 = ((_1994 * _1994) * (_1999 + (-1.0))) + 1.0;
    float _2011 = exp2(log2(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * 5.0);
    float _2012 = 0.959999978542327880859375 - _745;
    float _2014 = 0.959999978542327880859375 - _746;
    float _2015 = 0.959999978542327880859375 - _747;
    float _2022 = 1.0 - _1975;
    float _2033 = (0.5 / (((_1990 * ((_1989 * _2022) + _1975)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2022) + _1975) * _1989))) * _1989;
    float _4141 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2035 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1999 / ((_2003 * _2003) * 3.141590118408203125));
    uint _2049 = _1821 + 9u;
    float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1862].w)) * _598) * 0.949999988079071044921875);
    float _2061 = _2060 * _2060;
    float _2062 = cbLight._m0[_1862].x + _675;
    float _2063 = cbLight._m0[_1862].y + _676;
    float _2064 = cbLight._m0[_1862].z + _677;
    float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
    float _2069 = _2068 * _2062;
    float _2070 = _2068 * _2063;
    float _2071 = _2068 * _2064;
    float _2072 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_1862].xyz));
    float _4152 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2076 = dot(vec3(_595, _596, _597), vec3(_2069, _2070, _2071));
    float _4163 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_2069, _2070, _2071));
    float _4174 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2061 * _2061;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2095 = exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0);
    float _2102 = 1.0 - _2061;
    float _2112 = (0.5 / (((_1990 * ((_2075 * _2102) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2102) + _2061) * _2075))) * _2075;
    float _4185 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    float _2124 = (((((_2095 * _2012) + _748) * cbLight._m0[_2049].x) * _2114) * _1844) + ((((cbLight._m0[_1961].x * _1813) * ((_2011 * _2012) + _748)) * _2035) * _1858);
    float _2125 = (((((_2095 * _2014) + _750) * cbLight._m0[_2049].y) * _2114) * _1844) + ((((cbLight._m0[_1961].y * _1814) * ((_2011 * _2014) + _750)) * _2035) * _1858);
    float _2126 = (((((_2095 * _2015) + _751) * cbLight._m0[_2049].z) * _2114) * _1844) + ((((cbLight._m0[_1961].z * _1815) * ((_2011 * _2015) + _751)) * _2035) * _1858);
    float _2188;
    float _2190;
    float _2192;
    if (_1898)
    {
        _2188 = _2124;
        _2190 = _2125;
        _2192 = _2126;
    }
    else
    {
        uint _2194 = _1821 + 2u;
        uint _2198 = _1821 + 10u;
        float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2194].w)) * _598) * 0.949999988079071044921875);
        float _2213 = _2212 * _2212;
        float _2214 = cbLight._m0[_2194].x + _675;
        float _2215 = cbLight._m0[_2194].y + _676;
        float _2216 = cbLight._m0[_2194].z + _677;
        float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
        float _2221 = _2220 * _2214;
        float _2222 = _2220 * _2215;
        float _2223 = _2220 * _2216;
        float _2224 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2194].xyz));
        float _4196 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2228 = dot(vec3(_595, _596, _597), vec3(_2221, _2222, _2223));
        float _4207 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2232 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_2221, _2222, _2223));
        float _4218 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2236 = _2213 * _2213;
        float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
        float _2247 = exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0);
        float _2254 = 1.0 - _2213;
        float _2264 = (0.5 / (((_1990 * ((_2227 * _2254) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2254) + _2213) * _2227))) * _2227;
        float _4229 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2266 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
        float _2267 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _2188 = (((((_2247 * _2012) + _748) * cbLight._m0[_2198].x) * _2266) * _2267) + _2124;
        _2190 = (((((_2247 * _2014) + _750) * cbLight._m0[_2198].y) * _2266) * _2267) + _2125;
        _2192 = (((((_2247 * _2015) + _751) * cbLight._m0[_2198].z) * _2266) * _2267) + _2126;
    }
    float _2302;
    float _2304;
    float _2306;
    if (_1916)
    {
        _2302 = _2188;
        _2304 = _2190;
        _2306 = _2192;
    }
    else
    {
        uint _2313 = _1821 + 3u;
        uint _2317 = _1821 + 11u;
        float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _598) * 0.949999988079071044921875);
        float _2332 = _2331 * _2331;
        float _2333 = cbLight._m0[_2313].x + _675;
        float _2334 = cbLight._m0[_2313].y + _676;
        float _2335 = cbLight._m0[_2313].z + _677;
        float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
        float _2340 = _2339 * _2333;
        float _2341 = _2339 * _2334;
        float _2342 = _2339 * _2335;
        float _2343 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2313].xyz));
        float _4245 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2347 = dot(vec3(_595, _596, _597), vec3(_2340, _2341, _2342));
        float _4256 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2351 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2340, _2341, _2342));
        float _4267 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2355 = _2332 * _2332;
        float _2359 = ((_2350 * _2350) * (_2355 + (-1.0))) + 1.0;
        float _2366 = exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0);
        float _2373 = 1.0 - _2332;
        float _2383 = (0.5 / (((_1990 * ((_2346 * _2373) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2373) + _2332) * _2346))) * _2346;
        float _4278 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2385 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2355 / ((_2359 * _2359) * 3.141590118408203125));
        float _2386 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _2302 = (((((_2366 * _2012) + _748) * cbLight._m0[_2317].x) * _2385) * _2386) + _2188;
        _2304 = (((((_2366 * _2014) + _750) * cbLight._m0[_2317].y) * _2385) * _2386) + _2190;
        _2306 = (((((_2366 * _2015) + _751) * cbLight._m0[_2317].z) * _2385) * _2386) + _2192;
    }
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    if (_1819.y == 0u)
    {
        float _2461 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2462 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2461;
        float _2463 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2461;
        float _2464 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2461;
        uvec4 _2476 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2477 = _2476.x;
        uint _2488 = uint((float(_2476.y) * floor(float(uint(cbSceneParam._m0[85u].y * _684) / _2477))) + floor(float(uint(cbSceneParam._m0[85u].x * _683) / _2477)));
        float _2498 = (log2(_2464 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2499 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        uint _2502 = uint(isnan(14.0) ? _2499 : (isnan(_2499) ? 14.0 : min(_2499, 14.0)));
        uvec4 _2507 = texelFetch(g_lightClusterGridBuffer, int(((_2502 << 2u) + (_2488 << 6u)) >> 2u));
        uint _2508 = _2507.x;
        uint _2509 = _2476.z;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        if (((((1u << ((_2509 >> 4u) & 15u)) + 4294967295u) & _2508) == 0u) || ((_2509 & 240u) == 0u))
        {
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
        }
        else
        {
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            uint _2760 = 0u;
            uint _2769;
            bool _2770;
            for (;;)
            {
                _2769 = texelFetch(g_lightClassification, int((((_2502 << 5u) + (_2488 << 9u)) + (_2760 << 2u)) >> 2u)).x;
                _2770 = _2769 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2770)
                {
                    frontier_phi_61_pred = _2754;
                    frontier_phi_61_pred_1 = _2759;
                    frontier_phi_61_pred_2 = _2758;
                    frontier_phi_61_pred_3 = _2757;
                    frontier_phi_61_pred_4 = _2756;
                    frontier_phi_61_pred_5 = _2755;
                }
                else
                {
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    uint _2884;
                    _2878 = _2754;
                    _2879 = _2755;
                    _2880 = _2756;
                    _2881 = _2757;
                    _2882 = _2758;
                    _2883 = _2759;
                    _2884 = _2769;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    for (;;)
                    {
                        uint _2888 = uint(findLSB(_2884)) + (_2760 << 5u);
                        uint _2885 = (_2884 + 4294967295u) & _2884;
                        uint _2890 = _2888 * 48u;
                        vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2910 = (_2888 * 48u) + 4u;
                        vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2910)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 3u)).x));
                        uint _2929 = (_2888 * 48u) + 8u;
                        vec3 _2940 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2929)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 2u)).x));
                        float _2944 = _2904.x - _2462;
                        float _2945 = _2904.y - _2463;
                        float _2946 = _2904.z - _2464;
                        float _2947 = dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946));
                        float _2950 = inversesqrt(_2947);
                        float _2951 = _2950 * _2944;
                        float _2952 = _2950 * _2945;
                        float _2953 = _2950 * _2946;
                        float _2954 = dot(vec3(_705, _708, _711), vec3(_2951, _2952, _2953));
                        float _2959 = 1.0 - (_2947 * _2904.w);
                        float _4304 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2960 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _2961 = sqrt(_2947) * _2923.w;
                        float _2964 = 1.39999997615814208984375 / (_2961 + 1.39999997615814208984375);
                        float _2965 = _2964 * _2964;
                        float _2968 = ((1.0 - _2965) * _2954) + _2965;
                        float _2971 = _2961 * _2961;
                        float _2975 = ((isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))) * _2960) / ((_2971 * 0.699999988079071044921875) + 1.0);
                        float _2979 = (-0.0) - _2462;
                        float _2980 = (-0.0) - _2463;
                        float _2981 = (-0.0) - _2464;
                        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2996 = exp2(log2(1.0 / ((_2971 * 3.5) + 5.0)) * 0.25);
                        float _2997 = 1.0 - _780;
                        float _3004 = sqrt(1.0 - ((1.0 - (_2997 * _2997)) * (1.0 - (_2996 * _2996))));
                        float _3005 = _3004 * _3004;
                        float _3006 = _3005 * _3005;
                        float _3007 = _2986 + _2951;
                        float _3008 = _2987 + _2952;
                        float _3009 = _2988 + _2953;
                        float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
                        float _3017 = dot(vec3(_705, _708, _711), vec3(_2986, _2987, _2988));
                        float _4320 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3020 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3021 = dot(vec3(_705, _708, _711), vec3(_3013 * _3007, _3013 * _3008, _3013 * _3009));
                        float _4331 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3024 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3028 = ((_3024 * _3024) * (_3006 + (-1.0))) + 1.0;
                        float _3029 = _2964 * _3005;
                        float _3030 = _3029 * _3029;
                        float _3033 = ((1.0 - _3030) * _2954) + _3030;
                        float _4342 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3034 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3035 = 1.0 - _3005;
                        float _3045 = (0.5 / (((_3034 * ((_3020 * _3035) + _3005)) + 9.9999999392252902907785028219223e-09) + (((_3034 * _3035) + _3005) * _3020))) * _3034;
                        float _4353 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3056 = (((_3006 * 3.1415927410125732421875) * (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) / ((_3028 * _3028) * ((_2971 * 2.1991131305694580078125) + 3.141590118408203125))) * _2960;
                        _2813 = (_2975 * _2923.x) + _2881;
                        _2814 = (_2975 * _2923.y) + _2882;
                        _2815 = (_2975 * _2923.z) + _2883;
                        _2810 = (_3056 * _2940.x) + _2878;
                        _2811 = (_3056 * _2940.y) + _2879;
                        _2812 = (_3056 * _2940.z) + _2880;
                        if (_2885 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2878 = _2810;
                            _2879 = _2811;
                            _2880 = _2812;
                            _2881 = _2813;
                            _2882 = _2814;
                            _2883 = _2815;
                            _2884 = _2885;
                        }
                    }
                    frontier_phi_61_pred = _2810;
                    frontier_phi_61_pred_1 = _2815;
                    frontier_phi_61_pred_2 = _2814;
                    frontier_phi_61_pred_3 = _2813;
                    frontier_phi_61_pred_4 = _2812;
                    frontier_phi_61_pred_5 = _2811;
                }
                _2610 = frontier_phi_61_pred;
                _2620 = frontier_phi_61_pred_1;
                _2618 = frontier_phi_61_pred_2;
                _2616 = frontier_phi_61_pred_3;
                _2614 = frontier_phi_61_pred_4;
                _2612 = frontier_phi_61_pred_5;
                uint _2761 = _2760 + 1u;
                if (_2761 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2754 = _2610;
                    _2755 = _2612;
                    _2756 = _2614;
                    _2757 = _2616;
                    _2758 = _2618;
                    _2759 = _2620;
                    _2760 = _2761;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
        }
        uvec4 _2623 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2624 = _2623.z;
        uint _2626 = (_2624 >> 8u) & 15u;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((4294967295u << _2626) & _2508) == 0u)
        {
            _2722 = _2609;
            _2724 = _2611;
            _2726 = _2613;
            _2728 = _2615;
            _2730 = _2617;
            _2732 = _2619;
        }
        else
        {
            float _2747 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
            float _2748 = _2747 * _2462;
            float _2749 = _2747 * _2463;
            float _2750 = _2747 * _2464;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2626 < ((_2624 >> 12u) & 15u))
            {
                float _2723;
                float _2725;
                float _2727;
                float _2729;
                float _2731;
                float _2733;
                float _2861 = _2609;
                float _2862 = _2611;
                float _2863 = _2613;
                float _2864 = _2615;
                float _2865 = _2617;
                float _2866 = _2619;
                uint _2867 = _2626;
                uint _2876;
                bool _2877;
                for (;;)
                {
                    _2876 = texelFetch(g_lightClassification, int((((_2502 << 5u) + (_2488 << 9u)) + (_2867 << 2u)) >> 2u)).x;
                    _2877 = _2876 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2877)
                    {
                        frontier_phi_67_pred = _2864;
                        frontier_phi_67_pred_1 = _2865;
                        frontier_phi_67_pred_2 = _2866;
                        frontier_phi_67_pred_3 = _2863;
                        frontier_phi_67_pred_4 = _2862;
                        frontier_phi_67_pred_5 = _2861;
                    }
                    else
                    {
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3074 = _2861;
                        float _3075 = _2862;
                        float _3076 = _2863;
                        float _3077 = _2864;
                        float _3078 = _2865;
                        float _3079 = _2866;
                        uint _3080 = _2876;
                        uint _3081;
                        vec4 _3106;
                        float _3107;
                        vec4 _3122;
                        vec3 _3134;
                        vec4 _3149;
                        vec4 _3164;
                        float _3210;
                        bool _3211;
                        for (;;)
                        {
                            uint _3091 = ((_2867 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3080));
                            _3081 = (_3080 + 4294967295u) & _3080;
                            uint _3093 = _3091 * 40u;
                            _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            _3107 = _3106.w;
                            uint _3109 = (_3091 * 40u) + 4u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3124 = (_3091 * 40u) + 8u;
                            _3134 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x));
                            uint _3136 = (_3091 * 40u) + 16u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3151 = (_3091 * 40u) + 20u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3166 = (_3091 * 40u) + 24u;
                            vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3185 = (_3091 * 40u) + 28u;
                            vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            _3210 = fma(_2464, _3198.z, fma(_2463, _3198.y, _3198.x * _2462)) + _3198.w;
                            _3211 = !((fma(_2464, _3179.z, fma(_2463, _3179.y, _3179.x * _2462)) + _3179.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3211)
                            {
                                float _3238 = _3106.x - _2462;
                                float _3239 = _3106.y - _2463;
                                float _3240 = _3106.z - _2464;
                                float _3241 = dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240));
                                float _3244 = inversesqrt(_3241);
                                float _3245 = _3244 * _3238;
                                float _3246 = _3244 * _3239;
                                float _3247 = _3244 * _3240;
                                float _3251 = 1.0 - (_3241 / (_3107 * _3107));
                                float _4364 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3252 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3256 = sqrt(_3241) * _3122.w;
                                float _3258 = 1.39999997615814208984375 / (_3256 + 1.39999997615814208984375);
                                float _3259 = _3258 * _3258;
                                float _3262 = ((1.0 - _3259) * dot(vec3(_3245, _3246, _3247), vec3(_705, _708, _711))) + _3259;
                                float _3265 = _3256 * _3256;
                                float _3269 = (fma(_2464, _3149.z, fma(_2463, _3149.y, _3149.x * _2462)) + _3149.w) / _3210;
                                float _3270 = (fma(_2464, _3164.z, fma(_2463, _3164.y, _3164.x * _2462)) + _3164.w) / _3210;
                                float _3274 = 1.0 - dot(vec2(_3269, _3270), vec2(_3269, _3270));
                                float _4380 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3276 = _3275 * (((isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))) * _3252) / ((_3265 * 0.699999988079071044921875) + 1.0));
                                float _3288 = exp2(log2(1.0 / ((_3265 * 3.5) + 5.0)) * 0.25);
                                float _3289 = 1.0 - _780;
                                float _3296 = sqrt(1.0 - ((1.0 - (_3289 * _3289)) * (1.0 - (_3288 * _3288))));
                                float _3297 = _3296 * _3296;
                                float _3298 = _3297 * _3297;
                                float _3299 = _3245 - _2748;
                                float _3300 = _3246 - _2749;
                                float _3301 = _3247 - _2750;
                                float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                                float _3309 = dot(vec3(_705, _708, _711), vec3((-0.0) - _2748, (-0.0) - _2749, (-0.0) - _2750));
                                float _4391 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3312 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3313 = dot(vec3(_705, _708, _711), vec3(_3305 * _3299, _3305 * _3300, _3305 * _3301));
                                float _4402 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3316 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3320 = ((_3316 * _3316) * (_3298 + (-1.0))) + 1.0;
                                float _3321 = _3258 * _3297;
                                float _3322 = _3321 * _3321;
                                float _3328 = ((1.0 - _3322) * dot(vec3(_705, _708, _711), vec3(_3245, _3246, _3247))) + _3322;
                                float _4413 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3329 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3330 = 1.0 - _3297;
                                float _3340 = (0.5 / (((_3329 * ((_3312 * _3330) + _3297)) + 9.9999999392252902907785028219223e-09) + (((_3329 * _3330) + _3297) * _3312))) * _3329;
                                float _4424 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3350 = (_3275 * _3252) * (((_3298 * 3.1415927410125732421875) * (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) / ((_3320 * _3320) * ((_3265 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3350 * _3134.x;
                                frontier_phi_73_pred_1 = _3350 * _3134.y;
                                frontier_phi_73_pred_2 = _3276 * _3122.z;
                                frontier_phi_73_pred_3 = _3276 * _3122.y;
                                frontier_phi_73_pred_4 = _3276 * _3122.x;
                                frontier_phi_73_pred_5 = _3350 * _3134.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3354 = frontier_phi_73_pred;
                            _3355 = frontier_phi_73_pred_1;
                            _3359 = frontier_phi_73_pred_2;
                            _3358 = frontier_phi_73_pred_3;
                            _3357 = frontier_phi_73_pred_4;
                            _3356 = frontier_phi_73_pred_5;
                            _3064 = _3357 + _3077;
                            _3065 = _3358 + _3078;
                            _3066 = _3359 + _3079;
                            _3061 = _3354 + _3074;
                            _3062 = _3355 + _3075;
                            _3063 = _3356 + _3076;
                            if (_3081 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3081;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3064;
                        frontier_phi_67_pred_1 = _3065;
                        frontier_phi_67_pred_2 = _3066;
                        frontier_phi_67_pred_3 = _3063;
                        frontier_phi_67_pred_4 = _3062;
                        frontier_phi_67_pred_5 = _3061;
                    }
                    _2729 = frontier_phi_67_pred;
                    _2731 = frontier_phi_67_pred_1;
                    _2733 = frontier_phi_67_pred_2;
                    _2727 = frontier_phi_67_pred_3;
                    _2725 = frontier_phi_67_pred_4;
                    _2723 = frontier_phi_67_pred_5;
                    uint _2868 = _2867 + 1u;
                    if (_2868 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2861 = _2723;
                        _2862 = _2725;
                        _2863 = _2727;
                        _2864 = _2729;
                        _2865 = _2731;
                        _2866 = _2733;
                        _2867 = _2868;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2731;
                frontier_phi_55_56_ladder_1 = _2733;
                frontier_phi_55_56_ladder_2 = _2729;
                frontier_phi_55_56_ladder_3 = _2727;
                frontier_phi_55_56_ladder_4 = _2725;
                frontier_phi_55_56_ladder_5 = _2723;
            }
            else
            {
                frontier_phi_55_56_ladder = _2617;
                frontier_phi_55_56_ladder_1 = _2619;
                frontier_phi_55_56_ladder_2 = _2615;
                frontier_phi_55_56_ladder_3 = _2613;
                frontier_phi_55_56_ladder_4 = _2611;
                frontier_phi_55_56_ladder_5 = _2609;
            }
            _2722 = frontier_phi_55_56_ladder_5;
            _2724 = frontier_phi_55_56_ladder_4;
            _2726 = frontier_phi_55_56_ladder_3;
            _2728 = frontier_phi_55_56_ladder_2;
            _2730 = frontier_phi_55_56_ladder;
            _2732 = frontier_phi_55_56_ladder_1;
        }
        float _2737 = isnan(1.0) ? _764 : (isnan(_764) ? 1.0 : min(_764, 1.0));
        _2521 = (_2737 * _2728) + _1954;
        _2523 = (_2737 * _2730) + _1956;
        _2525 = (_2737 * _2732) + _1958;
        _2527 = ((_2722 * _748) * _2737) + _2302;
        _2529 = ((_2724 * _750) * _2737) + _2304;
        _2531 = ((_2726 * _751) * _2737) + _2306;
    }
    else
    {
        _2521 = _1954;
        _2523 = _1956;
        _2525 = _1958;
        _2527 = _2302;
        _2529 = _2304;
        _2531 = _2306;
    }
    float _4440 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _4451 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4462 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    uint _2551 = _256 + 6u;
    float _2559 = _683 / cbSceneParam._m0[86u].x;
    float _2560 = _684 / cbSceneParam._m0[86u].y;
    vec4 _2574 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2559, _2560, (log2((isnan(cbSceneParam._m0[77u].w) ? _617 : (isnan(_617) ? cbSceneParam._m0[77u].w : min(_617, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2576 = _2574.x;
    float _2577 = _2574.y;
    float _2578 = _2574.z;
    float _2579 = _2574.w;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    if (_617 > cbSceneParam._m0[78u].w)
    {
        float _2634 = isnan(_617) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _617 : min(cbSceneParam._m0[80u].w, _617));
        float _2635 = _2634 / _617;
        float _2646 = _2635 * _668;
        float _2647 = _669 * _2635;
        float _2648 = (-0.0) - _2647;
        float _2650 = _2635 * _670;
        float _2652 = (cbSceneParam._m0[77u].w * _2648) / _2634;
        float _2653 = _2652 + cbSceneParam._m0[79u].w;
        float _2654 = cbSceneParam._m0[79u].w - _2647;
        float _2660 = sqrt(((_2646 * _2646) + (_2647 * _2647)) + (_2650 * _2650));
        float _2663 = (1.0 - (cbSceneParam._m0[77u].w / _2634)) * _2660;
        float _2668 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2670 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2823;
        if (abs((_2648 - _2652) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2823 = ((((_2653 > 0.0) ? exp2(_2668 * _2653) : (2.0 - exp2(_2670 * _2653))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2663;
        }
        else
        {
            float _2783 = 1.0 / cbSceneParam._m0[80u].x;
            float _2784 = isnan(_2654) ? _2653 : (isnan(_2653) ? _2654 : max(_2653, _2654));
            float _2785 = isnan(_2654) ? _2653 : (isnan(_2653) ? _2654 : min(_2653, _2654));
            float _2794 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : min(_2784, 0.0));
            float _2795 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : min(_2785, 0.0));
            _2823 = ((abs(_2660 / _2648) * cbSceneParam._m0[80u].y) * ((((_2794 - _2795) * 2.0) - ((exp2(_2668 * (isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0)))) - exp2(_2668 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0))))) * _2783)) - ((exp2(_2670 * _2794) - exp2(_2670 * _2795)) * _2783))) + (_2663 * cbSceneParam._m0[80u].z);
        }
        vec4 _2825 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2559, _2560, 1.0), 0.0);
        float _2834 = exp2((_2823 * (-1.44269502162933349609375)) * (1.0 - _2825.w));
        float _2835 = log2(_2834);
        float _2851 = log2(_2579);
        _2672 = (exp2(_2851 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].x)) * _2825.x) / cbSceneParam._m0[78u].x)) + _2576;
        _2674 = (exp2(_2851 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].y)) * _2825.y) / cbSceneParam._m0[78u].y)) + _2577;
        _2676 = (exp2(_2851 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].z)) * _2825.z) / cbSceneParam._m0[78u].z)) + _2578;
        _2678 = _2834 * _2579;
    }
    else
    {
        _2672 = _2576;
        _2674 = _2577;
        _2676 = _2578;
        _2678 = _2579;
    }
    float _2690 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2691 = _2690 == 3.0;
    float _2692 = log2(_2678);
    float _2699 = exp2(_2692 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2521 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _764))) + ((_2527 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1572)) * cbPerFrame._m0[3u].x));
    float _2700 = exp2(_2692 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2523 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _764))) + ((_2529 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1572)) * cbPerFrame._m0[3u].x));
    float _2701 = exp2(_2692 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2525 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _764))) + ((_2531 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1572)) * cbPerFrame._m0[3u].x));
    float _2710 = (_2690 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2710 * (_2691 ? _2699 : (_2699 + (cbSceneParam._m0[72u].w * _2672)));
    SV_Target.y = _2710 * (_2691 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2674)));
    SV_Target.z = _2710 * (_2691 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2676)));
    SV_Target.w = cbInstanceData._m0[_2551].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2551].w;
}


