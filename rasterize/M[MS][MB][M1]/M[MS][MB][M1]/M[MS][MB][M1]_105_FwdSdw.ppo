#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1318;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[24u].y) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3928 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _395 = (_388 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _396 = (_388 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _397 = (_388 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _415 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _434 = _432.x;
    float _435 = _432.y;
    float _436 = _432.z;
    float _445 = ((_415.z - _436) * _388) + _436;
    float _448 = ((((_415.x - _434) * _388) + _434) * 2.0) + (-1.0);
    float _450 = ((((_415.y - _435) * _388) + _435) * 2.0) + (-1.0);
    float _451 = dot(vec2(_448, _450), vec2(_448, _450));
    float _3939 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _456 = sqrt(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))));
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _484 = (((_472.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _448;
    float _485 = (((_472.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _450;
    float _488 = fma(_456, _239, fma(_485, _246, _484 * _232));
    float _491 = fma(_456, _240, fma(_485, _247, _484 * _233));
    float _494 = fma(_456, _241, fma(_485, _248, _484 * _234));
    float _498 = inversesqrt(dot(vec3(_488, _491, _494), vec3(_488, _491, _494)));
    vec4 _525 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _527 = _525.x;
    float _528 = 1.0 - _527;
    float _534 = (cbMtdParam._m0[19u].x + dot(vec4(_498 * _488, _498 * _491, _498 * _494, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_527 - _528) * cbMtdParam._m0[24u].z) + _528) * cbMtdParam._m0[21u].z);
    float _3950 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _537 = (-0.0) - cbMtdParam._m0[24u].x;
    float _539 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _540 = isnan(1.0) ? _539 : (isnan(_539) ? 1.0 : min(_539, 1.0));
    float _547 = _535 - ((_535 * TEXCOORD_8.x) * _540);
    float _548 = _535 - ((_535 * TEXCOORD_8.y) * _540);
    float _549 = _535 - ((_535 * TEXCOORD_8.z) * _540);
    float _556 = (_547 * (cbMtdParam._m0[17u].x - _395)) + _395;
    float _557 = (_548 * (cbMtdParam._m0[17u].y - _396)) + _396;
    float _558 = (_549 * (cbMtdParam._m0[17u].z - _397)) + _397;
    vec4 _570 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _572 = _570.x;
    float _573 = 1.0 - _572;
    float _601 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_572 - _573) * cbMtdParam._m0[24u].w) + _573) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3971 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _602 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _610 = ((((cbMtdParam._m0[10u].x - _556) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _602) + _556;
    float _611 = ((((cbMtdParam._m0[10u].y - _557) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _602) + _557;
    float _612 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _558)) * _602) + _558;
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _640 = _638.x;
    float _658 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _640) * _388) + _640;
    float _662 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _658) * cbMtdParam._m0[19u].z) + _658;
    float _664 = _662 - (_662 * _547);
    float _666 = _664 - (_664 * _602);
    float _670 = (cbMtdParam._m0[19u].w * (_472.z - _445)) + _445;
    vec4 _684 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _691 = (_684.x * 2.0) + (-1.0);
    float _692 = (_684.y * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _3982 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _701 = ((_684.z - _670) * _547) + _670;
    float _704 = ((cbMtdParam._m0[23u].y - _701) * _602) + _701;
    vec4 _723 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _729 = (_723.x * 2.0) + (-1.0);
    float _730 = (_723.y * 2.0) + (-1.0);
    float _731 = dot(vec2(_729, _730), vec2(_729, _730));
    float _3993 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _746 = ((sqrt(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) - _456) * _549) + _456;
    float _749 = (((_691 - _484) * _547) + _484) + (cbMtdParam._m0[21u].x * _484);
    float _750 = (((_692 - _485) * _548) + _485) + (cbMtdParam._m0[21u].x * _485);
    float _761 = (((_729 - _749) + (_749 * cbMtdParam._m0[22u].z)) * _602) + _749;
    float _762 = (((_730 - _750) + (_750 * cbMtdParam._m0[22u].z)) * _602) + _750;
    float _763 = (_602 * (sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) - _746)) + _746;
    float _765 = cbMtdParam._m0[22u].x + _472.w;
    float _768 = fma(_763, _239, fma(_762, _246, _761 * _232));
    float _771 = fma(_763, _240, fma(_762, _247, _761 * _233));
    float _774 = fma(_763, _241, fma(_762, _248, _761 * _234));
    float _778 = inversesqrt(dot(vec3(_768, _771, _774), vec3(_768, _771, _774)));
    float _779 = _778 * _768;
    float _780 = _778 * _771;
    float _781 = _778 * _774;
    float _4004 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _782 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4026 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4037 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4048 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4059 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _787 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _801 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _851 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _841);
    float _852 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _841);
    float _853 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _841);
    float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
    float _858 = _851 * _857;
    float _859 = _852 * _857;
    float _860 = _853 * _857;
    float _866 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _867 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _885 = fma(_781, cbSceneParam._m0[5u].z, fma(_780, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _779));
    float _888 = fma(_781, cbSceneParam._m0[6u].z, fma(_780, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _779));
    float _891 = fma(_781, cbSceneParam._m0[7u].z, fma(_780, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _779));
    uint _905 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _911 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_905].x;
    float _912 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_905].y;
    float _913 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_905].z;
    float _4070 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _917 = 1.0 - _787;
    float _918 = _914 * _917;
    float _919 = _915 * _917;
    float _920 = _916 * _917;
    float _925 = (_914 + (-0.039999999105930328369140625)) * _787;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _787;
    float _927 = (_916 + (-0.039999999105930328369140625)) * _787;
    float _928 = _925 + 0.039999999105930328369140625;
    float _930 = _926 + 0.039999999105930328369140625;
    float _931 = _927 + 0.039999999105930328369140625;
    vec4 _940 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _866, cbSceneParam._m0[86u].y * _867));
    float _944 = ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * TEXCOORD_5.w) * _940.x;
    float _945 = dot(vec3(_779, _780, _781), vec3(_858, _859, _860));
    float _948 = _945 * 2.0;
    float _952 = (_948 * _779) - _858;
    float _953 = (_948 * _780) - _859;
    float _954 = (_948 * _781) - _860;
    float _958 = abs(dot(vec3(_858, _859, _860), vec3(_779, _780, _781)));
    float _4103 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _960 = sqrt(_782);
    float _973 = exp2((_960 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_960 * 3.0));
    float _979 = (1.0 - _973) * ((_960 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _980 = _973 * _960;
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1317;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1042 = fma(_1016, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1008));
        float _1046 = fma(_1016, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1008));
        float _1050 = fma(_1016, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1008));
        float _1075 = _1008 + _779;
        float _1076 = _1012 + _780;
        float _1077 = _1016 + _781;
        float _1087 = fma(_1077, cbModelParam._m0[26u].z, fma(_1076, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1075)) - _1042;
        float _1088 = fma(_1077, cbModelParam._m0[27u].z, fma(_1076, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1075)) - _1046;
        float _1089 = fma(_1077, cbModelParam._m0[28u].z, fma(_1076, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1075)) - _1050;
        float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
        float _1106 = ((_1093 * _1087) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1042 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1093 * _1088) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1046 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1093 * _1089) / cbModelParam._m0[34u].z) + ((((((_1050 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        float _1145 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1111.x + (-0.5));
        float _1147 = _1145 * (_1111.y + (-0.5));
        float _1148 = _1145 * (_1111.z + (-0.5));
        float _1155 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1118.x + (-0.5));
        float _1157 = _1155 * (_1118.y + (-0.5));
        float _1158 = _1155 * (_1118.z + (-0.5));
        float _1165 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1125.x + (-0.5));
        float _1167 = _1165 * (_1125.y + (-0.5));
        float _1168 = _1165 * (_1125.z + (-0.5));
        float _1175 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1132.x + (-0.5));
        float _1177 = _1175 * (_1132.y + (-0.5));
        float _1178 = _1175 * (_1132.z + (-0.5));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = _1146 * 0.5;
        float _1183 = _1156 * 0.5;
        float _1184 = _1166 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1199 = (dot(vec3(_779, _780, _781), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1209 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4151 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1211 + 1.0))) + _1216) * _1179;
        float _1226 = _1147 * 0.5;
        float _1227 = _1157 * 0.5;
        float _1228 = _1167 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_779, _780, _781), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4184 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1253 + 1.0))) + _1258) * _1180;
        float _1268 = _1148 * 0.5;
        float _1269 = _1158 * 0.5;
        float _1270 = _1168 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_779, _780, _781), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4217 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1295 + 1.0))) + _1300) * _1181;
        _1317 = _1148;
        _1319 = _1147;
        _1320 = _1146;
        _1321 = _1158;
        _1322 = _1157;
        _1323 = _1156;
        _1324 = _1168;
        _1325 = _1167;
        _1326 = _1166;
        _1327 = _1181;
        _1328 = _1180;
        _1329 = _1179;
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
    }
    else
    {
        _1317 = _1318;
        _1319 = _1318;
        _1320 = _1318;
        _1321 = _1318;
        _1322 = _1318;
        _1323 = _1318;
        _1324 = _1318;
        _1325 = _1318;
        _1326 = _1318;
        _1327 = _1318;
        _1328 = _1318;
        _1329 = _1318;
        _1330 = 0.0;
        _1331 = 0.0;
        _1332 = 0.0;
    }
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1357 = fma(_1016, cbModelParam._m0[30u].z, fma(_1012, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008));
        float _1361 = fma(_1016, cbModelParam._m0[31u].z, fma(_1012, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008));
        float _1365 = fma(_1016, cbModelParam._m0[32u].z, fma(_1012, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008));
        float _1388 = _1008 + _779;
        float _1389 = _1012 + _780;
        float _1390 = _1016 + _781;
        float _1400 = fma(_1390, cbModelParam._m0[30u].z, fma(_1389, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1388)) - _1357;
        float _1401 = fma(_1390, cbModelParam._m0[31u].z, fma(_1389, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1388)) - _1361;
        float _1402 = fma(_1390, cbModelParam._m0[32u].z, fma(_1389, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1388)) - _1365;
        float _1406 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
        float _1419 = ((_1406 * _1400) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1357 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1406 * _1401) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1361 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1406 * _1402) / cbModelParam._m0[35u].z) + ((((((_1365 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        float _1456 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1423.x + (-0.5));
        float _1458 = _1456 * (_1423.y + (-0.5));
        float _1459 = _1456 * (_1423.z + (-0.5));
        float _1466 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1430.x + (-0.5));
        float _1468 = _1466 * (_1430.y + (-0.5));
        float _1469 = _1466 * (_1430.z + (-0.5));
        float _1476 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1437.x + (-0.5));
        float _1478 = _1476 * (_1437.y + (-0.5));
        float _1479 = _1476 * (_1437.z + (-0.5));
        float _1486 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1444.x + (-0.5));
        float _1488 = _1486 * (_1444.y + (-0.5));
        float _1489 = _1486 * (_1444.z + (-0.5));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = _1457 * 0.5;
        float _1494 = _1467 * 0.5;
        float _1495 = _1477 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_779, _780, _781), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4280 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1520 + 1.0))) + _1525) * _1490;
        float _1535 = _1458 * 0.5;
        float _1536 = _1468 * 0.5;
        float _1537 = _1478 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_779, _780, _781), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4313 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1562 + 1.0))) + _1567) * _1491;
        float _1577 = _1459 * 0.5;
        float _1578 = _1469 * 0.5;
        float _1579 = _1479 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_779, _780, _781), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4346 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1604 + 1.0))) + _1609) * _1492;
        _1626 = _1459;
        _1627 = _1458;
        _1628 = _1457;
        _1629 = _1469;
        _1630 = _1468;
        _1631 = _1467;
        _1632 = _1479;
        _1633 = _1478;
        _1634 = _1477;
        _1635 = _1492;
        _1636 = _1491;
        _1637 = _1490;
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
    }
    else
    {
        _1626 = _1318;
        _1627 = _1318;
        _1628 = _1318;
        _1629 = _1318;
        _1630 = _1318;
        _1631 = _1318;
        _1632 = _1318;
        _1633 = _1318;
        _1634 = _1318;
        _1635 = _1318;
        _1636 = _1318;
        _1637 = _1318;
        _1638 = 0.0;
        _1639 = 0.0;
        _1640 = 0.0;
    }
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1330)) + _1330;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1331)) + _1331;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1332)) + _1332;
    float _1673 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1651, cbSceneParam._m0[89u].y, _1650 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1651, cbSceneParam._m0[90u].y, _1650 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1651, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1650));
    float _1694 = _952 * 0.5;
    float _1695 = _953 * 0.5;
    float _1696 = _954 * 0.5;
    float _1697 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1700 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1703 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1737;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1710 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1317, _1321, _1324, _1327));
        float _1714 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1718 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1725 = dot(vec4(cbModelParam._m0[39u]), vec4(_1694, _1695, _1696, 1.0));
        _1737 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1737 = 1.0;
    }
    float _1748;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1739 = dot(vec4(cbModelParam._m0[40u]), vec4(_1694, _1695, _1696, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1739) ? 0.0 : (isnan(0.0) ? _1739 : max(0.0, _1739))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1752 = (_1748 * cbModelParam._m0[1u].x) + (_1737 * (1.0 - cbModelParam._m0[1u].x));
    float _1762 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _782);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1762 : min(cbModelParam._m0[25u].z, _1762));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1811 = fma(_1016, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1008)) + cbModelParam._m0[13u].w;
        float _1815 = fma(_1016, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1008)) + cbModelParam._m0[14u].w;
        float _1819 = fma(_1016, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1008)) + cbModelParam._m0[15u].w;
        float _1822 = fma(_954, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _952));
        float _1825 = fma(_954, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _952));
        float _1828 = fma(_954, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _952));
        float _1856;
        if (_1822 > 0.0)
        {
            _1856 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1856 = frontier_phi_14_12_ladder;
        }
        float _2028;
        if (_1825 > 0.0)
        {
            _2028 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2028 = frontier_phi_23_19_ladder;
        }
        float _2323;
        if (_1828 > 0.0)
        {
            _2323 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2323 = frontier_phi_35_30_ladder;
        }
        float _2325 = isnan(_2028) ? _1856 : (isnan(_1856) ? _2028 : min(_1856, _2028));
        float _2326 = isnan(_2323) ? _2325 : (isnan(_2325) ? _2323 : min(_2325, _2323));
        float _2330 = (_2326 * _1822) + _1811;
        float _2331 = (_2326 * _1825) + _1815;
        float _2332 = (_2326 * _1828) + _1819;
        float _2333 = _2326 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2333;
        float _2337 = _2333 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 > _2337) || ((_2331 < _2335) || ((_2330 < _2335) || (_2330 > _2337))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2477 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2332, cbModelParam._m0[9u].z, fma(_2331, cbModelParam._m0[9u].y, _2330 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2332, cbModelParam._m0[10u].z, fma(_2331, cbModelParam._m0[10u].y, _2330 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2332, cbModelParam._m0[11u].z, fma(_2331, cbModelParam._m0[11u].y, _2330 * cbModelParam._m0[11u].x))), _1763);
            frontier_phi_13_35_ladder = _2477.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2477.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2477.x * cbModelParam._m0[1u].y;
        }
        _1844 = frontier_phi_13_35_ladder_2;
        _1846 = frontier_phi_13_35_ladder_1;
        _1848 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_952, _953, _954), _1763);
        _1844 = _1832.x * cbModelParam._m0[1u].y;
        _1846 = _1832.y * cbModelParam._m0[1u].y;
        _1848 = _1832.z * cbModelParam._m0[1u].y;
    }
    float _1852 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _782);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1852 : min(cbModelParam._m0[25u].w, _1852));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1907 = fma(_1016, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1008)) + cbModelParam._m0[21u].w;
        float _1911 = fma(_1016, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1008)) + cbModelParam._m0[22u].w;
        float _1915 = fma(_1016, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1008)) + cbModelParam._m0[23u].w;
        float _1918 = fma(_954, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _952));
        float _1921 = fma(_954, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _952));
        float _1924 = fma(_954, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _952));
        float _2033;
        if (_1918 > 0.0)
        {
            _2033 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2033 = frontier_phi_25_21_ladder;
        }
        float _2350;
        if (_1921 > 0.0)
        {
            _2350 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2350 = frontier_phi_37_32_ladder;
        }
        float _2688;
        if (_1924 > 0.0)
        {
            _2688 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2688 = frontier_phi_47_44_ladder;
        }
        float _2690 = isnan(_2350) ? _2033 : (isnan(_2033) ? _2350 : min(_2033, _2350));
        float _2691 = isnan(_2688) ? _2690 : (isnan(_2690) ? _2688 : min(_2690, _2688));
        float _2695 = (_2691 * _1918) + _1907;
        float _2696 = (_2691 * _1921) + _1911;
        float _2697 = (_2691 * _1924) + _1915;
        float _2698 = _2691 * 9.9999997473787516355514526367188e-05;
        float _2699 = (-1.0) - _2698;
        float _2701 = _2698 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2697 > _2701) || ((_2697 < _2699) || ((_2696 > _2701) || ((_2696 < _2699) || ((_2695 < _2699) || (_2695 > _2701))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2819 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2697, cbModelParam._m0[17u].z, fma(_2696, cbModelParam._m0[17u].y, _2695 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2697, cbModelParam._m0[18u].z, fma(_2696, cbModelParam._m0[18u].y, _2695 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2697, cbModelParam._m0[19u].z, fma(_2696, cbModelParam._m0[19u].y, _2695 * cbModelParam._m0[19u].x))), _1853);
            frontier_phi_22_47_ladder = _2819.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2819.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2819.x * cbModelParam._m0[1u].z;
        }
        _1943 = frontier_phi_22_47_ladder_2;
        _1945 = frontier_phi_22_47_ladder_1;
        _1947 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_952, _953, _954), _1853);
        _1943 = _1927.x * cbModelParam._m0[1u].z;
        _1945 = _1927.y * cbModelParam._m0[1u].z;
        _1947 = _1927.z * cbModelParam._m0[1u].z;
    }
    float _1960 = (((_979 * _928) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1943 - _1844)) + _1844);
    float _1962 = (((_979 * _930) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1945 - _1846)) + _1846);
    float _1964 = (((_979 * _931) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1947 - _1848)) + _1848);
    float _1967 = fma(_1964, cbSceneParam._m0[89u].z, fma(_1962, cbSceneParam._m0[89u].y, _1960 * cbSceneParam._m0[89u].x));
    float _1970 = fma(_1964, cbSceneParam._m0[90u].z, fma(_1962, cbSceneParam._m0[90u].y, _1960 * cbSceneParam._m0[90u].x));
    float _1973 = fma(_1964, cbSceneParam._m0[91u].z, fma(_1962, cbSceneParam._m0[91u].y, _1960 * cbSceneParam._m0[91u].x));
    float _2007 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2011 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2015 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2019 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2020 = _2007 / _2019;
    float _2021 = _2011 / _2019;
    float _2022 = _2015 / _2019;
    float _2169;
    float _2170;
    float _2171;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2049 = ((uint(_2022 > cbSceneParam._m0[59u].y) + uint(_2022 > cbSceneParam._m0[59u].x)) + uint(_2022 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2050 = _2049 + 43u;
        uint _2058 = _2049 + 44u;
        uint _2066 = _2049 + 45u;
        uint _2074 = _2049 + 46u;
        float _2085 = fma(_2019, cbSceneParam._m0[_2050].w, fma(_2015, cbSceneParam._m0[_2050].z, fma(_2011, cbSceneParam._m0[_2050].y, _2007 * cbSceneParam._m0[_2050].x)));
        float _2089 = fma(_2019, cbSceneParam._m0[_2058].w, fma(_2015, cbSceneParam._m0[_2058].z, fma(_2011, cbSceneParam._m0[_2058].y, _2007 * cbSceneParam._m0[_2058].x)));
        float _2097 = fma(_2019, cbSceneParam._m0[_2074].w, fma(_2015, cbSceneParam._m0[_2074].z, fma(_2011, cbSceneParam._m0[_2074].y, _2007 * cbSceneParam._m0[_2074].x)));
        float _2102 = cbSceneParam._m0[33u].z * _2097;
        float _2104 = cbSceneParam._m0[33u].w * _2097;
        float _2107 = fma(_2019, cbSceneParam._m0[_2066].w, fma(_2015, cbSceneParam._m0[_2066].z, fma(_2011, cbSceneParam._m0[_2066].y, _2007 * cbSceneParam._m0[_2066].x))) / _2097;
        float _2155 = (cbSceneParam._m0[33u].x - sqrt(((_2021 * _2021) + (_2020 * _2020)) + (_2022 * _2022))) * cbSceneParam._m0[33u].y;
        float _4472 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2162 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 + _2085) / _2097, (_2104 + _2089) / _2097), _2107), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2104 + _2085) / _2097, (_2089 - _2102) / _2097), _2107), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2085 - _2102) / _2097, (_2089 - _2104) / _2097), _2107), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2085 - _2104) / _2097, (_2102 + _2089) / _2097), _2107), 0.0)).x), vec4(0.25)));
        _2169 = 1.0 - (_2162 * cbSceneParam._m0[34u].x);
        _2170 = 1.0 - (_2162 * cbSceneParam._m0[34u].y);
        _2171 = 1.0 - (_2162 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2169 = 1.0;
        _2170 = 1.0;
        _2171 = 1.0;
    }
    float _2235;
    float _2237;
    float _2239;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2223 = fma(_2019, cbSceneParam._m0[63u].w, fma(_2015, cbSceneParam._m0[63u].z, fma(_2011, cbSceneParam._m0[63u].y, _2007 * cbSceneParam._m0[63u].x)));
        float _2224 = fma(_2019, cbSceneParam._m0[60u].w, fma(_2015, cbSceneParam._m0[60u].z, fma(_2011, cbSceneParam._m0[60u].y, _2007 * cbSceneParam._m0[60u].x))) / _2223;
        float _2225 = fma(_2019, cbSceneParam._m0[61u].w, fma(_2015, cbSceneParam._m0[61u].z, fma(_2011, cbSceneParam._m0[61u].y, _2007 * cbSceneParam._m0[61u].x))) / _2223;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2224 >= cbSceneParam._m0[64u].x) && (_2225 >= cbSceneParam._m0[64u].y)) && (_2224 <= cbSceneParam._m0[64u].z)) && (_2225 <= cbSceneParam._m0[64u].w))
        {
            float _2363 = fma(_2019, cbSceneParam._m0[62u].w, fma(_2015, cbSceneParam._m0[62u].z, fma(_2011, cbSceneParam._m0[62u].y, _2007 * cbSceneParam._m0[62u].x))) / _2223;
            float _2367 = isnan(cbSceneParam._m0[41u].w) ? _2363 : (isnan(_2363) ? cbSceneParam._m0[41u].w : max(_2363, cbSceneParam._m0[41u].w));
            float _2410 = (cbSceneParam._m0[33u].x - sqrt(((_2021 * _2021) + (_2020 * _2020)) + (_2022 * _2022))) * cbSceneParam._m0[33u].y;
            float _4488 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
            float _2417 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2224, cbSceneParam._m0[33u].w + _2225), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2224, _2225 - cbSceneParam._m0[33u].z), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2224 - cbSceneParam._m0[33u].z, _2225 - cbSceneParam._m0[33u].w), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2224 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2225), _2367), 0.0)).x), vec4(0.25)));
            float _2421 = 1.0 - (_2417 * cbSceneParam._m0[34u].x);
            float _2422 = 1.0 - (_2417 * cbSceneParam._m0[34u].y);
            float _2423 = 1.0 - (_2417 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2423) ? _2171 : (isnan(_2171) ? _2423 : min(_2171, _2423));
            frontier_phi_34_33_ladder_1 = isnan(_2422) ? _2170 : (isnan(_2170) ? _2422 : min(_2170, _2422));
            frontier_phi_34_33_ladder_2 = isnan(_2421) ? _2169 : (isnan(_2169) ? _2421 : min(_2169, _2421));
        }
        else
        {
            frontier_phi_34_33_ladder = _2171;
            frontier_phi_34_33_ladder_1 = _2170;
            frontier_phi_34_33_ladder_2 = _2169;
        }
        _2235 = frontier_phi_34_33_ladder_2;
        _2237 = frontier_phi_34_33_ladder_1;
        _2239 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2235 = _2169;
        _2237 = _2170;
        _2239 = _2171;
    }
    uvec4 _2244 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2246 = _2244.x * 14u;
    uint _2247 = _2246 + 13u;
    float _2254 = _944 + (-1.0);
    float _2259 = (cbLight._m0[_2247].x * _2254) + 1.0;
    float _2260 = (cbLight._m0[_2247].y * _2254) + 1.0;
    float _2261 = (cbLight._m0[_2247].z * _2254) + 1.0;
    float _2262 = (cbLight._m0[_2247].w * _2254) + 1.0;
    uint _2263 = _2246 + 5u;
    float _2269 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
    uint _2273 = _2246 + 4u;
    float _2282 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
    uint _2286 = _2246 | 1u;
    float _2297 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_779, _780, _781));
    float _2300 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_779, _780, _781));
    float _4524 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _4535 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2305 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * 0.3183098733425140380859375;
    float _2307 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * 0.3183098733425140380859375;
    float _2314 = ((cbLight._m0[_2263].x * _2269) * _2307) + (((cbLight._m0[_2273].x * _2235) * _2282) * _2305);
    float _2315 = ((_2269 * cbLight._m0[_2263].y) * _2307) + (((cbLight._m0[_2273].y * _2237) * _2282) * _2305);
    float _2316 = ((_2269 * cbLight._m0[_2263].z) * _2307) + (((cbLight._m0[_2273].z * _2239) * _2282) * _2305);
    uvec4 _2320 = floatBitsToUint(cbLight._m0[_2246 + 12u]);
    bool _2322 = _2320.x == 0u;
    float _2424;
    float _2426;
    float _2428;
    if (_2322)
    {
        _2424 = _2314;
        _2426 = _2315;
        _2428 = _2316;
    }
    else
    {
        uint _2432 = _2246 + 6u;
        float _2448 = (dot(vec3(cbLight._m0[_2246 + 2u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2449 = _2448 * _2448;
        float _4546 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2450 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2451 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2424 = (((cbLight._m0[_2432].x * 0.3183098733425140380859375) * _2450) * _2451) + _2314;
        _2426 = (((cbLight._m0[_2432].y * 0.3183098733425140380859375) * _2450) * _2451) + _2315;
        _2428 = (((cbLight._m0[_2432].z * 0.3183098733425140380859375) * _2450) * _2451) + _2316;
    }
    bool _2431 = _2320.y == 0u;
    float _2486;
    float _2488;
    float _2490;
    if (_2431)
    {
        _2486 = _2424;
        _2488 = _2426;
        _2490 = _2428;
    }
    else
    {
        uint _2659 = _2246 + 7u;
        float _2675 = (dot(vec3(cbLight._m0[_2246 + 3u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2676 = _2675 * _2675;
        float _4562 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2677 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2678 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2486 = (((cbLight._m0[_2659].x * 0.3183098733425140380859375) * _2677) * _2678) + _2424;
        _2488 = (((cbLight._m0[_2659].y * 0.3183098733425140380859375) * _2677) * _2678) + _2426;
        _2490 = (((cbLight._m0[_2659].z * 0.3183098733425140380859375) * _2677) * _2678) + _2428;
    }
    uint _2493 = _2246 + 8u;
    float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _782) * 0.949999988079071044921875);
    float _2507 = _2506 * _2506;
    float _2508 = cbLight._m0[_2246].x + _858;
    float _2509 = cbLight._m0[_2246].y + _859;
    float _2510 = cbLight._m0[_2246].z + _860;
    float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
    float _2515 = _2514 * _2508;
    float _2516 = _2514 * _2509;
    float _2517 = _2514 * _2510;
    float _2518 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2246].xyz));
    float _4578 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _4589 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _2522 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2523 = dot(vec3(_779, _780, _781), vec3(_2515, _2516, _2517));
    float _4600 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2527 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2515, _2516, _2517));
    float _4611 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2531 = _2507 * _2507;
    float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
    float _2543 = exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0);
    float _2544 = 0.959999978542327880859375 - _925;
    float _2546 = 0.959999978542327880859375 - _926;
    float _2547 = 0.959999978542327880859375 - _927;
    float _2554 = 1.0 - _2507;
    float _2565 = (0.5 / (((_2522 * ((_2521 * _2554) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2554) + _2507) * _2521))) * _2521;
    float _4622 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2567 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
    uint _2581 = _2246 + 9u;
    float _2592 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2286].w)) * _782) * 0.949999988079071044921875);
    float _2593 = _2592 * _2592;
    float _2594 = cbLight._m0[_2286].x + _858;
    float _2595 = cbLight._m0[_2286].y + _859;
    float _2596 = cbLight._m0[_2286].z + _860;
    float _2600 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
    float _2601 = _2600 * _2594;
    float _2602 = _2600 * _2595;
    float _2603 = _2600 * _2596;
    float _2604 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2286].xyz));
    float _4633 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2607 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _2608 = dot(vec3(_779, _780, _781), vec3(_2601, _2602, _2603));
    float _4644 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2611 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2612 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_2601, _2602, _2603));
    float _4655 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2616 = _2593 * _2593;
    float _2620 = ((_2611 * _2611) * (_2616 + (-1.0))) + 1.0;
    float _2627 = exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0);
    float _2634 = 1.0 - _2593;
    float _2644 = (0.5 / (((_2522 * ((_2607 * _2634) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2634) + _2593) * _2607))) * _2607;
    float _4666 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2646 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2616 / ((_2620 * _2620) * 3.141590118408203125));
    float _2656 = (((((_2627 * _2544) + _928) * cbLight._m0[_2581].x) * _2646) * _2269) + ((((cbLight._m0[_2493].x * _2235) * ((_2543 * _2544) + _928)) * _2567) * _2282);
    float _2657 = (((((_2627 * _2546) + _930) * cbLight._m0[_2581].y) * _2646) * _2269) + ((((cbLight._m0[_2493].y * _2237) * ((_2543 * _2546) + _930)) * _2567) * _2282);
    float _2658 = (((((_2627 * _2547) + _931) * cbLight._m0[_2581].z) * _2646) * _2269) + ((((cbLight._m0[_2493].z * _2239) * ((_2543 * _2547) + _931)) * _2567) * _2282);
    float _2714;
    float _2716;
    float _2718;
    if (_2322)
    {
        _2714 = _2656;
        _2716 = _2657;
        _2718 = _2658;
    }
    else
    {
        uint _2720 = _2246 + 2u;
        uint _2724 = _2246 + 10u;
        float _2738 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2720].w)) * _782) * 0.949999988079071044921875);
        float _2739 = _2738 * _2738;
        float _2740 = cbLight._m0[_2720].x + _858;
        float _2741 = cbLight._m0[_2720].y + _859;
        float _2742 = cbLight._m0[_2720].z + _860;
        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
        float _2747 = _2746 * _2740;
        float _2748 = _2746 * _2741;
        float _2749 = _2746 * _2742;
        float _2750 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2720].xyz));
        float _4677 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2753 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2754 = dot(vec3(_779, _780, _781), vec3(_2747, _2748, _2749));
        float _4688 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2757 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2758 = dot(vec3(cbLight._m0[_2720].xyz), vec3(_2747, _2748, _2749));
        float _4699 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2762 = _2739 * _2739;
        float _2766 = ((_2757 * _2757) * (_2762 + (-1.0))) + 1.0;
        float _2773 = exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0);
        float _2780 = 1.0 - _2739;
        float _2790 = (0.5 / (((_2522 * ((_2753 * _2780) + _2739)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2780) + _2739) * _2753))) * _2753;
        float _4710 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2792 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2762 / ((_2766 * _2766) * 3.141590118408203125));
        float _2793 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2714 = (((((_2773 * _2544) + _928) * cbLight._m0[_2724].x) * _2792) * _2793) + _2656;
        _2716 = (((((_2773 * _2546) + _930) * cbLight._m0[_2724].y) * _2792) * _2793) + _2657;
        _2718 = (((((_2773 * _2547) + _931) * cbLight._m0[_2724].z) * _2792) * _2793) + _2658;
    }
    float _2824;
    float _2826;
    float _2828;
    if (_2431)
    {
        _2824 = _2714;
        _2826 = _2716;
        _2828 = _2718;
    }
    else
    {
        uint _2835 = _2246 + 3u;
        uint _2839 = _2246 + 11u;
        float _2853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2835].w)) * _782) * 0.949999988079071044921875);
        float _2854 = _2853 * _2853;
        float _2855 = cbLight._m0[_2835].x + _858;
        float _2856 = cbLight._m0[_2835].y + _859;
        float _2857 = cbLight._m0[_2835].z + _860;
        float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
        float _2862 = _2861 * _2855;
        float _2863 = _2861 * _2856;
        float _2864 = _2861 * _2857;
        float _2865 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2835].xyz));
        float _4726 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2868 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2869 = dot(vec3(_779, _780, _781), vec3(_2862, _2863, _2864));
        float _4737 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2872 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2873 = dot(vec3(cbLight._m0[_2835].xyz), vec3(_2862, _2863, _2864));
        float _4748 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2877 = _2854 * _2854;
        float _2881 = ((_2872 * _2872) * (_2877 + (-1.0))) + 1.0;
        float _2888 = exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0);
        float _2895 = 1.0 - _2854;
        float _2905 = (0.5 / (((_2522 * ((_2868 * _2895) + _2854)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2895) + _2854) * _2868))) * _2868;
        float _4759 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2907 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2877 / ((_2881 * _2881) * 3.141590118408203125));
        float _2908 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2824 = (((((_2888 * _2544) + _928) * cbLight._m0[_2839].x) * _2907) * _2908) + _2714;
        _2826 = (((((_2888 * _2546) + _930) * cbLight._m0[_2839].y) * _2907) * _2908) + _2716;
        _2828 = (((((_2888 * _2547) + _931) * cbLight._m0[_2839].z) * _2907) * _2908) + _2718;
    }
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    if (_2244.y == 0u)
    {
        uvec4 _2929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2930 = _2929.x;
        uint _2941 = uint((float(_2929.y) * floor(float(uint(cbSceneParam._m0[85u].y * _867) / _2930))) + floor(float(uint(cbSceneParam._m0[85u].x * _866) / _2930)));
        float _2951 = (log2(_2022 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2952 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        uint _2955 = uint(isnan(14.0) ? _2952 : (isnan(_2952) ? 14.0 : min(_2952, 14.0)));
        uvec4 _2960 = texelFetch(g_lightClusterGridBuffer, int(((_2955 << 2u) + (_2941 << 6u)) >> 2u));
        uint _2961 = _2960.x;
        uint _2962 = _2929.z;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        if (((((1u << ((_2962 >> 4u) & 15u)) + 4294967295u) & _2961) == 0u) || ((_2962 & 240u) == 0u))
        {
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
            _3051 = 0.0;
        }
        else
        {
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3052;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            uint _3191 = 0u;
            uint _3200;
            bool _3201;
            for (;;)
            {
                _3200 = texelFetch(g_lightClassification, int((((_2955 << 5u) + (_2941 << 9u)) + (_3191 << 2u)) >> 2u)).x;
                _3201 = _3200 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3201)
                {
                    frontier_phi_66_pred = _3190;
                    frontier_phi_66_pred_1 = _3189;
                    frontier_phi_66_pred_2 = _3188;
                    frontier_phi_66_pred_3 = _3187;
                    frontier_phi_66_pred_4 = _3186;
                    frontier_phi_66_pred_5 = _3185;
                }
                else
                {
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    uint _3315;
                    _3309 = _3185;
                    _3310 = _3186;
                    _3311 = _3187;
                    _3312 = _3188;
                    _3313 = _3189;
                    _3314 = _3190;
                    _3315 = _3200;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    for (;;)
                    {
                        uint _3319 = uint(findLSB(_3315)) + (_3191 << 5u);
                        uint _3316 = (_3315 + 4294967295u) & _3315;
                        uint _3321 = _3319 * 48u;
                        vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3321)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 3u)).x));
                        uint _3341 = (_3319 * 48u) + 4u;
                        vec4 _3354 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3341)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 3u)).x));
                        uint _3360 = (_3319 * 48u) + 8u;
                        vec3 _3371 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3360)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 2u)).x));
                        float _3375 = _3335.x - _2020;
                        float _3376 = _3335.y - _2021;
                        float _3377 = _3335.z - _2022;
                        float _3378 = dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377));
                        float _3381 = inversesqrt(_3378);
                        float _3382 = _3381 * _3375;
                        float _3383 = _3381 * _3376;
                        float _3384 = _3381 * _3377;
                        float _3385 = dot(vec3(_885, _888, _891), vec3(_3382, _3383, _3384));
                        float _3390 = 1.0 - (_3378 * _3335.w);
                        float _4785 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3391 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3392 = sqrt(_3378) * _3354.w;
                        float _3395 = 1.39999997615814208984375 / (_3392 + 1.39999997615814208984375);
                        float _3396 = _3395 * _3395;
                        float _3399 = ((1.0 - _3396) * _3385) + _3396;
                        float _3402 = _3392 * _3392;
                        float _3406 = ((isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0))) * _3391) / ((_3402 * 0.699999988079071044921875) + 1.0);
                        float _3410 = (-0.0) - _2020;
                        float _3411 = (-0.0) - _2021;
                        float _3412 = (-0.0) - _2022;
                        float _3416 = inversesqrt(dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412)));
                        float _3417 = _3416 * _3410;
                        float _3418 = _3416 * _3411;
                        float _3419 = _3416 * _3412;
                        float _3426 = exp2(log2(1.0 / ((_3402 * 3.5) + 5.0)) * 0.25);
                        float _3427 = 1.0 - _960;
                        float _3434 = sqrt(1.0 - ((1.0 - (_3427 * _3427)) * (1.0 - (_3426 * _3426))));
                        float _3435 = _3434 * _3434;
                        float _3436 = _3435 * _3435;
                        float _3437 = _3417 + _3382;
                        float _3438 = _3418 + _3383;
                        float _3439 = _3419 + _3384;
                        float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                        float _3447 = dot(vec3(_885, _888, _891), vec3(_3417, _3418, _3419));
                        float _4801 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3450 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3451 = dot(vec3(_885, _888, _891), vec3(_3443 * _3437, _3443 * _3438, _3443 * _3439));
                        float _4812 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3454 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                        float _3458 = ((_3454 * _3454) * (_3436 + (-1.0))) + 1.0;
                        float _3459 = _3395 * _3435;
                        float _3460 = _3459 * _3459;
                        float _3463 = ((1.0 - _3460) * _3385) + _3460;
                        float _4823 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3464 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3465 = 1.0 - _3435;
                        float _3475 = (0.5 / (((_3464 * ((_3450 * _3465) + _3435)) + 9.9999999392252902907785028219223e-09) + (((_3464 * _3465) + _3435) * _3450))) * _3464;
                        float _4834 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3486 = (((_3436 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3458 * _3458) * ((_3402 * 2.1991131305694580078125) + 3.141590118408203125))) * _3391;
                        _3244 = (_3406 * _3354.x) + _3312;
                        _3245 = (_3406 * _3354.y) + _3313;
                        _3246 = (_3406 * _3354.z) + _3314;
                        _3241 = (_3486 * _3371.x) + _3309;
                        _3242 = (_3486 * _3371.y) + _3310;
                        _3243 = (_3486 * _3371.z) + _3311;
                        if (_3316 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3309 = _3241;
                            _3310 = _3242;
                            _3311 = _3243;
                            _3312 = _3244;
                            _3313 = _3245;
                            _3314 = _3246;
                            _3315 = _3316;
                        }
                    }
                    frontier_phi_66_pred = _3246;
                    frontier_phi_66_pred_1 = _3245;
                    frontier_phi_66_pred_2 = _3244;
                    frontier_phi_66_pred_3 = _3243;
                    frontier_phi_66_pred_4 = _3242;
                    frontier_phi_66_pred_5 = _3241;
                }
                _3052 = frontier_phi_66_pred;
                _3050 = frontier_phi_66_pred_1;
                _3048 = frontier_phi_66_pred_2;
                _3046 = frontier_phi_66_pred_3;
                _3044 = frontier_phi_66_pred_4;
                _3042 = frontier_phi_66_pred_5;
                uint _3192 = _3191 + 1u;
                if (_3192 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3185 = _3042;
                    _3186 = _3044;
                    _3187 = _3046;
                    _3188 = _3048;
                    _3189 = _3050;
                    _3190 = _3052;
                    _3191 = _3192;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
            _3051 = _3052;
        }
        uvec4 _3055 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3056 = _3055.z;
        uint _3058 = (_3056 >> 8u) & 15u;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        if (((4294967295u << _3058) & _2961) == 0u)
        {
            _3153 = _3041;
            _3155 = _3043;
            _3157 = _3045;
            _3159 = _3047;
            _3161 = _3049;
            _3163 = _3051;
        }
        else
        {
            float _3178 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
            float _3179 = _3178 * _2020;
            float _3180 = _3178 * _2021;
            float _3181 = _3178 * _2022;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3058 < ((_3056 >> 12u) & 15u))
            {
                float _3154;
                float _3156;
                float _3158;
                float _3160;
                float _3162;
                float _3164;
                float _3292 = _3041;
                float _3293 = _3043;
                float _3294 = _3045;
                float _3295 = _3047;
                float _3296 = _3049;
                float _3297 = _3051;
                uint _3298 = _3058;
                uint _3307;
                bool _3308;
                for (;;)
                {
                    _3307 = texelFetch(g_lightClassification, int((((_2955 << 5u) + (_2941 << 9u)) + (_3298 << 2u)) >> 2u)).x;
                    _3308 = _3307 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3308)
                    {
                        frontier_phi_72_pred = _3297;
                        frontier_phi_72_pred_1 = _3296;
                        frontier_phi_72_pred_2 = _3295;
                        frontier_phi_72_pred_3 = _3294;
                        frontier_phi_72_pred_4 = _3293;
                        frontier_phi_72_pred_5 = _3292;
                    }
                    else
                    {
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3504 = _3292;
                        float _3505 = _3293;
                        float _3506 = _3294;
                        float _3507 = _3295;
                        float _3508 = _3296;
                        float _3509 = _3297;
                        uint _3510 = _3307;
                        uint _3511;
                        vec4 _3536;
                        float _3537;
                        vec4 _3552;
                        vec3 _3564;
                        vec4 _3579;
                        vec4 _3595;
                        float _3641;
                        bool _3642;
                        for (;;)
                        {
                            uint _3521 = ((_3298 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3510));
                            _3511 = (_3510 + 4294967295u) & _3510;
                            uint _3523 = _3521 * 40u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            _3537 = _3536.w;
                            uint _3539 = (_3521 * 40u) + 4u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3554 = (_3521 * 40u) + 8u;
                            _3564 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x));
                            uint _3566 = (_3521 * 40u) + 16u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3582 = (_3521 * 40u) + 20u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3597 = (_3521 * 40u) + 24u;
                            vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            uint _3616 = (_3521 * 40u) + 28u;
                            vec4 _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            _3641 = fma(_2022, _3629.z, fma(_2021, _3629.y, _3629.x * _2020)) + _3629.w;
                            _3642 = !((fma(_2022, _3610.z, fma(_2021, _3610.y, _3610.x * _2020)) + _3610.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3642)
                            {
                                float _3669 = _3536.x - _2020;
                                float _3670 = _3536.y - _2021;
                                float _3671 = _3536.z - _2022;
                                float _3672 = dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671));
                                float _3675 = inversesqrt(_3672);
                                float _3676 = _3675 * _3669;
                                float _3677 = _3675 * _3670;
                                float _3678 = _3675 * _3671;
                                float _3682 = 1.0 - (_3672 / (_3537 * _3537));
                                float _4845 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3687 = sqrt(_3672) * _3552.w;
                                float _3689 = 1.39999997615814208984375 / (_3687 + 1.39999997615814208984375);
                                float _3690 = _3689 * _3689;
                                float _3693 = ((1.0 - _3690) * dot(vec3(_3676, _3677, _3678), vec3(_885, _888, _891))) + _3690;
                                float _3696 = _3687 * _3687;
                                float _3700 = (fma(_2022, _3579.z, fma(_2021, _3579.y, _3579.x * _2020)) + _3579.w) / _3641;
                                float _3701 = (fma(_2022, _3595.z, fma(_2021, _3595.y, _3595.x * _2020)) + _3595.w) / _3641;
                                float _3705 = 1.0 - dot(vec2(_3700, _3701), vec2(_3700, _3701));
                                float _4861 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3707 = _3706 * (((isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0))) * _3683) / ((_3696 * 0.699999988079071044921875) + 1.0));
                                float _3719 = exp2(log2(1.0 / ((_3696 * 3.5) + 5.0)) * 0.25);
                                float _3720 = 1.0 - _960;
                                float _3727 = sqrt(1.0 - ((1.0 - (_3720 * _3720)) * (1.0 - (_3719 * _3719))));
                                float _3728 = _3727 * _3727;
                                float _3729 = _3728 * _3728;
                                float _3730 = _3676 - _3179;
                                float _3731 = _3677 - _3180;
                                float _3732 = _3678 - _3181;
                                float _3736 = inversesqrt(dot(vec3(_3730, _3731, _3732), vec3(_3730, _3731, _3732)));
                                float _3740 = dot(vec3(_885, _888, _891), vec3((-0.0) - _3179, (-0.0) - _3180, (-0.0) - _3181));
                                float _4872 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3743 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3744 = dot(vec3(_885, _888, _891), vec3(_3736 * _3730, _3736 * _3731, _3736 * _3732));
                                float _4883 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3747 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3751 = ((_3747 * _3747) * (_3729 + (-1.0))) + 1.0;
                                float _3752 = _3689 * _3728;
                                float _3753 = _3752 * _3752;
                                float _3759 = ((1.0 - _3753) * dot(vec3(_885, _888, _891), vec3(_3676, _3677, _3678))) + _3753;
                                float _4894 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3760 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3761 = 1.0 - _3728;
                                float _3771 = (0.5 / (((_3760 * ((_3743 * _3761) + _3728)) + 9.9999999392252902907785028219223e-09) + (((_3760 * _3761) + _3728) * _3743))) * _3760;
                                float _4905 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3781 = (_3706 * _3683) * (((_3729 * 3.1415927410125732421875) * (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0)))) / ((_3751 * _3751) * ((_3696 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3707 * _3552.y;
                                frontier_phi_78_pred_1 = _3707 * _3552.x;
                                frontier_phi_78_pred_2 = _3781 * _3564.z;
                                frontier_phi_78_pred_3 = _3781 * _3564.y;
                                frontier_phi_78_pred_4 = _3781 * _3564.x;
                                frontier_phi_78_pred_5 = _3707 * _3552.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3789 = frontier_phi_78_pred;
                            _3788 = frontier_phi_78_pred_1;
                            _3787 = frontier_phi_78_pred_2;
                            _3786 = frontier_phi_78_pred_3;
                            _3785 = frontier_phi_78_pred_4;
                            _3790 = frontier_phi_78_pred_5;
                            _3494 = _3788 + _3507;
                            _3495 = _3789 + _3508;
                            _3496 = _3790 + _3509;
                            _3491 = _3785 + _3504;
                            _3492 = _3786 + _3505;
                            _3493 = _3787 + _3506;
                            if (_3511 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3511;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3496;
                        frontier_phi_72_pred_1 = _3495;
                        frontier_phi_72_pred_2 = _3494;
                        frontier_phi_72_pred_3 = _3493;
                        frontier_phi_72_pred_4 = _3492;
                        frontier_phi_72_pred_5 = _3491;
                    }
                    _3164 = frontier_phi_72_pred;
                    _3162 = frontier_phi_72_pred_1;
                    _3160 = frontier_phi_72_pred_2;
                    _3158 = frontier_phi_72_pred_3;
                    _3156 = frontier_phi_72_pred_4;
                    _3154 = frontier_phi_72_pred_5;
                    uint _3299 = _3298 + 1u;
                    if (_3299 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3292 = _3154;
                        _3293 = _3156;
                        _3294 = _3158;
                        _3295 = _3160;
                        _3296 = _3162;
                        _3297 = _3164;
                        _3298 = _3299;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3164;
                frontier_phi_60_61_ladder_1 = _3162;
                frontier_phi_60_61_ladder_2 = _3158;
                frontier_phi_60_61_ladder_3 = _3156;
                frontier_phi_60_61_ladder_4 = _3154;
                frontier_phi_60_61_ladder_5 = _3160;
            }
            else
            {
                frontier_phi_60_61_ladder = _3051;
                frontier_phi_60_61_ladder_1 = _3049;
                frontier_phi_60_61_ladder_2 = _3045;
                frontier_phi_60_61_ladder_3 = _3043;
                frontier_phi_60_61_ladder_4 = _3041;
                frontier_phi_60_61_ladder_5 = _3047;
            }
            _3153 = frontier_phi_60_61_ladder_4;
            _3155 = frontier_phi_60_61_ladder_3;
            _3157 = frontier_phi_60_61_ladder_2;
            _3159 = frontier_phi_60_61_ladder_5;
            _3161 = frontier_phi_60_61_ladder_1;
            _3163 = frontier_phi_60_61_ladder;
        }
        float _3168 = isnan(1.0) ? _944 : (isnan(_944) ? 1.0 : min(_944, 1.0));
        _2974 = (_3168 * _3159) + _2486;
        _2976 = (_3168 * _3161) + _2488;
        _2978 = (_3168 * _3163) + _2490;
        _2980 = ((_3153 * _928) * _3168) + _2824;
        _2982 = ((_3155 * _930) * _3168) + _2826;
        _2984 = ((_3157 * _931) * _3168) + _2828;
    }
    else
    {
        _2974 = _2486;
        _2976 = _2488;
        _2978 = _2490;
        _2980 = _2824;
        _2982 = _2826;
        _2984 = _2828;
    }
    float _4921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4932 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4943 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    uint _3004 = _251 + 6u;
    float _3012 = _866 / cbSceneParam._m0[86u].x;
    float _3013 = _867 / cbSceneParam._m0[86u].y;
    vec4 _3027 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3012, _3013, (log2((isnan(cbSceneParam._m0[77u].w) ? _801 : (isnan(_801) ? cbSceneParam._m0[77u].w : min(_801, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3029 = _3027.x;
    float _3030 = _3027.y;
    float _3031 = _3027.z;
    float _3032 = _3027.w;
    float _3103;
    float _3105;
    float _3107;
    float _3109;
    if (_801 > cbSceneParam._m0[78u].w)
    {
        float _3066 = isnan(_801) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _801 : min(cbSceneParam._m0[80u].w, _801));
        float _3067 = _3066 / _801;
        float _3078 = _3067 * _851;
        float _3079 = _852 * _3067;
        float _3080 = (-0.0) - _3079;
        float _3081 = _3067 * _853;
        float _3083 = (cbSceneParam._m0[77u].w * _3080) / _3066;
        float _3084 = _3083 + cbSceneParam._m0[79u].w;
        float _3085 = cbSceneParam._m0[79u].w - _3079;
        float _3091 = sqrt(((_3078 * _3078) + (_3079 * _3079)) + (_3081 * _3081));
        float _3094 = (1.0 - (cbSceneParam._m0[77u].w / _3066)) * _3091;
        float _3099 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3101 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3254;
        if (abs((_3080 - _3083) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3254 = ((((_3084 > 0.0) ? exp2(_3099 * _3084) : (2.0 - exp2(_3101 * _3084))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3094;
        }
        else
        {
            float _3214 = 1.0 / cbSceneParam._m0[80u].x;
            float _3215 = isnan(_3085) ? _3084 : (isnan(_3084) ? _3085 : max(_3084, _3085));
            float _3216 = isnan(_3085) ? _3084 : (isnan(_3084) ? _3085 : min(_3084, _3085));
            float _3225 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : min(_3215, 0.0));
            float _3226 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : min(_3216, 0.0));
            _3254 = ((abs(_3091 / _3080) * cbSceneParam._m0[80u].y) * ((((_3225 - _3226) * 2.0) - ((exp2(_3099 * (isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0)))) - exp2(_3099 * (isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))))) * _3214)) - ((exp2(_3101 * _3225) - exp2(_3101 * _3226)) * _3214))) + (_3094 * cbSceneParam._m0[80u].z);
        }
        vec4 _3256 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3012, _3013, 1.0), 0.0);
        float _3265 = exp2((_3254 * (-1.44269502162933349609375)) * (1.0 - _3256.w));
        float _3266 = log2(_3265);
        float _3282 = log2(_3032);
        _3103 = (exp2(_3282 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3266 * cbSceneParam._m0[78u].x)) * _3256.x) / cbSceneParam._m0[78u].x)) + _3029;
        _3105 = (exp2(_3282 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3266 * cbSceneParam._m0[78u].y)) * _3256.y) / cbSceneParam._m0[78u].y)) + _3030;
        _3107 = (exp2(_3282 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3266 * cbSceneParam._m0[78u].z)) * _3256.z) / cbSceneParam._m0[78u].z)) + _3031;
        _3109 = _3265 * _3032;
    }
    else
    {
        _3103 = _3029;
        _3105 = _3030;
        _3107 = _3031;
        _3109 = _3032;
    }
    float _3121 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3122 = _3121 == 3.0;
    float _3123 = log2(_3109);
    float _3130 = exp2(_3123 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2974 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _944))) + ((_2980 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1752)) * cbPerFrame._m0[3u].x));
    float _3131 = exp2(_3123 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2976 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _944))) + ((_2982 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1752)) * cbPerFrame._m0[3u].x));
    float _3132 = exp2(_3123 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2978 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _944))) + ((_2984 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1752)) * cbPerFrame._m0[3u].x));
    float _3141 = (_3121 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3141 * (_3122 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3103)));
    SV_Target.y = _3141 * (_3122 ? _3131 : (_3131 + (cbSceneParam._m0[72u].w * _3105)));
    SV_Target.z = _3141 * (_3122 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3107)));
    SV_Target.w = cbInstanceData._m0[_3004].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3004].w;
}


