#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1358;
float _3738;
float _3739;
float _3740;
float _3741;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _361 = _359.x;
    float _373 = dot(vec4(_361, _359.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_361 - _373) * cbMtdParam._m0[24u].y) + _373) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3750 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _398 = (_391 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _399 = (_391 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _400 = (_391 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _417 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _437 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _449 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _463 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_439 - _449) * cbMtdParam._m0[24u].y) + _449) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3761 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _471 = (_464 * ((_417.x * cbMtdParam._m0[13u].x) - _398)) + _398;
    float _472 = (_464 * ((_417.y * cbMtdParam._m0[13u].y) - _399)) + _399;
    float _473 = (_464 * ((_417.z * cbMtdParam._m0[13u].z) - _400)) + _400;
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _272) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _273) + cbTextureTilingScale._m0[20u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _532 = _530.x;
    float _533 = _530.y;
    float _534 = _530.z;
    float _541 = ((_513.x - _532) * _391) + _532;
    float _542 = ((_513.y - _533) * _391) + _533;
    float _543 = ((_513.z - _534) * _391) + _534;
    vec4 _555 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _568 = ((_555.z - _543) * _464) + _543;
    float _571 = ((((_555.x - _541) * _464) + _541) * 2.0) + (-1.0);
    float _572 = ((((_555.y - _542) * _464) + _542) * 2.0) + (-1.0);
    float _573 = dot(vec2(_571, _572), vec2(_571, _572));
    float _3772 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _578 = sqrt(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))));
    vec4 _591 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _611 = _609.x;
    float _612 = 1.0 - _611;
    float _625 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_611 - _612) * cbMtdParam._m0[24u].z) + _612) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3783 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _633 = (_626 * (cbMtdParam._m0[17u].x - _471)) + _471;
    float _634 = (_626 * (cbMtdParam._m0[17u].y - _472)) + _472;
    float _635 = (_626 * (cbMtdParam._m0[17u].z - _473)) + _473;
    vec4 _647 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _661 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _663 = _661.x;
    float _681 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _663) * _391) + _663;
    float _698 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _681) * _464) + _681;
    float _702 = ((_647.x - _698) * cbMtdParam._m0[19u].z) + _698;
    float _704 = _702 - (_702 * _626);
    float _709 = (((_490.z - _568) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _568;
    vec4 _722 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _729 = (_722.x * 2.0) + (-1.0);
    float _730 = (_722.y * 2.0) + (-1.0);
    float _731 = dot(vec2(_729, _730), vec2(_729, _730));
    float _3794 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _739 = (_626 * (_722.z - _709)) + _709;
    float _744 = _571 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_490.x * 2.0) + (-1.0)));
    float _745 = _572 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_490.y * 2.0) + (-1.0)));
    float _757 = (((_729 - _744) + (cbMtdParam._m0[21u].x * _744)) * _626) + _744;
    float _758 = (((_730 - _745) + (cbMtdParam._m0[21u].x * _745)) * _626) + _745;
    float _759 = (_626 * (sqrt(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) - _578)) + _578;
    float _764 = cbMtdParam._m0[22u].x + _591.w;
    float _767 = fma(_759, _239 * NORMAL.x, fma(_758, _246 * TANGENT.x, (_232 * _224) * _757));
    float _770 = fma(_759, _239 * NORMAL.y, fma(_758, _246 * TANGENT.y, (_232 * _225) * _757));
    float _773 = fma(_759, _239 * NORMAL.z, fma(_758, _246 * TANGENT.z, (_232 * _226) * _757));
    float _777 = inversesqrt(dot(vec3(_767, _770, _773), vec3(_767, _770, _773)));
    float _778 = _777 * _767;
    float _779 = _777 * _770;
    float _780 = _777 * _773;
    float _3805 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _781 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _3827 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3838 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3849 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3860 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _786 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _800 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _851 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _841);
    float _852 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _841);
    float _853 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _841);
    float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
    float _858 = _851 * _857;
    float _859 = _852 * _857;
    float _860 = _853 * _857;
    vec4 _865 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _867 = _865.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1039 = sqrt(((_851 * _851) + (_852 * _852)) + (_853 * _853));
        float _1045 = (cbMatDynParam._m0[5u].x * _1039) + cbMatDynParam._m0[5u].y;
        float _3871 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1050 = (cbMatDynParam._m0[5u].z * _1039) + cbMatDynParam._m0[5u].w;
        float _3882 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) - _1046)) + _1046) < ((_867 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _878 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _879 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _897 = fma(_780, cbSceneParam._m0[5u].z, fma(_779, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _778));
    float _900 = fma(_780, cbSceneParam._m0[6u].z, fma(_779, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _778));
    float _903 = fma(_780, cbSceneParam._m0[7u].z, fma(_779, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _778));
    uint _916 = _252 + 9u;
    uint _917 = _916 + uint(cbMatDynParam._m0[0u].w);
    float _923 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_917].x;
    float _924 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * cbInstanceData._m0[_917].y;
    float _925 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * cbInstanceData._m0[_917].z;
    float _3893 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _929 = 1.0 - _786;
    float _930 = _926 * _929;
    float _931 = _927 * _929;
    float _932 = _928 * _929;
    float _937 = (_926 + (-0.039999999105930328369140625)) * _786;
    float _938 = (_927 + (-0.039999999105930328369140625)) * _786;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _786;
    float _940 = _937 + 0.039999999105930328369140625;
    float _942 = _938 + 0.039999999105930328369140625;
    float _943 = _939 + 0.039999999105930328369140625;
    vec4 _952 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _878, cbSceneParam._m0[86u].y * _879));
    float _956 = ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * TEXCOORD_5.w) * _952.x;
    float _957 = dot(vec3(_778, _779, _780), vec3(_858, _859, _860));
    float _960 = _957 * 2.0;
    float _964 = (_960 * _778) - _858;
    float _965 = (_960 * _779) - _859;
    float _966 = (_960 * _780) - _860;
    float _970 = abs(dot(vec3(_858, _859, _860), vec3(_778, _779, _780)));
    float _3926 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _972 = sqrt(_781);
    float _985 = exp2((_972 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_972 * 3.0));
    float _991 = (1.0 - _985) * ((_972 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _992 = _985 * _972;
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1357;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1082 = fma(_1028, cbModelParam._m0[26u].z, fma(_1024, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020));
        float _1086 = fma(_1028, cbModelParam._m0[27u].z, fma(_1024, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020));
        float _1090 = fma(_1028, cbModelParam._m0[28u].z, fma(_1024, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020));
        float _1115 = _1020 + _778;
        float _1116 = _1024 + _779;
        float _1117 = _1028 + _780;
        float _1127 = fma(_1117, cbModelParam._m0[26u].z, fma(_1116, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1115)) - _1082;
        float _1128 = fma(_1117, cbModelParam._m0[27u].z, fma(_1116, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1115)) - _1086;
        float _1129 = fma(_1117, cbModelParam._m0[28u].z, fma(_1116, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1115)) - _1090;
        float _1133 = inversesqrt(dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129)));
        float _1146 = ((_1133 * _1127) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1082 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1133 * _1128) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1086 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1133 * _1129) / cbModelParam._m0[34u].z) + ((((((_1090 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        float _1185 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1151.x + (-0.5));
        float _1187 = _1185 * (_1151.y + (-0.5));
        float _1188 = _1185 * (_1151.z + (-0.5));
        float _1195 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1158.x + (-0.5));
        float _1197 = _1195 * (_1158.y + (-0.5));
        float _1198 = _1195 * (_1158.z + (-0.5));
        float _1205 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1165.x + (-0.5));
        float _1207 = _1205 * (_1165.y + (-0.5));
        float _1208 = _1205 * (_1165.z + (-0.5));
        float _1215 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1172.x + (-0.5));
        float _1217 = _1215 * (_1172.y + (-0.5));
        float _1218 = _1215 * (_1172.z + (-0.5));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = _1186 * 0.5;
        float _1223 = _1196 * 0.5;
        float _1224 = _1206 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1239 = (dot(vec3(_778, _779, _780), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1249 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3974 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1251 + 1.0))) + _1256) * _1219;
        float _1266 = _1187 * 0.5;
        float _1267 = _1197 * 0.5;
        float _1268 = _1207 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_778, _779, _780), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4007 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1293 + 1.0))) + _1298) * _1220;
        float _1308 = _1188 * 0.5;
        float _1309 = _1198 * 0.5;
        float _1310 = _1208 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_778, _779, _780), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4040 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1335 + 1.0))) + _1340) * _1221;
        _1357 = _1188;
        _1359 = _1187;
        _1360 = _1186;
        _1361 = _1198;
        _1362 = _1197;
        _1363 = _1196;
        _1364 = _1208;
        _1365 = _1207;
        _1366 = _1206;
        _1367 = _1221;
        _1368 = _1220;
        _1369 = _1219;
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
    }
    else
    {
        _1357 = _1358;
        _1359 = _1358;
        _1360 = _1358;
        _1361 = _1358;
        _1362 = _1358;
        _1363 = _1358;
        _1364 = _1358;
        _1365 = _1358;
        _1366 = _1358;
        _1367 = _1358;
        _1368 = _1358;
        _1369 = _1358;
        _1370 = 0.0;
        _1371 = 0.0;
        _1372 = 0.0;
    }
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1399 = fma(_1028, cbModelParam._m0[30u].z, fma(_1024, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1020));
        float _1403 = fma(_1028, cbModelParam._m0[31u].z, fma(_1024, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1020));
        float _1407 = fma(_1028, cbModelParam._m0[32u].z, fma(_1024, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1020));
        float _1430 = _1020 + _778;
        float _1431 = _1024 + _779;
        float _1432 = _1028 + _780;
        float _1442 = fma(_1432, cbModelParam._m0[30u].z, fma(_1431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1430)) - _1399;
        float _1443 = fma(_1432, cbModelParam._m0[31u].z, fma(_1431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1430)) - _1403;
        float _1444 = fma(_1432, cbModelParam._m0[32u].z, fma(_1431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1430)) - _1407;
        float _1448 = inversesqrt(dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444)));
        float _1461 = ((_1448 * _1442) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1399 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1448 * _1443) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1403 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1448 * _1444) / cbModelParam._m0[35u].z) + ((((((_1407 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        float _1498 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1465.x + (-0.5));
        float _1500 = _1498 * (_1465.y + (-0.5));
        float _1501 = _1498 * (_1465.z + (-0.5));
        float _1508 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1472.x + (-0.5));
        float _1510 = _1508 * (_1472.y + (-0.5));
        float _1511 = _1508 * (_1472.z + (-0.5));
        float _1518 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1479.x + (-0.5));
        float _1520 = _1518 * (_1479.y + (-0.5));
        float _1521 = _1518 * (_1479.z + (-0.5));
        float _1528 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1486.x + (-0.5));
        float _1530 = _1528 * (_1486.y + (-0.5));
        float _1531 = _1528 * (_1486.z + (-0.5));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = _1499 * 0.5;
        float _1536 = _1509 * 0.5;
        float _1537 = _1519 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_778, _779, _780), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4103 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1562 + 1.0))) + _1567) * _1532;
        float _1577 = _1500 * 0.5;
        float _1578 = _1510 * 0.5;
        float _1579 = _1520 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_778, _779, _780), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4136 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1604 + 1.0))) + _1609) * _1533;
        float _1619 = _1501 * 0.5;
        float _1620 = _1511 * 0.5;
        float _1621 = _1521 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_778, _779, _780), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4169 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1646 + 1.0))) + _1651) * _1534;
        _1668 = _1501;
        _1669 = _1500;
        _1670 = _1499;
        _1671 = _1511;
        _1672 = _1510;
        _1673 = _1509;
        _1674 = _1521;
        _1675 = _1520;
        _1676 = _1519;
        _1677 = _1534;
        _1678 = _1533;
        _1679 = _1532;
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
    }
    else
    {
        _1668 = _1358;
        _1669 = _1358;
        _1670 = _1358;
        _1671 = _1358;
        _1672 = _1358;
        _1673 = _1358;
        _1674 = _1358;
        _1675 = _1358;
        _1676 = _1358;
        _1677 = _1358;
        _1678 = _1358;
        _1679 = _1358;
        _1680 = 0.0;
        _1681 = 0.0;
        _1682 = 0.0;
    }
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1370)) + _1370;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1371)) + _1371;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1372)) + _1372;
    float _1715 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1692));
    float _1736 = _964 * 0.5;
    float _1737 = _965 * 0.5;
    float _1738 = _966 * 0.5;
    float _1739 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1742 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1745 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1779;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1752 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1357, _1361, _1364, _1367));
        float _1756 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1760 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1360, _1363, _1366, _1369));
        float _1767 = dot(vec4(cbModelParam._m0[39u]), vec4(_1736, _1737, _1738, 1.0));
        _1779 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1779 = 1.0;
    }
    float _1790;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1781 = dot(vec4(cbModelParam._m0[40u]), vec4(_1736, _1737, _1738, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1794 = (_1790 * cbModelParam._m0[1u].x) + (_1779 * (1.0 - cbModelParam._m0[1u].x));
    float _1804 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _781);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1804 : min(cbModelParam._m0[25u].z, _1804));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1853 = fma(_1028, cbModelParam._m0[13u].z, fma(_1024, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020)) + cbModelParam._m0[13u].w;
        float _1857 = fma(_1028, cbModelParam._m0[14u].z, fma(_1024, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020)) + cbModelParam._m0[14u].w;
        float _1861 = fma(_1028, cbModelParam._m0[15u].z, fma(_1024, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020)) + cbModelParam._m0[15u].w;
        float _1864 = fma(_966, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964));
        float _1867 = fma(_966, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964));
        float _1870 = fma(_966, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964));
        float _1898;
        if (_1864 > 0.0)
        {
            _1898 = abs((1.0 - _1853) / _1864);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1853 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1898 = frontier_phi_17_15_ladder;
        }
        float _2101;
        if (_1867 > 0.0)
        {
            _2101 = abs((1.0 - _1857) / _1867);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1857 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2101 = frontier_phi_26_22_ladder;
        }
        float _2355;
        if (_1870 > 0.0)
        {
            _2355 = abs((1.0 - _1861) / _1870);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1861 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2355 = frontier_phi_38_33_ladder;
        }
        float _2357 = isnan(_2101) ? _1898 : (isnan(_1898) ? _2101 : min(_1898, _2101));
        float _2358 = isnan(_2355) ? _2357 : (isnan(_2357) ? _2355 : min(_2357, _2355));
        float _2362 = (_2358 * _1864) + _1853;
        float _2363 = (_2358 * _1867) + _1857;
        float _2364 = (_2358 * _1870) + _1861;
        float _2365 = _2358 * 9.9999997473787516355514526367188e-05;
        float _2367 = (-1.0) - _2365;
        float _2369 = _2365 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2364 > _2369) || ((_2364 < _2367) || ((_2363 > _2369) || ((_2363 < _2367) || ((_2362 < _2367) || (_2362 > _2369))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2492 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2364, cbModelParam._m0[9u].z, fma(_2363, cbModelParam._m0[9u].y, _2362 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2364, cbModelParam._m0[10u].z, fma(_2363, cbModelParam._m0[10u].y, _2362 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2364, cbModelParam._m0[11u].z, fma(_2363, cbModelParam._m0[11u].y, _2362 * cbModelParam._m0[11u].x))), _1805);
            frontier_phi_16_38_ladder = _2492.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2492.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2492.x * cbModelParam._m0[1u].y;
        }
        _1886 = frontier_phi_16_38_ladder_2;
        _1888 = frontier_phi_16_38_ladder_1;
        _1890 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_964, _965, _966), _1805);
        _1886 = _1874.x * cbModelParam._m0[1u].y;
        _1888 = _1874.y * cbModelParam._m0[1u].y;
        _1890 = _1874.z * cbModelParam._m0[1u].y;
    }
    float _1894 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _781);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1894 : min(cbModelParam._m0[25u].w, _1894));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1949 = fma(_1028, cbModelParam._m0[21u].z, fma(_1024, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020)) + cbModelParam._m0[21u].w;
        float _1953 = fma(_1028, cbModelParam._m0[22u].z, fma(_1024, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020)) + cbModelParam._m0[22u].w;
        float _1957 = fma(_1028, cbModelParam._m0[23u].z, fma(_1024, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020)) + cbModelParam._m0[23u].w;
        float _1960 = fma(_966, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964));
        float _1963 = fma(_966, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964));
        float _1966 = fma(_966, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964));
        float _2106;
        if (_1960 > 0.0)
        {
            _2106 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2106 = frontier_phi_28_24_ladder;
        }
        float _2382;
        if (_1963 > 0.0)
        {
            _2382 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2382 = frontier_phi_40_35_ladder;
        }
        float _2595;
        if (_1966 > 0.0)
        {
            _2595 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2595 = frontier_phi_49_46_ladder;
        }
        float _2597 = isnan(_2382) ? _2106 : (isnan(_2106) ? _2382 : min(_2106, _2382));
        float _2598 = isnan(_2595) ? _2597 : (isnan(_2597) ? _2595 : min(_2597, _2595));
        float _2602 = (_2598 * _1960) + _1949;
        float _2603 = (_2598 * _1963) + _1953;
        float _2604 = (_2598 * _1966) + _1957;
        float _2605 = _2598 * 9.9999997473787516355514526367188e-05;
        float _2606 = (-1.0) - _2605;
        float _2608 = _2605 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2604 > _2608) || ((_2604 < _2606) || ((_2603 > _2608) || ((_2603 < _2606) || ((_2602 < _2606) || (_2602 > _2608))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2803 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2604, cbModelParam._m0[17u].z, fma(_2603, cbModelParam._m0[17u].y, _2602 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2604, cbModelParam._m0[18u].z, fma(_2603, cbModelParam._m0[18u].y, _2602 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2604, cbModelParam._m0[19u].z, fma(_2603, cbModelParam._m0[19u].y, _2602 * cbModelParam._m0[19u].x))), _1895);
            frontier_phi_25_49_ladder = _2803.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2803.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2803.x * cbModelParam._m0[1u].z;
        }
        _1985 = frontier_phi_25_49_ladder_2;
        _1987 = frontier_phi_25_49_ladder_1;
        _1989 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_964, _965, _966), _1895);
        _1985 = _1969.x * cbModelParam._m0[1u].z;
        _1987 = _1969.y * cbModelParam._m0[1u].z;
        _1989 = _1969.z * cbModelParam._m0[1u].z;
    }
    float _2002 = (((_991 * _940) + _992) * _956) * ((cbModelParam._m0[1u].w * (_1985 - _1886)) + _1886);
    float _2004 = (((_991 * _942) + _992) * _956) * ((cbModelParam._m0[1u].w * (_1987 - _1888)) + _1888);
    float _2006 = (((_991 * _943) + _992) * _956) * ((cbModelParam._m0[1u].w * (_1989 - _1890)) + _1890);
    float _2009 = fma(_2006, cbSceneParam._m0[89u].z, fma(_2004, cbSceneParam._m0[89u].y, _2002 * cbSceneParam._m0[89u].x));
    float _2012 = fma(_2006, cbSceneParam._m0[90u].z, fma(_2004, cbSceneParam._m0[90u].y, _2002 * cbSceneParam._m0[90u].x));
    float _2015 = fma(_2006, cbSceneParam._m0[91u].z, fma(_2004, cbSceneParam._m0[91u].y, _2002 * cbSceneParam._m0[91u].x));
    uvec4 _2025 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2027 = _2025.x * 14u;
    uint _2028 = _2027 + 13u;
    float _2035 = _956 + (-1.0);
    float _2040 = (cbLight._m0[_2028].x * _2035) + 1.0;
    float _2041 = (cbLight._m0[_2028].y * _2035) + 1.0;
    float _2042 = (cbLight._m0[_2028].z * _2035) + 1.0;
    float _2043 = (cbLight._m0[_2028].w * _2035) + 1.0;
    uint _2044 = _2027 + 5u;
    float _2050 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
    uint _2054 = _2027 + 4u;
    float _2060 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
    uint _2064 = _2027 | 1u;
    float _2075 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_778, _779, _780));
    float _2078 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_778, _779, _780));
    float _4305 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _4316 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2083 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * 0.3183098733425140380859375;
    float _2085 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * 0.3183098733425140380859375;
    float _2092 = ((cbLight._m0[_2044].x * _2050) * _2085) + ((cbLight._m0[_2054].x * _2060) * _2083);
    float _2093 = ((_2050 * cbLight._m0[_2044].y) * _2085) + ((_2060 * cbLight._m0[_2054].y) * _2083);
    float _2094 = ((_2050 * cbLight._m0[_2044].z) * _2085) + ((_2060 * cbLight._m0[_2054].z) * _2083);
    uvec4 _2098 = floatBitsToUint(cbLight._m0[_2027 + 12u]);
    bool _2100 = _2098.x == 0u;
    float _2111;
    float _2113;
    float _2115;
    if (_2100)
    {
        _2111 = _2092;
        _2113 = _2093;
        _2115 = _2094;
    }
    else
    {
        uint _2119 = _2027 + 6u;
        float _2135 = (dot(vec3(cbLight._m0[_2027 + 2u].xyz), vec3(_778, _779, _780)) * 0.5) + 0.5;
        float _2136 = _2135 * _2135;
        float _4327 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2137 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2138 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2111 = (((cbLight._m0[_2119].x * 0.3183098733425140380859375) * _2137) * _2138) + _2092;
        _2113 = (((cbLight._m0[_2119].y * 0.3183098733425140380859375) * _2137) * _2138) + _2093;
        _2115 = (((cbLight._m0[_2119].z * 0.3183098733425140380859375) * _2137) * _2138) + _2094;
    }
    bool _2118 = _2098.y == 0u;
    float _2156;
    float _2158;
    float _2160;
    if (_2118)
    {
        _2156 = _2111;
        _2158 = _2113;
        _2160 = _2115;
    }
    else
    {
        uint _2326 = _2027 + 7u;
        float _2342 = (dot(vec3(cbLight._m0[_2027 + 3u].xyz), vec3(_778, _779, _780)) * 0.5) + 0.5;
        float _2343 = _2342 * _2342;
        float _4343 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2344 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2345 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2156 = (((cbLight._m0[_2326].x * 0.3183098733425140380859375) * _2344) * _2345) + _2111;
        _2158 = (((cbLight._m0[_2326].y * 0.3183098733425140380859375) * _2344) * _2345) + _2113;
        _2160 = (((cbLight._m0[_2326].z * 0.3183098733425140380859375) * _2344) * _2345) + _2115;
    }
    uint _2163 = _2027 + 8u;
    float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _781) * 0.949999988079071044921875);
    float _2177 = _2176 * _2176;
    float _2178 = cbLight._m0[_2027].x + _858;
    float _2179 = cbLight._m0[_2027].y + _859;
    float _2180 = cbLight._m0[_2027].z + _860;
    float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
    float _2185 = _2184 * _2178;
    float _2186 = _2184 * _2179;
    float _2187 = _2184 * _2180;
    float _2188 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2027].xyz));
    float _4359 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _4370 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _2192 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2193 = dot(vec3(_778, _779, _780), vec3(_2185, _2186, _2187));
    float _4381 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2185, _2186, _2187));
    float _4392 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2177 * _2177;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2213 = exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0);
    float _2214 = 0.959999978542327880859375 - _937;
    float _2216 = 0.959999978542327880859375 - _938;
    float _2217 = 0.959999978542327880859375 - _939;
    float _2224 = 1.0 - _2177;
    float _2235 = (0.5 / (((_2192 * ((_2191 * _2224) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2224) + _2177) * _2191))) * _2191;
    float _4403 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2237 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    uint _2248 = _2027 + 9u;
    float _2259 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _781) * 0.949999988079071044921875);
    float _2260 = _2259 * _2259;
    float _2261 = cbLight._m0[_2064].x + _858;
    float _2262 = cbLight._m0[_2064].y + _859;
    float _2263 = cbLight._m0[_2064].z + _860;
    float _2267 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
    float _2268 = _2267 * _2261;
    float _2269 = _2267 * _2262;
    float _2270 = _2267 * _2263;
    float _2271 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2064].xyz));
    float _4414 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2275 = dot(vec3(_778, _779, _780), vec3(_2268, _2269, _2270));
    float _4425 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2279 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2268, _2269, _2270));
    float _4436 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2283 = _2260 * _2260;
    float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
    float _2294 = exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0);
    float _2301 = 1.0 - _2260;
    float _2311 = (0.5 / (((_2192 * ((_2274 * _2301) + _2260)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2301) + _2260) * _2274))) * _2274;
    float _4447 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2313 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
    float _2323 = (((((_2294 * _2214) + _940) * cbLight._m0[_2248].x) * _2313) * _2050) + (((((_2213 * _2214) + _940) * cbLight._m0[_2163].x) * _2237) * _2060);
    float _2324 = (((((_2294 * _2216) + _942) * cbLight._m0[_2248].y) * _2313) * _2050) + (((((_2213 * _2216) + _942) * cbLight._m0[_2163].y) * _2237) * _2060);
    float _2325 = (((((_2294 * _2217) + _943) * cbLight._m0[_2248].z) * _2313) * _2050) + (((((_2213 * _2217) + _943) * cbLight._m0[_2163].z) * _2237) * _2060);
    float _2387;
    float _2389;
    float _2391;
    if (_2100)
    {
        _2387 = _2323;
        _2389 = _2324;
        _2391 = _2325;
    }
    else
    {
        uint _2393 = _2027 + 2u;
        uint _2397 = _2027 + 10u;
        float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _781) * 0.949999988079071044921875);
        float _2412 = _2411 * _2411;
        float _2413 = cbLight._m0[_2393].x + _858;
        float _2414 = cbLight._m0[_2393].y + _859;
        float _2415 = cbLight._m0[_2393].z + _860;
        float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
        float _2420 = _2419 * _2413;
        float _2421 = _2419 * _2414;
        float _2422 = _2419 * _2415;
        float _2423 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2393].xyz));
        float _4458 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2427 = dot(vec3(_778, _779, _780), vec3(_2420, _2421, _2422));
        float _4469 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2431 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2420, _2421, _2422));
        float _4480 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2435 = _2412 * _2412;
        float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
        float _2446 = exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0);
        float _2453 = 1.0 - _2412;
        float _2463 = (0.5 / (((_2192 * ((_2426 * _2453) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2453) + _2412) * _2426))) * _2426;
        float _4491 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2465 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
        float _2466 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2387 = (((((_2446 * _2214) + _940) * cbLight._m0[_2397].x) * _2465) * _2466) + _2323;
        _2389 = (((((_2446 * _2216) + _942) * cbLight._m0[_2397].y) * _2465) * _2466) + _2324;
        _2391 = (((((_2446 * _2217) + _943) * cbLight._m0[_2397].z) * _2465) * _2466) + _2325;
    }
    float _2501;
    float _2503;
    float _2505;
    if (_2118)
    {
        _2501 = _2387;
        _2503 = _2389;
        _2505 = _2391;
    }
    else
    {
        uint _2512 = _2027 + 3u;
        uint _2516 = _2027 + 11u;
        float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2512].w)) * _781) * 0.949999988079071044921875);
        float _2531 = _2530 * _2530;
        float _2532 = cbLight._m0[_2512].x + _858;
        float _2533 = cbLight._m0[_2512].y + _859;
        float _2534 = cbLight._m0[_2512].z + _860;
        float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
        float _2539 = _2538 * _2532;
        float _2540 = _2538 * _2533;
        float _2541 = _2538 * _2534;
        float _2542 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2512].xyz));
        float _4507 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2546 = dot(vec3(_778, _779, _780), vec3(_2539, _2540, _2541));
        float _4518 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2550 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_2539, _2540, _2541));
        float _4529 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2554 = _2531 * _2531;
        float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
        float _2565 = exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0);
        float _2572 = 1.0 - _2531;
        float _2582 = (0.5 / (((_2192 * ((_2545 * _2572) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2572) + _2531) * _2545))) * _2545;
        float _4540 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2584 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
        float _2585 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2501 = (((((_2565 * _2214) + _940) * cbLight._m0[_2516].x) * _2584) * _2585) + _2387;
        _2503 = (((((_2565 * _2216) + _942) * cbLight._m0[_2516].y) * _2584) * _2585) + _2389;
        _2505 = (((((_2565 * _2217) + _943) * cbLight._m0[_2516].z) * _2584) * _2585) + _2391;
    }
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    if (_2025.y == 0u)
    {
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2660;
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2660;
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2660;
        uvec4 _2675 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2676 = _2675.x;
        uint _2687 = uint((float(_2675.y) * floor(float(uint(cbSceneParam._m0[85u].y * _879) / _2676))) + floor(float(uint(cbSceneParam._m0[85u].x * _878) / _2676)));
        float _2697 = (log2(_2663 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2698 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        uint _2701 = uint(isnan(14.0) ? _2698 : (isnan(_2698) ? 14.0 : min(_2698, 14.0)));
        uvec4 _2706 = texelFetch(g_lightClusterGridBuffer, int(((_2701 << 2u) + (_2687 << 6u)) >> 2u));
        uint _2707 = _2706.x;
        uint _2708 = _2675.z;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        if (((((1u << ((_2708 >> 4u) & 15u)) + 4294967295u) & _2707) == 0u) || ((_2708 & 240u) == 0u))
        {
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
        }
        else
        {
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            uint _2967 = 0u;
            uint _2976;
            bool _2977;
            for (;;)
            {
                _2976 = texelFetch(g_lightClassification, int((((_2701 << 5u) + (_2687 << 9u)) + (_2967 << 2u)) >> 2u)).x;
                _2977 = _2976 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2977)
                {
                    frontier_phi_66_pred = _2961;
                    frontier_phi_66_pred_1 = _2966;
                    frontier_phi_66_pred_2 = _2965;
                    frontier_phi_66_pred_3 = _2964;
                    frontier_phi_66_pred_4 = _2963;
                    frontier_phi_66_pred_5 = _2962;
                }
                else
                {
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    uint _3112;
                    _3106 = _2961;
                    _3107 = _2962;
                    _3108 = _2963;
                    _3109 = _2964;
                    _3110 = _2965;
                    _3111 = _2966;
                    _3112 = _2976;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    for (;;)
                    {
                        uint _3116 = uint(findLSB(_3112)) + (_2967 << 5u);
                        uint _3113 = (_3112 + 4294967295u) & _3112;
                        uint _3118 = _3116 * 48u;
                        vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 3u)).x));
                        uint _3138 = (_3116 * 48u) + 4u;
                        vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 3u)).x));
                        uint _3157 = (_3116 * 48u) + 8u;
                        vec3 _3168 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x));
                        float _3172 = _3132.x - _2661;
                        float _3173 = _3132.y - _2662;
                        float _3174 = _3132.z - _2663;
                        float _3175 = dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174));
                        float _3178 = inversesqrt(_3175);
                        float _3179 = _3178 * _3172;
                        float _3180 = _3178 * _3173;
                        float _3181 = _3178 * _3174;
                        float _3182 = dot(vec3(_897, _900, _903), vec3(_3179, _3180, _3181));
                        float _3187 = 1.0 - (_3175 * _3132.w);
                        float _4566 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3188 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3189 = sqrt(_3175) * _3151.w;
                        float _3192 = 1.39999997615814208984375 / (_3189 + 1.39999997615814208984375);
                        float _3193 = _3192 * _3192;
                        float _3196 = ((1.0 - _3193) * _3182) + _3193;
                        float _3199 = _3189 * _3189;
                        float _3203 = ((isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))) * _3188) / ((_3199 * 0.699999988079071044921875) + 1.0);
                        float _3207 = (-0.0) - _2661;
                        float _3208 = (-0.0) - _2662;
                        float _3209 = (-0.0) - _2663;
                        float _3213 = inversesqrt(dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209)));
                        float _3214 = _3213 * _3207;
                        float _3215 = _3213 * _3208;
                        float _3216 = _3213 * _3209;
                        float _3224 = exp2(log2(1.0 / ((_3199 * 3.5) + 5.0)) * 0.25);
                        float _3225 = 1.0 - _972;
                        float _3232 = sqrt(1.0 - ((1.0 - (_3225 * _3225)) * (1.0 - (_3224 * _3224))));
                        float _3233 = _3232 * _3232;
                        float _3234 = _3233 * _3233;
                        float _3235 = _3214 + _3179;
                        float _3236 = _3215 + _3180;
                        float _3237 = _3216 + _3181;
                        float _3241 = inversesqrt(dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237)));
                        float _3245 = dot(vec3(_897, _900, _903), vec3(_3214, _3215, _3216));
                        float _4582 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3248 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3249 = dot(vec3(_897, _900, _903), vec3(_3241 * _3235, _3241 * _3236, _3241 * _3237));
                        float _4593 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3252 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                        float _3256 = ((_3252 * _3252) * (_3234 + (-1.0))) + 1.0;
                        float _3257 = _3192 * _3233;
                        float _3258 = _3257 * _3257;
                        float _3261 = ((1.0 - _3258) * _3182) + _3258;
                        float _4604 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3262 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3263 = 1.0 - _3233;
                        float _3273 = (0.5 / (((_3262 * ((_3248 * _3263) + _3233)) + 9.9999999392252902907785028219223e-09) + (((_3262 * _3263) + _3233) * _3248))) * _3262;
                        float _4615 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3284 = (((_3234 * 3.1415927410125732421875) * (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) / ((_3256 * _3256) * ((_3199 * 2.1991131305694580078125) + 3.141590118408203125))) * _3188;
                        _3036 = (_3203 * _3151.x) + _3109;
                        _3037 = (_3203 * _3151.y) + _3110;
                        _3038 = (_3203 * _3151.z) + _3111;
                        _3033 = (_3284 * _3168.x) + _3106;
                        _3034 = (_3284 * _3168.y) + _3107;
                        _3035 = (_3284 * _3168.z) + _3108;
                        if (_3113 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3106 = _3033;
                            _3107 = _3034;
                            _3108 = _3035;
                            _3109 = _3036;
                            _3110 = _3037;
                            _3111 = _3038;
                            _3112 = _3113;
                        }
                    }
                    frontier_phi_66_pred = _3033;
                    frontier_phi_66_pred_1 = _3038;
                    frontier_phi_66_pred_2 = _3037;
                    frontier_phi_66_pred_3 = _3036;
                    frontier_phi_66_pred_4 = _3035;
                    frontier_phi_66_pred_5 = _3034;
                }
                _2809 = frontier_phi_66_pred;
                _2819 = frontier_phi_66_pred_1;
                _2817 = frontier_phi_66_pred_2;
                _2815 = frontier_phi_66_pred_3;
                _2813 = frontier_phi_66_pred_4;
                _2811 = frontier_phi_66_pred_5;
                uint _2968 = _2967 + 1u;
                if (_2968 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2961 = _2809;
                    _2962 = _2811;
                    _2963 = _2813;
                    _2964 = _2815;
                    _2965 = _2817;
                    _2966 = _2819;
                    _2967 = _2968;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
        }
        uvec4 _2822 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2823 = _2822.z;
        uint _2825 = (_2823 >> 8u) & 15u;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        if (((4294967295u << _2825) & _2707) == 0u)
        {
            _2929 = _2808;
            _2931 = _2810;
            _2933 = _2812;
            _2935 = _2814;
            _2937 = _2816;
            _2939 = _2818;
        }
        else
        {
            float _2954 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
            float _2955 = _2954 * _2661;
            float _2956 = _2954 * _2662;
            float _2957 = _2954 * _2663;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2825 < ((_2823 >> 12u) & 15u))
            {
                float _2930;
                float _2932;
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _3089 = _2808;
                float _3090 = _2810;
                float _3091 = _2812;
                float _3092 = _2814;
                float _3093 = _2816;
                float _3094 = _2818;
                uint _3095 = _2825;
                uint _3104;
                bool _3105;
                for (;;)
                {
                    _3104 = texelFetch(g_lightClassification, int((((_2701 << 5u) + (_2687 << 9u)) + (_3095 << 2u)) >> 2u)).x;
                    _3105 = _3104 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3105)
                    {
                        frontier_phi_77_pred = _3094;
                        frontier_phi_77_pred_1 = _3093;
                        frontier_phi_77_pred_2 = _3092;
                        frontier_phi_77_pred_3 = _3091;
                        frontier_phi_77_pred_4 = _3090;
                        frontier_phi_77_pred_5 = _3089;
                    }
                    else
                    {
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3311 = _3089;
                        float _3312 = _3090;
                        float _3313 = _3091;
                        float _3314 = _3092;
                        float _3315 = _3093;
                        float _3316 = _3094;
                        uint _3317 = _3104;
                        uint _3318;
                        vec4 _3343;
                        float _3344;
                        vec4 _3359;
                        vec3 _3371;
                        vec4 _3386;
                        vec4 _3401;
                        float _3447;
                        bool _3448;
                        for (;;)
                        {
                            uint _3328 = ((_3095 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3317));
                            _3318 = (_3317 + 4294967295u) & _3317;
                            uint _3330 = _3328 * 40u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            _3344 = _3343.w;
                            uint _3346 = (_3328 * 40u) + 4u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            uint _3361 = (_3328 * 40u) + 8u;
                            _3371 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x));
                            uint _3373 = (_3328 * 40u) + 16u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3388 = (_3328 * 40u) + 20u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3403 = (_3328 * 40u) + 24u;
                            vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3422 = (_3328 * 40u) + 28u;
                            vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            _3447 = fma(_2663, _3435.z, fma(_2662, _3435.y, _3435.x * _2661)) + _3435.w;
                            _3448 = !((fma(_2663, _3416.z, fma(_2662, _3416.y, _3416.x * _2661)) + _3416.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3448)
                            {
                                float _3475 = _3343.x - _2661;
                                float _3476 = _3343.y - _2662;
                                float _3477 = _3343.z - _2663;
                                float _3478 = dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477));
                                float _3481 = inversesqrt(_3478);
                                float _3482 = _3481 * _3475;
                                float _3483 = _3481 * _3476;
                                float _3484 = _3481 * _3477;
                                float _3488 = 1.0 - (_3478 / (_3344 * _3344));
                                float _4626 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3493 = sqrt(_3478) * _3359.w;
                                float _3495 = 1.39999997615814208984375 / (_3493 + 1.39999997615814208984375);
                                float _3496 = _3495 * _3495;
                                float _3499 = ((1.0 - _3496) * dot(vec3(_3482, _3483, _3484), vec3(_897, _900, _903))) + _3496;
                                float _3502 = _3493 * _3493;
                                float _3506 = (fma(_2663, _3386.z, fma(_2662, _3386.y, _3386.x * _2661)) + _3386.w) / _3447;
                                float _3507 = (fma(_2663, _3401.z, fma(_2662, _3401.y, _3401.x * _2661)) + _3401.w) / _3447;
                                float _3511 = 1.0 - dot(vec2(_3506, _3507), vec2(_3506, _3507));
                                float _4642 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3512 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3513 = _3512 * (((isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0))) * _3489) / ((_3502 * 0.699999988079071044921875) + 1.0));
                                float _3525 = exp2(log2(1.0 / ((_3502 * 3.5) + 5.0)) * 0.25);
                                float _3526 = 1.0 - _972;
                                float _3533 = sqrt(1.0 - ((1.0 - (_3526 * _3526)) * (1.0 - (_3525 * _3525))));
                                float _3534 = _3533 * _3533;
                                float _3535 = _3534 * _3534;
                                float _3536 = _3482 - _2955;
                                float _3537 = _3483 - _2956;
                                float _3538 = _3484 - _2957;
                                float _3542 = inversesqrt(dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538)));
                                float _3546 = dot(vec3(_897, _900, _903), vec3((-0.0) - _2955, (-0.0) - _2956, (-0.0) - _2957));
                                float _4653 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3549 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3550 = dot(vec3(_897, _900, _903), vec3(_3542 * _3536, _3542 * _3537, _3542 * _3538));
                                float _4664 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3553 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3557 = ((_3553 * _3553) * (_3535 + (-1.0))) + 1.0;
                                float _3558 = _3495 * _3534;
                                float _3559 = _3558 * _3558;
                                float _3565 = ((1.0 - _3559) * dot(vec3(_897, _900, _903), vec3(_3482, _3483, _3484))) + _3559;
                                float _4675 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3567 = 1.0 - _3534;
                                float _3577 = (0.5 / (((_3566 * ((_3549 * _3567) + _3534)) + 9.9999999392252902907785028219223e-09) + (((_3566 * _3567) + _3534) * _3549))) * _3566;
                                float _4686 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3587 = (_3512 * _3489) * (((_3535 * 3.1415927410125732421875) * (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) / ((_3557 * _3557) * ((_3502 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3513 * _3359.y;
                                frontier_phi_83_pred_1 = _3513 * _3359.x;
                                frontier_phi_83_pred_2 = _3587 * _3371.z;
                                frontier_phi_83_pred_3 = _3587 * _3371.y;
                                frontier_phi_83_pred_4 = _3587 * _3371.x;
                                frontier_phi_83_pred_5 = _3513 * _3359.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3595 = frontier_phi_83_pred;
                            _3594 = frontier_phi_83_pred_1;
                            _3593 = frontier_phi_83_pred_2;
                            _3592 = frontier_phi_83_pred_3;
                            _3591 = frontier_phi_83_pred_4;
                            _3596 = frontier_phi_83_pred_5;
                            _3301 = _3594 + _3314;
                            _3302 = _3595 + _3315;
                            _3303 = _3596 + _3316;
                            _3298 = _3591 + _3311;
                            _3299 = _3592 + _3312;
                            _3300 = _3593 + _3313;
                            if (_3318 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3318;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3303;
                        frontier_phi_77_pred_1 = _3302;
                        frontier_phi_77_pred_2 = _3301;
                        frontier_phi_77_pred_3 = _3300;
                        frontier_phi_77_pred_4 = _3299;
                        frontier_phi_77_pred_5 = _3298;
                    }
                    _2940 = frontier_phi_77_pred;
                    _2938 = frontier_phi_77_pred_1;
                    _2936 = frontier_phi_77_pred_2;
                    _2934 = frontier_phi_77_pred_3;
                    _2932 = frontier_phi_77_pred_4;
                    _2930 = frontier_phi_77_pred_5;
                    uint _3096 = _3095 + 1u;
                    if (_3096 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3089 = _2930;
                        _3090 = _2932;
                        _3091 = _2934;
                        _3092 = _2936;
                        _3093 = _2938;
                        _3094 = _2940;
                        _3095 = _3096;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2934;
                frontier_phi_58_59_ladder_1 = _2940;
                frontier_phi_58_59_ladder_2 = _2938;
                frontier_phi_58_59_ladder_3 = _2936;
                frontier_phi_58_59_ladder_4 = _2932;
                frontier_phi_58_59_ladder_5 = _2930;
            }
            else
            {
                frontier_phi_58_59_ladder = _2812;
                frontier_phi_58_59_ladder_1 = _2818;
                frontier_phi_58_59_ladder_2 = _2816;
                frontier_phi_58_59_ladder_3 = _2814;
                frontier_phi_58_59_ladder_4 = _2810;
                frontier_phi_58_59_ladder_5 = _2808;
            }
            _2929 = frontier_phi_58_59_ladder_5;
            _2931 = frontier_phi_58_59_ladder_4;
            _2933 = frontier_phi_58_59_ladder;
            _2935 = frontier_phi_58_59_ladder_3;
            _2937 = frontier_phi_58_59_ladder_2;
            _2939 = frontier_phi_58_59_ladder_1;
        }
        float _2944 = isnan(1.0) ? _956 : (isnan(_956) ? 1.0 : min(_956, 1.0));
        _2720 = (_2944 * _2935) + _2156;
        _2722 = (_2944 * _2937) + _2158;
        _2724 = (_2944 * _2939) + _2160;
        _2726 = ((_2929 * _940) * _2944) + _2501;
        _2728 = ((_2931 * _942) * _2944) + _2503;
        _2730 = ((_2933 * _943) * _2944) + _2505;
    }
    else
    {
        _2720 = _2156;
        _2722 = _2158;
        _2724 = _2160;
        _2726 = _2501;
        _2728 = _2503;
        _2730 = _2505;
    }
    float _4702 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _4713 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4724 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _2747 = ((isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2720 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _956))) + ((_2726 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1794)) * cbPerFrame._m0[3u].x);
    float _2748 = ((isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2722 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _956))) + ((_2728 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1794)) * cbPerFrame._m0[3u].x);
    float _2749 = ((isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2724 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _956))) + ((_2730 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1794)) * cbPerFrame._m0[3u].x);
    uint _2750 = _252 + 6u;
    float _2758 = _878 / cbSceneParam._m0[86u].x;
    float _2759 = _879 / cbSceneParam._m0[86u].y;
    vec4 _2773 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2758, _2759, (log2((isnan(cbSceneParam._m0[77u].w) ? _800 : (isnan(_800) ? cbSceneParam._m0[77u].w : min(_800, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2775 = _2773.x;
    float _2776 = _2773.y;
    float _2777 = _2773.z;
    float _2778 = _2773.w;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    if (_800 > cbSceneParam._m0[78u].w)
    {
        float _2833 = isnan(_800) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _800 : min(cbSceneParam._m0[80u].w, _800));
        float _2834 = _2833 / _800;
        float _2845 = _2834 * _851;
        float _2846 = _852 * _2834;
        float _2847 = (-0.0) - _2846;
        float _2849 = _2834 * _853;
        float _2851 = (cbSceneParam._m0[77u].w * _2847) / _2833;
        float _2852 = _2851 + cbSceneParam._m0[79u].w;
        float _2853 = cbSceneParam._m0[79u].w - _2846;
        float _2859 = sqrt(((_2845 * _2845) + (_2846 * _2846)) + (_2849 * _2849));
        float _2862 = (1.0 - (cbSceneParam._m0[77u].w / _2833)) * _2859;
        float _2867 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2869 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3046;
        if (abs((_2847 - _2851) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3046 = ((((_2852 > 0.0) ? exp2(_2867 * _2852) : (2.0 - exp2(_2869 * _2852))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2862;
        }
        else
        {
            float _2990 = 1.0 / cbSceneParam._m0[80u].x;
            float _2991 = isnan(_2853) ? _2852 : (isnan(_2852) ? _2853 : max(_2852, _2853));
            float _2992 = isnan(_2853) ? _2852 : (isnan(_2852) ? _2853 : min(_2852, _2853));
            float _3001 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : min(_2991, 0.0));
            float _3002 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : min(_2992, 0.0));
            _3046 = ((abs(_2859 / _2847) * cbSceneParam._m0[80u].y) * ((((_3001 - _3002) * 2.0) - ((exp2(_2867 * (isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0)))) - exp2(_2867 * (isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))))) * _2990)) - ((exp2(_2869 * _3001) - exp2(_2869 * _3002)) * _2990))) + (_2862 * cbSceneParam._m0[80u].z);
        }
        vec4 _3048 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2758, _2759, 1.0), 0.0);
        float _3057 = exp2((_3046 * (-1.44269502162933349609375)) * (1.0 - _3048.w));
        float _3058 = log2(_3057);
        float _3074 = log2(_2778);
        _2871 = (exp2(_3074 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].x)) * _3048.x) / cbSceneParam._m0[78u].x)) + _2775;
        _2873 = (exp2(_3074 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].y)) * _3048.y) / cbSceneParam._m0[78u].y)) + _2776;
        _2875 = (exp2(_3074 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].z)) * _3048.z) / cbSceneParam._m0[78u].z)) + _2777;
        _2877 = _3057 * _2778;
    }
    else
    {
        _2871 = _2775;
        _2873 = _2776;
        _2875 = _2777;
        _2877 = _2778;
    }
    bool _3084;
    vec4 _2887;
    vec4 _2909;
    float _2911;
    float _2915;
    float _2916;
    float _2917;
    float _2918;
    bool _2928;
    for (;;)
    {
        _2887 = cbMatDynParam._m0[0u];
        float _2889 = roundEven(_2887.y);
        bool _2890 = _2889 == 3.0;
        float _2891 = log2(_2877);
        float _2898 = exp2(_2891 * cbSceneParam._m0[78u].x) * _2747;
        float _2899 = exp2(_2891 * cbSceneParam._m0[78u].y) * _2748;
        float _2900 = exp2(_2891 * cbSceneParam._m0[78u].z) * _2749;
        float _2907 = _867 + (-0.5);
        _2909 = cbMtdParam._m0[1u];
        _2911 = _2909.y * _2907;
        float _2914 = (_2889 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2915 = _2914 * (_2890 ? _2898 : (_2898 + (cbSceneParam._m0[72u].w * _2871)));
        _2916 = _2914 * (_2890 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2873)));
        _2917 = _2914 * (_2890 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2875)));
        _2918 = _2907 * 0.999000012874603271484375;
        _2928 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2928)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _2918) < 0.5)
            {
                _3084 = true;
                break;
            }
        }
        uint _3025 = _916 + uint(_2887.w);
        if ((cbInstanceData._m0[_3025].w < 1.0) && ((cbInstanceData._m0[_3025].w + _2918) < 0.5))
        {
            _3084 = true;
            break;
        }
        if ((_2911 + 1.0) < _2909.x)
        {
            _3084 = true;
            break;
        }
        _3084 = false;
        break;
    }
    float _3289;
    if (_3084)
    {
        discard_state = true;
        _3289 = 0.0;
    }
    else
    {
        _3289 = cbInstanceData._m0[_2750].w;
    }
    SV_Target.x = _2915;
    SV_Target.y = _2916;
    SV_Target.z = _2917;
    SV_Target.w = _3289;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2750].w;
    discard_exit();
}


