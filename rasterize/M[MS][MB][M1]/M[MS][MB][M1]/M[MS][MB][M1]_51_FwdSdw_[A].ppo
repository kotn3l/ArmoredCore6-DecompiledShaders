#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1295;
float _3957;
float _3958;
float _3959;
float _3960;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _235 = _234 * _226;
    float _236 = _234 * _227;
    float _237 = _234 * _228;
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = _248 * TANGENT.x;
    float _250 = _248 * TANGENT.y;
    float _251 = _248 * TANGENT.z;
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3969 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3980 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3991 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _334 = _329.x * cbMtdParam._m0[9u].x;
    float _335 = _329.y * cbMtdParam._m0[9u].y;
    float _336 = _329.z * cbMtdParam._m0[9u].z;
    float _340 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _334;
    float _343 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _335;
    float _346 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _336;
    float _353 = ((_334 - _340) * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) + _340;
    float _354 = ((_335 - _343) * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) + _343;
    float _355 = ((_336 - _346) * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) + _346;
    vec4 _374 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _292) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _293) + cbTextureTilingScale._m0[14u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _424 = _420.z;
    float _428 = (_420.x * 2.0) + (-1.0);
    float _429 = (_420.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_428, _429), vec2(_428, _429));
    float _4002 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))));
    float _440 = _428 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_394.x * 2.0) + (-1.0)));
    float _441 = _429 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_394.y * 2.0) + (-1.0)));
    float _444 = fma(_435, _242, fma(_441, _249, _440 * _235));
    float _447 = fma(_435, _243, fma(_441, _250, _440 * _236));
    float _450 = fma(_435, _244, fma(_441, _251, _440 * _237));
    float _454 = inversesqrt(dot(vec3(_444, _447, _450), vec3(_444, _447, _450)));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _492 = _490.x;
    float _493 = 1.0 - _492;
    float _502 = (cbMtdParam._m0[19u].x + dot(vec4(_454 * _444, _454 * _447, _454 * _450, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_492 - _493) * cbMtdParam._m0[24u].z) + _493) * cbMtdParam._m0[21u].z);
    float _4013 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _505 = (-0.0) - cbMtdParam._m0[24u].x;
    float _507 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _508 = isnan(1.0) ? _507 : (isnan(_507) ? 1.0 : min(_507, 1.0));
    float _515 = _503 - ((_503 * TEXCOORD_8.x) * _508);
    float _516 = _503 - ((_503 * TEXCOORD_8.y) * _508);
    float _517 = _503 - ((_503 * TEXCOORD_8.z) * _508);
    float _524 = (_515 * ((_374.x * cbMtdParam._m0[18u].x) - _353)) + _353;
    float _525 = (_516 * ((_374.y * cbMtdParam._m0[18u].y) - _354)) + _354;
    float _526 = (_517 * ((_374.z * cbMtdParam._m0[18u].z) - _355)) + _355;
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _540 = _538.x;
    float _541 = 1.0 - _540;
    float _569 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_540 - _541) * cbMtdParam._m0[24u].w) + _541) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4034 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _578 = ((((cbMtdParam._m0[10u].x - _524) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _570) + _524;
    float _579 = ((((cbMtdParam._m0[10u].y - _525) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _570) + _525;
    float _580 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _526)) * _570) + _526;
    vec4 _593 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _595 = _593.x;
    float _597 = _595 - (_595 * _515);
    float _599 = _597 - (_597 * _570);
    float _604 = (((_394.z - _424) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _424;
    vec4 _618 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _625 = (_618.x * 2.0) + (-1.0);
    float _626 = (_618.y * 2.0) + (-1.0);
    float _627 = dot(vec2(_625, _626), vec2(_625, _626));
    float _4045 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _635 = ((_618.z - _604) * _515) + _604;
    float _638 = ((cbMtdParam._m0[23u].y - _635) * _570) + _635;
    vec4 _657 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _663 = (_657.x * 2.0) + (-1.0);
    float _664 = (_657.y * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _4056 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _680 = ((sqrt(1.0 - (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) - _435) * _517) + _435;
    float _683 = (((_625 - _440) * _515) + _440) + (cbMtdParam._m0[21u].x * _440);
    float _684 = (((_626 - _441) * _516) + _441) + (cbMtdParam._m0[21u].x * _441);
    float _695 = (((_663 - _683) + (_683 * cbMtdParam._m0[22u].z)) * _570) + _683;
    float _696 = (((_664 - _684) + (_684 * cbMtdParam._m0[22u].z)) * _570) + _684;
    float _697 = (_570 * (sqrt(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) - _680)) + _680;
    float _699 = cbMtdParam._m0[22u].x + _420.w;
    float _702 = fma(_697, _242, fma(_696, _249, _695 * _235));
    float _705 = fma(_697, _243, fma(_696, _250, _695 * _236));
    float _708 = fma(_697, _244, fma(_696, _251, _695 * _237));
    float _712 = inversesqrt(dot(vec3(_702, _705, _708), vec3(_702, _705, _708)));
    float _713 = _712 * _702;
    float _714 = _712 * _705;
    float _715 = _712 * _708;
    float _4067 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _716 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _4089 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _4100 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _4111 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _4122 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _721 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _735 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _785 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _775);
    float _786 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _775);
    float _787 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _775);
    float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
    float _792 = _785 * _791;
    float _793 = _786 * _791;
    float _794 = _787 * _791;
    vec4 _799 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _801 = _799.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _976 = sqrt(((_785 * _785) + (_786 * _786)) + (_787 * _787));
        float _982 = (cbMatDynParam._m0[5u].x * _976) + cbMatDynParam._m0[5u].y;
        float _4133 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _987 = (cbMatDynParam._m0[5u].z * _976) + cbMatDynParam._m0[5u].w;
        float _4144 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) - _983)) + _983) < ((_801 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _813 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _814 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _834 = fma(_715, cbSceneParam._m0[5u].z, fma(_714, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _713));
    float _837 = fma(_715, cbSceneParam._m0[6u].z, fma(_714, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _713));
    float _840 = fma(_715, cbSceneParam._m0[7u].z, fma(_714, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _713));
    uint _853 = _273 + 9u;
    uint _854 = _853 + uint(cbMatDynParam._m0[0u].w);
    float _860 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) * cbInstanceData._m0[_854].x;
    float _861 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * cbInstanceData._m0[_854].y;
    float _862 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * cbInstanceData._m0[_854].z;
    float _4155 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _4177 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _866 = 1.0 - _721;
    float _867 = _863 * _866;
    float _868 = _864 * _866;
    float _869 = _865 * _866;
    float _874 = (_863 + (-0.039999999105930328369140625)) * _721;
    float _875 = (_864 + (-0.039999999105930328369140625)) * _721;
    float _876 = (_865 + (-0.039999999105930328369140625)) * _721;
    float _877 = _874 + 0.039999999105930328369140625;
    float _879 = _875 + 0.039999999105930328369140625;
    float _880 = _876 + 0.039999999105930328369140625;
    vec4 _889 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _813, cbSceneParam._m0[86u].y * _814));
    float _893 = ((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * TEXCOORD_5.w) * _889.x;
    float _894 = dot(vec3(_713, _714, _715), vec3(_792, _793, _794));
    float _897 = _894 * 2.0;
    float _901 = (_897 * _713) - _792;
    float _902 = (_897 * _714) - _793;
    float _903 = (_897 * _715) - _794;
    float _907 = abs(dot(vec3(_792, _793, _794), vec3(_713, _714, _715)));
    float _4188 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _909 = sqrt(_716);
    float _922 = exp2((_909 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_909 * 3.0));
    float _928 = (1.0 - _922) * ((_909 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _929 = _922 * _909;
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1294;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1019 = fma(_965, cbModelParam._m0[26u].z, fma(_961, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _957));
        float _1023 = fma(_965, cbModelParam._m0[27u].z, fma(_961, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _957));
        float _1027 = fma(_965, cbModelParam._m0[28u].z, fma(_961, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _957));
        float _1052 = _957 + _713;
        float _1053 = _961 + _714;
        float _1054 = _965 + _715;
        float _1064 = fma(_1054, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1052)) - _1019;
        float _1065 = fma(_1054, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1052)) - _1023;
        float _1066 = fma(_1054, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1052)) - _1027;
        float _1070 = inversesqrt(dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066)));
        float _1083 = ((_1070 * _1064) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1019 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1070 * _1065) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1023 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1070 * _1066) / cbModelParam._m0[34u].z) + ((((((_1027 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        float _1122 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1088.x + (-0.5));
        float _1124 = _1122 * (_1088.y + (-0.5));
        float _1125 = _1122 * (_1088.z + (-0.5));
        float _1132 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1095.x + (-0.5));
        float _1134 = _1132 * (_1095.y + (-0.5));
        float _1135 = _1132 * (_1095.z + (-0.5));
        float _1142 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1102.x + (-0.5));
        float _1144 = _1142 * (_1102.y + (-0.5));
        float _1145 = _1142 * (_1102.z + (-0.5));
        float _1152 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1109.x + (-0.5));
        float _1154 = _1152 * (_1109.y + (-0.5));
        float _1155 = _1152 * (_1109.z + (-0.5));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = _1123 * 0.5;
        float _1160 = _1133 * 0.5;
        float _1161 = _1143 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1176 = (dot(vec3(_713, _714, _715), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1186 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _4236 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1188 + 1.0))) + _1193) * _1156;
        float _1203 = _1124 * 0.5;
        float _1204 = _1134 * 0.5;
        float _1205 = _1144 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_713, _714, _715), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _4269 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1230 + 1.0))) + _1235) * _1157;
        float _1245 = _1125 * 0.5;
        float _1246 = _1135 * 0.5;
        float _1247 = _1145 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_713, _714, _715), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4302 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1272 + 1.0))) + _1277) * _1158;
        _1294 = _1125;
        _1296 = _1124;
        _1297 = _1123;
        _1298 = _1135;
        _1299 = _1134;
        _1300 = _1133;
        _1301 = _1145;
        _1302 = _1144;
        _1303 = _1143;
        _1304 = _1158;
        _1305 = _1157;
        _1306 = _1156;
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
    }
    else
    {
        _1294 = _1295;
        _1296 = _1295;
        _1297 = _1295;
        _1298 = _1295;
        _1299 = _1295;
        _1300 = _1295;
        _1301 = _1295;
        _1302 = _1295;
        _1303 = _1295;
        _1304 = _1295;
        _1305 = _1295;
        _1306 = _1295;
        _1307 = 0.0;
        _1308 = 0.0;
        _1309 = 0.0;
    }
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1337 = fma(_965, cbModelParam._m0[30u].z, fma(_961, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _957));
        float _1341 = fma(_965, cbModelParam._m0[31u].z, fma(_961, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _957));
        float _1345 = fma(_965, cbModelParam._m0[32u].z, fma(_961, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _957));
        float _1368 = _957 + _713;
        float _1369 = _961 + _714;
        float _1370 = _965 + _715;
        float _1380 = fma(_1370, cbModelParam._m0[30u].z, fma(_1369, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1368)) - _1337;
        float _1381 = fma(_1370, cbModelParam._m0[31u].z, fma(_1369, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1368)) - _1341;
        float _1382 = fma(_1370, cbModelParam._m0[32u].z, fma(_1369, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1368)) - _1345;
        float _1386 = inversesqrt(dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382)));
        float _1399 = ((_1386 * _1380) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1337 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1386 * _1381) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1341 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1386 * _1382) / cbModelParam._m0[35u].z) + ((((((_1345 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        float _1436 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1403.x + (-0.5));
        float _1438 = _1436 * (_1403.y + (-0.5));
        float _1439 = _1436 * (_1403.z + (-0.5));
        float _1446 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1410.x + (-0.5));
        float _1448 = _1446 * (_1410.y + (-0.5));
        float _1449 = _1446 * (_1410.z + (-0.5));
        float _1456 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1417.x + (-0.5));
        float _1458 = _1456 * (_1417.y + (-0.5));
        float _1459 = _1456 * (_1417.z + (-0.5));
        float _1466 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1424.x + (-0.5));
        float _1468 = _1466 * (_1424.y + (-0.5));
        float _1469 = _1466 * (_1424.z + (-0.5));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = _1437 * 0.5;
        float _1474 = _1447 * 0.5;
        float _1475 = _1457 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_713, _714, _715), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4365 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1500 + 1.0))) + _1505) * _1470;
        float _1515 = _1438 * 0.5;
        float _1516 = _1448 * 0.5;
        float _1517 = _1458 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_713, _714, _715), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4398 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1542 + 1.0))) + _1547) * _1471;
        float _1557 = _1439 * 0.5;
        float _1558 = _1449 * 0.5;
        float _1559 = _1459 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_713, _714, _715), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4431 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1584 + 1.0))) + _1589) * _1472;
        _1606 = _1439;
        _1607 = _1438;
        _1608 = _1437;
        _1609 = _1449;
        _1610 = _1448;
        _1611 = _1447;
        _1612 = _1459;
        _1613 = _1458;
        _1614 = _1457;
        _1615 = _1472;
        _1616 = _1471;
        _1617 = _1470;
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    }
    else
    {
        _1606 = _1295;
        _1607 = _1295;
        _1608 = _1295;
        _1609 = _1295;
        _1610 = _1295;
        _1611 = _1295;
        _1612 = _1295;
        _1613 = _1295;
        _1614 = _1295;
        _1615 = _1295;
        _1616 = _1295;
        _1617 = _1295;
        _1618 = 0.0;
        _1619 = 0.0;
        _1620 = 0.0;
    }
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1307)) + _1307;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1308)) + _1308;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1309)) + _1309;
    float _1653 = fma(_1632, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1630 * cbSceneParam._m0[89u].x));
    float _1656 = fma(_1632, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1630 * cbSceneParam._m0[90u].x));
    float _1659 = fma(_1632, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1630));
    float _1674 = _901 * 0.5;
    float _1675 = _902 * 0.5;
    float _1676 = _903 * 0.5;
    float _1677 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1680 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1683 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1717;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1690 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1294, _1298, _1301, _1304));
        float _1694 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1296, _1299, _1302, _1305));
        float _1698 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1297, _1300, _1303, _1306));
        float _1705 = dot(vec4(cbModelParam._m0[39u]), vec4(_1674, _1675, _1676, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1705) ? 0.0 : (isnan(0.0) ? _1705 : max(0.0, _1705))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1728;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1719 = dot(vec4(cbModelParam._m0[40u]), vec4(_1674, _1675, _1676, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1732 = (_1728 * cbModelParam._m0[1u].x) + (_1717 * (1.0 - cbModelParam._m0[1u].x));
    float _1742 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _716);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1742 : min(cbModelParam._m0[25u].z, _1742));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1790 = fma(_965, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _957)) + cbModelParam._m0[13u].w;
        float _1794 = fma(_965, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _957)) + cbModelParam._m0[14u].w;
        float _1798 = fma(_965, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _957)) + cbModelParam._m0[15u].w;
        float _1801 = fma(_903, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901));
        float _1804 = fma(_903, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901));
        float _1807 = fma(_903, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901));
        float _1835;
        if (_1801 > 0.0)
        {
            _1835 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1835 = frontier_phi_17_15_ladder;
        }
        float _2006;
        if (_1804 > 0.0)
        {
            _2006 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2006 = frontier_phi_26_22_ladder;
        }
        float _2302;
        if (_1807 > 0.0)
        {
            _2302 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2302 = frontier_phi_38_33_ladder;
        }
        float _2304 = isnan(_2006) ? _1835 : (isnan(_1835) ? _2006 : min(_1835, _2006));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1801) + _1790;
        float _2310 = (_2305 * _1804) + _1794;
        float _2311 = (_2305 * _1807) + _1798;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2314 = (-1.0) - _2312;
        float _2316 = _2312 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2311 > _2316) || ((_2311 < _2314) || ((_2310 > _2316) || ((_2310 < _2314) || ((_2309 < _2314) || (_2309 > _2316))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2456 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2311, cbModelParam._m0[9u].z, fma(_2310, cbModelParam._m0[9u].y, _2309 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2311, cbModelParam._m0[10u].z, fma(_2310, cbModelParam._m0[10u].y, _2309 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2311, cbModelParam._m0[11u].z, fma(_2310, cbModelParam._m0[11u].y, _2309 * cbModelParam._m0[11u].x))), _1743);
            frontier_phi_16_38_ladder = _2456.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2456.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2456.x * cbModelParam._m0[1u].y;
        }
        _1823 = frontier_phi_16_38_ladder_2;
        _1825 = frontier_phi_16_38_ladder_1;
        _1827 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_901, _902, _903), _1743);
        _1823 = _1811.x * cbModelParam._m0[1u].y;
        _1825 = _1811.y * cbModelParam._m0[1u].y;
        _1827 = _1811.z * cbModelParam._m0[1u].y;
    }
    float _1831 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _716);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1831 : min(cbModelParam._m0[25u].w, _1831));
    float _1921;
    float _1923;
    float _1925;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1885 = fma(_965, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _957)) + cbModelParam._m0[21u].w;
        float _1889 = fma(_965, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _957)) + cbModelParam._m0[22u].w;
        float _1893 = fma(_965, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _957)) + cbModelParam._m0[23u].w;
        float _1896 = fma(_903, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901));
        float _1899 = fma(_903, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901));
        float _1902 = fma(_903, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901));
        float _2011;
        if (_1896 > 0.0)
        {
            _2011 = abs((1.0 - _1885) / _1896);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1885 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2011 = frontier_phi_28_24_ladder;
        }
        float _2329;
        if (_1899 > 0.0)
        {
            _2329 = abs((1.0 - _1889) / _1899);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1889 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2329 = frontier_phi_40_35_ladder;
        }
        float _2667;
        if (_1902 > 0.0)
        {
            _2667 = abs((1.0 - _1893) / _1902);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1893 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2667 = frontier_phi_50_47_ladder;
        }
        float _2669 = isnan(_2329) ? _2011 : (isnan(_2011) ? _2329 : min(_2011, _2329));
        float _2670 = isnan(_2667) ? _2669 : (isnan(_2669) ? _2667 : min(_2669, _2667));
        float _2674 = (_2670 * _1896) + _1885;
        float _2675 = (_2670 * _1899) + _1889;
        float _2676 = (_2670 * _1902) + _1893;
        float _2677 = _2670 * 9.9999997473787516355514526367188e-05;
        float _2678 = (-1.0) - _2677;
        float _2680 = _2677 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2676 > _2680) || ((_2676 < _2678) || ((_2675 > _2680) || ((_2675 < _2678) || ((_2674 < _2678) || (_2674 > _2680))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2798 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2676, cbModelParam._m0[17u].z, fma(_2675, cbModelParam._m0[17u].y, _2674 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2676, cbModelParam._m0[18u].z, fma(_2675, cbModelParam._m0[18u].y, _2674 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2676, cbModelParam._m0[19u].z, fma(_2675, cbModelParam._m0[19u].y, _2674 * cbModelParam._m0[19u].x))), _1832);
            frontier_phi_25_50_ladder = _2798.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2798.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2798.x * cbModelParam._m0[1u].z;
        }
        _1921 = frontier_phi_25_50_ladder_2;
        _1923 = frontier_phi_25_50_ladder_1;
        _1925 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1905 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_901, _902, _903), _1832);
        _1921 = _1905.x * cbModelParam._m0[1u].z;
        _1923 = _1905.y * cbModelParam._m0[1u].z;
        _1925 = _1905.z * cbModelParam._m0[1u].z;
    }
    float _1938 = (((_928 * _877) + _929) * _893) * ((cbModelParam._m0[1u].w * (_1921 - _1823)) + _1823);
    float _1940 = (((_928 * _879) + _929) * _893) * ((cbModelParam._m0[1u].w * (_1923 - _1825)) + _1825);
    float _1942 = (((_928 * _880) + _929) * _893) * ((cbModelParam._m0[1u].w * (_1925 - _1827)) + _1827);
    float _1945 = fma(_1942, cbSceneParam._m0[89u].z, fma(_1940, cbSceneParam._m0[89u].y, _1938 * cbSceneParam._m0[89u].x));
    float _1948 = fma(_1942, cbSceneParam._m0[90u].z, fma(_1940, cbSceneParam._m0[90u].y, _1938 * cbSceneParam._m0[90u].x));
    float _1951 = fma(_1942, cbSceneParam._m0[91u].z, fma(_1940, cbSceneParam._m0[91u].y, _1938 * cbSceneParam._m0[91u].x));
    float _1985 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1989 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1993 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1997 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1998 = _1985 / _1997;
    float _1999 = _1989 / _1997;
    float _2000 = _1993 / _1997;
    float _2147;
    float _2148;
    float _2149;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2027 = ((uint(_2000 > cbSceneParam._m0[59u].y) + uint(_2000 > cbSceneParam._m0[59u].x)) + uint(_2000 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2028 = _2027 + 43u;
        uint _2036 = _2027 + 44u;
        uint _2044 = _2027 + 45u;
        uint _2052 = _2027 + 46u;
        float _2063 = fma(_1997, cbSceneParam._m0[_2028].w, fma(_1993, cbSceneParam._m0[_2028].z, fma(_1989, cbSceneParam._m0[_2028].y, _1985 * cbSceneParam._m0[_2028].x)));
        float _2067 = fma(_1997, cbSceneParam._m0[_2036].w, fma(_1993, cbSceneParam._m0[_2036].z, fma(_1989, cbSceneParam._m0[_2036].y, _1985 * cbSceneParam._m0[_2036].x)));
        float _2075 = fma(_1997, cbSceneParam._m0[_2052].w, fma(_1993, cbSceneParam._m0[_2052].z, fma(_1989, cbSceneParam._m0[_2052].y, _1985 * cbSceneParam._m0[_2052].x)));
        float _2080 = cbSceneParam._m0[33u].z * _2075;
        float _2082 = cbSceneParam._m0[33u].w * _2075;
        float _2085 = fma(_1997, cbSceneParam._m0[_2044].w, fma(_1993, cbSceneParam._m0[_2044].z, fma(_1989, cbSceneParam._m0[_2044].y, _1985 * cbSceneParam._m0[_2044].x))) / _2075;
        float _2133 = (cbSceneParam._m0[33u].x - sqrt(((_1999 * _1999) + (_1998 * _1998)) + (_2000 * _2000))) * cbSceneParam._m0[33u].y;
        float _4557 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2140 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2080 + _2063) / _2075, (_2082 + _2067) / _2075), _2085), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2082 + _2063) / _2075, (_2067 - _2080) / _2075), _2085), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2063 - _2080) / _2075, (_2067 - _2082) / _2075), _2085), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2063 - _2082) / _2075, (_2080 + _2067) / _2075), _2085), 0.0)).x), vec4(0.25)));
        _2147 = 1.0 - (_2140 * cbSceneParam._m0[34u].x);
        _2148 = 1.0 - (_2140 * cbSceneParam._m0[34u].y);
        _2149 = 1.0 - (_2140 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2147 = 1.0;
        _2148 = 1.0;
        _2149 = 1.0;
    }
    float _2213;
    float _2215;
    float _2217;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2201 = fma(_1997, cbSceneParam._m0[63u].w, fma(_1993, cbSceneParam._m0[63u].z, fma(_1989, cbSceneParam._m0[63u].y, _1985 * cbSceneParam._m0[63u].x)));
        float _2202 = fma(_1997, cbSceneParam._m0[60u].w, fma(_1993, cbSceneParam._m0[60u].z, fma(_1989, cbSceneParam._m0[60u].y, _1985 * cbSceneParam._m0[60u].x))) / _2201;
        float _2203 = fma(_1997, cbSceneParam._m0[61u].w, fma(_1993, cbSceneParam._m0[61u].z, fma(_1989, cbSceneParam._m0[61u].y, _1985 * cbSceneParam._m0[61u].x))) / _2201;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2202 >= cbSceneParam._m0[64u].x) && (_2203 >= cbSceneParam._m0[64u].y)) && (_2202 <= cbSceneParam._m0[64u].z)) && (_2203 <= cbSceneParam._m0[64u].w))
        {
            float _2342 = fma(_1997, cbSceneParam._m0[62u].w, fma(_1993, cbSceneParam._m0[62u].z, fma(_1989, cbSceneParam._m0[62u].y, _1985 * cbSceneParam._m0[62u].x))) / _2201;
            float _2346 = isnan(cbSceneParam._m0[41u].w) ? _2342 : (isnan(_2342) ? cbSceneParam._m0[41u].w : max(_2342, cbSceneParam._m0[41u].w));
            float _2389 = (cbSceneParam._m0[33u].x - sqrt(((_1999 * _1999) + (_1998 * _1998)) + (_2000 * _2000))) * cbSceneParam._m0[33u].y;
            float _4573 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
            float _2396 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2202, cbSceneParam._m0[33u].w + _2203), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2202, _2203 - cbSceneParam._m0[33u].z), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2202 - cbSceneParam._m0[33u].z, _2203 - cbSceneParam._m0[33u].w), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2202 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2203), _2346), 0.0)).x), vec4(0.25)));
            float _2400 = 1.0 - (_2396 * cbSceneParam._m0[34u].x);
            float _2401 = 1.0 - (_2396 * cbSceneParam._m0[34u].y);
            float _2402 = 1.0 - (_2396 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2402) ? _2149 : (isnan(_2149) ? _2402 : min(_2149, _2402));
            frontier_phi_37_36_ladder_1 = isnan(_2401) ? _2148 : (isnan(_2148) ? _2401 : min(_2148, _2401));
            frontier_phi_37_36_ladder_2 = isnan(_2400) ? _2147 : (isnan(_2147) ? _2400 : min(_2147, _2400));
        }
        else
        {
            frontier_phi_37_36_ladder = _2149;
            frontier_phi_37_36_ladder_1 = _2148;
            frontier_phi_37_36_ladder_2 = _2147;
        }
        _2213 = frontier_phi_37_36_ladder_2;
        _2215 = frontier_phi_37_36_ladder_1;
        _2217 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2213 = _2147;
        _2215 = _2148;
        _2217 = _2149;
    }
    uvec4 _2222 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2224 = _2222.x * 14u;
    uint _2225 = _2224 + 13u;
    float _2232 = _893 + (-1.0);
    float _2237 = (cbLight._m0[_2225].x * _2232) + 1.0;
    float _2238 = (cbLight._m0[_2225].y * _2232) + 1.0;
    float _2239 = (cbLight._m0[_2225].z * _2232) + 1.0;
    float _2240 = (cbLight._m0[_2225].w * _2232) + 1.0;
    uint _2241 = _2224 + 5u;
    float _2247 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
    uint _2251 = _2224 + 4u;
    float _2261 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
    uint _2265 = _2224 | 1u;
    float _2276 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_713, _714, _715));
    float _2279 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_713, _714, _715));
    float _4609 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _4620 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2284 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * 0.3183098733425140380859375;
    float _2286 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * 0.3183098733425140380859375;
    float _2293 = ((cbLight._m0[_2241].x * _2247) * _2286) + (((cbLight._m0[_2251].x * _2213) * _2261) * _2284);
    float _2294 = ((_2247 * cbLight._m0[_2241].y) * _2286) + (((cbLight._m0[_2251].y * _2215) * _2261) * _2284);
    float _2295 = ((_2247 * cbLight._m0[_2241].z) * _2286) + (((cbLight._m0[_2251].z * _2217) * _2261) * _2284);
    uvec4 _2299 = floatBitsToUint(cbLight._m0[_2224 + 12u]);
    bool _2301 = _2299.x == 0u;
    float _2403;
    float _2405;
    float _2407;
    if (_2301)
    {
        _2403 = _2293;
        _2405 = _2294;
        _2407 = _2295;
    }
    else
    {
        uint _2411 = _2224 + 6u;
        float _2427 = (dot(vec3(cbLight._m0[_2224 + 2u].xyz), vec3(_713, _714, _715)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4631 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2430 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2403 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2293;
        _2405 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2294;
        _2407 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2295;
    }
    bool _2410 = _2299.y == 0u;
    float _2465;
    float _2467;
    float _2469;
    if (_2410)
    {
        _2465 = _2403;
        _2467 = _2405;
        _2469 = _2407;
    }
    else
    {
        uint _2638 = _2224 + 7u;
        float _2654 = (dot(vec3(cbLight._m0[_2224 + 3u].xyz), vec3(_713, _714, _715)) * 0.5) + 0.5;
        float _2655 = _2654 * _2654;
        float _4647 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2656 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2657 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2465 = (((cbLight._m0[_2638].x * 0.3183098733425140380859375) * _2656) * _2657) + _2403;
        _2467 = (((cbLight._m0[_2638].y * 0.3183098733425140380859375) * _2656) * _2657) + _2405;
        _2469 = (((cbLight._m0[_2638].z * 0.3183098733425140380859375) * _2656) * _2657) + _2407;
    }
    uint _2472 = _2224 + 8u;
    float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2224].w)) * _716) * 0.949999988079071044921875);
    float _2486 = _2485 * _2485;
    float _2487 = cbLight._m0[_2224].x + _792;
    float _2488 = cbLight._m0[_2224].y + _793;
    float _2489 = cbLight._m0[_2224].z + _794;
    float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
    float _2494 = _2493 * _2487;
    float _2495 = _2493 * _2488;
    float _2496 = _2493 * _2489;
    float _2497 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2224].xyz));
    float _4663 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2500 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _4674 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _2501 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2502 = dot(vec3(_713, _714, _715), vec3(_2494, _2495, _2496));
    float _4685 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _2506 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2494, _2495, _2496));
    float _4696 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2510 = _2486 * _2486;
    float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
    float _2522 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
    float _2523 = 0.959999978542327880859375 - _874;
    float _2525 = 0.959999978542327880859375 - _875;
    float _2526 = 0.959999978542327880859375 - _876;
    float _2533 = 1.0 - _2486;
    float _2544 = (0.5 / (((_2501 * ((_2500 * _2533) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2533) + _2486) * _2500))) * _2500;
    float _4707 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2546 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
    uint _2560 = _2224 + 9u;
    float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _716) * 0.949999988079071044921875);
    float _2572 = _2571 * _2571;
    float _2573 = cbLight._m0[_2265].x + _792;
    float _2574 = cbLight._m0[_2265].y + _793;
    float _2575 = cbLight._m0[_2265].z + _794;
    float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
    float _2580 = _2579 * _2573;
    float _2581 = _2579 * _2574;
    float _2582 = _2579 * _2575;
    float _2583 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2265].xyz));
    float _4718 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2587 = dot(vec3(_713, _714, _715), vec3(_2580, _2581, _2582));
    float _4729 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2590 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2591 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2580, _2581, _2582));
    float _4740 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2595 = _2572 * _2572;
    float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
    float _2606 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
    float _2613 = 1.0 - _2572;
    float _2623 = (0.5 / (((_2501 * ((_2586 * _2613) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2613) + _2572) * _2586))) * _2586;
    float _4751 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2625 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
    float _2635 = (((((_2606 * _2523) + _877) * cbLight._m0[_2560].x) * _2625) * _2247) + ((((cbLight._m0[_2472].x * _2213) * ((_2522 * _2523) + _877)) * _2546) * _2261);
    float _2636 = (((((_2606 * _2525) + _879) * cbLight._m0[_2560].y) * _2625) * _2247) + ((((cbLight._m0[_2472].y * _2215) * ((_2522 * _2525) + _879)) * _2546) * _2261);
    float _2637 = (((((_2606 * _2526) + _880) * cbLight._m0[_2560].z) * _2625) * _2247) + ((((cbLight._m0[_2472].z * _2217) * ((_2522 * _2526) + _880)) * _2546) * _2261);
    float _2693;
    float _2695;
    float _2697;
    if (_2301)
    {
        _2693 = _2635;
        _2695 = _2636;
        _2697 = _2637;
    }
    else
    {
        uint _2699 = _2224 + 2u;
        uint _2703 = _2224 + 10u;
        float _2717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2699].w)) * _716) * 0.949999988079071044921875);
        float _2718 = _2717 * _2717;
        float _2719 = cbLight._m0[_2699].x + _792;
        float _2720 = cbLight._m0[_2699].y + _793;
        float _2721 = cbLight._m0[_2699].z + _794;
        float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
        float _2726 = _2725 * _2719;
        float _2727 = _2725 * _2720;
        float _2728 = _2725 * _2721;
        float _2729 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2699].xyz));
        float _4762 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2733 = dot(vec3(_713, _714, _715), vec3(_2726, _2727, _2728));
        float _4773 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2736 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2737 = dot(vec3(cbLight._m0[_2699].xyz), vec3(_2726, _2727, _2728));
        float _4784 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2741 = _2718 * _2718;
        float _2745 = ((_2736 * _2736) * (_2741 + (-1.0))) + 1.0;
        float _2752 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
        float _2759 = 1.0 - _2718;
        float _2769 = (0.5 / (((_2501 * ((_2732 * _2759) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2759) + _2718) * _2732))) * _2732;
        float _4795 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2771 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2741 / ((_2745 * _2745) * 3.141590118408203125));
        float _2772 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2693 = (((((_2752 * _2523) + _877) * cbLight._m0[_2703].x) * _2771) * _2772) + _2635;
        _2695 = (((((_2752 * _2525) + _879) * cbLight._m0[_2703].y) * _2771) * _2772) + _2636;
        _2697 = (((((_2752 * _2526) + _880) * cbLight._m0[_2703].z) * _2771) * _2772) + _2637;
    }
    float _2803;
    float _2805;
    float _2807;
    if (_2410)
    {
        _2803 = _2693;
        _2805 = _2695;
        _2807 = _2697;
    }
    else
    {
        uint _2814 = _2224 + 3u;
        uint _2818 = _2224 + 11u;
        float _2832 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2814].w)) * _716) * 0.949999988079071044921875);
        float _2833 = _2832 * _2832;
        float _2834 = cbLight._m0[_2814].x + _792;
        float _2835 = cbLight._m0[_2814].y + _793;
        float _2836 = cbLight._m0[_2814].z + _794;
        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
        float _2841 = _2840 * _2834;
        float _2842 = _2840 * _2835;
        float _2843 = _2840 * _2836;
        float _2844 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2814].xyz));
        float _4811 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2847 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2848 = dot(vec3(_713, _714, _715), vec3(_2841, _2842, _2843));
        float _4822 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2851 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2852 = dot(vec3(cbLight._m0[_2814].xyz), vec3(_2841, _2842, _2843));
        float _4833 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2856 = _2833 * _2833;
        float _2860 = ((_2851 * _2851) * (_2856 + (-1.0))) + 1.0;
        float _2867 = exp2(log2(1.0 - (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) * 5.0);
        float _2874 = 1.0 - _2833;
        float _2884 = (0.5 / (((_2501 * ((_2847 * _2874) + _2833)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2874) + _2833) * _2847))) * _2847;
        float _4844 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2886 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2856 / ((_2860 * _2860) * 3.141590118408203125));
        float _2887 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2803 = (((((_2867 * _2523) + _877) * cbLight._m0[_2818].x) * _2886) * _2887) + _2693;
        _2805 = (((((_2867 * _2525) + _879) * cbLight._m0[_2818].y) * _2886) * _2887) + _2695;
        _2807 = (((((_2867 * _2526) + _880) * cbLight._m0[_2818].z) * _2886) * _2887) + _2697;
    }
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    if (_2222.y == 0u)
    {
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.x;
        uint _2920 = uint((float(_2908.y) * floor(float(uint(cbSceneParam._m0[85u].y * _814) / _2909))) + floor(float(uint(cbSceneParam._m0[85u].x * _813) / _2909)));
        float _2930 = (log2(_2000 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2931 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        uint _2934 = uint(isnan(14.0) ? _2931 : (isnan(_2931) ? 14.0 : min(_2931, 14.0)));
        uvec4 _2939 = texelFetch(g_lightClusterGridBuffer, int(((_2934 << 2u) + (_2920 << 6u)) >> 2u));
        uint _2940 = _2939.x;
        uint _2941 = _2908.z;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        if (((((1u << ((_2941 >> 4u) & 15u)) + 4294967295u) & _2940) == 0u) || ((_2941 & 240u) == 0u))
        {
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
        }
        else
        {
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            uint _3178 = 0u;
            uint _3187;
            bool _3188;
            for (;;)
            {
                _3187 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3178 << 2u)) >> 2u)).x;
                _3188 = _3187 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3188)
                {
                    frontier_phi_71_pred = _3177;
                    frontier_phi_71_pred_1 = _3176;
                    frontier_phi_71_pred_2 = _3175;
                    frontier_phi_71_pred_3 = _3174;
                    frontier_phi_71_pred_4 = _3173;
                    frontier_phi_71_pred_5 = _3172;
                }
                else
                {
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    uint _3323;
                    _3317 = _3172;
                    _3318 = _3173;
                    _3319 = _3174;
                    _3320 = _3175;
                    _3321 = _3176;
                    _3322 = _3177;
                    _3323 = _3187;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    for (;;)
                    {
                        uint _3327 = uint(findLSB(_3323)) + (_3178 << 5u);
                        uint _3324 = (_3323 + 4294967295u) & _3323;
                        uint _3329 = _3327 * 48u;
                        vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3329)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 3u)).x));
                        uint _3349 = (_3327 * 48u) + 4u;
                        vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 3u)).x));
                        uint _3368 = (_3327 * 48u) + 8u;
                        vec3 _3379 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x));
                        float _3383 = _3343.x - _1998;
                        float _3384 = _3343.y - _1999;
                        float _3385 = _3343.z - _2000;
                        float _3386 = dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385));
                        float _3389 = inversesqrt(_3386);
                        float _3390 = _3389 * _3383;
                        float _3391 = _3389 * _3384;
                        float _3392 = _3389 * _3385;
                        float _3393 = dot(vec3(_834, _837, _840), vec3(_3390, _3391, _3392));
                        float _3398 = 1.0 - (_3386 * _3343.w);
                        float _4870 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3399 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3400 = sqrt(_3386) * _3362.w;
                        float _3403 = 1.39999997615814208984375 / (_3400 + 1.39999997615814208984375);
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3393) + _3404;
                        float _3410 = _3400 * _3400;
                        float _3414 = ((isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0))) * _3399) / ((_3410 * 0.699999988079071044921875) + 1.0);
                        float _3418 = (-0.0) - _1998;
                        float _3419 = (-0.0) - _1999;
                        float _3420 = (-0.0) - _2000;
                        float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                        float _3425 = _3424 * _3418;
                        float _3426 = _3424 * _3419;
                        float _3427 = _3424 * _3420;
                        float _3434 = exp2(log2(1.0 / ((_3410 * 3.5) + 5.0)) * 0.25);
                        float _3435 = 1.0 - _909;
                        float _3442 = sqrt(1.0 - ((1.0 - (_3435 * _3435)) * (1.0 - (_3434 * _3434))));
                        float _3443 = _3442 * _3442;
                        float _3444 = _3443 * _3443;
                        float _3445 = _3425 + _3390;
                        float _3446 = _3426 + _3391;
                        float _3447 = _3427 + _3392;
                        float _3451 = inversesqrt(dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447)));
                        float _3455 = dot(vec3(_834, _837, _840), vec3(_3425, _3426, _3427));
                        float _4886 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3458 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3459 = dot(vec3(_834, _837, _840), vec3(_3451 * _3445, _3451 * _3446, _3451 * _3447));
                        float _4897 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3462 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                        float _3466 = ((_3462 * _3462) * (_3444 + (-1.0))) + 1.0;
                        float _3467 = _3403 * _3443;
                        float _3468 = _3467 * _3467;
                        float _3471 = ((1.0 - _3468) * _3393) + _3468;
                        float _4908 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3472 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3473 = 1.0 - _3443;
                        float _3483 = (0.5 / (((_3472 * ((_3458 * _3473) + _3443)) + 9.9999999392252902907785028219223e-09) + (((_3472 * _3473) + _3443) * _3458))) * _3472;
                        float _4919 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3494 = (((_3444 * 3.1415927410125732421875) * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) / ((_3466 * _3466) * ((_3410 * 2.1991131305694580078125) + 3.141590118408203125))) * _3399;
                        _3247 = (_3414 * _3362.x) + _3320;
                        _3248 = (_3414 * _3362.y) + _3321;
                        _3249 = (_3414 * _3362.z) + _3322;
                        _3244 = (_3494 * _3379.x) + _3317;
                        _3245 = (_3494 * _3379.y) + _3318;
                        _3246 = (_3494 * _3379.z) + _3319;
                        if (_3324 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3317 = _3244;
                            _3318 = _3245;
                            _3319 = _3246;
                            _3320 = _3247;
                            _3321 = _3248;
                            _3322 = _3249;
                            _3323 = _3324;
                        }
                    }
                    frontier_phi_71_pred = _3249;
                    frontier_phi_71_pred_1 = _3248;
                    frontier_phi_71_pred_2 = _3247;
                    frontier_phi_71_pred_3 = _3246;
                    frontier_phi_71_pred_4 = _3245;
                    frontier_phi_71_pred_5 = _3244;
                }
                _3031 = frontier_phi_71_pred;
                _3029 = frontier_phi_71_pred_1;
                _3027 = frontier_phi_71_pred_2;
                _3025 = frontier_phi_71_pred_3;
                _3023 = frontier_phi_71_pred_4;
                _3021 = frontier_phi_71_pred_5;
                uint _3179 = _3178 + 1u;
                if (_3179 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3172 = _3021;
                    _3173 = _3023;
                    _3174 = _3025;
                    _3175 = _3027;
                    _3176 = _3029;
                    _3177 = _3031;
                    _3178 = _3179;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
        }
        uvec4 _3034 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3035 = _3034.z;
        uint _3037 = (_3035 >> 8u) & 15u;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        if (((4294967295u << _3037) & _2940) == 0u)
        {
            _3140 = _3020;
            _3142 = _3022;
            _3144 = _3024;
            _3146 = _3026;
            _3148 = _3028;
            _3150 = _3030;
        }
        else
        {
            float _3165 = inversesqrt(dot(vec3(_1998, _1999, _2000), vec3(_1998, _1999, _2000)));
            float _3166 = _3165 * _1998;
            float _3167 = _3165 * _1999;
            float _3168 = _3165 * _2000;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3037 < ((_3035 >> 12u) & 15u))
            {
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3300 = _3020;
                float _3301 = _3022;
                float _3302 = _3024;
                float _3303 = _3026;
                float _3304 = _3028;
                float _3305 = _3030;
                uint _3306 = _3037;
                uint _3315;
                bool _3316;
                for (;;)
                {
                    _3315 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3306 << 2u)) >> 2u)).x;
                    _3316 = _3315 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3316)
                    {
                        frontier_phi_82_pred = _3305;
                        frontier_phi_82_pred_1 = _3304;
                        frontier_phi_82_pred_2 = _3303;
                        frontier_phi_82_pred_3 = _3302;
                        frontier_phi_82_pred_4 = _3301;
                        frontier_phi_82_pred_5 = _3300;
                    }
                    else
                    {
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3521 = _3300;
                        float _3522 = _3301;
                        float _3523 = _3302;
                        float _3524 = _3303;
                        float _3525 = _3304;
                        float _3526 = _3305;
                        uint _3527 = _3315;
                        uint _3528;
                        vec4 _3553;
                        float _3554;
                        vec4 _3569;
                        vec3 _3581;
                        vec4 _3596;
                        vec4 _3611;
                        float _3657;
                        bool _3658;
                        for (;;)
                        {
                            uint _3538 = ((_3306 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3527));
                            _3528 = (_3527 + 4294967295u) & _3527;
                            uint _3540 = _3538 * 40u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            _3554 = _3553.w;
                            uint _3556 = (_3538 * 40u) + 4u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3571 = (_3538 * 40u) + 8u;
                            _3581 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x));
                            uint _3583 = (_3538 * 40u) + 16u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3538 * 40u) + 20u;
                            _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            uint _3613 = (_3538 * 40u) + 24u;
                            vec4 _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            uint _3632 = (_3538 * 40u) + 28u;
                            vec4 _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            _3657 = fma(_2000, _3645.z, fma(_1999, _3645.y, _3645.x * _1998)) + _3645.w;
                            _3658 = !((fma(_2000, _3626.z, fma(_1999, _3626.y, _3626.x * _1998)) + _3626.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3658)
                            {
                                float _3685 = _3553.x - _1998;
                                float _3686 = _3553.y - _1999;
                                float _3687 = _3553.z - _2000;
                                float _3688 = dot(vec3(_3685, _3686, _3687), vec3(_3685, _3686, _3687));
                                float _3691 = inversesqrt(_3688);
                                float _3692 = _3691 * _3685;
                                float _3693 = _3691 * _3686;
                                float _3694 = _3691 * _3687;
                                float _3698 = 1.0 - (_3688 / (_3554 * _3554));
                                float _4930 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3699 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3703 = sqrt(_3688) * _3569.w;
                                float _3705 = 1.39999997615814208984375 / (_3703 + 1.39999997615814208984375);
                                float _3706 = _3705 * _3705;
                                float _3709 = ((1.0 - _3706) * dot(vec3(_3692, _3693, _3694), vec3(_834, _837, _840))) + _3706;
                                float _3712 = _3703 * _3703;
                                float _3716 = (fma(_2000, _3596.z, fma(_1999, _3596.y, _3596.x * _1998)) + _3596.w) / _3657;
                                float _3717 = (fma(_2000, _3611.z, fma(_1999, _3611.y, _3611.x * _1998)) + _3611.w) / _3657;
                                float _3721 = 1.0 - dot(vec2(_3716, _3717), vec2(_3716, _3717));
                                float _4946 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3723 = _3722 * (((isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0))) * _3699) / ((_3712 * 0.699999988079071044921875) + 1.0));
                                float _3735 = exp2(log2(1.0 / ((_3712 * 3.5) + 5.0)) * 0.25);
                                float _3736 = 1.0 - _909;
                                float _3743 = sqrt(1.0 - ((1.0 - (_3736 * _3736)) * (1.0 - (_3735 * _3735))));
                                float _3744 = _3743 * _3743;
                                float _3745 = _3744 * _3744;
                                float _3746 = _3692 - _3166;
                                float _3747 = _3693 - _3167;
                                float _3748 = _3694 - _3168;
                                float _3752 = inversesqrt(dot(vec3(_3746, _3747, _3748), vec3(_3746, _3747, _3748)));
                                float _3756 = dot(vec3(_834, _837, _840), vec3((-0.0) - _3166, (-0.0) - _3167, (-0.0) - _3168));
                                float _4957 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3759 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3760 = dot(vec3(_834, _837, _840), vec3(_3752 * _3746, _3752 * _3747, _3752 * _3748));
                                float _4968 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3763 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3767 = ((_3763 * _3763) * (_3745 + (-1.0))) + 1.0;
                                float _3768 = _3705 * _3744;
                                float _3769 = _3768 * _3768;
                                float _3775 = ((1.0 - _3769) * dot(vec3(_834, _837, _840), vec3(_3692, _3693, _3694))) + _3769;
                                float _4979 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3776 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3777 = 1.0 - _3744;
                                float _3787 = (0.5 / (((_3776 * ((_3759 * _3777) + _3744)) + 9.9999999392252902907785028219223e-09) + (((_3776 * _3777) + _3744) * _3759))) * _3776;
                                float _4990 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3797 = (_3722 * _3699) * (((_3745 * 3.1415927410125732421875) * (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) / ((_3767 * _3767) * ((_3712 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3723 * _3569.z;
                                frontier_phi_88_pred_1 = _3723 * _3569.y;
                                frontier_phi_88_pred_2 = _3723 * _3569.x;
                                frontier_phi_88_pred_3 = _3797 * _3581.z;
                                frontier_phi_88_pred_4 = _3797 * _3581.y;
                                frontier_phi_88_pred_5 = _3797 * _3581.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3806 = frontier_phi_88_pred;
                            _3805 = frontier_phi_88_pred_1;
                            _3804 = frontier_phi_88_pred_2;
                            _3803 = frontier_phi_88_pred_3;
                            _3802 = frontier_phi_88_pred_4;
                            _3801 = frontier_phi_88_pred_5;
                            _3511 = _3804 + _3524;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            _3508 = _3801 + _3521;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            if (_3528 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3528;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3513;
                        frontier_phi_82_pred_1 = _3512;
                        frontier_phi_82_pred_2 = _3511;
                        frontier_phi_82_pred_3 = _3510;
                        frontier_phi_82_pred_4 = _3509;
                        frontier_phi_82_pred_5 = _3508;
                    }
                    _3151 = frontier_phi_82_pred;
                    _3149 = frontier_phi_82_pred_1;
                    _3147 = frontier_phi_82_pred_2;
                    _3145 = frontier_phi_82_pred_3;
                    _3143 = frontier_phi_82_pred_4;
                    _3141 = frontier_phi_82_pred_5;
                    uint _3307 = _3306 + 1u;
                    if (_3307 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3300 = _3141;
                        _3301 = _3143;
                        _3302 = _3145;
                        _3303 = _3147;
                        _3304 = _3149;
                        _3305 = _3151;
                        _3306 = _3307;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3147;
                frontier_phi_63_64_ladder_1 = _3151;
                frontier_phi_63_64_ladder_2 = _3149;
                frontier_phi_63_64_ladder_3 = _3145;
                frontier_phi_63_64_ladder_4 = _3143;
                frontier_phi_63_64_ladder_5 = _3141;
            }
            else
            {
                frontier_phi_63_64_ladder = _3026;
                frontier_phi_63_64_ladder_1 = _3030;
                frontier_phi_63_64_ladder_2 = _3028;
                frontier_phi_63_64_ladder_3 = _3024;
                frontier_phi_63_64_ladder_4 = _3022;
                frontier_phi_63_64_ladder_5 = _3020;
            }
            _3140 = frontier_phi_63_64_ladder_5;
            _3142 = frontier_phi_63_64_ladder_4;
            _3144 = frontier_phi_63_64_ladder_3;
            _3146 = frontier_phi_63_64_ladder;
            _3148 = frontier_phi_63_64_ladder_2;
            _3150 = frontier_phi_63_64_ladder_1;
        }
        float _3155 = isnan(1.0) ? _893 : (isnan(_893) ? 1.0 : min(_893, 1.0));
        _2953 = (_3155 * _3146) + _2465;
        _2955 = (_3155 * _3148) + _2467;
        _2957 = (_3155 * _3150) + _2469;
        _2959 = ((_3140 * _877) * _3155) + _2803;
        _2961 = ((_3142 * _879) * _3155) + _2805;
        _2963 = ((_3144 * _880) * _3155) + _2807;
    }
    else
    {
        _2953 = _2465;
        _2955 = _2467;
        _2957 = _2469;
        _2959 = _2803;
        _2961 = _2805;
        _2963 = _2807;
    }
    float _5006 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _5017 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _5028 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2980 = ((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2953 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _893))) + ((_2959 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    float _2981 = ((isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_2955 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _893))) + ((_2961 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    float _2982 = ((isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0))) * (_2957 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _893))) + ((_2963 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    uint _2983 = _273 + 6u;
    float _2991 = _813 / cbSceneParam._m0[86u].x;
    float _2992 = _814 / cbSceneParam._m0[86u].y;
    vec4 _3006 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2991, _2992, (log2((isnan(cbSceneParam._m0[77u].w) ? _735 : (isnan(_735) ? cbSceneParam._m0[77u].w : min(_735, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3008 = _3006.x;
    float _3009 = _3006.y;
    float _3010 = _3006.z;
    float _3011 = _3006.w;
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    if (_735 > cbSceneParam._m0[78u].w)
    {
        float _3045 = isnan(_735) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _735 : min(cbSceneParam._m0[80u].w, _735));
        float _3046 = _3045 / _735;
        float _3057 = _3046 * _785;
        float _3058 = _786 * _3046;
        float _3059 = (-0.0) - _3058;
        float _3060 = _3046 * _787;
        float _3062 = (cbSceneParam._m0[77u].w * _3059) / _3045;
        float _3063 = _3062 + cbSceneParam._m0[79u].w;
        float _3064 = cbSceneParam._m0[79u].w - _3058;
        float _3070 = sqrt(((_3057 * _3057) + (_3058 * _3058)) + (_3060 * _3060));
        float _3073 = (1.0 - (cbSceneParam._m0[77u].w / _3045)) * _3070;
        float _3078 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3080 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3257;
        if (abs((_3059 - _3062) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3257 = ((((_3063 > 0.0) ? exp2(_3078 * _3063) : (2.0 - exp2(_3080 * _3063))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3073;
        }
        else
        {
            float _3201 = 1.0 / cbSceneParam._m0[80u].x;
            float _3202 = isnan(_3064) ? _3063 : (isnan(_3063) ? _3064 : max(_3063, _3064));
            float _3203 = isnan(_3064) ? _3063 : (isnan(_3063) ? _3064 : min(_3063, _3064));
            float _3212 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : min(_3202, 0.0));
            float _3213 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : min(_3203, 0.0));
            _3257 = ((abs(_3070 / _3059) * cbSceneParam._m0[80u].y) * ((((_3212 - _3213) * 2.0) - ((exp2(_3078 * (isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0)))) - exp2(_3078 * (isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0))))) * _3201)) - ((exp2(_3080 * _3212) - exp2(_3080 * _3213)) * _3201))) + (_3073 * cbSceneParam._m0[80u].z);
        }
        vec4 _3259 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2991, _2992, 1.0), 0.0);
        float _3268 = exp2((_3257 * (-1.44269502162933349609375)) * (1.0 - _3259.w));
        float _3269 = log2(_3268);
        float _3285 = log2(_3011);
        _3082 = (exp2(_3285 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].x)) * _3259.x) / cbSceneParam._m0[78u].x)) + _3008;
        _3084 = (exp2(_3285 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].y)) * _3259.y) / cbSceneParam._m0[78u].y)) + _3009;
        _3086 = (exp2(_3285 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].z)) * _3259.z) / cbSceneParam._m0[78u].z)) + _3010;
        _3088 = _3268 * _3011;
    }
    else
    {
        _3082 = _3008;
        _3084 = _3009;
        _3086 = _3010;
        _3088 = _3011;
    }
    bool _3295;
    vec4 _3098;
    vec4 _3120;
    float _3122;
    float _3126;
    float _3127;
    float _3128;
    float _3129;
    bool _3139;
    for (;;)
    {
        _3098 = cbMatDynParam._m0[0u];
        float _3100 = roundEven(_3098.y);
        bool _3101 = _3100 == 3.0;
        float _3102 = log2(_3088);
        float _3109 = exp2(_3102 * cbSceneParam._m0[78u].x) * _2980;
        float _3110 = exp2(_3102 * cbSceneParam._m0[78u].y) * _2981;
        float _3111 = exp2(_3102 * cbSceneParam._m0[78u].z) * _2982;
        float _3118 = _801 + (-0.5);
        _3120 = cbMtdParam._m0[1u];
        _3122 = _3120.y * _3118;
        float _3125 = (_3100 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3126 = _3125 * (_3101 ? _3109 : (_3109 + (cbSceneParam._m0[72u].w * _3082)));
        _3127 = _3125 * (_3101 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3084)));
        _3128 = _3125 * (_3101 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3086)));
        _3129 = _3118 * 0.999000012874603271484375;
        _3139 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3139)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _3129) < 0.5)
            {
                _3295 = true;
                break;
            }
        }
        uint _3236 = _853 + uint(_3098.w);
        if ((cbInstanceData._m0[_3236].w < 1.0) && ((cbInstanceData._m0[_3236].w + _3129) < 0.5))
        {
            _3295 = true;
            break;
        }
        if ((_3122 + 1.0) < _3120.x)
        {
            _3295 = true;
            break;
        }
        _3295 = false;
        break;
    }
    float _3499;
    if (_3295)
    {
        discard_state = true;
        _3499 = 0.0;
    }
    else
    {
        _3499 = cbInstanceData._m0[_2983].w;
    }
    SV_Target.x = _3126;
    SV_Target.y = _3127;
    SV_Target.z = _3128;
    SV_Target.w = _3499;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2983].w;
    discard_exit();
}


