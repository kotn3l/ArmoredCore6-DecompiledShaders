#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1454;
float _3833;
float _3834;
float _3835;
float _3836;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3845 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3856 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3867 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].y) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3878 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _443 = (_436 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _444 = (_436 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _445 = (_436 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _449 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _443;
    float _452 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _444;
    float _455 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _445;
    float _462 = ((_443 - _449) * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) + _449;
    float _463 = ((_444 - _452) * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) + _452;
    float _464 = ((_445 - _455) * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) + _455;
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _304) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _305) + cbTextureTilingScale._m0[14u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _549 = _545.z;
    float _558 = ((_528.z - _549) * _436) + _549;
    float _561 = ((((_528.x - _547) * _436) + _547) * 2.0) + (-1.0);
    float _562 = ((((_528.y - _548) * _436) + _548) * 2.0) + (-1.0);
    float _563 = dot(vec2(_561, _562), vec2(_561, _562));
    float _3889 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))));
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _611 = _609.x;
    float _612 = 1.0 - _611;
    float _618 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _621 = ((isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : min(_618, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _630 = (_621 - ((((((_611 - _612) * cbMtdParam._m0[24u].z) + _612) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _621))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3910 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _631 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _638 = (_631 * ((_483.x * cbMtdParam._m0[18u].x) - _462)) + _462;
    float _639 = (_631 * ((_483.y * cbMtdParam._m0[18u].y) - _463)) + _463;
    float _640 = (_631 * ((_483.z * cbMtdParam._m0[18u].z) - _464)) + _464;
    vec4 _652 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _654 = _652.x;
    float _655 = 1.0 - _654;
    float _680 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_654 - _655) * cbMtdParam._m0[24u].w) + _655) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3921 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _689 = ((((cbMtdParam._m0[10u].x - _638) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _681) + _638;
    float _690 = ((((cbMtdParam._m0[10u].y - _639) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _681) + _639;
    float _691 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _640)) * _681) + _640;
    vec4 _703 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _717 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _719 = _717.x;
    float _737 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _719) * _436) + _719;
    float _741 = ((_703.x - _737) * cbMtdParam._m0[19u].z) + _737;
    float _743 = _741 - (_741 * _631);
    float _745 = _743 - (_743 * _681);
    float _750 = (((_503.z - _558) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _558;
    float _754 = ((_584.z - _750) * cbMtdParam._m0[19u].w) + _750;
    vec4 _768 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _775 = (_768.x * 2.0) + (-1.0);
    float _776 = (_768.y * 2.0) + (-1.0);
    float _777 = dot(vec2(_775, _776), vec2(_775, _776));
    float _3932 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _785 = (_631 * (_768.z - _754)) + _754;
    float _788 = ((cbMtdParam._m0[23u].y - _785) * _681) + _785;
    vec4 _807 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _813 = (_807.x * 2.0) + (-1.0);
    float _814 = (_807.y * 2.0) + (-1.0);
    float _815 = dot(vec2(_813, _814), vec2(_813, _814));
    float _3943 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _829 = (_561 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_503.x * 2.0) + (-1.0)))) + (((_584.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _830 = (_562 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_503.y * 2.0) + (-1.0)))) + (((_584.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _842 = (((_775 - _829) + (cbMtdParam._m0[21u].x * _829)) * _631) + _829;
    float _843 = (((_776 - _830) + (cbMtdParam._m0[21u].x * _830)) * _631) + _830;
    float _844 = (_631 * (sqrt(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) - _568)) + _568;
    float _855 = (((_813 - _842) + (_842 * cbMtdParam._m0[22u].z)) * _681) + _842;
    float _856 = (((_814 - _843) + (_843 * cbMtdParam._m0[22u].z)) * _681) + _843;
    float _857 = ((sqrt(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) - _844) * _681) + _844;
    float _861 = cbMtdParam._m0[22u].x + _584.w;
    float _864 = fma(_857, _253 * NORMAL.x, fma(_856, _260 * TANGENT.x, (_246 * _238) * _855));
    float _867 = fma(_857, _253 * NORMAL.y, fma(_856, _260 * TANGENT.y, (_246 * _239) * _855));
    float _870 = fma(_857, _253 * NORMAL.z, fma(_856, _260 * TANGENT.z, (_246 * _240) * _855));
    float _874 = inversesqrt(dot(vec3(_864, _867, _870), vec3(_864, _867, _870)));
    float _875 = _874 * _864;
    float _876 = _874 * _867;
    float _877 = _874 * _870;
    float _3954 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _878 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _3976 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3987 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3998 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4009 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _883 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _897 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _947 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _937);
    float _948 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _937);
    float _949 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _937);
    float _953 = inversesqrt(dot(vec3(_947, _948, _949), vec3(_947, _948, _949)));
    float _954 = _947 * _953;
    float _955 = _948 * _953;
    float _956 = _949 * _953;
    vec4 _961 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _963 = _961.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1135 = sqrt(((_947 * _947) + (_948 * _948)) + (_949 * _949));
        float _1141 = (cbMatDynParam._m0[5u].x * _1135) + cbMatDynParam._m0[5u].y;
        float _4020 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1146 = (cbMatDynParam._m0[5u].z * _1135) + cbMatDynParam._m0[5u].w;
        float _4031 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) - _1142)) + _1142) < ((_963 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _974 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _975 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _993 = fma(_877, cbSceneParam._m0[5u].z, fma(_876, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _875));
    float _996 = fma(_877, cbSceneParam._m0[6u].z, fma(_876, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _875));
    float _999 = fma(_877, cbSceneParam._m0[7u].z, fma(_876, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _875));
    uint _1012 = _285 + 9u;
    uint _1013 = _1012 + uint(cbMatDynParam._m0[0u].w);
    float _1019 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * cbInstanceData._m0[_1013].x;
    float _1020 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * cbInstanceData._m0[_1013].y;
    float _1021 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * cbInstanceData._m0[_1013].z;
    float _4042 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1022 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1023 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _4064 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1024 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _1025 = 1.0 - _883;
    float _1026 = _1022 * _1025;
    float _1027 = _1023 * _1025;
    float _1028 = _1024 * _1025;
    float _1033 = (_1022 + (-0.039999999105930328369140625)) * _883;
    float _1034 = (_1023 + (-0.039999999105930328369140625)) * _883;
    float _1035 = (_1024 + (-0.039999999105930328369140625)) * _883;
    float _1036 = _1033 + 0.039999999105930328369140625;
    float _1038 = _1034 + 0.039999999105930328369140625;
    float _1039 = _1035 + 0.039999999105930328369140625;
    vec4 _1048 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _974, cbSceneParam._m0[86u].y * _975));
    float _1052 = ((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * TEXCOORD_5.w) * _1048.x;
    float _1053 = dot(vec3(_875, _876, _877), vec3(_954, _955, _956));
    float _1056 = _1053 * 2.0;
    float _1060 = (_1056 * _875) - _954;
    float _1061 = (_1056 * _876) - _955;
    float _1062 = (_1056 * _877) - _956;
    float _1066 = abs(dot(vec3(_954, _955, _956), vec3(_875, _876, _877)));
    float _4075 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1068 = sqrt(_878);
    float _1081 = exp2((_1068 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1068 * 3.0));
    float _1087 = (1.0 - _1081) * ((_1068 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1088 = _1081 * _1068;
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1453;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1178 = fma(_1124, cbModelParam._m0[26u].z, fma(_1120, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1116));
        float _1182 = fma(_1124, cbModelParam._m0[27u].z, fma(_1120, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1116));
        float _1186 = fma(_1124, cbModelParam._m0[28u].z, fma(_1120, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1116));
        float _1211 = _1116 + _875;
        float _1212 = _1120 + _876;
        float _1213 = _1124 + _877;
        float _1223 = fma(_1213, cbModelParam._m0[26u].z, fma(_1212, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1211)) - _1178;
        float _1224 = fma(_1213, cbModelParam._m0[27u].z, fma(_1212, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1211)) - _1182;
        float _1225 = fma(_1213, cbModelParam._m0[28u].z, fma(_1212, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1211)) - _1186;
        float _1229 = inversesqrt(dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225)));
        float _1242 = ((_1229 * _1223) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1178 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1229 * _1224) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1182 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1229 * _1225) / cbModelParam._m0[34u].z) + ((((((_1186 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        float _1281 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1247.x + (-0.5));
        float _1283 = _1281 * (_1247.y + (-0.5));
        float _1284 = _1281 * (_1247.z + (-0.5));
        float _1291 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1254.x + (-0.5));
        float _1293 = _1291 * (_1254.y + (-0.5));
        float _1294 = _1291 * (_1254.z + (-0.5));
        float _1301 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1261.x + (-0.5));
        float _1303 = _1301 * (_1261.y + (-0.5));
        float _1304 = _1301 * (_1261.z + (-0.5));
        float _1311 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1268.x + (-0.5));
        float _1313 = _1311 * (_1268.y + (-0.5));
        float _1314 = _1311 * (_1268.z + (-0.5));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = _1282 * 0.5;
        float _1319 = _1292 * 0.5;
        float _1320 = _1302 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1335 = (dot(vec3(_875, _876, _877), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1345 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4123 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1347 + 1.0))) + _1352) * _1315;
        float _1362 = _1283 * 0.5;
        float _1363 = _1293 * 0.5;
        float _1364 = _1303 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_875, _876, _877), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4156 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1389 + 1.0))) + _1394) * _1316;
        float _1404 = _1284 * 0.5;
        float _1405 = _1294 * 0.5;
        float _1406 = _1304 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_875, _876, _877), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4189 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1431 + 1.0))) + _1436) * _1317;
        _1453 = _1284;
        _1455 = _1283;
        _1456 = _1282;
        _1457 = _1294;
        _1458 = _1293;
        _1459 = _1292;
        _1460 = _1304;
        _1461 = _1303;
        _1462 = _1302;
        _1463 = _1317;
        _1464 = _1316;
        _1465 = _1315;
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
    }
    else
    {
        _1453 = _1454;
        _1455 = _1454;
        _1456 = _1454;
        _1457 = _1454;
        _1458 = _1454;
        _1459 = _1454;
        _1460 = _1454;
        _1461 = _1454;
        _1462 = _1454;
        _1463 = _1454;
        _1464 = _1454;
        _1465 = _1454;
        _1466 = 0.0;
        _1467 = 0.0;
        _1468 = 0.0;
    }
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1496 = fma(_1124, cbModelParam._m0[30u].z, fma(_1120, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116));
        float _1500 = fma(_1124, cbModelParam._m0[31u].z, fma(_1120, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116));
        float _1504 = fma(_1124, cbModelParam._m0[32u].z, fma(_1120, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116));
        float _1527 = _1116 + _875;
        float _1528 = _1120 + _876;
        float _1529 = _1124 + _877;
        float _1539 = fma(_1529, cbModelParam._m0[30u].z, fma(_1528, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1527)) - _1496;
        float _1540 = fma(_1529, cbModelParam._m0[31u].z, fma(_1528, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1527)) - _1500;
        float _1541 = fma(_1529, cbModelParam._m0[32u].z, fma(_1528, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1527)) - _1504;
        float _1545 = inversesqrt(dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541)));
        float _1558 = ((_1545 * _1539) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1496 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1559 = ((_1545 * _1540) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1500 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1560 = ((_1545 * _1541) / cbModelParam._m0[35u].z) + ((((((_1504 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        float _1595 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1562.x + (-0.5));
        float _1597 = _1595 * (_1562.y + (-0.5));
        float _1598 = _1595 * (_1562.z + (-0.5));
        float _1605 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1569.x + (-0.5));
        float _1607 = _1605 * (_1569.y + (-0.5));
        float _1608 = _1605 * (_1569.z + (-0.5));
        float _1615 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1576.x + (-0.5));
        float _1617 = _1615 * (_1576.y + (-0.5));
        float _1618 = _1615 * (_1576.z + (-0.5));
        float _1625 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1583.x + (-0.5));
        float _1627 = _1625 * (_1583.y + (-0.5));
        float _1628 = _1625 * (_1583.z + (-0.5));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = _1596 * 0.5;
        float _1633 = _1606 * 0.5;
        float _1634 = _1616 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_875, _876, _877), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4230 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4241 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4252 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_1659 + 1.0))) + _1664) * _1629;
        float _1674 = _1597 * 0.5;
        float _1675 = _1607 * 0.5;
        float _1676 = _1617 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_875, _876, _877), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4263 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4274 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4285 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_1701 + 1.0))) + _1706) * _1630;
        float _1716 = _1598 * 0.5;
        float _1717 = _1608 * 0.5;
        float _1718 = _1618 * 0.5;
        float _1719 = dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718));
        float _1724 = (_1719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1719);
        float _1732 = (dot(vec3(_875, _876, _877), vec3(_1724 * _1716, _1724 * _1717, _1724 * _1718)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1741 = sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1743 = _1742 * 2.0;
        float _1747 = (1.0 - _1742) / (_1742 + 1.0);
        float _4318 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1757 = ((((1.0 - _1748) * (_1743 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1743 + 1.0))) + _1748) * _1631;
        _1765 = _1598;
        _1766 = _1597;
        _1767 = _1596;
        _1768 = _1608;
        _1769 = _1607;
        _1770 = _1606;
        _1771 = _1618;
        _1772 = _1617;
        _1773 = _1616;
        _1774 = _1631;
        _1775 = _1630;
        _1776 = _1629;
        _1777 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)));
    }
    else
    {
        _1765 = _1454;
        _1766 = _1454;
        _1767 = _1454;
        _1768 = _1454;
        _1769 = _1454;
        _1770 = _1454;
        _1771 = _1454;
        _1772 = _1454;
        _1773 = _1454;
        _1774 = _1454;
        _1775 = _1454;
        _1776 = _1454;
        _1777 = 0.0;
        _1778 = 0.0;
        _1779 = 0.0;
    }
    float _1789 = (cbModelParam._m0[1u].x * (_1777 - _1466)) + _1466;
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1467)) + _1467;
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1468)) + _1468;
    float _1812 = fma(_1791, cbSceneParam._m0[89u].z, fma(_1790, cbSceneParam._m0[89u].y, _1789 * cbSceneParam._m0[89u].x));
    float _1815 = fma(_1791, cbSceneParam._m0[90u].z, fma(_1790, cbSceneParam._m0[90u].y, _1789 * cbSceneParam._m0[90u].x));
    float _1818 = fma(_1791, cbSceneParam._m0[91u].z, fma(_1790, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1789));
    float _1833 = _1060 * 0.5;
    float _1834 = _1061 * 0.5;
    float _1835 = _1062 * 0.5;
    float _1836 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1839 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1842 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1765, _1768, _1771, _1774));
    float _1876;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1849 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1453, _1457, _1460, _1463));
        float _1853 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1455, _1458, _1461, _1464));
        float _1857 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1456, _1459, _1462, _1465));
        float _1864 = dot(vec4(cbModelParam._m0[39u]), vec4(_1833, _1834, _1835, 1.0));
        _1876 = dot(vec3(isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1864) ? 0.0 : (isnan(0.0) ? _1864 : max(0.0, _1864))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1876 = 1.0;
    }
    float _1887;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1878 = dot(vec4(cbModelParam._m0[40u]), vec4(_1833, _1834, _1835, 1.0));
        _1887 = dot(vec3(isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1878) ? 0.0 : (isnan(0.0) ? _1878 : max(0.0, _1878))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1887 = 1.0;
    }
    float _1891 = (_1887 * cbModelParam._m0[1u].x) + (_1876 * (1.0 - cbModelParam._m0[1u].x));
    float _1901 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _878);
    float _1902 = isnan(_1901) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1901 : min(cbModelParam._m0[25u].z, _1901));
    float _1982;
    float _1984;
    float _1986;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1949 = fma(_1124, cbModelParam._m0[13u].z, fma(_1120, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1116)) + cbModelParam._m0[13u].w;
        float _1953 = fma(_1124, cbModelParam._m0[14u].z, fma(_1120, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1116)) + cbModelParam._m0[14u].w;
        float _1957 = fma(_1124, cbModelParam._m0[15u].z, fma(_1120, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1116)) + cbModelParam._m0[15u].w;
        float _1960 = fma(_1062, cbModelParam._m0[13u].z, fma(_1061, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1060));
        float _1963 = fma(_1062, cbModelParam._m0[14u].z, fma(_1061, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1060));
        float _1966 = fma(_1062, cbModelParam._m0[15u].z, fma(_1061, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1060));
        float _1994;
        if (_1960 > 0.0)
        {
            _1994 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1994 = frontier_phi_17_15_ladder;
        }
        float _2196;
        if (_1963 > 0.0)
        {
            _2196 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2196 = frontier_phi_26_22_ladder;
        }
        float _2450;
        if (_1966 > 0.0)
        {
            _2450 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2450 = frontier_phi_38_33_ladder;
        }
        float _2452 = isnan(_2196) ? _1994 : (isnan(_1994) ? _2196 : min(_1994, _2196));
        float _2453 = isnan(_2450) ? _2452 : (isnan(_2452) ? _2450 : min(_2452, _2450));
        float _2457 = (_2453 * _1960) + _1949;
        float _2458 = (_2453 * _1963) + _1953;
        float _2459 = (_2453 * _1966) + _1957;
        float _2460 = _2453 * 9.9999997473787516355514526367188e-05;
        float _2462 = (-1.0) - _2460;
        float _2464 = _2460 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2459 > _2464) || ((_2459 < _2462) || ((_2458 > _2464) || ((_2458 < _2462) || ((_2457 < _2462) || (_2457 > _2464))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2587 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2459, cbModelParam._m0[9u].z, fma(_2458, cbModelParam._m0[9u].y, _2457 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2459, cbModelParam._m0[10u].z, fma(_2458, cbModelParam._m0[10u].y, _2457 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2459, cbModelParam._m0[11u].z, fma(_2458, cbModelParam._m0[11u].y, _2457 * cbModelParam._m0[11u].x))), _1902);
            frontier_phi_16_38_ladder = _2587.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2587.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2587.x * cbModelParam._m0[1u].y;
        }
        _1982 = frontier_phi_16_38_ladder_2;
        _1984 = frontier_phi_16_38_ladder_1;
        _1986 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1970 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1060, _1061, _1062), _1902);
        _1982 = _1970.x * cbModelParam._m0[1u].y;
        _1984 = _1970.y * cbModelParam._m0[1u].y;
        _1986 = _1970.z * cbModelParam._m0[1u].y;
    }
    float _1990 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _878);
    float _1991 = isnan(_1990) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1990 : min(cbModelParam._m0[25u].w, _1990));
    float _2080;
    float _2082;
    float _2084;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2044 = fma(_1124, cbModelParam._m0[21u].z, fma(_1120, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1116)) + cbModelParam._m0[21u].w;
        float _2048 = fma(_1124, cbModelParam._m0[22u].z, fma(_1120, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1116)) + cbModelParam._m0[22u].w;
        float _2052 = fma(_1124, cbModelParam._m0[23u].z, fma(_1120, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1116)) + cbModelParam._m0[23u].w;
        float _2055 = fma(_1062, cbModelParam._m0[21u].z, fma(_1061, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1060));
        float _2058 = fma(_1062, cbModelParam._m0[22u].z, fma(_1061, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1060));
        float _2061 = fma(_1062, cbModelParam._m0[23u].z, fma(_1061, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1060));
        float _2201;
        if (_2055 > 0.0)
        {
            _2201 = abs((1.0 - _2044) / _2055);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2044 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2201 = frontier_phi_28_24_ladder;
        }
        float _2477;
        if (_2058 > 0.0)
        {
            _2477 = abs((1.0 - _2048) / _2058);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2048 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2477 = frontier_phi_40_35_ladder;
        }
        float _2690;
        if (_2061 > 0.0)
        {
            _2690 = abs((1.0 - _2052) / _2061);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2052 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2690 = frontier_phi_49_46_ladder;
        }
        float _2692 = isnan(_2477) ? _2201 : (isnan(_2201) ? _2477 : min(_2201, _2477));
        float _2693 = isnan(_2690) ? _2692 : (isnan(_2692) ? _2690 : min(_2692, _2690));
        float _2697 = (_2693 * _2055) + _2044;
        float _2698 = (_2693 * _2058) + _2048;
        float _2699 = (_2693 * _2061) + _2052;
        float _2700 = _2693 * 9.9999997473787516355514526367188e-05;
        float _2701 = (-1.0) - _2700;
        float _2703 = _2700 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2699 > _2703) || ((_2699 < _2701) || ((_2698 > _2703) || ((_2698 < _2701) || ((_2697 < _2701) || (_2697 > _2703))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2898 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2699, cbModelParam._m0[17u].z, fma(_2698, cbModelParam._m0[17u].y, _2697 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2699, cbModelParam._m0[18u].z, fma(_2698, cbModelParam._m0[18u].y, _2697 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2699, cbModelParam._m0[19u].z, fma(_2698, cbModelParam._m0[19u].y, _2697 * cbModelParam._m0[19u].x))), _1991);
            frontier_phi_25_49_ladder = _2898.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2898.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2898.x * cbModelParam._m0[1u].z;
        }
        _2080 = frontier_phi_25_49_ladder_2;
        _2082 = frontier_phi_25_49_ladder_1;
        _2084 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2064 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1060, _1061, _1062), _1991);
        _2080 = _2064.x * cbModelParam._m0[1u].z;
        _2082 = _2064.y * cbModelParam._m0[1u].z;
        _2084 = _2064.z * cbModelParam._m0[1u].z;
    }
    float _2097 = (((_1087 * _1036) + _1088) * _1052) * ((cbModelParam._m0[1u].w * (_2080 - _1982)) + _1982);
    float _2099 = (((_1087 * _1038) + _1088) * _1052) * ((cbModelParam._m0[1u].w * (_2082 - _1984)) + _1984);
    float _2101 = (((_1087 * _1039) + _1088) * _1052) * ((cbModelParam._m0[1u].w * (_2084 - _1986)) + _1986);
    float _2104 = fma(_2101, cbSceneParam._m0[89u].z, fma(_2099, cbSceneParam._m0[89u].y, _2097 * cbSceneParam._m0[89u].x));
    float _2107 = fma(_2101, cbSceneParam._m0[90u].z, fma(_2099, cbSceneParam._m0[90u].y, _2097 * cbSceneParam._m0[90u].x));
    float _2110 = fma(_2101, cbSceneParam._m0[91u].z, fma(_2099, cbSceneParam._m0[91u].y, _2097 * cbSceneParam._m0[91u].x));
    uvec4 _2120 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2122 = _2120.x * 14u;
    uint _2123 = _2122 + 13u;
    float _2130 = _1052 + (-1.0);
    float _2135 = (cbLight._m0[_2123].x * _2130) + 1.0;
    float _2136 = (cbLight._m0[_2123].y * _2130) + 1.0;
    float _2137 = (cbLight._m0[_2123].z * _2130) + 1.0;
    float _2138 = (cbLight._m0[_2123].w * _2130) + 1.0;
    uint _2139 = _2122 + 5u;
    float _2145 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
    uint _2149 = _2122 + 4u;
    float _2155 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2159 = _2122 | 1u;
    float _2170 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_875, _876, _877));
    float _2173 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_875, _876, _877));
    float _4454 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _4465 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2178 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * 0.3183098733425140380859375;
    float _2180 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * 0.3183098733425140380859375;
    float _2187 = ((cbLight._m0[_2139].x * _2145) * _2180) + ((cbLight._m0[_2149].x * _2155) * _2178);
    float _2188 = ((_2145 * cbLight._m0[_2139].y) * _2180) + ((_2155 * cbLight._m0[_2149].y) * _2178);
    float _2189 = ((_2145 * cbLight._m0[_2139].z) * _2180) + ((_2155 * cbLight._m0[_2149].z) * _2178);
    uvec4 _2193 = floatBitsToUint(cbLight._m0[_2122 + 12u]);
    bool _2195 = _2193.x == 0u;
    float _2206;
    float _2208;
    float _2210;
    if (_2195)
    {
        _2206 = _2187;
        _2208 = _2188;
        _2210 = _2189;
    }
    else
    {
        uint _2214 = _2122 + 6u;
        float _2230 = (dot(vec3(cbLight._m0[_2122 + 2u].xyz), vec3(_875, _876, _877)) * 0.5) + 0.5;
        float _2231 = _2230 * _2230;
        float _4476 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2232 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _2233 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2206 = (((cbLight._m0[_2214].x * 0.3183098733425140380859375) * _2232) * _2233) + _2187;
        _2208 = (((cbLight._m0[_2214].y * 0.3183098733425140380859375) * _2232) * _2233) + _2188;
        _2210 = (((cbLight._m0[_2214].z * 0.3183098733425140380859375) * _2232) * _2233) + _2189;
    }
    bool _2213 = _2193.y == 0u;
    float _2251;
    float _2253;
    float _2255;
    if (_2213)
    {
        _2251 = _2206;
        _2253 = _2208;
        _2255 = _2210;
    }
    else
    {
        uint _2421 = _2122 + 7u;
        float _2437 = (dot(vec3(cbLight._m0[_2122 + 3u].xyz), vec3(_875, _876, _877)) * 0.5) + 0.5;
        float _2438 = _2437 * _2437;
        float _4492 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2439 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2440 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2251 = (((cbLight._m0[_2421].x * 0.3183098733425140380859375) * _2439) * _2440) + _2206;
        _2253 = (((cbLight._m0[_2421].y * 0.3183098733425140380859375) * _2439) * _2440) + _2208;
        _2255 = (((cbLight._m0[_2421].z * 0.3183098733425140380859375) * _2439) * _2440) + _2210;
    }
    uint _2258 = _2122 + 8u;
    float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _878) * 0.949999988079071044921875);
    float _2272 = _2271 * _2271;
    float _2273 = cbLight._m0[_2122].x + _954;
    float _2274 = cbLight._m0[_2122].y + _955;
    float _2275 = cbLight._m0[_2122].z + _956;
    float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
    float _2280 = _2279 * _2273;
    float _2281 = _2279 * _2274;
    float _2282 = _2279 * _2275;
    float _2283 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2122].xyz));
    float _4508 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _4519 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _2287 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2288 = dot(vec3(_875, _876, _877), vec3(_2280, _2281, _2282));
    float _4530 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2292 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2280, _2281, _2282));
    float _4541 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2296 = _2272 * _2272;
    float _2300 = ((_2291 * _2291) * (_2296 + (-1.0))) + 1.0;
    float _2308 = exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0);
    float _2309 = 0.959999978542327880859375 - _1033;
    float _2311 = 0.959999978542327880859375 - _1034;
    float _2312 = 0.959999978542327880859375 - _1035;
    float _2319 = 1.0 - _2272;
    float _2330 = (0.5 / (((_2287 * ((_2286 * _2319) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2319) + _2272) * _2286))) * _2286;
    float _4552 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2332 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2296 / ((_2300 * _2300) * 3.141590118408203125));
    uint _2343 = _2122 + 9u;
    float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _878) * 0.949999988079071044921875);
    float _2355 = _2354 * _2354;
    float _2356 = cbLight._m0[_2159].x + _954;
    float _2357 = cbLight._m0[_2159].y + _955;
    float _2358 = cbLight._m0[_2159].z + _956;
    float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
    float _2363 = _2362 * _2356;
    float _2364 = _2362 * _2357;
    float _2365 = _2362 * _2358;
    float _2366 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2159].xyz));
    float _4563 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2369 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2370 = dot(vec3(_875, _876, _877), vec3(_2363, _2364, _2365));
    float _4574 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2374 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2363, _2364, _2365));
    float _4585 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2378 = _2355 * _2355;
    float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
    float _2389 = exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0);
    float _2396 = 1.0 - _2355;
    float _2406 = (0.5 / (((_2287 * ((_2369 * _2396) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2396) + _2355) * _2369))) * _2369;
    float _4596 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2408 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
    float _2418 = (((((_2389 * _2309) + _1036) * cbLight._m0[_2343].x) * _2408) * _2145) + (((((_2308 * _2309) + _1036) * cbLight._m0[_2258].x) * _2332) * _2155);
    float _2419 = (((((_2389 * _2311) + _1038) * cbLight._m0[_2343].y) * _2408) * _2145) + (((((_2308 * _2311) + _1038) * cbLight._m0[_2258].y) * _2332) * _2155);
    float _2420 = (((((_2389 * _2312) + _1039) * cbLight._m0[_2343].z) * _2408) * _2145) + (((((_2308 * _2312) + _1039) * cbLight._m0[_2258].z) * _2332) * _2155);
    float _2482;
    float _2484;
    float _2486;
    if (_2195)
    {
        _2482 = _2418;
        _2484 = _2419;
        _2486 = _2420;
    }
    else
    {
        uint _2488 = _2122 + 2u;
        uint _2492 = _2122 + 10u;
        float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2488].w)) * _878) * 0.949999988079071044921875);
        float _2507 = _2506 * _2506;
        float _2508 = cbLight._m0[_2488].x + _954;
        float _2509 = cbLight._m0[_2488].y + _955;
        float _2510 = cbLight._m0[_2488].z + _956;
        float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
        float _2515 = _2514 * _2508;
        float _2516 = _2514 * _2509;
        float _2517 = _2514 * _2510;
        float _2518 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2488].xyz));
        float _4607 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2522 = dot(vec3(_875, _876, _877), vec3(_2515, _2516, _2517));
        float _4618 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2526 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_2515, _2516, _2517));
        float _4629 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2530 = _2507 * _2507;
        float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
        float _2541 = exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0);
        float _2548 = 1.0 - _2507;
        float _2558 = (0.5 / (((_2287 * ((_2521 * _2548) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2548) + _2507) * _2521))) * _2521;
        float _4640 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2560 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
        float _2561 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2482 = (((((_2541 * _2309) + _1036) * cbLight._m0[_2492].x) * _2560) * _2561) + _2418;
        _2484 = (((((_2541 * _2311) + _1038) * cbLight._m0[_2492].y) * _2560) * _2561) + _2419;
        _2486 = (((((_2541 * _2312) + _1039) * cbLight._m0[_2492].z) * _2560) * _2561) + _2420;
    }
    float _2596;
    float _2598;
    float _2600;
    if (_2213)
    {
        _2596 = _2482;
        _2598 = _2484;
        _2600 = _2486;
    }
    else
    {
        uint _2607 = _2122 + 3u;
        uint _2611 = _2122 + 11u;
        float _2625 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2607].w)) * _878) * 0.949999988079071044921875);
        float _2626 = _2625 * _2625;
        float _2627 = cbLight._m0[_2607].x + _954;
        float _2628 = cbLight._m0[_2607].y + _955;
        float _2629 = cbLight._m0[_2607].z + _956;
        float _2633 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
        float _2634 = _2633 * _2627;
        float _2635 = _2633 * _2628;
        float _2636 = _2633 * _2629;
        float _2637 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2607].xyz));
        float _4656 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2640 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2641 = dot(vec3(_875, _876, _877), vec3(_2634, _2635, _2636));
        float _4667 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2645 = dot(vec3(cbLight._m0[_2607].xyz), vec3(_2634, _2635, _2636));
        float _4678 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2649 = _2626 * _2626;
        float _2653 = ((_2644 * _2644) * (_2649 + (-1.0))) + 1.0;
        float _2660 = exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0);
        float _2667 = 1.0 - _2626;
        float _2677 = (0.5 / (((_2287 * ((_2640 * _2667) + _2626)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2667) + _2626) * _2640))) * _2640;
        float _4689 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2679 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2649 / ((_2653 * _2653) * 3.141590118408203125));
        float _2680 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2596 = (((((_2660 * _2309) + _1036) * cbLight._m0[_2611].x) * _2679) * _2680) + _2482;
        _2598 = (((((_2660 * _2311) + _1038) * cbLight._m0[_2611].y) * _2679) * _2680) + _2484;
        _2600 = (((((_2660 * _2312) + _1039) * cbLight._m0[_2611].z) * _2679) * _2680) + _2486;
    }
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    if (_2120.y == 0u)
    {
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2755;
        float _2757 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2755;
        float _2758 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2755;
        uvec4 _2770 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2771 = _2770.x;
        uint _2782 = uint((float(_2770.y) * floor(float(uint(cbSceneParam._m0[85u].y * _975) / _2771))) + floor(float(uint(cbSceneParam._m0[85u].x * _974) / _2771)));
        float _2792 = (log2(_2758 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2793 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        uint _2796 = uint(isnan(14.0) ? _2793 : (isnan(_2793) ? 14.0 : min(_2793, 14.0)));
        uvec4 _2801 = texelFetch(g_lightClusterGridBuffer, int(((_2796 << 2u) + (_2782 << 6u)) >> 2u));
        uint _2802 = _2801.x;
        uint _2803 = _2770.z;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        if (((((1u << ((_2803 >> 4u) & 15u)) + 4294967295u) & _2802) == 0u) || ((_2803 & 240u) == 0u))
        {
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
        }
        else
        {
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            uint _3062 = 0u;
            uint _3071;
            bool _3072;
            for (;;)
            {
                _3071 = texelFetch(g_lightClassification, int((((_2796 << 5u) + (_2782 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                _3072 = _3071 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3072)
                {
                    frontier_phi_66_pred = _3056;
                    frontier_phi_66_pred_1 = _3061;
                    frontier_phi_66_pred_2 = _3060;
                    frontier_phi_66_pred_3 = _3059;
                    frontier_phi_66_pred_4 = _3058;
                    frontier_phi_66_pred_5 = _3057;
                }
                else
                {
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    uint _3207;
                    _3201 = _3056;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3060;
                    _3206 = _3061;
                    _3207 = _3071;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    for (;;)
                    {
                        uint _3211 = uint(findLSB(_3207)) + (_3062 << 5u);
                        uint _3208 = (_3207 + 4294967295u) & _3207;
                        uint _3213 = _3211 * 48u;
                        vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 3u)).x));
                        uint _3233 = (_3211 * 48u) + 4u;
                        vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3233)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 3u)).x));
                        uint _3252 = (_3211 * 48u) + 8u;
                        vec3 _3263 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x));
                        float _3267 = _3227.x - _2756;
                        float _3268 = _3227.y - _2757;
                        float _3269 = _3227.z - _2758;
                        float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                        float _3273 = inversesqrt(_3270);
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3277 = dot(vec3(_993, _996, _999), vec3(_3274, _3275, _3276));
                        float _3282 = 1.0 - (_3270 * _3227.w);
                        float _4715 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3283 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3284 = sqrt(_3270) * _3246.w;
                        float _3287 = 1.39999997615814208984375 / (_3284 + 1.39999997615814208984375);
                        float _3288 = _3287 * _3287;
                        float _3291 = ((1.0 - _3288) * _3277) + _3288;
                        float _3294 = _3284 * _3284;
                        float _3298 = ((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3283) / ((_3294 * 0.699999988079071044921875) + 1.0);
                        float _3302 = (-0.0) - _2756;
                        float _3303 = (-0.0) - _2757;
                        float _3304 = (-0.0) - _2758;
                        float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                        float _3309 = _3308 * _3302;
                        float _3310 = _3308 * _3303;
                        float _3311 = _3308 * _3304;
                        float _3319 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                        float _3320 = 1.0 - _1068;
                        float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                        float _3328 = _3327 * _3327;
                        float _3329 = _3328 * _3328;
                        float _3330 = _3309 + _3274;
                        float _3331 = _3310 + _3275;
                        float _3332 = _3311 + _3276;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3340 = dot(vec3(_993, _996, _999), vec3(_3309, _3310, _3311));
                        float _4731 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3343 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                        float _3344 = dot(vec3(_993, _996, _999), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                        float _4742 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3347 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                        float _3352 = _3287 * _3328;
                        float _3353 = _3352 * _3352;
                        float _3356 = ((1.0 - _3353) * _3277) + _3353;
                        float _4753 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3357 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3358 = 1.0 - _3328;
                        float _3368 = (0.5 / (((_3357 * ((_3343 * _3358) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3357 * _3358) + _3328) * _3343))) * _3357;
                        float _4764 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3379 = (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) / ((_3351 * _3351) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125))) * _3283;
                        _3131 = (_3298 * _3246.x) + _3204;
                        _3132 = (_3298 * _3246.y) + _3205;
                        _3133 = (_3298 * _3246.z) + _3206;
                        _3128 = (_3379 * _3263.x) + _3201;
                        _3129 = (_3379 * _3263.y) + _3202;
                        _3130 = (_3379 * _3263.z) + _3203;
                        if (_3208 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3201 = _3128;
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3132;
                            _3206 = _3133;
                            _3207 = _3208;
                        }
                    }
                    frontier_phi_66_pred = _3128;
                    frontier_phi_66_pred_1 = _3133;
                    frontier_phi_66_pred_2 = _3132;
                    frontier_phi_66_pred_3 = _3131;
                    frontier_phi_66_pred_4 = _3130;
                    frontier_phi_66_pred_5 = _3129;
                }
                _2904 = frontier_phi_66_pred;
                _2914 = frontier_phi_66_pred_1;
                _2912 = frontier_phi_66_pred_2;
                _2910 = frontier_phi_66_pred_3;
                _2908 = frontier_phi_66_pred_4;
                _2906 = frontier_phi_66_pred_5;
                uint _3063 = _3062 + 1u;
                if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3056 = _2904;
                    _3057 = _2906;
                    _3058 = _2908;
                    _3059 = _2910;
                    _3060 = _2912;
                    _3061 = _2914;
                    _3062 = _3063;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
        }
        uvec4 _2917 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2918 = _2917.z;
        uint _2920 = (_2918 >> 8u) & 15u;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        if (((4294967295u << _2920) & _2802) == 0u)
        {
            _3024 = _2903;
            _3026 = _2905;
            _3028 = _2907;
            _3030 = _2909;
            _3032 = _2911;
            _3034 = _2913;
        }
        else
        {
            float _3049 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
            float _3050 = _3049 * _2756;
            float _3051 = _3049 * _2757;
            float _3052 = _3049 * _2758;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2920 < ((_2918 >> 12u) & 15u))
            {
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3184 = _2903;
                float _3185 = _2905;
                float _3186 = _2907;
                float _3187 = _2909;
                float _3188 = _2911;
                float _3189 = _2913;
                uint _3190 = _2920;
                uint _3199;
                bool _3200;
                for (;;)
                {
                    _3199 = texelFetch(g_lightClassification, int((((_2796 << 5u) + (_2782 << 9u)) + (_3190 << 2u)) >> 2u)).x;
                    _3200 = _3199 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3200)
                    {
                        frontier_phi_77_pred = _3189;
                        frontier_phi_77_pred_1 = _3188;
                        frontier_phi_77_pred_2 = _3187;
                        frontier_phi_77_pred_3 = _3186;
                        frontier_phi_77_pred_4 = _3185;
                        frontier_phi_77_pred_5 = _3184;
                    }
                    else
                    {
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3406 = _3184;
                        float _3407 = _3185;
                        float _3408 = _3186;
                        float _3409 = _3187;
                        float _3410 = _3188;
                        float _3411 = _3189;
                        uint _3412 = _3199;
                        uint _3413;
                        vec4 _3438;
                        float _3439;
                        vec4 _3454;
                        vec3 _3466;
                        vec4 _3481;
                        vec4 _3496;
                        float _3542;
                        bool _3543;
                        for (;;)
                        {
                            uint _3423 = ((_3190 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3412));
                            _3413 = (_3412 + 4294967295u) & _3412;
                            uint _3425 = _3423 * 40u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            _3439 = _3438.w;
                            uint _3441 = (_3423 * 40u) + 4u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3423 * 40u) + 8u;
                            _3466 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x));
                            uint _3468 = (_3423 * 40u) + 16u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3423 * 40u) + 20u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3423 * 40u) + 24u;
                            vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3517 = (_3423 * 40u) + 28u;
                            vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            _3542 = fma(_2758, _3530.z, fma(_2757, _3530.y, _3530.x * _2756)) + _3530.w;
                            _3543 = !((fma(_2758, _3511.z, fma(_2757, _3511.y, _3511.x * _2756)) + _3511.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3543)
                            {
                                float _3570 = _3438.x - _2756;
                                float _3571 = _3438.y - _2757;
                                float _3572 = _3438.z - _2758;
                                float _3573 = dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572));
                                float _3576 = inversesqrt(_3573);
                                float _3577 = _3576 * _3570;
                                float _3578 = _3576 * _3571;
                                float _3579 = _3576 * _3572;
                                float _3583 = 1.0 - (_3573 / (_3439 * _3439));
                                float _4775 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3588 = sqrt(_3573) * _3454.w;
                                float _3590 = 1.39999997615814208984375 / (_3588 + 1.39999997615814208984375);
                                float _3591 = _3590 * _3590;
                                float _3594 = ((1.0 - _3591) * dot(vec3(_3577, _3578, _3579), vec3(_993, _996, _999))) + _3591;
                                float _3597 = _3588 * _3588;
                                float _3601 = (fma(_2758, _3481.z, fma(_2757, _3481.y, _3481.x * _2756)) + _3481.w) / _3542;
                                float _3602 = (fma(_2758, _3496.z, fma(_2757, _3496.y, _3496.x * _2756)) + _3496.w) / _3542;
                                float _3606 = 1.0 - dot(vec2(_3601, _3602), vec2(_3601, _3602));
                                float _4791 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3608 = _3607 * (((isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0))) * _3584) / ((_3597 * 0.699999988079071044921875) + 1.0));
                                float _3620 = exp2(log2(1.0 / ((_3597 * 3.5) + 5.0)) * 0.25);
                                float _3621 = 1.0 - _1068;
                                float _3628 = sqrt(1.0 - ((1.0 - (_3621 * _3621)) * (1.0 - (_3620 * _3620))));
                                float _3629 = _3628 * _3628;
                                float _3630 = _3629 * _3629;
                                float _3631 = _3577 - _3050;
                                float _3632 = _3578 - _3051;
                                float _3633 = _3579 - _3052;
                                float _3637 = inversesqrt(dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633)));
                                float _3641 = dot(vec3(_993, _996, _999), vec3((-0.0) - _3050, (-0.0) - _3051, (-0.0) - _3052));
                                float _4802 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3644 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3645 = dot(vec3(_993, _996, _999), vec3(_3637 * _3631, _3637 * _3632, _3637 * _3633));
                                float _4813 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3648 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3652 = ((_3648 * _3648) * (_3630 + (-1.0))) + 1.0;
                                float _3653 = _3590 * _3629;
                                float _3654 = _3653 * _3653;
                                float _3660 = ((1.0 - _3654) * dot(vec3(_993, _996, _999), vec3(_3577, _3578, _3579))) + _3654;
                                float _4824 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3662 = 1.0 - _3629;
                                float _3672 = (0.5 / (((_3661 * ((_3644 * _3662) + _3629)) + 9.9999999392252902907785028219223e-09) + (((_3661 * _3662) + _3629) * _3644))) * _3661;
                                float _4835 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3682 = (_3607 * _3584) * (((_3630 * 3.1415927410125732421875) * (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) / ((_3652 * _3652) * ((_3597 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3608 * _3454.y;
                                frontier_phi_83_pred_1 = _3608 * _3454.x;
                                frontier_phi_83_pred_2 = _3682 * _3466.z;
                                frontier_phi_83_pred_3 = _3682 * _3466.y;
                                frontier_phi_83_pred_4 = _3682 * _3466.x;
                                frontier_phi_83_pred_5 = _3608 * _3454.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3690 = frontier_phi_83_pred;
                            _3689 = frontier_phi_83_pred_1;
                            _3688 = frontier_phi_83_pred_2;
                            _3687 = frontier_phi_83_pred_3;
                            _3686 = frontier_phi_83_pred_4;
                            _3691 = frontier_phi_83_pred_5;
                            _3396 = _3689 + _3409;
                            _3397 = _3690 + _3410;
                            _3398 = _3691 + _3411;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            _3395 = _3688 + _3408;
                            if (_3413 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3413;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3398;
                        frontier_phi_77_pred_1 = _3397;
                        frontier_phi_77_pred_2 = _3396;
                        frontier_phi_77_pred_3 = _3395;
                        frontier_phi_77_pred_4 = _3394;
                        frontier_phi_77_pred_5 = _3393;
                    }
                    _3035 = frontier_phi_77_pred;
                    _3033 = frontier_phi_77_pred_1;
                    _3031 = frontier_phi_77_pred_2;
                    _3029 = frontier_phi_77_pred_3;
                    _3027 = frontier_phi_77_pred_4;
                    _3025 = frontier_phi_77_pred_5;
                    uint _3191 = _3190 + 1u;
                    if (_3191 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3184 = _3025;
                        _3185 = _3027;
                        _3186 = _3029;
                        _3187 = _3031;
                        _3188 = _3033;
                        _3189 = _3035;
                        _3190 = _3191;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3029;
                frontier_phi_58_59_ladder_1 = _3035;
                frontier_phi_58_59_ladder_2 = _3033;
                frontier_phi_58_59_ladder_3 = _3031;
                frontier_phi_58_59_ladder_4 = _3027;
                frontier_phi_58_59_ladder_5 = _3025;
            }
            else
            {
                frontier_phi_58_59_ladder = _2907;
                frontier_phi_58_59_ladder_1 = _2913;
                frontier_phi_58_59_ladder_2 = _2911;
                frontier_phi_58_59_ladder_3 = _2909;
                frontier_phi_58_59_ladder_4 = _2905;
                frontier_phi_58_59_ladder_5 = _2903;
            }
            _3024 = frontier_phi_58_59_ladder_5;
            _3026 = frontier_phi_58_59_ladder_4;
            _3028 = frontier_phi_58_59_ladder;
            _3030 = frontier_phi_58_59_ladder_3;
            _3032 = frontier_phi_58_59_ladder_2;
            _3034 = frontier_phi_58_59_ladder_1;
        }
        float _3039 = isnan(1.0) ? _1052 : (isnan(_1052) ? 1.0 : min(_1052, 1.0));
        _2815 = (_3039 * _3030) + _2251;
        _2817 = (_3039 * _3032) + _2253;
        _2819 = (_3039 * _3034) + _2255;
        _2821 = ((_3024 * _1036) * _3039) + _2596;
        _2823 = ((_3026 * _1038) * _3039) + _2598;
        _2825 = ((_3028 * _1039) * _3039) + _2600;
    }
    else
    {
        _2815 = _2251;
        _2817 = _2253;
        _2819 = _2255;
        _2821 = _2596;
        _2823 = _2598;
        _2825 = _2600;
    }
    float _4851 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _4862 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _4873 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _2842 = ((isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2815 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1052))) + ((_2821 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1891)) * cbPerFrame._m0[3u].x);
    float _2843 = ((isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2817 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1052))) + ((_2823 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1891)) * cbPerFrame._m0[3u].x);
    float _2844 = ((isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2819 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1052))) + ((_2825 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1891)) * cbPerFrame._m0[3u].x);
    uint _2845 = _285 + 6u;
    float _2853 = _974 / cbSceneParam._m0[86u].x;
    float _2854 = _975 / cbSceneParam._m0[86u].y;
    vec4 _2868 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2853, _2854, (log2((isnan(cbSceneParam._m0[77u].w) ? _897 : (isnan(_897) ? cbSceneParam._m0[77u].w : min(_897, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2870 = _2868.x;
    float _2871 = _2868.y;
    float _2872 = _2868.z;
    float _2873 = _2868.w;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    if (_897 > cbSceneParam._m0[78u].w)
    {
        float _2928 = isnan(_897) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _897 : min(cbSceneParam._m0[80u].w, _897));
        float _2929 = _2928 / _897;
        float _2940 = _2929 * _947;
        float _2941 = _948 * _2929;
        float _2942 = (-0.0) - _2941;
        float _2944 = _2929 * _949;
        float _2946 = (cbSceneParam._m0[77u].w * _2942) / _2928;
        float _2947 = _2946 + cbSceneParam._m0[79u].w;
        float _2948 = cbSceneParam._m0[79u].w - _2941;
        float _2954 = sqrt(((_2940 * _2940) + (_2941 * _2941)) + (_2944 * _2944));
        float _2957 = (1.0 - (cbSceneParam._m0[77u].w / _2928)) * _2954;
        float _2962 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2964 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3141;
        if (abs((_2942 - _2946) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3141 = ((((_2947 > 0.0) ? exp2(_2962 * _2947) : (2.0 - exp2(_2964 * _2947))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2957;
        }
        else
        {
            float _3085 = 1.0 / cbSceneParam._m0[80u].x;
            float _3086 = isnan(_2948) ? _2947 : (isnan(_2947) ? _2948 : max(_2947, _2948));
            float _3087 = isnan(_2948) ? _2947 : (isnan(_2947) ? _2948 : min(_2947, _2948));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            float _3097 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : min(_3087, 0.0));
            _3141 = ((abs(_2954 / _2942) * cbSceneParam._m0[80u].y) * ((((_3096 - _3097) * 2.0) - ((exp2(_2962 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0)))) - exp2(_2962 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))))) * _3085)) - ((exp2(_2964 * _3096) - exp2(_2964 * _3097)) * _3085))) + (_2957 * cbSceneParam._m0[80u].z);
        }
        vec4 _3143 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2853, _2854, 1.0), 0.0);
        float _3152 = exp2((_3141 * (-1.44269502162933349609375)) * (1.0 - _3143.w));
        float _3153 = log2(_3152);
        float _3169 = log2(_2873);
        _2966 = (exp2(_3169 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].x)) * _3143.x) / cbSceneParam._m0[78u].x)) + _2870;
        _2968 = (exp2(_3169 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].y)) * _3143.y) / cbSceneParam._m0[78u].y)) + _2871;
        _2970 = (exp2(_3169 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].z)) * _3143.z) / cbSceneParam._m0[78u].z)) + _2872;
        _2972 = _3152 * _2873;
    }
    else
    {
        _2966 = _2870;
        _2968 = _2871;
        _2970 = _2872;
        _2972 = _2873;
    }
    bool _3179;
    vec4 _2982;
    vec4 _3004;
    float _3006;
    float _3010;
    float _3011;
    float _3012;
    float _3013;
    bool _3023;
    for (;;)
    {
        _2982 = cbMatDynParam._m0[0u];
        float _2984 = roundEven(_2982.y);
        bool _2985 = _2984 == 3.0;
        float _2986 = log2(_2972);
        float _2993 = exp2(_2986 * cbSceneParam._m0[78u].x) * _2842;
        float _2994 = exp2(_2986 * cbSceneParam._m0[78u].y) * _2843;
        float _2995 = exp2(_2986 * cbSceneParam._m0[78u].z) * _2844;
        float _3002 = _963 + (-0.5);
        _3004 = cbMtdParam._m0[1u];
        _3006 = _3004.y * _3002;
        float _3009 = (_2984 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3010 = _3009 * (_2985 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2966)));
        _3011 = _3009 * (_2985 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2968)));
        _3012 = _3009 * (_2985 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2970)));
        _3013 = _3002 * 0.999000012874603271484375;
        _3023 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3023)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3013) < 0.5)
            {
                _3179 = true;
                break;
            }
        }
        uint _3120 = _1012 + uint(_2982.w);
        if ((cbInstanceData._m0[_3120].w < 1.0) && ((cbInstanceData._m0[_3120].w + _3013) < 0.5))
        {
            _3179 = true;
            break;
        }
        if ((_3006 + 1.0) < _3004.x)
        {
            _3179 = true;
            break;
        }
        _3179 = false;
        break;
    }
    float _3384;
    if (_3179)
    {
        discard_state = true;
        _3384 = 0.0;
    }
    else
    {
        _3384 = cbInstanceData._m0[_2845].w;
    }
    SV_Target.x = _3010;
    SV_Target.y = _3011;
    SV_Target.z = _3012;
    SV_Target.w = _3384;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2845].w;
    discard_exit();
}


