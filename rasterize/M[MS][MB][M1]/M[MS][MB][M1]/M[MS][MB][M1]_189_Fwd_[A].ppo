#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1455;
float _3835;
float _3836;
float _3837;
float _3838;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _369 = _367.x;
    float _381 = dot(vec4(_369, _367.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _398 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_369 - _381) * cbMtdParam._m0[24u].y) + _381) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3847 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _406 = (_399 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _407 = (_399 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _408 = (_399 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _457 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _471 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_447 - _457) * cbMtdParam._m0[24u].y) + _457) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3858 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _479 = (_472 * ((_425.x * cbMtdParam._m0[13u].x) - _406)) + _406;
    float _480 = (_472 * ((_425.y * cbMtdParam._m0[13u].y) - _407)) + _407;
    float _481 = (_472 * ((_425.z * cbMtdParam._m0[13u].z) - _408)) + _408;
    vec4 _499 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _527 = ((_499.x - _518) * _399) + _518;
    float _528 = ((_499.y - _519) * _399) + _519;
    float _529 = ((_499.z - _520) * _399) + _520;
    vec4 _541 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _554 = ((_541.z - _529) * _472) + _529;
    float _557 = ((((_541.x - _527) * _472) + _527) * 2.0) + (-1.0);
    float _559 = ((((_541.y - _528) * _472) + _528) * 2.0) + (-1.0);
    float _560 = dot(vec2(_557, _559), vec2(_557, _559));
    float _3869 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _565 = sqrt(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))));
    vec4 _579 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _604 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _606 = _604.x;
    float _607 = 1.0 - _606;
    float _613 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _616 = ((isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : min(_613, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _625 = (_616 - ((((((_606 - _607) * cbMtdParam._m0[24u].z) + _607) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _616))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3890 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _633 = (_626 * (cbMtdParam._m0[17u].x - _479)) + _479;
    float _634 = (_626 * (cbMtdParam._m0[17u].y - _480)) + _480;
    float _635 = (_626 * (cbMtdParam._m0[17u].z - _481)) + _481;
    vec4 _647 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _649 = _647.x;
    float _650 = 1.0 - _649;
    float _677 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_649 - _650) * cbMtdParam._m0[24u].w) + _650) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3901 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _678 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _686 = ((((cbMtdParam._m0[10u].x - _633) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _678) + _633;
    float _687 = ((((cbMtdParam._m0[10u].y - _634) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _678) + _634;
    float _688 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _635)) * _678) + _635;
    vec4 _714 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _716 = _714.x;
    float _734 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _716) * _399) + _716;
    float _751 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _734) * _472) + _734;
    float _755 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _751) * cbMtdParam._m0[19u].z) + _751;
    float _757 = _755 - (_755 * _626);
    float _759 = _757 - (_757 * _678);
    float _763 = (cbMtdParam._m0[19u].w * (_579.z - _554)) + _554;
    vec4 _777 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _784 = (_777.x * 2.0) + (-1.0);
    float _785 = (_777.y * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _3912 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _794 = (_626 * (_777.z - _763)) + _763;
    float _797 = ((cbMtdParam._m0[23u].y - _794) * _678) + _794;
    vec4 _816 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _822 = (_816.x * 2.0) + (-1.0);
    float _823 = (_816.y * 2.0) + (-1.0);
    float _824 = dot(vec2(_822, _823), vec2(_822, _823));
    float _3923 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _832 = (((_579.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _557;
    float _833 = (((_579.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _559;
    float _845 = (((_784 - _832) + (cbMtdParam._m0[21u].x * _832)) * _626) + _832;
    float _846 = (((_785 - _833) + (cbMtdParam._m0[21u].x * _833)) * _626) + _833;
    float _847 = (_626 * (sqrt(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) - _565)) + _565;
    float _858 = (((_822 - _845) + (_845 * cbMtdParam._m0[22u].z)) * _678) + _845;
    float _859 = (((_823 - _846) + (_846 * cbMtdParam._m0[22u].z)) * _678) + _846;
    float _860 = ((sqrt(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) - _847) * _678) + _847;
    float _862 = cbMtdParam._m0[22u].x + _579.w;
    float _865 = fma(_860, _248 * NORMAL.x, fma(_859, _255 * TANGENT.x, (_241 * _233) * _858));
    float _868 = fma(_860, _248 * NORMAL.y, fma(_859, _255 * TANGENT.y, (_241 * _234) * _858));
    float _871 = fma(_860, _248 * NORMAL.z, fma(_859, _255 * TANGENT.z, (_241 * _235) * _858));
    float _875 = inversesqrt(dot(vec3(_865, _868, _871), vec3(_865, _868, _871)));
    float _876 = _875 * _865;
    float _877 = _875 * _868;
    float _878 = _875 * _871;
    float _3934 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _879 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _3956 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _3967 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3978 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _3989 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _884 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _898 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _948 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _938);
    float _949 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _938);
    float _950 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _938);
    float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
    float _955 = _948 * _954;
    float _956 = _949 * _954;
    float _957 = _950 * _954;
    vec4 _962 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _964 = _962.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1136 = sqrt(((_948 * _948) + (_949 * _949)) + (_950 * _950));
        float _1142 = (cbMatDynParam._m0[5u].x * _1136) + cbMatDynParam._m0[5u].y;
        float _4000 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1147 = (cbMatDynParam._m0[5u].z * _1136) + cbMatDynParam._m0[5u].w;
        float _4011 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) - _1143)) + _1143) < ((_964 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _975 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _976 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _994 = fma(_878, cbSceneParam._m0[5u].z, fma(_877, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _876));
    float _997 = fma(_878, cbSceneParam._m0[6u].z, fma(_877, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _876));
    float _1000 = fma(_878, cbSceneParam._m0[7u].z, fma(_877, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _876));
    uint _1013 = _261 + 9u;
    uint _1014 = _1013 + uint(cbMatDynParam._m0[0u].w);
    float _1020 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) * cbInstanceData._m0[_1014].x;
    float _1021 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * cbInstanceData._m0[_1014].y;
    float _1022 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * cbInstanceData._m0[_1014].z;
    float _4022 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1023 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1024 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _4044 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _1026 = 1.0 - _884;
    float _1027 = _1023 * _1026;
    float _1028 = _1024 * _1026;
    float _1029 = _1025 * _1026;
    float _1034 = (_1023 + (-0.039999999105930328369140625)) * _884;
    float _1035 = (_1024 + (-0.039999999105930328369140625)) * _884;
    float _1036 = (_1025 + (-0.039999999105930328369140625)) * _884;
    float _1037 = _1034 + 0.039999999105930328369140625;
    float _1039 = _1035 + 0.039999999105930328369140625;
    float _1040 = _1036 + 0.039999999105930328369140625;
    vec4 _1049 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _975, cbSceneParam._m0[86u].y * _976));
    float _1053 = ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * TEXCOORD_5.w) * _1049.x;
    float _1054 = dot(vec3(_876, _877, _878), vec3(_955, _956, _957));
    float _1057 = _1054 * 2.0;
    float _1061 = (_1057 * _876) - _955;
    float _1062 = (_1057 * _877) - _956;
    float _1063 = (_1057 * _878) - _957;
    float _1067 = abs(dot(vec3(_955, _956, _957), vec3(_876, _877, _878)));
    float _4055 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1069 = sqrt(_879);
    float _1082 = exp2((_1069 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1069 * 3.0));
    float _1088 = (1.0 - _1082) * ((_1069 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1089 = _1082 * _1069;
    float _1117 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1454;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1179 = fma(_1125, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1117));
        float _1183 = fma(_1125, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1117));
        float _1187 = fma(_1125, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1117));
        float _1212 = _1117 + _876;
        float _1213 = _1121 + _877;
        float _1214 = _1125 + _878;
        float _1224 = fma(_1214, cbModelParam._m0[26u].z, fma(_1213, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1212)) - _1179;
        float _1225 = fma(_1214, cbModelParam._m0[27u].z, fma(_1213, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1212)) - _1183;
        float _1226 = fma(_1214, cbModelParam._m0[28u].z, fma(_1213, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1212)) - _1187;
        float _1230 = inversesqrt(dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226)));
        float _1243 = ((_1230 * _1224) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1179 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1230 * _1225) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1183 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1230 * _1226) / cbModelParam._m0[34u].z) + ((((((_1187 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        float _1282 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1248.x + (-0.5));
        float _1284 = _1282 * (_1248.y + (-0.5));
        float _1285 = _1282 * (_1248.z + (-0.5));
        float _1292 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1255.x + (-0.5));
        float _1294 = _1292 * (_1255.y + (-0.5));
        float _1295 = _1292 * (_1255.z + (-0.5));
        float _1302 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1262.x + (-0.5));
        float _1304 = _1302 * (_1262.y + (-0.5));
        float _1305 = _1302 * (_1262.z + (-0.5));
        float _1312 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1269.x + (-0.5));
        float _1314 = _1312 * (_1269.y + (-0.5));
        float _1315 = _1312 * (_1269.z + (-0.5));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = _1283 * 0.5;
        float _1320 = _1293 * 0.5;
        float _1321 = _1303 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1336 = (dot(vec3(_876, _877, _878), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1346 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4103 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1348 + 1.0))) + _1353) * _1316;
        float _1363 = _1284 * 0.5;
        float _1364 = _1294 * 0.5;
        float _1365 = _1304 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_876, _877, _878), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4136 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1390 + 1.0))) + _1395) * _1317;
        float _1405 = _1285 * 0.5;
        float _1406 = _1295 * 0.5;
        float _1407 = _1305 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_876, _877, _878), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4169 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1432 + 1.0))) + _1437) * _1318;
        _1454 = _1285;
        _1456 = _1284;
        _1457 = _1283;
        _1458 = _1295;
        _1459 = _1294;
        _1460 = _1293;
        _1461 = _1305;
        _1462 = _1304;
        _1463 = _1303;
        _1464 = _1318;
        _1465 = _1317;
        _1466 = _1316;
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
    }
    else
    {
        _1454 = _1455;
        _1456 = _1455;
        _1457 = _1455;
        _1458 = _1455;
        _1459 = _1455;
        _1460 = _1455;
        _1461 = _1455;
        _1462 = _1455;
        _1463 = _1455;
        _1464 = _1455;
        _1465 = _1455;
        _1466 = _1455;
        _1467 = 0.0;
        _1468 = 0.0;
        _1469 = 0.0;
    }
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1496 = fma(_1125, cbModelParam._m0[30u].z, fma(_1121, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1117));
        float _1500 = fma(_1125, cbModelParam._m0[31u].z, fma(_1121, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1117));
        float _1504 = fma(_1125, cbModelParam._m0[32u].z, fma(_1121, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1117));
        float _1527 = _1117 + _876;
        float _1528 = _1121 + _877;
        float _1529 = _1125 + _878;
        float _1539 = fma(_1529, cbModelParam._m0[30u].z, fma(_1528, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1527)) - _1496;
        float _1540 = fma(_1529, cbModelParam._m0[31u].z, fma(_1528, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1527)) - _1500;
        float _1541 = fma(_1529, cbModelParam._m0[32u].z, fma(_1528, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1527)) - _1504;
        float _1545 = inversesqrt(dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541)));
        float _1558 = ((_1545 * _1539) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1496 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1559 = ((_1545 * _1540) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1500 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1560 = ((_1545 * _1541) / cbModelParam._m0[35u].z) + ((((((_1504 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        float _1595 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1562.x + (-0.5));
        float _1597 = _1595 * (_1562.y + (-0.5));
        float _1598 = _1595 * (_1562.z + (-0.5));
        float _1605 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1569.x + (-0.5));
        float _1607 = _1605 * (_1569.y + (-0.5));
        float _1608 = _1605 * (_1569.z + (-0.5));
        float _1615 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1576.x + (-0.5));
        float _1617 = _1615 * (_1576.y + (-0.5));
        float _1618 = _1615 * (_1576.z + (-0.5));
        float _1625 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1583.x + (-0.5));
        float _1627 = _1625 * (_1583.y + (-0.5));
        float _1628 = _1625 * (_1583.z + (-0.5));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = _1596 * 0.5;
        float _1633 = _1606 * 0.5;
        float _1634 = _1616 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_876, _877, _878), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4232 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1659 + 1.0))) + _1664) * _1629;
        float _1674 = _1597 * 0.5;
        float _1675 = _1607 * 0.5;
        float _1676 = _1617 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_876, _877, _878), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4265 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1701 + 1.0))) + _1706) * _1630;
        float _1716 = _1598 * 0.5;
        float _1717 = _1608 * 0.5;
        float _1718 = _1618 * 0.5;
        float _1719 = dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718));
        float _1724 = (_1719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1719);
        float _1732 = (dot(vec3(_876, _877, _878), vec3(_1724 * _1716, _1724 * _1717, _1724 * _1718)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1741 = sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1743 = _1742 * 2.0;
        float _1747 = (1.0 - _1742) / (_1742 + 1.0);
        float _4298 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1757 = ((((1.0 - _1748) * (_1743 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1743 + 1.0))) + _1748) * _1631;
        _1765 = _1598;
        _1766 = _1597;
        _1767 = _1596;
        _1768 = _1608;
        _1769 = _1607;
        _1770 = _1606;
        _1771 = _1618;
        _1772 = _1617;
        _1773 = _1616;
        _1774 = _1631;
        _1775 = _1630;
        _1776 = _1629;
        _1777 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)));
    }
    else
    {
        _1765 = _1455;
        _1766 = _1455;
        _1767 = _1455;
        _1768 = _1455;
        _1769 = _1455;
        _1770 = _1455;
        _1771 = _1455;
        _1772 = _1455;
        _1773 = _1455;
        _1774 = _1455;
        _1775 = _1455;
        _1776 = _1455;
        _1777 = 0.0;
        _1778 = 0.0;
        _1779 = 0.0;
    }
    float _1789 = (cbModelParam._m0[1u].x * (_1777 - _1467)) + _1467;
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1468)) + _1468;
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1469)) + _1469;
    float _1812 = fma(_1791, cbSceneParam._m0[89u].z, fma(_1790, cbSceneParam._m0[89u].y, _1789 * cbSceneParam._m0[89u].x));
    float _1815 = fma(_1791, cbSceneParam._m0[90u].z, fma(_1790, cbSceneParam._m0[90u].y, _1789 * cbSceneParam._m0[90u].x));
    float _1818 = fma(_1791, cbSceneParam._m0[91u].z, fma(_1790, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1789));
    float _1833 = _1061 * 0.5;
    float _1834 = _1062 * 0.5;
    float _1835 = _1063 * 0.5;
    float _1836 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1839 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1842 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1765, _1768, _1771, _1774));
    float _1876;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1849 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1454, _1458, _1461, _1464));
        float _1853 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1456, _1459, _1462, _1465));
        float _1857 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1457, _1460, _1463, _1466));
        float _1864 = dot(vec4(cbModelParam._m0[39u]), vec4(_1833, _1834, _1835, 1.0));
        _1876 = dot(vec3(isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1864) ? 0.0 : (isnan(0.0) ? _1864 : max(0.0, _1864))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1876 = 1.0;
    }
    float _1887;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1878 = dot(vec4(cbModelParam._m0[40u]), vec4(_1833, _1834, _1835, 1.0));
        _1887 = dot(vec3(isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1878) ? 0.0 : (isnan(0.0) ? _1878 : max(0.0, _1878))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1887 = 1.0;
    }
    float _1891 = (_1887 * cbModelParam._m0[1u].x) + (_1876 * (1.0 - cbModelParam._m0[1u].x));
    float _1901 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _879);
    float _1902 = isnan(_1901) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1901 : min(cbModelParam._m0[25u].z, _1901));
    float _1983;
    float _1985;
    float _1987;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1950 = fma(_1125, cbModelParam._m0[13u].z, fma(_1121, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1117)) + cbModelParam._m0[13u].w;
        float _1954 = fma(_1125, cbModelParam._m0[14u].z, fma(_1121, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1117)) + cbModelParam._m0[14u].w;
        float _1958 = fma(_1125, cbModelParam._m0[15u].z, fma(_1121, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1117)) + cbModelParam._m0[15u].w;
        float _1961 = fma(_1063, cbModelParam._m0[13u].z, fma(_1062, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061));
        float _1964 = fma(_1063, cbModelParam._m0[14u].z, fma(_1062, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061));
        float _1967 = fma(_1063, cbModelParam._m0[15u].z, fma(_1062, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061));
        float _1995;
        if (_1961 > 0.0)
        {
            _1995 = abs((1.0 - _1950) / _1961);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1950 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1995 = frontier_phi_17_15_ladder;
        }
        float _2198;
        if (_1964 > 0.0)
        {
            _2198 = abs((1.0 - _1954) / _1964);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1954 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2198 = frontier_phi_26_22_ladder;
        }
        float _2452;
        if (_1967 > 0.0)
        {
            _2452 = abs((1.0 - _1958) / _1967);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1958 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2452 = frontier_phi_38_33_ladder;
        }
        float _2454 = isnan(_2198) ? _1995 : (isnan(_1995) ? _2198 : min(_1995, _2198));
        float _2455 = isnan(_2452) ? _2454 : (isnan(_2454) ? _2452 : min(_2454, _2452));
        float _2459 = (_2455 * _1961) + _1950;
        float _2460 = (_2455 * _1964) + _1954;
        float _2461 = (_2455 * _1967) + _1958;
        float _2462 = _2455 * 9.9999997473787516355514526367188e-05;
        float _2464 = (-1.0) - _2462;
        float _2466 = _2462 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2461 > _2466) || ((_2461 < _2464) || ((_2460 > _2466) || ((_2460 < _2464) || ((_2459 < _2464) || (_2459 > _2466))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2589 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2461, cbModelParam._m0[9u].z, fma(_2460, cbModelParam._m0[9u].y, _2459 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2461, cbModelParam._m0[10u].z, fma(_2460, cbModelParam._m0[10u].y, _2459 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2461, cbModelParam._m0[11u].z, fma(_2460, cbModelParam._m0[11u].y, _2459 * cbModelParam._m0[11u].x))), _1902);
            frontier_phi_16_38_ladder = _2589.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2589.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2589.x * cbModelParam._m0[1u].y;
        }
        _1983 = frontier_phi_16_38_ladder_2;
        _1985 = frontier_phi_16_38_ladder_1;
        _1987 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1061, _1062, _1063), _1902);
        _1983 = _1971.x * cbModelParam._m0[1u].y;
        _1985 = _1971.y * cbModelParam._m0[1u].y;
        _1987 = _1971.z * cbModelParam._m0[1u].y;
    }
    float _1991 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _879);
    float _1992 = isnan(_1991) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1991 : min(cbModelParam._m0[25u].w, _1991));
    float _2082;
    float _2084;
    float _2086;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2046 = fma(_1125, cbModelParam._m0[21u].z, fma(_1121, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1117)) + cbModelParam._m0[21u].w;
        float _2050 = fma(_1125, cbModelParam._m0[22u].z, fma(_1121, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1117)) + cbModelParam._m0[22u].w;
        float _2054 = fma(_1125, cbModelParam._m0[23u].z, fma(_1121, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1117)) + cbModelParam._m0[23u].w;
        float _2057 = fma(_1063, cbModelParam._m0[21u].z, fma(_1062, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061));
        float _2060 = fma(_1063, cbModelParam._m0[22u].z, fma(_1062, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061));
        float _2063 = fma(_1063, cbModelParam._m0[23u].z, fma(_1062, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061));
        float _2203;
        if (_2057 > 0.0)
        {
            _2203 = abs((1.0 - _2046) / _2057);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2046 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2203 = frontier_phi_28_24_ladder;
        }
        float _2479;
        if (_2060 > 0.0)
        {
            _2479 = abs((1.0 - _2050) / _2060);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2050 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2479 = frontier_phi_40_35_ladder;
        }
        float _2692;
        if (_2063 > 0.0)
        {
            _2692 = abs((1.0 - _2054) / _2063);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2054 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2692 = frontier_phi_49_46_ladder;
        }
        float _2694 = isnan(_2479) ? _2203 : (isnan(_2203) ? _2479 : min(_2203, _2479));
        float _2695 = isnan(_2692) ? _2694 : (isnan(_2694) ? _2692 : min(_2694, _2692));
        float _2699 = (_2695 * _2057) + _2046;
        float _2700 = (_2695 * _2060) + _2050;
        float _2701 = (_2695 * _2063) + _2054;
        float _2702 = _2695 * 9.9999997473787516355514526367188e-05;
        float _2703 = (-1.0) - _2702;
        float _2705 = _2702 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2701 > _2705) || ((_2701 < _2703) || ((_2700 > _2705) || ((_2700 < _2703) || ((_2699 < _2703) || (_2699 > _2705))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2900 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2701, cbModelParam._m0[17u].z, fma(_2700, cbModelParam._m0[17u].y, _2699 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2701, cbModelParam._m0[18u].z, fma(_2700, cbModelParam._m0[18u].y, _2699 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2701, cbModelParam._m0[19u].z, fma(_2700, cbModelParam._m0[19u].y, _2699 * cbModelParam._m0[19u].x))), _1992);
            frontier_phi_25_49_ladder = _2900.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2900.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2900.x * cbModelParam._m0[1u].z;
        }
        _2082 = frontier_phi_25_49_ladder_2;
        _2084 = frontier_phi_25_49_ladder_1;
        _2086 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2066 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1061, _1062, _1063), _1992);
        _2082 = _2066.x * cbModelParam._m0[1u].z;
        _2084 = _2066.y * cbModelParam._m0[1u].z;
        _2086 = _2066.z * cbModelParam._m0[1u].z;
    }
    float _2099 = (((_1088 * _1037) + _1089) * _1053) * ((cbModelParam._m0[1u].w * (_2082 - _1983)) + _1983);
    float _2101 = (((_1088 * _1039) + _1089) * _1053) * ((cbModelParam._m0[1u].w * (_2084 - _1985)) + _1985);
    float _2103 = (((_1088 * _1040) + _1089) * _1053) * ((cbModelParam._m0[1u].w * (_2086 - _1987)) + _1987);
    float _2106 = fma(_2103, cbSceneParam._m0[89u].z, fma(_2101, cbSceneParam._m0[89u].y, _2099 * cbSceneParam._m0[89u].x));
    float _2109 = fma(_2103, cbSceneParam._m0[90u].z, fma(_2101, cbSceneParam._m0[90u].y, _2099 * cbSceneParam._m0[90u].x));
    float _2112 = fma(_2103, cbSceneParam._m0[91u].z, fma(_2101, cbSceneParam._m0[91u].y, _2099 * cbSceneParam._m0[91u].x));
    uvec4 _2122 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2124 = _2122.x * 14u;
    uint _2125 = _2124 + 13u;
    float _2132 = _1053 + (-1.0);
    float _2137 = (cbLight._m0[_2125].x * _2132) + 1.0;
    float _2138 = (cbLight._m0[_2125].y * _2132) + 1.0;
    float _2139 = (cbLight._m0[_2125].z * _2132) + 1.0;
    float _2140 = (cbLight._m0[_2125].w * _2132) + 1.0;
    uint _2141 = _2124 + 5u;
    float _2147 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
    uint _2151 = _2124 + 4u;
    float _2157 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
    uint _2161 = _2124 | 1u;
    float _2172 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_876, _877, _878));
    float _2175 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_876, _877, _878));
    float _4434 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _4445 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2180 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * 0.3183098733425140380859375;
    float _2182 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * 0.3183098733425140380859375;
    float _2189 = ((cbLight._m0[_2141].x * _2147) * _2182) + ((cbLight._m0[_2151].x * _2157) * _2180);
    float _2190 = ((_2147 * cbLight._m0[_2141].y) * _2182) + ((_2157 * cbLight._m0[_2151].y) * _2180);
    float _2191 = ((_2147 * cbLight._m0[_2141].z) * _2182) + ((_2157 * cbLight._m0[_2151].z) * _2180);
    uvec4 _2195 = floatBitsToUint(cbLight._m0[_2124 + 12u]);
    bool _2197 = _2195.x == 0u;
    float _2208;
    float _2210;
    float _2212;
    if (_2197)
    {
        _2208 = _2189;
        _2210 = _2190;
        _2212 = _2191;
    }
    else
    {
        uint _2216 = _2124 + 6u;
        float _2232 = (dot(vec3(cbLight._m0[_2124 + 2u].xyz), vec3(_876, _877, _878)) * 0.5) + 0.5;
        float _2233 = _2232 * _2232;
        float _4456 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2234 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2235 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2208 = (((cbLight._m0[_2216].x * 0.3183098733425140380859375) * _2234) * _2235) + _2189;
        _2210 = (((cbLight._m0[_2216].y * 0.3183098733425140380859375) * _2234) * _2235) + _2190;
        _2212 = (((cbLight._m0[_2216].z * 0.3183098733425140380859375) * _2234) * _2235) + _2191;
    }
    bool _2215 = _2195.y == 0u;
    float _2253;
    float _2255;
    float _2257;
    if (_2215)
    {
        _2253 = _2208;
        _2255 = _2210;
        _2257 = _2212;
    }
    else
    {
        uint _2423 = _2124 + 7u;
        float _2439 = (dot(vec3(cbLight._m0[_2124 + 3u].xyz), vec3(_876, _877, _878)) * 0.5) + 0.5;
        float _2440 = _2439 * _2439;
        float _4472 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2441 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2442 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2253 = (((cbLight._m0[_2423].x * 0.3183098733425140380859375) * _2441) * _2442) + _2208;
        _2255 = (((cbLight._m0[_2423].y * 0.3183098733425140380859375) * _2441) * _2442) + _2210;
        _2257 = (((cbLight._m0[_2423].z * 0.3183098733425140380859375) * _2441) * _2442) + _2212;
    }
    uint _2260 = _2124 + 8u;
    float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _879) * 0.949999988079071044921875);
    float _2274 = _2273 * _2273;
    float _2275 = cbLight._m0[_2124].x + _955;
    float _2276 = cbLight._m0[_2124].y + _956;
    float _2277 = cbLight._m0[_2124].z + _957;
    float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
    float _2282 = _2281 * _2275;
    float _2283 = _2281 * _2276;
    float _2284 = _2281 * _2277;
    float _2285 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2124].xyz));
    float _4488 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _4499 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _2289 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2290 = dot(vec3(_876, _877, _878), vec3(_2282, _2283, _2284));
    float _4510 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2294 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2282, _2283, _2284));
    float _4521 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2298 = _2274 * _2274;
    float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
    float _2310 = exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0);
    float _2311 = 0.959999978542327880859375 - _1034;
    float _2313 = 0.959999978542327880859375 - _1035;
    float _2314 = 0.959999978542327880859375 - _1036;
    float _2321 = 1.0 - _2274;
    float _2332 = (0.5 / (((_2289 * ((_2288 * _2321) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2321) + _2274) * _2288))) * _2288;
    float _4532 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2334 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
    uint _2345 = _2124 + 9u;
    float _2356 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _879) * 0.949999988079071044921875);
    float _2357 = _2356 * _2356;
    float _2358 = cbLight._m0[_2161].x + _955;
    float _2359 = cbLight._m0[_2161].y + _956;
    float _2360 = cbLight._m0[_2161].z + _957;
    float _2364 = inversesqrt(dot(vec3(_2358, _2359, _2360), vec3(_2358, _2359, _2360)));
    float _2365 = _2364 * _2358;
    float _2366 = _2364 * _2359;
    float _2367 = _2364 * _2360;
    float _2368 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2161].xyz));
    float _4543 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2371 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2372 = dot(vec3(_876, _877, _878), vec3(_2365, _2366, _2367));
    float _4554 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2376 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2365, _2366, _2367));
    float _4565 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2380 = _2357 * _2357;
    float _2384 = ((_2375 * _2375) * (_2380 + (-1.0))) + 1.0;
    float _2391 = exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0);
    float _2398 = 1.0 - _2357;
    float _2408 = (0.5 / (((_2289 * ((_2371 * _2398) + _2357)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2398) + _2357) * _2371))) * _2371;
    float _4576 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2410 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2380 / ((_2384 * _2384) * 3.141590118408203125));
    float _2420 = (((((_2391 * _2311) + _1037) * cbLight._m0[_2345].x) * _2410) * _2147) + (((((_2310 * _2311) + _1037) * cbLight._m0[_2260].x) * _2334) * _2157);
    float _2421 = (((((_2391 * _2313) + _1039) * cbLight._m0[_2345].y) * _2410) * _2147) + (((((_2310 * _2313) + _1039) * cbLight._m0[_2260].y) * _2334) * _2157);
    float _2422 = (((((_2391 * _2314) + _1040) * cbLight._m0[_2345].z) * _2410) * _2147) + (((((_2310 * _2314) + _1040) * cbLight._m0[_2260].z) * _2334) * _2157);
    float _2484;
    float _2486;
    float _2488;
    if (_2197)
    {
        _2484 = _2420;
        _2486 = _2421;
        _2488 = _2422;
    }
    else
    {
        uint _2490 = _2124 + 2u;
        uint _2494 = _2124 + 10u;
        float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2490].w)) * _879) * 0.949999988079071044921875);
        float _2509 = _2508 * _2508;
        float _2510 = cbLight._m0[_2490].x + _955;
        float _2511 = cbLight._m0[_2490].y + _956;
        float _2512 = cbLight._m0[_2490].z + _957;
        float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
        float _2517 = _2516 * _2510;
        float _2518 = _2516 * _2511;
        float _2519 = _2516 * _2512;
        float _2520 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2490].xyz));
        float _4587 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2524 = dot(vec3(_876, _877, _878), vec3(_2517, _2518, _2519));
        float _4598 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2528 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_2517, _2518, _2519));
        float _4609 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2532 = _2509 * _2509;
        float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
        float _2543 = exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0);
        float _2550 = 1.0 - _2509;
        float _2560 = (0.5 / (((_2289 * ((_2523 * _2550) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2550) + _2509) * _2523))) * _2523;
        float _4620 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2562 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
        float _2563 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2484 = (((((_2543 * _2311) + _1037) * cbLight._m0[_2494].x) * _2562) * _2563) + _2420;
        _2486 = (((((_2543 * _2313) + _1039) * cbLight._m0[_2494].y) * _2562) * _2563) + _2421;
        _2488 = (((((_2543 * _2314) + _1040) * cbLight._m0[_2494].z) * _2562) * _2563) + _2422;
    }
    float _2598;
    float _2600;
    float _2602;
    if (_2215)
    {
        _2598 = _2484;
        _2600 = _2486;
        _2602 = _2488;
    }
    else
    {
        uint _2609 = _2124 + 3u;
        uint _2613 = _2124 + 11u;
        float _2627 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2609].w)) * _879) * 0.949999988079071044921875);
        float _2628 = _2627 * _2627;
        float _2629 = cbLight._m0[_2609].x + _955;
        float _2630 = cbLight._m0[_2609].y + _956;
        float _2631 = cbLight._m0[_2609].z + _957;
        float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
        float _2636 = _2635 * _2629;
        float _2637 = _2635 * _2630;
        float _2638 = _2635 * _2631;
        float _2639 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2609].xyz));
        float _4636 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2643 = dot(vec3(_876, _877, _878), vec3(_2636, _2637, _2638));
        float _4647 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2647 = dot(vec3(cbLight._m0[_2609].xyz), vec3(_2636, _2637, _2638));
        float _4658 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2651 = _2628 * _2628;
        float _2655 = ((_2646 * _2646) * (_2651 + (-1.0))) + 1.0;
        float _2662 = exp2(log2(1.0 - (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) * 5.0);
        float _2669 = 1.0 - _2628;
        float _2679 = (0.5 / (((_2289 * ((_2642 * _2669) + _2628)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2669) + _2628) * _2642))) * _2642;
        float _4669 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2681 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2651 / ((_2655 * _2655) * 3.141590118408203125));
        float _2682 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2598 = (((((_2662 * _2311) + _1037) * cbLight._m0[_2613].x) * _2681) * _2682) + _2484;
        _2600 = (((((_2662 * _2313) + _1039) * cbLight._m0[_2613].y) * _2681) * _2682) + _2486;
        _2602 = (((((_2662 * _2314) + _1040) * cbLight._m0[_2613].z) * _2681) * _2682) + _2488;
    }
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    if (_2122.y == 0u)
    {
        float _2757 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2758 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2757;
        float _2759 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2757;
        float _2760 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2757;
        uvec4 _2772 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2773 = _2772.x;
        uint _2784 = uint((float(_2772.y) * floor(float(uint(cbSceneParam._m0[85u].y * _976) / _2773))) + floor(float(uint(cbSceneParam._m0[85u].x * _975) / _2773)));
        float _2794 = (log2(_2760 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2795 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        uint _2798 = uint(isnan(14.0) ? _2795 : (isnan(_2795) ? 14.0 : min(_2795, 14.0)));
        uvec4 _2803 = texelFetch(g_lightClusterGridBuffer, int(((_2798 << 2u) + (_2784 << 6u)) >> 2u));
        uint _2804 = _2803.x;
        uint _2805 = _2772.z;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        if (((((1u << ((_2805 >> 4u) & 15u)) + 4294967295u) & _2804) == 0u) || ((_2805 & 240u) == 0u))
        {
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
        }
        else
        {
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            uint _3064 = 0u;
            uint _3073;
            bool _3074;
            for (;;)
            {
                _3073 = texelFetch(g_lightClassification, int((((_2798 << 5u) + (_2784 << 9u)) + (_3064 << 2u)) >> 2u)).x;
                _3074 = _3073 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3074)
                {
                    frontier_phi_66_pred = _3058;
                    frontier_phi_66_pred_1 = _3063;
                    frontier_phi_66_pred_2 = _3062;
                    frontier_phi_66_pred_3 = _3061;
                    frontier_phi_66_pred_4 = _3060;
                    frontier_phi_66_pred_5 = _3059;
                }
                else
                {
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    uint _3209;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3060;
                    _3206 = _3061;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3073;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    for (;;)
                    {
                        uint _3213 = uint(findLSB(_3209)) + (_3064 << 5u);
                        uint _3210 = (_3209 + 4294967295u) & _3209;
                        uint _3215 = _3213 * 48u;
                        vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3235 = (_3213 * 48u) + 4u;
                        vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 3u)).x));
                        uint _3254 = (_3213 * 48u) + 8u;
                        vec3 _3265 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x));
                        float _3269 = _3229.x - _2758;
                        float _3270 = _3229.y - _2759;
                        float _3271 = _3229.z - _2760;
                        float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                        float _3275 = inversesqrt(_3272);
                        float _3276 = _3275 * _3269;
                        float _3277 = _3275 * _3270;
                        float _3278 = _3275 * _3271;
                        float _3279 = dot(vec3(_994, _997, _1000), vec3(_3276, _3277, _3278));
                        float _3284 = 1.0 - (_3272 * _3229.w);
                        float _4695 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3285 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                        float _3286 = sqrt(_3272) * _3248.w;
                        float _3289 = 1.39999997615814208984375 / (_3286 + 1.39999997615814208984375);
                        float _3290 = _3289 * _3289;
                        float _3293 = ((1.0 - _3290) * _3279) + _3290;
                        float _3296 = _3286 * _3286;
                        float _3300 = ((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3285) / ((_3296 * 0.699999988079071044921875) + 1.0);
                        float _3304 = (-0.0) - _2758;
                        float _3305 = (-0.0) - _2759;
                        float _3306 = (-0.0) - _2760;
                        float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                        float _3311 = _3310 * _3304;
                        float _3312 = _3310 * _3305;
                        float _3313 = _3310 * _3306;
                        float _3321 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                        float _3322 = 1.0 - _1069;
                        float _3329 = sqrt(1.0 - ((1.0 - (_3322 * _3322)) * (1.0 - (_3321 * _3321))));
                        float _3330 = _3329 * _3329;
                        float _3331 = _3330 * _3330;
                        float _3332 = _3311 + _3276;
                        float _3333 = _3312 + _3277;
                        float _3334 = _3313 + _3278;
                        float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                        float _3342 = dot(vec3(_994, _997, _1000), vec3(_3311, _3312, _3313));
                        float _4711 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3345 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                        float _3346 = dot(vec3(_994, _997, _1000), vec3(_3338 * _3332, _3338 * _3333, _3338 * _3334));
                        float _4722 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3349 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                        float _3353 = ((_3349 * _3349) * (_3331 + (-1.0))) + 1.0;
                        float _3354 = _3289 * _3330;
                        float _3355 = _3354 * _3354;
                        float _3358 = ((1.0 - _3355) * _3279) + _3355;
                        float _4733 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3359 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                        float _3360 = 1.0 - _3330;
                        float _3370 = (0.5 / (((_3359 * ((_3345 * _3360) + _3330)) + 9.9999999392252902907785028219223e-09) + (((_3359 * _3360) + _3330) * _3345))) * _3359;
                        float _4744 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3381 = (((_3331 * 3.1415927410125732421875) * (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) / ((_3353 * _3353) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125))) * _3285;
                        _3133 = (_3300 * _3248.x) + _3206;
                        _3134 = (_3300 * _3248.y) + _3207;
                        _3135 = (_3300 * _3248.z) + _3208;
                        _3130 = (_3381 * _3265.x) + _3203;
                        _3131 = (_3381 * _3265.y) + _3204;
                        _3132 = (_3381 * _3265.z) + _3205;
                        if (_3210 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3132;
                            _3206 = _3133;
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3210;
                        }
                    }
                    frontier_phi_66_pred = _3130;
                    frontier_phi_66_pred_1 = _3135;
                    frontier_phi_66_pred_2 = _3134;
                    frontier_phi_66_pred_3 = _3133;
                    frontier_phi_66_pred_4 = _3132;
                    frontier_phi_66_pred_5 = _3131;
                }
                _2906 = frontier_phi_66_pred;
                _2916 = frontier_phi_66_pred_1;
                _2914 = frontier_phi_66_pred_2;
                _2912 = frontier_phi_66_pred_3;
                _2910 = frontier_phi_66_pred_4;
                _2908 = frontier_phi_66_pred_5;
                uint _3065 = _3064 + 1u;
                if (_3065 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3058 = _2906;
                    _3059 = _2908;
                    _3060 = _2910;
                    _3061 = _2912;
                    _3062 = _2914;
                    _3063 = _2916;
                    _3064 = _3065;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
        }
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.z;
        uint _2922 = (_2920 >> 8u) & 15u;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        if (((4294967295u << _2922) & _2804) == 0u)
        {
            _3026 = _2905;
            _3028 = _2907;
            _3030 = _2909;
            _3032 = _2911;
            _3034 = _2913;
            _3036 = _2915;
        }
        else
        {
            float _3051 = inversesqrt(dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760)));
            float _3052 = _3051 * _2758;
            float _3053 = _3051 * _2759;
            float _3054 = _3051 * _2760;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2922 < ((_2920 >> 12u) & 15u))
            {
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3186 = _2905;
                float _3187 = _2907;
                float _3188 = _2909;
                float _3189 = _2911;
                float _3190 = _2913;
                float _3191 = _2915;
                uint _3192 = _2922;
                uint _3201;
                bool _3202;
                for (;;)
                {
                    _3201 = texelFetch(g_lightClassification, int((((_2798 << 5u) + (_2784 << 9u)) + (_3192 << 2u)) >> 2u)).x;
                    _3202 = _3201 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3202)
                    {
                        frontier_phi_77_pred = _3191;
                        frontier_phi_77_pred_1 = _3190;
                        frontier_phi_77_pred_2 = _3189;
                        frontier_phi_77_pred_3 = _3188;
                        frontier_phi_77_pred_4 = _3187;
                        frontier_phi_77_pred_5 = _3186;
                    }
                    else
                    {
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3408 = _3186;
                        float _3409 = _3187;
                        float _3410 = _3188;
                        float _3411 = _3189;
                        float _3412 = _3190;
                        float _3413 = _3191;
                        uint _3414 = _3201;
                        uint _3415;
                        vec4 _3440;
                        float _3441;
                        vec4 _3456;
                        vec3 _3468;
                        vec4 _3483;
                        vec4 _3498;
                        float _3544;
                        bool _3545;
                        for (;;)
                        {
                            uint _3425 = ((_3192 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3414));
                            _3415 = (_3414 + 4294967295u) & _3414;
                            uint _3427 = _3425 * 40u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            _3441 = _3440.w;
                            uint _3443 = (_3425 * 40u) + 4u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3425 * 40u) + 8u;
                            _3468 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x));
                            uint _3470 = (_3425 * 40u) + 16u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3485 = (_3425 * 40u) + 20u;
                            _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            uint _3500 = (_3425 * 40u) + 24u;
                            vec4 _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3519 = (_3425 * 40u) + 28u;
                            vec4 _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            _3544 = fma(_2760, _3532.z, fma(_2759, _3532.y, _3532.x * _2758)) + _3532.w;
                            _3545 = !((fma(_2760, _3513.z, fma(_2759, _3513.y, _3513.x * _2758)) + _3513.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3545)
                            {
                                float _3572 = _3440.x - _2758;
                                float _3573 = _3440.y - _2759;
                                float _3574 = _3440.z - _2760;
                                float _3575 = dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574));
                                float _3578 = inversesqrt(_3575);
                                float _3579 = _3578 * _3572;
                                float _3580 = _3578 * _3573;
                                float _3581 = _3578 * _3574;
                                float _3585 = 1.0 - (_3575 / (_3441 * _3441));
                                float _4755 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3586 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                                float _3590 = sqrt(_3575) * _3456.w;
                                float _3592 = 1.39999997615814208984375 / (_3590 + 1.39999997615814208984375);
                                float _3593 = _3592 * _3592;
                                float _3596 = ((1.0 - _3593) * dot(vec3(_3579, _3580, _3581), vec3(_994, _997, _1000))) + _3593;
                                float _3599 = _3590 * _3590;
                                float _3603 = (fma(_2760, _3483.z, fma(_2759, _3483.y, _3483.x * _2758)) + _3483.w) / _3544;
                                float _3604 = (fma(_2760, _3498.z, fma(_2759, _3498.y, _3498.x * _2758)) + _3498.w) / _3544;
                                float _3608 = 1.0 - dot(vec2(_3603, _3604), vec2(_3603, _3604));
                                float _4771 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3609 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3610 = _3609 * (((isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0))) * _3586) / ((_3599 * 0.699999988079071044921875) + 1.0));
                                float _3622 = exp2(log2(1.0 / ((_3599 * 3.5) + 5.0)) * 0.25);
                                float _3623 = 1.0 - _1069;
                                float _3630 = sqrt(1.0 - ((1.0 - (_3623 * _3623)) * (1.0 - (_3622 * _3622))));
                                float _3631 = _3630 * _3630;
                                float _3632 = _3631 * _3631;
                                float _3633 = _3579 - _3052;
                                float _3634 = _3580 - _3053;
                                float _3635 = _3581 - _3054;
                                float _3639 = inversesqrt(dot(vec3(_3633, _3634, _3635), vec3(_3633, _3634, _3635)));
                                float _3643 = dot(vec3(_994, _997, _1000), vec3((-0.0) - _3052, (-0.0) - _3053, (-0.0) - _3054));
                                float _4782 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3646 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                                float _3647 = dot(vec3(_994, _997, _1000), vec3(_3639 * _3633, _3639 * _3634, _3639 * _3635));
                                float _4793 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3650 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3654 = ((_3650 * _3650) * (_3632 + (-1.0))) + 1.0;
                                float _3655 = _3592 * _3631;
                                float _3656 = _3655 * _3655;
                                float _3662 = ((1.0 - _3656) * dot(vec3(_994, _997, _1000), vec3(_3579, _3580, _3581))) + _3656;
                                float _4804 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3663 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3664 = 1.0 - _3631;
                                float _3674 = (0.5 / (((_3663 * ((_3646 * _3664) + _3631)) + 9.9999999392252902907785028219223e-09) + (((_3663 * _3664) + _3631) * _3646))) * _3663;
                                float _4815 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3684 = (_3609 * _3586) * (((_3632 * 3.1415927410125732421875) * (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0)))) / ((_3654 * _3654) * ((_3599 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3610 * _3456.y;
                                frontier_phi_83_pred_1 = _3610 * _3456.x;
                                frontier_phi_83_pred_2 = _3684 * _3468.z;
                                frontier_phi_83_pred_3 = _3684 * _3468.y;
                                frontier_phi_83_pred_4 = _3684 * _3468.x;
                                frontier_phi_83_pred_5 = _3610 * _3456.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3692 = frontier_phi_83_pred;
                            _3691 = frontier_phi_83_pred_1;
                            _3690 = frontier_phi_83_pred_2;
                            _3689 = frontier_phi_83_pred_3;
                            _3688 = frontier_phi_83_pred_4;
                            _3693 = frontier_phi_83_pred_5;
                            _3398 = _3691 + _3411;
                            _3399 = _3692 + _3412;
                            _3400 = _3693 + _3413;
                            _3395 = _3688 + _3408;
                            _3396 = _3689 + _3409;
                            _3397 = _3690 + _3410;
                            if (_3415 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3415;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3400;
                        frontier_phi_77_pred_1 = _3399;
                        frontier_phi_77_pred_2 = _3398;
                        frontier_phi_77_pred_3 = _3397;
                        frontier_phi_77_pred_4 = _3396;
                        frontier_phi_77_pred_5 = _3395;
                    }
                    _3037 = frontier_phi_77_pred;
                    _3035 = frontier_phi_77_pred_1;
                    _3033 = frontier_phi_77_pred_2;
                    _3031 = frontier_phi_77_pred_3;
                    _3029 = frontier_phi_77_pred_4;
                    _3027 = frontier_phi_77_pred_5;
                    uint _3193 = _3192 + 1u;
                    if (_3193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3186 = _3027;
                        _3187 = _3029;
                        _3188 = _3031;
                        _3189 = _3033;
                        _3190 = _3035;
                        _3191 = _3037;
                        _3192 = _3193;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3031;
                frontier_phi_58_59_ladder_1 = _3037;
                frontier_phi_58_59_ladder_2 = _3035;
                frontier_phi_58_59_ladder_3 = _3033;
                frontier_phi_58_59_ladder_4 = _3029;
                frontier_phi_58_59_ladder_5 = _3027;
            }
            else
            {
                frontier_phi_58_59_ladder = _2909;
                frontier_phi_58_59_ladder_1 = _2915;
                frontier_phi_58_59_ladder_2 = _2913;
                frontier_phi_58_59_ladder_3 = _2911;
                frontier_phi_58_59_ladder_4 = _2907;
                frontier_phi_58_59_ladder_5 = _2905;
            }
            _3026 = frontier_phi_58_59_ladder_5;
            _3028 = frontier_phi_58_59_ladder_4;
            _3030 = frontier_phi_58_59_ladder;
            _3032 = frontier_phi_58_59_ladder_3;
            _3034 = frontier_phi_58_59_ladder_2;
            _3036 = frontier_phi_58_59_ladder_1;
        }
        float _3041 = isnan(1.0) ? _1053 : (isnan(_1053) ? 1.0 : min(_1053, 1.0));
        _2817 = (_3041 * _3032) + _2253;
        _2819 = (_3041 * _3034) + _2255;
        _2821 = (_3041 * _3036) + _2257;
        _2823 = ((_3026 * _1037) * _3041) + _2598;
        _2825 = ((_3028 * _1039) * _3041) + _2600;
        _2827 = ((_3030 * _1040) * _3041) + _2602;
    }
    else
    {
        _2817 = _2253;
        _2819 = _2255;
        _2821 = _2257;
        _2823 = _2598;
        _2825 = _2600;
        _2827 = _2602;
    }
    float _4831 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _4842 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _4853 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _2844 = ((isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * (_2817 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1053))) + ((_2823 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1891)) * cbPerFrame._m0[3u].x);
    float _2845 = ((isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2819 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1053))) + ((_2825 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1891)) * cbPerFrame._m0[3u].x);
    float _2846 = ((isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2821 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1053))) + ((_2827 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1891)) * cbPerFrame._m0[3u].x);
    uint _2847 = _261 + 6u;
    float _2855 = _975 / cbSceneParam._m0[86u].x;
    float _2856 = _976 / cbSceneParam._m0[86u].y;
    vec4 _2870 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2855, _2856, (log2((isnan(cbSceneParam._m0[77u].w) ? _898 : (isnan(_898) ? cbSceneParam._m0[77u].w : min(_898, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2872 = _2870.x;
    float _2873 = _2870.y;
    float _2874 = _2870.z;
    float _2875 = _2870.w;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_898 > cbSceneParam._m0[78u].w)
    {
        float _2930 = isnan(_898) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _898 : min(cbSceneParam._m0[80u].w, _898));
        float _2931 = _2930 / _898;
        float _2942 = _2931 * _948;
        float _2943 = _949 * _2931;
        float _2944 = (-0.0) - _2943;
        float _2946 = _2931 * _950;
        float _2948 = (cbSceneParam._m0[77u].w * _2944) / _2930;
        float _2949 = _2948 + cbSceneParam._m0[79u].w;
        float _2950 = cbSceneParam._m0[79u].w - _2943;
        float _2956 = sqrt(((_2942 * _2942) + (_2943 * _2943)) + (_2946 * _2946));
        float _2959 = (1.0 - (cbSceneParam._m0[77u].w / _2930)) * _2956;
        float _2964 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2966 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3143;
        if (abs((_2944 - _2948) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3143 = ((((_2949 > 0.0) ? exp2(_2964 * _2949) : (2.0 - exp2(_2966 * _2949))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2959;
        }
        else
        {
            float _3087 = 1.0 / cbSceneParam._m0[80u].x;
            float _3088 = isnan(_2950) ? _2949 : (isnan(_2949) ? _2950 : max(_2949, _2950));
            float _3089 = isnan(_2950) ? _2949 : (isnan(_2949) ? _2950 : min(_2949, _2950));
            float _3098 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : min(_3088, 0.0));
            float _3099 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : min(_3089, 0.0));
            _3143 = ((abs(_2956 / _2944) * cbSceneParam._m0[80u].y) * ((((_3098 - _3099) * 2.0) - ((exp2(_2964 * (isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0)))) - exp2(_2964 * (isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0))))) * _3087)) - ((exp2(_2966 * _3098) - exp2(_2966 * _3099)) * _3087))) + (_2959 * cbSceneParam._m0[80u].z);
        }
        vec4 _3145 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2855, _2856, 1.0), 0.0);
        float _3154 = exp2((_3143 * (-1.44269502162933349609375)) * (1.0 - _3145.w));
        float _3155 = log2(_3154);
        float _3171 = log2(_2875);
        _2968 = (exp2(_3171 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3155 * cbSceneParam._m0[78u].x)) * _3145.x) / cbSceneParam._m0[78u].x)) + _2872;
        _2970 = (exp2(_3171 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3155 * cbSceneParam._m0[78u].y)) * _3145.y) / cbSceneParam._m0[78u].y)) + _2873;
        _2972 = (exp2(_3171 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3155 * cbSceneParam._m0[78u].z)) * _3145.z) / cbSceneParam._m0[78u].z)) + _2874;
        _2974 = _3154 * _2875;
    }
    else
    {
        _2968 = _2872;
        _2970 = _2873;
        _2972 = _2874;
        _2974 = _2875;
    }
    bool _3181;
    vec4 _2984;
    vec4 _3006;
    float _3008;
    float _3012;
    float _3013;
    float _3014;
    float _3015;
    bool _3025;
    for (;;)
    {
        _2984 = cbMatDynParam._m0[0u];
        float _2986 = roundEven(_2984.y);
        bool _2987 = _2986 == 3.0;
        float _2988 = log2(_2974);
        float _2995 = exp2(_2988 * cbSceneParam._m0[78u].x) * _2844;
        float _2996 = exp2(_2988 * cbSceneParam._m0[78u].y) * _2845;
        float _2997 = exp2(_2988 * cbSceneParam._m0[78u].z) * _2846;
        float _3004 = _964 + (-0.5);
        _3006 = cbMtdParam._m0[1u];
        _3008 = _3006.y * _3004;
        float _3011 = (_2986 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3012 = _3011 * (_2987 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2968)));
        _3013 = _3011 * (_2987 ? _2996 : (_2996 + (cbSceneParam._m0[72u].w * _2970)));
        _3014 = _3011 * (_2987 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2972)));
        _3015 = _3004 * 0.999000012874603271484375;
        _3025 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3025)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3015) < 0.5)
            {
                _3181 = true;
                break;
            }
        }
        uint _3122 = _1013 + uint(_2984.w);
        if ((cbInstanceData._m0[_3122].w < 1.0) && ((cbInstanceData._m0[_3122].w + _3015) < 0.5))
        {
            _3181 = true;
            break;
        }
        if ((_3008 + 1.0) < _3006.x)
        {
            _3181 = true;
            break;
        }
        _3181 = false;
        break;
    }
    float _3386;
    if (_3181)
    {
        discard_state = true;
        _3386 = 0.0;
    }
    else
    {
        _3386 = cbInstanceData._m0[_2847].w;
    }
    SV_Target.x = _3012;
    SV_Target.y = _3013;
    SV_Target.z = _3014;
    SV_Target.w = _3386;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2847].w;
    discard_exit();
}


