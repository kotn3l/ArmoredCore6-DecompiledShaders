#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1083;
float _3465;
float _3466;
float _3467;
float _3468;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _246) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _247) + cbTextureTilingScale._m0[14u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _317 = _313.z;
    float _322 = (_313.x * 2.0) + (-1.0);
    float _324 = (_313.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_322, _324), vec2(_322, _324));
    float _3477 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))));
    float _334 = fma(_331, _214, fma(_324, _221, _322 * _207));
    float _337 = fma(_331, _215, fma(_324, _222, _322 * _208));
    float _340 = fma(_331, _216, fma(_324, _223, _322 * _209));
    float _344 = inversesqrt(dot(vec3(_334, _337, _340), vec3(_334, _337, _340)));
    vec4 _380 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _382 = _380.x;
    float _383 = 1.0 - _382;
    float _390 = ((_382 - _383) * cbMtdParam._m0[24u].z) + _383;
    float _392 = (cbMtdParam._m0[19u].x + dot(vec4(_344 * _334, _344 * _337, _344 * _340, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_390 * cbMtdParam._m0[21u].z);
    float _3488 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _408 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_390 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3499 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _413 = ((_393 * ((_293.x * cbMtdParam._m0[18u].x) - _272)) * _409) + _272;
    float _414 = ((_393 * ((_293.y * cbMtdParam._m0[18u].y) - _273)) * _409) + _273;
    float _415 = ((_393 * ((_293.z * cbMtdParam._m0[18u].z) - _274)) * _409) + _274;
    vec4 _428 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _430 = _428.x;
    float _433 = _430 - ((_430 * _393) * _409);
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _453 = (_446.x * 2.0) + (-1.0);
    float _454 = (_446.y * 2.0) + (-1.0);
    float _455 = dot(vec2(_453, _454), vec2(_453, _454));
    float _3510 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _464 = (((_446.z - _317) * _393) * _409) + _317;
    float _479 = (((cbMtdParam._m0[21u].x * _322) + ((_453 - _322) * _393)) * _409) + _322;
    float _480 = (((cbMtdParam._m0[21u].x * _324) + ((_454 - _324) * _393)) * _409) + _324;
    float _481 = (((sqrt(1.0 - (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) - _331) * _393) * _409) + _331;
    float _486 = cbMtdParam._m0[22u].x + _313.w;
    float _489 = fma(_481, _214, fma(_480, _221, _479 * _207));
    float _492 = fma(_481, _215, fma(_480, _222, _479 * _208));
    float _495 = fma(_481, _216, fma(_480, _223, _479 * _209));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    float _500 = _499 * _489;
    float _501 = _499 * _492;
    float _502 = _499 * _495;
    float _3521 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _503 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3543 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _3554 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _3565 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _3576 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _508 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _522 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _573 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _563);
    float _574 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _563);
    float _575 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _563);
    float _579 = inversesqrt(dot(vec3(_573, _574, _575), vec3(_573, _574, _575)));
    float _580 = _573 * _579;
    float _581 = _574 * _579;
    float _582 = _575 * _579;
    vec4 _587 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _589 = _587.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _764 = sqrt(((_573 * _573) + (_574 * _574)) + (_575 * _575));
        float _770 = (cbMatDynParam._m0[5u].x * _764) + cbMatDynParam._m0[5u].y;
        float _3587 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _775 = (cbMatDynParam._m0[5u].z * _764) + cbMatDynParam._m0[5u].w;
        float _3598 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) - _771)) + _771) < ((_589 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _601 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _602 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _622 = fma(_502, cbSceneParam._m0[5u].z, fma(_501, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _500));
    float _625 = fma(_502, cbSceneParam._m0[6u].z, fma(_501, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _500));
    float _628 = fma(_502, cbSceneParam._m0[7u].z, fma(_501, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _500));
    uint _641 = _226 + 9u;
    uint _642 = _641 + uint(cbMatDynParam._m0[0u].w);
    float _648 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_642].x;
    float _649 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_642].y;
    float _650 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * cbInstanceData._m0[_642].z;
    float _3609 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _3631 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _654 = 1.0 - _508;
    float _655 = _651 * _654;
    float _656 = _652 * _654;
    float _657 = _653 * _654;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _508;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _508;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _508;
    float _665 = _662 + 0.039999999105930328369140625;
    float _667 = _663 + 0.039999999105930328369140625;
    float _668 = _664 + 0.039999999105930328369140625;
    vec4 _677 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _601, cbSceneParam._m0[86u].y * _602));
    float _681 = ((isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * TEXCOORD_5.w) * _677.x;
    float _682 = dot(vec3(_500, _501, _502), vec3(_580, _581, _582));
    float _685 = _682 * 2.0;
    float _689 = (_685 * _500) - _580;
    float _690 = (_685 * _501) - _581;
    float _691 = (_685 * _502) - _582;
    float _695 = abs(dot(vec3(_580, _581, _582), vec3(_500, _501, _502)));
    float _3642 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _697 = sqrt(_503);
    float _710 = exp2((_697 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_697 * 3.0));
    float _716 = (1.0 - _710) * ((_697 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _717 = _710 * _697;
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1082;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _807 = fma(_753, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _745));
        float _811 = fma(_753, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _745));
        float _815 = fma(_753, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _745));
        float _840 = _745 + _500;
        float _841 = _749 + _501;
        float _842 = _753 + _502;
        float _852 = fma(_842, cbModelParam._m0[26u].z, fma(_841, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _840)) - _807;
        float _853 = fma(_842, cbModelParam._m0[27u].z, fma(_841, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _840)) - _811;
        float _854 = fma(_842, cbModelParam._m0[28u].z, fma(_841, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _840)) - _815;
        float _858 = inversesqrt(dot(vec3(_852, _853, _854), vec3(_852, _853, _854)));
        float _871 = ((_858 * _852) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_807 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_858 * _853) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_811 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _873 = ((_858 * _854) / cbModelParam._m0[34u].z) + ((((((_815 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        float _910 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_876.x + (-0.5));
        float _912 = _910 * (_876.y + (-0.5));
        float _913 = _910 * (_876.z + (-0.5));
        float _920 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_883.x + (-0.5));
        float _922 = _920 * (_883.y + (-0.5));
        float _923 = _920 * (_883.z + (-0.5));
        float _930 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_890.x + (-0.5));
        float _932 = _930 * (_890.y + (-0.5));
        float _933 = _930 * (_890.z + (-0.5));
        float _940 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_897.x + (-0.5));
        float _942 = _940 * (_897.y + (-0.5));
        float _943 = _940 * (_897.z + (-0.5));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = _911 * 0.5;
        float _948 = _921 * 0.5;
        float _949 = _931 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _964 = (dot(vec3(_500, _501, _502), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _974 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3690 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_976 + 1.0))) + _981) * _944;
        float _991 = _912 * 0.5;
        float _992 = _922 * 0.5;
        float _993 = _932 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_500, _501, _502), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3723 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1018 + 1.0))) + _1023) * _945;
        float _1033 = _913 * 0.5;
        float _1034 = _923 * 0.5;
        float _1035 = _933 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_500, _501, _502), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3756 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1060 + 1.0))) + _1065) * _946;
        _1082 = _913;
        _1084 = _912;
        _1085 = _911;
        _1086 = _923;
        _1087 = _922;
        _1088 = _921;
        _1089 = _933;
        _1090 = _932;
        _1091 = _931;
        _1092 = _946;
        _1093 = _945;
        _1094 = _944;
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
    }
    else
    {
        _1082 = _1083;
        _1084 = _1083;
        _1085 = _1083;
        _1086 = _1083;
        _1087 = _1083;
        _1088 = _1083;
        _1089 = _1083;
        _1090 = _1083;
        _1091 = _1083;
        _1092 = _1083;
        _1093 = _1083;
        _1094 = _1083;
        _1095 = 0.0;
        _1096 = 0.0;
        _1097 = 0.0;
    }
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1125 = fma(_753, cbModelParam._m0[30u].z, fma(_749, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _745));
        float _1129 = fma(_753, cbModelParam._m0[31u].z, fma(_749, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _745));
        float _1133 = fma(_753, cbModelParam._m0[32u].z, fma(_749, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _745));
        float _1156 = _745 + _500;
        float _1157 = _749 + _501;
        float _1158 = _753 + _502;
        float _1168 = fma(_1158, cbModelParam._m0[30u].z, fma(_1157, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156)) - _1125;
        float _1169 = fma(_1158, cbModelParam._m0[31u].z, fma(_1157, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156)) - _1129;
        float _1170 = fma(_1158, cbModelParam._m0[32u].z, fma(_1157, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156)) - _1133;
        float _1174 = inversesqrt(dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170)));
        float _1187 = ((_1174 * _1168) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1125 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1174 * _1169) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1129 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1174 * _1170) / cbModelParam._m0[35u].z) + ((((((_1133 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1224 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1191.x + (-0.5));
        float _1226 = _1224 * (_1191.y + (-0.5));
        float _1227 = _1224 * (_1191.z + (-0.5));
        float _1234 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1198.x + (-0.5));
        float _1236 = _1234 * (_1198.y + (-0.5));
        float _1237 = _1234 * (_1198.z + (-0.5));
        float _1244 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1205.x + (-0.5));
        float _1246 = _1244 * (_1205.y + (-0.5));
        float _1247 = _1244 * (_1205.z + (-0.5));
        float _1254 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1212.x + (-0.5));
        float _1256 = _1254 * (_1212.y + (-0.5));
        float _1257 = _1254 * (_1212.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_500, _501, _502), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3819 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1288 + 1.0))) + _1293) * _1258;
        float _1303 = _1226 * 0.5;
        float _1304 = _1236 * 0.5;
        float _1305 = _1246 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_500, _501, _502), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3852 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1330 + 1.0))) + _1335) * _1259;
        float _1345 = _1227 * 0.5;
        float _1346 = _1237 * 0.5;
        float _1347 = _1247 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_500, _501, _502), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3885 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1372 + 1.0))) + _1377) * _1260;
        _1394 = _1227;
        _1395 = _1226;
        _1396 = _1225;
        _1397 = _1237;
        _1398 = _1236;
        _1399 = _1235;
        _1400 = _1247;
        _1401 = _1246;
        _1402 = _1245;
        _1403 = _1260;
        _1404 = _1259;
        _1405 = _1258;
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _1083;
        _1395 = _1083;
        _1396 = _1083;
        _1397 = _1083;
        _1398 = _1083;
        _1399 = _1083;
        _1400 = _1083;
        _1401 = _1083;
        _1402 = _1083;
        _1403 = _1083;
        _1404 = _1083;
        _1405 = _1083;
        _1406 = 0.0;
        _1407 = 0.0;
        _1408 = 0.0;
    }
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1095)) + _1095;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1096)) + _1096;
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1097)) + _1097;
    float _1441 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1444 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1447 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1418));
    float _1462 = _689 * 0.5;
    float _1463 = _690 * 0.5;
    float _1464 = _691 * 0.5;
    float _1465 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1468 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1471 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1505;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1478 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1082, _1086, _1089, _1092));
        float _1482 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1486 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1085, _1088, _1091, _1094));
        float _1493 = dot(vec4(cbModelParam._m0[39u]), vec4(_1462, _1463, _1464, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1516;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1507 = dot(vec4(cbModelParam._m0[40u]), vec4(_1462, _1463, _1464, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1520 = (_1516 * cbModelParam._m0[1u].x) + (_1505 * (1.0 - cbModelParam._m0[1u].x));
    float _1530 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _503);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1530 : min(cbModelParam._m0[25u].z, _1530));
    float _1611;
    float _1613;
    float _1615;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1578 = fma(_753, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745)) + cbModelParam._m0[13u].w;
        float _1582 = fma(_753, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745)) + cbModelParam._m0[14u].w;
        float _1586 = fma(_753, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745)) + cbModelParam._m0[15u].w;
        float _1589 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1592 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1595 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1623;
        if (_1589 > 0.0)
        {
            _1623 = abs((1.0 - _1578) / _1589);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1578 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1623 = frontier_phi_17_15_ladder;
        }
        float _1826;
        if (_1592 > 0.0)
        {
            _1826 = abs((1.0 - _1582) / _1592);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1582 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1826 = frontier_phi_26_22_ladder;
        }
        float _2080;
        if (_1595 > 0.0)
        {
            _2080 = abs((1.0 - _1586) / _1595);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1586 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2080 = frontier_phi_38_33_ladder;
        }
        float _2082 = isnan(_1826) ? _1623 : (isnan(_1623) ? _1826 : min(_1623, _1826));
        float _2083 = isnan(_2080) ? _2082 : (isnan(_2082) ? _2080 : min(_2082, _2080));
        float _2087 = (_2083 * _1589) + _1578;
        float _2088 = (_2083 * _1592) + _1582;
        float _2089 = (_2083 * _1595) + _1586;
        float _2090 = _2083 * 9.9999997473787516355514526367188e-05;
        float _2092 = (-1.0) - _2090;
        float _2094 = _2090 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2089 > _2094) || ((_2089 < _2092) || ((_2088 > _2094) || ((_2088 < _2092) || ((_2087 < _2092) || (_2087 > _2094))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2217 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2089, cbModelParam._m0[9u].z, fma(_2088, cbModelParam._m0[9u].y, _2087 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2089, cbModelParam._m0[10u].z, fma(_2088, cbModelParam._m0[10u].y, _2087 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2089, cbModelParam._m0[11u].z, fma(_2088, cbModelParam._m0[11u].y, _2087 * cbModelParam._m0[11u].x))), _1531);
            frontier_phi_16_38_ladder = _2217.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2217.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2217.x * cbModelParam._m0[1u].y;
        }
        _1611 = frontier_phi_16_38_ladder_2;
        _1613 = frontier_phi_16_38_ladder_1;
        _1615 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1531);
        _1611 = _1599.x * cbModelParam._m0[1u].y;
        _1613 = _1599.y * cbModelParam._m0[1u].y;
        _1615 = _1599.z * cbModelParam._m0[1u].y;
    }
    float _1619 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _503);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1619 : min(cbModelParam._m0[25u].w, _1619));
    float _1709;
    float _1711;
    float _1713;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1673 = fma(_753, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745)) + cbModelParam._m0[21u].w;
        float _1677 = fma(_753, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745)) + cbModelParam._m0[22u].w;
        float _1681 = fma(_753, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745)) + cbModelParam._m0[23u].w;
        float _1684 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1687 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1690 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1831;
        if (_1684 > 0.0)
        {
            _1831 = abs((1.0 - _1673) / _1684);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1673 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1831 = frontier_phi_28_24_ladder;
        }
        float _2107;
        if (_1687 > 0.0)
        {
            _2107 = abs((1.0 - _1677) / _1687);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1677 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2107 = frontier_phi_40_35_ladder;
        }
        float _2320;
        if (_1690 > 0.0)
        {
            _2320 = abs((1.0 - _1681) / _1690);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1681 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2320 = frontier_phi_49_46_ladder;
        }
        float _2322 = isnan(_2107) ? _1831 : (isnan(_1831) ? _2107 : min(_1831, _2107));
        float _2323 = isnan(_2320) ? _2322 : (isnan(_2322) ? _2320 : min(_2322, _2320));
        float _2327 = (_2323 * _1684) + _1673;
        float _2328 = (_2323 * _1687) + _1677;
        float _2329 = (_2323 * _1690) + _1681;
        float _2330 = _2323 * 9.9999997473787516355514526367188e-05;
        float _2331 = (-1.0) - _2330;
        float _2333 = _2330 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2329 > _2333) || ((_2329 < _2331) || ((_2328 > _2333) || ((_2328 < _2331) || ((_2327 < _2331) || (_2327 > _2333))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2528 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2329, cbModelParam._m0[17u].z, fma(_2328, cbModelParam._m0[17u].y, _2327 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2329, cbModelParam._m0[18u].z, fma(_2328, cbModelParam._m0[18u].y, _2327 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2329, cbModelParam._m0[19u].z, fma(_2328, cbModelParam._m0[19u].y, _2327 * cbModelParam._m0[19u].x))), _1620);
            frontier_phi_25_49_ladder = _2528.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2528.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2528.x * cbModelParam._m0[1u].z;
        }
        _1709 = frontier_phi_25_49_ladder_2;
        _1711 = frontier_phi_25_49_ladder_1;
        _1713 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1620);
        _1709 = _1693.x * cbModelParam._m0[1u].z;
        _1711 = _1693.y * cbModelParam._m0[1u].z;
        _1713 = _1693.z * cbModelParam._m0[1u].z;
    }
    float _1726 = (((_716 * _665) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1709 - _1611)) + _1611);
    float _1728 = (((_716 * _667) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1711 - _1613)) + _1613);
    float _1730 = (((_716 * _668) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1713 - _1615)) + _1615);
    float _1733 = fma(_1730, cbSceneParam._m0[89u].z, fma(_1728, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1730, cbSceneParam._m0[90u].z, fma(_1728, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1730, cbSceneParam._m0[91u].z, fma(_1728, cbSceneParam._m0[91u].y, _1726 * cbSceneParam._m0[91u].x));
    uvec4 _1749 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1751 = _1749.x * 14u;
    uint _1752 = _1751 + 13u;
    float _1759 = _681 + (-1.0);
    float _1764 = (cbLight._m0[_1752].x * _1759) + 1.0;
    float _1765 = (cbLight._m0[_1752].y * _1759) + 1.0;
    float _1766 = (cbLight._m0[_1752].z * _1759) + 1.0;
    float _1767 = (cbLight._m0[_1752].w * _1759) + 1.0;
    uint _1768 = _1751 + 5u;
    float _1774 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
    uint _1778 = _1751 + 4u;
    float _1785 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
    uint _1789 = _1751 | 1u;
    float _1800 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_500, _501, _502));
    float _1803 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_500, _501, _502));
    float _4021 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _4032 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1808 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * 0.3183098733425140380859375;
    float _1810 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.3183098733425140380859375;
    float _1817 = ((cbLight._m0[_1768].x * _1774) * _1810) + ((cbLight._m0[_1778].x * _1785) * _1808);
    float _1818 = ((_1774 * cbLight._m0[_1768].y) * _1810) + ((_1785 * cbLight._m0[_1778].y) * _1808);
    float _1819 = ((_1774 * cbLight._m0[_1768].z) * _1810) + ((_1785 * cbLight._m0[_1778].z) * _1808);
    uvec4 _1823 = floatBitsToUint(cbLight._m0[_1751 + 12u]);
    bool _1825 = _1823.x == 0u;
    float _1836;
    float _1838;
    float _1840;
    if (_1825)
    {
        _1836 = _1817;
        _1838 = _1818;
        _1840 = _1819;
    }
    else
    {
        uint _1844 = _1751 + 6u;
        float _1860 = (dot(vec3(cbLight._m0[_1751 + 2u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _1861 = _1860 * _1860;
        float _4043 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1863 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _1836 = (((cbLight._m0[_1844].x * 0.3183098733425140380859375) * _1862) * _1863) + _1817;
        _1838 = (((cbLight._m0[_1844].y * 0.3183098733425140380859375) * _1862) * _1863) + _1818;
        _1840 = (((cbLight._m0[_1844].z * 0.3183098733425140380859375) * _1862) * _1863) + _1819;
    }
    bool _1843 = _1823.y == 0u;
    float _1881;
    float _1883;
    float _1885;
    if (_1843)
    {
        _1881 = _1836;
        _1883 = _1838;
        _1885 = _1840;
    }
    else
    {
        uint _2051 = _1751 + 7u;
        float _2067 = (dot(vec3(cbLight._m0[_1751 + 3u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _2068 = _2067 * _2067;
        float _4059 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2069 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _2070 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _1881 = (((cbLight._m0[_2051].x * 0.3183098733425140380859375) * _2069) * _2070) + _1836;
        _1883 = (((cbLight._m0[_2051].y * 0.3183098733425140380859375) * _2069) * _2070) + _1838;
        _1885 = (((cbLight._m0[_2051].z * 0.3183098733425140380859375) * _2069) * _2070) + _1840;
    }
    uint _1888 = _1751 + 8u;
    float _1901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1751].w)) * _503) * 0.949999988079071044921875);
    float _1902 = _1901 * _1901;
    float _1903 = cbLight._m0[_1751].x + _580;
    float _1904 = cbLight._m0[_1751].y + _581;
    float _1905 = cbLight._m0[_1751].z + _582;
    float _1909 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
    float _1910 = _1909 * _1903;
    float _1911 = _1909 * _1904;
    float _1912 = _1909 * _1905;
    float _1913 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1751].xyz));
    float _4075 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _1917 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _1918 = dot(vec3(_500, _501, _502), vec3(_1910, _1911, _1912));
    float _4097 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1922 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_1910, _1911, _1912));
    float _4108 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1926 = _1902 * _1902;
    float _1930 = ((_1921 * _1921) * (_1926 + (-1.0))) + 1.0;
    float _1938 = exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0);
    float _1939 = 0.959999978542327880859375 - _662;
    float _1941 = 0.959999978542327880859375 - _663;
    float _1942 = 0.959999978542327880859375 - _664;
    float _1949 = 1.0 - _1902;
    float _1960 = (0.5 / (((_1917 * ((_1916 * _1949) + _1902)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _1949) + _1902) * _1916))) * _1916;
    float _4119 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1962 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1926 / ((_1930 * _1930) * 3.141590118408203125));
    uint _1973 = _1751 + 9u;
    float _1984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1789].w)) * _503) * 0.949999988079071044921875);
    float _1985 = _1984 * _1984;
    float _1986 = cbLight._m0[_1789].x + _580;
    float _1987 = cbLight._m0[_1789].y + _581;
    float _1988 = cbLight._m0[_1789].z + _582;
    float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
    float _1993 = _1992 * _1986;
    float _1994 = _1992 * _1987;
    float _1995 = _1992 * _1988;
    float _1996 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1789].xyz));
    float _4130 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _2000 = dot(vec3(_500, _501, _502), vec3(_1993, _1994, _1995));
    float _4141 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2004 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_1993, _1994, _1995));
    float _4152 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2008 = _1985 * _1985;
    float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
    float _2019 = exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0);
    float _2026 = 1.0 - _1985;
    float _2036 = (0.5 / (((_1917 * ((_1999 * _2026) + _1985)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2026) + _1985) * _1999))) * _1999;
    float _4163 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2038 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
    float _2048 = (((((_2019 * _1939) + _665) * cbLight._m0[_1973].x) * _2038) * _1774) + (((((_1938 * _1939) + _665) * cbLight._m0[_1888].x) * _1962) * _1785);
    float _2049 = (((((_2019 * _1941) + _667) * cbLight._m0[_1973].y) * _2038) * _1774) + (((((_1938 * _1941) + _667) * cbLight._m0[_1888].y) * _1962) * _1785);
    float _2050 = (((((_2019 * _1942) + _668) * cbLight._m0[_1973].z) * _2038) * _1774) + (((((_1938 * _1942) + _668) * cbLight._m0[_1888].z) * _1962) * _1785);
    float _2112;
    float _2114;
    float _2116;
    if (_1825)
    {
        _2112 = _2048;
        _2114 = _2049;
        _2116 = _2050;
    }
    else
    {
        uint _2118 = _1751 + 2u;
        uint _2122 = _1751 + 10u;
        float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _503) * 0.949999988079071044921875);
        float _2137 = _2136 * _2136;
        float _2138 = cbLight._m0[_2118].x + _580;
        float _2139 = cbLight._m0[_2118].y + _581;
        float _2140 = cbLight._m0[_2118].z + _582;
        float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
        float _2145 = _2144 * _2138;
        float _2146 = _2144 * _2139;
        float _2147 = _2144 * _2140;
        float _2148 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2118].xyz));
        float _4174 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2151 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2152 = dot(vec3(_500, _501, _502), vec3(_2145, _2146, _2147));
        float _4185 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2155 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2156 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2145, _2146, _2147));
        float _4196 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2160 = _2137 * _2137;
        float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
        float _2171 = exp2(log2(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * 5.0);
        float _2178 = 1.0 - _2137;
        float _2188 = (0.5 / (((_1917 * ((_2151 * _2178) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2178) + _2137) * _2151))) * _2151;
        float _4207 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2190 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
        float _2191 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _2112 = (((((_2171 * _1939) + _665) * cbLight._m0[_2122].x) * _2190) * _2191) + _2048;
        _2114 = (((((_2171 * _1941) + _667) * cbLight._m0[_2122].y) * _2190) * _2191) + _2049;
        _2116 = (((((_2171 * _1942) + _668) * cbLight._m0[_2122].z) * _2190) * _2191) + _2050;
    }
    float _2226;
    float _2228;
    float _2230;
    if (_1843)
    {
        _2226 = _2112;
        _2228 = _2114;
        _2230 = _2116;
    }
    else
    {
        uint _2237 = _1751 + 3u;
        uint _2241 = _1751 + 11u;
        float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _503) * 0.949999988079071044921875);
        float _2256 = _2255 * _2255;
        float _2257 = cbLight._m0[_2237].x + _580;
        float _2258 = cbLight._m0[_2237].y + _581;
        float _2259 = cbLight._m0[_2237].z + _582;
        float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
        float _2264 = _2263 * _2257;
        float _2265 = _2263 * _2258;
        float _2266 = _2263 * _2259;
        float _2267 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2237].xyz));
        float _4223 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2270 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2271 = dot(vec3(_500, _501, _502), vec3(_2264, _2265, _2266));
        float _4234 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2275 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2264, _2265, _2266));
        float _4245 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2279 = _2256 * _2256;
        float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
        float _2290 = exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0);
        float _2297 = 1.0 - _2256;
        float _2307 = (0.5 / (((_1917 * ((_2270 * _2297) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2297) + _2256) * _2270))) * _2270;
        float _4256 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2309 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
        float _2310 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _2226 = (((((_2290 * _1939) + _665) * cbLight._m0[_2241].x) * _2309) * _2310) + _2112;
        _2228 = (((((_2290 * _1941) + _667) * cbLight._m0[_2241].y) * _2309) * _2310) + _2114;
        _2230 = (((((_2290 * _1942) + _668) * cbLight._m0[_2241].z) * _2309) * _2310) + _2116;
    }
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    if (_1749.y == 0u)
    {
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2385;
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2385;
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2385;
        uvec4 _2400 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2401 = _2400.x;
        uint _2412 = uint((float(_2400.y) * floor(float(uint(cbSceneParam._m0[85u].y * _602) / _2401))) + floor(float(uint(cbSceneParam._m0[85u].x * _601) / _2401)));
        float _2422 = (log2(_2388 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2423 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        uint _2426 = uint(isnan(14.0) ? _2423 : (isnan(_2423) ? 14.0 : min(_2423, 14.0)));
        uvec4 _2431 = texelFetch(g_lightClusterGridBuffer, int(((_2426 << 2u) + (_2412 << 6u)) >> 2u));
        uint _2432 = _2431.x;
        uint _2433 = _2400.z;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        if (((((1u << ((_2433 >> 4u) & 15u)) + 4294967295u) & _2432) == 0u) || ((_2433 & 240u) == 0u))
        {
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
        }
        else
        {
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2686 = 0.0;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            uint _2692 = 0u;
            uint _2701;
            bool _2702;
            for (;;)
            {
                _2701 = texelFetch(g_lightClassification, int((((_2426 << 5u) + (_2412 << 9u)) + (_2692 << 2u)) >> 2u)).x;
                _2702 = _2701 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2702)
                {
                    frontier_phi_66_pred = _2686;
                    frontier_phi_66_pred_1 = _2691;
                    frontier_phi_66_pred_2 = _2690;
                    frontier_phi_66_pred_3 = _2689;
                    frontier_phi_66_pred_4 = _2688;
                    frontier_phi_66_pred_5 = _2687;
                }
                else
                {
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    uint _2837;
                    _2831 = _2686;
                    _2832 = _2687;
                    _2833 = _2688;
                    _2834 = _2689;
                    _2835 = _2690;
                    _2836 = _2691;
                    _2837 = _2701;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    for (;;)
                    {
                        uint _2841 = uint(findLSB(_2837)) + (_2692 << 5u);
                        uint _2838 = (_2837 + 4294967295u) & _2837;
                        uint _2843 = _2841 * 48u;
                        vec4 _2857 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 3u)).x));
                        uint _2863 = (_2841 * 48u) + 4u;
                        vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 3u)).x));
                        uint _2882 = (_2841 * 48u) + 8u;
                        vec3 _2893 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x));
                        float _2897 = _2857.x - _2386;
                        float _2898 = _2857.y - _2387;
                        float _2899 = _2857.z - _2388;
                        float _2900 = dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899));
                        float _2903 = inversesqrt(_2900);
                        float _2904 = _2903 * _2897;
                        float _2905 = _2903 * _2898;
                        float _2906 = _2903 * _2899;
                        float _2907 = dot(vec3(_622, _625, _628), vec3(_2904, _2905, _2906));
                        float _2912 = 1.0 - (_2900 * _2857.w);
                        float _4282 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2913 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                        float _2914 = sqrt(_2900) * _2876.w;
                        float _2917 = 1.39999997615814208984375 / (_2914 + 1.39999997615814208984375);
                        float _2918 = _2917 * _2917;
                        float _2921 = ((1.0 - _2918) * _2907) + _2918;
                        float _2924 = _2914 * _2914;
                        float _2928 = ((isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0))) * _2913) / ((_2924 * 0.699999988079071044921875) + 1.0);
                        float _2932 = (-0.0) - _2386;
                        float _2933 = (-0.0) - _2387;
                        float _2934 = (-0.0) - _2388;
                        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
                        float _2939 = _2938 * _2932;
                        float _2940 = _2938 * _2933;
                        float _2941 = _2938 * _2934;
                        float _2949 = exp2(log2(1.0 / ((_2924 * 3.5) + 5.0)) * 0.25);
                        float _2950 = 1.0 - _697;
                        float _2957 = sqrt(1.0 - ((1.0 - (_2950 * _2950)) * (1.0 - (_2949 * _2949))));
                        float _2958 = _2957 * _2957;
                        float _2959 = _2958 * _2958;
                        float _2960 = _2939 + _2904;
                        float _2961 = _2940 + _2905;
                        float _2962 = _2941 + _2906;
                        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
                        float _2970 = dot(vec3(_622, _625, _628), vec3(_2939, _2940, _2941));
                        float _4298 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2973 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                        float _2974 = dot(vec3(_622, _625, _628), vec3(_2966 * _2960, _2966 * _2961, _2966 * _2962));
                        float _4309 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2977 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _2981 = ((_2977 * _2977) * (_2959 + (-1.0))) + 1.0;
                        float _2982 = _2917 * _2958;
                        float _2983 = _2982 * _2982;
                        float _2986 = ((1.0 - _2983) * _2907) + _2983;
                        float _4320 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2987 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _2988 = 1.0 - _2958;
                        float _2998 = (0.5 / (((_2987 * ((_2973 * _2988) + _2958)) + 9.9999999392252902907785028219223e-09) + (((_2987 * _2988) + _2958) * _2973))) * _2987;
                        float _4331 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3009 = (((_2959 * 3.1415927410125732421875) * (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) / ((_2981 * _2981) * ((_2924 * 2.1991131305694580078125) + 3.141590118408203125))) * _2913;
                        _2761 = (_2928 * _2876.x) + _2834;
                        _2762 = (_2928 * _2876.y) + _2835;
                        _2763 = (_2928 * _2876.z) + _2836;
                        _2758 = (_3009 * _2893.x) + _2831;
                        _2759 = (_3009 * _2893.y) + _2832;
                        _2760 = (_3009 * _2893.z) + _2833;
                        if (_2838 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2831 = _2758;
                            _2832 = _2759;
                            _2833 = _2760;
                            _2834 = _2761;
                            _2835 = _2762;
                            _2836 = _2763;
                            _2837 = _2838;
                        }
                    }
                    frontier_phi_66_pred = _2758;
                    frontier_phi_66_pred_1 = _2763;
                    frontier_phi_66_pred_2 = _2762;
                    frontier_phi_66_pred_3 = _2761;
                    frontier_phi_66_pred_4 = _2760;
                    frontier_phi_66_pred_5 = _2759;
                }
                _2534 = frontier_phi_66_pred;
                _2544 = frontier_phi_66_pred_1;
                _2542 = frontier_phi_66_pred_2;
                _2540 = frontier_phi_66_pred_3;
                _2538 = frontier_phi_66_pred_4;
                _2536 = frontier_phi_66_pred_5;
                uint _2693 = _2692 + 1u;
                if (_2693 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2686 = _2534;
                    _2687 = _2536;
                    _2688 = _2538;
                    _2689 = _2540;
                    _2690 = _2542;
                    _2691 = _2544;
                    _2692 = _2693;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
        }
        uvec4 _2547 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2548 = _2547.z;
        uint _2550 = (_2548 >> 8u) & 15u;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        if (((4294967295u << _2550) & _2432) == 0u)
        {
            _2654 = _2533;
            _2656 = _2535;
            _2658 = _2537;
            _2660 = _2539;
            _2662 = _2541;
            _2664 = _2543;
        }
        else
        {
            float _2679 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
            float _2680 = _2679 * _2386;
            float _2681 = _2679 * _2387;
            float _2682 = _2679 * _2388;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2550 < ((_2548 >> 12u) & 15u))
            {
                float _2655;
                float _2657;
                float _2659;
                float _2661;
                float _2663;
                float _2665;
                float _2814 = _2533;
                float _2815 = _2535;
                float _2816 = _2537;
                float _2817 = _2539;
                float _2818 = _2541;
                float _2819 = _2543;
                uint _2820 = _2550;
                uint _2829;
                bool _2830;
                for (;;)
                {
                    _2829 = texelFetch(g_lightClassification, int((((_2426 << 5u) + (_2412 << 9u)) + (_2820 << 2u)) >> 2u)).x;
                    _2830 = _2829 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2830)
                    {
                        frontier_phi_77_pred = _2819;
                        frontier_phi_77_pred_1 = _2818;
                        frontier_phi_77_pred_2 = _2817;
                        frontier_phi_77_pred_3 = _2816;
                        frontier_phi_77_pred_4 = _2815;
                        frontier_phi_77_pred_5 = _2814;
                    }
                    else
                    {
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3036 = _2814;
                        float _3037 = _2815;
                        float _3038 = _2816;
                        float _3039 = _2817;
                        float _3040 = _2818;
                        float _3041 = _2819;
                        uint _3042 = _2829;
                        uint _3043;
                        vec4 _3068;
                        float _3069;
                        vec4 _3084;
                        vec3 _3096;
                        vec4 _3112;
                        vec4 _3128;
                        float _3174;
                        bool _3175;
                        for (;;)
                        {
                            uint _3053 = ((_2820 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3042));
                            _3043 = (_3042 + 4294967295u) & _3042;
                            uint _3055 = _3053 * 40u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            _3069 = _3068.w;
                            uint _3071 = (_3053 * 40u) + 4u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3086 = (_3053 * 40u) + 8u;
                            _3096 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x));
                            uint _3099 = (_3053 * 40u) + 16u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3115 = (_3053 * 40u) + 20u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3130 = (_3053 * 40u) + 24u;
                            vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3149 = (_3053 * 40u) + 28u;
                            vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            _3174 = fma(_2388, _3162.z, fma(_2387, _3162.y, _3162.x * _2386)) + _3162.w;
                            _3175 = !((fma(_2388, _3143.z, fma(_2387, _3143.y, _3143.x * _2386)) + _3143.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3175)
                            {
                                float _3202 = _3068.x - _2386;
                                float _3203 = _3068.y - _2387;
                                float _3204 = _3068.z - _2388;
                                float _3205 = dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204));
                                float _3208 = inversesqrt(_3205);
                                float _3209 = _3208 * _3202;
                                float _3210 = _3208 * _3203;
                                float _3211 = _3208 * _3204;
                                float _3215 = 1.0 - (_3205 / (_3069 * _3069));
                                float _4342 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3216 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3220 = sqrt(_3205) * _3084.w;
                                float _3222 = 1.39999997615814208984375 / (_3220 + 1.39999997615814208984375);
                                float _3223 = _3222 * _3222;
                                float _3226 = ((1.0 - _3223) * dot(vec3(_3209, _3210, _3211), vec3(_622, _625, _628))) + _3223;
                                float _3229 = _3220 * _3220;
                                float _3233 = (fma(_2388, _3112.z, fma(_2387, _3112.y, _3112.x * _2386)) + _3112.w) / _3174;
                                float _3234 = (fma(_2388, _3128.z, fma(_2387, _3128.y, _3128.x * _2386)) + _3128.w) / _3174;
                                float _3238 = 1.0 - dot(vec2(_3233, _3234), vec2(_3233, _3234));
                                float _4358 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3240 = _3239 * (((isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))) * _3216) / ((_3229 * 0.699999988079071044921875) + 1.0));
                                float _3252 = exp2(log2(1.0 / ((_3229 * 3.5) + 5.0)) * 0.25);
                                float _3253 = 1.0 - _697;
                                float _3260 = sqrt(1.0 - ((1.0 - (_3253 * _3253)) * (1.0 - (_3252 * _3252))));
                                float _3261 = _3260 * _3260;
                                float _3262 = _3261 * _3261;
                                float _3263 = _3209 - _2680;
                                float _3264 = _3210 - _2681;
                                float _3265 = _3211 - _2682;
                                float _3269 = inversesqrt(dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265)));
                                float _3273 = dot(vec3(_622, _625, _628), vec3((-0.0) - _2680, (-0.0) - _2681, (-0.0) - _2682));
                                float _4369 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3276 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3277 = dot(vec3(_622, _625, _628), vec3(_3269 * _3263, _3269 * _3264, _3269 * _3265));
                                float _4380 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3280 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3284 = ((_3280 * _3280) * (_3262 + (-1.0))) + 1.0;
                                float _3285 = _3222 * _3261;
                                float _3286 = _3285 * _3285;
                                float _3292 = ((1.0 - _3286) * dot(vec3(_622, _625, _628), vec3(_3209, _3210, _3211))) + _3286;
                                float _4391 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3294 = 1.0 - _3261;
                                float _3304 = (0.5 / (((_3293 * ((_3276 * _3294) + _3261)) + 9.9999999392252902907785028219223e-09) + (((_3293 * _3294) + _3261) * _3276))) * _3293;
                                float _4402 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3314 = (_3239 * _3216) * (((_3262 * 3.1415927410125732421875) * (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) / ((_3284 * _3284) * ((_3229 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3240 * _3084.y;
                                frontier_phi_83_pred_1 = _3240 * _3084.x;
                                frontier_phi_83_pred_2 = _3314 * _3096.z;
                                frontier_phi_83_pred_3 = _3314 * _3096.y;
                                frontier_phi_83_pred_4 = _3314 * _3096.x;
                                frontier_phi_83_pred_5 = _3240 * _3084.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3322 = frontier_phi_83_pred;
                            _3321 = frontier_phi_83_pred_1;
                            _3320 = frontier_phi_83_pred_2;
                            _3319 = frontier_phi_83_pred_3;
                            _3318 = frontier_phi_83_pred_4;
                            _3323 = frontier_phi_83_pred_5;
                            _3026 = _3321 + _3039;
                            _3027 = _3322 + _3040;
                            _3028 = _3323 + _3041;
                            _3023 = _3318 + _3036;
                            _3024 = _3319 + _3037;
                            _3025 = _3320 + _3038;
                            if (_3043 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3043;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3028;
                        frontier_phi_77_pred_1 = _3027;
                        frontier_phi_77_pred_2 = _3026;
                        frontier_phi_77_pred_3 = _3025;
                        frontier_phi_77_pred_4 = _3024;
                        frontier_phi_77_pred_5 = _3023;
                    }
                    _2665 = frontier_phi_77_pred;
                    _2663 = frontier_phi_77_pred_1;
                    _2661 = frontier_phi_77_pred_2;
                    _2659 = frontier_phi_77_pred_3;
                    _2657 = frontier_phi_77_pred_4;
                    _2655 = frontier_phi_77_pred_5;
                    uint _2821 = _2820 + 1u;
                    if (_2821 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2814 = _2655;
                        _2815 = _2657;
                        _2816 = _2659;
                        _2817 = _2661;
                        _2818 = _2663;
                        _2819 = _2665;
                        _2820 = _2821;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2659;
                frontier_phi_58_59_ladder_1 = _2665;
                frontier_phi_58_59_ladder_2 = _2663;
                frontier_phi_58_59_ladder_3 = _2661;
                frontier_phi_58_59_ladder_4 = _2657;
                frontier_phi_58_59_ladder_5 = _2655;
            }
            else
            {
                frontier_phi_58_59_ladder = _2537;
                frontier_phi_58_59_ladder_1 = _2543;
                frontier_phi_58_59_ladder_2 = _2541;
                frontier_phi_58_59_ladder_3 = _2539;
                frontier_phi_58_59_ladder_4 = _2535;
                frontier_phi_58_59_ladder_5 = _2533;
            }
            _2654 = frontier_phi_58_59_ladder_5;
            _2656 = frontier_phi_58_59_ladder_4;
            _2658 = frontier_phi_58_59_ladder;
            _2660 = frontier_phi_58_59_ladder_3;
            _2662 = frontier_phi_58_59_ladder_2;
            _2664 = frontier_phi_58_59_ladder_1;
        }
        float _2669 = isnan(1.0) ? _681 : (isnan(_681) ? 1.0 : min(_681, 1.0));
        _2445 = (_2669 * _2660) + _1881;
        _2447 = (_2669 * _2662) + _1883;
        _2449 = (_2669 * _2664) + _1885;
        _2451 = ((_2654 * _665) * _2669) + _2226;
        _2453 = ((_2656 * _667) * _2669) + _2228;
        _2455 = ((_2658 * _668) * _2669) + _2230;
    }
    else
    {
        _2445 = _1881;
        _2447 = _1883;
        _2449 = _1885;
        _2451 = _2226;
        _2453 = _2228;
        _2455 = _2230;
    }
    float _4418 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4429 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4440 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _2472 = ((isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2445 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _681))) + ((_2451 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    float _2473 = ((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2447 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _681))) + ((_2453 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    float _2474 = ((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2449 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _681))) + ((_2455 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    uint _2475 = _226 + 6u;
    float _2483 = _601 / cbSceneParam._m0[86u].x;
    float _2484 = _602 / cbSceneParam._m0[86u].y;
    vec4 _2498 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2483, _2484, (log2((isnan(cbSceneParam._m0[77u].w) ? _522 : (isnan(_522) ? cbSceneParam._m0[77u].w : min(_522, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2500 = _2498.x;
    float _2501 = _2498.y;
    float _2502 = _2498.z;
    float _2503 = _2498.w;
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    if (_522 > cbSceneParam._m0[78u].w)
    {
        float _2558 = isnan(_522) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _522 : min(cbSceneParam._m0[80u].w, _522));
        float _2559 = _2558 / _522;
        float _2570 = _2559 * _573;
        float _2571 = _574 * _2559;
        float _2572 = (-0.0) - _2571;
        float _2574 = _2559 * _575;
        float _2576 = (cbSceneParam._m0[77u].w * _2572) / _2558;
        float _2577 = _2576 + cbSceneParam._m0[79u].w;
        float _2578 = cbSceneParam._m0[79u].w - _2571;
        float _2584 = sqrt(((_2570 * _2570) + (_2571 * _2571)) + (_2574 * _2574));
        float _2587 = (1.0 - (cbSceneParam._m0[77u].w / _2558)) * _2584;
        float _2592 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2594 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2771;
        if (abs((_2572 - _2576) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2771 = ((((_2577 > 0.0) ? exp2(_2592 * _2577) : (2.0 - exp2(_2594 * _2577))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2587;
        }
        else
        {
            float _2715 = 1.0 / cbSceneParam._m0[80u].x;
            float _2716 = isnan(_2578) ? _2577 : (isnan(_2577) ? _2578 : max(_2577, _2578));
            float _2717 = isnan(_2578) ? _2577 : (isnan(_2577) ? _2578 : min(_2577, _2578));
            float _2726 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : min(_2716, 0.0));
            float _2727 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : min(_2717, 0.0));
            _2771 = ((abs(_2584 / _2572) * cbSceneParam._m0[80u].y) * ((((_2726 - _2727) * 2.0) - ((exp2(_2592 * (isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0)))) - exp2(_2592 * (isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0))))) * _2715)) - ((exp2(_2594 * _2726) - exp2(_2594 * _2727)) * _2715))) + (_2587 * cbSceneParam._m0[80u].z);
        }
        vec4 _2773 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2483, _2484, 1.0), 0.0);
        float _2782 = exp2((_2771 * (-1.44269502162933349609375)) * (1.0 - _2773.w));
        float _2783 = log2(_2782);
        float _2799 = log2(_2503);
        _2596 = (exp2(_2799 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].x)) * _2773.x) / cbSceneParam._m0[78u].x)) + _2500;
        _2598 = (exp2(_2799 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].y)) * _2773.y) / cbSceneParam._m0[78u].y)) + _2501;
        _2600 = (exp2(_2799 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].z)) * _2773.z) / cbSceneParam._m0[78u].z)) + _2502;
        _2602 = _2782 * _2503;
    }
    else
    {
        _2596 = _2500;
        _2598 = _2501;
        _2600 = _2502;
        _2602 = _2503;
    }
    bool _2809;
    vec4 _2612;
    vec4 _2634;
    float _2636;
    float _2640;
    float _2641;
    float _2642;
    float _2643;
    bool _2653;
    for (;;)
    {
        _2612 = cbMatDynParam._m0[0u];
        float _2614 = roundEven(_2612.y);
        bool _2615 = _2614 == 3.0;
        float _2616 = log2(_2602);
        float _2623 = exp2(_2616 * cbSceneParam._m0[78u].x) * _2472;
        float _2624 = exp2(_2616 * cbSceneParam._m0[78u].y) * _2473;
        float _2625 = exp2(_2616 * cbSceneParam._m0[78u].z) * _2474;
        float _2632 = _589 + (-0.5);
        _2634 = cbMtdParam._m0[1u];
        _2636 = _2634.y * _2632;
        float _2639 = (_2614 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2640 = _2639 * (_2615 ? _2623 : (_2623 + (cbSceneParam._m0[72u].w * _2596)));
        _2641 = _2639 * (_2615 ? _2624 : (_2624 + (cbSceneParam._m0[72u].w * _2598)));
        _2642 = _2639 * (_2615 ? _2625 : (_2625 + (cbSceneParam._m0[72u].w * _2600)));
        _2643 = _2632 * 0.999000012874603271484375;
        _2653 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2653)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2643) < 0.5)
            {
                _2809 = true;
                break;
            }
        }
        uint _2750 = _641 + uint(_2612.w);
        if ((cbInstanceData._m0[_2750].w < 1.0) && ((cbInstanceData._m0[_2750].w + _2643) < 0.5))
        {
            _2809 = true;
            break;
        }
        if ((_2636 + 1.0) < _2634.x)
        {
            _2809 = true;
            break;
        }
        _2809 = false;
        break;
    }
    float _3014;
    if (_2809)
    {
        discard_state = true;
        _3014 = 0.0;
    }
    else
    {
        _3014 = cbInstanceData._m0[_2475].w;
    }
    SV_Target.x = _2640;
    SV_Target.y = _2641;
    SV_Target.z = _2642;
    SV_Target.w = _3014;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2475].w;
    discard_exit();
}


