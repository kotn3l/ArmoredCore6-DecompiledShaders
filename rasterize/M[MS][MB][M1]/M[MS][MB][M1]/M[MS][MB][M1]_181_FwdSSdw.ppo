#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1316;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _359 = _357.x;
    float _371 = dot(vec4(_359, _357.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _388 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_359 - _371) * cbMtdParam._m0[24u].y) + _371) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3666 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _396 = (_389 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _397 = (_389 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _398 = (_389 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _415 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _437 = _435.x;
    float _447 = dot(vec4(_437, _435.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _461 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_437 - _447) * cbMtdParam._m0[24u].y) + _447) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3677 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _469 = (_462 * ((_415.x * cbMtdParam._m0[13u].x) - _396)) + _396;
    float _470 = (_462 * ((_415.y * cbMtdParam._m0[13u].y) - _397)) + _397;
    float _471 = (_462 * ((_415.z * cbMtdParam._m0[13u].z) - _398)) + _398;
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _530 = _528.x;
    float _531 = _528.y;
    float _532 = _528.z;
    float _539 = ((_511.x - _530) * _389) + _530;
    float _540 = ((_511.y - _531) * _389) + _531;
    float _541 = ((_511.z - _532) * _389) + _532;
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _566 = ((_553.z - _541) * _462) + _541;
    float _569 = ((((_553.x - _539) * _462) + _539) * 2.0) + (-1.0);
    float _570 = ((((_553.y - _540) * _462) + _540) * 2.0) + (-1.0);
    float _571 = dot(vec2(_569, _570), vec2(_569, _570));
    float _3688 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _576 = sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))));
    vec4 _589 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _607 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _609 = _607.x;
    float _610 = 1.0 - _609;
    float _623 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_609 - _610) * cbMtdParam._m0[24u].z) + _610) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3699 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _631 = (_624 * (cbMtdParam._m0[17u].x - _469)) + _469;
    float _632 = (_624 * (cbMtdParam._m0[17u].y - _470)) + _470;
    float _633 = (_624 * (cbMtdParam._m0[17u].z - _471)) + _471;
    vec4 _645 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _659 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _661 = _659.x;
    float _679 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _661) * _389) + _661;
    float _696 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _679) * _462) + _679;
    float _700 = ((_645.x - _696) * cbMtdParam._m0[19u].z) + _696;
    float _702 = _700 - (_700 * _624);
    float _707 = (((_488.z - _566) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _566;
    vec4 _720 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _727 = (_720.x * 2.0) + (-1.0);
    float _728 = (_720.y * 2.0) + (-1.0);
    float _729 = dot(vec2(_727, _728), vec2(_727, _728));
    float _3710 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _737 = (_624 * (_720.z - _707)) + _707;
    float _742 = _569 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_488.x * 2.0) + (-1.0)));
    float _743 = _570 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_488.y * 2.0) + (-1.0)));
    float _755 = (((_727 - _742) + (cbMtdParam._m0[21u].x * _742)) * _624) + _742;
    float _756 = (((_728 - _743) + (cbMtdParam._m0[21u].x * _743)) * _624) + _743;
    float _757 = (_624 * (sqrt(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) - _576)) + _576;
    float _762 = cbMtdParam._m0[22u].x + _589.w;
    float _765 = fma(_757, _237 * NORMAL.x, fma(_756, _244 * TANGENT.x, (_230 * _222) * _755));
    float _768 = fma(_757, _237 * NORMAL.y, fma(_756, _244 * TANGENT.y, (_230 * _223) * _755));
    float _771 = fma(_757, _237 * NORMAL.z, fma(_756, _244 * TANGENT.z, (_230 * _224) * _755));
    float _775 = inversesqrt(dot(vec3(_765, _768, _771), vec3(_765, _768, _771)));
    float _776 = _775 * _765;
    float _777 = _775 * _768;
    float _778 = _775 * _771;
    float _3721 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _779 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _3732 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _3743 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3754 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3765 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3776 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _784 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _798 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _849 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _839);
    float _850 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _839);
    float _851 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _839);
    float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
    float _856 = _849 * _855;
    float _857 = _850 * _855;
    float _858 = _851 * _855;
    float _864 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _865 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _883 = fma(_778, cbSceneParam._m0[5u].z, fma(_777, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _776));
    float _886 = fma(_778, cbSceneParam._m0[6u].z, fma(_777, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _776));
    float _889 = fma(_778, cbSceneParam._m0[7u].z, fma(_777, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _776));
    uint _903 = (_250 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _909 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_903].x;
    float _910 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * cbInstanceData._m0[_903].y;
    float _911 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * cbInstanceData._m0[_903].z;
    float _3787 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _915 = 1.0 - _784;
    float _916 = _912 * _915;
    float _917 = _913 * _915;
    float _918 = _914 * _915;
    float _923 = (_912 + (-0.039999999105930328369140625)) * _784;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _784;
    float _925 = (_914 + (-0.039999999105930328369140625)) * _784;
    float _926 = _923 + 0.039999999105930328369140625;
    float _928 = _924 + 0.039999999105930328369140625;
    float _929 = _925 + 0.039999999105930328369140625;
    vec4 _938 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _864, cbSceneParam._m0[86u].y * _865));
    float _942 = ((isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * TEXCOORD_5.w) * _938.x;
    float _943 = dot(vec3(_776, _777, _778), vec3(_856, _857, _858));
    float _946 = _943 * 2.0;
    float _950 = (_946 * _776) - _856;
    float _951 = (_946 * _777) - _857;
    float _952 = (_946 * _778) - _858;
    float _956 = abs(dot(vec3(_856, _857, _858), vec3(_776, _777, _778)));
    float _3820 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _958 = sqrt(_779);
    float _971 = exp2((_958 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_958 * 3.0));
    float _977 = (1.0 - _971) * ((_958 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _978 = _971 * _958;
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1315;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1040 = fma(_1014, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006));
        float _1044 = fma(_1014, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006));
        float _1048 = fma(_1014, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006));
        float _1073 = _1006 + _776;
        float _1074 = _1010 + _777;
        float _1075 = _1014 + _778;
        float _1085 = fma(_1075, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1073)) - _1040;
        float _1086 = fma(_1075, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1073)) - _1044;
        float _1087 = fma(_1075, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1073)) - _1048;
        float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
        float _1104 = ((_1091 * _1085) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1040 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1091 * _1086) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1044 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1091 * _1087) / cbModelParam._m0[34u].z) + ((((((_1048 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        float _1143 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1109.x + (-0.5));
        float _1145 = _1143 * (_1109.y + (-0.5));
        float _1146 = _1143 * (_1109.z + (-0.5));
        float _1153 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1116.x + (-0.5));
        float _1155 = _1153 * (_1116.y + (-0.5));
        float _1156 = _1153 * (_1116.z + (-0.5));
        float _1163 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1123.x + (-0.5));
        float _1165 = _1163 * (_1123.y + (-0.5));
        float _1166 = _1163 * (_1123.z + (-0.5));
        float _1173 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1130.x + (-0.5));
        float _1175 = _1173 * (_1130.y + (-0.5));
        float _1176 = _1173 * (_1130.z + (-0.5));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = _1144 * 0.5;
        float _1181 = _1154 * 0.5;
        float _1182 = _1164 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1197 = (dot(vec3(_776, _777, _778), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1207 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3868 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1209 + 1.0))) + _1214) * _1177;
        float _1224 = _1145 * 0.5;
        float _1225 = _1155 * 0.5;
        float _1226 = _1165 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_776, _777, _778), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3901 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1251 + 1.0))) + _1256) * _1178;
        float _1266 = _1146 * 0.5;
        float _1267 = _1156 * 0.5;
        float _1268 = _1166 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_776, _777, _778), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3934 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1293 + 1.0))) + _1298) * _1179;
        _1315 = _1146;
        _1317 = _1145;
        _1318 = _1144;
        _1319 = _1156;
        _1320 = _1155;
        _1321 = _1154;
        _1322 = _1166;
        _1323 = _1165;
        _1324 = _1164;
        _1325 = _1179;
        _1326 = _1178;
        _1327 = _1177;
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
    }
    else
    {
        _1315 = _1316;
        _1317 = _1316;
        _1318 = _1316;
        _1319 = _1316;
        _1320 = _1316;
        _1321 = _1316;
        _1322 = _1316;
        _1323 = _1316;
        _1324 = _1316;
        _1325 = _1316;
        _1326 = _1316;
        _1327 = _1316;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1354 = fma(_1014, cbModelParam._m0[30u].z, fma(_1010, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006));
        float _1358 = fma(_1014, cbModelParam._m0[31u].z, fma(_1010, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006));
        float _1362 = fma(_1014, cbModelParam._m0[32u].z, fma(_1010, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006));
        float _1385 = _1006 + _776;
        float _1386 = _1010 + _777;
        float _1387 = _1014 + _778;
        float _1397 = fma(_1387, cbModelParam._m0[30u].z, fma(_1386, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1385)) - _1354;
        float _1398 = fma(_1387, cbModelParam._m0[31u].z, fma(_1386, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1385)) - _1358;
        float _1399 = fma(_1387, cbModelParam._m0[32u].z, fma(_1386, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1385)) - _1362;
        float _1403 = inversesqrt(dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399)));
        float _1416 = ((_1403 * _1397) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1354 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1403 * _1398) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1358 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1403 * _1399) / cbModelParam._m0[35u].z) + ((((((_1362 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        float _1453 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1420.x + (-0.5));
        float _1455 = _1453 * (_1420.y + (-0.5));
        float _1456 = _1453 * (_1420.z + (-0.5));
        float _1463 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1427.x + (-0.5));
        float _1465 = _1463 * (_1427.y + (-0.5));
        float _1466 = _1463 * (_1427.z + (-0.5));
        float _1473 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1434.x + (-0.5));
        float _1475 = _1473 * (_1434.y + (-0.5));
        float _1476 = _1473 * (_1434.z + (-0.5));
        float _1483 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1441.x + (-0.5));
        float _1485 = _1483 * (_1441.y + (-0.5));
        float _1486 = _1483 * (_1441.z + (-0.5));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = _1454 * 0.5;
        float _1491 = _1464 * 0.5;
        float _1492 = _1474 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_776, _777, _778), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _3997 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1517 + 1.0))) + _1522) * _1487;
        float _1532 = _1455 * 0.5;
        float _1533 = _1465 * 0.5;
        float _1534 = _1475 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_776, _777, _778), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4030 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1559 + 1.0))) + _1564) * _1488;
        float _1574 = _1456 * 0.5;
        float _1575 = _1466 * 0.5;
        float _1576 = _1476 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_776, _777, _778), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4063 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1601 + 1.0))) + _1606) * _1489;
        _1623 = _1456;
        _1624 = _1455;
        _1625 = _1454;
        _1626 = _1466;
        _1627 = _1465;
        _1628 = _1464;
        _1629 = _1476;
        _1630 = _1475;
        _1631 = _1474;
        _1632 = _1489;
        _1633 = _1488;
        _1634 = _1487;
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
    }
    else
    {
        _1623 = _1316;
        _1624 = _1316;
        _1625 = _1316;
        _1626 = _1316;
        _1627 = _1316;
        _1628 = _1316;
        _1629 = _1316;
        _1630 = _1316;
        _1631 = _1316;
        _1632 = _1316;
        _1633 = _1316;
        _1634 = _1316;
        _1635 = 0.0;
        _1636 = 0.0;
        _1637 = 0.0;
    }
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1328)) + _1328;
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1329)) + _1329;
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1330)) + _1330;
    float _1670 = fma(_1649, cbSceneParam._m0[89u].z, fma(_1648, cbSceneParam._m0[89u].y, _1647 * cbSceneParam._m0[89u].x));
    float _1673 = fma(_1649, cbSceneParam._m0[90u].z, fma(_1648, cbSceneParam._m0[90u].y, _1647 * cbSceneParam._m0[90u].x));
    float _1676 = fma(_1649, cbSceneParam._m0[91u].z, fma(_1648, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1647));
    float _1691 = _950 * 0.5;
    float _1692 = _951 * 0.5;
    float _1693 = _952 * 0.5;
    float _1694 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1697 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1700 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1734;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1707 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1315, _1319, _1322, _1325));
        float _1711 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1715 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1722 = dot(vec4(cbModelParam._m0[39u]), vec4(_1691, _1692, _1693, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1722) ? 0.0 : (isnan(0.0) ? _1722 : max(0.0, _1722))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1745;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1736 = dot(vec4(cbModelParam._m0[40u]), vec4(_1691, _1692, _1693, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1749 = (_1745 * cbModelParam._m0[1u].x) + (_1734 * (1.0 - cbModelParam._m0[1u].x));
    float _1759 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _779);
    float _1760 = isnan(_1759) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1759 : min(cbModelParam._m0[25u].z, _1759));
    float _1841;
    float _1843;
    float _1845;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1808 = fma(_1014, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1006)) + cbModelParam._m0[13u].w;
        float _1812 = fma(_1014, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1006)) + cbModelParam._m0[14u].w;
        float _1816 = fma(_1014, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1006)) + cbModelParam._m0[15u].w;
        float _1819 = fma(_952, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950));
        float _1822 = fma(_952, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950));
        float _1825 = fma(_952, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950));
        float _1853;
        if (_1819 > 0.0)
        {
            _1853 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1853 = frontier_phi_14_12_ladder;
        }
        float _2077;
        if (_1822 > 0.0)
        {
            _2077 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2077 = frontier_phi_23_19_ladder;
        }
        float _2334;
        if (_1825 > 0.0)
        {
            _2334 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2334 = frontier_phi_35_30_ladder;
        }
        float _2336 = isnan(_2077) ? _1853 : (isnan(_1853) ? _2077 : min(_1853, _2077));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1819) + _1808;
        float _2342 = (_2337 * _1822) + _1812;
        float _2343 = (_2337 * _1825) + _1816;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2344;
        float _2348 = _2344 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 > _2348) || ((_2342 < _2346) || ((_2341 < _2346) || (_2341 > _2348))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2471 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2343, cbModelParam._m0[9u].z, fma(_2342, cbModelParam._m0[9u].y, _2341 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2343, cbModelParam._m0[10u].z, fma(_2342, cbModelParam._m0[10u].y, _2341 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2343, cbModelParam._m0[11u].z, fma(_2342, cbModelParam._m0[11u].y, _2341 * cbModelParam._m0[11u].x))), _1760);
            frontier_phi_13_35_ladder = _2471.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2471.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2471.x * cbModelParam._m0[1u].y;
        }
        _1841 = frontier_phi_13_35_ladder_2;
        _1843 = frontier_phi_13_35_ladder_1;
        _1845 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_950, _951, _952), _1760);
        _1841 = _1829.x * cbModelParam._m0[1u].y;
        _1843 = _1829.y * cbModelParam._m0[1u].y;
        _1845 = _1829.z * cbModelParam._m0[1u].y;
    }
    float _1849 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _779);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1849 : min(cbModelParam._m0[25u].w, _1849));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1904 = fma(_1014, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1006)) + cbModelParam._m0[21u].w;
        float _1908 = fma(_1014, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1006)) + cbModelParam._m0[22u].w;
        float _1912 = fma(_1014, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1006)) + cbModelParam._m0[23u].w;
        float _1915 = fma(_952, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950));
        float _1918 = fma(_952, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950));
        float _1921 = fma(_952, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950));
        float _2082;
        if (_1915 > 0.0)
        {
            _2082 = abs((1.0 - _1904) / _1915);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1904 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2082 = frontier_phi_25_21_ladder;
        }
        float _2361;
        if (_1918 > 0.0)
        {
            _2361 = abs((1.0 - _1908) / _1918);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1908 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2361 = frontier_phi_37_32_ladder;
        }
        float _2574;
        if (_1921 > 0.0)
        {
            _2574 = abs((1.0 - _1912) / _1921);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1912 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2574 = frontier_phi_46_43_ladder;
        }
        float _2576 = isnan(_2361) ? _2082 : (isnan(_2082) ? _2361 : min(_2082, _2361));
        float _2577 = isnan(_2574) ? _2576 : (isnan(_2576) ? _2574 : min(_2576, _2574));
        float _2581 = (_2577 * _1915) + _1904;
        float _2582 = (_2577 * _1918) + _1908;
        float _2583 = (_2577 * _1921) + _1912;
        float _2584 = _2577 * 9.9999997473787516355514526367188e-05;
        float _2585 = (-1.0) - _2584;
        float _2587 = _2584 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2583 > _2587) || ((_2583 < _2585) || ((_2582 > _2587) || ((_2582 < _2585) || ((_2581 < _2585) || (_2581 > _2587))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2583, cbModelParam._m0[17u].z, fma(_2582, cbModelParam._m0[17u].y, _2581 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2583, cbModelParam._m0[18u].z, fma(_2582, cbModelParam._m0[18u].y, _2581 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2583, cbModelParam._m0[19u].z, fma(_2582, cbModelParam._m0[19u].y, _2581 * cbModelParam._m0[19u].x))), _1850);
            frontier_phi_22_46_ladder = _2782.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2782.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2782.x * cbModelParam._m0[1u].z;
        }
        _1940 = frontier_phi_22_46_ladder_2;
        _1942 = frontier_phi_22_46_ladder_1;
        _1944 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_950, _951, _952), _1850);
        _1940 = _1924.x * cbModelParam._m0[1u].z;
        _1942 = _1924.y * cbModelParam._m0[1u].z;
        _1944 = _1924.z * cbModelParam._m0[1u].z;
    }
    float _1957 = (((_977 * _926) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1940 - _1841)) + _1841);
    float _1959 = (((_977 * _928) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1942 - _1843)) + _1843);
    float _1961 = (((_977 * _929) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1944 - _1845)) + _1845);
    float _1964 = fma(_1961, cbSceneParam._m0[89u].z, fma(_1959, cbSceneParam._m0[89u].y, _1957 * cbSceneParam._m0[89u].x));
    float _1967 = fma(_1961, cbSceneParam._m0[90u].z, fma(_1959, cbSceneParam._m0[90u].y, _1957 * cbSceneParam._m0[90u].x));
    float _1970 = fma(_1961, cbSceneParam._m0[91u].z, fma(_1959, cbSceneParam._m0[91u].y, _1957 * cbSceneParam._m0[91u].x));
    vec4 _1978 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_864, _865));
    float _1980 = _1978.w;
    float _1992 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1980);
    float _1993 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1980);
    float _1994 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1980);
    uvec4 _1998 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2000 = _1998.x * 14u;
    uint _2001 = _2000 + 13u;
    float _2008 = _942 + (-1.0);
    float _2013 = (cbLight._m0[_2001].x * _2008) + 1.0;
    float _2014 = (cbLight._m0[_2001].y * _2008) + 1.0;
    float _2015 = (cbLight._m0[_2001].z * _2008) + 1.0;
    float _2016 = (cbLight._m0[_2001].w * _2008) + 1.0;
    uint _2017 = _2000 + 5u;
    float _2023 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
    uint _2027 = _2000 + 4u;
    float _2036 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
    uint _2040 = _2000 | 1u;
    float _2051 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_776, _777, _778));
    float _2054 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_776, _777, _778));
    float _4199 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _4210 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2059 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * 0.3183098733425140380859375;
    float _2061 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.3183098733425140380859375;
    float _2068 = ((cbLight._m0[_2017].x * _2023) * _2061) + (((cbLight._m0[_2027].x * _1992) * _2036) * _2059);
    float _2069 = ((_2023 * cbLight._m0[_2017].y) * _2061) + (((cbLight._m0[_2027].y * _1993) * _2036) * _2059);
    float _2070 = ((_2023 * cbLight._m0[_2017].z) * _2061) + (((cbLight._m0[_2027].z * _1994) * _2036) * _2059);
    uvec4 _2074 = floatBitsToUint(cbLight._m0[_2000 + 12u]);
    bool _2076 = _2074.x == 0u;
    float _2087;
    float _2089;
    float _2091;
    if (_2076)
    {
        _2087 = _2068;
        _2089 = _2069;
        _2091 = _2070;
    }
    else
    {
        uint _2095 = _2000 + 6u;
        float _2111 = (dot(vec3(cbLight._m0[_2000 + 2u].xyz), vec3(_776, _777, _778)) * 0.5) + 0.5;
        float _2112 = _2111 * _2111;
        float _4221 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2113 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2114 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2087 = (((cbLight._m0[_2095].x * 0.3183098733425140380859375) * _2113) * _2114) + _2068;
        _2089 = (((cbLight._m0[_2095].y * 0.3183098733425140380859375) * _2113) * _2114) + _2069;
        _2091 = (((cbLight._m0[_2095].z * 0.3183098733425140380859375) * _2113) * _2114) + _2070;
    }
    bool _2094 = _2074.y == 0u;
    float _2132;
    float _2134;
    float _2136;
    if (_2094)
    {
        _2132 = _2087;
        _2134 = _2089;
        _2136 = _2091;
    }
    else
    {
        uint _2305 = _2000 + 7u;
        float _2321 = (dot(vec3(cbLight._m0[_2000 + 3u].xyz), vec3(_776, _777, _778)) * 0.5) + 0.5;
        float _2322 = _2321 * _2321;
        float _4237 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2323 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2324 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2132 = (((cbLight._m0[_2305].x * 0.3183098733425140380859375) * _2323) * _2324) + _2087;
        _2134 = (((cbLight._m0[_2305].y * 0.3183098733425140380859375) * _2323) * _2324) + _2089;
        _2136 = (((cbLight._m0[_2305].z * 0.3183098733425140380859375) * _2323) * _2324) + _2091;
    }
    uint _2139 = _2000 + 8u;
    float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _779) * 0.949999988079071044921875);
    float _2153 = _2152 * _2152;
    float _2154 = cbLight._m0[_2000].x + _856;
    float _2155 = cbLight._m0[_2000].y + _857;
    float _2156 = cbLight._m0[_2000].z + _858;
    float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
    float _2161 = _2160 * _2154;
    float _2162 = _2160 * _2155;
    float _2163 = _2160 * _2156;
    float _2164 = dot(vec3(_776, _777, _778), vec3(cbLight._m0[_2000].xyz));
    float _4253 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2167 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _4264 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _2168 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2169 = dot(vec3(_776, _777, _778), vec3(_2161, _2162, _2163));
    float _4275 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2172 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2173 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2161, _2162, _2163));
    float _4286 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2177 = _2153 * _2153;
    float _2181 = ((_2172 * _2172) * (_2177 + (-1.0))) + 1.0;
    float _2189 = exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0);
    float _2190 = 0.959999978542327880859375 - _923;
    float _2192 = 0.959999978542327880859375 - _924;
    float _2193 = 0.959999978542327880859375 - _925;
    float _2200 = 1.0 - _2153;
    float _2211 = (0.5 / (((_2168 * ((_2167 * _2200) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_2168 * _2200) + _2153) * _2167))) * _2167;
    float _4297 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2213 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2177 / ((_2181 * _2181) * 3.141590118408203125));
    uint _2227 = _2000 + 9u;
    float _2238 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _779) * 0.949999988079071044921875);
    float _2239 = _2238 * _2238;
    float _2240 = cbLight._m0[_2040].x + _856;
    float _2241 = cbLight._m0[_2040].y + _857;
    float _2242 = cbLight._m0[_2040].z + _858;
    float _2246 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
    float _2247 = _2246 * _2240;
    float _2248 = _2246 * _2241;
    float _2249 = _2246 * _2242;
    float _2250 = dot(vec3(_776, _777, _778), vec3(cbLight._m0[_2040].xyz));
    float _4308 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2254 = dot(vec3(_776, _777, _778), vec3(_2247, _2248, _2249));
    float _4319 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2258 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2247, _2248, _2249));
    float _4330 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2262 = _2239 * _2239;
    float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
    float _2273 = exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0);
    float _2280 = 1.0 - _2239;
    float _2290 = (0.5 / (((_2168 * ((_2253 * _2280) + _2239)) + 9.9999999392252902907785028219223e-09) + (((_2168 * _2280) + _2239) * _2253))) * _2253;
    float _4341 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
    float _2302 = (((((_2273 * _2190) + _926) * cbLight._m0[_2227].x) * _2292) * _2023) + ((((cbLight._m0[_2139].x * _1992) * ((_2189 * _2190) + _926)) * _2213) * _2036);
    float _2303 = (((((_2273 * _2192) + _928) * cbLight._m0[_2227].y) * _2292) * _2023) + ((((cbLight._m0[_2139].y * _1993) * ((_2189 * _2192) + _928)) * _2213) * _2036);
    float _2304 = (((((_2273 * _2193) + _929) * cbLight._m0[_2227].z) * _2292) * _2023) + ((((cbLight._m0[_2139].z * _1994) * ((_2189 * _2193) + _929)) * _2213) * _2036);
    float _2366;
    float _2368;
    float _2370;
    if (_2076)
    {
        _2366 = _2302;
        _2368 = _2303;
        _2370 = _2304;
    }
    else
    {
        uint _2372 = _2000 + 2u;
        uint _2376 = _2000 + 10u;
        float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _779) * 0.949999988079071044921875);
        float _2391 = _2390 * _2390;
        float _2392 = cbLight._m0[_2372].x + _856;
        float _2393 = cbLight._m0[_2372].y + _857;
        float _2394 = cbLight._m0[_2372].z + _858;
        float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
        float _2399 = _2398 * _2392;
        float _2400 = _2398 * _2393;
        float _2401 = _2398 * _2394;
        float _2402 = dot(vec3(_776, _777, _778), vec3(cbLight._m0[_2372].xyz));
        float _4352 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2406 = dot(vec3(_776, _777, _778), vec3(_2399, _2400, _2401));
        float _4363 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2410 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2399, _2400, _2401));
        float _4374 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2414 = _2391 * _2391;
        float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
        float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0);
        float _2432 = 1.0 - _2391;
        float _2442 = (0.5 / (((_2168 * ((_2405 * _2432) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2168 * _2432) + _2391) * _2405))) * _2405;
        float _4385 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2444 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
        float _2445 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2366 = (((((_2425 * _2190) + _926) * cbLight._m0[_2376].x) * _2444) * _2445) + _2302;
        _2368 = (((((_2425 * _2192) + _928) * cbLight._m0[_2376].y) * _2444) * _2445) + _2303;
        _2370 = (((((_2425 * _2193) + _929) * cbLight._m0[_2376].z) * _2444) * _2445) + _2304;
    }
    float _2480;
    float _2482;
    float _2484;
    if (_2094)
    {
        _2480 = _2366;
        _2482 = _2368;
        _2484 = _2370;
    }
    else
    {
        uint _2491 = _2000 + 3u;
        uint _2495 = _2000 + 11u;
        float _2509 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2491].w)) * _779) * 0.949999988079071044921875);
        float _2510 = _2509 * _2509;
        float _2511 = cbLight._m0[_2491].x + _856;
        float _2512 = cbLight._m0[_2491].y + _857;
        float _2513 = cbLight._m0[_2491].z + _858;
        float _2517 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
        float _2518 = _2517 * _2511;
        float _2519 = _2517 * _2512;
        float _2520 = _2517 * _2513;
        float _2521 = dot(vec3(_776, _777, _778), vec3(cbLight._m0[_2491].xyz));
        float _4401 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2525 = dot(vec3(_776, _777, _778), vec3(_2518, _2519, _2520));
        float _4412 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2528 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2529 = dot(vec3(cbLight._m0[_2491].xyz), vec3(_2518, _2519, _2520));
        float _4423 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2533 = _2510 * _2510;
        float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
        float _2544 = exp2(log2(1.0 - (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) * 5.0);
        float _2551 = 1.0 - _2510;
        float _2561 = (0.5 / (((_2168 * ((_2524 * _2551) + _2510)) + 9.9999999392252902907785028219223e-09) + (((_2168 * _2551) + _2510) * _2524))) * _2524;
        float _4434 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2563 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
        float _2564 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2480 = (((((_2544 * _2190) + _926) * cbLight._m0[_2495].x) * _2563) * _2564) + _2366;
        _2482 = (((((_2544 * _2192) + _928) * cbLight._m0[_2495].y) * _2563) * _2564) + _2368;
        _2484 = (((((_2544 * _2193) + _929) * cbLight._m0[_2495].z) * _2563) * _2564) + _2370;
    }
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    if (_1998.y == 0u)
    {
        float _2639 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2640 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2639;
        float _2641 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2639;
        float _2642 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2639;
        uvec4 _2654 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2655 = _2654.x;
        uint _2666 = uint((float(_2654.y) * floor(float(uint(cbSceneParam._m0[85u].y * _865) / _2655))) + floor(float(uint(cbSceneParam._m0[85u].x * _864) / _2655)));
        float _2676 = (log2(_2642 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2677 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        uint _2680 = uint(isnan(14.0) ? _2677 : (isnan(_2677) ? 14.0 : min(_2677, 14.0)));
        uvec4 _2685 = texelFetch(g_lightClusterGridBuffer, int(((_2680 << 2u) + (_2666 << 6u)) >> 2u));
        uint _2686 = _2685.x;
        uint _2687 = _2654.z;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        if (((((1u << ((_2687 >> 4u) & 15u)) + 4294967295u) & _2686) == 0u) || ((_2687 & 240u) == 0u))
        {
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
        }
        else
        {
            float _2788;
            float _2790;
            float _2792;
            float _2794;
            float _2796;
            float _2798;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            uint _2938 = 0u;
            uint _2947;
            bool _2948;
            for (;;)
            {
                _2947 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                _2948 = _2947 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2948)
                {
                    frontier_phi_61_pred = _2932;
                    frontier_phi_61_pred_1 = _2937;
                    frontier_phi_61_pred_2 = _2936;
                    frontier_phi_61_pred_3 = _2935;
                    frontier_phi_61_pred_4 = _2934;
                    frontier_phi_61_pred_5 = _2933;
                }
                else
                {
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    uint _3062;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2947;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    for (;;)
                    {
                        uint _3066 = uint(findLSB(_3062)) + (_2938 << 5u);
                        uint _3063 = (_3062 + 4294967295u) & _3062;
                        uint _3068 = _3066 * 48u;
                        vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 3u)).x));
                        uint _3088 = (_3066 * 48u) + 4u;
                        vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3088)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 3u)).x));
                        uint _3107 = (_3066 * 48u) + 8u;
                        vec3 _3118 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x));
                        float _3122 = _3082.x - _2640;
                        float _3123 = _3082.y - _2641;
                        float _3124 = _3082.z - _2642;
                        float _3125 = dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124));
                        float _3128 = inversesqrt(_3125);
                        float _3129 = _3128 * _3122;
                        float _3130 = _3128 * _3123;
                        float _3131 = _3128 * _3124;
                        float _3132 = dot(vec3(_883, _886, _889), vec3(_3129, _3130, _3131));
                        float _3137 = 1.0 - (_3125 * _3082.w);
                        float _4460 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3138 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                        float _3139 = sqrt(_3125) * _3101.w;
                        float _3142 = 1.39999997615814208984375 / (_3139 + 1.39999997615814208984375);
                        float _3143 = _3142 * _3142;
                        float _3146 = ((1.0 - _3143) * _3132) + _3143;
                        float _3149 = _3139 * _3139;
                        float _3153 = ((isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0))) * _3138) / ((_3149 * 0.699999988079071044921875) + 1.0);
                        float _3157 = (-0.0) - _2640;
                        float _3158 = (-0.0) - _2641;
                        float _3159 = (-0.0) - _2642;
                        float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                        float _3164 = _3163 * _3157;
                        float _3165 = _3163 * _3158;
                        float _3166 = _3163 * _3159;
                        float _3174 = exp2(log2(1.0 / ((_3149 * 3.5) + 5.0)) * 0.25);
                        float _3175 = 1.0 - _958;
                        float _3182 = sqrt(1.0 - ((1.0 - (_3175 * _3175)) * (1.0 - (_3174 * _3174))));
                        float _3183 = _3182 * _3182;
                        float _3184 = _3183 * _3183;
                        float _3185 = _3164 + _3129;
                        float _3186 = _3165 + _3130;
                        float _3187 = _3166 + _3131;
                        float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                        float _3195 = dot(vec3(_883, _886, _889), vec3(_3164, _3165, _3166));
                        float _4476 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3198 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3199 = dot(vec3(_883, _886, _889), vec3(_3191 * _3185, _3191 * _3186, _3191 * _3187));
                        float _4487 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3202 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3206 = ((_3202 * _3202) * (_3184 + (-1.0))) + 1.0;
                        float _3207 = _3142 * _3183;
                        float _3208 = _3207 * _3207;
                        float _3211 = ((1.0 - _3208) * _3132) + _3208;
                        float _4498 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3212 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3213 = 1.0 - _3183;
                        float _3223 = (0.5 / (((_3212 * ((_3198 * _3213) + _3183)) + 9.9999999392252902907785028219223e-09) + (((_3212 * _3213) + _3183) * _3198))) * _3212;
                        float _4509 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3234 = (((_3184 * 3.1415927410125732421875) * (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) / ((_3206 * _3206) * ((_3149 * 2.1991131305694580078125) + 3.141590118408203125))) * _3138;
                        _2991 = (_3153 * _3101.x) + _3059;
                        _2992 = (_3153 * _3101.y) + _3060;
                        _2993 = (_3153 * _3101.z) + _3061;
                        _2988 = (_3234 * _3118.x) + _3056;
                        _2989 = (_3234 * _3118.y) + _3057;
                        _2990 = (_3234 * _3118.z) + _3058;
                        if (_3063 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _3063;
                        }
                    }
                    frontier_phi_61_pred = _2988;
                    frontier_phi_61_pred_1 = _2993;
                    frontier_phi_61_pred_2 = _2992;
                    frontier_phi_61_pred_3 = _2991;
                    frontier_phi_61_pred_4 = _2990;
                    frontier_phi_61_pred_5 = _2989;
                }
                _2788 = frontier_phi_61_pred;
                _2798 = frontier_phi_61_pred_1;
                _2796 = frontier_phi_61_pred_2;
                _2794 = frontier_phi_61_pred_3;
                _2792 = frontier_phi_61_pred_4;
                _2790 = frontier_phi_61_pred_5;
                uint _2939 = _2938 + 1u;
                if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2932 = _2788;
                    _2933 = _2790;
                    _2934 = _2792;
                    _2935 = _2794;
                    _2936 = _2796;
                    _2937 = _2798;
                    _2938 = _2939;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
        }
        uvec4 _2801 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2802 = _2801.z;
        uint _2804 = (_2802 >> 8u) & 15u;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((4294967295u << _2804) & _2686) == 0u)
        {
            _2900 = _2787;
            _2902 = _2789;
            _2904 = _2791;
            _2906 = _2793;
            _2908 = _2795;
            _2910 = _2797;
        }
        else
        {
            float _2925 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
            float _2926 = _2925 * _2640;
            float _2927 = _2925 * _2641;
            float _2928 = _2925 * _2642;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2804 < ((_2802 >> 12u) & 15u))
            {
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _3039 = _2787;
                float _3040 = _2789;
                float _3041 = _2791;
                float _3042 = _2793;
                float _3043 = _2795;
                float _3044 = _2797;
                uint _3045 = _2804;
                uint _3054;
                bool _3055;
                for (;;)
                {
                    _3054 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_3045 << 2u)) >> 2u)).x;
                    _3055 = _3054 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3055)
                    {
                        frontier_phi_67_pred = _3042;
                        frontier_phi_67_pred_1 = _3043;
                        frontier_phi_67_pred_2 = _3044;
                        frontier_phi_67_pred_3 = _3041;
                        frontier_phi_67_pred_4 = _3040;
                        frontier_phi_67_pred_5 = _3039;
                    }
                    else
                    {
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3252 = _3039;
                        float _3253 = _3040;
                        float _3254 = _3041;
                        float _3255 = _3042;
                        float _3256 = _3043;
                        float _3257 = _3044;
                        uint _3258 = _3054;
                        uint _3259;
                        vec4 _3284;
                        float _3285;
                        vec4 _3300;
                        vec3 _3312;
                        vec4 _3327;
                        vec4 _3342;
                        float _3388;
                        bool _3389;
                        for (;;)
                        {
                            uint _3269 = ((_3045 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3258));
                            _3259 = (_3258 + 4294967295u) & _3258;
                            uint _3271 = _3269 * 40u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            _3285 = _3284.w;
                            uint _3287 = (_3269 * 40u) + 4u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3302 = (_3269 * 40u) + 8u;
                            _3312 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x));
                            uint _3314 = (_3269 * 40u) + 16u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3329 = (_3269 * 40u) + 20u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3344 = (_3269 * 40u) + 24u;
                            vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3363 = (_3269 * 40u) + 28u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3388 = fma(_2642, _3376.z, fma(_2641, _3376.y, _3376.x * _2640)) + _3376.w;
                            _3389 = !((fma(_2642, _3357.z, fma(_2641, _3357.y, _3357.x * _2640)) + _3357.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3389)
                            {
                                float _3416 = _3284.x - _2640;
                                float _3417 = _3284.y - _2641;
                                float _3418 = _3284.z - _2642;
                                float _3419 = dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418));
                                float _3422 = inversesqrt(_3419);
                                float _3423 = _3422 * _3416;
                                float _3424 = _3422 * _3417;
                                float _3425 = _3422 * _3418;
                                float _3429 = 1.0 - (_3419 / (_3285 * _3285));
                                float _4520 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3434 = sqrt(_3419) * _3300.w;
                                float _3436 = 1.39999997615814208984375 / (_3434 + 1.39999997615814208984375);
                                float _3437 = _3436 * _3436;
                                float _3440 = ((1.0 - _3437) * dot(vec3(_3423, _3424, _3425), vec3(_883, _886, _889))) + _3437;
                                float _3443 = _3434 * _3434;
                                float _3447 = (fma(_2642, _3327.z, fma(_2641, _3327.y, _3327.x * _2640)) + _3327.w) / _3388;
                                float _3448 = (fma(_2642, _3342.z, fma(_2641, _3342.y, _3342.x * _2640)) + _3342.w) / _3388;
                                float _3452 = 1.0 - dot(vec2(_3447, _3448), vec2(_3447, _3448));
                                float _4536 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3454 = _3453 * (((isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))) * _3430) / ((_3443 * 0.699999988079071044921875) + 1.0));
                                float _3466 = exp2(log2(1.0 / ((_3443 * 3.5) + 5.0)) * 0.25);
                                float _3467 = 1.0 - _958;
                                float _3474 = sqrt(1.0 - ((1.0 - (_3467 * _3467)) * (1.0 - (_3466 * _3466))));
                                float _3475 = _3474 * _3474;
                                float _3476 = _3475 * _3475;
                                float _3477 = _3423 - _2926;
                                float _3478 = _3424 - _2927;
                                float _3479 = _3425 - _2928;
                                float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                                float _3487 = dot(vec3(_883, _886, _889), vec3((-0.0) - _2926, (-0.0) - _2927, (-0.0) - _2928));
                                float _4547 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3491 = dot(vec3(_883, _886, _889), vec3(_3483 * _3477, _3483 * _3478, _3483 * _3479));
                                float _4558 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3498 = ((_3494 * _3494) * (_3476 + (-1.0))) + 1.0;
                                float _3499 = _3436 * _3475;
                                float _3500 = _3499 * _3499;
                                float _3506 = ((1.0 - _3500) * dot(vec3(_883, _886, _889), vec3(_3423, _3424, _3425))) + _3500;
                                float _4569 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3508 = 1.0 - _3475;
                                float _3518 = (0.5 / (((_3507 * ((_3490 * _3508) + _3475)) + 9.9999999392252902907785028219223e-09) + (((_3507 * _3508) + _3475) * _3490))) * _3507;
                                float _4580 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3528 = (_3453 * _3430) * (((_3476 * 3.1415927410125732421875) * (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) / ((_3498 * _3498) * ((_3443 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3528 * _3312.x;
                                frontier_phi_73_pred_1 = _3528 * _3312.y;
                                frontier_phi_73_pred_2 = _3454 * _3300.z;
                                frontier_phi_73_pred_3 = _3454 * _3300.y;
                                frontier_phi_73_pred_4 = _3454 * _3300.x;
                                frontier_phi_73_pred_5 = _3528 * _3312.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3532 = frontier_phi_73_pred;
                            _3533 = frontier_phi_73_pred_1;
                            _3537 = frontier_phi_73_pred_2;
                            _3536 = frontier_phi_73_pred_3;
                            _3535 = frontier_phi_73_pred_4;
                            _3534 = frontier_phi_73_pred_5;
                            _3242 = _3535 + _3255;
                            _3243 = _3536 + _3256;
                            _3244 = _3537 + _3257;
                            _3239 = _3532 + _3252;
                            _3240 = _3533 + _3253;
                            _3241 = _3534 + _3254;
                            if (_3259 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3259;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3242;
                        frontier_phi_67_pred_1 = _3243;
                        frontier_phi_67_pred_2 = _3244;
                        frontier_phi_67_pred_3 = _3241;
                        frontier_phi_67_pred_4 = _3240;
                        frontier_phi_67_pred_5 = _3239;
                    }
                    _2907 = frontier_phi_67_pred;
                    _2909 = frontier_phi_67_pred_1;
                    _2911 = frontier_phi_67_pred_2;
                    _2905 = frontier_phi_67_pred_3;
                    _2903 = frontier_phi_67_pred_4;
                    _2901 = frontier_phi_67_pred_5;
                    uint _3046 = _3045 + 1u;
                    if (_3046 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3039 = _2901;
                        _3040 = _2903;
                        _3041 = _2905;
                        _3042 = _2907;
                        _3043 = _2909;
                        _3044 = _2911;
                        _3045 = _3046;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2909;
                frontier_phi_55_56_ladder_1 = _2911;
                frontier_phi_55_56_ladder_2 = _2907;
                frontier_phi_55_56_ladder_3 = _2905;
                frontier_phi_55_56_ladder_4 = _2903;
                frontier_phi_55_56_ladder_5 = _2901;
            }
            else
            {
                frontier_phi_55_56_ladder = _2795;
                frontier_phi_55_56_ladder_1 = _2797;
                frontier_phi_55_56_ladder_2 = _2793;
                frontier_phi_55_56_ladder_3 = _2791;
                frontier_phi_55_56_ladder_4 = _2789;
                frontier_phi_55_56_ladder_5 = _2787;
            }
            _2900 = frontier_phi_55_56_ladder_5;
            _2902 = frontier_phi_55_56_ladder_4;
            _2904 = frontier_phi_55_56_ladder_3;
            _2906 = frontier_phi_55_56_ladder_2;
            _2908 = frontier_phi_55_56_ladder;
            _2910 = frontier_phi_55_56_ladder_1;
        }
        float _2915 = isnan(1.0) ? _942 : (isnan(_942) ? 1.0 : min(_942, 1.0));
        _2699 = (_2915 * _2906) + _2132;
        _2701 = (_2915 * _2908) + _2134;
        _2703 = (_2915 * _2910) + _2136;
        _2705 = ((_2900 * _926) * _2915) + _2480;
        _2707 = ((_2902 * _928) * _2915) + _2482;
        _2709 = ((_2904 * _929) * _2915) + _2484;
    }
    else
    {
        _2699 = _2132;
        _2701 = _2134;
        _2703 = _2136;
        _2705 = _2480;
        _2707 = _2482;
        _2709 = _2484;
    }
    float _4596 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4607 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4618 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    uint _2729 = _250 + 6u;
    float _2737 = _864 / cbSceneParam._m0[86u].x;
    float _2738 = _865 / cbSceneParam._m0[86u].y;
    vec4 _2752 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2737, _2738, (log2((isnan(cbSceneParam._m0[77u].w) ? _798 : (isnan(_798) ? cbSceneParam._m0[77u].w : min(_798, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2754 = _2752.x;
    float _2755 = _2752.y;
    float _2756 = _2752.z;
    float _2757 = _2752.w;
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    if (_798 > cbSceneParam._m0[78u].w)
    {
        float _2812 = isnan(_798) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _798 : min(cbSceneParam._m0[80u].w, _798));
        float _2813 = _2812 / _798;
        float _2824 = _2813 * _849;
        float _2825 = _850 * _2813;
        float _2826 = (-0.0) - _2825;
        float _2828 = _2813 * _851;
        float _2830 = (cbSceneParam._m0[77u].w * _2826) / _2812;
        float _2831 = _2830 + cbSceneParam._m0[79u].w;
        float _2832 = cbSceneParam._m0[79u].w - _2825;
        float _2838 = sqrt(((_2824 * _2824) + (_2825 * _2825)) + (_2828 * _2828));
        float _2841 = (1.0 - (cbSceneParam._m0[77u].w / _2812)) * _2838;
        float _2846 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2848 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3001;
        if (abs((_2826 - _2830) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3001 = ((((_2831 > 0.0) ? exp2(_2846 * _2831) : (2.0 - exp2(_2848 * _2831))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2841;
        }
        else
        {
            float _2961 = 1.0 / cbSceneParam._m0[80u].x;
            float _2962 = isnan(_2832) ? _2831 : (isnan(_2831) ? _2832 : max(_2831, _2832));
            float _2963 = isnan(_2832) ? _2831 : (isnan(_2831) ? _2832 : min(_2831, _2832));
            float _2972 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : min(_2962, 0.0));
            float _2973 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : min(_2963, 0.0));
            _3001 = ((abs(_2838 / _2826) * cbSceneParam._m0[80u].y) * ((((_2972 - _2973) * 2.0) - ((exp2(_2846 * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0)))) - exp2(_2846 * (isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))))) * _2961)) - ((exp2(_2848 * _2972) - exp2(_2848 * _2973)) * _2961))) + (_2841 * cbSceneParam._m0[80u].z);
        }
        vec4 _3003 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2737, _2738, 1.0), 0.0);
        float _3012 = exp2((_3001 * (-1.44269502162933349609375)) * (1.0 - _3003.w));
        float _3013 = log2(_3012);
        float _3029 = log2(_2757);
        _2850 = (exp2(_3029 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3013 * cbSceneParam._m0[78u].x)) * _3003.x) / cbSceneParam._m0[78u].x)) + _2754;
        _2852 = (exp2(_3029 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3013 * cbSceneParam._m0[78u].y)) * _3003.y) / cbSceneParam._m0[78u].y)) + _2755;
        _2854 = (exp2(_3029 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3013 * cbSceneParam._m0[78u].z)) * _3003.z) / cbSceneParam._m0[78u].z)) + _2756;
        _2856 = _3012 * _2757;
    }
    else
    {
        _2850 = _2754;
        _2852 = _2755;
        _2854 = _2756;
        _2856 = _2757;
    }
    float _2868 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2869 = _2868 == 3.0;
    float _2870 = log2(_2856);
    float _2877 = exp2(_2870 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2699 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _942))) + ((_2705 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1749)) * cbPerFrame._m0[3u].x));
    float _2878 = exp2(_2870 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2701 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _942))) + ((_2707 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1749)) * cbPerFrame._m0[3u].x));
    float _2879 = exp2(_2870 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2703 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _942))) + ((_2709 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1749)) * cbPerFrame._m0[3u].x));
    float _2888 = (_2868 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2888 * (_2869 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2850)));
    SV_Target.y = _2888 * (_2869 ? _2878 : (_2878 + (cbSceneParam._m0[72u].w * _2852)));
    SV_Target.z = _2888 * (_2869 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2854)));
    SV_Target.w = cbInstanceData._m0[_2729].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2729].w;
}


