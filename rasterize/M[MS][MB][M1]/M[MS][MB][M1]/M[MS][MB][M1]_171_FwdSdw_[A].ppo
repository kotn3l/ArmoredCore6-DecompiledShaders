#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1336;
float _4000;
float _4001;
float _4002;
float _4003;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4012 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4023 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4034 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].y) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4045 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _435 = (_428 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _436 = (_428 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _437 = (_428 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _454 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[24u].y) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4056 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _508 = (_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435;
    float _509 = (_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436;
    float _510 = (_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437;
    float _514 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _508;
    float _517 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _509;
    float _520 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _510;
    float _527 = ((_508 - _514) * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) + _514;
    float _528 = ((_509 - _517) * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) + _517;
    float _529 = ((_510 - _520) * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) + _520;
    vec4 _541 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _564 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _581 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _583 = _581.x;
    float _584 = _581.y;
    float _585 = _581.z;
    float _592 = ((_564.x - _583) * _428) + _583;
    float _593 = ((_564.y - _584) * _428) + _584;
    float _594 = ((_564.z - _585) * _428) + _585;
    vec4 _606 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _619 = ((_606.z - _594) * _501) + _594;
    float _622 = ((((_606.x - _592) * _501) + _592) * 2.0) + (-1.0);
    float _623 = ((((_606.y - _593) * _501) + _593) * 2.0) + (-1.0);
    float _624 = dot(vec2(_622, _623), vec2(_622, _623));
    float _4067 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _629 = sqrt(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))));
    vec4 _649 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _661 = (_622 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_541.x * 2.0) + (-1.0)))) + (((_649.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _662 = (_623 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_541.y * 2.0) + (-1.0)))) + (((_649.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _674 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _688 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _690 = _688.x;
    float _708 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _295) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _296) + cbTextureTilingScale._m0[9u].w)).x - _690) * _428) + _690;
    float _726 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _295) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _296) + cbTextureTilingScale._m0[21u].w)).x - _708) * _501) + _708;
    float _730 = ((_674.x - _726) * cbMtdParam._m0[19u].z) + _726;
    float _735 = (((_541.z - _619) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _619;
    float _739 = ((_649.z - _735) * cbMtdParam._m0[19u].w) + _735;
    float _741 = cbMtdParam._m0[22u].x + _649.w;
    float _744 = fma(_629, _242 * NORMAL.x, fma(_662, _249 * TANGENT.x, (_235 * _227) * _661));
    float _747 = fma(_629, _242 * NORMAL.y, fma(_662, _249 * TANGENT.y, (_235 * _228) * _661));
    float _750 = fma(_629, _242 * NORMAL.z, fma(_662, _249 * TANGENT.z, (_235 * _229) * _661));
    float _754 = inversesqrt(dot(vec3(_744, _747, _750), vec3(_744, _747, _750)));
    float _755 = _754 * _744;
    float _756 = _754 * _747;
    float _757 = _754 * _750;
    float _4078 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _758 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4100 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4111 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _4122 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4133 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _763 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _777 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _828 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _818);
    float _829 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _818);
    float _830 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _818);
    float _834 = inversesqrt(dot(vec3(_828, _829, _830), vec3(_828, _829, _830)));
    float _835 = _828 * _834;
    float _836 = _829 * _834;
    float _837 = _830 * _834;
    vec4 _842 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _844 = _842.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1016 = sqrt(((_828 * _828) + (_829 * _829)) + (_830 * _830));
        float _1022 = (cbMatDynParam._m0[5u].x * _1016) + cbMatDynParam._m0[5u].y;
        float _4144 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1027 = (cbMatDynParam._m0[5u].z * _1016) + cbMatDynParam._m0[5u].w;
        float _4155 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) - _1023)) + _1023) < ((_844 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _855 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _856 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _874 = fma(_757, cbSceneParam._m0[5u].z, fma(_756, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _755));
    float _877 = fma(_757, cbSceneParam._m0[6u].z, fma(_756, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _755));
    float _880 = fma(_757, cbSceneParam._m0[7u].z, fma(_756, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _755));
    uint _893 = _276 + 9u;
    uint _894 = _893 + uint(cbMatDynParam._m0[0u].w);
    float _900 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * cbInstanceData._m0[_894].x;
    float _901 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * cbInstanceData._m0[_894].y;
    float _902 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * cbInstanceData._m0[_894].z;
    float _4166 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _4177 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _4188 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _906 = 1.0 - _763;
    float _907 = _903 * _906;
    float _908 = _904 * _906;
    float _909 = _905 * _906;
    float _914 = (_903 + (-0.039999999105930328369140625)) * _763;
    float _915 = (_904 + (-0.039999999105930328369140625)) * _763;
    float _916 = (_905 + (-0.039999999105930328369140625)) * _763;
    float _917 = _914 + 0.039999999105930328369140625;
    float _919 = _915 + 0.039999999105930328369140625;
    float _920 = _916 + 0.039999999105930328369140625;
    vec4 _929 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _855, cbSceneParam._m0[86u].y * _856));
    float _933 = ((isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * TEXCOORD_5.w) * _929.x;
    float _934 = dot(vec3(_755, _756, _757), vec3(_835, _836, _837));
    float _937 = _934 * 2.0;
    float _941 = (_937 * _755) - _835;
    float _942 = (_937 * _756) - _836;
    float _943 = (_937 * _757) - _837;
    float _947 = abs(dot(vec3(_835, _836, _837), vec3(_755, _756, _757)));
    float _4199 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _949 = sqrt(_758);
    float _962 = exp2((_949 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_949 * 3.0));
    float _968 = (1.0 - _962) * ((_949 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _969 = _962 * _949;
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1335;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1060 = fma(_1005, cbModelParam._m0[26u].z, fma(_1001, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _997));
        float _1064 = fma(_1005, cbModelParam._m0[27u].z, fma(_1001, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _997));
        float _1068 = fma(_1005, cbModelParam._m0[28u].z, fma(_1001, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _997));
        float _1093 = _997 + _755;
        float _1094 = _1001 + _756;
        float _1095 = _1005 + _757;
        float _1105 = fma(_1095, cbModelParam._m0[26u].z, fma(_1094, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093)) - _1060;
        float _1106 = fma(_1095, cbModelParam._m0[27u].z, fma(_1094, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093)) - _1064;
        float _1107 = fma(_1095, cbModelParam._m0[28u].z, fma(_1094, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093)) - _1068;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1060 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1064 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[34u].z) + ((((((_1068 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1163 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1129.x + (-0.5));
        float _1165 = _1163 * (_1129.y + (-0.5));
        float _1166 = _1163 * (_1129.z + (-0.5));
        float _1173 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1136.x + (-0.5));
        float _1175 = _1173 * (_1136.y + (-0.5));
        float _1176 = _1173 * (_1136.z + (-0.5));
        float _1183 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1143.x + (-0.5));
        float _1185 = _1183 * (_1143.y + (-0.5));
        float _1186 = _1183 * (_1143.z + (-0.5));
        float _1193 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1150.x + (-0.5));
        float _1195 = _1193 * (_1150.y + (-0.5));
        float _1196 = _1193 * (_1150.z + (-0.5));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = _1164 * 0.5;
        float _1201 = _1174 * 0.5;
        float _1202 = _1184 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1217 = (dot(vec3(_755, _756, _757), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1227 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _4247 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1229 + 1.0))) + _1234) * _1197;
        float _1244 = _1165 * 0.5;
        float _1245 = _1175 * 0.5;
        float _1246 = _1185 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_755, _756, _757), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4280 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1271 + 1.0))) + _1276) * _1198;
        float _1286 = _1166 * 0.5;
        float _1287 = _1176 * 0.5;
        float _1288 = _1186 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_755, _756, _757), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4313 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1313 + 1.0))) + _1318) * _1199;
        _1335 = _1166;
        _1337 = _1165;
        _1338 = _1164;
        _1339 = _1176;
        _1340 = _1175;
        _1341 = _1174;
        _1342 = _1186;
        _1343 = _1185;
        _1344 = _1184;
        _1345 = _1199;
        _1346 = _1198;
        _1347 = _1197;
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1336;
        _1337 = _1336;
        _1338 = _1336;
        _1339 = _1336;
        _1340 = _1336;
        _1341 = _1336;
        _1342 = _1336;
        _1343 = _1336;
        _1344 = _1336;
        _1345 = _1336;
        _1346 = _1336;
        _1347 = _1336;
        _1348 = 0.0;
        _1349 = 0.0;
        _1350 = 0.0;
    }
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1377 = fma(_1005, cbModelParam._m0[30u].z, fma(_1001, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _997));
        float _1381 = fma(_1005, cbModelParam._m0[31u].z, fma(_1001, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _997));
        float _1385 = fma(_1005, cbModelParam._m0[32u].z, fma(_1001, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _997));
        float _1408 = _997 + _755;
        float _1409 = _1001 + _756;
        float _1410 = _1005 + _757;
        float _1420 = fma(_1410, cbModelParam._m0[30u].z, fma(_1409, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1408)) - _1377;
        float _1421 = fma(_1410, cbModelParam._m0[31u].z, fma(_1409, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1408)) - _1381;
        float _1422 = fma(_1410, cbModelParam._m0[32u].z, fma(_1409, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1408)) - _1385;
        float _1426 = inversesqrt(dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422)));
        float _1439 = ((_1426 * _1420) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1377 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1426 * _1421) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1381 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1426 * _1422) / cbModelParam._m0[35u].z) + ((((((_1385 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        float _1476 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1443.x + (-0.5));
        float _1478 = _1476 * (_1443.y + (-0.5));
        float _1479 = _1476 * (_1443.z + (-0.5));
        float _1486 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1450.x + (-0.5));
        float _1488 = _1486 * (_1450.y + (-0.5));
        float _1489 = _1486 * (_1450.z + (-0.5));
        float _1496 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1457.x + (-0.5));
        float _1498 = _1496 * (_1457.y + (-0.5));
        float _1499 = _1496 * (_1457.z + (-0.5));
        float _1506 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1464.x + (-0.5));
        float _1508 = _1506 * (_1464.y + (-0.5));
        float _1509 = _1506 * (_1464.z + (-0.5));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = _1477 * 0.5;
        float _1514 = _1487 * 0.5;
        float _1515 = _1497 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_755, _756, _757), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4354 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4365 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4376 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_1540 + 1.0))) + _1545) * _1510;
        float _1555 = _1478 * 0.5;
        float _1556 = _1488 * 0.5;
        float _1557 = _1498 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_755, _756, _757), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4409 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1582 + 1.0))) + _1587) * _1511;
        float _1597 = _1479 * 0.5;
        float _1598 = _1489 * 0.5;
        float _1599 = _1499 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_755, _756, _757), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4442 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1624 + 1.0))) + _1629) * _1512;
        _1646 = _1479;
        _1647 = _1478;
        _1648 = _1477;
        _1649 = _1489;
        _1650 = _1488;
        _1651 = _1487;
        _1652 = _1499;
        _1653 = _1498;
        _1654 = _1497;
        _1655 = _1512;
        _1656 = _1511;
        _1657 = _1510;
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
    }
    else
    {
        _1646 = _1336;
        _1647 = _1336;
        _1648 = _1336;
        _1649 = _1336;
        _1650 = _1336;
        _1651 = _1336;
        _1652 = _1336;
        _1653 = _1336;
        _1654 = _1336;
        _1655 = _1336;
        _1656 = _1336;
        _1657 = _1336;
        _1658 = 0.0;
        _1659 = 0.0;
        _1660 = 0.0;
    }
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1348)) + _1348;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1349)) + _1349;
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1350)) + _1350;
    float _1693 = fma(_1672, cbSceneParam._m0[89u].z, fma(_1671, cbSceneParam._m0[89u].y, _1670 * cbSceneParam._m0[89u].x));
    float _1696 = fma(_1672, cbSceneParam._m0[90u].z, fma(_1671, cbSceneParam._m0[90u].y, _1670 * cbSceneParam._m0[90u].x));
    float _1699 = fma(_1672, cbSceneParam._m0[91u].z, fma(_1671, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1670));
    float _1714 = _941 * 0.5;
    float _1715 = _942 * 0.5;
    float _1716 = _943 * 0.5;
    float _1717 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1720 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1723 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1757;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1730 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1335, _1339, _1342, _1345));
        float _1734 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1738 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1745 = dot(vec4(cbModelParam._m0[39u]), vec4(_1714, _1715, _1716, 1.0));
        _1757 = dot(vec3(isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1745) ? 0.0 : (isnan(0.0) ? _1745 : max(0.0, _1745))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1757 = 1.0;
    }
    float _1768;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1759 = dot(vec4(cbModelParam._m0[40u]), vec4(_1714, _1715, _1716, 1.0));
        _1768 = dot(vec3(isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1759) ? 0.0 : (isnan(0.0) ? _1759 : max(0.0, _1759))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1768 = 1.0;
    }
    float _1772 = (_1768 * cbModelParam._m0[1u].x) + (_1757 * (1.0 - cbModelParam._m0[1u].x));
    float _1782 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _758);
    float _1783 = isnan(_1782) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1782 : min(cbModelParam._m0[25u].z, _1782));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1832 = fma(_1005, cbModelParam._m0[13u].z, fma(_1001, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _997)) + cbModelParam._m0[13u].w;
        float _1836 = fma(_1005, cbModelParam._m0[14u].z, fma(_1001, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _997)) + cbModelParam._m0[14u].w;
        float _1840 = fma(_1005, cbModelParam._m0[15u].z, fma(_1001, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _997)) + cbModelParam._m0[15u].w;
        float _1843 = fma(_943, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941));
        float _1846 = fma(_943, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941));
        float _1849 = fma(_943, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941));
        float _1877;
        if (_1843 > 0.0)
        {
            _1877 = abs((1.0 - _1832) / _1843);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1832 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1877 = frontier_phi_17_15_ladder;
        }
        float _2049;
        if (_1846 > 0.0)
        {
            _2049 = abs((1.0 - _1836) / _1846);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1836 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2049 = frontier_phi_26_22_ladder;
        }
        float _2344;
        if (_1849 > 0.0)
        {
            _2344 = abs((1.0 - _1840) / _1849);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1840 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2344 = frontier_phi_38_33_ladder;
        }
        float _2346 = isnan(_2049) ? _1877 : (isnan(_1877) ? _2049 : min(_1877, _2049));
        float _2347 = isnan(_2344) ? _2346 : (isnan(_2346) ? _2344 : min(_2346, _2344));
        float _2351 = (_2347 * _1843) + _1832;
        float _2352 = (_2347 * _1846) + _1836;
        float _2353 = (_2347 * _1849) + _1840;
        float _2354 = _2347 * 9.9999997473787516355514526367188e-05;
        float _2356 = (-1.0) - _2354;
        float _2358 = _2354 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2353 > _2358) || ((_2353 < _2356) || ((_2352 > _2358) || ((_2352 < _2356) || ((_2351 < _2356) || (_2351 > _2358))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2498 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2353, cbModelParam._m0[9u].z, fma(_2352, cbModelParam._m0[9u].y, _2351 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2353, cbModelParam._m0[10u].z, fma(_2352, cbModelParam._m0[10u].y, _2351 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2353, cbModelParam._m0[11u].z, fma(_2352, cbModelParam._m0[11u].y, _2351 * cbModelParam._m0[11u].x))), _1783);
            frontier_phi_16_38_ladder = _2498.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2498.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2498.x * cbModelParam._m0[1u].y;
        }
        _1865 = frontier_phi_16_38_ladder_2;
        _1867 = frontier_phi_16_38_ladder_1;
        _1869 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1853 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_941, _942, _943), _1783);
        _1865 = _1853.x * cbModelParam._m0[1u].y;
        _1867 = _1853.y * cbModelParam._m0[1u].y;
        _1869 = _1853.z * cbModelParam._m0[1u].y;
    }
    float _1873 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _758);
    float _1874 = isnan(_1873) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1873 : min(cbModelParam._m0[25u].w, _1873));
    float _1964;
    float _1966;
    float _1968;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1928 = fma(_1005, cbModelParam._m0[21u].z, fma(_1001, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _997)) + cbModelParam._m0[21u].w;
        float _1932 = fma(_1005, cbModelParam._m0[22u].z, fma(_1001, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _997)) + cbModelParam._m0[22u].w;
        float _1936 = fma(_1005, cbModelParam._m0[23u].z, fma(_1001, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _997)) + cbModelParam._m0[23u].w;
        float _1939 = fma(_943, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941));
        float _1942 = fma(_943, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941));
        float _1945 = fma(_943, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941));
        float _2054;
        if (_1939 > 0.0)
        {
            _2054 = abs((1.0 - _1928) / _1939);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1928 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2054 = frontier_phi_28_24_ladder;
        }
        float _2371;
        if (_1942 > 0.0)
        {
            _2371 = abs((1.0 - _1932) / _1942);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1932 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2371 = frontier_phi_40_35_ladder;
        }
        float _2709;
        if (_1945 > 0.0)
        {
            _2709 = abs((1.0 - _1936) / _1945);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1936 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2709 = frontier_phi_50_47_ladder;
        }
        float _2711 = isnan(_2371) ? _2054 : (isnan(_2054) ? _2371 : min(_2054, _2371));
        float _2712 = isnan(_2709) ? _2711 : (isnan(_2711) ? _2709 : min(_2711, _2709));
        float _2716 = (_2712 * _1939) + _1928;
        float _2717 = (_2712 * _1942) + _1932;
        float _2718 = (_2712 * _1945) + _1936;
        float _2719 = _2712 * 9.9999997473787516355514526367188e-05;
        float _2720 = (-1.0) - _2719;
        float _2722 = _2719 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2718 > _2722) || ((_2718 < _2720) || ((_2717 > _2722) || ((_2717 < _2720) || ((_2716 < _2720) || (_2716 > _2722))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2840 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2718, cbModelParam._m0[17u].z, fma(_2717, cbModelParam._m0[17u].y, _2716 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2718, cbModelParam._m0[18u].z, fma(_2717, cbModelParam._m0[18u].y, _2716 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2718, cbModelParam._m0[19u].z, fma(_2717, cbModelParam._m0[19u].y, _2716 * cbModelParam._m0[19u].x))), _1874);
            frontier_phi_25_50_ladder = _2840.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2840.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2840.x * cbModelParam._m0[1u].z;
        }
        _1964 = frontier_phi_25_50_ladder_2;
        _1966 = frontier_phi_25_50_ladder_1;
        _1968 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1948 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_941, _942, _943), _1874);
        _1964 = _1948.x * cbModelParam._m0[1u].z;
        _1966 = _1948.y * cbModelParam._m0[1u].z;
        _1968 = _1948.z * cbModelParam._m0[1u].z;
    }
    float _1981 = (((_968 * _917) + _969) * _933) * ((cbModelParam._m0[1u].w * (_1964 - _1865)) + _1865);
    float _1983 = (((_968 * _919) + _969) * _933) * ((cbModelParam._m0[1u].w * (_1966 - _1867)) + _1867);
    float _1985 = (((_968 * _920) + _969) * _933) * ((cbModelParam._m0[1u].w * (_1968 - _1869)) + _1869);
    float _1988 = fma(_1985, cbSceneParam._m0[89u].z, fma(_1983, cbSceneParam._m0[89u].y, _1981 * cbSceneParam._m0[89u].x));
    float _1991 = fma(_1985, cbSceneParam._m0[90u].z, fma(_1983, cbSceneParam._m0[90u].y, _1981 * cbSceneParam._m0[90u].x));
    float _1994 = fma(_1985, cbSceneParam._m0[91u].z, fma(_1983, cbSceneParam._m0[91u].y, _1981 * cbSceneParam._m0[91u].x));
    float _2028 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2032 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2041 = _2028 / _2040;
    float _2042 = _2032 / _2040;
    float _2043 = _2036 / _2040;
    float _2190;
    float _2191;
    float _2192;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2070 = ((uint(_2043 > cbSceneParam._m0[59u].y) + uint(_2043 > cbSceneParam._m0[59u].x)) + uint(_2043 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2071 = _2070 + 43u;
        uint _2079 = _2070 + 44u;
        uint _2087 = _2070 + 45u;
        uint _2095 = _2070 + 46u;
        float _2106 = fma(_2040, cbSceneParam._m0[_2071].w, fma(_2036, cbSceneParam._m0[_2071].z, fma(_2032, cbSceneParam._m0[_2071].y, _2028 * cbSceneParam._m0[_2071].x)));
        float _2110 = fma(_2040, cbSceneParam._m0[_2079].w, fma(_2036, cbSceneParam._m0[_2079].z, fma(_2032, cbSceneParam._m0[_2079].y, _2028 * cbSceneParam._m0[_2079].x)));
        float _2118 = fma(_2040, cbSceneParam._m0[_2095].w, fma(_2036, cbSceneParam._m0[_2095].z, fma(_2032, cbSceneParam._m0[_2095].y, _2028 * cbSceneParam._m0[_2095].x)));
        float _2123 = cbSceneParam._m0[33u].z * _2118;
        float _2125 = cbSceneParam._m0[33u].w * _2118;
        float _2128 = fma(_2040, cbSceneParam._m0[_2087].w, fma(_2036, cbSceneParam._m0[_2087].z, fma(_2032, cbSceneParam._m0[_2087].y, _2028 * cbSceneParam._m0[_2087].x))) / _2118;
        float _2176 = (cbSceneParam._m0[33u].x - sqrt(((_2042 * _2042) + (_2041 * _2041)) + (_2043 * _2043))) * cbSceneParam._m0[33u].y;
        float _4568 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2183 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2123 + _2106) / _2118, (_2125 + _2110) / _2118), _2128), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2125 + _2106) / _2118, (_2110 - _2123) / _2118), _2128), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2106 - _2123) / _2118, (_2110 - _2125) / _2118), _2128), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2106 - _2125) / _2118, (_2123 + _2110) / _2118), _2128), 0.0)).x), vec4(0.25)));
        _2190 = 1.0 - (_2183 * cbSceneParam._m0[34u].x);
        _2191 = 1.0 - (_2183 * cbSceneParam._m0[34u].y);
        _2192 = 1.0 - (_2183 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2190 = 1.0;
        _2191 = 1.0;
        _2192 = 1.0;
    }
    float _2256;
    float _2258;
    float _2260;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2244 = fma(_2040, cbSceneParam._m0[63u].w, fma(_2036, cbSceneParam._m0[63u].z, fma(_2032, cbSceneParam._m0[63u].y, _2028 * cbSceneParam._m0[63u].x)));
        float _2245 = fma(_2040, cbSceneParam._m0[60u].w, fma(_2036, cbSceneParam._m0[60u].z, fma(_2032, cbSceneParam._m0[60u].y, _2028 * cbSceneParam._m0[60u].x))) / _2244;
        float _2246 = fma(_2040, cbSceneParam._m0[61u].w, fma(_2036, cbSceneParam._m0[61u].z, fma(_2032, cbSceneParam._m0[61u].y, _2028 * cbSceneParam._m0[61u].x))) / _2244;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2245 >= cbSceneParam._m0[64u].x) && (_2246 >= cbSceneParam._m0[64u].y)) && (_2245 <= cbSceneParam._m0[64u].z)) && (_2246 <= cbSceneParam._m0[64u].w))
        {
            float _2384 = fma(_2040, cbSceneParam._m0[62u].w, fma(_2036, cbSceneParam._m0[62u].z, fma(_2032, cbSceneParam._m0[62u].y, _2028 * cbSceneParam._m0[62u].x))) / _2244;
            float _2388 = isnan(cbSceneParam._m0[41u].w) ? _2384 : (isnan(_2384) ? cbSceneParam._m0[41u].w : max(_2384, cbSceneParam._m0[41u].w));
            float _2431 = (cbSceneParam._m0[33u].x - sqrt(((_2042 * _2042) + (_2041 * _2041)) + (_2043 * _2043))) * cbSceneParam._m0[33u].y;
            float _4584 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
            float _2438 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2245, cbSceneParam._m0[33u].w + _2246), _2388), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2245, _2246 - cbSceneParam._m0[33u].z), _2388), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2245 - cbSceneParam._m0[33u].z, _2246 - cbSceneParam._m0[33u].w), _2388), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2245 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2246), _2388), 0.0)).x), vec4(0.25)));
            float _2442 = 1.0 - (_2438 * cbSceneParam._m0[34u].x);
            float _2443 = 1.0 - (_2438 * cbSceneParam._m0[34u].y);
            float _2444 = 1.0 - (_2438 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2444) ? _2192 : (isnan(_2192) ? _2444 : min(_2192, _2444));
            frontier_phi_37_36_ladder_1 = isnan(_2443) ? _2191 : (isnan(_2191) ? _2443 : min(_2191, _2443));
            frontier_phi_37_36_ladder_2 = isnan(_2442) ? _2190 : (isnan(_2190) ? _2442 : min(_2190, _2442));
        }
        else
        {
            frontier_phi_37_36_ladder = _2192;
            frontier_phi_37_36_ladder_1 = _2191;
            frontier_phi_37_36_ladder_2 = _2190;
        }
        _2256 = frontier_phi_37_36_ladder_2;
        _2258 = frontier_phi_37_36_ladder_1;
        _2260 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2256 = _2190;
        _2258 = _2191;
        _2260 = _2192;
    }
    uvec4 _2265 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2267 = _2265.x * 14u;
    uint _2268 = _2267 + 13u;
    float _2275 = _933 + (-1.0);
    float _2280 = (cbLight._m0[_2268].x * _2275) + 1.0;
    float _2281 = (cbLight._m0[_2268].y * _2275) + 1.0;
    float _2282 = (cbLight._m0[_2268].z * _2275) + 1.0;
    float _2283 = (cbLight._m0[_2268].w * _2275) + 1.0;
    uint _2284 = _2267 + 5u;
    float _2290 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
    uint _2294 = _2267 + 4u;
    float _2303 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
    uint _2307 = _2267 | 1u;
    float _2318 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_755, _756, _757));
    float _2321 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_755, _756, _757));
    float _4620 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _4631 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2326 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * 0.3183098733425140380859375;
    float _2328 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * 0.3183098733425140380859375;
    float _2335 = ((cbLight._m0[_2284].x * _2290) * _2328) + (((cbLight._m0[_2294].x * _2256) * _2303) * _2326);
    float _2336 = ((_2290 * cbLight._m0[_2284].y) * _2328) + (((cbLight._m0[_2294].y * _2258) * _2303) * _2326);
    float _2337 = ((_2290 * cbLight._m0[_2284].z) * _2328) + (((cbLight._m0[_2294].z * _2260) * _2303) * _2326);
    uvec4 _2341 = floatBitsToUint(cbLight._m0[_2267 + 12u]);
    bool _2343 = _2341.x == 0u;
    float _2445;
    float _2447;
    float _2449;
    if (_2343)
    {
        _2445 = _2335;
        _2447 = _2336;
        _2449 = _2337;
    }
    else
    {
        uint _2453 = _2267 + 6u;
        float _2469 = (dot(vec3(cbLight._m0[_2267 + 2u].xyz), vec3(_755, _756, _757)) * 0.5) + 0.5;
        float _2470 = _2469 * _2469;
        float _4642 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2471 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2472 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2445 = (((cbLight._m0[_2453].x * 0.3183098733425140380859375) * _2471) * _2472) + _2335;
        _2447 = (((cbLight._m0[_2453].y * 0.3183098733425140380859375) * _2471) * _2472) + _2336;
        _2449 = (((cbLight._m0[_2453].z * 0.3183098733425140380859375) * _2471) * _2472) + _2337;
    }
    bool _2452 = _2341.y == 0u;
    float _2507;
    float _2509;
    float _2511;
    if (_2452)
    {
        _2507 = _2445;
        _2509 = _2447;
        _2511 = _2449;
    }
    else
    {
        uint _2680 = _2267 + 7u;
        float _2696 = (dot(vec3(cbLight._m0[_2267 + 3u].xyz), vec3(_755, _756, _757)) * 0.5) + 0.5;
        float _2697 = _2696 * _2696;
        float _4658 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2698 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2699 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2507 = (((cbLight._m0[_2680].x * 0.3183098733425140380859375) * _2698) * _2699) + _2445;
        _2509 = (((cbLight._m0[_2680].y * 0.3183098733425140380859375) * _2698) * _2699) + _2447;
        _2511 = (((cbLight._m0[_2680].z * 0.3183098733425140380859375) * _2698) * _2699) + _2449;
    }
    uint _2514 = _2267 + 8u;
    float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _758) * 0.949999988079071044921875);
    float _2528 = _2527 * _2527;
    float _2529 = cbLight._m0[_2267].x + _835;
    float _2530 = cbLight._m0[_2267].y + _836;
    float _2531 = cbLight._m0[_2267].z + _837;
    float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
    float _2536 = _2535 * _2529;
    float _2537 = _2535 * _2530;
    float _2538 = _2535 * _2531;
    float _2539 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2267].xyz));
    float _4674 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2542 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _4685 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _2543 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _2544 = dot(vec3(_755, _756, _757), vec3(_2536, _2537, _2538));
    float _4696 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _2548 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2536, _2537, _2538));
    float _4707 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2552 = _2528 * _2528;
    float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
    float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) * 5.0);
    float _2565 = 0.959999978542327880859375 - _914;
    float _2567 = 0.959999978542327880859375 - _915;
    float _2568 = 0.959999978542327880859375 - _916;
    float _2575 = 1.0 - _2528;
    float _2586 = (0.5 / (((_2543 * ((_2542 * _2575) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2543 * _2575) + _2528) * _2542))) * _2542;
    float _4718 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2588 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
    uint _2602 = _2267 + 9u;
    float _2613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _758) * 0.949999988079071044921875);
    float _2614 = _2613 * _2613;
    float _2615 = cbLight._m0[_2307].x + _835;
    float _2616 = cbLight._m0[_2307].y + _836;
    float _2617 = cbLight._m0[_2307].z + _837;
    float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
    float _2622 = _2621 * _2615;
    float _2623 = _2621 * _2616;
    float _2624 = _2621 * _2617;
    float _2625 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2307].xyz));
    float _4729 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2628 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2629 = dot(vec3(_755, _756, _757), vec3(_2622, _2623, _2624));
    float _4740 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2632 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _2633 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2622, _2623, _2624));
    float _4751 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2637 = _2614 * _2614;
    float _2641 = ((_2632 * _2632) * (_2637 + (-1.0))) + 1.0;
    float _2648 = exp2(log2(1.0 - (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) * 5.0);
    float _2655 = 1.0 - _2614;
    float _2665 = (0.5 / (((_2543 * ((_2628 * _2655) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2543 * _2655) + _2614) * _2628))) * _2628;
    float _4762 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2667 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2637 / ((_2641 * _2641) * 3.141590118408203125));
    float _2677 = (((((_2648 * _2565) + _917) * cbLight._m0[_2602].x) * _2667) * _2290) + ((((cbLight._m0[_2514].x * _2256) * ((_2564 * _2565) + _917)) * _2588) * _2303);
    float _2678 = (((((_2648 * _2567) + _919) * cbLight._m0[_2602].y) * _2667) * _2290) + ((((cbLight._m0[_2514].y * _2258) * ((_2564 * _2567) + _919)) * _2588) * _2303);
    float _2679 = (((((_2648 * _2568) + _920) * cbLight._m0[_2602].z) * _2667) * _2290) + ((((cbLight._m0[_2514].z * _2260) * ((_2564 * _2568) + _920)) * _2588) * _2303);
    float _2735;
    float _2737;
    float _2739;
    if (_2343)
    {
        _2735 = _2677;
        _2737 = _2678;
        _2739 = _2679;
    }
    else
    {
        uint _2741 = _2267 + 2u;
        uint _2745 = _2267 + 10u;
        float _2759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2741].w)) * _758) * 0.949999988079071044921875);
        float _2760 = _2759 * _2759;
        float _2761 = cbLight._m0[_2741].x + _835;
        float _2762 = cbLight._m0[_2741].y + _836;
        float _2763 = cbLight._m0[_2741].z + _837;
        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
        float _2768 = _2767 * _2761;
        float _2769 = _2767 * _2762;
        float _2770 = _2767 * _2763;
        float _2771 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2741].xyz));
        float _4773 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2775 = dot(vec3(_755, _756, _757), vec3(_2768, _2769, _2770));
        float _4784 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2778 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2779 = dot(vec3(cbLight._m0[_2741].xyz), vec3(_2768, _2769, _2770));
        float _4795 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2783 = _2760 * _2760;
        float _2787 = ((_2778 * _2778) * (_2783 + (-1.0))) + 1.0;
        float _2794 = exp2(log2(1.0 - (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) * 5.0);
        float _2801 = 1.0 - _2760;
        float _2811 = (0.5 / (((_2543 * ((_2774 * _2801) + _2760)) + 9.9999999392252902907785028219223e-09) + (((_2543 * _2801) + _2760) * _2774))) * _2774;
        float _4806 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2813 = (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2783 / ((_2787 * _2787) * 3.141590118408203125));
        float _2814 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2735 = (((((_2794 * _2565) + _917) * cbLight._m0[_2745].x) * _2813) * _2814) + _2677;
        _2737 = (((((_2794 * _2567) + _919) * cbLight._m0[_2745].y) * _2813) * _2814) + _2678;
        _2739 = (((((_2794 * _2568) + _920) * cbLight._m0[_2745].z) * _2813) * _2814) + _2679;
    }
    float _2845;
    float _2847;
    float _2849;
    if (_2452)
    {
        _2845 = _2735;
        _2847 = _2737;
        _2849 = _2739;
    }
    else
    {
        uint _2856 = _2267 + 3u;
        uint _2860 = _2267 + 11u;
        float _2874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2856].w)) * _758) * 0.949999988079071044921875);
        float _2875 = _2874 * _2874;
        float _2876 = cbLight._m0[_2856].x + _835;
        float _2877 = cbLight._m0[_2856].y + _836;
        float _2878 = cbLight._m0[_2856].z + _837;
        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
        float _2883 = _2882 * _2876;
        float _2884 = _2882 * _2877;
        float _2885 = _2882 * _2878;
        float _2886 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2856].xyz));
        float _4822 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2889 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2890 = dot(vec3(_755, _756, _757), vec3(_2883, _2884, _2885));
        float _4833 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2893 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2894 = dot(vec3(cbLight._m0[_2856].xyz), vec3(_2883, _2884, _2885));
        float _4844 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2898 = _2875 * _2875;
        float _2902 = ((_2893 * _2893) * (_2898 + (-1.0))) + 1.0;
        float _2909 = exp2(log2(1.0 - (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0)))) * 5.0);
        float _2916 = 1.0 - _2875;
        float _2926 = (0.5 / (((_2543 * ((_2889 * _2916) + _2875)) + 9.9999999392252902907785028219223e-09) + (((_2543 * _2916) + _2875) * _2889))) * _2889;
        float _4855 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2928 = (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2898 / ((_2902 * _2902) * 3.141590118408203125));
        float _2929 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2845 = (((((_2909 * _2565) + _917) * cbLight._m0[_2860].x) * _2928) * _2929) + _2735;
        _2847 = (((((_2909 * _2567) + _919) * cbLight._m0[_2860].y) * _2928) * _2929) + _2737;
        _2849 = (((((_2909 * _2568) + _920) * cbLight._m0[_2860].z) * _2928) * _2929) + _2739;
    }
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    if (_2265.y == 0u)
    {
        uvec4 _2950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2951 = _2950.x;
        uint _2962 = uint((float(_2950.y) * floor(float(uint(cbSceneParam._m0[85u].y * _856) / _2951))) + floor(float(uint(cbSceneParam._m0[85u].x * _855) / _2951)));
        float _2972 = (log2(_2043 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2973 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        uint _2976 = uint(isnan(14.0) ? _2973 : (isnan(_2973) ? 14.0 : min(_2973, 14.0)));
        uvec4 _2981 = texelFetch(g_lightClusterGridBuffer, int(((_2976 << 2u) + (_2962 << 6u)) >> 2u));
        uint _2982 = _2981.x;
        uint _2983 = _2950.z;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        if (((((1u << ((_2983 >> 4u) & 15u)) + 4294967295u) & _2982) == 0u) || ((_2983 & 240u) == 0u))
        {
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
            _3072 = 0.0;
        }
        else
        {
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3071;
            float _3073;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            uint _3221 = 0u;
            uint _3230;
            bool _3231;
            for (;;)
            {
                _3230 = texelFetch(g_lightClassification, int((((_2976 << 5u) + (_2962 << 9u)) + (_3221 << 2u)) >> 2u)).x;
                _3231 = _3230 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3231)
                {
                    frontier_phi_71_pred = _3220;
                    frontier_phi_71_pred_1 = _3219;
                    frontier_phi_71_pred_2 = _3218;
                    frontier_phi_71_pred_3 = _3217;
                    frontier_phi_71_pred_4 = _3216;
                    frontier_phi_71_pred_5 = _3215;
                }
                else
                {
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    uint _3366;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3217;
                    _3363 = _3218;
                    _3364 = _3219;
                    _3365 = _3220;
                    _3366 = _3230;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    for (;;)
                    {
                        uint _3370 = uint(findLSB(_3366)) + (_3221 << 5u);
                        uint _3367 = (_3366 + 4294967295u) & _3366;
                        uint _3372 = _3370 * 48u;
                        vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3372)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 3u)).x));
                        uint _3392 = (_3370 * 48u) + 4u;
                        vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3392)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 3u)).x));
                        uint _3411 = (_3370 * 48u) + 8u;
                        vec3 _3422 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3411)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 2u)).x));
                        float _3426 = _3386.x - _2041;
                        float _3427 = _3386.y - _2042;
                        float _3428 = _3386.z - _2043;
                        float _3429 = dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428));
                        float _3432 = inversesqrt(_3429);
                        float _3433 = _3432 * _3426;
                        float _3434 = _3432 * _3427;
                        float _3435 = _3432 * _3428;
                        float _3436 = dot(vec3(_874, _877, _880), vec3(_3433, _3434, _3435));
                        float _3441 = 1.0 - (_3429 * _3386.w);
                        float _4881 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3442 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                        float _3443 = sqrt(_3429) * _3405.w;
                        float _3446 = 1.39999997615814208984375 / (_3443 + 1.39999997615814208984375);
                        float _3447 = _3446 * _3446;
                        float _3450 = ((1.0 - _3447) * _3436) + _3447;
                        float _3453 = _3443 * _3443;
                        float _3457 = ((isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0))) * _3442) / ((_3453 * 0.699999988079071044921875) + 1.0);
                        float _3461 = (-0.0) - _2041;
                        float _3462 = (-0.0) - _2042;
                        float _3463 = (-0.0) - _2043;
                        float _3467 = inversesqrt(dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463)));
                        float _3468 = _3467 * _3461;
                        float _3469 = _3467 * _3462;
                        float _3470 = _3467 * _3463;
                        float _3477 = exp2(log2(1.0 / ((_3453 * 3.5) + 5.0)) * 0.25);
                        float _3478 = 1.0 - _949;
                        float _3485 = sqrt(1.0 - ((1.0 - (_3478 * _3478)) * (1.0 - (_3477 * _3477))));
                        float _3486 = _3485 * _3485;
                        float _3487 = _3486 * _3486;
                        float _3488 = _3468 + _3433;
                        float _3489 = _3469 + _3434;
                        float _3490 = _3470 + _3435;
                        float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                        float _3498 = dot(vec3(_874, _877, _880), vec3(_3468, _3469, _3470));
                        float _4897 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3501 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                        float _3502 = dot(vec3(_874, _877, _880), vec3(_3494 * _3488, _3494 * _3489, _3494 * _3490));
                        float _4908 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3505 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3509 = ((_3505 * _3505) * (_3487 + (-1.0))) + 1.0;
                        float _3510 = _3446 * _3486;
                        float _3511 = _3510 * _3510;
                        float _3514 = ((1.0 - _3511) * _3436) + _3511;
                        float _4919 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3515 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                        float _3516 = 1.0 - _3486;
                        float _3526 = (0.5 / (((_3515 * ((_3501 * _3516) + _3486)) + 9.9999999392252902907785028219223e-09) + (((_3515 * _3516) + _3486) * _3501))) * _3515;
                        float _4930 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3537 = (((_3487 * 3.1415927410125732421875) * (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0)))) / ((_3509 * _3509) * ((_3453 * 2.1991131305694580078125) + 3.141590118408203125))) * _3442;
                        _3290 = (_3457 * _3405.x) + _3363;
                        _3291 = (_3457 * _3405.y) + _3364;
                        _3292 = (_3457 * _3405.z) + _3365;
                        _3287 = (_3537 * _3422.x) + _3360;
                        _3288 = (_3537 * _3422.y) + _3361;
                        _3289 = (_3537 * _3422.z) + _3362;
                        if (_3367 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3289;
                            _3363 = _3290;
                            _3364 = _3291;
                            _3365 = _3292;
                            _3366 = _3367;
                        }
                    }
                    frontier_phi_71_pred = _3292;
                    frontier_phi_71_pred_1 = _3291;
                    frontier_phi_71_pred_2 = _3290;
                    frontier_phi_71_pred_3 = _3289;
                    frontier_phi_71_pred_4 = _3288;
                    frontier_phi_71_pred_5 = _3287;
                }
                _3073 = frontier_phi_71_pred;
                _3071 = frontier_phi_71_pred_1;
                _3069 = frontier_phi_71_pred_2;
                _3067 = frontier_phi_71_pred_3;
                _3065 = frontier_phi_71_pred_4;
                _3063 = frontier_phi_71_pred_5;
                uint _3222 = _3221 + 1u;
                if (_3222 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3215 = _3063;
                    _3216 = _3065;
                    _3217 = _3067;
                    _3218 = _3069;
                    _3219 = _3071;
                    _3220 = _3073;
                    _3221 = _3222;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
            _3072 = _3073;
        }
        uvec4 _3076 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3077 = _3076.z;
        uint _3079 = (_3077 >> 8u) & 15u;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        if (((4294967295u << _3079) & _2982) == 0u)
        {
            _3183 = _3062;
            _3185 = _3064;
            _3187 = _3066;
            _3189 = _3068;
            _3191 = _3070;
            _3193 = _3072;
        }
        else
        {
            float _3208 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
            float _3209 = _3208 * _2041;
            float _3210 = _3208 * _2042;
            float _3211 = _3208 * _2043;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3079 < ((_3077 >> 12u) & 15u))
            {
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3192;
                float _3194;
                float _3343 = _3062;
                float _3344 = _3064;
                float _3345 = _3066;
                float _3346 = _3068;
                float _3347 = _3070;
                float _3348 = _3072;
                uint _3349 = _3079;
                uint _3358;
                bool _3359;
                for (;;)
                {
                    _3358 = texelFetch(g_lightClassification, int((((_2976 << 5u) + (_2962 << 9u)) + (_3349 << 2u)) >> 2u)).x;
                    _3359 = _3358 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3359)
                    {
                        frontier_phi_82_pred = _3348;
                        frontier_phi_82_pred_1 = _3347;
                        frontier_phi_82_pred_2 = _3346;
                        frontier_phi_82_pred_3 = _3345;
                        frontier_phi_82_pred_4 = _3344;
                        frontier_phi_82_pred_5 = _3343;
                    }
                    else
                    {
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3564 = _3343;
                        float _3565 = _3344;
                        float _3566 = _3345;
                        float _3567 = _3346;
                        float _3568 = _3347;
                        float _3569 = _3348;
                        uint _3570 = _3358;
                        uint _3571;
                        vec4 _3596;
                        float _3597;
                        vec4 _3612;
                        vec3 _3624;
                        vec4 _3639;
                        vec4 _3654;
                        float _3700;
                        bool _3701;
                        for (;;)
                        {
                            uint _3581 = ((_3349 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3570));
                            _3571 = (_3570 + 4294967295u) & _3570;
                            uint _3583 = _3581 * 40u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            _3597 = _3596.w;
                            uint _3599 = (_3581 * 40u) + 4u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            uint _3614 = (_3581 * 40u) + 8u;
                            _3624 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x));
                            uint _3626 = (_3581 * 40u) + 16u;
                            _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            uint _3641 = (_3581 * 40u) + 20u;
                            _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            uint _3656 = (_3581 * 40u) + 24u;
                            vec4 _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            uint _3675 = (_3581 * 40u) + 28u;
                            vec4 _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            _3700 = fma(_2043, _3688.z, fma(_2042, _3688.y, _3688.x * _2041)) + _3688.w;
                            _3701 = !((fma(_2043, _3669.z, fma(_2042, _3669.y, _3669.x * _2041)) + _3669.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3701)
                            {
                                float _3728 = _3596.x - _2041;
                                float _3729 = _3596.y - _2042;
                                float _3730 = _3596.z - _2043;
                                float _3731 = dot(vec3(_3728, _3729, _3730), vec3(_3728, _3729, _3730));
                                float _3734 = inversesqrt(_3731);
                                float _3735 = _3734 * _3728;
                                float _3736 = _3734 * _3729;
                                float _3737 = _3734 * _3730;
                                float _3741 = 1.0 - (_3731 / (_3597 * _3597));
                                float _4941 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3746 = sqrt(_3731) * _3612.w;
                                float _3748 = 1.39999997615814208984375 / (_3746 + 1.39999997615814208984375);
                                float _3749 = _3748 * _3748;
                                float _3752 = ((1.0 - _3749) * dot(vec3(_3735, _3736, _3737), vec3(_874, _877, _880))) + _3749;
                                float _3755 = _3746 * _3746;
                                float _3759 = (fma(_2043, _3639.z, fma(_2042, _3639.y, _3639.x * _2041)) + _3639.w) / _3700;
                                float _3760 = (fma(_2043, _3654.z, fma(_2042, _3654.y, _3654.x * _2041)) + _3654.w) / _3700;
                                float _3764 = 1.0 - dot(vec2(_3759, _3760), vec2(_3759, _3760));
                                float _4957 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3765 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3766 = _3765 * (((isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0))) * _3742) / ((_3755 * 0.699999988079071044921875) + 1.0));
                                float _3778 = exp2(log2(1.0 / ((_3755 * 3.5) + 5.0)) * 0.25);
                                float _3779 = 1.0 - _949;
                                float _3786 = sqrt(1.0 - ((1.0 - (_3779 * _3779)) * (1.0 - (_3778 * _3778))));
                                float _3787 = _3786 * _3786;
                                float _3788 = _3787 * _3787;
                                float _3789 = _3735 - _3209;
                                float _3790 = _3736 - _3210;
                                float _3791 = _3737 - _3211;
                                float _3795 = inversesqrt(dot(vec3(_3789, _3790, _3791), vec3(_3789, _3790, _3791)));
                                float _3799 = dot(vec3(_874, _877, _880), vec3((-0.0) - _3209, (-0.0) - _3210, (-0.0) - _3211));
                                float _4968 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3802 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3803 = dot(vec3(_874, _877, _880), vec3(_3795 * _3789, _3795 * _3790, _3795 * _3791));
                                float _4979 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3806 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3810 = ((_3806 * _3806) * (_3788 + (-1.0))) + 1.0;
                                float _3811 = _3748 * _3787;
                                float _3812 = _3811 * _3811;
                                float _3818 = ((1.0 - _3812) * dot(vec3(_874, _877, _880), vec3(_3735, _3736, _3737))) + _3812;
                                float _4990 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3819 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3820 = 1.0 - _3787;
                                float _3830 = (0.5 / (((_3819 * ((_3802 * _3820) + _3787)) + 9.9999999392252902907785028219223e-09) + (((_3819 * _3820) + _3787) * _3802))) * _3819;
                                float _5001 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3840 = (_3765 * _3742) * (((_3788 * 3.1415927410125732421875) * (isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0)))) / ((_3810 * _3810) * ((_3755 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3766 * _3612.z;
                                frontier_phi_88_pred_1 = _3766 * _3612.y;
                                frontier_phi_88_pred_2 = _3766 * _3612.x;
                                frontier_phi_88_pred_3 = _3840 * _3624.z;
                                frontier_phi_88_pred_4 = _3840 * _3624.y;
                                frontier_phi_88_pred_5 = _3840 * _3624.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3849 = frontier_phi_88_pred;
                            _3848 = frontier_phi_88_pred_1;
                            _3847 = frontier_phi_88_pred_2;
                            _3846 = frontier_phi_88_pred_3;
                            _3845 = frontier_phi_88_pred_4;
                            _3844 = frontier_phi_88_pred_5;
                            _3554 = _3847 + _3567;
                            _3555 = _3848 + _3568;
                            _3556 = _3849 + _3569;
                            _3551 = _3844 + _3564;
                            _3552 = _3845 + _3565;
                            _3553 = _3846 + _3566;
                            if (_3571 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3571;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3556;
                        frontier_phi_82_pred_1 = _3555;
                        frontier_phi_82_pred_2 = _3554;
                        frontier_phi_82_pred_3 = _3553;
                        frontier_phi_82_pred_4 = _3552;
                        frontier_phi_82_pred_5 = _3551;
                    }
                    _3194 = frontier_phi_82_pred;
                    _3192 = frontier_phi_82_pred_1;
                    _3190 = frontier_phi_82_pred_2;
                    _3188 = frontier_phi_82_pred_3;
                    _3186 = frontier_phi_82_pred_4;
                    _3184 = frontier_phi_82_pred_5;
                    uint _3350 = _3349 + 1u;
                    if (_3350 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3343 = _3184;
                        _3344 = _3186;
                        _3345 = _3188;
                        _3346 = _3190;
                        _3347 = _3192;
                        _3348 = _3194;
                        _3349 = _3350;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3190;
                frontier_phi_63_64_ladder_1 = _3194;
                frontier_phi_63_64_ladder_2 = _3192;
                frontier_phi_63_64_ladder_3 = _3188;
                frontier_phi_63_64_ladder_4 = _3186;
                frontier_phi_63_64_ladder_5 = _3184;
            }
            else
            {
                frontier_phi_63_64_ladder = _3068;
                frontier_phi_63_64_ladder_1 = _3072;
                frontier_phi_63_64_ladder_2 = _3070;
                frontier_phi_63_64_ladder_3 = _3066;
                frontier_phi_63_64_ladder_4 = _3064;
                frontier_phi_63_64_ladder_5 = _3062;
            }
            _3183 = frontier_phi_63_64_ladder_5;
            _3185 = frontier_phi_63_64_ladder_4;
            _3187 = frontier_phi_63_64_ladder_3;
            _3189 = frontier_phi_63_64_ladder;
            _3191 = frontier_phi_63_64_ladder_2;
            _3193 = frontier_phi_63_64_ladder_1;
        }
        float _3198 = isnan(1.0) ? _933 : (isnan(_933) ? 1.0 : min(_933, 1.0));
        _2995 = (_3198 * _3189) + _2507;
        _2997 = (_3198 * _3191) + _2509;
        _2999 = (_3198 * _3193) + _2511;
        _3001 = ((_3183 * _917) * _3198) + _2845;
        _3003 = ((_3185 * _919) * _3198) + _2847;
        _3005 = ((_3187 * _920) * _3198) + _2849;
    }
    else
    {
        _2995 = _2507;
        _2997 = _2509;
        _2999 = _2511;
        _3001 = _2845;
        _3003 = _2847;
        _3005 = _2849;
    }
    float _5017 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _5028 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _5039 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _3022 = ((isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_2995 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _933))) + ((_3001 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    float _3023 = ((isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0))) * (_2997 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _933))) + ((_3003 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    float _3024 = ((isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0))) * (_2999 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _933))) + ((_3005 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    uint _3025 = _276 + 6u;
    float _3033 = _855 / cbSceneParam._m0[86u].x;
    float _3034 = _856 / cbSceneParam._m0[86u].y;
    vec4 _3048 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3033, _3034, (log2((isnan(cbSceneParam._m0[77u].w) ? _777 : (isnan(_777) ? cbSceneParam._m0[77u].w : min(_777, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3050 = _3048.x;
    float _3051 = _3048.y;
    float _3052 = _3048.z;
    float _3053 = _3048.w;
    float _3125;
    float _3127;
    float _3129;
    float _3131;
    if (_777 > cbSceneParam._m0[78u].w)
    {
        float _3087 = isnan(_777) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _777 : min(cbSceneParam._m0[80u].w, _777));
        float _3088 = _3087 / _777;
        float _3099 = _3088 * _828;
        float _3100 = _829 * _3088;
        float _3101 = (-0.0) - _3100;
        float _3103 = _3088 * _830;
        float _3105 = (cbSceneParam._m0[77u].w * _3101) / _3087;
        float _3106 = _3105 + cbSceneParam._m0[79u].w;
        float _3107 = cbSceneParam._m0[79u].w - _3100;
        float _3113 = sqrt(((_3099 * _3099) + (_3100 * _3100)) + (_3103 * _3103));
        float _3116 = (1.0 - (cbSceneParam._m0[77u].w / _3087)) * _3113;
        float _3121 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3123 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3300;
        if (abs((_3101 - _3105) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3300 = ((((_3106 > 0.0) ? exp2(_3121 * _3106) : (2.0 - exp2(_3123 * _3106))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3116;
        }
        else
        {
            float _3244 = 1.0 / cbSceneParam._m0[80u].x;
            float _3245 = isnan(_3107) ? _3106 : (isnan(_3106) ? _3107 : max(_3106, _3107));
            float _3246 = isnan(_3107) ? _3106 : (isnan(_3106) ? _3107 : min(_3106, _3107));
            float _3255 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : min(_3245, 0.0));
            float _3256 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : min(_3246, 0.0));
            _3300 = ((abs(_3113 / _3101) * cbSceneParam._m0[80u].y) * ((((_3255 - _3256) * 2.0) - ((exp2(_3121 * (isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0)))) - exp2(_3121 * (isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0))))) * _3244)) - ((exp2(_3123 * _3255) - exp2(_3123 * _3256)) * _3244))) + (_3116 * cbSceneParam._m0[80u].z);
        }
        vec4 _3302 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3033, _3034, 1.0), 0.0);
        float _3311 = exp2((_3300 * (-1.44269502162933349609375)) * (1.0 - _3302.w));
        float _3312 = log2(_3311);
        float _3328 = log2(_3053);
        _3125 = (exp2(_3328 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].x)) * _3302.x) / cbSceneParam._m0[78u].x)) + _3050;
        _3127 = (exp2(_3328 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].y)) * _3302.y) / cbSceneParam._m0[78u].y)) + _3051;
        _3129 = (exp2(_3328 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].z)) * _3302.z) / cbSceneParam._m0[78u].z)) + _3052;
        _3131 = _3311 * _3053;
    }
    else
    {
        _3125 = _3050;
        _3127 = _3051;
        _3129 = _3052;
        _3131 = _3053;
    }
    bool _3338;
    vec4 _3141;
    vec4 _3163;
    float _3165;
    float _3169;
    float _3170;
    float _3171;
    float _3172;
    bool _3182;
    for (;;)
    {
        _3141 = cbMatDynParam._m0[0u];
        float _3143 = roundEven(_3141.y);
        bool _3144 = _3143 == 3.0;
        float _3145 = log2(_3131);
        float _3152 = exp2(_3145 * cbSceneParam._m0[78u].x) * _3022;
        float _3153 = exp2(_3145 * cbSceneParam._m0[78u].y) * _3023;
        float _3154 = exp2(_3145 * cbSceneParam._m0[78u].z) * _3024;
        float _3161 = _844 + (-0.5);
        _3163 = cbMtdParam._m0[1u];
        _3165 = _3163.y * _3161;
        float _3168 = (_3143 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3169 = _3168 * (_3144 ? _3152 : (_3152 + (cbSceneParam._m0[72u].w * _3125)));
        _3170 = _3168 * (_3144 ? _3153 : (_3153 + (cbSceneParam._m0[72u].w * _3127)));
        _3171 = _3168 * (_3144 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3129)));
        _3172 = _3161 * 0.999000012874603271484375;
        _3182 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3182)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _3172) < 0.5)
            {
                _3338 = true;
                break;
            }
        }
        uint _3279 = _893 + uint(_3141.w);
        if ((cbInstanceData._m0[_3279].w < 1.0) && ((cbInstanceData._m0[_3279].w + _3172) < 0.5))
        {
            _3338 = true;
            break;
        }
        if ((_3165 + 1.0) < _3163.x)
        {
            _3338 = true;
            break;
        }
        _3338 = false;
        break;
    }
    float _3542;
    if (_3338)
    {
        discard_state = true;
        _3542 = 0.0;
    }
    else
    {
        _3542 = cbInstanceData._m0[_3025].w;
    }
    SV_Target.x = _3169;
    SV_Target.y = _3170;
    SV_Target.z = _3171;
    SV_Target.w = _3542;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3025].w;
    discard_exit();
}


