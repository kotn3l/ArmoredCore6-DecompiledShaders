#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1312;
float _3976;
float _3977;
float _3978;
float _3979;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3988 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3999 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _4010 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].y) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4021 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _430 = (_423 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _431 = (_423 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _432 = (_423 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    float _436 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _430;
    float _439 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _431;
    float _442 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _432;
    float _449 = ((_430 - _436) * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) + _436;
    float _450 = ((_431 - _439) * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) + _439;
    float _451 = ((_432 - _442) * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) + _442;
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _517 = _513.z;
    float _526 = ((_496.z - _517) * _423) + _517;
    float _529 = ((((_496.x - _515) * _423) + _515) * 2.0) + (-1.0);
    float _530 = ((((_496.y - _516) * _423) + _516) * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _4032 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _536 = sqrt(1.0 - (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))));
    float _539 = _529 + ((((_469.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _540 = _530 + ((((_469.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _543 = fma(_536, _239, fma(_540, _246, _539 * _232));
    float _546 = fma(_536, _240, fma(_540, _247, _539 * _233));
    float _549 = fma(_536, _241, fma(_540, _248, _539 * _234));
    float _553 = inversesqrt(dot(vec3(_543, _546, _549), vec3(_543, _546, _549)));
    vec4 _569 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _595 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _597 = _595.x;
    float _598 = 1.0 - _597;
    float _604 = (cbMtdParam._m0[19u].x + dot(vec4(_553 * _543, _553 * _546, _553 * _549, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_597 - _598) * cbMtdParam._m0[24u].z) + _598) * cbMtdParam._m0[21u].z);
    float _4043 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _612 = (_605 * (cbMtdParam._m0[17u].x - _449)) + _449;
    float _613 = (_605 * (cbMtdParam._m0[17u].y - _450)) + _450;
    float _614 = (_605 * (cbMtdParam._m0[17u].z - _451)) + _451;
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _640 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _642 = _640.x;
    float _660 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _642) * _423) + _642;
    float _664 = ((_626.x - _660) * cbMtdParam._m0[19u].z) + _660;
    float _666 = _664 - (_664 * _605);
    float _671 = (((_469.z - _526) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _526;
    vec4 _684 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _691 = (_684.x * 2.0) + (-1.0);
    float _692 = (_684.y * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _4054 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _701 = ((_684.z - _671) * _605) + _671;
    float _711 = ((sqrt(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) - _536) * _605) + _536;
    float _714 = (((_691 - _539) * _605) + _539) + (cbMtdParam._m0[21u].x * _539);
    float _715 = (((_692 - _540) * _605) + _540) + (cbMtdParam._m0[21u].x * _540);
    float _717 = cbMtdParam._m0[22u].x + _569.w;
    float _720 = fma(_711, _239, fma(_715, _246, _714 * _232));
    float _723 = fma(_711, _240, fma(_715, _247, _714 * _233));
    float _726 = fma(_711, _241, fma(_715, _248, _714 * _234));
    float _730 = inversesqrt(dot(vec3(_720, _723, _726), vec3(_720, _723, _726)));
    float _731 = _730 * _720;
    float _732 = _730 * _723;
    float _733 = _730 * _726;
    float _4065 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _734 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4087 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4098 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4109 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4120 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _739 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _753 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _804 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _794);
    float _805 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _794);
    float _806 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _794);
    float _810 = inversesqrt(dot(vec3(_804, _805, _806), vec3(_804, _805, _806)));
    float _811 = _804 * _810;
    float _812 = _805 * _810;
    float _813 = _806 * _810;
    vec4 _818 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _820 = _818.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _992 = sqrt(((_804 * _804) + (_805 * _805)) + (_806 * _806));
        float _998 = (cbMatDynParam._m0[5u].x * _992) + cbMatDynParam._m0[5u].y;
        float _4131 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1003 = (cbMatDynParam._m0[5u].z * _992) + cbMatDynParam._m0[5u].w;
        float _4142 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) - _999)) + _999) < ((_820 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _831 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _832 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _850 = fma(_733, cbSceneParam._m0[5u].z, fma(_732, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _731));
    float _853 = fma(_733, cbSceneParam._m0[6u].z, fma(_732, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _731));
    float _856 = fma(_733, cbSceneParam._m0[7u].z, fma(_732, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _731));
    uint _869 = _272 + 9u;
    uint _870 = _869 + uint(cbMatDynParam._m0[0u].w);
    float _876 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * cbInstanceData._m0[_870].x;
    float _877 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * cbInstanceData._m0[_870].y;
    float _878 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * cbInstanceData._m0[_870].z;
    float _4153 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _4164 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _4175 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _882 = 1.0 - _739;
    float _883 = _879 * _882;
    float _884 = _880 * _882;
    float _885 = _881 * _882;
    float _890 = (_879 + (-0.039999999105930328369140625)) * _739;
    float _891 = (_880 + (-0.039999999105930328369140625)) * _739;
    float _892 = (_881 + (-0.039999999105930328369140625)) * _739;
    float _893 = _890 + 0.039999999105930328369140625;
    float _895 = _891 + 0.039999999105930328369140625;
    float _896 = _892 + 0.039999999105930328369140625;
    vec4 _905 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _831, cbSceneParam._m0[86u].y * _832));
    float _909 = ((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * TEXCOORD_5.w) * _905.x;
    float _910 = dot(vec3(_731, _732, _733), vec3(_811, _812, _813));
    float _913 = _910 * 2.0;
    float _917 = (_913 * _731) - _811;
    float _918 = (_913 * _732) - _812;
    float _919 = (_913 * _733) - _813;
    float _923 = abs(dot(vec3(_811, _812, _813), vec3(_731, _732, _733)));
    float _4186 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _925 = sqrt(_734);
    float _938 = exp2((_925 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_925 * 3.0));
    float _944 = (1.0 - _938) * ((_925 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _945 = _938 * _925;
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1311;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1036 = fma(_981, cbModelParam._m0[26u].z, fma(_977, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _973));
        float _1040 = fma(_981, cbModelParam._m0[27u].z, fma(_977, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _973));
        float _1044 = fma(_981, cbModelParam._m0[28u].z, fma(_977, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _973));
        float _1069 = _973 + _731;
        float _1070 = _977 + _732;
        float _1071 = _981 + _733;
        float _1081 = fma(_1071, cbModelParam._m0[26u].z, fma(_1070, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1069)) - _1036;
        float _1082 = fma(_1071, cbModelParam._m0[27u].z, fma(_1070, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1069)) - _1040;
        float _1083 = fma(_1071, cbModelParam._m0[28u].z, fma(_1070, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1069)) - _1044;
        float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
        float _1100 = ((_1087 * _1081) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1036 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1087 * _1082) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1040 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1087 * _1083) / cbModelParam._m0[34u].z) + ((((((_1044 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        float _1139 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1105.x + (-0.5));
        float _1141 = _1139 * (_1105.y + (-0.5));
        float _1142 = _1139 * (_1105.z + (-0.5));
        float _1149 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1112.x + (-0.5));
        float _1151 = _1149 * (_1112.y + (-0.5));
        float _1152 = _1149 * (_1112.z + (-0.5));
        float _1159 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1119.x + (-0.5));
        float _1161 = _1159 * (_1119.y + (-0.5));
        float _1162 = _1159 * (_1119.z + (-0.5));
        float _1169 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1126.x + (-0.5));
        float _1171 = _1169 * (_1126.y + (-0.5));
        float _1172 = _1169 * (_1126.z + (-0.5));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = _1140 * 0.5;
        float _1177 = _1150 * 0.5;
        float _1178 = _1160 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1193 = (dot(vec3(_731, _732, _733), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1203 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _4234 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1205 + 1.0))) + _1210) * _1173;
        float _1220 = _1141 * 0.5;
        float _1221 = _1151 * 0.5;
        float _1222 = _1161 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_731, _732, _733), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _4267 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1247 + 1.0))) + _1252) * _1174;
        float _1262 = _1142 * 0.5;
        float _1263 = _1152 * 0.5;
        float _1264 = _1162 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_731, _732, _733), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _4300 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1289 + 1.0))) + _1294) * _1175;
        _1311 = _1142;
        _1313 = _1141;
        _1314 = _1140;
        _1315 = _1152;
        _1316 = _1151;
        _1317 = _1150;
        _1318 = _1162;
        _1319 = _1161;
        _1320 = _1160;
        _1321 = _1175;
        _1322 = _1174;
        _1323 = _1173;
        _1324 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1325 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
    }
    else
    {
        _1311 = _1312;
        _1313 = _1312;
        _1314 = _1312;
        _1315 = _1312;
        _1316 = _1312;
        _1317 = _1312;
        _1318 = _1312;
        _1319 = _1312;
        _1320 = _1312;
        _1321 = _1312;
        _1322 = _1312;
        _1323 = _1312;
        _1324 = 0.0;
        _1325 = 0.0;
        _1326 = 0.0;
    }
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1354 = fma(_981, cbModelParam._m0[30u].z, fma(_977, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _973));
        float _1358 = fma(_981, cbModelParam._m0[31u].z, fma(_977, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _973));
        float _1362 = fma(_981, cbModelParam._m0[32u].z, fma(_977, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _973));
        float _1385 = _973 + _731;
        float _1386 = _977 + _732;
        float _1387 = _981 + _733;
        float _1397 = fma(_1387, cbModelParam._m0[30u].z, fma(_1386, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1385)) - _1354;
        float _1398 = fma(_1387, cbModelParam._m0[31u].z, fma(_1386, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1385)) - _1358;
        float _1399 = fma(_1387, cbModelParam._m0[32u].z, fma(_1386, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1385)) - _1362;
        float _1403 = inversesqrt(dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399)));
        float _1416 = ((_1403 * _1397) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1354 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1403 * _1398) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1358 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1403 * _1399) / cbModelParam._m0[35u].z) + ((((((_1362 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        float _1453 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1420.x + (-0.5));
        float _1455 = _1453 * (_1420.y + (-0.5));
        float _1456 = _1453 * (_1420.z + (-0.5));
        float _1463 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1427.x + (-0.5));
        float _1465 = _1463 * (_1427.y + (-0.5));
        float _1466 = _1463 * (_1427.z + (-0.5));
        float _1473 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1434.x + (-0.5));
        float _1475 = _1473 * (_1434.y + (-0.5));
        float _1476 = _1473 * (_1434.z + (-0.5));
        float _1483 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1441.x + (-0.5));
        float _1485 = _1483 * (_1441.y + (-0.5));
        float _1486 = _1483 * (_1441.z + (-0.5));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = _1454 * 0.5;
        float _1491 = _1464 * 0.5;
        float _1492 = _1474 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_731, _732, _733), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4363 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1517 + 1.0))) + _1522) * _1487;
        float _1532 = _1455 * 0.5;
        float _1533 = _1465 * 0.5;
        float _1534 = _1475 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_731, _732, _733), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4396 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1559 + 1.0))) + _1564) * _1488;
        float _1574 = _1456 * 0.5;
        float _1575 = _1466 * 0.5;
        float _1576 = _1476 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_731, _732, _733), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4407 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4418 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4429 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_1601 + 1.0))) + _1606) * _1489;
        _1623 = _1456;
        _1624 = _1455;
        _1625 = _1454;
        _1626 = _1466;
        _1627 = _1465;
        _1628 = _1464;
        _1629 = _1476;
        _1630 = _1475;
        _1631 = _1474;
        _1632 = _1489;
        _1633 = _1488;
        _1634 = _1487;
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
    }
    else
    {
        _1623 = _1312;
        _1624 = _1312;
        _1625 = _1312;
        _1626 = _1312;
        _1627 = _1312;
        _1628 = _1312;
        _1629 = _1312;
        _1630 = _1312;
        _1631 = _1312;
        _1632 = _1312;
        _1633 = _1312;
        _1634 = _1312;
        _1635 = 0.0;
        _1636 = 0.0;
        _1637 = 0.0;
    }
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1324)) + _1324;
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1325)) + _1325;
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1326)) + _1326;
    float _1670 = fma(_1649, cbSceneParam._m0[89u].z, fma(_1648, cbSceneParam._m0[89u].y, _1647 * cbSceneParam._m0[89u].x));
    float _1673 = fma(_1649, cbSceneParam._m0[90u].z, fma(_1648, cbSceneParam._m0[90u].y, _1647 * cbSceneParam._m0[90u].x));
    float _1676 = fma(_1649, cbSceneParam._m0[91u].z, fma(_1648, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1647));
    float _1691 = _917 * 0.5;
    float _1692 = _918 * 0.5;
    float _1693 = _919 * 0.5;
    float _1694 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1697 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1700 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1734;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1707 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1311, _1315, _1318, _1321));
        float _1711 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1313, _1316, _1319, _1322));
        float _1715 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1314, _1317, _1320, _1323));
        float _1722 = dot(vec4(cbModelParam._m0[39u]), vec4(_1691, _1692, _1693, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1722) ? 0.0 : (isnan(0.0) ? _1722 : max(0.0, _1722))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1745;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1736 = dot(vec4(cbModelParam._m0[40u]), vec4(_1691, _1692, _1693, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1749 = (_1745 * cbModelParam._m0[1u].x) + (_1734 * (1.0 - cbModelParam._m0[1u].x));
    float _1759 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _734);
    float _1760 = isnan(_1759) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1759 : min(cbModelParam._m0[25u].z, _1759));
    float _1841;
    float _1843;
    float _1845;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1808 = fma(_981, cbModelParam._m0[13u].z, fma(_977, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _973)) + cbModelParam._m0[13u].w;
        float _1812 = fma(_981, cbModelParam._m0[14u].z, fma(_977, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _973)) + cbModelParam._m0[14u].w;
        float _1816 = fma(_981, cbModelParam._m0[15u].z, fma(_977, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _973)) + cbModelParam._m0[15u].w;
        float _1819 = fma(_919, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _917));
        float _1822 = fma(_919, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _917));
        float _1825 = fma(_919, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _917));
        float _1853;
        if (_1819 > 0.0)
        {
            _1853 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1853 = frontier_phi_17_15_ladder;
        }
        float _2025;
        if (_1822 > 0.0)
        {
            _2025 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2025 = frontier_phi_26_22_ladder;
        }
        float _2320;
        if (_1825 > 0.0)
        {
            _2320 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2320 = frontier_phi_38_33_ladder;
        }
        float _2322 = isnan(_2025) ? _1853 : (isnan(_1853) ? _2025 : min(_1853, _2025));
        float _2323 = isnan(_2320) ? _2322 : (isnan(_2322) ? _2320 : min(_2322, _2320));
        float _2327 = (_2323 * _1819) + _1808;
        float _2328 = (_2323 * _1822) + _1812;
        float _2329 = (_2323 * _1825) + _1816;
        float _2330 = _2323 * 9.9999997473787516355514526367188e-05;
        float _2332 = (-1.0) - _2330;
        float _2334 = _2330 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2329 > _2334) || ((_2329 < _2332) || ((_2328 > _2334) || ((_2328 < _2332) || ((_2327 < _2332) || (_2327 > _2334))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2329, cbModelParam._m0[9u].z, fma(_2328, cbModelParam._m0[9u].y, _2327 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2329, cbModelParam._m0[10u].z, fma(_2328, cbModelParam._m0[10u].y, _2327 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2329, cbModelParam._m0[11u].z, fma(_2328, cbModelParam._m0[11u].y, _2327 * cbModelParam._m0[11u].x))), _1760);
            frontier_phi_16_38_ladder = _2474.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2474.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2474.x * cbModelParam._m0[1u].y;
        }
        _1841 = frontier_phi_16_38_ladder_2;
        _1843 = frontier_phi_16_38_ladder_1;
        _1845 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_917, _918, _919), _1760);
        _1841 = _1829.x * cbModelParam._m0[1u].y;
        _1843 = _1829.y * cbModelParam._m0[1u].y;
        _1845 = _1829.z * cbModelParam._m0[1u].y;
    }
    float _1849 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _734);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1849 : min(cbModelParam._m0[25u].w, _1849));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1904 = fma(_981, cbModelParam._m0[21u].z, fma(_977, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _973)) + cbModelParam._m0[21u].w;
        float _1908 = fma(_981, cbModelParam._m0[22u].z, fma(_977, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _973)) + cbModelParam._m0[22u].w;
        float _1912 = fma(_981, cbModelParam._m0[23u].z, fma(_977, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _973)) + cbModelParam._m0[23u].w;
        float _1915 = fma(_919, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _917));
        float _1918 = fma(_919, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _917));
        float _1921 = fma(_919, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _917));
        float _2030;
        if (_1915 > 0.0)
        {
            _2030 = abs((1.0 - _1904) / _1915);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1904 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2030 = frontier_phi_28_24_ladder;
        }
        float _2347;
        if (_1918 > 0.0)
        {
            _2347 = abs((1.0 - _1908) / _1918);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1908 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2347 = frontier_phi_40_35_ladder;
        }
        float _2685;
        if (_1921 > 0.0)
        {
            _2685 = abs((1.0 - _1912) / _1921);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1912 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2685 = frontier_phi_50_47_ladder;
        }
        float _2687 = isnan(_2347) ? _2030 : (isnan(_2030) ? _2347 : min(_2030, _2347));
        float _2688 = isnan(_2685) ? _2687 : (isnan(_2687) ? _2685 : min(_2687, _2685));
        float _2692 = (_2688 * _1915) + _1904;
        float _2693 = (_2688 * _1918) + _1908;
        float _2694 = (_2688 * _1921) + _1912;
        float _2695 = _2688 * 9.9999997473787516355514526367188e-05;
        float _2696 = (-1.0) - _2695;
        float _2698 = _2695 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2694 > _2698) || ((_2694 < _2696) || ((_2693 > _2698) || ((_2693 < _2696) || ((_2692 < _2696) || (_2692 > _2698))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2816 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2694, cbModelParam._m0[17u].z, fma(_2693, cbModelParam._m0[17u].y, _2692 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2694, cbModelParam._m0[18u].z, fma(_2693, cbModelParam._m0[18u].y, _2692 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2694, cbModelParam._m0[19u].z, fma(_2693, cbModelParam._m0[19u].y, _2692 * cbModelParam._m0[19u].x))), _1850);
            frontier_phi_25_50_ladder = _2816.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2816.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2816.x * cbModelParam._m0[1u].z;
        }
        _1940 = frontier_phi_25_50_ladder_2;
        _1942 = frontier_phi_25_50_ladder_1;
        _1944 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_917, _918, _919), _1850);
        _1940 = _1924.x * cbModelParam._m0[1u].z;
        _1942 = _1924.y * cbModelParam._m0[1u].z;
        _1944 = _1924.z * cbModelParam._m0[1u].z;
    }
    float _1957 = (((_944 * _893) + _945) * _909) * ((cbModelParam._m0[1u].w * (_1940 - _1841)) + _1841);
    float _1959 = (((_944 * _895) + _945) * _909) * ((cbModelParam._m0[1u].w * (_1942 - _1843)) + _1843);
    float _1961 = (((_944 * _896) + _945) * _909) * ((cbModelParam._m0[1u].w * (_1944 - _1845)) + _1845);
    float _1964 = fma(_1961, cbSceneParam._m0[89u].z, fma(_1959, cbSceneParam._m0[89u].y, _1957 * cbSceneParam._m0[89u].x));
    float _1967 = fma(_1961, cbSceneParam._m0[90u].z, fma(_1959, cbSceneParam._m0[90u].y, _1957 * cbSceneParam._m0[90u].x));
    float _1970 = fma(_1961, cbSceneParam._m0[91u].z, fma(_1959, cbSceneParam._m0[91u].y, _1957 * cbSceneParam._m0[91u].x));
    float _2004 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2008 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2012 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2016 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2017 = _2004 / _2016;
    float _2018 = _2008 / _2016;
    float _2019 = _2012 / _2016;
    float _2166;
    float _2167;
    float _2168;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2046 = ((uint(_2019 > cbSceneParam._m0[59u].y) + uint(_2019 > cbSceneParam._m0[59u].x)) + uint(_2019 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2047 = _2046 + 43u;
        uint _2055 = _2046 + 44u;
        uint _2063 = _2046 + 45u;
        uint _2071 = _2046 + 46u;
        float _2082 = fma(_2016, cbSceneParam._m0[_2047].w, fma(_2012, cbSceneParam._m0[_2047].z, fma(_2008, cbSceneParam._m0[_2047].y, _2004 * cbSceneParam._m0[_2047].x)));
        float _2086 = fma(_2016, cbSceneParam._m0[_2055].w, fma(_2012, cbSceneParam._m0[_2055].z, fma(_2008, cbSceneParam._m0[_2055].y, _2004 * cbSceneParam._m0[_2055].x)));
        float _2094 = fma(_2016, cbSceneParam._m0[_2071].w, fma(_2012, cbSceneParam._m0[_2071].z, fma(_2008, cbSceneParam._m0[_2071].y, _2004 * cbSceneParam._m0[_2071].x)));
        float _2099 = cbSceneParam._m0[33u].z * _2094;
        float _2101 = cbSceneParam._m0[33u].w * _2094;
        float _2104 = fma(_2016, cbSceneParam._m0[_2063].w, fma(_2012, cbSceneParam._m0[_2063].z, fma(_2008, cbSceneParam._m0[_2063].y, _2004 * cbSceneParam._m0[_2063].x))) / _2094;
        float _2152 = (cbSceneParam._m0[33u].x - sqrt(((_2018 * _2018) + (_2017 * _2017)) + (_2019 * _2019))) * cbSceneParam._m0[33u].y;
        float _4555 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2159 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2099 + _2082) / _2094, (_2101 + _2086) / _2094), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 + _2082) / _2094, (_2086 - _2099) / _2094), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2082 - _2099) / _2094, (_2086 - _2101) / _2094), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2082 - _2101) / _2094, (_2099 + _2086) / _2094), _2104), 0.0)).x), vec4(0.25)));
        _2166 = 1.0 - (_2159 * cbSceneParam._m0[34u].x);
        _2167 = 1.0 - (_2159 * cbSceneParam._m0[34u].y);
        _2168 = 1.0 - (_2159 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2166 = 1.0;
        _2167 = 1.0;
        _2168 = 1.0;
    }
    float _2232;
    float _2234;
    float _2236;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2220 = fma(_2016, cbSceneParam._m0[63u].w, fma(_2012, cbSceneParam._m0[63u].z, fma(_2008, cbSceneParam._m0[63u].y, _2004 * cbSceneParam._m0[63u].x)));
        float _2221 = fma(_2016, cbSceneParam._m0[60u].w, fma(_2012, cbSceneParam._m0[60u].z, fma(_2008, cbSceneParam._m0[60u].y, _2004 * cbSceneParam._m0[60u].x))) / _2220;
        float _2222 = fma(_2016, cbSceneParam._m0[61u].w, fma(_2012, cbSceneParam._m0[61u].z, fma(_2008, cbSceneParam._m0[61u].y, _2004 * cbSceneParam._m0[61u].x))) / _2220;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2221 >= cbSceneParam._m0[64u].x) && (_2222 >= cbSceneParam._m0[64u].y)) && (_2221 <= cbSceneParam._m0[64u].z)) && (_2222 <= cbSceneParam._m0[64u].w))
        {
            float _2360 = fma(_2016, cbSceneParam._m0[62u].w, fma(_2012, cbSceneParam._m0[62u].z, fma(_2008, cbSceneParam._m0[62u].y, _2004 * cbSceneParam._m0[62u].x))) / _2220;
            float _2364 = isnan(cbSceneParam._m0[41u].w) ? _2360 : (isnan(_2360) ? cbSceneParam._m0[41u].w : max(_2360, cbSceneParam._m0[41u].w));
            float _2407 = (cbSceneParam._m0[33u].x - sqrt(((_2018 * _2018) + (_2017 * _2017)) + (_2019 * _2019))) * cbSceneParam._m0[33u].y;
            float _4571 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
            float _2414 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2221, cbSceneParam._m0[33u].w + _2222), _2364), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2221, _2222 - cbSceneParam._m0[33u].z), _2364), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2221 - cbSceneParam._m0[33u].z, _2222 - cbSceneParam._m0[33u].w), _2364), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2221 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2222), _2364), 0.0)).x), vec4(0.25)));
            float _2418 = 1.0 - (_2414 * cbSceneParam._m0[34u].x);
            float _2419 = 1.0 - (_2414 * cbSceneParam._m0[34u].y);
            float _2420 = 1.0 - (_2414 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2420) ? _2168 : (isnan(_2168) ? _2420 : min(_2168, _2420));
            frontier_phi_37_36_ladder_1 = isnan(_2419) ? _2167 : (isnan(_2167) ? _2419 : min(_2167, _2419));
            frontier_phi_37_36_ladder_2 = isnan(_2418) ? _2166 : (isnan(_2166) ? _2418 : min(_2166, _2418));
        }
        else
        {
            frontier_phi_37_36_ladder = _2168;
            frontier_phi_37_36_ladder_1 = _2167;
            frontier_phi_37_36_ladder_2 = _2166;
        }
        _2232 = frontier_phi_37_36_ladder_2;
        _2234 = frontier_phi_37_36_ladder_1;
        _2236 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2232 = _2166;
        _2234 = _2167;
        _2236 = _2168;
    }
    uvec4 _2241 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2243 = _2241.x * 14u;
    uint _2244 = _2243 + 13u;
    float _2251 = _909 + (-1.0);
    float _2256 = (cbLight._m0[_2244].x * _2251) + 1.0;
    float _2257 = (cbLight._m0[_2244].y * _2251) + 1.0;
    float _2258 = (cbLight._m0[_2244].z * _2251) + 1.0;
    float _2259 = (cbLight._m0[_2244].w * _2251) + 1.0;
    uint _2260 = _2243 + 5u;
    float _2266 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
    uint _2270 = _2243 + 4u;
    float _2279 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
    uint _2283 = _2243 | 1u;
    float _2294 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_731, _732, _733));
    float _2297 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_731, _732, _733));
    float _4607 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _4618 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2302 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * 0.3183098733425140380859375;
    float _2304 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * 0.3183098733425140380859375;
    float _2311 = ((cbLight._m0[_2260].x * _2266) * _2304) + (((cbLight._m0[_2270].x * _2232) * _2279) * _2302);
    float _2312 = ((_2266 * cbLight._m0[_2260].y) * _2304) + (((cbLight._m0[_2270].y * _2234) * _2279) * _2302);
    float _2313 = ((_2266 * cbLight._m0[_2260].z) * _2304) + (((cbLight._m0[_2270].z * _2236) * _2279) * _2302);
    uvec4 _2317 = floatBitsToUint(cbLight._m0[_2243 + 12u]);
    bool _2319 = _2317.x == 0u;
    float _2421;
    float _2423;
    float _2425;
    if (_2319)
    {
        _2421 = _2311;
        _2423 = _2312;
        _2425 = _2313;
    }
    else
    {
        uint _2429 = _2243 + 6u;
        float _2445 = (dot(vec3(cbLight._m0[_2243 + 2u].xyz), vec3(_731, _732, _733)) * 0.5) + 0.5;
        float _2446 = _2445 * _2445;
        float _4629 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2447 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2448 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
        _2421 = (((cbLight._m0[_2429].x * 0.3183098733425140380859375) * _2447) * _2448) + _2311;
        _2423 = (((cbLight._m0[_2429].y * 0.3183098733425140380859375) * _2447) * _2448) + _2312;
        _2425 = (((cbLight._m0[_2429].z * 0.3183098733425140380859375) * _2447) * _2448) + _2313;
    }
    bool _2428 = _2317.y == 0u;
    float _2483;
    float _2485;
    float _2487;
    if (_2428)
    {
        _2483 = _2421;
        _2485 = _2423;
        _2487 = _2425;
    }
    else
    {
        uint _2656 = _2243 + 7u;
        float _2672 = (dot(vec3(cbLight._m0[_2243 + 3u].xyz), vec3(_731, _732, _733)) * 0.5) + 0.5;
        float _2673 = _2672 * _2672;
        float _4645 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2674 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2675 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2483 = (((cbLight._m0[_2656].x * 0.3183098733425140380859375) * _2674) * _2675) + _2421;
        _2485 = (((cbLight._m0[_2656].y * 0.3183098733425140380859375) * _2674) * _2675) + _2423;
        _2487 = (((cbLight._m0[_2656].z * 0.3183098733425140380859375) * _2674) * _2675) + _2425;
    }
    uint _2490 = _2243 + 8u;
    float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2243].w)) * _734) * 0.949999988079071044921875);
    float _2504 = _2503 * _2503;
    float _2505 = cbLight._m0[_2243].x + _811;
    float _2506 = cbLight._m0[_2243].y + _812;
    float _2507 = cbLight._m0[_2243].z + _813;
    float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
    float _2512 = _2511 * _2505;
    float _2513 = _2511 * _2506;
    float _2514 = _2511 * _2507;
    float _2515 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2243].xyz));
    float _4661 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _4672 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _2519 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
    float _2520 = dot(vec3(_731, _732, _733), vec3(_2512, _2513, _2514));
    float _4683 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
    float _2524 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_2512, _2513, _2514));
    float _4694 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2528 = _2504 * _2504;
    float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
    float _2540 = exp2(log2(1.0 - (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) * 5.0);
    float _2541 = 0.959999978542327880859375 - _890;
    float _2543 = 0.959999978542327880859375 - _891;
    float _2544 = 0.959999978542327880859375 - _892;
    float _2551 = 1.0 - _2504;
    float _2562 = (0.5 / (((_2519 * ((_2518 * _2551) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2519 * _2551) + _2504) * _2518))) * _2518;
    float _4705 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2564 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
    uint _2578 = _2243 + 9u;
    float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _734) * 0.949999988079071044921875);
    float _2590 = _2589 * _2589;
    float _2591 = cbLight._m0[_2283].x + _811;
    float _2592 = cbLight._m0[_2283].y + _812;
    float _2593 = cbLight._m0[_2283].z + _813;
    float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
    float _2598 = _2597 * _2591;
    float _2599 = _2597 * _2592;
    float _2600 = _2597 * _2593;
    float _2601 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2283].xyz));
    float _4716 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2604 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2605 = dot(vec3(_731, _732, _733), vec3(_2598, _2599, _2600));
    float _4727 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2608 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
    float _2609 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2598, _2599, _2600));
    float _4738 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2613 = _2590 * _2590;
    float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
    float _2624 = exp2(log2(1.0 - (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) * 5.0);
    float _2631 = 1.0 - _2590;
    float _2641 = (0.5 / (((_2519 * ((_2604 * _2631) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2519 * _2631) + _2590) * _2604))) * _2604;
    float _4749 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2643 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
    float _2653 = (((((_2624 * _2541) + _893) * cbLight._m0[_2578].x) * _2643) * _2266) + ((((cbLight._m0[_2490].x * _2232) * ((_2540 * _2541) + _893)) * _2564) * _2279);
    float _2654 = (((((_2624 * _2543) + _895) * cbLight._m0[_2578].y) * _2643) * _2266) + ((((cbLight._m0[_2490].y * _2234) * ((_2540 * _2543) + _895)) * _2564) * _2279);
    float _2655 = (((((_2624 * _2544) + _896) * cbLight._m0[_2578].z) * _2643) * _2266) + ((((cbLight._m0[_2490].z * _2236) * ((_2540 * _2544) + _896)) * _2564) * _2279);
    float _2711;
    float _2713;
    float _2715;
    if (_2319)
    {
        _2711 = _2653;
        _2713 = _2654;
        _2715 = _2655;
    }
    else
    {
        uint _2717 = _2243 + 2u;
        uint _2721 = _2243 + 10u;
        float _2735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2717].w)) * _734) * 0.949999988079071044921875);
        float _2736 = _2735 * _2735;
        float _2737 = cbLight._m0[_2717].x + _811;
        float _2738 = cbLight._m0[_2717].y + _812;
        float _2739 = cbLight._m0[_2717].z + _813;
        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
        float _2744 = _2743 * _2737;
        float _2745 = _2743 * _2738;
        float _2746 = _2743 * _2739;
        float _2747 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2717].xyz));
        float _4760 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2750 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2751 = dot(vec3(_731, _732, _733), vec3(_2744, _2745, _2746));
        float _4771 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2754 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _2755 = dot(vec3(cbLight._m0[_2717].xyz), vec3(_2744, _2745, _2746));
        float _4782 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2759 = _2736 * _2736;
        float _2763 = ((_2754 * _2754) * (_2759 + (-1.0))) + 1.0;
        float _2770 = exp2(log2(1.0 - (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) * 5.0);
        float _2777 = 1.0 - _2736;
        float _2787 = (0.5 / (((_2519 * ((_2750 * _2777) + _2736)) + 9.9999999392252902907785028219223e-09) + (((_2519 * _2777) + _2736) * _2750))) * _2750;
        float _4793 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2789 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2759 / ((_2763 * _2763) * 3.141590118408203125));
        float _2790 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
        _2711 = (((((_2770 * _2541) + _893) * cbLight._m0[_2721].x) * _2789) * _2790) + _2653;
        _2713 = (((((_2770 * _2543) + _895) * cbLight._m0[_2721].y) * _2789) * _2790) + _2654;
        _2715 = (((((_2770 * _2544) + _896) * cbLight._m0[_2721].z) * _2789) * _2790) + _2655;
    }
    float _2821;
    float _2823;
    float _2825;
    if (_2428)
    {
        _2821 = _2711;
        _2823 = _2713;
        _2825 = _2715;
    }
    else
    {
        uint _2832 = _2243 + 3u;
        uint _2836 = _2243 + 11u;
        float _2850 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2832].w)) * _734) * 0.949999988079071044921875);
        float _2851 = _2850 * _2850;
        float _2852 = cbLight._m0[_2832].x + _811;
        float _2853 = cbLight._m0[_2832].y + _812;
        float _2854 = cbLight._m0[_2832].z + _813;
        float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
        float _2859 = _2858 * _2852;
        float _2860 = _2858 * _2853;
        float _2861 = _2858 * _2854;
        float _2862 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2832].xyz));
        float _4809 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2865 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2866 = dot(vec3(_731, _732, _733), vec3(_2859, _2860, _2861));
        float _4820 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2869 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2870 = dot(vec3(cbLight._m0[_2832].xyz), vec3(_2859, _2860, _2861));
        float _4831 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2874 = _2851 * _2851;
        float _2878 = ((_2869 * _2869) * (_2874 + (-1.0))) + 1.0;
        float _2885 = exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0);
        float _2892 = 1.0 - _2851;
        float _2902 = (0.5 / (((_2519 * ((_2865 * _2892) + _2851)) + 9.9999999392252902907785028219223e-09) + (((_2519 * _2892) + _2851) * _2865))) * _2865;
        float _4842 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2904 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2874 / ((_2878 * _2878) * 3.141590118408203125));
        float _2905 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2821 = (((((_2885 * _2541) + _893) * cbLight._m0[_2836].x) * _2904) * _2905) + _2711;
        _2823 = (((((_2885 * _2543) + _895) * cbLight._m0[_2836].y) * _2904) * _2905) + _2713;
        _2825 = (((((_2885 * _2544) + _896) * cbLight._m0[_2836].z) * _2904) * _2905) + _2715;
    }
    float _2971;
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    if (_2241.y == 0u)
    {
        uvec4 _2926 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2927 = _2926.x;
        uint _2938 = uint((float(_2926.y) * floor(float(uint(cbSceneParam._m0[85u].y * _832) / _2927))) + floor(float(uint(cbSceneParam._m0[85u].x * _831) / _2927)));
        float _2948 = (log2(_2019 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2949 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        uint _2952 = uint(isnan(14.0) ? _2949 : (isnan(_2949) ? 14.0 : min(_2949, 14.0)));
        uvec4 _2957 = texelFetch(g_lightClusterGridBuffer, int(((_2952 << 2u) + (_2938 << 6u)) >> 2u));
        uint _2958 = _2957.x;
        uint _2959 = _2926.z;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        if (((((1u << ((_2959 >> 4u) & 15u)) + 4294967295u) & _2958) == 0u) || ((_2959 & 240u) == 0u))
        {
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
        }
        else
        {
            float _3039;
            float _3041;
            float _3043;
            float _3045;
            float _3047;
            float _3049;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            uint _3197 = 0u;
            uint _3206;
            bool _3207;
            for (;;)
            {
                _3206 = texelFetch(g_lightClassification, int((((_2952 << 5u) + (_2938 << 9u)) + (_3197 << 2u)) >> 2u)).x;
                _3207 = _3206 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3207)
                {
                    frontier_phi_71_pred = _3196;
                    frontier_phi_71_pred_1 = _3195;
                    frontier_phi_71_pred_2 = _3194;
                    frontier_phi_71_pred_3 = _3193;
                    frontier_phi_71_pred_4 = _3192;
                    frontier_phi_71_pred_5 = _3191;
                }
                else
                {
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    uint _3342;
                    _3336 = _3191;
                    _3337 = _3192;
                    _3338 = _3193;
                    _3339 = _3194;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3206;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    for (;;)
                    {
                        uint _3346 = uint(findLSB(_3342)) + (_3197 << 5u);
                        uint _3343 = (_3342 + 4294967295u) & _3342;
                        uint _3348 = _3346 * 48u;
                        vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3348)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 3u)).x));
                        uint _3368 = (_3346 * 48u) + 4u;
                        vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 3u)).x));
                        uint _3387 = (_3346 * 48u) + 8u;
                        vec3 _3398 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x));
                        float _3402 = _3362.x - _2017;
                        float _3403 = _3362.y - _2018;
                        float _3404 = _3362.z - _2019;
                        float _3405 = dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404));
                        float _3408 = inversesqrt(_3405);
                        float _3409 = _3408 * _3402;
                        float _3410 = _3408 * _3403;
                        float _3411 = _3408 * _3404;
                        float _3412 = dot(vec3(_850, _853, _856), vec3(_3409, _3410, _3411));
                        float _3417 = 1.0 - (_3405 * _3362.w);
                        float _4868 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3418 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                        float _3419 = sqrt(_3405) * _3381.w;
                        float _3422 = 1.39999997615814208984375 / (_3419 + 1.39999997615814208984375);
                        float _3423 = _3422 * _3422;
                        float _3426 = ((1.0 - _3423) * _3412) + _3423;
                        float _3429 = _3419 * _3419;
                        float _3433 = ((isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0))) * _3418) / ((_3429 * 0.699999988079071044921875) + 1.0);
                        float _3437 = (-0.0) - _2017;
                        float _3438 = (-0.0) - _2018;
                        float _3439 = (-0.0) - _2019;
                        float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                        float _3444 = _3443 * _3437;
                        float _3445 = _3443 * _3438;
                        float _3446 = _3443 * _3439;
                        float _3453 = exp2(log2(1.0 / ((_3429 * 3.5) + 5.0)) * 0.25);
                        float _3454 = 1.0 - _925;
                        float _3461 = sqrt(1.0 - ((1.0 - (_3454 * _3454)) * (1.0 - (_3453 * _3453))));
                        float _3462 = _3461 * _3461;
                        float _3463 = _3462 * _3462;
                        float _3464 = _3444 + _3409;
                        float _3465 = _3445 + _3410;
                        float _3466 = _3446 + _3411;
                        float _3470 = inversesqrt(dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466)));
                        float _3474 = dot(vec3(_850, _853, _856), vec3(_3444, _3445, _3446));
                        float _4884 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3477 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                        float _3478 = dot(vec3(_850, _853, _856), vec3(_3470 * _3464, _3470 * _3465, _3470 * _3466));
                        float _4895 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3481 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                        float _3485 = ((_3481 * _3481) * (_3463 + (-1.0))) + 1.0;
                        float _3486 = _3422 * _3462;
                        float _3487 = _3486 * _3486;
                        float _3490 = ((1.0 - _3487) * _3412) + _3487;
                        float _4906 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3491 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                        float _3492 = 1.0 - _3462;
                        float _3502 = (0.5 / (((_3491 * ((_3477 * _3492) + _3462)) + 9.9999999392252902907785028219223e-09) + (((_3491 * _3492) + _3462) * _3477))) * _3491;
                        float _4917 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3513 = (((_3463 * 3.1415927410125732421875) * (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) / ((_3485 * _3485) * ((_3429 * 2.1991131305694580078125) + 3.141590118408203125))) * _3418;
                        _3266 = (_3433 * _3381.x) + _3339;
                        _3267 = (_3433 * _3381.y) + _3340;
                        _3268 = (_3433 * _3381.z) + _3341;
                        _3263 = (_3513 * _3398.x) + _3336;
                        _3264 = (_3513 * _3398.y) + _3337;
                        _3265 = (_3513 * _3398.z) + _3338;
                        if (_3343 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3336 = _3263;
                            _3337 = _3264;
                            _3338 = _3265;
                            _3339 = _3266;
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3343;
                        }
                    }
                    frontier_phi_71_pred = _3268;
                    frontier_phi_71_pred_1 = _3267;
                    frontier_phi_71_pred_2 = _3266;
                    frontier_phi_71_pred_3 = _3265;
                    frontier_phi_71_pred_4 = _3264;
                    frontier_phi_71_pred_5 = _3263;
                }
                _3049 = frontier_phi_71_pred;
                _3047 = frontier_phi_71_pred_1;
                _3045 = frontier_phi_71_pred_2;
                _3043 = frontier_phi_71_pred_3;
                _3041 = frontier_phi_71_pred_4;
                _3039 = frontier_phi_71_pred_5;
                uint _3198 = _3197 + 1u;
                if (_3198 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3191 = _3039;
                    _3192 = _3041;
                    _3193 = _3043;
                    _3194 = _3045;
                    _3195 = _3047;
                    _3196 = _3049;
                    _3197 = _3198;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
        }
        uvec4 _3052 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3053 = _3052.z;
        uint _3055 = (_3053 >> 8u) & 15u;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        if (((4294967295u << _3055) & _2958) == 0u)
        {
            _3159 = _3038;
            _3161 = _3040;
            _3163 = _3042;
            _3165 = _3044;
            _3167 = _3046;
            _3169 = _3048;
        }
        else
        {
            float _3184 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
            float _3185 = _3184 * _2017;
            float _3186 = _3184 * _2018;
            float _3187 = _3184 * _2019;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3055 < ((_3053 >> 12u) & 15u))
            {
                float _3160;
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3319 = _3038;
                float _3320 = _3040;
                float _3321 = _3042;
                float _3322 = _3044;
                float _3323 = _3046;
                float _3324 = _3048;
                uint _3325 = _3055;
                uint _3334;
                bool _3335;
                for (;;)
                {
                    _3334 = texelFetch(g_lightClassification, int((((_2952 << 5u) + (_2938 << 9u)) + (_3325 << 2u)) >> 2u)).x;
                    _3335 = _3334 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3335)
                    {
                        frontier_phi_82_pred = _3324;
                        frontier_phi_82_pred_1 = _3323;
                        frontier_phi_82_pred_2 = _3322;
                        frontier_phi_82_pred_3 = _3321;
                        frontier_phi_82_pred_4 = _3320;
                        frontier_phi_82_pred_5 = _3319;
                    }
                    else
                    {
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3540 = _3319;
                        float _3541 = _3320;
                        float _3542 = _3321;
                        float _3543 = _3322;
                        float _3544 = _3323;
                        float _3545 = _3324;
                        uint _3546 = _3334;
                        uint _3547;
                        vec4 _3572;
                        float _3573;
                        vec4 _3588;
                        vec3 _3600;
                        vec4 _3615;
                        vec4 _3630;
                        float _3676;
                        bool _3677;
                        for (;;)
                        {
                            uint _3557 = ((_3325 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3546));
                            _3547 = (_3546 + 4294967295u) & _3546;
                            uint _3559 = _3557 * 40u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            _3573 = _3572.w;
                            uint _3575 = (_3557 * 40u) + 4u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3590 = (_3557 * 40u) + 8u;
                            _3600 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x));
                            uint _3602 = (_3557 * 40u) + 16u;
                            _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3617 = (_3557 * 40u) + 20u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3632 = (_3557 * 40u) + 24u;
                            vec4 _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3651 = (_3557 * 40u) + 28u;
                            vec4 _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            _3676 = fma(_2019, _3664.z, fma(_2018, _3664.y, _3664.x * _2017)) + _3664.w;
                            _3677 = !((fma(_2019, _3645.z, fma(_2018, _3645.y, _3645.x * _2017)) + _3645.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3677)
                            {
                                float _3704 = _3572.x - _2017;
                                float _3705 = _3572.y - _2018;
                                float _3706 = _3572.z - _2019;
                                float _3707 = dot(vec3(_3704, _3705, _3706), vec3(_3704, _3705, _3706));
                                float _3710 = inversesqrt(_3707);
                                float _3711 = _3710 * _3704;
                                float _3712 = _3710 * _3705;
                                float _3713 = _3710 * _3706;
                                float _3717 = 1.0 - (_3707 / (_3573 * _3573));
                                float _4928 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3718 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                                float _3722 = sqrt(_3707) * _3588.w;
                                float _3724 = 1.39999997615814208984375 / (_3722 + 1.39999997615814208984375);
                                float _3725 = _3724 * _3724;
                                float _3728 = ((1.0 - _3725) * dot(vec3(_3711, _3712, _3713), vec3(_850, _853, _856))) + _3725;
                                float _3731 = _3722 * _3722;
                                float _3735 = (fma(_2019, _3615.z, fma(_2018, _3615.y, _3615.x * _2017)) + _3615.w) / _3676;
                                float _3736 = (fma(_2019, _3630.z, fma(_2018, _3630.y, _3630.x * _2017)) + _3630.w) / _3676;
                                float _3740 = 1.0 - dot(vec2(_3735, _3736), vec2(_3735, _3736));
                                float _4944 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3742 = _3741 * (((isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0))) * _3718) / ((_3731 * 0.699999988079071044921875) + 1.0));
                                float _3754 = exp2(log2(1.0 / ((_3731 * 3.5) + 5.0)) * 0.25);
                                float _3755 = 1.0 - _925;
                                float _3762 = sqrt(1.0 - ((1.0 - (_3755 * _3755)) * (1.0 - (_3754 * _3754))));
                                float _3763 = _3762 * _3762;
                                float _3764 = _3763 * _3763;
                                float _3765 = _3711 - _3185;
                                float _3766 = _3712 - _3186;
                                float _3767 = _3713 - _3187;
                                float _3771 = inversesqrt(dot(vec3(_3765, _3766, _3767), vec3(_3765, _3766, _3767)));
                                float _3775 = dot(vec3(_850, _853, _856), vec3((-0.0) - _3185, (-0.0) - _3186, (-0.0) - _3187));
                                float _4955 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3778 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3779 = dot(vec3(_850, _853, _856), vec3(_3771 * _3765, _3771 * _3766, _3771 * _3767));
                                float _4966 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3782 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3786 = ((_3782 * _3782) * (_3764 + (-1.0))) + 1.0;
                                float _3787 = _3724 * _3763;
                                float _3788 = _3787 * _3787;
                                float _3794 = ((1.0 - _3788) * dot(vec3(_850, _853, _856), vec3(_3711, _3712, _3713))) + _3788;
                                float _4977 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3795 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3796 = 1.0 - _3763;
                                float _3806 = (0.5 / (((_3795 * ((_3778 * _3796) + _3763)) + 9.9999999392252902907785028219223e-09) + (((_3795 * _3796) + _3763) * _3778))) * _3795;
                                float _4988 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3816 = (_3741 * _3718) * (((_3764 * 3.1415927410125732421875) * (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0)))) / ((_3786 * _3786) * ((_3731 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3742 * _3588.z;
                                frontier_phi_88_pred_1 = _3742 * _3588.y;
                                frontier_phi_88_pred_2 = _3742 * _3588.x;
                                frontier_phi_88_pred_3 = _3816 * _3600.z;
                                frontier_phi_88_pred_4 = _3816 * _3600.y;
                                frontier_phi_88_pred_5 = _3816 * _3600.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3825 = frontier_phi_88_pred;
                            _3824 = frontier_phi_88_pred_1;
                            _3823 = frontier_phi_88_pred_2;
                            _3822 = frontier_phi_88_pred_3;
                            _3821 = frontier_phi_88_pred_4;
                            _3820 = frontier_phi_88_pred_5;
                            _3530 = _3823 + _3543;
                            _3531 = _3824 + _3544;
                            _3532 = _3825 + _3545;
                            _3527 = _3820 + _3540;
                            _3528 = _3821 + _3541;
                            _3529 = _3822 + _3542;
                            if (_3547 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3540 = _3527;
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3547;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3532;
                        frontier_phi_82_pred_1 = _3531;
                        frontier_phi_82_pred_2 = _3530;
                        frontier_phi_82_pred_3 = _3529;
                        frontier_phi_82_pred_4 = _3528;
                        frontier_phi_82_pred_5 = _3527;
                    }
                    _3170 = frontier_phi_82_pred;
                    _3168 = frontier_phi_82_pred_1;
                    _3166 = frontier_phi_82_pred_2;
                    _3164 = frontier_phi_82_pred_3;
                    _3162 = frontier_phi_82_pred_4;
                    _3160 = frontier_phi_82_pred_5;
                    uint _3326 = _3325 + 1u;
                    if (_3326 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3319 = _3160;
                        _3320 = _3162;
                        _3321 = _3164;
                        _3322 = _3166;
                        _3323 = _3168;
                        _3324 = _3170;
                        _3325 = _3326;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3166;
                frontier_phi_63_64_ladder_1 = _3170;
                frontier_phi_63_64_ladder_2 = _3168;
                frontier_phi_63_64_ladder_3 = _3164;
                frontier_phi_63_64_ladder_4 = _3162;
                frontier_phi_63_64_ladder_5 = _3160;
            }
            else
            {
                frontier_phi_63_64_ladder = _3044;
                frontier_phi_63_64_ladder_1 = _3048;
                frontier_phi_63_64_ladder_2 = _3046;
                frontier_phi_63_64_ladder_3 = _3042;
                frontier_phi_63_64_ladder_4 = _3040;
                frontier_phi_63_64_ladder_5 = _3038;
            }
            _3159 = frontier_phi_63_64_ladder_5;
            _3161 = frontier_phi_63_64_ladder_4;
            _3163 = frontier_phi_63_64_ladder_3;
            _3165 = frontier_phi_63_64_ladder;
            _3167 = frontier_phi_63_64_ladder_2;
            _3169 = frontier_phi_63_64_ladder_1;
        }
        float _3174 = isnan(1.0) ? _909 : (isnan(_909) ? 1.0 : min(_909, 1.0));
        _2971 = (_3174 * _3165) + _2483;
        _2973 = (_3174 * _3167) + _2485;
        _2975 = (_3174 * _3169) + _2487;
        _2977 = ((_3159 * _893) * _3174) + _2821;
        _2979 = ((_3161 * _895) * _3174) + _2823;
        _2981 = ((_3163 * _896) * _3174) + _2825;
    }
    else
    {
        _2971 = _2483;
        _2973 = _2485;
        _2975 = _2487;
        _2977 = _2821;
        _2979 = _2823;
        _2981 = _2825;
    }
    float _5004 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _5015 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _5026 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _2998 = ((isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_2971 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _909))) + ((_2977 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1749)) * cbPerFrame._m0[3u].x);
    float _2999 = ((isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * (_2973 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _909))) + ((_2979 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1749)) * cbPerFrame._m0[3u].x);
    float _3000 = ((isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0))) * (_2975 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _909))) + ((_2981 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1749)) * cbPerFrame._m0[3u].x);
    uint _3001 = _272 + 6u;
    float _3009 = _831 / cbSceneParam._m0[86u].x;
    float _3010 = _832 / cbSceneParam._m0[86u].y;
    vec4 _3024 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3009, _3010, (log2((isnan(cbSceneParam._m0[77u].w) ? _753 : (isnan(_753) ? cbSceneParam._m0[77u].w : min(_753, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3026 = _3024.x;
    float _3027 = _3024.y;
    float _3028 = _3024.z;
    float _3029 = _3024.w;
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    if (_753 > cbSceneParam._m0[78u].w)
    {
        float _3063 = isnan(_753) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _753 : min(cbSceneParam._m0[80u].w, _753));
        float _3064 = _3063 / _753;
        float _3075 = _3064 * _804;
        float _3076 = _805 * _3064;
        float _3077 = (-0.0) - _3076;
        float _3079 = _3064 * _806;
        float _3081 = (cbSceneParam._m0[77u].w * _3077) / _3063;
        float _3082 = _3081 + cbSceneParam._m0[79u].w;
        float _3083 = cbSceneParam._m0[79u].w - _3076;
        float _3089 = sqrt(((_3075 * _3075) + (_3076 * _3076)) + (_3079 * _3079));
        float _3092 = (1.0 - (cbSceneParam._m0[77u].w / _3063)) * _3089;
        float _3097 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3099 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3276;
        if (abs((_3077 - _3081) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3276 = ((((_3082 > 0.0) ? exp2(_3097 * _3082) : (2.0 - exp2(_3099 * _3082))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3092;
        }
        else
        {
            float _3220 = 1.0 / cbSceneParam._m0[80u].x;
            float _3221 = isnan(_3083) ? _3082 : (isnan(_3082) ? _3083 : max(_3082, _3083));
            float _3222 = isnan(_3083) ? _3082 : (isnan(_3082) ? _3083 : min(_3082, _3083));
            float _3231 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : min(_3221, 0.0));
            float _3232 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : min(_3222, 0.0));
            _3276 = ((abs(_3089 / _3077) * cbSceneParam._m0[80u].y) * ((((_3231 - _3232) * 2.0) - ((exp2(_3097 * (isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0)))) - exp2(_3097 * (isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))))) * _3220)) - ((exp2(_3099 * _3231) - exp2(_3099 * _3232)) * _3220))) + (_3092 * cbSceneParam._m0[80u].z);
        }
        vec4 _3278 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3009, _3010, 1.0), 0.0);
        float _3287 = exp2((_3276 * (-1.44269502162933349609375)) * (1.0 - _3278.w));
        float _3288 = log2(_3287);
        float _3304 = log2(_3029);
        _3101 = (exp2(_3304 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].x)) * _3278.x) / cbSceneParam._m0[78u].x)) + _3026;
        _3103 = (exp2(_3304 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].y)) * _3278.y) / cbSceneParam._m0[78u].y)) + _3027;
        _3105 = (exp2(_3304 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].z)) * _3278.z) / cbSceneParam._m0[78u].z)) + _3028;
        _3107 = _3287 * _3029;
    }
    else
    {
        _3101 = _3026;
        _3103 = _3027;
        _3105 = _3028;
        _3107 = _3029;
    }
    bool _3314;
    vec4 _3117;
    vec4 _3139;
    float _3141;
    float _3145;
    float _3146;
    float _3147;
    float _3148;
    bool _3158;
    for (;;)
    {
        _3117 = cbMatDynParam._m0[0u];
        float _3119 = roundEven(_3117.y);
        bool _3120 = _3119 == 3.0;
        float _3121 = log2(_3107);
        float _3128 = exp2(_3121 * cbSceneParam._m0[78u].x) * _2998;
        float _3129 = exp2(_3121 * cbSceneParam._m0[78u].y) * _2999;
        float _3130 = exp2(_3121 * cbSceneParam._m0[78u].z) * _3000;
        float _3137 = _820 + (-0.5);
        _3139 = cbMtdParam._m0[1u];
        _3141 = _3139.y * _3137;
        float _3144 = (_3119 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3145 = _3144 * (_3120 ? _3128 : (_3128 + (cbSceneParam._m0[72u].w * _3101)));
        _3146 = _3144 * (_3120 ? _3129 : (_3129 + (cbSceneParam._m0[72u].w * _3103)));
        _3147 = _3144 * (_3120 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3105)));
        _3148 = _3137 * 0.999000012874603271484375;
        _3158 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3158)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _3148) < 0.5)
            {
                _3314 = true;
                break;
            }
        }
        uint _3255 = _869 + uint(_3117.w);
        if ((cbInstanceData._m0[_3255].w < 1.0) && ((cbInstanceData._m0[_3255].w + _3148) < 0.5))
        {
            _3314 = true;
            break;
        }
        if ((_3141 + 1.0) < _3139.x)
        {
            _3314 = true;
            break;
        }
        _3314 = false;
        break;
    }
    float _3518;
    if (_3314)
    {
        discard_state = true;
        _3518 = 0.0;
    }
    else
    {
        _3518 = cbInstanceData._m0[_3001].w;
    }
    SV_Target.x = _3145;
    SV_Target.y = _3146;
    SV_Target.z = _3147;
    SV_Target.w = _3518;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3001].w;
    discard_exit();
}


