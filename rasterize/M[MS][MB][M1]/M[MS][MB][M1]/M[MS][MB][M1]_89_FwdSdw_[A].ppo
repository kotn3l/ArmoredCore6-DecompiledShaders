#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1319;
float _3984;
float _3985;
float _3986;
float _3987;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3996 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _440 = _438.x;
    float _441 = _438.y;
    float _442 = _438.z;
    float _451 = ((_421.z - _442) * _394) + _442;
    float _454 = ((((_421.x - _440) * _394) + _440) * 2.0) + (-1.0);
    float _456 = ((((_421.y - _441) * _394) + _441) * 2.0) + (-1.0);
    float _457 = dot(vec2(_454, _456), vec2(_454, _456));
    float _4007 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _462 = sqrt(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))));
    vec4 _475 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _495 = _493.x;
    float _496 = 1.0 - _495;
    float _502 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _505 = ((isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : min(_502, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _514 = (_505 - ((((((_495 - _496) * cbMtdParam._m0[24u].z) + _496) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _505))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4028 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _522 = (_515 * (cbMtdParam._m0[17u].x - _401)) + _401;
    float _523 = (_515 * (cbMtdParam._m0[17u].y - _402)) + _402;
    float _524 = (_515 * (cbMtdParam._m0[17u].z - _403)) + _403;
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _538 = _536.x;
    float _539 = 1.0 - _538;
    float _566 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_538 - _539) * cbMtdParam._m0[24u].w) + _539) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4039 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _575 = ((((cbMtdParam._m0[10u].x - _522) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _567) + _522;
    float _576 = ((((cbMtdParam._m0[10u].y - _523) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _567) + _523;
    float _577 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _524)) * _567) + _524;
    vec4 _589 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _605 = _603.x;
    float _623 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _605) * _394) + _605;
    float _627 = ((_589.x - _623) * cbMtdParam._m0[19u].z) + _623;
    float _629 = _627 - (_627 * _515);
    float _631 = _629 - (_629 * _567);
    vec4 _645 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _652 = (_645.x * 2.0) + (-1.0);
    float _653 = (_645.y * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _4050 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _662 = (_515 * (_645.z - _451)) + _451;
    float _665 = ((cbMtdParam._m0[23u].y - _662) * _567) + _662;
    vec4 _684 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _690 = (_684.x * 2.0) + (-1.0);
    float _691 = (_684.y * 2.0) + (-1.0);
    float _692 = dot(vec2(_690, _691), vec2(_690, _691));
    float _4061 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _709 = (((_652 - _454) + (cbMtdParam._m0[21u].x * _454)) * _515) + _454;
    float _710 = (((_653 - _456) + (cbMtdParam._m0[21u].x * _456)) * _515) + _456;
    float _711 = (_515 * (sqrt(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) - _462)) + _462;
    float _722 = (((_690 - _709) + (_709 * cbMtdParam._m0[22u].z)) * _567) + _709;
    float _723 = (((_691 - _710) + (_710 * cbMtdParam._m0[22u].z)) * _567) + _710;
    float _724 = ((sqrt(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) - _711) * _567) + _711;
    float _726 = cbMtdParam._m0[22u].x + _475.w;
    float _729 = fma(_724, _244 * NORMAL.x, fma(_723, _251 * TANGENT.x, (_237 * _229) * _722));
    float _732 = fma(_724, _244 * NORMAL.y, fma(_723, _251 * TANGENT.y, (_237 * _230) * _722));
    float _735 = fma(_724, _244 * NORMAL.z, fma(_723, _251 * TANGENT.z, (_237 * _231) * _722));
    float _739 = inversesqrt(dot(vec3(_729, _732, _735), vec3(_729, _732, _735)));
    float _740 = _739 * _729;
    float _741 = _739 * _732;
    float _742 = _739 * _735;
    float _4072 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _743 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4094 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4105 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _4116 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4127 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _748 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _762 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _812 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _802);
    float _813 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _802);
    float _814 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _802);
    float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
    float _819 = _812 * _818;
    float _820 = _813 * _818;
    float _821 = _814 * _818;
    vec4 _826 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _828 = _826.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1000 = sqrt(((_812 * _812) + (_813 * _813)) + (_814 * _814));
        float _1006 = (cbMatDynParam._m0[5u].x * _1000) + cbMatDynParam._m0[5u].y;
        float _4138 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1011 = (cbMatDynParam._m0[5u].z * _1000) + cbMatDynParam._m0[5u].w;
        float _4149 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) - _1007)) + _1007) < ((_828 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _839 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _840 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _858 = fma(_742, cbSceneParam._m0[5u].z, fma(_741, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _740));
    float _861 = fma(_742, cbSceneParam._m0[6u].z, fma(_741, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _740));
    float _864 = fma(_742, cbSceneParam._m0[7u].z, fma(_741, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _740));
    uint _877 = _257 + 9u;
    uint _878 = _877 + uint(cbMatDynParam._m0[0u].w);
    float _884 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * cbInstanceData._m0[_878].x;
    float _885 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * cbInstanceData._m0[_878].y;
    float _886 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * cbInstanceData._m0[_878].z;
    float _4160 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _890 = 1.0 - _748;
    float _891 = _887 * _890;
    float _892 = _888 * _890;
    float _893 = _889 * _890;
    float _898 = (_887 + (-0.039999999105930328369140625)) * _748;
    float _899 = (_888 + (-0.039999999105930328369140625)) * _748;
    float _900 = (_889 + (-0.039999999105930328369140625)) * _748;
    float _901 = _898 + 0.039999999105930328369140625;
    float _903 = _899 + 0.039999999105930328369140625;
    float _904 = _900 + 0.039999999105930328369140625;
    vec4 _913 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _839, cbSceneParam._m0[86u].y * _840));
    float _917 = ((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * TEXCOORD_5.w) * _913.x;
    float _918 = dot(vec3(_740, _741, _742), vec3(_819, _820, _821));
    float _921 = _918 * 2.0;
    float _925 = (_921 * _740) - _819;
    float _926 = (_921 * _741) - _820;
    float _927 = (_921 * _742) - _821;
    float _931 = abs(dot(vec3(_819, _820, _821), vec3(_740, _741, _742)));
    float _4193 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _933 = sqrt(_743);
    float _946 = exp2((_933 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_933 * 3.0));
    float _952 = (1.0 - _946) * ((_933 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _953 = _946 * _933;
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1318;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1043 = fma(_989, cbModelParam._m0[26u].z, fma(_985, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981));
        float _1047 = fma(_989, cbModelParam._m0[27u].z, fma(_985, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981));
        float _1051 = fma(_989, cbModelParam._m0[28u].z, fma(_985, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981));
        float _1076 = _981 + _740;
        float _1077 = _985 + _741;
        float _1078 = _989 + _742;
        float _1088 = fma(_1078, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076)) - _1043;
        float _1089 = fma(_1078, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076)) - _1047;
        float _1090 = fma(_1078, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076)) - _1051;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1043 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1047 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[34u].z) + ((((((_1051 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1146 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1112.x + (-0.5));
        float _1148 = _1146 * (_1112.y + (-0.5));
        float _1149 = _1146 * (_1112.z + (-0.5));
        float _1156 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1119.x + (-0.5));
        float _1158 = _1156 * (_1119.y + (-0.5));
        float _1159 = _1156 * (_1119.z + (-0.5));
        float _1166 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1126.x + (-0.5));
        float _1168 = _1166 * (_1126.y + (-0.5));
        float _1169 = _1166 * (_1126.z + (-0.5));
        float _1176 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1133.x + (-0.5));
        float _1178 = _1176 * (_1133.y + (-0.5));
        float _1179 = _1176 * (_1133.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1200 = (dot(vec3(_740, _741, _742), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1210 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4241 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1212 + 1.0))) + _1217) * _1180;
        float _1227 = _1148 * 0.5;
        float _1228 = _1158 * 0.5;
        float _1229 = _1168 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_740, _741, _742), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4274 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1254 + 1.0))) + _1259) * _1181;
        float _1269 = _1149 * 0.5;
        float _1270 = _1159 * 0.5;
        float _1271 = _1169 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_740, _741, _742), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4307 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1296 + 1.0))) + _1301) * _1182;
        _1318 = _1149;
        _1320 = _1148;
        _1321 = _1147;
        _1322 = _1159;
        _1323 = _1158;
        _1324 = _1157;
        _1325 = _1169;
        _1326 = _1168;
        _1327 = _1167;
        _1328 = _1182;
        _1329 = _1181;
        _1330 = _1180;
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1319;
        _1320 = _1319;
        _1321 = _1319;
        _1322 = _1319;
        _1323 = _1319;
        _1324 = _1319;
        _1325 = _1319;
        _1326 = _1319;
        _1327 = _1319;
        _1328 = _1319;
        _1329 = _1319;
        _1330 = _1319;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1361 = fma(_989, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _981));
        float _1365 = fma(_989, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _981));
        float _1369 = fma(_989, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _981));
        float _1392 = _981 + _740;
        float _1393 = _985 + _741;
        float _1394 = _989 + _742;
        float _1404 = fma(_1394, cbModelParam._m0[30u].z, fma(_1393, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1392)) - _1361;
        float _1405 = fma(_1394, cbModelParam._m0[31u].z, fma(_1393, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1392)) - _1365;
        float _1406 = fma(_1394, cbModelParam._m0[32u].z, fma(_1393, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1392)) - _1369;
        float _1410 = inversesqrt(dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406)));
        float _1423 = ((_1410 * _1404) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1361 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1410 * _1405) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1365 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1410 * _1406) / cbModelParam._m0[35u].z) + ((((((_1369 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        float _1460 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1427.x + (-0.5));
        float _1462 = _1460 * (_1427.y + (-0.5));
        float _1463 = _1460 * (_1427.z + (-0.5));
        float _1470 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1434.x + (-0.5));
        float _1472 = _1470 * (_1434.y + (-0.5));
        float _1473 = _1470 * (_1434.z + (-0.5));
        float _1480 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1441.x + (-0.5));
        float _1482 = _1480 * (_1441.y + (-0.5));
        float _1483 = _1480 * (_1441.z + (-0.5));
        float _1490 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1448.x + (-0.5));
        float _1492 = _1490 * (_1448.y + (-0.5));
        float _1493 = _1490 * (_1448.z + (-0.5));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = _1461 * 0.5;
        float _1498 = _1471 * 0.5;
        float _1499 = _1481 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_740, _741, _742), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4370 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1524 + 1.0))) + _1529) * _1494;
        float _1539 = _1462 * 0.5;
        float _1540 = _1472 * 0.5;
        float _1541 = _1482 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_740, _741, _742), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4403 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1566 + 1.0))) + _1571) * _1495;
        float _1581 = _1463 * 0.5;
        float _1582 = _1473 * 0.5;
        float _1583 = _1483 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_740, _741, _742), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4436 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1608 + 1.0))) + _1613) * _1496;
        _1630 = _1463;
        _1631 = _1462;
        _1632 = _1461;
        _1633 = _1473;
        _1634 = _1472;
        _1635 = _1471;
        _1636 = _1483;
        _1637 = _1482;
        _1638 = _1481;
        _1639 = _1496;
        _1640 = _1495;
        _1641 = _1494;
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
    }
    else
    {
        _1630 = _1319;
        _1631 = _1319;
        _1632 = _1319;
        _1633 = _1319;
        _1634 = _1319;
        _1635 = _1319;
        _1636 = _1319;
        _1637 = _1319;
        _1638 = _1319;
        _1639 = _1319;
        _1640 = _1319;
        _1641 = _1319;
        _1642 = 0.0;
        _1643 = 0.0;
        _1644 = 0.0;
    }
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1331)) + _1331;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1332)) + _1332;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1333)) + _1333;
    float _1677 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1654));
    float _1698 = _925 * 0.5;
    float _1699 = _926 * 0.5;
    float _1700 = _927 * 0.5;
    float _1701 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1704 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1707 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1741;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1714 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1318, _1322, _1325, _1328));
        float _1718 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1722 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1729 = dot(vec4(cbModelParam._m0[39u]), vec4(_1698, _1699, _1700, 1.0));
        _1741 = dot(vec3(isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1741 = 1.0;
    }
    float _1752;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1743 = dot(vec4(cbModelParam._m0[40u]), vec4(_1698, _1699, _1700, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1756 = (_1752 * cbModelParam._m0[1u].x) + (_1741 * (1.0 - cbModelParam._m0[1u].x));
    float _1766 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _743);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1766 : min(cbModelParam._m0[25u].z, _1766));
    float _1848;
    float _1850;
    float _1852;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1815 = fma(_989, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981)) + cbModelParam._m0[13u].w;
        float _1819 = fma(_989, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981)) + cbModelParam._m0[14u].w;
        float _1823 = fma(_989, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981)) + cbModelParam._m0[15u].w;
        float _1826 = fma(_927, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925));
        float _1829 = fma(_927, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925));
        float _1832 = fma(_927, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925));
        float _1860;
        if (_1826 > 0.0)
        {
            _1860 = abs((1.0 - _1815) / _1826);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1815 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1860 = frontier_phi_17_15_ladder;
        }
        float _2032;
        if (_1829 > 0.0)
        {
            _2032 = abs((1.0 - _1819) / _1829);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1819 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2032 = frontier_phi_26_22_ladder;
        }
        float _2327;
        if (_1832 > 0.0)
        {
            _2327 = abs((1.0 - _1823) / _1832);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1823 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2327 = frontier_phi_38_33_ladder;
        }
        float _2329 = isnan(_2032) ? _1860 : (isnan(_1860) ? _2032 : min(_1860, _2032));
        float _2330 = isnan(_2327) ? _2329 : (isnan(_2329) ? _2327 : min(_2329, _2327));
        float _2334 = (_2330 * _1826) + _1815;
        float _2335 = (_2330 * _1829) + _1819;
        float _2336 = (_2330 * _1832) + _1823;
        float _2337 = _2330 * 9.9999997473787516355514526367188e-05;
        float _2339 = (-1.0) - _2337;
        float _2341 = _2337 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2336 > _2341) || ((_2336 < _2339) || ((_2335 > _2341) || ((_2335 < _2339) || ((_2334 < _2339) || (_2334 > _2341))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2481 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2336, cbModelParam._m0[9u].z, fma(_2335, cbModelParam._m0[9u].y, _2334 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2336, cbModelParam._m0[10u].z, fma(_2335, cbModelParam._m0[10u].y, _2334 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2336, cbModelParam._m0[11u].z, fma(_2335, cbModelParam._m0[11u].y, _2334 * cbModelParam._m0[11u].x))), _1767);
            frontier_phi_16_38_ladder = _2481.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2481.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2481.x * cbModelParam._m0[1u].y;
        }
        _1848 = frontier_phi_16_38_ladder_2;
        _1850 = frontier_phi_16_38_ladder_1;
        _1852 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1836 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_925, _926, _927), _1767);
        _1848 = _1836.x * cbModelParam._m0[1u].y;
        _1850 = _1836.y * cbModelParam._m0[1u].y;
        _1852 = _1836.z * cbModelParam._m0[1u].y;
    }
    float _1856 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _743);
    float _1857 = isnan(_1856) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1856 : min(cbModelParam._m0[25u].w, _1856));
    float _1947;
    float _1949;
    float _1951;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1911 = fma(_989, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981)) + cbModelParam._m0[21u].w;
        float _1915 = fma(_989, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981)) + cbModelParam._m0[22u].w;
        float _1919 = fma(_989, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981)) + cbModelParam._m0[23u].w;
        float _1922 = fma(_927, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925));
        float _1925 = fma(_927, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925));
        float _1928 = fma(_927, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925));
        float _2037;
        if (_1922 > 0.0)
        {
            _2037 = abs((1.0 - _1911) / _1922);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1911 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2037 = frontier_phi_28_24_ladder;
        }
        float _2354;
        if (_1925 > 0.0)
        {
            _2354 = abs((1.0 - _1915) / _1925);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1915 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2354 = frontier_phi_40_35_ladder;
        }
        float _2692;
        if (_1928 > 0.0)
        {
            _2692 = abs((1.0 - _1919) / _1928);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1919 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2692 = frontier_phi_50_47_ladder;
        }
        float _2694 = isnan(_2354) ? _2037 : (isnan(_2037) ? _2354 : min(_2037, _2354));
        float _2695 = isnan(_2692) ? _2694 : (isnan(_2694) ? _2692 : min(_2694, _2692));
        float _2699 = (_2695 * _1922) + _1911;
        float _2700 = (_2695 * _1925) + _1915;
        float _2701 = (_2695 * _1928) + _1919;
        float _2702 = _2695 * 9.9999997473787516355514526367188e-05;
        float _2703 = (-1.0) - _2702;
        float _2705 = _2702 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2701 > _2705) || ((_2701 < _2703) || ((_2700 > _2705) || ((_2700 < _2703) || ((_2699 < _2703) || (_2699 > _2705))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2823 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2701, cbModelParam._m0[17u].z, fma(_2700, cbModelParam._m0[17u].y, _2699 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2701, cbModelParam._m0[18u].z, fma(_2700, cbModelParam._m0[18u].y, _2699 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2701, cbModelParam._m0[19u].z, fma(_2700, cbModelParam._m0[19u].y, _2699 * cbModelParam._m0[19u].x))), _1857);
            frontier_phi_25_50_ladder = _2823.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2823.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2823.x * cbModelParam._m0[1u].z;
        }
        _1947 = frontier_phi_25_50_ladder_2;
        _1949 = frontier_phi_25_50_ladder_1;
        _1951 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1931 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_925, _926, _927), _1857);
        _1947 = _1931.x * cbModelParam._m0[1u].z;
        _1949 = _1931.y * cbModelParam._m0[1u].z;
        _1951 = _1931.z * cbModelParam._m0[1u].z;
    }
    float _1964 = (((_952 * _901) + _953) * _917) * ((cbModelParam._m0[1u].w * (_1947 - _1848)) + _1848);
    float _1966 = (((_952 * _903) + _953) * _917) * ((cbModelParam._m0[1u].w * (_1949 - _1850)) + _1850);
    float _1968 = (((_952 * _904) + _953) * _917) * ((cbModelParam._m0[1u].w * (_1951 - _1852)) + _1852);
    float _1971 = fma(_1968, cbSceneParam._m0[89u].z, fma(_1966, cbSceneParam._m0[89u].y, _1964 * cbSceneParam._m0[89u].x));
    float _1974 = fma(_1968, cbSceneParam._m0[90u].z, fma(_1966, cbSceneParam._m0[90u].y, _1964 * cbSceneParam._m0[90u].x));
    float _1977 = fma(_1968, cbSceneParam._m0[91u].z, fma(_1966, cbSceneParam._m0[91u].y, _1964 * cbSceneParam._m0[91u].x));
    float _2011 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2015 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2019 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2024 = _2011 / _2023;
    float _2025 = _2015 / _2023;
    float _2026 = _2019 / _2023;
    float _2173;
    float _2174;
    float _2175;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2053 = ((uint(_2026 > cbSceneParam._m0[59u].y) + uint(_2026 > cbSceneParam._m0[59u].x)) + uint(_2026 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2054 = _2053 + 43u;
        uint _2062 = _2053 + 44u;
        uint _2070 = _2053 + 45u;
        uint _2078 = _2053 + 46u;
        float _2089 = fma(_2023, cbSceneParam._m0[_2054].w, fma(_2019, cbSceneParam._m0[_2054].z, fma(_2015, cbSceneParam._m0[_2054].y, _2011 * cbSceneParam._m0[_2054].x)));
        float _2093 = fma(_2023, cbSceneParam._m0[_2062].w, fma(_2019, cbSceneParam._m0[_2062].z, fma(_2015, cbSceneParam._m0[_2062].y, _2011 * cbSceneParam._m0[_2062].x)));
        float _2101 = fma(_2023, cbSceneParam._m0[_2078].w, fma(_2019, cbSceneParam._m0[_2078].z, fma(_2015, cbSceneParam._m0[_2078].y, _2011 * cbSceneParam._m0[_2078].x)));
        float _2106 = cbSceneParam._m0[33u].z * _2101;
        float _2108 = cbSceneParam._m0[33u].w * _2101;
        float _2111 = fma(_2023, cbSceneParam._m0[_2070].w, fma(_2019, cbSceneParam._m0[_2070].z, fma(_2015, cbSceneParam._m0[_2070].y, _2011 * cbSceneParam._m0[_2070].x))) / _2101;
        float _2159 = (cbSceneParam._m0[33u].x - sqrt(((_2025 * _2025) + (_2024 * _2024)) + (_2026 * _2026))) * cbSceneParam._m0[33u].y;
        float _4562 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2166 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2106 + _2089) / _2101, (_2108 + _2093) / _2101), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2108 + _2089) / _2101, (_2093 - _2106) / _2101), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2089 - _2106) / _2101, (_2093 - _2108) / _2101), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2089 - _2108) / _2101, (_2106 + _2093) / _2101), _2111), 0.0)).x), vec4(0.25)));
        _2173 = 1.0 - (_2166 * cbSceneParam._m0[34u].x);
        _2174 = 1.0 - (_2166 * cbSceneParam._m0[34u].y);
        _2175 = 1.0 - (_2166 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2173 = 1.0;
        _2174 = 1.0;
        _2175 = 1.0;
    }
    float _2239;
    float _2241;
    float _2243;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2227 = fma(_2023, cbSceneParam._m0[63u].w, fma(_2019, cbSceneParam._m0[63u].z, fma(_2015, cbSceneParam._m0[63u].y, _2011 * cbSceneParam._m0[63u].x)));
        float _2228 = fma(_2023, cbSceneParam._m0[60u].w, fma(_2019, cbSceneParam._m0[60u].z, fma(_2015, cbSceneParam._m0[60u].y, _2011 * cbSceneParam._m0[60u].x))) / _2227;
        float _2229 = fma(_2023, cbSceneParam._m0[61u].w, fma(_2019, cbSceneParam._m0[61u].z, fma(_2015, cbSceneParam._m0[61u].y, _2011 * cbSceneParam._m0[61u].x))) / _2227;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2228 >= cbSceneParam._m0[64u].x) && (_2229 >= cbSceneParam._m0[64u].y)) && (_2228 <= cbSceneParam._m0[64u].z)) && (_2229 <= cbSceneParam._m0[64u].w))
        {
            float _2367 = fma(_2023, cbSceneParam._m0[62u].w, fma(_2019, cbSceneParam._m0[62u].z, fma(_2015, cbSceneParam._m0[62u].y, _2011 * cbSceneParam._m0[62u].x))) / _2227;
            float _2371 = isnan(cbSceneParam._m0[41u].w) ? _2367 : (isnan(_2367) ? cbSceneParam._m0[41u].w : max(_2367, cbSceneParam._m0[41u].w));
            float _2414 = (cbSceneParam._m0[33u].x - sqrt(((_2025 * _2025) + (_2024 * _2024)) + (_2026 * _2026))) * cbSceneParam._m0[33u].y;
            float _4578 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
            float _2421 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2228, cbSceneParam._m0[33u].w + _2229), _2371), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2228, _2229 - cbSceneParam._m0[33u].z), _2371), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2228 - cbSceneParam._m0[33u].z, _2229 - cbSceneParam._m0[33u].w), _2371), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2228 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2229), _2371), 0.0)).x), vec4(0.25)));
            float _2425 = 1.0 - (_2421 * cbSceneParam._m0[34u].x);
            float _2426 = 1.0 - (_2421 * cbSceneParam._m0[34u].y);
            float _2427 = 1.0 - (_2421 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2427) ? _2175 : (isnan(_2175) ? _2427 : min(_2175, _2427));
            frontier_phi_37_36_ladder_1 = isnan(_2426) ? _2174 : (isnan(_2174) ? _2426 : min(_2174, _2426));
            frontier_phi_37_36_ladder_2 = isnan(_2425) ? _2173 : (isnan(_2173) ? _2425 : min(_2173, _2425));
        }
        else
        {
            frontier_phi_37_36_ladder = _2175;
            frontier_phi_37_36_ladder_1 = _2174;
            frontier_phi_37_36_ladder_2 = _2173;
        }
        _2239 = frontier_phi_37_36_ladder_2;
        _2241 = frontier_phi_37_36_ladder_1;
        _2243 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2239 = _2173;
        _2241 = _2174;
        _2243 = _2175;
    }
    uvec4 _2248 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2250 = _2248.x * 14u;
    uint _2251 = _2250 + 13u;
    float _2258 = _917 + (-1.0);
    float _2263 = (cbLight._m0[_2251].x * _2258) + 1.0;
    float _2264 = (cbLight._m0[_2251].y * _2258) + 1.0;
    float _2265 = (cbLight._m0[_2251].z * _2258) + 1.0;
    float _2266 = (cbLight._m0[_2251].w * _2258) + 1.0;
    uint _2267 = _2250 + 5u;
    float _2273 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
    uint _2277 = _2250 + 4u;
    float _2286 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
    uint _2290 = _2250 | 1u;
    float _2301 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_740, _741, _742));
    float _2304 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_740, _741, _742));
    float _4614 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _4625 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2309 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * 0.3183098733425140380859375;
    float _2311 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * 0.3183098733425140380859375;
    float _2318 = ((cbLight._m0[_2267].x * _2273) * _2311) + (((cbLight._m0[_2277].x * _2239) * _2286) * _2309);
    float _2319 = ((_2273 * cbLight._m0[_2267].y) * _2311) + (((cbLight._m0[_2277].y * _2241) * _2286) * _2309);
    float _2320 = ((_2273 * cbLight._m0[_2267].z) * _2311) + (((cbLight._m0[_2277].z * _2243) * _2286) * _2309);
    uvec4 _2324 = floatBitsToUint(cbLight._m0[_2250 + 12u]);
    bool _2326 = _2324.x == 0u;
    float _2428;
    float _2430;
    float _2432;
    if (_2326)
    {
        _2428 = _2318;
        _2430 = _2319;
        _2432 = _2320;
    }
    else
    {
        uint _2436 = _2250 + 6u;
        float _2452 = (dot(vec3(cbLight._m0[_2250 + 2u].xyz), vec3(_740, _741, _742)) * 0.5) + 0.5;
        float _2453 = _2452 * _2452;
        float _4636 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2454 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2455 = isnan(1.0) ? _2265 : (isnan(_2265) ? 1.0 : min(_2265, 1.0));
        _2428 = (((cbLight._m0[_2436].x * 0.3183098733425140380859375) * _2454) * _2455) + _2318;
        _2430 = (((cbLight._m0[_2436].y * 0.3183098733425140380859375) * _2454) * _2455) + _2319;
        _2432 = (((cbLight._m0[_2436].z * 0.3183098733425140380859375) * _2454) * _2455) + _2320;
    }
    bool _2435 = _2324.y == 0u;
    float _2490;
    float _2492;
    float _2494;
    if (_2435)
    {
        _2490 = _2428;
        _2492 = _2430;
        _2494 = _2432;
    }
    else
    {
        uint _2663 = _2250 + 7u;
        float _2679 = (dot(vec3(cbLight._m0[_2250 + 3u].xyz), vec3(_740, _741, _742)) * 0.5) + 0.5;
        float _2680 = _2679 * _2679;
        float _4652 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2681 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2682 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
        _2490 = (((cbLight._m0[_2663].x * 0.3183098733425140380859375) * _2681) * _2682) + _2428;
        _2492 = (((cbLight._m0[_2663].y * 0.3183098733425140380859375) * _2681) * _2682) + _2430;
        _2494 = (((cbLight._m0[_2663].z * 0.3183098733425140380859375) * _2681) * _2682) + _2432;
    }
    uint _2497 = _2250 + 8u;
    float _2510 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2250].w)) * _743) * 0.949999988079071044921875);
    float _2511 = _2510 * _2510;
    float _2512 = cbLight._m0[_2250].x + _819;
    float _2513 = cbLight._m0[_2250].y + _820;
    float _2514 = cbLight._m0[_2250].z + _821;
    float _2518 = inversesqrt(dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514)));
    float _2519 = _2518 * _2512;
    float _2520 = _2518 * _2513;
    float _2521 = _2518 * _2514;
    float _2522 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2250].xyz));
    float _4668 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2525 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _4679 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _2526 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2527 = dot(vec3(_740, _741, _742), vec3(_2519, _2520, _2521));
    float _4690 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2530 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _2531 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_2519, _2520, _2521));
    float _4701 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2535 = _2511 * _2511;
    float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
    float _2547 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
    float _2548 = 0.959999978542327880859375 - _898;
    float _2550 = 0.959999978542327880859375 - _899;
    float _2551 = 0.959999978542327880859375 - _900;
    float _2558 = 1.0 - _2511;
    float _2569 = (0.5 / (((_2526 * ((_2525 * _2558) + _2511)) + 9.9999999392252902907785028219223e-09) + (((_2526 * _2558) + _2511) * _2525))) * _2525;
    float _4712 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2571 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
    uint _2585 = _2250 + 9u;
    float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _743) * 0.949999988079071044921875);
    float _2597 = _2596 * _2596;
    float _2598 = cbLight._m0[_2290].x + _819;
    float _2599 = cbLight._m0[_2290].y + _820;
    float _2600 = cbLight._m0[_2290].z + _821;
    float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
    float _2605 = _2604 * _2598;
    float _2606 = _2604 * _2599;
    float _2607 = _2604 * _2600;
    float _2608 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2290].xyz));
    float _4723 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2611 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2612 = dot(vec3(_740, _741, _742), vec3(_2605, _2606, _2607));
    float _4734 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2615 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _2616 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2605, _2606, _2607));
    float _4745 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2620 = _2597 * _2597;
    float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
    float _2631 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
    float _2638 = 1.0 - _2597;
    float _2648 = (0.5 / (((_2526 * ((_2611 * _2638) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2526 * _2638) + _2597) * _2611))) * _2611;
    float _4756 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2650 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
    float _2660 = (((((_2631 * _2548) + _901) * cbLight._m0[_2585].x) * _2650) * _2273) + ((((cbLight._m0[_2497].x * _2239) * ((_2547 * _2548) + _901)) * _2571) * _2286);
    float _2661 = (((((_2631 * _2550) + _903) * cbLight._m0[_2585].y) * _2650) * _2273) + ((((cbLight._m0[_2497].y * _2241) * ((_2547 * _2550) + _903)) * _2571) * _2286);
    float _2662 = (((((_2631 * _2551) + _904) * cbLight._m0[_2585].z) * _2650) * _2273) + ((((cbLight._m0[_2497].z * _2243) * ((_2547 * _2551) + _904)) * _2571) * _2286);
    float _2718;
    float _2720;
    float _2722;
    if (_2326)
    {
        _2718 = _2660;
        _2720 = _2661;
        _2722 = _2662;
    }
    else
    {
        uint _2724 = _2250 + 2u;
        uint _2728 = _2250 + 10u;
        float _2742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2724].w)) * _743) * 0.949999988079071044921875);
        float _2743 = _2742 * _2742;
        float _2744 = cbLight._m0[_2724].x + _819;
        float _2745 = cbLight._m0[_2724].y + _820;
        float _2746 = cbLight._m0[_2724].z + _821;
        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
        float _2751 = _2750 * _2744;
        float _2752 = _2750 * _2745;
        float _2753 = _2750 * _2746;
        float _2754 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2724].xyz));
        float _4767 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2757 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _2758 = dot(vec3(_740, _741, _742), vec3(_2751, _2752, _2753));
        float _4778 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2761 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2762 = dot(vec3(cbLight._m0[_2724].xyz), vec3(_2751, _2752, _2753));
        float _4789 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2766 = _2743 * _2743;
        float _2770 = ((_2761 * _2761) * (_2766 + (-1.0))) + 1.0;
        float _2777 = exp2(log2(1.0 - (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) * 5.0);
        float _2784 = 1.0 - _2743;
        float _2794 = (0.5 / (((_2526 * ((_2757 * _2784) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2526 * _2784) + _2743) * _2757))) * _2757;
        float _4800 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2796 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2766 / ((_2770 * _2770) * 3.141590118408203125));
        float _2797 = isnan(1.0) ? _2265 : (isnan(_2265) ? 1.0 : min(_2265, 1.0));
        _2718 = (((((_2777 * _2548) + _901) * cbLight._m0[_2728].x) * _2796) * _2797) + _2660;
        _2720 = (((((_2777 * _2550) + _903) * cbLight._m0[_2728].y) * _2796) * _2797) + _2661;
        _2722 = (((((_2777 * _2551) + _904) * cbLight._m0[_2728].z) * _2796) * _2797) + _2662;
    }
    float _2828;
    float _2830;
    float _2832;
    if (_2435)
    {
        _2828 = _2718;
        _2830 = _2720;
        _2832 = _2722;
    }
    else
    {
        uint _2839 = _2250 + 3u;
        uint _2843 = _2250 + 11u;
        float _2857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2839].w)) * _743) * 0.949999988079071044921875);
        float _2858 = _2857 * _2857;
        float _2859 = cbLight._m0[_2839].x + _819;
        float _2860 = cbLight._m0[_2839].y + _820;
        float _2861 = cbLight._m0[_2839].z + _821;
        float _2865 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
        float _2866 = _2865 * _2859;
        float _2867 = _2865 * _2860;
        float _2868 = _2865 * _2861;
        float _2869 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2839].xyz));
        float _4816 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2872 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2873 = dot(vec3(_740, _741, _742), vec3(_2866, _2867, _2868));
        float _4827 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2876 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2877 = dot(vec3(cbLight._m0[_2839].xyz), vec3(_2866, _2867, _2868));
        float _4838 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2881 = _2858 * _2858;
        float _2885 = ((_2876 * _2876) * (_2881 + (-1.0))) + 1.0;
        float _2892 = exp2(log2(1.0 - (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) * 5.0);
        float _2899 = 1.0 - _2858;
        float _2909 = (0.5 / (((_2526 * ((_2872 * _2899) + _2858)) + 9.9999999392252902907785028219223e-09) + (((_2526 * _2899) + _2858) * _2872))) * _2872;
        float _4849 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2911 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2881 / ((_2885 * _2885) * 3.141590118408203125));
        float _2912 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
        _2828 = (((((_2892 * _2548) + _901) * cbLight._m0[_2843].x) * _2911) * _2912) + _2718;
        _2830 = (((((_2892 * _2550) + _903) * cbLight._m0[_2843].y) * _2911) * _2912) + _2720;
        _2832 = (((((_2892 * _2551) + _904) * cbLight._m0[_2843].z) * _2911) * _2912) + _2722;
    }
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    if (_2248.y == 0u)
    {
        uvec4 _2933 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2934 = _2933.x;
        uint _2945 = uint((float(_2933.y) * floor(float(uint(cbSceneParam._m0[85u].y * _840) / _2934))) + floor(float(uint(cbSceneParam._m0[85u].x * _839) / _2934)));
        float _2955 = (log2(_2026 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2956 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        uint _2959 = uint(isnan(14.0) ? _2956 : (isnan(_2956) ? 14.0 : min(_2956, 14.0)));
        uvec4 _2964 = texelFetch(g_lightClusterGridBuffer, int(((_2959 << 2u) + (_2945 << 6u)) >> 2u));
        uint _2965 = _2964.x;
        uint _2966 = _2933.z;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        if (((((1u << ((_2966 >> 4u) & 15u)) + 4294967295u) & _2965) == 0u) || ((_2966 & 240u) == 0u))
        {
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
        }
        else
        {
            float _3046;
            float _3048;
            float _3050;
            float _3052;
            float _3054;
            float _3056;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            uint _3204 = 0u;
            uint _3213;
            bool _3214;
            for (;;)
            {
                _3213 = texelFetch(g_lightClassification, int((((_2959 << 5u) + (_2945 << 9u)) + (_3204 << 2u)) >> 2u)).x;
                _3214 = _3213 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3214)
                {
                    frontier_phi_71_pred = _3203;
                    frontier_phi_71_pred_1 = _3202;
                    frontier_phi_71_pred_2 = _3201;
                    frontier_phi_71_pred_3 = _3200;
                    frontier_phi_71_pred_4 = _3199;
                    frontier_phi_71_pred_5 = _3198;
                }
                else
                {
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    uint _3349;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3201;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3213;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    for (;;)
                    {
                        uint _3353 = uint(findLSB(_3349)) + (_3204 << 5u);
                        uint _3350 = (_3349 + 4294967295u) & _3349;
                        uint _3355 = _3353 * 48u;
                        vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 3u)).x));
                        uint _3375 = (_3353 * 48u) + 4u;
                        vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 3u)).x));
                        uint _3394 = (_3353 * 48u) + 8u;
                        vec3 _3405 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x));
                        float _3409 = _3369.x - _2024;
                        float _3410 = _3369.y - _2025;
                        float _3411 = _3369.z - _2026;
                        float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                        float _3415 = inversesqrt(_3412);
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3419 = dot(vec3(_858, _861, _864), vec3(_3416, _3417, _3418));
                        float _3424 = 1.0 - (_3412 * _3369.w);
                        float _4875 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3425 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3426 = sqrt(_3412) * _3388.w;
                        float _3429 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3419) + _3430;
                        float _3436 = _3426 * _3426;
                        float _3440 = ((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3425) / ((_3436 * 0.699999988079071044921875) + 1.0);
                        float _3444 = (-0.0) - _2024;
                        float _3445 = (-0.0) - _2025;
                        float _3446 = (-0.0) - _2026;
                        float _3450 = inversesqrt(dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446)));
                        float _3451 = _3450 * _3444;
                        float _3452 = _3450 * _3445;
                        float _3453 = _3450 * _3446;
                        float _3460 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                        float _3461 = 1.0 - _933;
                        float _3468 = sqrt(1.0 - ((1.0 - (_3461 * _3461)) * (1.0 - (_3460 * _3460))));
                        float _3469 = _3468 * _3468;
                        float _3470 = _3469 * _3469;
                        float _3471 = _3451 + _3416;
                        float _3472 = _3452 + _3417;
                        float _3473 = _3453 + _3418;
                        float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                        float _3481 = dot(vec3(_858, _861, _864), vec3(_3451, _3452, _3453));
                        float _4891 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3484 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3485 = dot(vec3(_858, _861, _864), vec3(_3477 * _3471, _3477 * _3472, _3477 * _3473));
                        float _4902 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3488 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                        float _3492 = ((_3488 * _3488) * (_3470 + (-1.0))) + 1.0;
                        float _3493 = _3429 * _3469;
                        float _3494 = _3493 * _3493;
                        float _3497 = ((1.0 - _3494) * _3419) + _3494;
                        float _4913 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3498 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                        float _3499 = 1.0 - _3469;
                        float _3509 = (0.5 / (((_3498 * ((_3484 * _3499) + _3469)) + 9.9999999392252902907785028219223e-09) + (((_3498 * _3499) + _3469) * _3484))) * _3498;
                        float _4924 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3520 = (((_3470 * 3.1415927410125732421875) * (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) / ((_3492 * _3492) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125))) * _3425;
                        _3273 = (_3440 * _3388.x) + _3346;
                        _3274 = (_3440 * _3388.y) + _3347;
                        _3275 = (_3440 * _3388.z) + _3348;
                        _3270 = (_3520 * _3405.x) + _3343;
                        _3271 = (_3520 * _3405.y) + _3344;
                        _3272 = (_3520 * _3405.z) + _3345;
                        if (_3350 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3273;
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3350;
                        }
                    }
                    frontier_phi_71_pred = _3275;
                    frontier_phi_71_pred_1 = _3274;
                    frontier_phi_71_pred_2 = _3273;
                    frontier_phi_71_pred_3 = _3272;
                    frontier_phi_71_pred_4 = _3271;
                    frontier_phi_71_pred_5 = _3270;
                }
                _3056 = frontier_phi_71_pred;
                _3054 = frontier_phi_71_pred_1;
                _3052 = frontier_phi_71_pred_2;
                _3050 = frontier_phi_71_pred_3;
                _3048 = frontier_phi_71_pred_4;
                _3046 = frontier_phi_71_pred_5;
                uint _3205 = _3204 + 1u;
                if (_3205 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3198 = _3046;
                    _3199 = _3048;
                    _3200 = _3050;
                    _3201 = _3052;
                    _3202 = _3054;
                    _3203 = _3056;
                    _3204 = _3205;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
        }
        uvec4 _3059 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3060 = _3059.z;
        uint _3062 = (_3060 >> 8u) & 15u;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        if (((4294967295u << _3062) & _2965) == 0u)
        {
            _3166 = _3045;
            _3168 = _3047;
            _3170 = _3049;
            _3172 = _3051;
            _3174 = _3053;
            _3176 = _3055;
        }
        else
        {
            float _3191 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
            float _3192 = _3191 * _2024;
            float _3193 = _3191 * _2025;
            float _3194 = _3191 * _2026;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3062 < ((_3060 >> 12u) & 15u))
            {
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3326 = _3045;
                float _3327 = _3047;
                float _3328 = _3049;
                float _3329 = _3051;
                float _3330 = _3053;
                float _3331 = _3055;
                uint _3332 = _3062;
                uint _3341;
                bool _3342;
                for (;;)
                {
                    _3341 = texelFetch(g_lightClassification, int((((_2959 << 5u) + (_2945 << 9u)) + (_3332 << 2u)) >> 2u)).x;
                    _3342 = _3341 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3342)
                    {
                        frontier_phi_82_pred = _3331;
                        frontier_phi_82_pred_1 = _3330;
                        frontier_phi_82_pred_2 = _3329;
                        frontier_phi_82_pred_3 = _3328;
                        frontier_phi_82_pred_4 = _3327;
                        frontier_phi_82_pred_5 = _3326;
                    }
                    else
                    {
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3547 = _3326;
                        float _3548 = _3327;
                        float _3549 = _3328;
                        float _3550 = _3329;
                        float _3551 = _3330;
                        float _3552 = _3331;
                        uint _3553 = _3341;
                        uint _3554;
                        vec4 _3579;
                        float _3580;
                        vec4 _3595;
                        vec3 _3607;
                        vec4 _3622;
                        vec4 _3638;
                        float _3684;
                        bool _3685;
                        for (;;)
                        {
                            uint _3564 = ((_3332 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3553));
                            _3554 = (_3553 + 4294967295u) & _3553;
                            uint _3566 = _3564 * 40u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            _3580 = _3579.w;
                            uint _3582 = (_3564 * 40u) + 4u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3597 = (_3564 * 40u) + 8u;
                            _3607 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x));
                            uint _3609 = (_3564 * 40u) + 16u;
                            _3622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 3u)).x));
                            uint _3625 = (_3564 * 40u) + 20u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3640 = (_3564 * 40u) + 24u;
                            vec4 _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3659 = (_3564 * 40u) + 28u;
                            vec4 _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            _3684 = fma(_2026, _3672.z, fma(_2025, _3672.y, _3672.x * _2024)) + _3672.w;
                            _3685 = !((fma(_2026, _3653.z, fma(_2025, _3653.y, _3653.x * _2024)) + _3653.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3685)
                            {
                                float _3712 = _3579.x - _2024;
                                float _3713 = _3579.y - _2025;
                                float _3714 = _3579.z - _2026;
                                float _3715 = dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714));
                                float _3718 = inversesqrt(_3715);
                                float _3719 = _3718 * _3712;
                                float _3720 = _3718 * _3713;
                                float _3721 = _3718 * _3714;
                                float _3725 = 1.0 - (_3715 / (_3580 * _3580));
                                float _4935 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3730 = sqrt(_3715) * _3595.w;
                                float _3732 = 1.39999997615814208984375 / (_3730 + 1.39999997615814208984375);
                                float _3733 = _3732 * _3732;
                                float _3736 = ((1.0 - _3733) * dot(vec3(_3719, _3720, _3721), vec3(_858, _861, _864))) + _3733;
                                float _3739 = _3730 * _3730;
                                float _3743 = (fma(_2026, _3622.z, fma(_2025, _3622.y, _3622.x * _2024)) + _3622.w) / _3684;
                                float _3744 = (fma(_2026, _3638.z, fma(_2025, _3638.y, _3638.x * _2024)) + _3638.w) / _3684;
                                float _3748 = 1.0 - dot(vec2(_3743, _3744), vec2(_3743, _3744));
                                float _4951 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3750 = _3749 * (((isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0))) * _3726) / ((_3739 * 0.699999988079071044921875) + 1.0));
                                float _3762 = exp2(log2(1.0 / ((_3739 * 3.5) + 5.0)) * 0.25);
                                float _3763 = 1.0 - _933;
                                float _3770 = sqrt(1.0 - ((1.0 - (_3763 * _3763)) * (1.0 - (_3762 * _3762))));
                                float _3771 = _3770 * _3770;
                                float _3772 = _3771 * _3771;
                                float _3773 = _3719 - _3192;
                                float _3774 = _3720 - _3193;
                                float _3775 = _3721 - _3194;
                                float _3779 = inversesqrt(dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775)));
                                float _3783 = dot(vec3(_858, _861, _864), vec3((-0.0) - _3192, (-0.0) - _3193, (-0.0) - _3194));
                                float _4962 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3786 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                                float _3787 = dot(vec3(_858, _861, _864), vec3(_3779 * _3773, _3779 * _3774, _3779 * _3775));
                                float _4973 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3790 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                                float _3794 = ((_3790 * _3790) * (_3772 + (-1.0))) + 1.0;
                                float _3795 = _3732 * _3771;
                                float _3796 = _3795 * _3795;
                                float _3802 = ((1.0 - _3796) * dot(vec3(_858, _861, _864), vec3(_3719, _3720, _3721))) + _3796;
                                float _4984 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3804 = 1.0 - _3771;
                                float _3814 = (0.5 / (((_3803 * ((_3786 * _3804) + _3771)) + 9.9999999392252902907785028219223e-09) + (((_3803 * _3804) + _3771) * _3786))) * _3803;
                                float _4995 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3824 = (_3749 * _3726) * (((_3772 * 3.1415927410125732421875) * (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0)))) / ((_3794 * _3794) * ((_3739 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3750 * _3595.z;
                                frontier_phi_88_pred_1 = _3750 * _3595.y;
                                frontier_phi_88_pred_2 = _3750 * _3595.x;
                                frontier_phi_88_pred_3 = _3824 * _3607.z;
                                frontier_phi_88_pred_4 = _3824 * _3607.y;
                                frontier_phi_88_pred_5 = _3824 * _3607.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3833 = frontier_phi_88_pred;
                            _3832 = frontier_phi_88_pred_1;
                            _3831 = frontier_phi_88_pred_2;
                            _3830 = frontier_phi_88_pred_3;
                            _3829 = frontier_phi_88_pred_4;
                            _3828 = frontier_phi_88_pred_5;
                            _3537 = _3831 + _3550;
                            _3538 = _3832 + _3551;
                            _3539 = _3833 + _3552;
                            _3534 = _3828 + _3547;
                            _3535 = _3829 + _3548;
                            _3536 = _3830 + _3549;
                            if (_3554 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3554;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3539;
                        frontier_phi_82_pred_1 = _3538;
                        frontier_phi_82_pred_2 = _3537;
                        frontier_phi_82_pred_3 = _3536;
                        frontier_phi_82_pred_4 = _3535;
                        frontier_phi_82_pred_5 = _3534;
                    }
                    _3177 = frontier_phi_82_pred;
                    _3175 = frontier_phi_82_pred_1;
                    _3173 = frontier_phi_82_pred_2;
                    _3171 = frontier_phi_82_pred_3;
                    _3169 = frontier_phi_82_pred_4;
                    _3167 = frontier_phi_82_pred_5;
                    uint _3333 = _3332 + 1u;
                    if (_3333 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3326 = _3167;
                        _3327 = _3169;
                        _3328 = _3171;
                        _3329 = _3173;
                        _3330 = _3175;
                        _3331 = _3177;
                        _3332 = _3333;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3173;
                frontier_phi_63_64_ladder_1 = _3177;
                frontier_phi_63_64_ladder_2 = _3175;
                frontier_phi_63_64_ladder_3 = _3171;
                frontier_phi_63_64_ladder_4 = _3169;
                frontier_phi_63_64_ladder_5 = _3167;
            }
            else
            {
                frontier_phi_63_64_ladder = _3051;
                frontier_phi_63_64_ladder_1 = _3055;
                frontier_phi_63_64_ladder_2 = _3053;
                frontier_phi_63_64_ladder_3 = _3049;
                frontier_phi_63_64_ladder_4 = _3047;
                frontier_phi_63_64_ladder_5 = _3045;
            }
            _3166 = frontier_phi_63_64_ladder_5;
            _3168 = frontier_phi_63_64_ladder_4;
            _3170 = frontier_phi_63_64_ladder_3;
            _3172 = frontier_phi_63_64_ladder;
            _3174 = frontier_phi_63_64_ladder_2;
            _3176 = frontier_phi_63_64_ladder_1;
        }
        float _3181 = isnan(1.0) ? _917 : (isnan(_917) ? 1.0 : min(_917, 1.0));
        _2978 = (_3181 * _3172) + _2490;
        _2980 = (_3181 * _3174) + _2492;
        _2982 = (_3181 * _3176) + _2494;
        _2984 = ((_3166 * _901) * _3181) + _2828;
        _2986 = ((_3168 * _903) * _3181) + _2830;
        _2988 = ((_3170 * _904) * _3181) + _2832;
    }
    else
    {
        _2978 = _2490;
        _2980 = _2492;
        _2982 = _2494;
        _2984 = _2828;
        _2986 = _2830;
        _2988 = _2832;
    }
    float _5011 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _5022 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _5033 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _3005 = ((isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0))) * (_2978 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _917))) + ((_2984 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    float _3006 = ((isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0))) * (_2980 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _917))) + ((_2986 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    float _3007 = ((isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0))) * (_2982 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _917))) + ((_2988 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    uint _3008 = _257 + 6u;
    float _3016 = _839 / cbSceneParam._m0[86u].x;
    float _3017 = _840 / cbSceneParam._m0[86u].y;
    vec4 _3031 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3016, _3017, (log2((isnan(cbSceneParam._m0[77u].w) ? _762 : (isnan(_762) ? cbSceneParam._m0[77u].w : min(_762, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3033 = _3031.x;
    float _3034 = _3031.y;
    float _3035 = _3031.z;
    float _3036 = _3031.w;
    float _3108;
    float _3110;
    float _3112;
    float _3114;
    if (_762 > cbSceneParam._m0[78u].w)
    {
        float _3070 = isnan(_762) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _762 : min(cbSceneParam._m0[80u].w, _762));
        float _3071 = _3070 / _762;
        float _3082 = _3071 * _812;
        float _3083 = _813 * _3071;
        float _3084 = (-0.0) - _3083;
        float _3086 = _3071 * _814;
        float _3088 = (cbSceneParam._m0[77u].w * _3084) / _3070;
        float _3089 = _3088 + cbSceneParam._m0[79u].w;
        float _3090 = cbSceneParam._m0[79u].w - _3083;
        float _3096 = sqrt(((_3082 * _3082) + (_3083 * _3083)) + (_3086 * _3086));
        float _3099 = (1.0 - (cbSceneParam._m0[77u].w / _3070)) * _3096;
        float _3104 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3106 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3283;
        if (abs((_3084 - _3088) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3283 = ((((_3089 > 0.0) ? exp2(_3104 * _3089) : (2.0 - exp2(_3106 * _3089))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3099;
        }
        else
        {
            float _3227 = 1.0 / cbSceneParam._m0[80u].x;
            float _3228 = isnan(_3090) ? _3089 : (isnan(_3089) ? _3090 : max(_3089, _3090));
            float _3229 = isnan(_3090) ? _3089 : (isnan(_3089) ? _3090 : min(_3089, _3090));
            float _3238 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : min(_3228, 0.0));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            _3283 = ((abs(_3096 / _3084) * cbSceneParam._m0[80u].y) * ((((_3238 - _3239) * 2.0) - ((exp2(_3104 * (isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0)))) - exp2(_3104 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))))) * _3227)) - ((exp2(_3106 * _3238) - exp2(_3106 * _3239)) * _3227))) + (_3099 * cbSceneParam._m0[80u].z);
        }
        vec4 _3285 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3016, _3017, 1.0), 0.0);
        float _3294 = exp2((_3283 * (-1.44269502162933349609375)) * (1.0 - _3285.w));
        float _3295 = log2(_3294);
        float _3311 = log2(_3036);
        _3108 = (exp2(_3311 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].x)) * _3285.x) / cbSceneParam._m0[78u].x)) + _3033;
        _3110 = (exp2(_3311 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].y)) * _3285.y) / cbSceneParam._m0[78u].y)) + _3034;
        _3112 = (exp2(_3311 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].z)) * _3285.z) / cbSceneParam._m0[78u].z)) + _3035;
        _3114 = _3294 * _3036;
    }
    else
    {
        _3108 = _3033;
        _3110 = _3034;
        _3112 = _3035;
        _3114 = _3036;
    }
    bool _3321;
    vec4 _3124;
    vec4 _3146;
    float _3148;
    float _3152;
    float _3153;
    float _3154;
    float _3155;
    bool _3165;
    for (;;)
    {
        _3124 = cbMatDynParam._m0[0u];
        float _3126 = roundEven(_3124.y);
        bool _3127 = _3126 == 3.0;
        float _3128 = log2(_3114);
        float _3135 = exp2(_3128 * cbSceneParam._m0[78u].x) * _3005;
        float _3136 = exp2(_3128 * cbSceneParam._m0[78u].y) * _3006;
        float _3137 = exp2(_3128 * cbSceneParam._m0[78u].z) * _3007;
        float _3144 = _828 + (-0.5);
        _3146 = cbMtdParam._m0[1u];
        _3148 = _3146.y * _3144;
        float _3151 = (_3126 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3152 = _3151 * (_3127 ? _3135 : (_3135 + (cbSceneParam._m0[72u].w * _3108)));
        _3153 = _3151 * (_3127 ? _3136 : (_3136 + (cbSceneParam._m0[72u].w * _3110)));
        _3154 = _3151 * (_3127 ? _3137 : (_3137 + (cbSceneParam._m0[72u].w * _3112)));
        _3155 = _3144 * 0.999000012874603271484375;
        _3165 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3165)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3155) < 0.5)
            {
                _3321 = true;
                break;
            }
        }
        uint _3262 = _877 + uint(_3124.w);
        if ((cbInstanceData._m0[_3262].w < 1.0) && ((cbInstanceData._m0[_3262].w + _3155) < 0.5))
        {
            _3321 = true;
            break;
        }
        if ((_3148 + 1.0) < _3146.x)
        {
            _3321 = true;
            break;
        }
        _3321 = false;
        break;
    }
    float _3525;
    if (_3321)
    {
        discard_state = true;
        _3525 = 0.0;
    }
    else
    {
        _3525 = cbInstanceData._m0[_3008].w;
    }
    SV_Target.x = _3152;
    SV_Target.y = _3153;
    SV_Target.z = _3154;
    SV_Target.w = _3525;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3008].w;
    discard_exit();
}


