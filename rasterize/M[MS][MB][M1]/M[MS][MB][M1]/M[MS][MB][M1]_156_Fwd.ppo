#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1269;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].y) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3594 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _387 = (_380 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _388 = (_380 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _389 = (_380 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _408 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _474 = _472.x;
    float _475 = _472.y;
    float _476 = _472.z;
    float _485 = ((_455.z - _476) * _380) + _476;
    float _488 = ((((_455.x - _474) * _380) + _474) * 2.0) + (-1.0);
    float _489 = ((((_455.y - _475) * _380) + _475) * 2.0) + (-1.0);
    float _490 = dot(vec2(_488, _489), vec2(_488, _489));
    float _3605 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _495 = sqrt(1.0 - (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))));
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _527 = (_488 + ((((_428.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_515.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _528 = (_489 + ((((_428.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_515.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _531 = fma(_495, _230, fma(_528, _237, _527 * _223));
    float _534 = fma(_495, _231, fma(_528, _238, _527 * _224));
    float _537 = fma(_495, _232, fma(_528, _239, _527 * _225));
    float _541 = inversesqrt(dot(vec3(_531, _534, _537), vec3(_531, _534, _537)));
    vec4 _568 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _570 = _568.x;
    float _571 = 1.0 - _570;
    float _575 = ((_570 - _571) * cbMtdParam._m0[24u].z) + _571;
    float _577 = (cbMtdParam._m0[19u].x + dot(vec4(_541 * _531, _541 * _534, _541 * _537, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_575 * cbMtdParam._m0[21u].z);
    float _3616 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _593 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_575 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3627 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _598 = ((_578 * ((_408.x * cbMtdParam._m0[18u].x) - _387)) * _594) + _387;
    float _599 = ((_578 * ((_408.y * cbMtdParam._m0[18u].y) - _388)) * _594) + _388;
    float _600 = ((_578 * ((_408.z * cbMtdParam._m0[18u].z) - _389)) * _594) + _389;
    vec4 _612 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _628 = _626.x;
    float _646 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _628) * _380) + _628;
    float _650 = ((_612.x - _646) * cbMtdParam._m0[19u].z) + _646;
    float _653 = _650 - ((_594 * _578) * _650);
    float _658 = (((_428.z - _485) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _485;
    float _662 = ((_515.z - _658) * cbMtdParam._m0[19u].w) + _658;
    vec4 _675 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _682 = (_675.x * 2.0) + (-1.0);
    float _683 = (_675.y * 2.0) + (-1.0);
    float _684 = dot(vec2(_682, _683), vec2(_682, _683));
    float _3638 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _693 = (((_675.z - _662) * _578) * _594) + _662;
    float _708 = (((cbMtdParam._m0[21u].x * _527) + ((_682 - _527) * _578)) * _594) + _527;
    float _709 = (((cbMtdParam._m0[21u].x * _528) + ((_683 - _528) * _578)) * _594) + _528;
    float _710 = (((sqrt(1.0 - (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) - _495) * _578) * _594) + _495;
    float _715 = cbMtdParam._m0[22u].x + _515.w;
    float _718 = fma(_710, _230, fma(_709, _237, _708 * _223));
    float _721 = fma(_710, _231, fma(_709, _238, _708 * _224));
    float _724 = fma(_710, _232, fma(_709, _239, _708 * _225));
    float _728 = inversesqrt(dot(vec3(_718, _721, _724), vec3(_718, _721, _724)));
    float _729 = _728 * _718;
    float _730 = _728 * _721;
    float _731 = _728 * _724;
    float _3649 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _732 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _3671 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3682 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3693 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3704 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _737 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _751 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _802 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _792);
    float _803 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _792);
    float _804 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _792);
    float _808 = inversesqrt(dot(vec3(_802, _803, _804), vec3(_802, _803, _804)));
    float _809 = _802 * _808;
    float _810 = _803 * _808;
    float _811 = _804 * _808;
    float _817 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _818 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _836 = fma(_731, cbSceneParam._m0[5u].z, fma(_730, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _729));
    float _839 = fma(_731, cbSceneParam._m0[6u].z, fma(_730, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _729));
    float _842 = fma(_731, cbSceneParam._m0[7u].z, fma(_730, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _729));
    uint _856 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _862 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) * cbInstanceData._m0[_856].x;
    float _863 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) * cbInstanceData._m0[_856].y;
    float _864 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * cbInstanceData._m0[_856].z;
    float _3715 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _3737 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _868 = 1.0 - _737;
    float _869 = _865 * _868;
    float _870 = _866 * _868;
    float _871 = _867 * _868;
    float _876 = (_865 + (-0.039999999105930328369140625)) * _737;
    float _877 = (_866 + (-0.039999999105930328369140625)) * _737;
    float _878 = (_867 + (-0.039999999105930328369140625)) * _737;
    float _879 = _876 + 0.039999999105930328369140625;
    float _881 = _877 + 0.039999999105930328369140625;
    float _882 = _878 + 0.039999999105930328369140625;
    vec4 _891 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _817, cbSceneParam._m0[86u].y * _818));
    float _895 = ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * TEXCOORD_5.w) * _891.x;
    float _896 = dot(vec3(_729, _730, _731), vec3(_809, _810, _811));
    float _899 = _896 * 2.0;
    float _903 = (_899 * _729) - _809;
    float _904 = (_899 * _730) - _810;
    float _905 = (_899 * _731) - _811;
    float _909 = abs(dot(vec3(_809, _810, _811), vec3(_729, _730, _731)));
    float _3748 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _911 = sqrt(_732);
    float _924 = exp2((_911 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_911 * 3.0));
    float _930 = (1.0 - _924) * ((_911 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _931 = _924 * _911;
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1268;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _993 = fma(_967, cbModelParam._m0[26u].z, fma(_963, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _959));
        float _997 = fma(_967, cbModelParam._m0[27u].z, fma(_963, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _959));
        float _1001 = fma(_967, cbModelParam._m0[28u].z, fma(_963, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _959));
        float _1026 = _959 + _729;
        float _1027 = _963 + _730;
        float _1028 = _967 + _731;
        float _1038 = fma(_1028, cbModelParam._m0[26u].z, fma(_1027, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1026)) - _993;
        float _1039 = fma(_1028, cbModelParam._m0[27u].z, fma(_1027, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1026)) - _997;
        float _1040 = fma(_1028, cbModelParam._m0[28u].z, fma(_1027, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1026)) - _1001;
        float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
        float _1057 = ((_1044 * _1038) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_993 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1044 * _1039) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_997 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1044 * _1040) / cbModelParam._m0[34u].z) + ((((((_1001 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        float _1096 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1062.x + (-0.5));
        float _1098 = _1096 * (_1062.y + (-0.5));
        float _1099 = _1096 * (_1062.z + (-0.5));
        float _1106 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1069.x + (-0.5));
        float _1108 = _1106 * (_1069.y + (-0.5));
        float _1109 = _1106 * (_1069.z + (-0.5));
        float _1116 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1076.x + (-0.5));
        float _1118 = _1116 * (_1076.y + (-0.5));
        float _1119 = _1116 * (_1076.z + (-0.5));
        float _1126 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1083.x + (-0.5));
        float _1128 = _1126 * (_1083.y + (-0.5));
        float _1129 = _1126 * (_1083.z + (-0.5));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = _1097 * 0.5;
        float _1134 = _1107 * 0.5;
        float _1135 = _1117 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1150 = (dot(vec3(_729, _730, _731), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1160 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3796 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1162 + 1.0))) + _1167) * _1130;
        float _1177 = _1098 * 0.5;
        float _1178 = _1108 * 0.5;
        float _1179 = _1118 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_729, _730, _731), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3829 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1204 + 1.0))) + _1209) * _1131;
        float _1219 = _1099 * 0.5;
        float _1220 = _1109 * 0.5;
        float _1221 = _1119 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_729, _730, _731), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3862 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1246 + 1.0))) + _1251) * _1132;
        _1268 = _1099;
        _1270 = _1098;
        _1271 = _1097;
        _1272 = _1109;
        _1273 = _1108;
        _1274 = _1107;
        _1275 = _1119;
        _1276 = _1118;
        _1277 = _1117;
        _1278 = _1132;
        _1279 = _1131;
        _1280 = _1130;
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
    }
    else
    {
        _1268 = _1269;
        _1270 = _1269;
        _1271 = _1269;
        _1272 = _1269;
        _1273 = _1269;
        _1274 = _1269;
        _1275 = _1269;
        _1276 = _1269;
        _1277 = _1269;
        _1278 = _1269;
        _1279 = _1269;
        _1280 = _1269;
        _1281 = 0.0;
        _1282 = 0.0;
        _1283 = 0.0;
    }
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1308 = fma(_967, cbModelParam._m0[30u].z, fma(_963, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _959));
        float _1312 = fma(_967, cbModelParam._m0[31u].z, fma(_963, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _959));
        float _1316 = fma(_967, cbModelParam._m0[32u].z, fma(_963, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _959));
        float _1339 = _959 + _729;
        float _1340 = _963 + _730;
        float _1341 = _967 + _731;
        float _1351 = fma(_1341, cbModelParam._m0[30u].z, fma(_1340, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1339)) - _1308;
        float _1352 = fma(_1341, cbModelParam._m0[31u].z, fma(_1340, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1339)) - _1312;
        float _1353 = fma(_1341, cbModelParam._m0[32u].z, fma(_1340, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1339)) - _1316;
        float _1357 = inversesqrt(dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353)));
        float _1370 = ((_1357 * _1351) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1308 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1357 * _1352) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1312 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1357 * _1353) / cbModelParam._m0[35u].z) + ((((((_1316 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        float _1407 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1374.x + (-0.5));
        float _1409 = _1407 * (_1374.y + (-0.5));
        float _1410 = _1407 * (_1374.z + (-0.5));
        float _1417 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1381.x + (-0.5));
        float _1419 = _1417 * (_1381.y + (-0.5));
        float _1420 = _1417 * (_1381.z + (-0.5));
        float _1427 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1388.x + (-0.5));
        float _1429 = _1427 * (_1388.y + (-0.5));
        float _1430 = _1427 * (_1388.z + (-0.5));
        float _1437 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1395.x + (-0.5));
        float _1439 = _1437 * (_1395.y + (-0.5));
        float _1440 = _1437 * (_1395.z + (-0.5));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = _1408 * 0.5;
        float _1445 = _1418 * 0.5;
        float _1446 = _1428 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_729, _730, _731), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _3925 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1471 + 1.0))) + _1476) * _1441;
        float _1486 = _1409 * 0.5;
        float _1487 = _1419 * 0.5;
        float _1488 = _1429 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_729, _730, _731), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _3958 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1513 + 1.0))) + _1518) * _1442;
        float _1528 = _1410 * 0.5;
        float _1529 = _1420 * 0.5;
        float _1530 = _1430 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_729, _730, _731), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _3991 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1555 + 1.0))) + _1560) * _1443;
        _1577 = _1410;
        _1578 = _1409;
        _1579 = _1408;
        _1580 = _1420;
        _1581 = _1419;
        _1582 = _1418;
        _1583 = _1430;
        _1584 = _1429;
        _1585 = _1428;
        _1586 = _1443;
        _1587 = _1442;
        _1588 = _1441;
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
    }
    else
    {
        _1577 = _1269;
        _1578 = _1269;
        _1579 = _1269;
        _1580 = _1269;
        _1581 = _1269;
        _1582 = _1269;
        _1583 = _1269;
        _1584 = _1269;
        _1585 = _1269;
        _1586 = _1269;
        _1587 = _1269;
        _1588 = _1269;
        _1589 = 0.0;
        _1590 = 0.0;
        _1591 = 0.0;
    }
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1281)) + _1281;
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1282)) + _1282;
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1283)) + _1283;
    float _1624 = fma(_1603, cbSceneParam._m0[89u].z, fma(_1602, cbSceneParam._m0[89u].y, _1601 * cbSceneParam._m0[89u].x));
    float _1627 = fma(_1603, cbSceneParam._m0[90u].z, fma(_1602, cbSceneParam._m0[90u].y, _1601 * cbSceneParam._m0[90u].x));
    float _1630 = fma(_1603, cbSceneParam._m0[91u].z, fma(_1602, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1601));
    float _1645 = _903 * 0.5;
    float _1646 = _904 * 0.5;
    float _1647 = _905 * 0.5;
    float _1648 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1651 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1654 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1688;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1661 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1268, _1272, _1275, _1278));
        float _1665 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1270, _1273, _1276, _1279));
        float _1669 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1271, _1274, _1277, _1280));
        float _1676 = dot(vec4(cbModelParam._m0[39u]), vec4(_1645, _1646, _1647, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1676) ? 0.0 : (isnan(0.0) ? _1676 : max(0.0, _1676))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1699;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1690 = dot(vec4(cbModelParam._m0[40u]), vec4(_1645, _1646, _1647, 1.0));
        _1699 = dot(vec3(isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1699 = 1.0;
    }
    float _1703 = (_1699 * cbModelParam._m0[1u].x) + (_1688 * (1.0 - cbModelParam._m0[1u].x));
    float _1713 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _732);
    float _1714 = isnan(_1713) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1713 : min(cbModelParam._m0[25u].z, _1713));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1761 = fma(_967, cbModelParam._m0[13u].z, fma(_963, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959)) + cbModelParam._m0[13u].w;
        float _1765 = fma(_967, cbModelParam._m0[14u].z, fma(_963, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959)) + cbModelParam._m0[14u].w;
        float _1769 = fma(_967, cbModelParam._m0[15u].z, fma(_963, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959)) + cbModelParam._m0[15u].w;
        float _1772 = fma(_905, cbModelParam._m0[13u].z, fma(_904, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _903));
        float _1775 = fma(_905, cbModelParam._m0[14u].z, fma(_904, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _903));
        float _1778 = fma(_905, cbModelParam._m0[15u].z, fma(_904, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _903));
        float _1806;
        if (_1772 > 0.0)
        {
            _1806 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1806 = frontier_phi_14_12_ladder;
        }
        float _2008;
        if (_1775 > 0.0)
        {
            _2008 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2008 = frontier_phi_23_19_ladder;
        }
        float _2262;
        if (_1778 > 0.0)
        {
            _2262 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2262 = frontier_phi_35_30_ladder;
        }
        float _2264 = isnan(_2008) ? _1806 : (isnan(_1806) ? _2008 : min(_1806, _2008));
        float _2265 = isnan(_2262) ? _2264 : (isnan(_2264) ? _2262 : min(_2264, _2262));
        float _2269 = (_2265 * _1772) + _1761;
        float _2270 = (_2265 * _1775) + _1765;
        float _2271 = (_2265 * _1778) + _1769;
        float _2272 = _2265 * 9.9999997473787516355514526367188e-05;
        float _2274 = (-1.0) - _2272;
        float _2276 = _2272 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2271 > _2276) || ((_2271 < _2274) || ((_2270 > _2276) || ((_2270 < _2274) || ((_2269 < _2274) || (_2269 > _2276))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2399 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2271, cbModelParam._m0[9u].z, fma(_2270, cbModelParam._m0[9u].y, _2269 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2271, cbModelParam._m0[10u].z, fma(_2270, cbModelParam._m0[10u].y, _2269 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2271, cbModelParam._m0[11u].z, fma(_2270, cbModelParam._m0[11u].y, _2269 * cbModelParam._m0[11u].x))), _1714);
            frontier_phi_13_35_ladder = _2399.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2399.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2399.x * cbModelParam._m0[1u].y;
        }
        _1794 = frontier_phi_13_35_ladder_2;
        _1796 = frontier_phi_13_35_ladder_1;
        _1798 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_903, _904, _905), _1714);
        _1794 = _1782.x * cbModelParam._m0[1u].y;
        _1796 = _1782.y * cbModelParam._m0[1u].y;
        _1798 = _1782.z * cbModelParam._m0[1u].y;
    }
    float _1802 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _732);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1802 : min(cbModelParam._m0[25u].w, _1802));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1856 = fma(_967, cbModelParam._m0[21u].z, fma(_963, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959)) + cbModelParam._m0[21u].w;
        float _1860 = fma(_967, cbModelParam._m0[22u].z, fma(_963, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959)) + cbModelParam._m0[22u].w;
        float _1864 = fma(_967, cbModelParam._m0[23u].z, fma(_963, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959)) + cbModelParam._m0[23u].w;
        float _1867 = fma(_905, cbModelParam._m0[21u].z, fma(_904, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _903));
        float _1870 = fma(_905, cbModelParam._m0[22u].z, fma(_904, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _903));
        float _1873 = fma(_905, cbModelParam._m0[23u].z, fma(_904, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _903));
        float _2013;
        if (_1867 > 0.0)
        {
            _2013 = abs((1.0 - _1856) / _1867);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1856 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2013 = frontier_phi_25_21_ladder;
        }
        float _2289;
        if (_1870 > 0.0)
        {
            _2289 = abs((1.0 - _1860) / _1870);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1860 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2289 = frontier_phi_37_32_ladder;
        }
        float _2502;
        if (_1873 > 0.0)
        {
            _2502 = abs((1.0 - _1864) / _1873);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1864 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2502 = frontier_phi_46_43_ladder;
        }
        float _2504 = isnan(_2289) ? _2013 : (isnan(_2013) ? _2289 : min(_2013, _2289));
        float _2505 = isnan(_2502) ? _2504 : (isnan(_2504) ? _2502 : min(_2504, _2502));
        float _2509 = (_2505 * _1867) + _1856;
        float _2510 = (_2505 * _1870) + _1860;
        float _2511 = (_2505 * _1873) + _1864;
        float _2512 = _2505 * 9.9999997473787516355514526367188e-05;
        float _2513 = (-1.0) - _2512;
        float _2515 = _2512 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2511 > _2515) || ((_2511 < _2513) || ((_2510 > _2515) || ((_2510 < _2513) || ((_2509 < _2513) || (_2509 > _2515))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2710 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2511, cbModelParam._m0[17u].z, fma(_2510, cbModelParam._m0[17u].y, _2509 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2511, cbModelParam._m0[18u].z, fma(_2510, cbModelParam._m0[18u].y, _2509 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2511, cbModelParam._m0[19u].z, fma(_2510, cbModelParam._m0[19u].y, _2509 * cbModelParam._m0[19u].x))), _1803);
            frontier_phi_22_46_ladder = _2710.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2710.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2710.x * cbModelParam._m0[1u].z;
        }
        _1892 = frontier_phi_22_46_ladder_2;
        _1894 = frontier_phi_22_46_ladder_1;
        _1896 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_903, _904, _905), _1803);
        _1892 = _1876.x * cbModelParam._m0[1u].z;
        _1894 = _1876.y * cbModelParam._m0[1u].z;
        _1896 = _1876.z * cbModelParam._m0[1u].z;
    }
    float _1909 = (((_930 * _879) + _931) * _895) * ((cbModelParam._m0[1u].w * (_1892 - _1794)) + _1794);
    float _1911 = (((_930 * _881) + _931) * _895) * ((cbModelParam._m0[1u].w * (_1894 - _1796)) + _1796);
    float _1913 = (((_930 * _882) + _931) * _895) * ((cbModelParam._m0[1u].w * (_1896 - _1798)) + _1798);
    float _1916 = fma(_1913, cbSceneParam._m0[89u].z, fma(_1911, cbSceneParam._m0[89u].y, _1909 * cbSceneParam._m0[89u].x));
    float _1919 = fma(_1913, cbSceneParam._m0[90u].z, fma(_1911, cbSceneParam._m0[90u].y, _1909 * cbSceneParam._m0[90u].x));
    float _1922 = fma(_1913, cbSceneParam._m0[91u].z, fma(_1911, cbSceneParam._m0[91u].y, _1909 * cbSceneParam._m0[91u].x));
    uvec4 _1932 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1934 = _1932.x * 14u;
    uint _1935 = _1934 + 13u;
    float _1942 = _895 + (-1.0);
    float _1947 = (cbLight._m0[_1935].x * _1942) + 1.0;
    float _1948 = (cbLight._m0[_1935].y * _1942) + 1.0;
    float _1949 = (cbLight._m0[_1935].z * _1942) + 1.0;
    float _1950 = (cbLight._m0[_1935].w * _1942) + 1.0;
    uint _1951 = _1934 + 5u;
    float _1957 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1961 = _1934 + 4u;
    float _1967 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
    uint _1971 = _1934 | 1u;
    float _1982 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_729, _730, _731));
    float _1985 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_729, _730, _731));
    float _4127 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _4138 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1990 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 0.3183098733425140380859375;
    float _1992 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * 0.3183098733425140380859375;
    float _1999 = ((cbLight._m0[_1951].x * _1957) * _1992) + ((cbLight._m0[_1961].x * _1967) * _1990);
    float _2000 = ((_1957 * cbLight._m0[_1951].y) * _1992) + ((_1967 * cbLight._m0[_1961].y) * _1990);
    float _2001 = ((_1957 * cbLight._m0[_1951].z) * _1992) + ((_1967 * cbLight._m0[_1961].z) * _1990);
    uvec4 _2005 = floatBitsToUint(cbLight._m0[_1934 + 12u]);
    bool _2007 = _2005.x == 0u;
    float _2018;
    float _2020;
    float _2022;
    if (_2007)
    {
        _2018 = _1999;
        _2020 = _2000;
        _2022 = _2001;
    }
    else
    {
        uint _2026 = _1934 + 6u;
        float _2042 = (dot(vec3(cbLight._m0[_1934 + 2u].xyz), vec3(_729, _730, _731)) * 0.5) + 0.5;
        float _2043 = _2042 * _2042;
        float _4149 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2044 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2045 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2018 = (((cbLight._m0[_2026].x * 0.3183098733425140380859375) * _2044) * _2045) + _1999;
        _2020 = (((cbLight._m0[_2026].y * 0.3183098733425140380859375) * _2044) * _2045) + _2000;
        _2022 = (((cbLight._m0[_2026].z * 0.3183098733425140380859375) * _2044) * _2045) + _2001;
    }
    bool _2025 = _2005.y == 0u;
    float _2063;
    float _2065;
    float _2067;
    if (_2025)
    {
        _2063 = _2018;
        _2065 = _2020;
        _2067 = _2022;
    }
    else
    {
        uint _2233 = _1934 + 7u;
        float _2249 = (dot(vec3(cbLight._m0[_1934 + 3u].xyz), vec3(_729, _730, _731)) * 0.5) + 0.5;
        float _2250 = _2249 * _2249;
        float _4165 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2251 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2252 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2063 = (((cbLight._m0[_2233].x * 0.3183098733425140380859375) * _2251) * _2252) + _2018;
        _2065 = (((cbLight._m0[_2233].y * 0.3183098733425140380859375) * _2251) * _2252) + _2020;
        _2067 = (((cbLight._m0[_2233].z * 0.3183098733425140380859375) * _2251) * _2252) + _2022;
    }
    uint _2070 = _1934 + 8u;
    float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _732) * 0.949999988079071044921875);
    float _2084 = _2083 * _2083;
    float _2085 = cbLight._m0[_1934].x + _809;
    float _2086 = cbLight._m0[_1934].y + _810;
    float _2087 = cbLight._m0[_1934].z + _811;
    float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
    float _2092 = _2091 * _2085;
    float _2093 = _2091 * _2086;
    float _2094 = _2091 * _2087;
    float _2095 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_1934].xyz));
    float _4181 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _2099 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2100 = dot(vec3(_729, _730, _731), vec3(_2092, _2093, _2094));
    float _4203 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2104 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_2092, _2093, _2094));
    float _4214 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2108 = _2084 * _2084;
    float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
    float _2120 = exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0);
    float _2121 = 0.959999978542327880859375 - _876;
    float _2123 = 0.959999978542327880859375 - _877;
    float _2124 = 0.959999978542327880859375 - _878;
    float _2131 = 1.0 - _2084;
    float _2142 = (0.5 / (((_2099 * ((_2098 * _2131) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2131) + _2084) * _2098))) * _2098;
    float _4225 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2144 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
    uint _2155 = _1934 + 9u;
    float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _732) * 0.949999988079071044921875);
    float _2167 = _2166 * _2166;
    float _2168 = cbLight._m0[_1971].x + _809;
    float _2169 = cbLight._m0[_1971].y + _810;
    float _2170 = cbLight._m0[_1971].z + _811;
    float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
    float _2175 = _2174 * _2168;
    float _2176 = _2174 * _2169;
    float _2177 = _2174 * _2170;
    float _2178 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_1971].xyz));
    float _4236 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2182 = dot(vec3(_729, _730, _731), vec3(_2175, _2176, _2177));
    float _4247 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_2175, _2176, _2177));
    float _4258 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2167 * _2167;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2201 = exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0);
    float _2208 = 1.0 - _2167;
    float _2218 = (0.5 / (((_2099 * ((_2181 * _2208) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2208) + _2167) * _2181))) * _2181;
    float _4269 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    float _2230 = (((((_2201 * _2121) + _879) * cbLight._m0[_2155].x) * _2220) * _1957) + (((((_2120 * _2121) + _879) * cbLight._m0[_2070].x) * _2144) * _1967);
    float _2231 = (((((_2201 * _2123) + _881) * cbLight._m0[_2155].y) * _2220) * _1957) + (((((_2120 * _2123) + _881) * cbLight._m0[_2070].y) * _2144) * _1967);
    float _2232 = (((((_2201 * _2124) + _882) * cbLight._m0[_2155].z) * _2220) * _1957) + (((((_2120 * _2124) + _882) * cbLight._m0[_2070].z) * _2144) * _1967);
    float _2294;
    float _2296;
    float _2298;
    if (_2007)
    {
        _2294 = _2230;
        _2296 = _2231;
        _2298 = _2232;
    }
    else
    {
        uint _2300 = _1934 + 2u;
        uint _2304 = _1934 + 10u;
        float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _732) * 0.949999988079071044921875);
        float _2319 = _2318 * _2318;
        float _2320 = cbLight._m0[_2300].x + _809;
        float _2321 = cbLight._m0[_2300].y + _810;
        float _2322 = cbLight._m0[_2300].z + _811;
        float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
        float _2327 = _2326 * _2320;
        float _2328 = _2326 * _2321;
        float _2329 = _2326 * _2322;
        float _2330 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2300].xyz));
        float _4280 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2334 = dot(vec3(_729, _730, _731), vec3(_2327, _2328, _2329));
        float _4291 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2338 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2327, _2328, _2329));
        float _4302 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2342 = _2319 * _2319;
        float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
        float _2353 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
        float _2360 = 1.0 - _2319;
        float _2370 = (0.5 / (((_2099 * ((_2333 * _2360) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2360) + _2319) * _2333))) * _2333;
        float _4313 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2372 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
        float _2373 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2294 = (((((_2353 * _2121) + _879) * cbLight._m0[_2304].x) * _2372) * _2373) + _2230;
        _2296 = (((((_2353 * _2123) + _881) * cbLight._m0[_2304].y) * _2372) * _2373) + _2231;
        _2298 = (((((_2353 * _2124) + _882) * cbLight._m0[_2304].z) * _2372) * _2373) + _2232;
    }
    float _2408;
    float _2410;
    float _2412;
    if (_2025)
    {
        _2408 = _2294;
        _2410 = _2296;
        _2412 = _2298;
    }
    else
    {
        uint _2419 = _1934 + 3u;
        uint _2423 = _1934 + 11u;
        float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _732) * 0.949999988079071044921875);
        float _2438 = _2437 * _2437;
        float _2439 = cbLight._m0[_2419].x + _809;
        float _2440 = cbLight._m0[_2419].y + _810;
        float _2441 = cbLight._m0[_2419].z + _811;
        float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
        float _2446 = _2445 * _2439;
        float _2447 = _2445 * _2440;
        float _2448 = _2445 * _2441;
        float _2449 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2419].xyz));
        float _4329 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2453 = dot(vec3(_729, _730, _731), vec3(_2446, _2447, _2448));
        float _4340 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2457 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2446, _2447, _2448));
        float _4351 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2461 = _2438 * _2438;
        float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
        float _2472 = exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0);
        float _2479 = 1.0 - _2438;
        float _2489 = (0.5 / (((_2099 * ((_2452 * _2479) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2479) + _2438) * _2452))) * _2452;
        float _4362 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2491 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
        float _2492 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2408 = (((((_2472 * _2121) + _879) * cbLight._m0[_2423].x) * _2491) * _2492) + _2294;
        _2410 = (((((_2472 * _2123) + _881) * cbLight._m0[_2423].y) * _2491) * _2492) + _2296;
        _2412 = (((((_2472 * _2124) + _882) * cbLight._m0[_2423].z) * _2491) * _2492) + _2298;
    }
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    if (_1932.y == 0u)
    {
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2567;
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2567;
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2567;
        uvec4 _2582 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2583 = _2582.x;
        uint _2594 = uint((float(_2582.y) * floor(float(uint(cbSceneParam._m0[85u].y * _818) / _2583))) + floor(float(uint(cbSceneParam._m0[85u].x * _817) / _2583)));
        float _2604 = (log2(_2570 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2605 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        uint _2608 = uint(isnan(14.0) ? _2605 : (isnan(_2605) ? 14.0 : min(_2605, 14.0)));
        uvec4 _2613 = texelFetch(g_lightClusterGridBuffer, int(((_2608 << 2u) + (_2594 << 6u)) >> 2u));
        uint _2614 = _2613.x;
        uint _2615 = _2582.z;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        if (((((1u << ((_2615 >> 4u) & 15u)) + 4294967295u) & _2614) == 0u) || ((_2615 & 240u) == 0u))
        {
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
            _2725 = 0.0;
        }
        else
        {
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2726;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            uint _2866 = 0u;
            uint _2875;
            bool _2876;
            for (;;)
            {
                _2875 = texelFetch(g_lightClassification, int((((_2608 << 5u) + (_2594 << 9u)) + (_2866 << 2u)) >> 2u)).x;
                _2876 = _2875 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2876)
                {
                    frontier_phi_61_pred = _2860;
                    frontier_phi_61_pred_1 = _2865;
                    frontier_phi_61_pred_2 = _2864;
                    frontier_phi_61_pred_3 = _2863;
                    frontier_phi_61_pred_4 = _2862;
                    frontier_phi_61_pred_5 = _2861;
                }
                else
                {
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    uint _2990;
                    _2984 = _2860;
                    _2985 = _2861;
                    _2986 = _2862;
                    _2987 = _2863;
                    _2988 = _2864;
                    _2989 = _2865;
                    _2990 = _2875;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    for (;;)
                    {
                        uint _2994 = uint(findLSB(_2990)) + (_2866 << 5u);
                        uint _2991 = (_2990 + 4294967295u) & _2990;
                        uint _2996 = _2994 * 48u;
                        vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2996)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 3u)).x));
                        uint _3016 = (_2994 * 48u) + 4u;
                        vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 3u)).x));
                        uint _3035 = (_2994 * 48u) + 8u;
                        vec3 _3046 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3035)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 2u)).x));
                        float _3050 = _3010.x - _2568;
                        float _3051 = _3010.y - _2569;
                        float _3052 = _3010.z - _2570;
                        float _3053 = dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052));
                        float _3056 = inversesqrt(_3053);
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3060 = dot(vec3(_836, _839, _842), vec3(_3057, _3058, _3059));
                        float _3065 = 1.0 - (_3053 * _3010.w);
                        float _4388 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3066 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3067 = sqrt(_3053) * _3029.w;
                        float _3070 = 1.39999997615814208984375 / (_3067 + 1.39999997615814208984375);
                        float _3071 = _3070 * _3070;
                        float _3074 = ((1.0 - _3071) * _3060) + _3071;
                        float _3077 = _3067 * _3067;
                        float _3081 = ((isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))) * _3066) / ((_3077 * 0.699999988079071044921875) + 1.0);
                        float _3085 = (-0.0) - _2568;
                        float _3086 = (-0.0) - _2569;
                        float _3087 = (-0.0) - _2570;
                        float _3091 = inversesqrt(dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087)));
                        float _3092 = _3091 * _3085;
                        float _3093 = _3091 * _3086;
                        float _3094 = _3091 * _3087;
                        float _3102 = exp2(log2(1.0 / ((_3077 * 3.5) + 5.0)) * 0.25);
                        float _3103 = 1.0 - _911;
                        float _3110 = sqrt(1.0 - ((1.0 - (_3103 * _3103)) * (1.0 - (_3102 * _3102))));
                        float _3111 = _3110 * _3110;
                        float _3112 = _3111 * _3111;
                        float _3113 = _3092 + _3057;
                        float _3114 = _3093 + _3058;
                        float _3115 = _3094 + _3059;
                        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                        float _3123 = dot(vec3(_836, _839, _842), vec3(_3092, _3093, _3094));
                        float _4404 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3126 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3127 = dot(vec3(_836, _839, _842), vec3(_3119 * _3113, _3119 * _3114, _3119 * _3115));
                        float _4415 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3130 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3134 = ((_3130 * _3130) * (_3112 + (-1.0))) + 1.0;
                        float _3135 = _3070 * _3111;
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3060) + _3136;
                        float _4426 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3141 = 1.0 - _3111;
                        float _3151 = (0.5 / (((_3140 * ((_3126 * _3141) + _3111)) + 9.9999999392252902907785028219223e-09) + (((_3140 * _3141) + _3111) * _3126))) * _3140;
                        float _4437 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3162 = (((_3112 * 3.1415927410125732421875) * (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) / ((_3134 * _3134) * ((_3077 * 2.1991131305694580078125) + 3.141590118408203125))) * _3066;
                        _2919 = (_3081 * _3029.x) + _2987;
                        _2920 = (_3081 * _3029.y) + _2988;
                        _2921 = (_3081 * _3029.z) + _2989;
                        _2916 = (_3162 * _3046.x) + _2984;
                        _2917 = (_3162 * _3046.y) + _2985;
                        _2918 = (_3162 * _3046.z) + _2986;
                        if (_2991 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2984 = _2916;
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2921;
                            _2990 = _2991;
                        }
                    }
                    frontier_phi_61_pred = _2916;
                    frontier_phi_61_pred_1 = _2921;
                    frontier_phi_61_pred_2 = _2920;
                    frontier_phi_61_pred_3 = _2919;
                    frontier_phi_61_pred_4 = _2918;
                    frontier_phi_61_pred_5 = _2917;
                }
                _2716 = frontier_phi_61_pred;
                _2726 = frontier_phi_61_pred_1;
                _2724 = frontier_phi_61_pred_2;
                _2722 = frontier_phi_61_pred_3;
                _2720 = frontier_phi_61_pred_4;
                _2718 = frontier_phi_61_pred_5;
                uint _2867 = _2866 + 1u;
                if (_2867 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2860 = _2716;
                    _2861 = _2718;
                    _2862 = _2720;
                    _2863 = _2722;
                    _2864 = _2724;
                    _2865 = _2726;
                    _2866 = _2867;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
            _2725 = _2726;
        }
        uvec4 _2729 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2730 = _2729.z;
        uint _2732 = (_2730 >> 8u) & 15u;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        if (((4294967295u << _2732) & _2614) == 0u)
        {
            _2828 = _2715;
            _2830 = _2717;
            _2832 = _2719;
            _2834 = _2721;
            _2836 = _2723;
            _2838 = _2725;
        }
        else
        {
            float _2853 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
            float _2854 = _2853 * _2568;
            float _2855 = _2853 * _2569;
            float _2856 = _2853 * _2570;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2732 < ((_2730 >> 12u) & 15u))
            {
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2967 = _2715;
                float _2968 = _2717;
                float _2969 = _2719;
                float _2970 = _2721;
                float _2971 = _2723;
                float _2972 = _2725;
                uint _2973 = _2732;
                uint _2982;
                bool _2983;
                for (;;)
                {
                    _2982 = texelFetch(g_lightClassification, int((((_2608 << 5u) + (_2594 << 9u)) + (_2973 << 2u)) >> 2u)).x;
                    _2983 = _2982 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2983)
                    {
                        frontier_phi_67_pred = _2970;
                        frontier_phi_67_pred_1 = _2971;
                        frontier_phi_67_pred_2 = _2972;
                        frontier_phi_67_pred_3 = _2969;
                        frontier_phi_67_pred_4 = _2968;
                        frontier_phi_67_pred_5 = _2967;
                    }
                    else
                    {
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3180 = _2967;
                        float _3181 = _2968;
                        float _3182 = _2969;
                        float _3183 = _2970;
                        float _3184 = _2971;
                        float _3185 = _2972;
                        uint _3186 = _2982;
                        uint _3187;
                        vec4 _3212;
                        float _3213;
                        vec4 _3228;
                        vec3 _3240;
                        vec4 _3255;
                        vec4 _3270;
                        float _3316;
                        bool _3317;
                        for (;;)
                        {
                            uint _3197 = ((_2973 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3186));
                            _3187 = (_3186 + 4294967295u) & _3186;
                            uint _3199 = _3197 * 40u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            _3213 = _3212.w;
                            uint _3215 = (_3197 * 40u) + 4u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3230 = (_3197 * 40u) + 8u;
                            _3240 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x));
                            uint _3242 = (_3197 * 40u) + 16u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3257 = (_3197 * 40u) + 20u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3272 = (_3197 * 40u) + 24u;
                            vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3291 = (_3197 * 40u) + 28u;
                            vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            _3316 = fma(_2570, _3304.z, fma(_2569, _3304.y, _3304.x * _2568)) + _3304.w;
                            _3317 = !((fma(_2570, _3285.z, fma(_2569, _3285.y, _3285.x * _2568)) + _3285.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3317)
                            {
                                float _3344 = _3212.x - _2568;
                                float _3345 = _3212.y - _2569;
                                float _3346 = _3212.z - _2570;
                                float _3347 = dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346));
                                float _3350 = inversesqrt(_3347);
                                float _3351 = _3350 * _3344;
                                float _3352 = _3350 * _3345;
                                float _3353 = _3350 * _3346;
                                float _3357 = 1.0 - (_3347 / (_3213 * _3213));
                                float _4448 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3362 = sqrt(_3347) * _3228.w;
                                float _3364 = 1.39999997615814208984375 / (_3362 + 1.39999997615814208984375);
                                float _3365 = _3364 * _3364;
                                float _3368 = ((1.0 - _3365) * dot(vec3(_3351, _3352, _3353), vec3(_836, _839, _842))) + _3365;
                                float _3371 = _3362 * _3362;
                                float _3375 = (fma(_2570, _3255.z, fma(_2569, _3255.y, _3255.x * _2568)) + _3255.w) / _3316;
                                float _3376 = (fma(_2570, _3270.z, fma(_2569, _3270.y, _3270.x * _2568)) + _3270.w) / _3316;
                                float _3380 = 1.0 - dot(vec2(_3375, _3376), vec2(_3375, _3376));
                                float _4464 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3381 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3382 = _3381 * (((isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0))) * _3358) / ((_3371 * 0.699999988079071044921875) + 1.0));
                                float _3394 = exp2(log2(1.0 / ((_3371 * 3.5) + 5.0)) * 0.25);
                                float _3395 = 1.0 - _911;
                                float _3402 = sqrt(1.0 - ((1.0 - (_3395 * _3395)) * (1.0 - (_3394 * _3394))));
                                float _3403 = _3402 * _3402;
                                float _3404 = _3403 * _3403;
                                float _3405 = _3351 - _2854;
                                float _3406 = _3352 - _2855;
                                float _3407 = _3353 - _2856;
                                float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                                float _3415 = dot(vec3(_836, _839, _842), vec3((-0.0) - _2854, (-0.0) - _2855, (-0.0) - _2856));
                                float _4475 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3418 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3419 = dot(vec3(_836, _839, _842), vec3(_3411 * _3405, _3411 * _3406, _3411 * _3407));
                                float _4486 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3422 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3426 = ((_3422 * _3422) * (_3404 + (-1.0))) + 1.0;
                                float _3427 = _3364 * _3403;
                                float _3428 = _3427 * _3427;
                                float _3434 = ((1.0 - _3428) * dot(vec3(_836, _839, _842), vec3(_3351, _3352, _3353))) + _3428;
                                float _4497 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3435 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3436 = 1.0 - _3403;
                                float _3446 = (0.5 / (((_3435 * ((_3418 * _3436) + _3403)) + 9.9999999392252902907785028219223e-09) + (((_3435 * _3436) + _3403) * _3418))) * _3435;
                                float _4508 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3456 = (_3381 * _3358) * (((_3404 * 3.1415927410125732421875) * (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) / ((_3426 * _3426) * ((_3371 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3456 * _3240.x;
                                frontier_phi_73_pred_1 = _3456 * _3240.y;
                                frontier_phi_73_pred_2 = _3382 * _3228.z;
                                frontier_phi_73_pred_3 = _3382 * _3228.y;
                                frontier_phi_73_pred_4 = _3382 * _3228.x;
                                frontier_phi_73_pred_5 = _3456 * _3240.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3460 = frontier_phi_73_pred;
                            _3461 = frontier_phi_73_pred_1;
                            _3465 = frontier_phi_73_pred_2;
                            _3464 = frontier_phi_73_pred_3;
                            _3463 = frontier_phi_73_pred_4;
                            _3462 = frontier_phi_73_pred_5;
                            _3170 = _3463 + _3183;
                            _3171 = _3464 + _3184;
                            _3172 = _3465 + _3185;
                            _3167 = _3460 + _3180;
                            _3168 = _3461 + _3181;
                            _3169 = _3462 + _3182;
                            if (_3187 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3187;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3170;
                        frontier_phi_67_pred_1 = _3171;
                        frontier_phi_67_pred_2 = _3172;
                        frontier_phi_67_pred_3 = _3169;
                        frontier_phi_67_pred_4 = _3168;
                        frontier_phi_67_pred_5 = _3167;
                    }
                    _2835 = frontier_phi_67_pred;
                    _2837 = frontier_phi_67_pred_1;
                    _2839 = frontier_phi_67_pred_2;
                    _2833 = frontier_phi_67_pred_3;
                    _2831 = frontier_phi_67_pred_4;
                    _2829 = frontier_phi_67_pred_5;
                    uint _2974 = _2973 + 1u;
                    if (_2974 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2967 = _2829;
                        _2968 = _2831;
                        _2969 = _2833;
                        _2970 = _2835;
                        _2971 = _2837;
                        _2972 = _2839;
                        _2973 = _2974;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2837;
                frontier_phi_55_56_ladder_1 = _2839;
                frontier_phi_55_56_ladder_2 = _2835;
                frontier_phi_55_56_ladder_3 = _2833;
                frontier_phi_55_56_ladder_4 = _2831;
                frontier_phi_55_56_ladder_5 = _2829;
            }
            else
            {
                frontier_phi_55_56_ladder = _2723;
                frontier_phi_55_56_ladder_1 = _2725;
                frontier_phi_55_56_ladder_2 = _2721;
                frontier_phi_55_56_ladder_3 = _2719;
                frontier_phi_55_56_ladder_4 = _2717;
                frontier_phi_55_56_ladder_5 = _2715;
            }
            _2828 = frontier_phi_55_56_ladder_5;
            _2830 = frontier_phi_55_56_ladder_4;
            _2832 = frontier_phi_55_56_ladder_3;
            _2834 = frontier_phi_55_56_ladder_2;
            _2836 = frontier_phi_55_56_ladder;
            _2838 = frontier_phi_55_56_ladder_1;
        }
        float _2843 = isnan(1.0) ? _895 : (isnan(_895) ? 1.0 : min(_895, 1.0));
        _2627 = (_2843 * _2834) + _2063;
        _2629 = (_2843 * _2836) + _2065;
        _2631 = (_2843 * _2838) + _2067;
        _2633 = ((_2828 * _879) * _2843) + _2408;
        _2635 = ((_2830 * _881) * _2843) + _2410;
        _2637 = ((_2832 * _882) * _2843) + _2412;
    }
    else
    {
        _2627 = _2063;
        _2629 = _2065;
        _2631 = _2067;
        _2633 = _2408;
        _2635 = _2410;
        _2637 = _2412;
    }
    float _4524 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4535 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4546 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    uint _2657 = _242 + 6u;
    float _2665 = _817 / cbSceneParam._m0[86u].x;
    float _2666 = _818 / cbSceneParam._m0[86u].y;
    vec4 _2680 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2665, _2666, (log2((isnan(cbSceneParam._m0[77u].w) ? _751 : (isnan(_751) ? cbSceneParam._m0[77u].w : min(_751, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2682 = _2680.x;
    float _2683 = _2680.y;
    float _2684 = _2680.z;
    float _2685 = _2680.w;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    if (_751 > cbSceneParam._m0[78u].w)
    {
        float _2740 = isnan(_751) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _751 : min(cbSceneParam._m0[80u].w, _751));
        float _2741 = _2740 / _751;
        float _2752 = _2741 * _802;
        float _2753 = _803 * _2741;
        float _2754 = (-0.0) - _2753;
        float _2756 = _2741 * _804;
        float _2758 = (cbSceneParam._m0[77u].w * _2754) / _2740;
        float _2759 = _2758 + cbSceneParam._m0[79u].w;
        float _2760 = cbSceneParam._m0[79u].w - _2753;
        float _2766 = sqrt(((_2752 * _2752) + (_2753 * _2753)) + (_2756 * _2756));
        float _2769 = (1.0 - (cbSceneParam._m0[77u].w / _2740)) * _2766;
        float _2774 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2776 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2929;
        if (abs((_2754 - _2758) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2929 = ((((_2759 > 0.0) ? exp2(_2774 * _2759) : (2.0 - exp2(_2776 * _2759))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2769;
        }
        else
        {
            float _2889 = 1.0 / cbSceneParam._m0[80u].x;
            float _2890 = isnan(_2760) ? _2759 : (isnan(_2759) ? _2760 : max(_2759, _2760));
            float _2891 = isnan(_2760) ? _2759 : (isnan(_2759) ? _2760 : min(_2759, _2760));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            _2929 = ((abs(_2766 / _2754) * cbSceneParam._m0[80u].y) * ((((_2900 - _2901) * 2.0) - ((exp2(_2774 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0)))) - exp2(_2774 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))))) * _2889)) - ((exp2(_2776 * _2900) - exp2(_2776 * _2901)) * _2889))) + (_2769 * cbSceneParam._m0[80u].z);
        }
        vec4 _2931 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2665, _2666, 1.0), 0.0);
        float _2940 = exp2((_2929 * (-1.44269502162933349609375)) * (1.0 - _2931.w));
        float _2941 = log2(_2940);
        float _2957 = log2(_2685);
        _2778 = (exp2(_2957 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].x)) * _2931.x) / cbSceneParam._m0[78u].x)) + _2682;
        _2780 = (exp2(_2957 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].y)) * _2931.y) / cbSceneParam._m0[78u].y)) + _2683;
        _2782 = (exp2(_2957 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].z)) * _2931.z) / cbSceneParam._m0[78u].z)) + _2684;
        _2784 = _2940 * _2685;
    }
    else
    {
        _2778 = _2682;
        _2780 = _2683;
        _2782 = _2684;
        _2784 = _2685;
    }
    float _2796 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2797 = _2796 == 3.0;
    float _2798 = log2(_2784);
    float _2805 = exp2(_2798 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2627 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _895))) + ((_2633 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1703)) * cbPerFrame._m0[3u].x));
    float _2806 = exp2(_2798 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2629 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _895))) + ((_2635 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1703)) * cbPerFrame._m0[3u].x));
    float _2807 = exp2(_2798 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2631 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _895))) + ((_2637 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1703)) * cbPerFrame._m0[3u].x));
    float _2816 = (_2796 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2816 * (_2797 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2778)));
    SV_Target.y = _2816 * (_2797 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2780)));
    SV_Target.z = _2816 * (_2797 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2782)));
    SV_Target.w = cbInstanceData._m0[_2657].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2657].w;
}


