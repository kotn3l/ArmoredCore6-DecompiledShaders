#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1510;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4119 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4130 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4141 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].y) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4152 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _450 = (_443 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _451 = (_443 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _452 = (_443 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[24u].y) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4163 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _523 = (_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450;
    float _524 = (_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451;
    float _525 = (_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452;
    float _529 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _523;
    float _532 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _524;
    float _535 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _525;
    float _542 = ((_523 - _529) * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) + _529;
    float _543 = ((_524 - _532) * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) + _532;
    float _544 = ((_525 - _535) * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) + _535;
    vec4 _561 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _603 = _601.x;
    float _604 = _601.y;
    float _605 = _601.z;
    float _612 = ((_584.x - _603) * _443) + _603;
    float _613 = ((_584.y - _604) * _443) + _604;
    float _614 = ((_584.z - _605) * _443) + _605;
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _639 = ((_626.z - _614) * _516) + _614;
    float _642 = ((((_626.x - _612) * _516) + _612) * 2.0) + (-1.0);
    float _643 = ((((_626.y - _613) * _516) + _613) * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _4174 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _649 = sqrt(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))));
    vec4 _663 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _688 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _690 = _688.x;
    float _691 = 1.0 - _690;
    float _697 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _700 = ((isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : min(_697, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _709 = (_700 - ((((((_690 - _691) * cbMtdParam._m0[24u].z) + _691) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _700))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4195 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _710 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _717 = (_710 * (cbMtdParam._m0[17u].x - _542)) + _542;
    float _718 = (_710 * (cbMtdParam._m0[17u].y - _543)) + _543;
    float _719 = (_710 * (cbMtdParam._m0[17u].z - _544)) + _544;
    vec4 _731 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _733 = _731.x;
    float _734 = 1.0 - _733;
    float _759 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_733 - _734) * cbMtdParam._m0[24u].w) + _734) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4206 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _760 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _768 = ((((cbMtdParam._m0[10u].x - _717) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _760) + _717;
    float _769 = ((((cbMtdParam._m0[10u].y - _718) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _760) + _718;
    float _770 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _719)) * _760) + _719;
    vec4 _796 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _798 = _796.x;
    float _816 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _798) * _443) + _798;
    float _833 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _816) * _516) + _816;
    float _837 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _833) * cbMtdParam._m0[19u].z) + _833;
    float _839 = _837 - (_837 * _710);
    float _841 = _839 - (_839 * _760);
    float _846 = (((_561.z - _639) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _639;
    float _850 = ((_663.z - _846) * cbMtdParam._m0[19u].w) + _846;
    vec4 _864 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _871 = (_864.x * 2.0) + (-1.0);
    float _872 = (_864.y * 2.0) + (-1.0);
    float _873 = dot(vec2(_871, _872), vec2(_871, _872));
    float _4217 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _881 = (_710 * (_864.z - _850)) + _850;
    float _884 = ((cbMtdParam._m0[23u].y - _881) * _760) + _881;
    vec4 _905 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _911 = (_905.x * 2.0) + (-1.0);
    float _912 = (_905.y * 2.0) + (-1.0);
    float _913 = dot(vec2(_911, _912), vec2(_911, _912));
    float _4228 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _927 = (_642 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_561.x * 2.0) + (-1.0)))) + (((_663.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _928 = (_643 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_561.y * 2.0) + (-1.0)))) + (((_663.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _940 = (((_871 - _927) + (cbMtdParam._m0[21u].x * _927)) * _710) + _927;
    float _941 = (((_872 - _928) + (cbMtdParam._m0[21u].x * _928)) * _710) + _928;
    float _942 = (_710 * (sqrt(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) - _649)) + _649;
    float _953 = (((_911 - _940) + (_940 * cbMtdParam._m0[22u].z)) * _760) + _940;
    float _954 = (((_912 - _941) + (_941 * cbMtdParam._m0[22u].z)) * _760) + _941;
    float _955 = ((sqrt(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) - _942) * _760) + _942;
    float _957 = cbMtdParam._m0[22u].x + _663.w;
    float _960 = fma(_955, _259 * NORMAL.x, fma(_954, _266 * TANGENT.x, (_252 * _244) * _953));
    float _963 = fma(_955, _259 * NORMAL.y, fma(_954, _266 * TANGENT.y, (_252 * _245) * _953));
    float _966 = fma(_955, _259 * NORMAL.z, fma(_954, _266 * TANGENT.z, (_252 * _246) * _953));
    float _970 = inversesqrt(dot(vec3(_960, _963, _966), vec3(_960, _963, _966)));
    float _971 = _970 * _960;
    float _972 = _970 * _963;
    float _973 = _970 * _966;
    float _4239 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _974 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _4250 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4261 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4272 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4283 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4294 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _979 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _993 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1043 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1033);
    float _1044 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1033);
    float _1045 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1033);
    float _1049 = inversesqrt(dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045)));
    float _1050 = _1043 * _1049;
    float _1051 = _1044 * _1049;
    float _1052 = _1045 * _1049;
    float _1058 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1059 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1077 = fma(_973, cbSceneParam._m0[5u].z, fma(_972, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _971));
    float _1080 = fma(_973, cbSceneParam._m0[6u].z, fma(_972, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _971));
    float _1083 = fma(_973, cbSceneParam._m0[7u].z, fma(_972, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _971));
    uint _1097 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1103 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * cbInstanceData._m0[_1097].x;
    float _1104 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * cbInstanceData._m0[_1097].y;
    float _1105 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * cbInstanceData._m0[_1097].z;
    float _4305 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _4316 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1107 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _4327 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1108 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _1109 = 1.0 - _979;
    float _1110 = _1106 * _1109;
    float _1111 = _1107 * _1109;
    float _1112 = _1108 * _1109;
    float _1117 = (_1106 + (-0.039999999105930328369140625)) * _979;
    float _1118 = (_1107 + (-0.039999999105930328369140625)) * _979;
    float _1119 = (_1108 + (-0.039999999105930328369140625)) * _979;
    float _1120 = _1117 + 0.039999999105930328369140625;
    float _1122 = _1118 + 0.039999999105930328369140625;
    float _1123 = _1119 + 0.039999999105930328369140625;
    vec4 _1132 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1058, cbSceneParam._m0[86u].y * _1059));
    float _1136 = ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * TEXCOORD_5.w) * _1132.x;
    float _1137 = dot(vec3(_971, _972, _973), vec3(_1050, _1051, _1052));
    float _1140 = _1137 * 2.0;
    float _1144 = (_1140 * _971) - _1050;
    float _1145 = (_1140 * _972) - _1051;
    float _1146 = (_1140 * _973) - _1052;
    float _1150 = abs(dot(vec3(_1050, _1051, _1052), vec3(_971, _972, _973)));
    float _4338 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _1152 = sqrt(_974);
    float _1165 = exp2((_1152 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1152 * 3.0));
    float _1171 = (1.0 - _1165) * ((_1152 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1172 = _1165 * _1152;
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1204 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1208 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1509;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1234 = fma(_1208, cbModelParam._m0[26u].z, fma(_1204, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1200));
        float _1238 = fma(_1208, cbModelParam._m0[27u].z, fma(_1204, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1200));
        float _1242 = fma(_1208, cbModelParam._m0[28u].z, fma(_1204, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1200));
        float _1267 = _1200 + _971;
        float _1268 = _1204 + _972;
        float _1269 = _1208 + _973;
        float _1279 = fma(_1269, cbModelParam._m0[26u].z, fma(_1268, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1267)) - _1234;
        float _1280 = fma(_1269, cbModelParam._m0[27u].z, fma(_1268, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1267)) - _1238;
        float _1281 = fma(_1269, cbModelParam._m0[28u].z, fma(_1268, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1267)) - _1242;
        float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
        float _1298 = ((_1285 * _1279) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1234 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1285 * _1280) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1238 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1285 * _1281) / cbModelParam._m0[34u].z) + ((((((_1242 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1337 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1303.x + (-0.5));
        float _1339 = _1337 * (_1303.y + (-0.5));
        float _1340 = _1337 * (_1303.z + (-0.5));
        float _1347 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1310.x + (-0.5));
        float _1349 = _1347 * (_1310.y + (-0.5));
        float _1350 = _1347 * (_1310.z + (-0.5));
        float _1357 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1317.x + (-0.5));
        float _1359 = _1357 * (_1317.y + (-0.5));
        float _1360 = _1357 * (_1317.z + (-0.5));
        float _1367 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1324.x + (-0.5));
        float _1369 = _1367 * (_1324.y + (-0.5));
        float _1370 = _1367 * (_1324.z + (-0.5));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = _1338 * 0.5;
        float _1375 = _1348 * 0.5;
        float _1376 = _1358 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1391 = (dot(vec3(_971, _972, _973), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1401 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4386 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1403 + 1.0))) + _1408) * _1371;
        float _1418 = _1339 * 0.5;
        float _1419 = _1349 * 0.5;
        float _1420 = _1359 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_971, _972, _973), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4419 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1445 + 1.0))) + _1450) * _1372;
        float _1460 = _1340 * 0.5;
        float _1461 = _1350 * 0.5;
        float _1462 = _1360 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_971, _972, _973), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4452 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1487 + 1.0))) + _1492) * _1373;
        _1509 = _1340;
        _1511 = _1339;
        _1512 = _1338;
        _1513 = _1350;
        _1514 = _1349;
        _1515 = _1348;
        _1516 = _1360;
        _1517 = _1359;
        _1518 = _1358;
        _1519 = _1373;
        _1520 = _1372;
        _1521 = _1371;
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1524 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
    }
    else
    {
        _1509 = _1510;
        _1511 = _1510;
        _1512 = _1510;
        _1513 = _1510;
        _1514 = _1510;
        _1515 = _1510;
        _1516 = _1510;
        _1517 = _1510;
        _1518 = _1510;
        _1519 = _1510;
        _1520 = _1510;
        _1521 = _1510;
        _1522 = 0.0;
        _1523 = 0.0;
        _1524 = 0.0;
    }
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1548 = fma(_1208, cbModelParam._m0[30u].z, fma(_1204, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1200));
        float _1552 = fma(_1208, cbModelParam._m0[31u].z, fma(_1204, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1200));
        float _1556 = fma(_1208, cbModelParam._m0[32u].z, fma(_1204, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1200));
        float _1579 = _1200 + _971;
        float _1580 = _1204 + _972;
        float _1581 = _1208 + _973;
        float _1591 = fma(_1581, cbModelParam._m0[30u].z, fma(_1580, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1579)) - _1548;
        float _1592 = fma(_1581, cbModelParam._m0[31u].z, fma(_1580, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1579)) - _1552;
        float _1593 = fma(_1581, cbModelParam._m0[32u].z, fma(_1580, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1579)) - _1556;
        float _1597 = inversesqrt(dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593)));
        float _1610 = ((_1597 * _1591) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1548 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1611 = ((_1597 * _1592) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1552 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1597 * _1593) / cbModelParam._m0[35u].z) + ((((((_1556 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        float _1647 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1614.x + (-0.5));
        float _1649 = _1647 * (_1614.y + (-0.5));
        float _1650 = _1647 * (_1614.z + (-0.5));
        float _1657 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1621.x + (-0.5));
        float _1659 = _1657 * (_1621.y + (-0.5));
        float _1660 = _1657 * (_1621.z + (-0.5));
        float _1667 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1628.x + (-0.5));
        float _1669 = _1667 * (_1628.y + (-0.5));
        float _1670 = _1667 * (_1628.z + (-0.5));
        float _1677 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1678 = _1677 * (_1635.x + (-0.5));
        float _1679 = _1677 * (_1635.y + (-0.5));
        float _1680 = _1677 * (_1635.z + (-0.5));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = _1648 * 0.5;
        float _1685 = _1658 * 0.5;
        float _1686 = _1668 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_971, _972, _973), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4493 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4504 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4515 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_1711 + 1.0))) + _1716) * _1681;
        float _1726 = _1649 * 0.5;
        float _1727 = _1659 * 0.5;
        float _1728 = _1669 * 0.5;
        float _1729 = dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728));
        float _1734 = (_1729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1729);
        float _1742 = (dot(vec3(_971, _972, _973), vec3(_1734 * _1726, _1734 * _1727, _1734 * _1728)) + 1.0) * 0.5;
        float _4526 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4537 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _1753 = _1752 * 2.0;
        float _1757 = (1.0 - _1752) / (_1752 + 1.0);
        float _4548 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _1767 = ((((1.0 - _1758) * (_1753 + 2.0)) * exp2(log2(isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_1753 + 1.0))) + _1758) * _1682;
        float _1768 = _1650 * 0.5;
        float _1769 = _1660 * 0.5;
        float _1770 = _1670 * 0.5;
        float _1771 = dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770));
        float _1776 = (_1771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1771);
        float _1784 = (dot(vec3(_971, _972, _973), vec3(_1776 * _1768, _1776 * _1769, _1776 * _1770)) + 1.0) * 0.5;
        float _4559 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1793 = sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4570 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _1795 = _1794 * 2.0;
        float _1799 = (1.0 - _1794) / (_1794 + 1.0);
        float _4581 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _1809 = ((((1.0 - _1800) * (_1795 + 2.0)) * exp2(log2(isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_1795 + 1.0))) + _1800) * _1683;
        _1817 = _1650;
        _1818 = _1649;
        _1819 = _1648;
        _1820 = _1660;
        _1821 = _1659;
        _1822 = _1658;
        _1823 = _1670;
        _1824 = _1669;
        _1825 = _1668;
        _1826 = _1683;
        _1827 = _1682;
        _1828 = _1681;
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)));
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)));
    }
    else
    {
        _1817 = _1510;
        _1818 = _1510;
        _1819 = _1510;
        _1820 = _1510;
        _1821 = _1510;
        _1822 = _1510;
        _1823 = _1510;
        _1824 = _1510;
        _1825 = _1510;
        _1826 = _1510;
        _1827 = _1510;
        _1828 = _1510;
        _1829 = 0.0;
        _1830 = 0.0;
        _1831 = 0.0;
    }
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1522)) + _1522;
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1523)) + _1523;
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1524)) + _1524;
    float _1864 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1842, cbSceneParam._m0[89u].y, _1841 * cbSceneParam._m0[89u].x));
    float _1867 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1842, cbSceneParam._m0[90u].y, _1841 * cbSceneParam._m0[90u].x));
    float _1870 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1842, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1841));
    float _1885 = _1144 * 0.5;
    float _1886 = _1145 * 0.5;
    float _1887 = _1146 * 0.5;
    float _1888 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1891 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1894 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1928;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1901 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1509, _1513, _1516, _1519));
        float _1905 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1511, _1514, _1517, _1520));
        float _1909 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1512, _1515, _1518, _1521));
        float _1916 = dot(vec4(cbModelParam._m0[39u]), vec4(_1885, _1886, _1887, 1.0));
        _1928 = dot(vec3(isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1916) ? 0.0 : (isnan(0.0) ? _1916 : max(0.0, _1916))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1928 = 1.0;
    }
    float _1939;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1930 = dot(vec4(cbModelParam._m0[40u]), vec4(_1885, _1886, _1887, 1.0));
        _1939 = dot(vec3(isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1930) ? 0.0 : (isnan(0.0) ? _1930 : max(0.0, _1930))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1939 = 1.0;
    }
    float _1943 = (_1939 * cbModelParam._m0[1u].x) + (_1928 * (1.0 - cbModelParam._m0[1u].x));
    float _1953 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _974);
    float _1954 = isnan(_1953) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1953 : min(cbModelParam._m0[25u].z, _1953));
    float _2035;
    float _2037;
    float _2039;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2002 = fma(_1208, cbModelParam._m0[13u].z, fma(_1204, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1200)) + cbModelParam._m0[13u].w;
        float _2006 = fma(_1208, cbModelParam._m0[14u].z, fma(_1204, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1200)) + cbModelParam._m0[14u].w;
        float _2010 = fma(_1208, cbModelParam._m0[15u].z, fma(_1204, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1200)) + cbModelParam._m0[15u].w;
        float _2013 = fma(_1146, cbModelParam._m0[13u].z, fma(_1145, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1144));
        float _2016 = fma(_1146, cbModelParam._m0[14u].z, fma(_1145, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1144));
        float _2019 = fma(_1146, cbModelParam._m0[15u].z, fma(_1145, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1144));
        float _2047;
        if (_2013 > 0.0)
        {
            _2047 = abs((1.0 - _2002) / _2013);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2002 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2047 = frontier_phi_14_12_ladder;
        }
        float _2219;
        if (_2016 > 0.0)
        {
            _2219 = abs((1.0 - _2006) / _2016);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2006 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2219 = frontier_phi_23_19_ladder;
        }
        float _2514;
        if (_2019 > 0.0)
        {
            _2514 = abs((1.0 - _2010) / _2019);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2010 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2514 = frontier_phi_35_30_ladder;
        }
        float _2516 = isnan(_2219) ? _2047 : (isnan(_2047) ? _2219 : min(_2047, _2219));
        float _2517 = isnan(_2514) ? _2516 : (isnan(_2516) ? _2514 : min(_2516, _2514));
        float _2521 = (_2517 * _2013) + _2002;
        float _2522 = (_2517 * _2016) + _2006;
        float _2523 = (_2517 * _2019) + _2010;
        float _2524 = _2517 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2524;
        float _2528 = _2524 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 > _2528) || ((_2522 < _2526) || ((_2521 < _2526) || (_2521 > _2528))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2523, cbModelParam._m0[9u].z, fma(_2522, cbModelParam._m0[9u].y, _2521 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2523, cbModelParam._m0[10u].z, fma(_2522, cbModelParam._m0[10u].y, _2521 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2523, cbModelParam._m0[11u].z, fma(_2522, cbModelParam._m0[11u].y, _2521 * cbModelParam._m0[11u].x))), _1954);
            frontier_phi_13_35_ladder = _2668.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2668.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2668.x * cbModelParam._m0[1u].y;
        }
        _2035 = frontier_phi_13_35_ladder_2;
        _2037 = frontier_phi_13_35_ladder_1;
        _2039 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1144, _1145, _1146), _1954);
        _2035 = _2023.x * cbModelParam._m0[1u].y;
        _2037 = _2023.y * cbModelParam._m0[1u].y;
        _2039 = _2023.z * cbModelParam._m0[1u].y;
    }
    float _2043 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _974);
    float _2044 = isnan(_2043) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2043 : min(cbModelParam._m0[25u].w, _2043));
    float _2134;
    float _2136;
    float _2138;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2098 = fma(_1208, cbModelParam._m0[21u].z, fma(_1204, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1200)) + cbModelParam._m0[21u].w;
        float _2102 = fma(_1208, cbModelParam._m0[22u].z, fma(_1204, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1200)) + cbModelParam._m0[22u].w;
        float _2106 = fma(_1208, cbModelParam._m0[23u].z, fma(_1204, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1200)) + cbModelParam._m0[23u].w;
        float _2109 = fma(_1146, cbModelParam._m0[21u].z, fma(_1145, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1144));
        float _2112 = fma(_1146, cbModelParam._m0[22u].z, fma(_1145, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1144));
        float _2115 = fma(_1146, cbModelParam._m0[23u].z, fma(_1145, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1144));
        float _2224;
        if (_2109 > 0.0)
        {
            _2224 = abs((1.0 - _2098) / _2109);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2098 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2224 = frontier_phi_25_21_ladder;
        }
        float _2541;
        if (_2112 > 0.0)
        {
            _2541 = abs((1.0 - _2102) / _2112);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2102 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2541 = frontier_phi_37_32_ladder;
        }
        float _2879;
        if (_2115 > 0.0)
        {
            _2879 = abs((1.0 - _2106) / _2115);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2106 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2879 = frontier_phi_47_44_ladder;
        }
        float _2881 = isnan(_2541) ? _2224 : (isnan(_2224) ? _2541 : min(_2224, _2541));
        float _2882 = isnan(_2879) ? _2881 : (isnan(_2881) ? _2879 : min(_2881, _2879));
        float _2886 = (_2882 * _2109) + _2098;
        float _2887 = (_2882 * _2112) + _2102;
        float _2888 = (_2882 * _2115) + _2106;
        float _2889 = _2882 * 9.9999997473787516355514526367188e-05;
        float _2890 = (-1.0) - _2889;
        float _2892 = _2889 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2888 > _2892) || ((_2888 < _2890) || ((_2887 > _2892) || ((_2887 < _2890) || ((_2886 < _2890) || (_2886 > _2892))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3010 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2888, cbModelParam._m0[17u].z, fma(_2887, cbModelParam._m0[17u].y, _2886 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2888, cbModelParam._m0[18u].z, fma(_2887, cbModelParam._m0[18u].y, _2886 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2888, cbModelParam._m0[19u].z, fma(_2887, cbModelParam._m0[19u].y, _2886 * cbModelParam._m0[19u].x))), _2044);
            frontier_phi_22_47_ladder = _3010.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3010.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3010.x * cbModelParam._m0[1u].z;
        }
        _2134 = frontier_phi_22_47_ladder_2;
        _2136 = frontier_phi_22_47_ladder_1;
        _2138 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2118 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1144, _1145, _1146), _2044);
        _2134 = _2118.x * cbModelParam._m0[1u].z;
        _2136 = _2118.y * cbModelParam._m0[1u].z;
        _2138 = _2118.z * cbModelParam._m0[1u].z;
    }
    float _2151 = (((_1171 * _1120) + _1172) * _1136) * ((cbModelParam._m0[1u].w * (_2134 - _2035)) + _2035);
    float _2153 = (((_1171 * _1122) + _1172) * _1136) * ((cbModelParam._m0[1u].w * (_2136 - _2037)) + _2037);
    float _2155 = (((_1171 * _1123) + _1172) * _1136) * ((cbModelParam._m0[1u].w * (_2138 - _2039)) + _2039);
    float _2158 = fma(_2155, cbSceneParam._m0[89u].z, fma(_2153, cbSceneParam._m0[89u].y, _2151 * cbSceneParam._m0[89u].x));
    float _2161 = fma(_2155, cbSceneParam._m0[90u].z, fma(_2153, cbSceneParam._m0[90u].y, _2151 * cbSceneParam._m0[90u].x));
    float _2164 = fma(_2155, cbSceneParam._m0[91u].z, fma(_2153, cbSceneParam._m0[91u].y, _2151 * cbSceneParam._m0[91u].x));
    float _2198 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2202 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2206 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2210 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2211 = _2198 / _2210;
    float _2212 = _2202 / _2210;
    float _2213 = _2206 / _2210;
    float _2360;
    float _2361;
    float _2362;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2240 = ((uint(_2213 > cbSceneParam._m0[59u].y) + uint(_2213 > cbSceneParam._m0[59u].x)) + uint(_2213 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2241 = _2240 + 43u;
        uint _2249 = _2240 + 44u;
        uint _2257 = _2240 + 45u;
        uint _2265 = _2240 + 46u;
        float _2276 = fma(_2210, cbSceneParam._m0[_2241].w, fma(_2206, cbSceneParam._m0[_2241].z, fma(_2202, cbSceneParam._m0[_2241].y, _2198 * cbSceneParam._m0[_2241].x)));
        float _2280 = fma(_2210, cbSceneParam._m0[_2249].w, fma(_2206, cbSceneParam._m0[_2249].z, fma(_2202, cbSceneParam._m0[_2249].y, _2198 * cbSceneParam._m0[_2249].x)));
        float _2288 = fma(_2210, cbSceneParam._m0[_2265].w, fma(_2206, cbSceneParam._m0[_2265].z, fma(_2202, cbSceneParam._m0[_2265].y, _2198 * cbSceneParam._m0[_2265].x)));
        float _2293 = cbSceneParam._m0[33u].z * _2288;
        float _2295 = cbSceneParam._m0[33u].w * _2288;
        float _2298 = fma(_2210, cbSceneParam._m0[_2257].w, fma(_2206, cbSceneParam._m0[_2257].z, fma(_2202, cbSceneParam._m0[_2257].y, _2198 * cbSceneParam._m0[_2257].x))) / _2288;
        float _2346 = (cbSceneParam._m0[33u].x - sqrt(((_2212 * _2212) + (_2211 * _2211)) + (_2213 * _2213))) * cbSceneParam._m0[33u].y;
        float _4707 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2353 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2293 + _2276) / _2288, (_2295 + _2280) / _2288), _2298), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2295 + _2276) / _2288, (_2280 - _2293) / _2288), _2298), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2276 - _2293) / _2288, (_2280 - _2295) / _2288), _2298), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2276 - _2295) / _2288, (_2293 + _2280) / _2288), _2298), 0.0)).x), vec4(0.25)));
        _2360 = 1.0 - (_2353 * cbSceneParam._m0[34u].x);
        _2361 = 1.0 - (_2353 * cbSceneParam._m0[34u].y);
        _2362 = 1.0 - (_2353 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2360 = 1.0;
        _2361 = 1.0;
        _2362 = 1.0;
    }
    float _2426;
    float _2428;
    float _2430;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2414 = fma(_2210, cbSceneParam._m0[63u].w, fma(_2206, cbSceneParam._m0[63u].z, fma(_2202, cbSceneParam._m0[63u].y, _2198 * cbSceneParam._m0[63u].x)));
        float _2415 = fma(_2210, cbSceneParam._m0[60u].w, fma(_2206, cbSceneParam._m0[60u].z, fma(_2202, cbSceneParam._m0[60u].y, _2198 * cbSceneParam._m0[60u].x))) / _2414;
        float _2416 = fma(_2210, cbSceneParam._m0[61u].w, fma(_2206, cbSceneParam._m0[61u].z, fma(_2202, cbSceneParam._m0[61u].y, _2198 * cbSceneParam._m0[61u].x))) / _2414;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2415 >= cbSceneParam._m0[64u].x) && (_2416 >= cbSceneParam._m0[64u].y)) && (_2415 <= cbSceneParam._m0[64u].z)) && (_2416 <= cbSceneParam._m0[64u].w))
        {
            float _2554 = fma(_2210, cbSceneParam._m0[62u].w, fma(_2206, cbSceneParam._m0[62u].z, fma(_2202, cbSceneParam._m0[62u].y, _2198 * cbSceneParam._m0[62u].x))) / _2414;
            float _2558 = isnan(cbSceneParam._m0[41u].w) ? _2554 : (isnan(_2554) ? cbSceneParam._m0[41u].w : max(_2554, cbSceneParam._m0[41u].w));
            float _2601 = (cbSceneParam._m0[33u].x - sqrt(((_2212 * _2212) + (_2211 * _2211)) + (_2213 * _2213))) * cbSceneParam._m0[33u].y;
            float _4723 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
            float _2608 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2415, cbSceneParam._m0[33u].w + _2416), _2558), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2415, _2416 - cbSceneParam._m0[33u].z), _2558), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2415 - cbSceneParam._m0[33u].z, _2416 - cbSceneParam._m0[33u].w), _2558), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2415 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2416), _2558), 0.0)).x), vec4(0.25)));
            float _2612 = 1.0 - (_2608 * cbSceneParam._m0[34u].x);
            float _2613 = 1.0 - (_2608 * cbSceneParam._m0[34u].y);
            float _2614 = 1.0 - (_2608 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2614) ? _2362 : (isnan(_2362) ? _2614 : min(_2362, _2614));
            frontier_phi_34_33_ladder_1 = isnan(_2613) ? _2361 : (isnan(_2361) ? _2613 : min(_2361, _2613));
            frontier_phi_34_33_ladder_2 = isnan(_2612) ? _2360 : (isnan(_2360) ? _2612 : min(_2360, _2612));
        }
        else
        {
            frontier_phi_34_33_ladder = _2362;
            frontier_phi_34_33_ladder_1 = _2361;
            frontier_phi_34_33_ladder_2 = _2360;
        }
        _2426 = frontier_phi_34_33_ladder_2;
        _2428 = frontier_phi_34_33_ladder_1;
        _2430 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2426 = _2360;
        _2428 = _2361;
        _2430 = _2362;
    }
    uvec4 _2435 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2437 = _2435.x * 14u;
    uint _2438 = _2437 + 13u;
    float _2445 = _1136 + (-1.0);
    float _2450 = (cbLight._m0[_2438].x * _2445) + 1.0;
    float _2451 = (cbLight._m0[_2438].y * _2445) + 1.0;
    float _2452 = (cbLight._m0[_2438].z * _2445) + 1.0;
    float _2453 = (cbLight._m0[_2438].w * _2445) + 1.0;
    uint _2454 = _2437 + 5u;
    float _2460 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
    uint _2464 = _2437 + 4u;
    float _2473 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
    uint _2477 = _2437 | 1u;
    float _2488 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_971, _972, _973));
    float _2491 = dot(vec3(cbLight._m0[_2477].xyz), vec3(_971, _972, _973));
    float _4759 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _4770 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2496 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * 0.3183098733425140380859375;
    float _2498 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * 0.3183098733425140380859375;
    float _2505 = ((cbLight._m0[_2454].x * _2460) * _2498) + (((cbLight._m0[_2464].x * _2426) * _2473) * _2496);
    float _2506 = ((_2460 * cbLight._m0[_2454].y) * _2498) + (((cbLight._m0[_2464].y * _2428) * _2473) * _2496);
    float _2507 = ((_2460 * cbLight._m0[_2454].z) * _2498) + (((cbLight._m0[_2464].z * _2430) * _2473) * _2496);
    uvec4 _2511 = floatBitsToUint(cbLight._m0[_2437 + 12u]);
    bool _2513 = _2511.x == 0u;
    float _2615;
    float _2617;
    float _2619;
    if (_2513)
    {
        _2615 = _2505;
        _2617 = _2506;
        _2619 = _2507;
    }
    else
    {
        uint _2623 = _2437 + 6u;
        float _2639 = (dot(vec3(cbLight._m0[_2437 + 2u].xyz), vec3(_971, _972, _973)) * 0.5) + 0.5;
        float _2640 = _2639 * _2639;
        float _4781 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2641 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2642 = isnan(1.0) ? _2452 : (isnan(_2452) ? 1.0 : min(_2452, 1.0));
        _2615 = (((cbLight._m0[_2623].x * 0.3183098733425140380859375) * _2641) * _2642) + _2505;
        _2617 = (((cbLight._m0[_2623].y * 0.3183098733425140380859375) * _2641) * _2642) + _2506;
        _2619 = (((cbLight._m0[_2623].z * 0.3183098733425140380859375) * _2641) * _2642) + _2507;
    }
    bool _2622 = _2511.y == 0u;
    float _2677;
    float _2679;
    float _2681;
    if (_2622)
    {
        _2677 = _2615;
        _2679 = _2617;
        _2681 = _2619;
    }
    else
    {
        uint _2850 = _2437 + 7u;
        float _2866 = (dot(vec3(cbLight._m0[_2437 + 3u].xyz), vec3(_971, _972, _973)) * 0.5) + 0.5;
        float _2867 = _2866 * _2866;
        float _4797 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2868 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2869 = isnan(1.0) ? _2453 : (isnan(_2453) ? 1.0 : min(_2453, 1.0));
        _2677 = (((cbLight._m0[_2850].x * 0.3183098733425140380859375) * _2868) * _2869) + _2615;
        _2679 = (((cbLight._m0[_2850].y * 0.3183098733425140380859375) * _2868) * _2869) + _2617;
        _2681 = (((cbLight._m0[_2850].z * 0.3183098733425140380859375) * _2868) * _2869) + _2619;
    }
    uint _2684 = _2437 + 8u;
    float _2697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2437].w)) * _974) * 0.949999988079071044921875);
    float _2698 = _2697 * _2697;
    float _2699 = cbLight._m0[_2437].x + _1050;
    float _2700 = cbLight._m0[_2437].y + _1051;
    float _2701 = cbLight._m0[_2437].z + _1052;
    float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
    float _2706 = _2705 * _2699;
    float _2707 = _2705 * _2700;
    float _2708 = _2705 * _2701;
    float _2709 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2437].xyz));
    float _4813 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2712 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
    float _4824 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _2713 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
    float _2714 = dot(vec3(_971, _972, _973), vec3(_2706, _2707, _2708));
    float _4835 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2717 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
    float _2718 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_2706, _2707, _2708));
    float _4846 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2722 = _2698 * _2698;
    float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
    float _2734 = exp2(log2(1.0 - (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) * 5.0);
    float _2735 = 0.959999978542327880859375 - _1117;
    float _2737 = 0.959999978542327880859375 - _1118;
    float _2738 = 0.959999978542327880859375 - _1119;
    float _2745 = 1.0 - _2698;
    float _2756 = (0.5 / (((_2713 * ((_2712 * _2745) + _2698)) + 9.9999999392252902907785028219223e-09) + (((_2713 * _2745) + _2698) * _2712))) * _2712;
    float _4857 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
    float _2758 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
    uint _2772 = _2437 + 9u;
    float _2783 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2477].w)) * _974) * 0.949999988079071044921875);
    float _2784 = _2783 * _2783;
    float _2785 = cbLight._m0[_2477].x + _1050;
    float _2786 = cbLight._m0[_2477].y + _1051;
    float _2787 = cbLight._m0[_2477].z + _1052;
    float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
    float _2792 = _2791 * _2785;
    float _2793 = _2791 * _2786;
    float _2794 = _2791 * _2787;
    float _2795 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2477].xyz));
    float _4868 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
    float _2798 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
    float _2799 = dot(vec3(_971, _972, _973), vec3(_2792, _2793, _2794));
    float _4879 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
    float _2802 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
    float _2803 = dot(vec3(cbLight._m0[_2477].xyz), vec3(_2792, _2793, _2794));
    float _4890 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
    float _2807 = _2784 * _2784;
    float _2811 = ((_2802 * _2802) * (_2807 + (-1.0))) + 1.0;
    float _2818 = exp2(log2(1.0 - (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0)))) * 5.0);
    float _2825 = 1.0 - _2784;
    float _2835 = (0.5 / (((_2713 * ((_2798 * _2825) + _2784)) + 9.9999999392252902907785028219223e-09) + (((_2713 * _2825) + _2784) * _2798))) * _2798;
    float _4901 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
    float _2837 = (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2807 / ((_2811 * _2811) * 3.141590118408203125));
    float _2847 = (((((_2818 * _2735) + _1120) * cbLight._m0[_2772].x) * _2837) * _2460) + ((((cbLight._m0[_2684].x * _2426) * ((_2734 * _2735) + _1120)) * _2758) * _2473);
    float _2848 = (((((_2818 * _2737) + _1122) * cbLight._m0[_2772].y) * _2837) * _2460) + ((((cbLight._m0[_2684].y * _2428) * ((_2734 * _2737) + _1122)) * _2758) * _2473);
    float _2849 = (((((_2818 * _2738) + _1123) * cbLight._m0[_2772].z) * _2837) * _2460) + ((((cbLight._m0[_2684].z * _2430) * ((_2734 * _2738) + _1123)) * _2758) * _2473);
    float _2905;
    float _2907;
    float _2909;
    if (_2513)
    {
        _2905 = _2847;
        _2907 = _2848;
        _2909 = _2849;
    }
    else
    {
        uint _2911 = _2437 + 2u;
        uint _2915 = _2437 + 10u;
        float _2929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2911].w)) * _974) * 0.949999988079071044921875);
        float _2930 = _2929 * _2929;
        float _2931 = cbLight._m0[_2911].x + _1050;
        float _2932 = cbLight._m0[_2911].y + _1051;
        float _2933 = cbLight._m0[_2911].z + _1052;
        float _2937 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
        float _2938 = _2937 * _2931;
        float _2939 = _2937 * _2932;
        float _2940 = _2937 * _2933;
        float _2941 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2911].xyz));
        float _4912 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2944 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
        float _2945 = dot(vec3(_971, _972, _973), vec3(_2938, _2939, _2940));
        float _4923 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2948 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
        float _2949 = dot(vec3(cbLight._m0[_2911].xyz), vec3(_2938, _2939, _2940));
        float _4934 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2953 = _2930 * _2930;
        float _2957 = ((_2948 * _2948) * (_2953 + (-1.0))) + 1.0;
        float _2964 = exp2(log2(1.0 - (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)))) * 5.0);
        float _2971 = 1.0 - _2930;
        float _2981 = (0.5 / (((_2713 * ((_2944 * _2971) + _2930)) + 9.9999999392252902907785028219223e-09) + (((_2713 * _2971) + _2930) * _2944))) * _2944;
        float _4945 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        float _2983 = (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2953 / ((_2957 * _2957) * 3.141590118408203125));
        float _2984 = isnan(1.0) ? _2452 : (isnan(_2452) ? 1.0 : min(_2452, 1.0));
        _2905 = (((((_2964 * _2735) + _1120) * cbLight._m0[_2915].x) * _2983) * _2984) + _2847;
        _2907 = (((((_2964 * _2737) + _1122) * cbLight._m0[_2915].y) * _2983) * _2984) + _2848;
        _2909 = (((((_2964 * _2738) + _1123) * cbLight._m0[_2915].z) * _2983) * _2984) + _2849;
    }
    float _3015;
    float _3017;
    float _3019;
    if (_2622)
    {
        _3015 = _2905;
        _3017 = _2907;
        _3019 = _2909;
    }
    else
    {
        uint _3026 = _2437 + 3u;
        uint _3030 = _2437 + 11u;
        float _3044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3026].w)) * _974) * 0.949999988079071044921875);
        float _3045 = _3044 * _3044;
        float _3046 = cbLight._m0[_3026].x + _1050;
        float _3047 = cbLight._m0[_3026].y + _1051;
        float _3048 = cbLight._m0[_3026].z + _1052;
        float _3052 = inversesqrt(dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048)));
        float _3053 = _3052 * _3046;
        float _3054 = _3052 * _3047;
        float _3055 = _3052 * _3048;
        float _3056 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_3026].xyz));
        float _4961 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
        float _3059 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
        float _3060 = dot(vec3(_971, _972, _973), vec3(_3053, _3054, _3055));
        float _4972 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
        float _3063 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
        float _3064 = dot(vec3(cbLight._m0[_3026].xyz), vec3(_3053, _3054, _3055));
        float _4983 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
        float _3068 = _3045 * _3045;
        float _3072 = ((_3063 * _3063) * (_3068 + (-1.0))) + 1.0;
        float _3079 = exp2(log2(1.0 - (isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0)))) * 5.0);
        float _3086 = 1.0 - _3045;
        float _3096 = (0.5 / (((_2713 * ((_3059 * _3086) + _3045)) + 9.9999999392252902907785028219223e-09) + (((_2713 * _3086) + _3045) * _3059))) * _3059;
        float _4994 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
        float _3098 = (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0))) * (_3068 / ((_3072 * _3072) * 3.141590118408203125));
        float _3099 = isnan(1.0) ? _2453 : (isnan(_2453) ? 1.0 : min(_2453, 1.0));
        _3015 = (((((_3079 * _2735) + _1120) * cbLight._m0[_3030].x) * _3098) * _3099) + _2905;
        _3017 = (((((_3079 * _2737) + _1122) * cbLight._m0[_3030].y) * _3098) * _3099) + _2907;
        _3019 = (((((_3079 * _2738) + _1123) * cbLight._m0[_3030].z) * _3098) * _3099) + _2909;
    }
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    float _3173;
    float _3175;
    if (_2435.y == 0u)
    {
        uvec4 _3120 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3121 = _3120.x;
        uint _3132 = uint((float(_3120.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1059) / _3121))) + floor(float(uint(cbSceneParam._m0[85u].x * _1058) / _3121)));
        float _3142 = (log2(_2213 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3143 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
        uint _3146 = uint(isnan(14.0) ? _3143 : (isnan(_3143) ? 14.0 : min(_3143, 14.0)));
        uvec4 _3151 = texelFetch(g_lightClusterGridBuffer, int(((_3146 << 2u) + (_3132 << 6u)) >> 2u));
        uint _3152 = _3151.x;
        uint _3153 = _3120.z;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        if (((((1u << ((_3153 >> 4u) & 15u)) + 4294967295u) & _3152) == 0u) || ((_3153 & 240u) == 0u))
        {
            _3232 = 0.0;
            _3234 = 0.0;
            _3236 = 0.0;
            _3238 = 0.0;
            _3240 = 0.0;
            _3242 = 0.0;
        }
        else
        {
            float _3233;
            float _3235;
            float _3237;
            float _3239;
            float _3241;
            float _3243;
            float _3377 = 0.0;
            float _3378 = 0.0;
            float _3379 = 0.0;
            float _3380 = 0.0;
            float _3381 = 0.0;
            float _3382 = 0.0;
            uint _3383 = 0u;
            uint _3392;
            bool _3393;
            for (;;)
            {
                _3392 = texelFetch(g_lightClassification, int((((_3146 << 5u) + (_3132 << 9u)) + (_3383 << 2u)) >> 2u)).x;
                _3393 = _3392 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3393)
                {
                    frontier_phi_66_pred = _3382;
                    frontier_phi_66_pred_1 = _3381;
                    frontier_phi_66_pred_2 = _3380;
                    frontier_phi_66_pred_3 = _3379;
                    frontier_phi_66_pred_4 = _3378;
                    frontier_phi_66_pred_5 = _3377;
                }
                else
                {
                    float _3501;
                    float _3502;
                    float _3503;
                    float _3504;
                    float _3505;
                    float _3506;
                    uint _3507;
                    _3501 = _3377;
                    _3502 = _3378;
                    _3503 = _3379;
                    _3504 = _3380;
                    _3505 = _3381;
                    _3506 = _3382;
                    _3507 = _3392;
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    for (;;)
                    {
                        uint _3511 = uint(findLSB(_3507)) + (_3383 << 5u);
                        uint _3508 = (_3507 + 4294967295u) & _3507;
                        uint _3513 = _3511 * 48u;
                        vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3513)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 3u)).x));
                        uint _3533 = (_3511 * 48u) + 4u;
                        vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3533)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 3u)).x));
                        uint _3552 = (_3511 * 48u) + 8u;
                        vec3 _3563 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3552)).x, texelFetch(g_PointLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3552 + 2u)).x));
                        float _3567 = _3527.x - _2211;
                        float _3568 = _3527.y - _2212;
                        float _3569 = _3527.z - _2213;
                        float _3570 = dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569));
                        float _3573 = inversesqrt(_3570);
                        float _3574 = _3573 * _3567;
                        float _3575 = _3573 * _3568;
                        float _3576 = _3573 * _3569;
                        float _3577 = dot(vec3(_1077, _1080, _1083), vec3(_3574, _3575, _3576));
                        float _3582 = 1.0 - (_3570 * _3527.w);
                        float _5020 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3583 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                        float _3584 = sqrt(_3570) * _3546.w;
                        float _3587 = 1.39999997615814208984375 / (_3584 + 1.39999997615814208984375);
                        float _3588 = _3587 * _3587;
                        float _3591 = ((1.0 - _3588) * _3577) + _3588;
                        float _3594 = _3584 * _3584;
                        float _3598 = ((isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0))) * _3583) / ((_3594 * 0.699999988079071044921875) + 1.0);
                        float _3602 = (-0.0) - _2211;
                        float _3603 = (-0.0) - _2212;
                        float _3604 = (-0.0) - _2213;
                        float _3608 = inversesqrt(dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604)));
                        float _3609 = _3608 * _3602;
                        float _3610 = _3608 * _3603;
                        float _3611 = _3608 * _3604;
                        float _3618 = exp2(log2(1.0 / ((_3594 * 3.5) + 5.0)) * 0.25);
                        float _3619 = 1.0 - _1152;
                        float _3626 = sqrt(1.0 - ((1.0 - (_3619 * _3619)) * (1.0 - (_3618 * _3618))));
                        float _3627 = _3626 * _3626;
                        float _3628 = _3627 * _3627;
                        float _3629 = _3609 + _3574;
                        float _3630 = _3610 + _3575;
                        float _3631 = _3611 + _3576;
                        float _3635 = inversesqrt(dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631)));
                        float _3639 = dot(vec3(_1077, _1080, _1083), vec3(_3609, _3610, _3611));
                        float _5036 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                        float _3642 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                        float _3643 = dot(vec3(_1077, _1080, _1083), vec3(_3635 * _3629, _3635 * _3630, _3635 * _3631));
                        float _5047 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                        float _3646 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                        float _3650 = ((_3646 * _3646) * (_3628 + (-1.0))) + 1.0;
                        float _3651 = _3587 * _3627;
                        float _3652 = _3651 * _3651;
                        float _3655 = ((1.0 - _3652) * _3577) + _3652;
                        float _5058 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                        float _3656 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                        float _3657 = 1.0 - _3627;
                        float _3667 = (0.5 / (((_3656 * ((_3642 * _3657) + _3627)) + 9.9999999392252902907785028219223e-09) + (((_3656 * _3657) + _3627) * _3642))) * _3656;
                        float _5069 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                        float _3678 = (((_3628 * 3.1415927410125732421875) * (isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0)))) / ((_3650 * _3650) * ((_3594 * 2.1991131305694580078125) + 3.141590118408203125))) * _3583;
                        _3436 = (_3598 * _3546.x) + _3504;
                        _3437 = (_3598 * _3546.y) + _3505;
                        _3438 = (_3598 * _3546.z) + _3506;
                        _3433 = (_3678 * _3563.x) + _3501;
                        _3434 = (_3678 * _3563.y) + _3502;
                        _3435 = (_3678 * _3563.z) + _3503;
                        if (_3508 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3501 = _3433;
                            _3502 = _3434;
                            _3503 = _3435;
                            _3504 = _3436;
                            _3505 = _3437;
                            _3506 = _3438;
                            _3507 = _3508;
                        }
                    }
                    frontier_phi_66_pred = _3438;
                    frontier_phi_66_pred_1 = _3437;
                    frontier_phi_66_pred_2 = _3436;
                    frontier_phi_66_pred_3 = _3435;
                    frontier_phi_66_pred_4 = _3434;
                    frontier_phi_66_pred_5 = _3433;
                }
                _3243 = frontier_phi_66_pred;
                _3241 = frontier_phi_66_pred_1;
                _3239 = frontier_phi_66_pred_2;
                _3237 = frontier_phi_66_pred_3;
                _3235 = frontier_phi_66_pred_4;
                _3233 = frontier_phi_66_pred_5;
                uint _3384 = _3383 + 1u;
                if (_3384 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3377 = _3233;
                    _3378 = _3235;
                    _3379 = _3237;
                    _3380 = _3239;
                    _3381 = _3241;
                    _3382 = _3243;
                    _3383 = _3384;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3232 = _3233;
            _3234 = _3235;
            _3236 = _3237;
            _3238 = _3239;
            _3240 = _3241;
            _3242 = _3243;
        }
        uvec4 _3246 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3247 = _3246.z;
        uint _3249 = (_3247 >> 8u) & 15u;
        float _3345;
        float _3347;
        float _3349;
        float _3351;
        float _3353;
        float _3355;
        if (((4294967295u << _3249) & _3152) == 0u)
        {
            _3345 = _3232;
            _3347 = _3234;
            _3349 = _3236;
            _3351 = _3238;
            _3353 = _3240;
            _3355 = _3242;
        }
        else
        {
            float _3370 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
            float _3371 = _3370 * _2211;
            float _3372 = _3370 * _2212;
            float _3373 = _3370 * _2213;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3249 < ((_3247 >> 12u) & 15u))
            {
                float _3346;
                float _3348;
                float _3350;
                float _3352;
                float _3354;
                float _3356;
                float _3484 = _3232;
                float _3485 = _3234;
                float _3486 = _3236;
                float _3487 = _3238;
                float _3488 = _3240;
                float _3489 = _3242;
                uint _3490 = _3249;
                uint _3499;
                bool _3500;
                for (;;)
                {
                    _3499 = texelFetch(g_lightClassification, int((((_3146 << 5u) + (_3132 << 9u)) + (_3490 << 2u)) >> 2u)).x;
                    _3500 = _3499 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3500)
                    {
                        frontier_phi_72_pred = _3489;
                        frontier_phi_72_pred_1 = _3488;
                        frontier_phi_72_pred_2 = _3487;
                        frontier_phi_72_pred_3 = _3486;
                        frontier_phi_72_pred_4 = _3485;
                        frontier_phi_72_pred_5 = _3484;
                    }
                    else
                    {
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3976;
                        float _3977;
                        float _3978;
                        float _3979;
                        float _3980;
                        float _3981;
                        float _3696 = _3484;
                        float _3697 = _3485;
                        float _3698 = _3486;
                        float _3699 = _3487;
                        float _3700 = _3488;
                        float _3701 = _3489;
                        uint _3702 = _3499;
                        uint _3703;
                        vec4 _3728;
                        float _3729;
                        vec4 _3744;
                        vec3 _3756;
                        vec4 _3771;
                        vec4 _3786;
                        float _3832;
                        bool _3833;
                        for (;;)
                        {
                            uint _3713 = ((_3490 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3702));
                            _3703 = (_3702 + 4294967295u) & _3702;
                            uint _3715 = _3713 * 40u;
                            _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            _3729 = _3728.w;
                            uint _3731 = (_3713 * 40u) + 4u;
                            _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            uint _3746 = (_3713 * 40u) + 8u;
                            _3756 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 2u)).x));
                            uint _3758 = (_3713 * 40u) + 16u;
                            _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            uint _3773 = (_3713 * 40u) + 20u;
                            _3786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 3u)).x));
                            uint _3788 = (_3713 * 40u) + 24u;
                            vec4 _3801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 3u)).x));
                            uint _3807 = (_3713 * 40u) + 28u;
                            vec4 _3820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 3u)).x));
                            _3832 = fma(_2213, _3820.z, fma(_2212, _3820.y, _3820.x * _2211)) + _3820.w;
                            _3833 = !((fma(_2213, _3801.z, fma(_2212, _3801.y, _3801.x * _2211)) + _3801.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3833)
                            {
                                float _3860 = _3728.x - _2211;
                                float _3861 = _3728.y - _2212;
                                float _3862 = _3728.z - _2213;
                                float _3863 = dot(vec3(_3860, _3861, _3862), vec3(_3860, _3861, _3862));
                                float _3866 = inversesqrt(_3863);
                                float _3867 = _3866 * _3860;
                                float _3868 = _3866 * _3861;
                                float _3869 = _3866 * _3862;
                                float _3873 = 1.0 - (_3863 / (_3729 * _3729));
                                float _5080 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3874 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
                                float _3878 = sqrt(_3863) * _3744.w;
                                float _3880 = 1.39999997615814208984375 / (_3878 + 1.39999997615814208984375);
                                float _3881 = _3880 * _3880;
                                float _3884 = ((1.0 - _3881) * dot(vec3(_3867, _3868, _3869), vec3(_1077, _1080, _1083))) + _3881;
                                float _3887 = _3878 * _3878;
                                float _3891 = (fma(_2213, _3771.z, fma(_2212, _3771.y, _3771.x * _2211)) + _3771.w) / _3832;
                                float _3892 = (fma(_2213, _3786.z, fma(_2212, _3786.y, _3786.x * _2211)) + _3786.w) / _3832;
                                float _3896 = 1.0 - dot(vec2(_3891, _3892), vec2(_3891, _3892));
                                float _5096 = isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0));
                                float _3897 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
                                float _3898 = _3897 * (((isnan(0.0) ? _3884 : (isnan(_3884) ? 0.0 : max(_3884, 0.0))) * _3874) / ((_3887 * 0.699999988079071044921875) + 1.0));
                                float _3910 = exp2(log2(1.0 / ((_3887 * 3.5) + 5.0)) * 0.25);
                                float _3911 = 1.0 - _1152;
                                float _3918 = sqrt(1.0 - ((1.0 - (_3911 * _3911)) * (1.0 - (_3910 * _3910))));
                                float _3919 = _3918 * _3918;
                                float _3920 = _3919 * _3919;
                                float _3921 = _3867 - _3371;
                                float _3922 = _3868 - _3372;
                                float _3923 = _3869 - _3373;
                                float _3927 = inversesqrt(dot(vec3(_3921, _3922, _3923), vec3(_3921, _3922, _3923)));
                                float _3931 = dot(vec3(_1077, _1080, _1083), vec3((-0.0) - _3371, (-0.0) - _3372, (-0.0) - _3373));
                                float _5107 = isnan(0.0) ? _3931 : (isnan(_3931) ? 0.0 : max(_3931, 0.0));
                                float _3934 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
                                float _3935 = dot(vec3(_1077, _1080, _1083), vec3(_3927 * _3921, _3927 * _3922, _3927 * _3923));
                                float _5118 = isnan(0.0) ? _3935 : (isnan(_3935) ? 0.0 : max(_3935, 0.0));
                                float _3938 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
                                float _3942 = ((_3938 * _3938) * (_3920 + (-1.0))) + 1.0;
                                float _3943 = _3880 * _3919;
                                float _3944 = _3943 * _3943;
                                float _3950 = ((1.0 - _3944) * dot(vec3(_1077, _1080, _1083), vec3(_3867, _3868, _3869))) + _3944;
                                float _5129 = isnan(0.0) ? _3950 : (isnan(_3950) ? 0.0 : max(_3950, 0.0));
                                float _3951 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
                                float _3952 = 1.0 - _3919;
                                float _3962 = (0.5 / (((_3951 * ((_3934 * _3952) + _3919)) + 9.9999999392252902907785028219223e-09) + (((_3951 * _3952) + _3919) * _3934))) * _3951;
                                float _5140 = isnan(0.0) ? _3962 : (isnan(_3962) ? 0.0 : max(_3962, 0.0));
                                float _3972 = (_3897 * _3874) * (((_3920 * 3.1415927410125732421875) * (isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0)))) / ((_3942 * _3942) * ((_3887 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3898 * _3744.y;
                                frontier_phi_78_pred_1 = _3898 * _3744.x;
                                frontier_phi_78_pred_2 = _3972 * _3756.z;
                                frontier_phi_78_pred_3 = _3972 * _3756.y;
                                frontier_phi_78_pred_4 = _3972 * _3756.x;
                                frontier_phi_78_pred_5 = _3898 * _3744.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3980 = frontier_phi_78_pred;
                            _3979 = frontier_phi_78_pred_1;
                            _3978 = frontier_phi_78_pred_2;
                            _3977 = frontier_phi_78_pred_3;
                            _3976 = frontier_phi_78_pred_4;
                            _3981 = frontier_phi_78_pred_5;
                            _3686 = _3979 + _3699;
                            _3687 = _3980 + _3700;
                            _3688 = _3981 + _3701;
                            _3683 = _3976 + _3696;
                            _3684 = _3977 + _3697;
                            _3685 = _3978 + _3698;
                            if (_3703 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3696 = _3683;
                                _3697 = _3684;
                                _3698 = _3685;
                                _3699 = _3686;
                                _3700 = _3687;
                                _3701 = _3688;
                                _3702 = _3703;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3688;
                        frontier_phi_72_pred_1 = _3687;
                        frontier_phi_72_pred_2 = _3686;
                        frontier_phi_72_pred_3 = _3685;
                        frontier_phi_72_pred_4 = _3684;
                        frontier_phi_72_pred_5 = _3683;
                    }
                    _3356 = frontier_phi_72_pred;
                    _3354 = frontier_phi_72_pred_1;
                    _3352 = frontier_phi_72_pred_2;
                    _3350 = frontier_phi_72_pred_3;
                    _3348 = frontier_phi_72_pred_4;
                    _3346 = frontier_phi_72_pred_5;
                    uint _3491 = _3490 + 1u;
                    if (_3491 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3484 = _3346;
                        _3485 = _3348;
                        _3486 = _3350;
                        _3487 = _3352;
                        _3488 = _3354;
                        _3489 = _3356;
                        _3490 = _3491;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3356;
                frontier_phi_60_61_ladder_1 = _3354;
                frontier_phi_60_61_ladder_2 = _3350;
                frontier_phi_60_61_ladder_3 = _3348;
                frontier_phi_60_61_ladder_4 = _3346;
                frontier_phi_60_61_ladder_5 = _3352;
            }
            else
            {
                frontier_phi_60_61_ladder = _3242;
                frontier_phi_60_61_ladder_1 = _3240;
                frontier_phi_60_61_ladder_2 = _3236;
                frontier_phi_60_61_ladder_3 = _3234;
                frontier_phi_60_61_ladder_4 = _3232;
                frontier_phi_60_61_ladder_5 = _3238;
            }
            _3345 = frontier_phi_60_61_ladder_4;
            _3347 = frontier_phi_60_61_ladder_3;
            _3349 = frontier_phi_60_61_ladder_2;
            _3351 = frontier_phi_60_61_ladder_5;
            _3353 = frontier_phi_60_61_ladder_1;
            _3355 = frontier_phi_60_61_ladder;
        }
        float _3360 = isnan(1.0) ? _1136 : (isnan(_1136) ? 1.0 : min(_1136, 1.0));
        _3165 = (_3360 * _3351) + _2677;
        _3167 = (_3360 * _3353) + _2679;
        _3169 = (_3360 * _3355) + _2681;
        _3171 = ((_3345 * _1120) * _3360) + _3015;
        _3173 = ((_3347 * _1122) * _3360) + _3017;
        _3175 = ((_3349 * _1123) * _3360) + _3019;
    }
    else
    {
        _3165 = _2677;
        _3167 = _2679;
        _3169 = _2681;
        _3171 = _3015;
        _3173 = _3017;
        _3175 = _3019;
    }
    float _5156 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _5167 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _5178 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    uint _3195 = _291 + 6u;
    float _3203 = _1058 / cbSceneParam._m0[86u].x;
    float _3204 = _1059 / cbSceneParam._m0[86u].y;
    vec4 _3218 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3203, _3204, (log2((isnan(cbSceneParam._m0[77u].w) ? _993 : (isnan(_993) ? cbSceneParam._m0[77u].w : min(_993, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3220 = _3218.x;
    float _3221 = _3218.y;
    float _3222 = _3218.z;
    float _3223 = _3218.w;
    float _3295;
    float _3297;
    float _3299;
    float _3301;
    if (_993 > cbSceneParam._m0[78u].w)
    {
        float _3257 = isnan(_993) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _993 : min(cbSceneParam._m0[80u].w, _993));
        float _3258 = _3257 / _993;
        float _3269 = _3258 * _1043;
        float _3270 = _1044 * _3258;
        float _3271 = (-0.0) - _3270;
        float _3273 = _3258 * _1045;
        float _3275 = (cbSceneParam._m0[77u].w * _3271) / _3257;
        float _3276 = _3275 + cbSceneParam._m0[79u].w;
        float _3277 = cbSceneParam._m0[79u].w - _3270;
        float _3283 = sqrt(((_3269 * _3269) + (_3270 * _3270)) + (_3273 * _3273));
        float _3286 = (1.0 - (cbSceneParam._m0[77u].w / _3257)) * _3283;
        float _3291 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3293 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3446;
        if (abs((_3271 - _3275) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3446 = ((((_3276 > 0.0) ? exp2(_3291 * _3276) : (2.0 - exp2(_3293 * _3276))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3286;
        }
        else
        {
            float _3406 = 1.0 / cbSceneParam._m0[80u].x;
            float _3407 = isnan(_3277) ? _3276 : (isnan(_3276) ? _3277 : max(_3276, _3277));
            float _3408 = isnan(_3277) ? _3276 : (isnan(_3276) ? _3277 : min(_3276, _3277));
            float _3417 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : min(_3407, 0.0));
            float _3418 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : min(_3408, 0.0));
            _3446 = ((abs(_3283 / _3271) * cbSceneParam._m0[80u].y) * ((((_3417 - _3418) * 2.0) - ((exp2(_3291 * (isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0)))) - exp2(_3291 * (isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0))))) * _3406)) - ((exp2(_3293 * _3417) - exp2(_3293 * _3418)) * _3406))) + (_3286 * cbSceneParam._m0[80u].z);
        }
        vec4 _3448 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3203, _3204, 1.0), 0.0);
        float _3457 = exp2((_3446 * (-1.44269502162933349609375)) * (1.0 - _3448.w));
        float _3458 = log2(_3457);
        float _3474 = log2(_3223);
        _3295 = (exp2(_3474 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3458 * cbSceneParam._m0[78u].x)) * _3448.x) / cbSceneParam._m0[78u].x)) + _3220;
        _3297 = (exp2(_3474 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3458 * cbSceneParam._m0[78u].y)) * _3448.y) / cbSceneParam._m0[78u].y)) + _3221;
        _3299 = (exp2(_3474 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3458 * cbSceneParam._m0[78u].z)) * _3448.z) / cbSceneParam._m0[78u].z)) + _3222;
        _3301 = _3457 * _3223;
    }
    else
    {
        _3295 = _3220;
        _3297 = _3221;
        _3299 = _3222;
        _3301 = _3223;
    }
    float _3313 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3314 = _3313 == 3.0;
    float _3315 = log2(_3301);
    float _3322 = exp2(_3315 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0))) * (_3165 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1136))) + ((_3171 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1943)) * cbPerFrame._m0[3u].x));
    float _3323 = exp2(_3315 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0))) * (_3167 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1136))) + ((_3173 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1943)) * cbPerFrame._m0[3u].x));
    float _3324 = exp2(_3315 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0))) * (_3169 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1136))) + ((_3175 + ((isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0))) * _1943)) * cbPerFrame._m0[3u].x));
    float _3333 = (_3313 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3333 * (_3314 ? _3322 : (_3322 + (cbSceneParam._m0[72u].w * _3295)));
    SV_Target.y = _3333 * (_3314 ? _3323 : (_3323 + (cbSceneParam._m0[72u].w * _3297)));
    SV_Target.z = _3333 * (_3314 ? _3324 : (_3324 + (cbSceneParam._m0[72u].w * _3299)));
    SV_Target.w = cbInstanceData._m0[_3195].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3195].w;
}


