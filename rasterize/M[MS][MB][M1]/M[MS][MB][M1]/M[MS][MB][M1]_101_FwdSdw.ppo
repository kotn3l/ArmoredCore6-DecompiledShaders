#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1285;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3895 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3906 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3917 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[24u].y) + _401) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3928 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _426 = (_419 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _427 = (_419 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _428 = (_419 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    float _432 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _426;
    float _435 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _427;
    float _438 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _428;
    float _445 = ((_426 - _432) * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) + _432;
    float _446 = ((_427 - _435) * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) + _435;
    float _447 = ((_428 - _438) * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) + _438;
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _522 = ((_492.z - _513) * _419) + _513;
    float _525 = ((((_492.x - _511) * _419) + _511) * 2.0) + (-1.0);
    float _526 = ((((_492.y - _512) * _419) + _512) * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3939 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))));
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _564 = (_525 + ((((_465.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_552.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _565 = (_526 + ((((_465.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_552.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _568 = fma(_532, _235, fma(_565, _242, _564 * _228));
    float _571 = fma(_532, _236, fma(_565, _243, _564 * _229));
    float _574 = fma(_532, _237, fma(_565, _244, _564 * _230));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _607 = _605.x;
    float _608 = 1.0 - _607;
    float _614 = (cbMtdParam._m0[19u].x + dot(vec4(_578 * _568, _578 * _571, _578 * _574, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_607 - _608) * cbMtdParam._m0[24u].z) + _608) * cbMtdParam._m0[21u].z);
    float _3950 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _622 = (_615 * (cbMtdParam._m0[17u].x - _445)) + _445;
    float _623 = (_615 * (cbMtdParam._m0[17u].y - _446)) + _446;
    float _624 = (_615 * (cbMtdParam._m0[17u].z - _447)) + _447;
    vec4 _636 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _650 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _652 = _650.x;
    float _670 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _287) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _288) + cbTextureTilingScale._m0[9u].w)).x - _652) * _419) + _652;
    float _674 = ((_636.x - _670) * cbMtdParam._m0[19u].z) + _670;
    float _676 = _674 - (_674 * _615);
    float _681 = (((_465.z - _522) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _522;
    float _685 = ((_552.z - _681) * cbMtdParam._m0[19u].w) + _681;
    vec4 _698 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _705 = (_698.x * 2.0) + (-1.0);
    float _706 = (_698.y * 2.0) + (-1.0);
    float _707 = dot(vec2(_705, _706), vec2(_705, _706));
    float _3961 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _715 = ((_698.z - _685) * _615) + _685;
    float _725 = ((sqrt(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) - _532) * _615) + _532;
    float _728 = (((_705 - _564) * _615) + _564) + (cbMtdParam._m0[21u].x * _564);
    float _729 = (((_706 - _565) * _615) + _565) + (cbMtdParam._m0[21u].x * _565);
    float _731 = cbMtdParam._m0[22u].x + _552.w;
    float _734 = fma(_725, _235, fma(_729, _242, _728 * _228));
    float _737 = fma(_725, _236, fma(_729, _243, _728 * _229));
    float _740 = fma(_725, _237, fma(_729, _244, _728 * _230));
    float _744 = inversesqrt(dot(vec3(_734, _737, _740), vec3(_734, _737, _740)));
    float _745 = _744 * _734;
    float _746 = _744 * _737;
    float _747 = _744 * _740;
    float _3972 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _748 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _3994 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4005 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4016 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4027 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _753 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _767 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _818 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _808);
    float _819 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _808);
    float _820 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _808);
    float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
    float _825 = _818 * _824;
    float _826 = _819 * _824;
    float _827 = _820 * _824;
    float _833 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _834 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _852 = fma(_747, cbSceneParam._m0[5u].z, fma(_746, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _745));
    float _855 = fma(_747, cbSceneParam._m0[6u].z, fma(_746, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _745));
    float _858 = fma(_747, cbSceneParam._m0[7u].z, fma(_746, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _745));
    uint _872 = (_268 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _878 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * cbInstanceData._m0[_872].x;
    float _879 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * cbInstanceData._m0[_872].y;
    float _880 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_872].z;
    float _4038 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _4049 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _882 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _884 = 1.0 - _753;
    float _885 = _881 * _884;
    float _886 = _882 * _884;
    float _887 = _883 * _884;
    float _892 = (_881 + (-0.039999999105930328369140625)) * _753;
    float _893 = (_882 + (-0.039999999105930328369140625)) * _753;
    float _894 = (_883 + (-0.039999999105930328369140625)) * _753;
    float _895 = _892 + 0.039999999105930328369140625;
    float _897 = _893 + 0.039999999105930328369140625;
    float _898 = _894 + 0.039999999105930328369140625;
    vec4 _907 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _833, cbSceneParam._m0[86u].y * _834));
    float _911 = ((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * TEXCOORD_5.w) * _907.x;
    float _912 = dot(vec3(_745, _746, _747), vec3(_825, _826, _827));
    float _915 = _912 * 2.0;
    float _919 = (_915 * _745) - _825;
    float _920 = (_915 * _746) - _826;
    float _921 = (_915 * _747) - _827;
    float _925 = abs(dot(vec3(_825, _826, _827), vec3(_745, _746, _747)));
    float _4071 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _927 = sqrt(_748);
    float _940 = exp2((_927 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_927 * 3.0));
    float _946 = (1.0 - _940) * ((_927 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _947 = _940 * _927;
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1284;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1009 = fma(_983, cbModelParam._m0[26u].z, fma(_979, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975));
        float _1013 = fma(_983, cbModelParam._m0[27u].z, fma(_979, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975));
        float _1017 = fma(_983, cbModelParam._m0[28u].z, fma(_979, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975));
        float _1042 = _975 + _745;
        float _1043 = _979 + _746;
        float _1044 = _983 + _747;
        float _1054 = fma(_1044, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1042)) - _1009;
        float _1055 = fma(_1044, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1042)) - _1013;
        float _1056 = fma(_1044, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1042)) - _1017;
        float _1060 = inversesqrt(dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056)));
        float _1073 = ((_1060 * _1054) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1009 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1060 * _1055) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1013 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1060 * _1056) / cbModelParam._m0[34u].z) + ((((((_1017 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        float _1112 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1078.x + (-0.5));
        float _1114 = _1112 * (_1078.y + (-0.5));
        float _1115 = _1112 * (_1078.z + (-0.5));
        float _1122 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1085.x + (-0.5));
        float _1124 = _1122 * (_1085.y + (-0.5));
        float _1125 = _1122 * (_1085.z + (-0.5));
        float _1132 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1092.x + (-0.5));
        float _1134 = _1132 * (_1092.y + (-0.5));
        float _1135 = _1132 * (_1092.z + (-0.5));
        float _1142 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1099.x + (-0.5));
        float _1144 = _1142 * (_1099.y + (-0.5));
        float _1145 = _1142 * (_1099.z + (-0.5));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = _1113 * 0.5;
        float _1150 = _1123 * 0.5;
        float _1151 = _1133 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1166 = (dot(vec3(_745, _746, _747), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1176 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _4119 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1178 + 1.0))) + _1183) * _1146;
        float _1193 = _1114 * 0.5;
        float _1194 = _1124 * 0.5;
        float _1195 = _1134 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_745, _746, _747), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4152 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1220 + 1.0))) + _1225) * _1147;
        float _1235 = _1115 * 0.5;
        float _1236 = _1125 * 0.5;
        float _1237 = _1135 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_745, _746, _747), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4185 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1262 + 1.0))) + _1267) * _1148;
        _1284 = _1115;
        _1286 = _1114;
        _1287 = _1113;
        _1288 = _1125;
        _1289 = _1124;
        _1290 = _1123;
        _1291 = _1135;
        _1292 = _1134;
        _1293 = _1133;
        _1294 = _1148;
        _1295 = _1147;
        _1296 = _1146;
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
    }
    else
    {
        _1284 = _1285;
        _1286 = _1285;
        _1287 = _1285;
        _1288 = _1285;
        _1289 = _1285;
        _1290 = _1285;
        _1291 = _1285;
        _1292 = _1285;
        _1293 = _1285;
        _1294 = _1285;
        _1295 = _1285;
        _1296 = _1285;
        _1297 = 0.0;
        _1298 = 0.0;
        _1299 = 0.0;
    }
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1324 = fma(_983, cbModelParam._m0[30u].z, fma(_979, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _975));
        float _1328 = fma(_983, cbModelParam._m0[31u].z, fma(_979, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _975));
        float _1332 = fma(_983, cbModelParam._m0[32u].z, fma(_979, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _975));
        float _1355 = _975 + _745;
        float _1356 = _979 + _746;
        float _1357 = _983 + _747;
        float _1367 = fma(_1357, cbModelParam._m0[30u].z, fma(_1356, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1355)) - _1324;
        float _1368 = fma(_1357, cbModelParam._m0[31u].z, fma(_1356, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1355)) - _1328;
        float _1369 = fma(_1357, cbModelParam._m0[32u].z, fma(_1356, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1355)) - _1332;
        float _1373 = inversesqrt(dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369)));
        float _1386 = ((_1373 * _1367) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1324 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1373 * _1368) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1328 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1373 * _1369) / cbModelParam._m0[35u].z) + ((((((_1332 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        float _1423 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1390.x + (-0.5));
        float _1425 = _1423 * (_1390.y + (-0.5));
        float _1426 = _1423 * (_1390.z + (-0.5));
        float _1433 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1397.x + (-0.5));
        float _1435 = _1433 * (_1397.y + (-0.5));
        float _1436 = _1433 * (_1397.z + (-0.5));
        float _1443 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1404.x + (-0.5));
        float _1445 = _1443 * (_1404.y + (-0.5));
        float _1446 = _1443 * (_1404.z + (-0.5));
        float _1453 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1411.x + (-0.5));
        float _1455 = _1453 * (_1411.y + (-0.5));
        float _1456 = _1453 * (_1411.z + (-0.5));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = _1424 * 0.5;
        float _1461 = _1434 * 0.5;
        float _1462 = _1444 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_745, _746, _747), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4248 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1487 + 1.0))) + _1492) * _1457;
        float _1502 = _1425 * 0.5;
        float _1503 = _1435 * 0.5;
        float _1504 = _1445 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_745, _746, _747), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4281 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1529 + 1.0))) + _1534) * _1458;
        float _1544 = _1426 * 0.5;
        float _1545 = _1436 * 0.5;
        float _1546 = _1446 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_745, _746, _747), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4314 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1571 + 1.0))) + _1576) * _1459;
        _1593 = _1426;
        _1594 = _1425;
        _1595 = _1424;
        _1596 = _1436;
        _1597 = _1435;
        _1598 = _1434;
        _1599 = _1446;
        _1600 = _1445;
        _1601 = _1444;
        _1602 = _1459;
        _1603 = _1458;
        _1604 = _1457;
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
    }
    else
    {
        _1593 = _1285;
        _1594 = _1285;
        _1595 = _1285;
        _1596 = _1285;
        _1597 = _1285;
        _1598 = _1285;
        _1599 = _1285;
        _1600 = _1285;
        _1601 = _1285;
        _1602 = _1285;
        _1603 = _1285;
        _1604 = _1285;
        _1605 = 0.0;
        _1606 = 0.0;
        _1607 = 0.0;
    }
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1297)) + _1297;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1298)) + _1298;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1299)) + _1299;
    float _1640 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1617));
    float _1661 = _919 * 0.5;
    float _1662 = _920 * 0.5;
    float _1663 = _921 * 0.5;
    float _1664 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1667 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1670 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1704;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1677 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1284, _1288, _1291, _1294));
        float _1681 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1685 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1692 = dot(vec4(cbModelParam._m0[39u]), vec4(_1661, _1662, _1663, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1715;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1706 = dot(vec4(cbModelParam._m0[40u]), vec4(_1661, _1662, _1663, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1719 = (_1715 * cbModelParam._m0[1u].x) + (_1704 * (1.0 - cbModelParam._m0[1u].x));
    float _1729 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _748);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1729 : min(cbModelParam._m0[25u].z, _1729));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1778 = fma(_983, cbModelParam._m0[13u].z, fma(_979, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975)) + cbModelParam._m0[13u].w;
        float _1782 = fma(_983, cbModelParam._m0[14u].z, fma(_979, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975)) + cbModelParam._m0[14u].w;
        float _1786 = fma(_983, cbModelParam._m0[15u].z, fma(_979, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975)) + cbModelParam._m0[15u].w;
        float _1789 = fma(_921, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _919));
        float _1792 = fma(_921, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _919));
        float _1795 = fma(_921, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _919));
        float _1823;
        if (_1789 > 0.0)
        {
            _1823 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1823 = frontier_phi_14_12_ladder;
        }
        float _1995;
        if (_1792 > 0.0)
        {
            _1995 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1995 = frontier_phi_23_19_ladder;
        }
        float _2290;
        if (_1795 > 0.0)
        {
            _2290 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2290 = frontier_phi_35_30_ladder;
        }
        float _2292 = isnan(_1995) ? _1823 : (isnan(_1823) ? _1995 : min(_1823, _1995));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1789) + _1778;
        float _2298 = (_2293 * _1792) + _1782;
        float _2299 = (_2293 * _1795) + _1786;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2300;
        float _2304 = _2300 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 > _2304) || ((_2298 < _2302) || ((_2297 < _2302) || (_2297 > _2304))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2444 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2299, cbModelParam._m0[9u].z, fma(_2298, cbModelParam._m0[9u].y, _2297 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2299, cbModelParam._m0[10u].z, fma(_2298, cbModelParam._m0[10u].y, _2297 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2299, cbModelParam._m0[11u].z, fma(_2298, cbModelParam._m0[11u].y, _2297 * cbModelParam._m0[11u].x))), _1730);
            frontier_phi_13_35_ladder = _2444.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2444.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2444.x * cbModelParam._m0[1u].y;
        }
        _1811 = frontier_phi_13_35_ladder_2;
        _1813 = frontier_phi_13_35_ladder_1;
        _1815 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_919, _920, _921), _1730);
        _1811 = _1799.x * cbModelParam._m0[1u].y;
        _1813 = _1799.y * cbModelParam._m0[1u].y;
        _1815 = _1799.z * cbModelParam._m0[1u].y;
    }
    float _1819 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _748);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1819 : min(cbModelParam._m0[25u].w, _1819));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1874 = fma(_983, cbModelParam._m0[21u].z, fma(_979, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975)) + cbModelParam._m0[21u].w;
        float _1878 = fma(_983, cbModelParam._m0[22u].z, fma(_979, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975)) + cbModelParam._m0[22u].w;
        float _1882 = fma(_983, cbModelParam._m0[23u].z, fma(_979, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975)) + cbModelParam._m0[23u].w;
        float _1885 = fma(_921, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _919));
        float _1888 = fma(_921, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _919));
        float _1891 = fma(_921, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _919));
        float _2000;
        if (_1885 > 0.0)
        {
            _2000 = abs((1.0 - _1874) / _1885);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1874 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2000 = frontier_phi_25_21_ladder;
        }
        float _2317;
        if (_1888 > 0.0)
        {
            _2317 = abs((1.0 - _1878) / _1888);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1878 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2317 = frontier_phi_37_32_ladder;
        }
        float _2655;
        if (_1891 > 0.0)
        {
            _2655 = abs((1.0 - _1882) / _1891);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1882 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2655 = frontier_phi_47_44_ladder;
        }
        float _2657 = isnan(_2317) ? _2000 : (isnan(_2000) ? _2317 : min(_2000, _2317));
        float _2658 = isnan(_2655) ? _2657 : (isnan(_2657) ? _2655 : min(_2657, _2655));
        float _2662 = (_2658 * _1885) + _1874;
        float _2663 = (_2658 * _1888) + _1878;
        float _2664 = (_2658 * _1891) + _1882;
        float _2665 = _2658 * 9.9999997473787516355514526367188e-05;
        float _2666 = (-1.0) - _2665;
        float _2668 = _2665 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2664 > _2668) || ((_2664 < _2666) || ((_2663 > _2668) || ((_2663 < _2666) || ((_2662 < _2666) || (_2662 > _2668))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2664, cbModelParam._m0[17u].z, fma(_2663, cbModelParam._m0[17u].y, _2662 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2664, cbModelParam._m0[18u].z, fma(_2663, cbModelParam._m0[18u].y, _2662 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2664, cbModelParam._m0[19u].z, fma(_2663, cbModelParam._m0[19u].y, _2662 * cbModelParam._m0[19u].x))), _1820);
            frontier_phi_22_47_ladder = _2786.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2786.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2786.x * cbModelParam._m0[1u].z;
        }
        _1910 = frontier_phi_22_47_ladder_2;
        _1912 = frontier_phi_22_47_ladder_1;
        _1914 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_919, _920, _921), _1820);
        _1910 = _1894.x * cbModelParam._m0[1u].z;
        _1912 = _1894.y * cbModelParam._m0[1u].z;
        _1914 = _1894.z * cbModelParam._m0[1u].z;
    }
    float _1927 = (((_946 * _895) + _947) * _911) * ((cbModelParam._m0[1u].w * (_1910 - _1811)) + _1811);
    float _1929 = (((_946 * _897) + _947) * _911) * ((cbModelParam._m0[1u].w * (_1912 - _1813)) + _1813);
    float _1931 = (((_946 * _898) + _947) * _911) * ((cbModelParam._m0[1u].w * (_1914 - _1815)) + _1815);
    float _1934 = fma(_1931, cbSceneParam._m0[89u].z, fma(_1929, cbSceneParam._m0[89u].y, _1927 * cbSceneParam._m0[89u].x));
    float _1937 = fma(_1931, cbSceneParam._m0[90u].z, fma(_1929, cbSceneParam._m0[90u].y, _1927 * cbSceneParam._m0[90u].x));
    float _1940 = fma(_1931, cbSceneParam._m0[91u].z, fma(_1929, cbSceneParam._m0[91u].y, _1927 * cbSceneParam._m0[91u].x));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1987 = _1974 / _1986;
    float _1988 = _1978 / _1986;
    float _1989 = _1982 / _1986;
    float _2136;
    float _2137;
    float _2138;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2016 = ((uint(_1989 > cbSceneParam._m0[59u].y) + uint(_1989 > cbSceneParam._m0[59u].x)) + uint(_1989 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2017 = _2016 + 43u;
        uint _2025 = _2016 + 44u;
        uint _2033 = _2016 + 45u;
        uint _2041 = _2016 + 46u;
        float _2052 = fma(_1986, cbSceneParam._m0[_2017].w, fma(_1982, cbSceneParam._m0[_2017].z, fma(_1978, cbSceneParam._m0[_2017].y, _1974 * cbSceneParam._m0[_2017].x)));
        float _2056 = fma(_1986, cbSceneParam._m0[_2025].w, fma(_1982, cbSceneParam._m0[_2025].z, fma(_1978, cbSceneParam._m0[_2025].y, _1974 * cbSceneParam._m0[_2025].x)));
        float _2064 = fma(_1986, cbSceneParam._m0[_2041].w, fma(_1982, cbSceneParam._m0[_2041].z, fma(_1978, cbSceneParam._m0[_2041].y, _1974 * cbSceneParam._m0[_2041].x)));
        float _2069 = cbSceneParam._m0[33u].z * _2064;
        float _2071 = cbSceneParam._m0[33u].w * _2064;
        float _2074 = fma(_1986, cbSceneParam._m0[_2033].w, fma(_1982, cbSceneParam._m0[_2033].z, fma(_1978, cbSceneParam._m0[_2033].y, _1974 * cbSceneParam._m0[_2033].x))) / _2064;
        float _2122 = (cbSceneParam._m0[33u].x - sqrt(((_1988 * _1988) + (_1987 * _1987)) + (_1989 * _1989))) * cbSceneParam._m0[33u].y;
        float _4440 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2129 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2069 + _2052) / _2064, (_2071 + _2056) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2071 + _2052) / _2064, (_2056 - _2069) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 - _2069) / _2064, (_2056 - _2071) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 - _2071) / _2064, (_2069 + _2056) / _2064), _2074), 0.0)).x), vec4(0.25)));
        _2136 = 1.0 - (_2129 * cbSceneParam._m0[34u].x);
        _2137 = 1.0 - (_2129 * cbSceneParam._m0[34u].y);
        _2138 = 1.0 - (_2129 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2136 = 1.0;
        _2137 = 1.0;
        _2138 = 1.0;
    }
    float _2202;
    float _2204;
    float _2206;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2190 = fma(_1986, cbSceneParam._m0[63u].w, fma(_1982, cbSceneParam._m0[63u].z, fma(_1978, cbSceneParam._m0[63u].y, _1974 * cbSceneParam._m0[63u].x)));
        float _2191 = fma(_1986, cbSceneParam._m0[60u].w, fma(_1982, cbSceneParam._m0[60u].z, fma(_1978, cbSceneParam._m0[60u].y, _1974 * cbSceneParam._m0[60u].x))) / _2190;
        float _2192 = fma(_1986, cbSceneParam._m0[61u].w, fma(_1982, cbSceneParam._m0[61u].z, fma(_1978, cbSceneParam._m0[61u].y, _1974 * cbSceneParam._m0[61u].x))) / _2190;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2191 >= cbSceneParam._m0[64u].x) && (_2192 >= cbSceneParam._m0[64u].y)) && (_2191 <= cbSceneParam._m0[64u].z)) && (_2192 <= cbSceneParam._m0[64u].w))
        {
            float _2330 = fma(_1986, cbSceneParam._m0[62u].w, fma(_1982, cbSceneParam._m0[62u].z, fma(_1978, cbSceneParam._m0[62u].y, _1974 * cbSceneParam._m0[62u].x))) / _2190;
            float _2334 = isnan(cbSceneParam._m0[41u].w) ? _2330 : (isnan(_2330) ? cbSceneParam._m0[41u].w : max(_2330, cbSceneParam._m0[41u].w));
            float _2377 = (cbSceneParam._m0[33u].x - sqrt(((_1988 * _1988) + (_1987 * _1987)) + (_1989 * _1989))) * cbSceneParam._m0[33u].y;
            float _4456 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
            float _2384 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2191, cbSceneParam._m0[33u].w + _2192), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2191, _2192 - cbSceneParam._m0[33u].z), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2191 - cbSceneParam._m0[33u].z, _2192 - cbSceneParam._m0[33u].w), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2191 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2192), _2334), 0.0)).x), vec4(0.25)));
            float _2388 = 1.0 - (_2384 * cbSceneParam._m0[34u].x);
            float _2389 = 1.0 - (_2384 * cbSceneParam._m0[34u].y);
            float _2390 = 1.0 - (_2384 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2390) ? _2138 : (isnan(_2138) ? _2390 : min(_2138, _2390));
            frontier_phi_34_33_ladder_1 = isnan(_2389) ? _2137 : (isnan(_2137) ? _2389 : min(_2137, _2389));
            frontier_phi_34_33_ladder_2 = isnan(_2388) ? _2136 : (isnan(_2136) ? _2388 : min(_2136, _2388));
        }
        else
        {
            frontier_phi_34_33_ladder = _2138;
            frontier_phi_34_33_ladder_1 = _2137;
            frontier_phi_34_33_ladder_2 = _2136;
        }
        _2202 = frontier_phi_34_33_ladder_2;
        _2204 = frontier_phi_34_33_ladder_1;
        _2206 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2202 = _2136;
        _2204 = _2137;
        _2206 = _2138;
    }
    uvec4 _2211 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _2213 = _2211.x * 14u;
    uint _2214 = _2213 + 13u;
    float _2221 = _911 + (-1.0);
    float _2226 = (cbLight._m0[_2214].x * _2221) + 1.0;
    float _2227 = (cbLight._m0[_2214].y * _2221) + 1.0;
    float _2228 = (cbLight._m0[_2214].z * _2221) + 1.0;
    float _2229 = (cbLight._m0[_2214].w * _2221) + 1.0;
    uint _2230 = _2213 + 5u;
    float _2236 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    uint _2240 = _2213 + 4u;
    float _2249 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2253 = _2213 | 1u;
    float _2264 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_745, _746, _747));
    float _2267 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_745, _746, _747));
    float _4492 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _4503 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2272 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * 0.3183098733425140380859375;
    float _2274 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * 0.3183098733425140380859375;
    float _2281 = ((cbLight._m0[_2230].x * _2236) * _2274) + (((cbLight._m0[_2240].x * _2202) * _2249) * _2272);
    float _2282 = ((_2236 * cbLight._m0[_2230].y) * _2274) + (((cbLight._m0[_2240].y * _2204) * _2249) * _2272);
    float _2283 = ((_2236 * cbLight._m0[_2230].z) * _2274) + (((cbLight._m0[_2240].z * _2206) * _2249) * _2272);
    uvec4 _2287 = floatBitsToUint(cbLight._m0[_2213 + 12u]);
    bool _2289 = _2287.x == 0u;
    float _2391;
    float _2393;
    float _2395;
    if (_2289)
    {
        _2391 = _2281;
        _2393 = _2282;
        _2395 = _2283;
    }
    else
    {
        uint _2399 = _2213 + 6u;
        float _2415 = (dot(vec3(cbLight._m0[_2213 + 2u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2416 = _2415 * _2415;
        float _4514 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2417 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2418 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2391 = (((cbLight._m0[_2399].x * 0.3183098733425140380859375) * _2417) * _2418) + _2281;
        _2393 = (((cbLight._m0[_2399].y * 0.3183098733425140380859375) * _2417) * _2418) + _2282;
        _2395 = (((cbLight._m0[_2399].z * 0.3183098733425140380859375) * _2417) * _2418) + _2283;
    }
    bool _2398 = _2287.y == 0u;
    float _2453;
    float _2455;
    float _2457;
    if (_2398)
    {
        _2453 = _2391;
        _2455 = _2393;
        _2457 = _2395;
    }
    else
    {
        uint _2626 = _2213 + 7u;
        float _2642 = (dot(vec3(cbLight._m0[_2213 + 3u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2643 = _2642 * _2642;
        float _4530 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2644 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2645 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2453 = (((cbLight._m0[_2626].x * 0.3183098733425140380859375) * _2644) * _2645) + _2391;
        _2455 = (((cbLight._m0[_2626].y * 0.3183098733425140380859375) * _2644) * _2645) + _2393;
        _2457 = (((cbLight._m0[_2626].z * 0.3183098733425140380859375) * _2644) * _2645) + _2395;
    }
    uint _2460 = _2213 + 8u;
    float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _748) * 0.949999988079071044921875);
    float _2474 = _2473 * _2473;
    float _2475 = cbLight._m0[_2213].x + _825;
    float _2476 = cbLight._m0[_2213].y + _826;
    float _2477 = cbLight._m0[_2213].z + _827;
    float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
    float _2482 = _2481 * _2475;
    float _2483 = _2481 * _2476;
    float _2484 = _2481 * _2477;
    float _2485 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2213].xyz));
    float _4546 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2488 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _4557 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _2489 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2490 = dot(vec3(_745, _746, _747), vec3(_2482, _2483, _2484));
    float _4568 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2494 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2482, _2483, _2484));
    float _4579 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2498 = _2474 * _2474;
    float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
    float _2510 = exp2(log2(1.0 - (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) * 5.0);
    float _2511 = 0.959999978542327880859375 - _892;
    float _2513 = 0.959999978542327880859375 - _893;
    float _2514 = 0.959999978542327880859375 - _894;
    float _2521 = 1.0 - _2474;
    float _2532 = (0.5 / (((_2489 * ((_2488 * _2521) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2521) + _2474) * _2488))) * _2488;
    float _4590 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2534 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
    uint _2548 = _2213 + 9u;
    float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _748) * 0.949999988079071044921875);
    float _2560 = _2559 * _2559;
    float _2561 = cbLight._m0[_2253].x + _825;
    float _2562 = cbLight._m0[_2253].y + _826;
    float _2563 = cbLight._m0[_2253].z + _827;
    float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
    float _2568 = _2567 * _2561;
    float _2569 = _2567 * _2562;
    float _2570 = _2567 * _2563;
    float _2571 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2253].xyz));
    float _4601 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2575 = dot(vec3(_745, _746, _747), vec3(_2568, _2569, _2570));
    float _4612 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2579 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2568, _2569, _2570));
    float _4623 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2583 = _2560 * _2560;
    float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
    float _2594 = exp2(log2(1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * 5.0);
    float _2601 = 1.0 - _2560;
    float _2611 = (0.5 / (((_2489 * ((_2574 * _2601) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2601) + _2560) * _2574))) * _2574;
    float _4634 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2613 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
    float _2623 = (((((_2594 * _2511) + _895) * cbLight._m0[_2548].x) * _2613) * _2236) + ((((cbLight._m0[_2460].x * _2202) * ((_2510 * _2511) + _895)) * _2534) * _2249);
    float _2624 = (((((_2594 * _2513) + _897) * cbLight._m0[_2548].y) * _2613) * _2236) + ((((cbLight._m0[_2460].y * _2204) * ((_2510 * _2513) + _897)) * _2534) * _2249);
    float _2625 = (((((_2594 * _2514) + _898) * cbLight._m0[_2548].z) * _2613) * _2236) + ((((cbLight._m0[_2460].z * _2206) * ((_2510 * _2514) + _898)) * _2534) * _2249);
    float _2681;
    float _2683;
    float _2685;
    if (_2289)
    {
        _2681 = _2623;
        _2683 = _2624;
        _2685 = _2625;
    }
    else
    {
        uint _2687 = _2213 + 2u;
        uint _2691 = _2213 + 10u;
        float _2705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2687].w)) * _748) * 0.949999988079071044921875);
        float _2706 = _2705 * _2705;
        float _2707 = cbLight._m0[_2687].x + _825;
        float _2708 = cbLight._m0[_2687].y + _826;
        float _2709 = cbLight._m0[_2687].z + _827;
        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
        float _2714 = _2713 * _2707;
        float _2715 = _2713 * _2708;
        float _2716 = _2713 * _2709;
        float _2717 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2687].xyz));
        float _4645 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2721 = dot(vec3(_745, _746, _747), vec3(_2714, _2715, _2716));
        float _4656 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2725 = dot(vec3(cbLight._m0[_2687].xyz), vec3(_2714, _2715, _2716));
        float _4667 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2729 = _2706 * _2706;
        float _2733 = ((_2724 * _2724) * (_2729 + (-1.0))) + 1.0;
        float _2740 = exp2(log2(1.0 - (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) * 5.0);
        float _2747 = 1.0 - _2706;
        float _2757 = (0.5 / (((_2489 * ((_2720 * _2747) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2747) + _2706) * _2720))) * _2720;
        float _4678 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2759 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2729 / ((_2733 * _2733) * 3.141590118408203125));
        float _2760 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2681 = (((((_2740 * _2511) + _895) * cbLight._m0[_2691].x) * _2759) * _2760) + _2623;
        _2683 = (((((_2740 * _2513) + _897) * cbLight._m0[_2691].y) * _2759) * _2760) + _2624;
        _2685 = (((((_2740 * _2514) + _898) * cbLight._m0[_2691].z) * _2759) * _2760) + _2625;
    }
    float _2791;
    float _2793;
    float _2795;
    if (_2398)
    {
        _2791 = _2681;
        _2793 = _2683;
        _2795 = _2685;
    }
    else
    {
        uint _2802 = _2213 + 3u;
        uint _2806 = _2213 + 11u;
        float _2820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2802].w)) * _748) * 0.949999988079071044921875);
        float _2821 = _2820 * _2820;
        float _2822 = cbLight._m0[_2802].x + _825;
        float _2823 = cbLight._m0[_2802].y + _826;
        float _2824 = cbLight._m0[_2802].z + _827;
        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
        float _2829 = _2828 * _2822;
        float _2830 = _2828 * _2823;
        float _2831 = _2828 * _2824;
        float _2832 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2802].xyz));
        float _4694 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2835 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2836 = dot(vec3(_745, _746, _747), vec3(_2829, _2830, _2831));
        float _4705 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2840 = dot(vec3(cbLight._m0[_2802].xyz), vec3(_2829, _2830, _2831));
        float _4716 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2844 = _2821 * _2821;
        float _2848 = ((_2839 * _2839) * (_2844 + (-1.0))) + 1.0;
        float _2855 = exp2(log2(1.0 - (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) * 5.0);
        float _2862 = 1.0 - _2821;
        float _2872 = (0.5 / (((_2489 * ((_2835 * _2862) + _2821)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2862) + _2821) * _2835))) * _2835;
        float _4727 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2874 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2844 / ((_2848 * _2848) * 3.141590118408203125));
        float _2875 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2791 = (((((_2855 * _2511) + _895) * cbLight._m0[_2806].x) * _2874) * _2875) + _2681;
        _2793 = (((((_2855 * _2513) + _897) * cbLight._m0[_2806].y) * _2874) * _2875) + _2683;
        _2795 = (((((_2855 * _2514) + _898) * cbLight._m0[_2806].z) * _2874) * _2875) + _2685;
    }
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_2211.y == 0u)
    {
        uvec4 _2896 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2897 = _2896.x;
        uint _2908 = uint((float(_2896.y) * floor(float(uint(cbSceneParam._m0[85u].y * _834) / _2897))) + floor(float(uint(cbSceneParam._m0[85u].x * _833) / _2897)));
        float _2918 = (log2(_1989 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2919 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        uint _2922 = uint(isnan(14.0) ? _2919 : (isnan(_2919) ? 14.0 : min(_2919, 14.0)));
        uvec4 _2927 = texelFetch(g_lightClusterGridBuffer, int(((_2922 << 2u) + (_2908 << 6u)) >> 2u));
        uint _2928 = _2927.x;
        uint _2929 = _2896.z;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        if (((((1u << ((_2929 >> 4u) & 15u)) + 4294967295u) & _2928) == 0u) || ((_2929 & 240u) == 0u))
        {
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
        }
        else
        {
            float _3009;
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            uint _3159 = 0u;
            uint _3168;
            bool _3169;
            for (;;)
            {
                _3168 = texelFetch(g_lightClassification, int((((_2922 << 5u) + (_2908 << 9u)) + (_3159 << 2u)) >> 2u)).x;
                _3169 = _3168 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3169)
                {
                    frontier_phi_66_pred = _3158;
                    frontier_phi_66_pred_1 = _3157;
                    frontier_phi_66_pred_2 = _3156;
                    frontier_phi_66_pred_3 = _3155;
                    frontier_phi_66_pred_4 = _3154;
                    frontier_phi_66_pred_5 = _3153;
                }
                else
                {
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    uint _3283;
                    _3277 = _3153;
                    _3278 = _3154;
                    _3279 = _3155;
                    _3280 = _3156;
                    _3281 = _3157;
                    _3282 = _3158;
                    _3283 = _3168;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    for (;;)
                    {
                        uint _3287 = uint(findLSB(_3283)) + (_3159 << 5u);
                        uint _3284 = (_3283 + 4294967295u) & _3283;
                        uint _3289 = _3287 * 48u;
                        vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 3u)).x));
                        uint _3309 = (_3287 * 48u) + 4u;
                        vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3309)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 3u)).x));
                        uint _3328 = (_3287 * 48u) + 8u;
                        vec3 _3339 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3328)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 2u)).x));
                        float _3343 = _3303.x - _1987;
                        float _3344 = _3303.y - _1988;
                        float _3345 = _3303.z - _1989;
                        float _3346 = dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345));
                        float _3349 = inversesqrt(_3346);
                        float _3350 = _3349 * _3343;
                        float _3351 = _3349 * _3344;
                        float _3352 = _3349 * _3345;
                        float _3353 = dot(vec3(_852, _855, _858), vec3(_3350, _3351, _3352));
                        float _3358 = 1.0 - (_3346 * _3303.w);
                        float _4753 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3359 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3360 = sqrt(_3346) * _3322.w;
                        float _3363 = 1.39999997615814208984375 / (_3360 + 1.39999997615814208984375);
                        float _3364 = _3363 * _3363;
                        float _3367 = ((1.0 - _3364) * _3353) + _3364;
                        float _3370 = _3360 * _3360;
                        float _3374 = ((isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0))) * _3359) / ((_3370 * 0.699999988079071044921875) + 1.0);
                        float _3378 = (-0.0) - _1987;
                        float _3379 = (-0.0) - _1988;
                        float _3380 = (-0.0) - _1989;
                        float _3384 = inversesqrt(dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380)));
                        float _3385 = _3384 * _3378;
                        float _3386 = _3384 * _3379;
                        float _3387 = _3384 * _3380;
                        float _3394 = exp2(log2(1.0 / ((_3370 * 3.5) + 5.0)) * 0.25);
                        float _3395 = 1.0 - _927;
                        float _3402 = sqrt(1.0 - ((1.0 - (_3395 * _3395)) * (1.0 - (_3394 * _3394))));
                        float _3403 = _3402 * _3402;
                        float _3404 = _3403 * _3403;
                        float _3405 = _3385 + _3350;
                        float _3406 = _3386 + _3351;
                        float _3407 = _3387 + _3352;
                        float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                        float _3415 = dot(vec3(_852, _855, _858), vec3(_3385, _3386, _3387));
                        float _4769 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3419 = dot(vec3(_852, _855, _858), vec3(_3411 * _3405, _3411 * _3406, _3411 * _3407));
                        float _4780 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3422 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3426 = ((_3422 * _3422) * (_3404 + (-1.0))) + 1.0;
                        float _3427 = _3363 * _3403;
                        float _3428 = _3427 * _3427;
                        float _3431 = ((1.0 - _3428) * _3353) + _3428;
                        float _4791 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3432 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3433 = 1.0 - _3403;
                        float _3443 = (0.5 / (((_3432 * ((_3418 * _3433) + _3403)) + 9.9999999392252902907785028219223e-09) + (((_3432 * _3433) + _3403) * _3418))) * _3432;
                        float _4802 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3454 = (((_3404 * 3.1415927410125732421875) * (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) / ((_3426 * _3426) * ((_3370 * 2.1991131305694580078125) + 3.141590118408203125))) * _3359;
                        _3212 = (_3374 * _3322.x) + _3280;
                        _3213 = (_3374 * _3322.y) + _3281;
                        _3214 = (_3374 * _3322.z) + _3282;
                        _3209 = (_3454 * _3339.x) + _3277;
                        _3210 = (_3454 * _3339.y) + _3278;
                        _3211 = (_3454 * _3339.z) + _3279;
                        if (_3284 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3277 = _3209;
                            _3278 = _3210;
                            _3279 = _3211;
                            _3280 = _3212;
                            _3281 = _3213;
                            _3282 = _3214;
                            _3283 = _3284;
                        }
                    }
                    frontier_phi_66_pred = _3214;
                    frontier_phi_66_pred_1 = _3213;
                    frontier_phi_66_pred_2 = _3212;
                    frontier_phi_66_pred_3 = _3211;
                    frontier_phi_66_pred_4 = _3210;
                    frontier_phi_66_pred_5 = _3209;
                }
                _3019 = frontier_phi_66_pred;
                _3017 = frontier_phi_66_pred_1;
                _3015 = frontier_phi_66_pred_2;
                _3013 = frontier_phi_66_pred_3;
                _3011 = frontier_phi_66_pred_4;
                _3009 = frontier_phi_66_pred_5;
                uint _3160 = _3159 + 1u;
                if (_3160 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3153 = _3009;
                    _3154 = _3011;
                    _3155 = _3013;
                    _3156 = _3015;
                    _3157 = _3017;
                    _3158 = _3019;
                    _3159 = _3160;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
        }
        uvec4 _3022 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3023 = _3022.z;
        uint _3025 = (_3023 >> 8u) & 15u;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        if (((4294967295u << _3025) & _2928) == 0u)
        {
            _3121 = _3008;
            _3123 = _3010;
            _3125 = _3012;
            _3127 = _3014;
            _3129 = _3016;
            _3131 = _3018;
        }
        else
        {
            float _3146 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
            float _3147 = _3146 * _1987;
            float _3148 = _3146 * _1988;
            float _3149 = _3146 * _1989;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3025 < ((_3023 >> 12u) & 15u))
            {
                float _3122;
                float _3124;
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3260 = _3008;
                float _3261 = _3010;
                float _3262 = _3012;
                float _3263 = _3014;
                float _3264 = _3016;
                float _3265 = _3018;
                uint _3266 = _3025;
                uint _3275;
                bool _3276;
                for (;;)
                {
                    _3275 = texelFetch(g_lightClassification, int((((_2922 << 5u) + (_2908 << 9u)) + (_3266 << 2u)) >> 2u)).x;
                    _3276 = _3275 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3276)
                    {
                        frontier_phi_72_pred = _3265;
                        frontier_phi_72_pred_1 = _3264;
                        frontier_phi_72_pred_2 = _3263;
                        frontier_phi_72_pred_3 = _3262;
                        frontier_phi_72_pred_4 = _3261;
                        frontier_phi_72_pred_5 = _3260;
                    }
                    else
                    {
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3472 = _3260;
                        float _3473 = _3261;
                        float _3474 = _3262;
                        float _3475 = _3263;
                        float _3476 = _3264;
                        float _3477 = _3265;
                        uint _3478 = _3275;
                        uint _3479;
                        vec4 _3504;
                        float _3505;
                        vec4 _3520;
                        vec3 _3532;
                        vec4 _3547;
                        vec4 _3562;
                        float _3608;
                        bool _3609;
                        for (;;)
                        {
                            uint _3489 = ((_3266 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3478));
                            _3479 = (_3478 + 4294967295u) & _3478;
                            uint _3491 = _3489 * 40u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            _3505 = _3504.w;
                            uint _3507 = (_3489 * 40u) + 4u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3489 * 40u) + 8u;
                            _3532 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x));
                            uint _3534 = (_3489 * 40u) + 16u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3489 * 40u) + 20u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3489 * 40u) + 24u;
                            vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3583 = (_3489 * 40u) + 28u;
                            vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            _3608 = fma(_1989, _3596.z, fma(_1988, _3596.y, _3596.x * _1987)) + _3596.w;
                            _3609 = !((fma(_1989, _3577.z, fma(_1988, _3577.y, _3577.x * _1987)) + _3577.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3609)
                            {
                                float _3636 = _3504.x - _1987;
                                float _3637 = _3504.y - _1988;
                                float _3638 = _3504.z - _1989;
                                float _3639 = dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638));
                                float _3642 = inversesqrt(_3639);
                                float _3643 = _3642 * _3636;
                                float _3644 = _3642 * _3637;
                                float _3645 = _3642 * _3638;
                                float _3649 = 1.0 - (_3639 / (_3505 * _3505));
                                float _4813 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3654 = sqrt(_3639) * _3520.w;
                                float _3656 = 1.39999997615814208984375 / (_3654 + 1.39999997615814208984375);
                                float _3657 = _3656 * _3656;
                                float _3660 = ((1.0 - _3657) * dot(vec3(_3643, _3644, _3645), vec3(_852, _855, _858))) + _3657;
                                float _3663 = _3654 * _3654;
                                float _3667 = (fma(_1989, _3547.z, fma(_1988, _3547.y, _3547.x * _1987)) + _3547.w) / _3608;
                                float _3668 = (fma(_1989, _3562.z, fma(_1988, _3562.y, _3562.x * _1987)) + _3562.w) / _3608;
                                float _3672 = 1.0 - dot(vec2(_3667, _3668), vec2(_3667, _3668));
                                float _4829 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3673 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3674 = _3673 * (((isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0))) * _3650) / ((_3663 * 0.699999988079071044921875) + 1.0));
                                float _3686 = exp2(log2(1.0 / ((_3663 * 3.5) + 5.0)) * 0.25);
                                float _3687 = 1.0 - _927;
                                float _3694 = sqrt(1.0 - ((1.0 - (_3687 * _3687)) * (1.0 - (_3686 * _3686))));
                                float _3695 = _3694 * _3694;
                                float _3696 = _3695 * _3695;
                                float _3697 = _3643 - _3147;
                                float _3698 = _3644 - _3148;
                                float _3699 = _3645 - _3149;
                                float _3703 = inversesqrt(dot(vec3(_3697, _3698, _3699), vec3(_3697, _3698, _3699)));
                                float _3707 = dot(vec3(_852, _855, _858), vec3((-0.0) - _3147, (-0.0) - _3148, (-0.0) - _3149));
                                float _4840 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3710 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3711 = dot(vec3(_852, _855, _858), vec3(_3703 * _3697, _3703 * _3698, _3703 * _3699));
                                float _4851 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3714 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3718 = ((_3714 * _3714) * (_3696 + (-1.0))) + 1.0;
                                float _3719 = _3656 * _3695;
                                float _3720 = _3719 * _3719;
                                float _3726 = ((1.0 - _3720) * dot(vec3(_852, _855, _858), vec3(_3643, _3644, _3645))) + _3720;
                                float _4862 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3727 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3728 = 1.0 - _3695;
                                float _3738 = (0.5 / (((_3727 * ((_3710 * _3728) + _3695)) + 9.9999999392252902907785028219223e-09) + (((_3727 * _3728) + _3695) * _3710))) * _3727;
                                float _4873 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3748 = (_3673 * _3650) * (((_3696 * 3.1415927410125732421875) * (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) / ((_3718 * _3718) * ((_3663 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3674 * _3520.y;
                                frontier_phi_78_pred_1 = _3674 * _3520.x;
                                frontier_phi_78_pred_2 = _3748 * _3532.z;
                                frontier_phi_78_pred_3 = _3748 * _3532.y;
                                frontier_phi_78_pred_4 = _3748 * _3532.x;
                                frontier_phi_78_pred_5 = _3674 * _3520.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3756 = frontier_phi_78_pred;
                            _3755 = frontier_phi_78_pred_1;
                            _3754 = frontier_phi_78_pred_2;
                            _3753 = frontier_phi_78_pred_3;
                            _3752 = frontier_phi_78_pred_4;
                            _3757 = frontier_phi_78_pred_5;
                            _3462 = _3755 + _3475;
                            _3463 = _3756 + _3476;
                            _3464 = _3757 + _3477;
                            _3459 = _3752 + _3472;
                            _3460 = _3753 + _3473;
                            _3461 = _3754 + _3474;
                            if (_3479 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3479;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3464;
                        frontier_phi_72_pred_1 = _3463;
                        frontier_phi_72_pred_2 = _3462;
                        frontier_phi_72_pred_3 = _3461;
                        frontier_phi_72_pred_4 = _3460;
                        frontier_phi_72_pred_5 = _3459;
                    }
                    _3132 = frontier_phi_72_pred;
                    _3130 = frontier_phi_72_pred_1;
                    _3128 = frontier_phi_72_pred_2;
                    _3126 = frontier_phi_72_pred_3;
                    _3124 = frontier_phi_72_pred_4;
                    _3122 = frontier_phi_72_pred_5;
                    uint _3267 = _3266 + 1u;
                    if (_3267 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3260 = _3122;
                        _3261 = _3124;
                        _3262 = _3126;
                        _3263 = _3128;
                        _3264 = _3130;
                        _3265 = _3132;
                        _3266 = _3267;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3132;
                frontier_phi_60_61_ladder_1 = _3130;
                frontier_phi_60_61_ladder_2 = _3126;
                frontier_phi_60_61_ladder_3 = _3124;
                frontier_phi_60_61_ladder_4 = _3122;
                frontier_phi_60_61_ladder_5 = _3128;
            }
            else
            {
                frontier_phi_60_61_ladder = _3018;
                frontier_phi_60_61_ladder_1 = _3016;
                frontier_phi_60_61_ladder_2 = _3012;
                frontier_phi_60_61_ladder_3 = _3010;
                frontier_phi_60_61_ladder_4 = _3008;
                frontier_phi_60_61_ladder_5 = _3014;
            }
            _3121 = frontier_phi_60_61_ladder_4;
            _3123 = frontier_phi_60_61_ladder_3;
            _3125 = frontier_phi_60_61_ladder_2;
            _3127 = frontier_phi_60_61_ladder_5;
            _3129 = frontier_phi_60_61_ladder_1;
            _3131 = frontier_phi_60_61_ladder;
        }
        float _3136 = isnan(1.0) ? _911 : (isnan(_911) ? 1.0 : min(_911, 1.0));
        _2941 = (_3136 * _3127) + _2453;
        _2943 = (_3136 * _3129) + _2455;
        _2945 = (_3136 * _3131) + _2457;
        _2947 = ((_3121 * _895) * _3136) + _2791;
        _2949 = ((_3123 * _897) * _3136) + _2793;
        _2951 = ((_3125 * _898) * _3136) + _2795;
    }
    else
    {
        _2941 = _2453;
        _2943 = _2455;
        _2945 = _2457;
        _2947 = _2791;
        _2949 = _2793;
        _2951 = _2795;
    }
    float _4889 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4900 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4911 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    uint _2971 = _268 + 6u;
    float _2979 = _833 / cbSceneParam._m0[86u].x;
    float _2980 = _834 / cbSceneParam._m0[86u].y;
    vec4 _2994 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2979, _2980, (log2((isnan(cbSceneParam._m0[77u].w) ? _767 : (isnan(_767) ? cbSceneParam._m0[77u].w : min(_767, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2996 = _2994.x;
    float _2997 = _2994.y;
    float _2998 = _2994.z;
    float _2999 = _2994.w;
    float _3071;
    float _3073;
    float _3075;
    float _3077;
    if (_767 > cbSceneParam._m0[78u].w)
    {
        float _3033 = isnan(_767) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _767 : min(cbSceneParam._m0[80u].w, _767));
        float _3034 = _3033 / _767;
        float _3045 = _3034 * _818;
        float _3046 = _819 * _3034;
        float _3047 = (-0.0) - _3046;
        float _3049 = _3034 * _820;
        float _3051 = (cbSceneParam._m0[77u].w * _3047) / _3033;
        float _3052 = _3051 + cbSceneParam._m0[79u].w;
        float _3053 = cbSceneParam._m0[79u].w - _3046;
        float _3059 = sqrt(((_3045 * _3045) + (_3046 * _3046)) + (_3049 * _3049));
        float _3062 = (1.0 - (cbSceneParam._m0[77u].w / _3033)) * _3059;
        float _3067 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3069 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3222;
        if (abs((_3047 - _3051) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3222 = ((((_3052 > 0.0) ? exp2(_3067 * _3052) : (2.0 - exp2(_3069 * _3052))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3062;
        }
        else
        {
            float _3182 = 1.0 / cbSceneParam._m0[80u].x;
            float _3183 = isnan(_3053) ? _3052 : (isnan(_3052) ? _3053 : max(_3052, _3053));
            float _3184 = isnan(_3053) ? _3052 : (isnan(_3052) ? _3053 : min(_3052, _3053));
            float _3193 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : min(_3183, 0.0));
            float _3194 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : min(_3184, 0.0));
            _3222 = ((abs(_3059 / _3047) * cbSceneParam._m0[80u].y) * ((((_3193 - _3194) * 2.0) - ((exp2(_3067 * (isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0)))) - exp2(_3067 * (isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))))) * _3182)) - ((exp2(_3069 * _3193) - exp2(_3069 * _3194)) * _3182))) + (_3062 * cbSceneParam._m0[80u].z);
        }
        vec4 _3224 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2979, _2980, 1.0), 0.0);
        float _3233 = exp2((_3222 * (-1.44269502162933349609375)) * (1.0 - _3224.w));
        float _3234 = log2(_3233);
        float _3250 = log2(_2999);
        _3071 = (exp2(_3250 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].x)) * _3224.x) / cbSceneParam._m0[78u].x)) + _2996;
        _3073 = (exp2(_3250 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].y)) * _3224.y) / cbSceneParam._m0[78u].y)) + _2997;
        _3075 = (exp2(_3250 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].z)) * _3224.z) / cbSceneParam._m0[78u].z)) + _2998;
        _3077 = _3233 * _2999;
    }
    else
    {
        _3071 = _2996;
        _3073 = _2997;
        _3075 = _2998;
        _3077 = _2999;
    }
    float _3089 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3090 = _3089 == 3.0;
    float _3091 = log2(_3077);
    float _3098 = exp2(_3091 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2941 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _911))) + ((_2947 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1719)) * cbPerFrame._m0[3u].x));
    float _3099 = exp2(_3091 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2943 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _911))) + ((_2949 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1719)) * cbPerFrame._m0[3u].x));
    float _3100 = exp2(_3091 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2945 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _911))) + ((_2951 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1719)) * cbPerFrame._m0[3u].x));
    float _3109 = (_3089 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3109 * (_3090 ? _3098 : (_3098 + (cbSceneParam._m0[72u].w * _3071)));
    SV_Target.y = _3109 * (_3090 ? _3099 : (_3099 + (cbSceneParam._m0[72u].w * _3073)));
    SV_Target.z = _3109 * (_3090 ? _3100 : (_3100 + (cbSceneParam._m0[72u].w * _3075)));
    SV_Target.w = cbInstanceData._m0[_2971].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2971].w;
}


