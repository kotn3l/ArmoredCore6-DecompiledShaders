#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1383;
float _3788;
float _3789;
float _3790;
float _3791;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3800 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _440 = _436.z;
    float _449 = ((_419.z - _440) * _392) + _440;
    float _452 = ((((_419.x - _438) * _392) + _438) * 2.0) + (-1.0);
    float _454 = ((((_419.y - _439) * _392) + _439) * 2.0) + (-1.0);
    float _455 = dot(vec2(_452, _454), vec2(_452, _454));
    float _3811 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _460 = sqrt(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))));
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _488 = (((_476.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _452;
    float _489 = (((_476.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _454;
    float _492 = fma(_460, _243, fma(_489, _250, _488 * _236));
    float _495 = fma(_460, _244, fma(_489, _251, _488 * _237));
    float _498 = fma(_460, _245, fma(_489, _252, _488 * _238));
    float _502 = inversesqrt(dot(vec3(_492, _495, _498), vec3(_492, _495, _498)));
    vec4 _529 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _531 = _529.x;
    float _532 = 1.0 - _531;
    float _536 = ((_531 - _532) * cbMtdParam._m0[24u].z) + _532;
    float _538 = (cbMtdParam._m0[19u].x + dot(vec4(_502 * _492, _502 * _495, _502 * _498, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_536 * cbMtdParam._m0[21u].z);
    float _3822 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _541 = (-0.0) - cbMtdParam._m0[24u].x;
    float _543 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _543 : (isnan(_543) ? 1.0 : min(_543, 1.0));
    float _551 = _539 - ((_539 * TEXCOORD_8.x) * _544);
    float _552 = _539 - ((_539 * TEXCOORD_8.y) * _544);
    float _553 = _539 - ((_539 * TEXCOORD_8.z) * _544);
    float _560 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _564 = ((isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : min(_560, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _572 = (_564 - (((_536 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _564))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3853 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _577 = ((_551 * (cbMtdParam._m0[17u].x - _399)) * _573) + _399;
    float _578 = ((_552 * (cbMtdParam._m0[17u].y - _400)) * _573) + _400;
    float _579 = ((_553 * (cbMtdParam._m0[17u].z - _401)) * _573) + _401;
    vec4 _591 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _593 = _591.x;
    float _594 = 1.0 - _593;
    float _621 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_593 - _594) * cbMtdParam._m0[24u].w) + _594) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3864 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _630 = ((((cbMtdParam._m0[10u].x - _577) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _622) + _577;
    float _631 = ((((cbMtdParam._m0[10u].y - _578) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _622) + _578;
    float _632 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _579)) * _622) + _579;
    vec4 _658 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _660 = _658.x;
    float _678 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _660) * _392) + _660;
    float _682 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _678) * cbMtdParam._m0[19u].z) + _678;
    float _685 = _682 - ((_573 * _551) * _682);
    float _687 = _685 - (_685 * _622);
    float _691 = (cbMtdParam._m0[19u].w * (_476.z - _449)) + _449;
    vec4 _705 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _712 = (_705.x * 2.0) + (-1.0);
    float _713 = (_705.y * 2.0) + (-1.0);
    float _714 = dot(vec2(_712, _713), vec2(_712, _713));
    float _3875 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _723 = (((_705.z - _691) * _551) * _573) + _691;
    float _726 = ((cbMtdParam._m0[23u].y - _723) * _622) + _723;
    vec4 _745 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _751 = (_745.x * 2.0) + (-1.0);
    float _752 = (_745.y * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _3886 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _773 = (((cbMtdParam._m0[21u].x * _488) + ((_712 - _488) * _551)) * _573) + _488;
    float _774 = (((cbMtdParam._m0[21u].x * _489) + ((_713 - _489) * _552)) * _573) + _489;
    float _775 = (((sqrt(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) - _460) * _553) * _573) + _460;
    float _786 = (((_751 - _773) + (_773 * cbMtdParam._m0[22u].z)) * _622) + _773;
    float _787 = (((_752 - _774) + (_774 * cbMtdParam._m0[22u].z)) * _622) + _774;
    float _788 = ((sqrt(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) - _775) * _622) + _775;
    float _790 = cbMtdParam._m0[22u].x + _476.w;
    float _793 = fma(_788, _243, fma(_787, _250, _786 * _236));
    float _796 = fma(_788, _244, fma(_787, _251, _786 * _237));
    float _799 = fma(_788, _245, fma(_787, _252, _786 * _238));
    float _803 = inversesqrt(dot(vec3(_793, _796, _799), vec3(_793, _796, _799)));
    float _804 = _803 * _793;
    float _805 = _803 * _796;
    float _806 = _803 * _799;
    float _3897 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _807 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _3919 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3930 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3941 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3952 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _812 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _826 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _876 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _866);
    float _877 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _866);
    float _878 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _866);
    float _882 = inversesqrt(dot(vec3(_876, _877, _878), vec3(_876, _877, _878)));
    float _883 = _876 * _882;
    float _884 = _877 * _882;
    float _885 = _878 * _882;
    vec4 _890 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _892 = _890.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1064 = sqrt(((_876 * _876) + (_877 * _877)) + (_878 * _878));
        float _1070 = (cbMatDynParam._m0[5u].x * _1064) + cbMatDynParam._m0[5u].y;
        float _3963 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1075 = (cbMatDynParam._m0[5u].z * _1064) + cbMatDynParam._m0[5u].w;
        float _3974 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) - _1071)) + _1071) < ((_892 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _903 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _904 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _922 = fma(_806, cbSceneParam._m0[5u].z, fma(_805, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _804));
    float _925 = fma(_806, cbSceneParam._m0[6u].z, fma(_805, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _804));
    float _928 = fma(_806, cbSceneParam._m0[7u].z, fma(_805, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _804));
    uint _941 = _255 + 9u;
    uint _942 = _941 + uint(cbMatDynParam._m0[0u].w);
    float _948 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * cbInstanceData._m0[_942].x;
    float _949 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * cbInstanceData._m0[_942].y;
    float _950 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * cbInstanceData._m0[_942].z;
    float _3985 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _954 = 1.0 - _812;
    float _955 = _951 * _954;
    float _956 = _952 * _954;
    float _957 = _953 * _954;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _812;
    float _963 = (_952 + (-0.039999999105930328369140625)) * _812;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _812;
    float _965 = _962 + 0.039999999105930328369140625;
    float _967 = _963 + 0.039999999105930328369140625;
    float _968 = _964 + 0.039999999105930328369140625;
    vec4 _977 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _903, cbSceneParam._m0[86u].y * _904));
    float _981 = ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * TEXCOORD_5.w) * _977.x;
    float _982 = dot(vec3(_804, _805, _806), vec3(_883, _884, _885));
    float _985 = _982 * 2.0;
    float _989 = (_985 * _804) - _883;
    float _990 = (_985 * _805) - _884;
    float _991 = (_985 * _806) - _885;
    float _995 = abs(dot(vec3(_883, _884, _885), vec3(_804, _805, _806)));
    float _4018 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _997 = sqrt(_807);
    float _1010 = exp2((_997 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_997 * 3.0));
    float _1016 = (1.0 - _1010) * ((_997 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1017 = _1010 * _997;
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1382;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1107 = fma(_1053, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1045));
        float _1111 = fma(_1053, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1045));
        float _1115 = fma(_1053, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1045));
        float _1140 = _1045 + _804;
        float _1141 = _1049 + _805;
        float _1142 = _1053 + _806;
        float _1152 = fma(_1142, cbModelParam._m0[26u].z, fma(_1141, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1140)) - _1107;
        float _1153 = fma(_1142, cbModelParam._m0[27u].z, fma(_1141, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1140)) - _1111;
        float _1154 = fma(_1142, cbModelParam._m0[28u].z, fma(_1141, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1140)) - _1115;
        float _1158 = inversesqrt(dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154)));
        float _1171 = ((_1158 * _1152) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1107 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1158 * _1153) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1111 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1158 * _1154) / cbModelParam._m0[34u].z) + ((((((_1115 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        float _1210 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1176.x + (-0.5));
        float _1212 = _1210 * (_1176.y + (-0.5));
        float _1213 = _1210 * (_1176.z + (-0.5));
        float _1220 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1183.x + (-0.5));
        float _1222 = _1220 * (_1183.y + (-0.5));
        float _1223 = _1220 * (_1183.z + (-0.5));
        float _1230 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1190.x + (-0.5));
        float _1232 = _1230 * (_1190.y + (-0.5));
        float _1233 = _1230 * (_1190.z + (-0.5));
        float _1240 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1197.x + (-0.5));
        float _1242 = _1240 * (_1197.y + (-0.5));
        float _1243 = _1240 * (_1197.z + (-0.5));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = _1211 * 0.5;
        float _1248 = _1221 * 0.5;
        float _1249 = _1231 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1264 = (dot(vec3(_804, _805, _806), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1274 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4066 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1276 + 1.0))) + _1281) * _1244;
        float _1291 = _1212 * 0.5;
        float _1292 = _1222 * 0.5;
        float _1293 = _1232 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_804, _805, _806), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4099 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1318 + 1.0))) + _1323) * _1245;
        float _1333 = _1213 * 0.5;
        float _1334 = _1223 * 0.5;
        float _1335 = _1233 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_804, _805, _806), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4132 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1360 + 1.0))) + _1365) * _1246;
        _1382 = _1213;
        _1384 = _1212;
        _1385 = _1211;
        _1386 = _1223;
        _1387 = _1222;
        _1388 = _1221;
        _1389 = _1233;
        _1390 = _1232;
        _1391 = _1231;
        _1392 = _1246;
        _1393 = _1245;
        _1394 = _1244;
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
    }
    else
    {
        _1382 = _1383;
        _1384 = _1383;
        _1385 = _1383;
        _1386 = _1383;
        _1387 = _1383;
        _1388 = _1383;
        _1389 = _1383;
        _1390 = _1383;
        _1391 = _1383;
        _1392 = _1383;
        _1393 = _1383;
        _1394 = _1383;
        _1395 = 0.0;
        _1396 = 0.0;
        _1397 = 0.0;
    }
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1425 = fma(_1053, cbModelParam._m0[30u].z, fma(_1049, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1045));
        float _1429 = fma(_1053, cbModelParam._m0[31u].z, fma(_1049, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1045));
        float _1433 = fma(_1053, cbModelParam._m0[32u].z, fma(_1049, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1045));
        float _1456 = _1045 + _804;
        float _1457 = _1049 + _805;
        float _1458 = _1053 + _806;
        float _1468 = fma(_1458, cbModelParam._m0[30u].z, fma(_1457, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1456)) - _1425;
        float _1469 = fma(_1458, cbModelParam._m0[31u].z, fma(_1457, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1456)) - _1429;
        float _1470 = fma(_1458, cbModelParam._m0[32u].z, fma(_1457, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1456)) - _1433;
        float _1474 = inversesqrt(dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470)));
        float _1487 = ((_1474 * _1468) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1425 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1488 = ((_1474 * _1469) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1429 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1474 * _1470) / cbModelParam._m0[35u].z) + ((((((_1433 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1512 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        float _1524 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1491.x + (-0.5));
        float _1526 = _1524 * (_1491.y + (-0.5));
        float _1527 = _1524 * (_1491.z + (-0.5));
        float _1534 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1498.x + (-0.5));
        float _1536 = _1534 * (_1498.y + (-0.5));
        float _1537 = _1534 * (_1498.z + (-0.5));
        float _1544 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1505.x + (-0.5));
        float _1546 = _1544 * (_1505.y + (-0.5));
        float _1547 = _1544 * (_1505.z + (-0.5));
        float _1554 = exp2((_1512.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1512.x + (-0.5));
        float _1556 = _1554 * (_1512.y + (-0.5));
        float _1557 = _1554 * (_1512.z + (-0.5));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = _1525 * 0.5;
        float _1562 = _1535 * 0.5;
        float _1563 = _1545 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_804, _805, _806), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4195 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1588 + 1.0))) + _1593) * _1558;
        float _1603 = _1526 * 0.5;
        float _1604 = _1536 * 0.5;
        float _1605 = _1546 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_804, _805, _806), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4228 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1630 + 1.0))) + _1635) * _1559;
        float _1645 = _1527 * 0.5;
        float _1646 = _1537 * 0.5;
        float _1647 = _1547 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_804, _805, _806), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4261 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1672 + 1.0))) + _1677) * _1560;
        _1694 = _1527;
        _1695 = _1526;
        _1696 = _1525;
        _1697 = _1537;
        _1698 = _1536;
        _1699 = _1535;
        _1700 = _1547;
        _1701 = _1546;
        _1702 = _1545;
        _1703 = _1560;
        _1704 = _1559;
        _1705 = _1558;
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
    }
    else
    {
        _1694 = _1383;
        _1695 = _1383;
        _1696 = _1383;
        _1697 = _1383;
        _1698 = _1383;
        _1699 = _1383;
        _1700 = _1383;
        _1701 = _1383;
        _1702 = _1383;
        _1703 = _1383;
        _1704 = _1383;
        _1705 = _1383;
        _1706 = 0.0;
        _1707 = 0.0;
        _1708 = 0.0;
    }
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1395)) + _1395;
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1396)) + _1396;
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1397)) + _1397;
    float _1741 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1719, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1744 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1719, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1747 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1719, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1718));
    float _1762 = _989 * 0.5;
    float _1763 = _990 * 0.5;
    float _1764 = _991 * 0.5;
    float _1765 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1768 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1771 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1805;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1778 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1382, _1386, _1389, _1392));
        float _1782 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1786 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1385, _1388, _1391, _1394));
        float _1793 = dot(vec4(cbModelParam._m0[39u]), vec4(_1762, _1763, _1764, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1793) ? 0.0 : (isnan(0.0) ? _1793 : max(0.0, _1793))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1816;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1807 = dot(vec4(cbModelParam._m0[40u]), vec4(_1762, _1763, _1764, 1.0));
        _1816 = dot(vec3(isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1807) ? 0.0 : (isnan(0.0) ? _1807 : max(0.0, _1807))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1816 = 1.0;
    }
    float _1820 = (_1816 * cbModelParam._m0[1u].x) + (_1805 * (1.0 - cbModelParam._m0[1u].x));
    float _1830 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _807);
    float _1831 = isnan(_1830) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1830 : min(cbModelParam._m0[25u].z, _1830));
    float _1912;
    float _1914;
    float _1916;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1879 = fma(_1053, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1045)) + cbModelParam._m0[13u].w;
        float _1883 = fma(_1053, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1045)) + cbModelParam._m0[14u].w;
        float _1887 = fma(_1053, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1045)) + cbModelParam._m0[15u].w;
        float _1890 = fma(_991, cbModelParam._m0[13u].z, fma(_990, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _989));
        float _1893 = fma(_991, cbModelParam._m0[14u].z, fma(_990, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _989));
        float _1896 = fma(_991, cbModelParam._m0[15u].z, fma(_990, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _989));
        float _1924;
        if (_1890 > 0.0)
        {
            _1924 = abs((1.0 - _1879) / _1890);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1879 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1924 = frontier_phi_17_15_ladder;
        }
        float _2148;
        if (_1893 > 0.0)
        {
            _2148 = abs((1.0 - _1883) / _1893);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1883 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2148 = frontier_phi_26_22_ladder;
        }
        float _2405;
        if (_1896 > 0.0)
        {
            _2405 = abs((1.0 - _1887) / _1896);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1887 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2405 = frontier_phi_38_33_ladder;
        }
        float _2407 = isnan(_2148) ? _1924 : (isnan(_1924) ? _2148 : min(_1924, _2148));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1890) + _1879;
        float _2413 = (_2408 * _1893) + _1883;
        float _2414 = (_2408 * _1896) + _1887;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2417 = (-1.0) - _2415;
        float _2419 = _2415 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2414 > _2419) || ((_2414 < _2417) || ((_2413 > _2419) || ((_2413 < _2417) || ((_2412 < _2417) || (_2412 > _2419))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2414, cbModelParam._m0[9u].z, fma(_2413, cbModelParam._m0[9u].y, _2412 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2414, cbModelParam._m0[10u].z, fma(_2413, cbModelParam._m0[10u].y, _2412 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2414, cbModelParam._m0[11u].z, fma(_2413, cbModelParam._m0[11u].y, _2412 * cbModelParam._m0[11u].x))), _1831);
            frontier_phi_16_38_ladder = _2542.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2542.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2542.x * cbModelParam._m0[1u].y;
        }
        _1912 = frontier_phi_16_38_ladder_2;
        _1914 = frontier_phi_16_38_ladder_1;
        _1916 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_989, _990, _991), _1831);
        _1912 = _1900.x * cbModelParam._m0[1u].y;
        _1914 = _1900.y * cbModelParam._m0[1u].y;
        _1916 = _1900.z * cbModelParam._m0[1u].y;
    }
    float _1920 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _807);
    float _1921 = isnan(_1920) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1920 : min(cbModelParam._m0[25u].w, _1920));
    float _2011;
    float _2013;
    float _2015;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1975 = fma(_1053, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1045)) + cbModelParam._m0[21u].w;
        float _1979 = fma(_1053, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1045)) + cbModelParam._m0[22u].w;
        float _1983 = fma(_1053, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1045)) + cbModelParam._m0[23u].w;
        float _1986 = fma(_991, cbModelParam._m0[21u].z, fma(_990, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _989));
        float _1989 = fma(_991, cbModelParam._m0[22u].z, fma(_990, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _989));
        float _1992 = fma(_991, cbModelParam._m0[23u].z, fma(_990, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _989));
        float _2153;
        if (_1986 > 0.0)
        {
            _2153 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2153 = frontier_phi_28_24_ladder;
        }
        float _2432;
        if (_1989 > 0.0)
        {
            _2432 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2432 = frontier_phi_40_35_ladder;
        }
        float _2645;
        if (_1992 > 0.0)
        {
            _2645 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2645 = frontier_phi_49_46_ladder;
        }
        float _2647 = isnan(_2432) ? _2153 : (isnan(_2153) ? _2432 : min(_2153, _2432));
        float _2648 = isnan(_2645) ? _2647 : (isnan(_2647) ? _2645 : min(_2647, _2645));
        float _2652 = (_2648 * _1986) + _1975;
        float _2653 = (_2648 * _1989) + _1979;
        float _2654 = (_2648 * _1992) + _1983;
        float _2655 = _2648 * 9.9999997473787516355514526367188e-05;
        float _2656 = (-1.0) - _2655;
        float _2658 = _2655 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2654 > _2658) || ((_2654 < _2656) || ((_2653 > _2658) || ((_2653 < _2656) || ((_2652 < _2656) || (_2652 > _2658))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2853 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2654, cbModelParam._m0[17u].z, fma(_2653, cbModelParam._m0[17u].y, _2652 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2654, cbModelParam._m0[18u].z, fma(_2653, cbModelParam._m0[18u].y, _2652 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2654, cbModelParam._m0[19u].z, fma(_2653, cbModelParam._m0[19u].y, _2652 * cbModelParam._m0[19u].x))), _1921);
            frontier_phi_25_49_ladder = _2853.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2853.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2853.x * cbModelParam._m0[1u].z;
        }
        _2011 = frontier_phi_25_49_ladder_2;
        _2013 = frontier_phi_25_49_ladder_1;
        _2015 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1995 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_989, _990, _991), _1921);
        _2011 = _1995.x * cbModelParam._m0[1u].z;
        _2013 = _1995.y * cbModelParam._m0[1u].z;
        _2015 = _1995.z * cbModelParam._m0[1u].z;
    }
    float _2028 = (((_1016 * _965) + _1017) * _981) * ((cbModelParam._m0[1u].w * (_2011 - _1912)) + _1912);
    float _2030 = (((_1016 * _967) + _1017) * _981) * ((cbModelParam._m0[1u].w * (_2013 - _1914)) + _1914);
    float _2032 = (((_1016 * _968) + _1017) * _981) * ((cbModelParam._m0[1u].w * (_2015 - _1916)) + _1916);
    float _2035 = fma(_2032, cbSceneParam._m0[89u].z, fma(_2030, cbSceneParam._m0[89u].y, _2028 * cbSceneParam._m0[89u].x));
    float _2038 = fma(_2032, cbSceneParam._m0[90u].z, fma(_2030, cbSceneParam._m0[90u].y, _2028 * cbSceneParam._m0[90u].x));
    float _2041 = fma(_2032, cbSceneParam._m0[91u].z, fma(_2030, cbSceneParam._m0[91u].y, _2028 * cbSceneParam._m0[91u].x));
    vec4 _2049 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_903, _904));
    float _2051 = _2049.w;
    float _2063 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2051);
    float _2064 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2051);
    float _2065 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2051);
    uvec4 _2069 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2071 = _2069.x * 14u;
    uint _2072 = _2071 + 13u;
    float _2079 = _981 + (-1.0);
    float _2084 = (cbLight._m0[_2072].x * _2079) + 1.0;
    float _2085 = (cbLight._m0[_2072].y * _2079) + 1.0;
    float _2086 = (cbLight._m0[_2072].z * _2079) + 1.0;
    float _2087 = (cbLight._m0[_2072].w * _2079) + 1.0;
    uint _2088 = _2071 + 5u;
    float _2094 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
    uint _2098 = _2071 + 4u;
    float _2107 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
    uint _2111 = _2071 | 1u;
    float _2122 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_804, _805, _806));
    float _2125 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_804, _805, _806));
    float _4397 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _4408 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2130 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * 0.3183098733425140380859375;
    float _2132 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * 0.3183098733425140380859375;
    float _2139 = ((cbLight._m0[_2088].x * _2094) * _2132) + (((cbLight._m0[_2098].x * _2063) * _2107) * _2130);
    float _2140 = ((_2094 * cbLight._m0[_2088].y) * _2132) + (((cbLight._m0[_2098].y * _2064) * _2107) * _2130);
    float _2141 = ((_2094 * cbLight._m0[_2088].z) * _2132) + (((cbLight._m0[_2098].z * _2065) * _2107) * _2130);
    uvec4 _2145 = floatBitsToUint(cbLight._m0[_2071 + 12u]);
    bool _2147 = _2145.x == 0u;
    float _2158;
    float _2160;
    float _2162;
    if (_2147)
    {
        _2158 = _2139;
        _2160 = _2140;
        _2162 = _2141;
    }
    else
    {
        uint _2166 = _2071 + 6u;
        float _2182 = (dot(vec3(cbLight._m0[_2071 + 2u].xyz), vec3(_804, _805, _806)) * 0.5) + 0.5;
        float _2183 = _2182 * _2182;
        float _4419 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2184 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2185 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2158 = (((cbLight._m0[_2166].x * 0.3183098733425140380859375) * _2184) * _2185) + _2139;
        _2160 = (((cbLight._m0[_2166].y * 0.3183098733425140380859375) * _2184) * _2185) + _2140;
        _2162 = (((cbLight._m0[_2166].z * 0.3183098733425140380859375) * _2184) * _2185) + _2141;
    }
    bool _2165 = _2145.y == 0u;
    float _2203;
    float _2205;
    float _2207;
    if (_2165)
    {
        _2203 = _2158;
        _2205 = _2160;
        _2207 = _2162;
    }
    else
    {
        uint _2376 = _2071 + 7u;
        float _2392 = (dot(vec3(cbLight._m0[_2071 + 3u].xyz), vec3(_804, _805, _806)) * 0.5) + 0.5;
        float _2393 = _2392 * _2392;
        float _4435 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2394 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2395 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2203 = (((cbLight._m0[_2376].x * 0.3183098733425140380859375) * _2394) * _2395) + _2158;
        _2205 = (((cbLight._m0[_2376].y * 0.3183098733425140380859375) * _2394) * _2395) + _2160;
        _2207 = (((cbLight._m0[_2376].z * 0.3183098733425140380859375) * _2394) * _2395) + _2162;
    }
    uint _2210 = _2071 + 8u;
    float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _807) * 0.949999988079071044921875);
    float _2224 = _2223 * _2223;
    float _2225 = cbLight._m0[_2071].x + _883;
    float _2226 = cbLight._m0[_2071].y + _884;
    float _2227 = cbLight._m0[_2071].z + _885;
    float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
    float _2232 = _2231 * _2225;
    float _2233 = _2231 * _2226;
    float _2234 = _2231 * _2227;
    float _2235 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2071].xyz));
    float _4451 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _4462 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _2239 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2240 = dot(vec3(_804, _805, _806), vec3(_2232, _2233, _2234));
    float _4473 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2244 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2232, _2233, _2234));
    float _4484 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2248 = _2224 * _2224;
    float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
    float _2260 = exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0);
    float _2261 = 0.959999978542327880859375 - _962;
    float _2263 = 0.959999978542327880859375 - _963;
    float _2264 = 0.959999978542327880859375 - _964;
    float _2271 = 1.0 - _2224;
    float _2282 = (0.5 / (((_2239 * ((_2238 * _2271) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2271) + _2224) * _2238))) * _2238;
    float _4495 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2284 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
    uint _2298 = _2071 + 9u;
    float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2111].w)) * _807) * 0.949999988079071044921875);
    float _2310 = _2309 * _2309;
    float _2311 = cbLight._m0[_2111].x + _883;
    float _2312 = cbLight._m0[_2111].y + _884;
    float _2313 = cbLight._m0[_2111].z + _885;
    float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
    float _2318 = _2317 * _2311;
    float _2319 = _2317 * _2312;
    float _2320 = _2317 * _2313;
    float _2321 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2111].xyz));
    float _4506 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2325 = dot(vec3(_804, _805, _806), vec3(_2318, _2319, _2320));
    float _4517 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2329 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2318, _2319, _2320));
    float _4528 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2333 = _2310 * _2310;
    float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
    float _2344 = exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0);
    float _2351 = 1.0 - _2310;
    float _2361 = (0.5 / (((_2239 * ((_2324 * _2351) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2351) + _2310) * _2324))) * _2324;
    float _4539 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2363 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
    float _2373 = (((((_2344 * _2261) + _965) * cbLight._m0[_2298].x) * _2363) * _2094) + ((((cbLight._m0[_2210].x * _2063) * ((_2260 * _2261) + _965)) * _2284) * _2107);
    float _2374 = (((((_2344 * _2263) + _967) * cbLight._m0[_2298].y) * _2363) * _2094) + ((((cbLight._m0[_2210].y * _2064) * ((_2260 * _2263) + _967)) * _2284) * _2107);
    float _2375 = (((((_2344 * _2264) + _968) * cbLight._m0[_2298].z) * _2363) * _2094) + ((((cbLight._m0[_2210].z * _2065) * ((_2260 * _2264) + _968)) * _2284) * _2107);
    float _2437;
    float _2439;
    float _2441;
    if (_2147)
    {
        _2437 = _2373;
        _2439 = _2374;
        _2441 = _2375;
    }
    else
    {
        uint _2443 = _2071 + 2u;
        uint _2447 = _2071 + 10u;
        float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2443].w)) * _807) * 0.949999988079071044921875);
        float _2462 = _2461 * _2461;
        float _2463 = cbLight._m0[_2443].x + _883;
        float _2464 = cbLight._m0[_2443].y + _884;
        float _2465 = cbLight._m0[_2443].z + _885;
        float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
        float _2470 = _2469 * _2463;
        float _2471 = _2469 * _2464;
        float _2472 = _2469 * _2465;
        float _2473 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2443].xyz));
        float _4550 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2477 = dot(vec3(_804, _805, _806), vec3(_2470, _2471, _2472));
        float _4561 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2481 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_2470, _2471, _2472));
        float _4572 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2485 = _2462 * _2462;
        float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
        float _2496 = exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0);
        float _2503 = 1.0 - _2462;
        float _2513 = (0.5 / (((_2239 * ((_2476 * _2503) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2503) + _2462) * _2476))) * _2476;
        float _4583 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2515 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
        float _2516 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2437 = (((((_2496 * _2261) + _965) * cbLight._m0[_2447].x) * _2515) * _2516) + _2373;
        _2439 = (((((_2496 * _2263) + _967) * cbLight._m0[_2447].y) * _2515) * _2516) + _2374;
        _2441 = (((((_2496 * _2264) + _968) * cbLight._m0[_2447].z) * _2515) * _2516) + _2375;
    }
    float _2551;
    float _2553;
    float _2555;
    if (_2165)
    {
        _2551 = _2437;
        _2553 = _2439;
        _2555 = _2441;
    }
    else
    {
        uint _2562 = _2071 + 3u;
        uint _2566 = _2071 + 11u;
        float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _807) * 0.949999988079071044921875);
        float _2581 = _2580 * _2580;
        float _2582 = cbLight._m0[_2562].x + _883;
        float _2583 = cbLight._m0[_2562].y + _884;
        float _2584 = cbLight._m0[_2562].z + _885;
        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
        float _2589 = _2588 * _2582;
        float _2590 = _2588 * _2583;
        float _2591 = _2588 * _2584;
        float _2592 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2562].xyz));
        float _4599 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2596 = dot(vec3(_804, _805, _806), vec3(_2589, _2590, _2591));
        float _4610 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2600 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2589, _2590, _2591));
        float _4621 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _2581 * _2581;
        float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
        float _2615 = exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0);
        float _2622 = 1.0 - _2581;
        float _2632 = (0.5 / (((_2239 * ((_2595 * _2622) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2622) + _2581) * _2595))) * _2595;
        float _4632 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2634 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
        float _2635 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2551 = (((((_2615 * _2261) + _965) * cbLight._m0[_2566].x) * _2634) * _2635) + _2437;
        _2553 = (((((_2615 * _2263) + _967) * cbLight._m0[_2566].y) * _2634) * _2635) + _2439;
        _2555 = (((((_2615 * _2264) + _968) * cbLight._m0[_2566].z) * _2634) * _2635) + _2441;
    }
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    if (_2069.y == 0u)
    {
        float _2710 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2711 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2710;
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2710;
        float _2713 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2710;
        uvec4 _2725 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2726 = _2725.x;
        uint _2737 = uint((float(_2725.y) * floor(float(uint(cbSceneParam._m0[85u].y * _904) / _2726))) + floor(float(uint(cbSceneParam._m0[85u].x * _903) / _2726)));
        float _2747 = (log2(_2713 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2748 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        uint _2751 = uint(isnan(14.0) ? _2748 : (isnan(_2748) ? 14.0 : min(_2748, 14.0)));
        uvec4 _2756 = texelFetch(g_lightClusterGridBuffer, int(((_2751 << 2u) + (_2737 << 6u)) >> 2u));
        uint _2757 = _2756.x;
        uint _2758 = _2725.z;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        if (((((1u << ((_2758 >> 4u) & 15u)) + 4294967295u) & _2757) == 0u) || ((_2758 & 240u) == 0u))
        {
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
        }
        else
        {
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            uint _3016 = 0u;
            uint _3025;
            bool _3026;
            for (;;)
            {
                _3025 = texelFetch(g_lightClassification, int((((_2751 << 5u) + (_2737 << 9u)) + (_3016 << 2u)) >> 2u)).x;
                _3026 = _3025 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3026)
                {
                    frontier_phi_66_pred = _3010;
                    frontier_phi_66_pred_1 = _3015;
                    frontier_phi_66_pred_2 = _3014;
                    frontier_phi_66_pred_3 = _3013;
                    frontier_phi_66_pred_4 = _3012;
                    frontier_phi_66_pred_5 = _3011;
                }
                else
                {
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    uint _3161;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3025;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    for (;;)
                    {
                        uint _3165 = uint(findLSB(_3161)) + (_3016 << 5u);
                        uint _3162 = (_3161 + 4294967295u) & _3161;
                        uint _3167 = _3165 * 48u;
                        vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 3u)).x));
                        uint _3187 = (_3165 * 48u) + 4u;
                        vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 3u)).x));
                        uint _3206 = (_3165 * 48u) + 8u;
                        vec3 _3217 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x));
                        float _3221 = _3181.x - _2711;
                        float _3222 = _3181.y - _2712;
                        float _3223 = _3181.z - _2713;
                        float _3224 = dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223));
                        float _3227 = inversesqrt(_3224);
                        float _3228 = _3227 * _3221;
                        float _3229 = _3227 * _3222;
                        float _3230 = _3227 * _3223;
                        float _3231 = dot(vec3(_922, _925, _928), vec3(_3228, _3229, _3230));
                        float _3236 = 1.0 - (_3224 * _3181.w);
                        float _4658 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3237 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3238 = sqrt(_3224) * _3200.w;
                        float _3241 = 1.39999997615814208984375 / (_3238 + 1.39999997615814208984375);
                        float _3242 = _3241 * _3241;
                        float _3245 = ((1.0 - _3242) * _3231) + _3242;
                        float _3248 = _3238 * _3238;
                        float _3252 = ((isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))) * _3237) / ((_3248 * 0.699999988079071044921875) + 1.0);
                        float _3256 = (-0.0) - _2711;
                        float _3257 = (-0.0) - _2712;
                        float _3258 = (-0.0) - _2713;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3263 = _3262 * _3256;
                        float _3264 = _3262 * _3257;
                        float _3265 = _3262 * _3258;
                        float _3273 = exp2(log2(1.0 / ((_3248 * 3.5) + 5.0)) * 0.25);
                        float _3274 = 1.0 - _997;
                        float _3281 = sqrt(1.0 - ((1.0 - (_3274 * _3274)) * (1.0 - (_3273 * _3273))));
                        float _3282 = _3281 * _3281;
                        float _3283 = _3282 * _3282;
                        float _3284 = _3263 + _3228;
                        float _3285 = _3264 + _3229;
                        float _3286 = _3265 + _3230;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3294 = dot(vec3(_922, _925, _928), vec3(_3263, _3264, _3265));
                        float _4674 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3298 = dot(vec3(_922, _925, _928), vec3(_3290 * _3284, _3290 * _3285, _3290 * _3286));
                        float _4685 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3301 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3305 = ((_3301 * _3301) * (_3283 + (-1.0))) + 1.0;
                        float _3306 = _3241 * _3282;
                        float _3307 = _3306 * _3306;
                        float _3310 = ((1.0 - _3307) * _3231) + _3307;
                        float _4696 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                        float _3312 = 1.0 - _3282;
                        float _3322 = (0.5 / (((_3311 * ((_3297 * _3312) + _3282)) + 9.9999999392252902907785028219223e-09) + (((_3311 * _3312) + _3282) * _3297))) * _3311;
                        float _4707 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3333 = (((_3283 * 3.1415927410125732421875) * (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) / ((_3305 * _3305) * ((_3248 * 2.1991131305694580078125) + 3.141590118408203125))) * _3237;
                        _3085 = (_3252 * _3200.x) + _3158;
                        _3086 = (_3252 * _3200.y) + _3159;
                        _3087 = (_3252 * _3200.z) + _3160;
                        _3082 = (_3333 * _3217.x) + _3155;
                        _3083 = (_3333 * _3217.y) + _3156;
                        _3084 = (_3333 * _3217.z) + _3157;
                        if (_3162 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3162;
                        }
                    }
                    frontier_phi_66_pred = _3082;
                    frontier_phi_66_pred_1 = _3087;
                    frontier_phi_66_pred_2 = _3086;
                    frontier_phi_66_pred_3 = _3085;
                    frontier_phi_66_pred_4 = _3084;
                    frontier_phi_66_pred_5 = _3083;
                }
                _2859 = frontier_phi_66_pred;
                _2869 = frontier_phi_66_pred_1;
                _2867 = frontier_phi_66_pred_2;
                _2865 = frontier_phi_66_pred_3;
                _2863 = frontier_phi_66_pred_4;
                _2861 = frontier_phi_66_pred_5;
                uint _3017 = _3016 + 1u;
                if (_3017 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3010 = _2859;
                    _3011 = _2861;
                    _3012 = _2863;
                    _3013 = _2865;
                    _3014 = _2867;
                    _3015 = _2869;
                    _3016 = _3017;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
        }
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.z;
        uint _2875 = (_2873 >> 8u) & 15u;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        if (((4294967295u << _2875) & _2757) == 0u)
        {
            _2978 = _2858;
            _2980 = _2860;
            _2982 = _2862;
            _2984 = _2864;
            _2986 = _2866;
            _2988 = _2868;
        }
        else
        {
            float _3003 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
            float _3004 = _3003 * _2711;
            float _3005 = _3003 * _2712;
            float _3006 = _3003 * _2713;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2875 < ((_2873 >> 12u) & 15u))
            {
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _2989;
                float _3138 = _2858;
                float _3139 = _2860;
                float _3140 = _2862;
                float _3141 = _2864;
                float _3142 = _2866;
                float _3143 = _2868;
                uint _3144 = _2875;
                uint _3153;
                bool _3154;
                for (;;)
                {
                    _3153 = texelFetch(g_lightClassification, int((((_2751 << 5u) + (_2737 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                    _3154 = _3153 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3154)
                    {
                        frontier_phi_77_pred = _3143;
                        frontier_phi_77_pred_1 = _3142;
                        frontier_phi_77_pred_2 = _3141;
                        frontier_phi_77_pred_3 = _3140;
                        frontier_phi_77_pred_4 = _3139;
                        frontier_phi_77_pred_5 = _3138;
                    }
                    else
                    {
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3360 = _3138;
                        float _3361 = _3139;
                        float _3362 = _3140;
                        float _3363 = _3141;
                        float _3364 = _3142;
                        float _3365 = _3143;
                        uint _3366 = _3153;
                        uint _3367;
                        vec4 _3392;
                        float _3393;
                        vec4 _3408;
                        vec3 _3420;
                        vec4 _3435;
                        vec4 _3451;
                        float _3497;
                        bool _3498;
                        for (;;)
                        {
                            uint _3377 = ((_3144 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3366));
                            _3367 = (_3366 + 4294967295u) & _3366;
                            uint _3379 = _3377 * 40u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            _3393 = _3392.w;
                            uint _3395 = (_3377 * 40u) + 4u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3410 = (_3377 * 40u) + 8u;
                            _3420 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x));
                            uint _3422 = (_3377 * 40u) + 16u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3438 = (_3377 * 40u) + 20u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3377 * 40u) + 24u;
                            vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3472 = (_3377 * 40u) + 28u;
                            vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            _3497 = fma(_2713, _3485.z, fma(_2712, _3485.y, _3485.x * _2711)) + _3485.w;
                            _3498 = !((fma(_2713, _3466.z, fma(_2712, _3466.y, _3466.x * _2711)) + _3466.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3498)
                            {
                                float _3525 = _3392.x - _2711;
                                float _3526 = _3392.y - _2712;
                                float _3527 = _3392.z - _2713;
                                float _3528 = dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527));
                                float _3531 = inversesqrt(_3528);
                                float _3532 = _3531 * _3525;
                                float _3533 = _3531 * _3526;
                                float _3534 = _3531 * _3527;
                                float _3538 = 1.0 - (_3528 / (_3393 * _3393));
                                float _4718 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3543 = sqrt(_3528) * _3408.w;
                                float _3545 = 1.39999997615814208984375 / (_3543 + 1.39999997615814208984375);
                                float _3546 = _3545 * _3545;
                                float _3549 = ((1.0 - _3546) * dot(vec3(_3532, _3533, _3534), vec3(_922, _925, _928))) + _3546;
                                float _3552 = _3543 * _3543;
                                float _3556 = (fma(_2713, _3435.z, fma(_2712, _3435.y, _3435.x * _2711)) + _3435.w) / _3497;
                                float _3557 = (fma(_2713, _3451.z, fma(_2712, _3451.y, _3451.x * _2711)) + _3451.w) / _3497;
                                float _3561 = 1.0 - dot(vec2(_3556, _3557), vec2(_3556, _3557));
                                float _4734 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3563 = _3562 * (((isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0))) * _3539) / ((_3552 * 0.699999988079071044921875) + 1.0));
                                float _3575 = exp2(log2(1.0 / ((_3552 * 3.5) + 5.0)) * 0.25);
                                float _3576 = 1.0 - _997;
                                float _3583 = sqrt(1.0 - ((1.0 - (_3576 * _3576)) * (1.0 - (_3575 * _3575))));
                                float _3584 = _3583 * _3583;
                                float _3585 = _3584 * _3584;
                                float _3586 = _3532 - _3004;
                                float _3587 = _3533 - _3005;
                                float _3588 = _3534 - _3006;
                                float _3592 = inversesqrt(dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588)));
                                float _3596 = dot(vec3(_922, _925, _928), vec3((-0.0) - _3004, (-0.0) - _3005, (-0.0) - _3006));
                                float _4745 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3599 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3600 = dot(vec3(_922, _925, _928), vec3(_3592 * _3586, _3592 * _3587, _3592 * _3588));
                                float _4756 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3603 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3607 = ((_3603 * _3603) * (_3585 + (-1.0))) + 1.0;
                                float _3608 = _3545 * _3584;
                                float _3609 = _3608 * _3608;
                                float _3615 = ((1.0 - _3609) * dot(vec3(_922, _925, _928), vec3(_3532, _3533, _3534))) + _3609;
                                float _4767 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                                float _3617 = 1.0 - _3584;
                                float _3627 = (0.5 / (((_3616 * ((_3599 * _3617) + _3584)) + 9.9999999392252902907785028219223e-09) + (((_3616 * _3617) + _3584) * _3599))) * _3616;
                                float _4778 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3637 = (_3562 * _3539) * (((_3585 * 3.1415927410125732421875) * (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) / ((_3607 * _3607) * ((_3552 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3563 * _3408.y;
                                frontier_phi_83_pred_1 = _3563 * _3408.x;
                                frontier_phi_83_pred_2 = _3637 * _3420.z;
                                frontier_phi_83_pred_3 = _3637 * _3420.y;
                                frontier_phi_83_pred_4 = _3637 * _3420.x;
                                frontier_phi_83_pred_5 = _3563 * _3408.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3645 = frontier_phi_83_pred;
                            _3644 = frontier_phi_83_pred_1;
                            _3643 = frontier_phi_83_pred_2;
                            _3642 = frontier_phi_83_pred_3;
                            _3641 = frontier_phi_83_pred_4;
                            _3646 = frontier_phi_83_pred_5;
                            _3350 = _3644 + _3363;
                            _3351 = _3645 + _3364;
                            _3352 = _3646 + _3365;
                            _3347 = _3641 + _3360;
                            _3348 = _3642 + _3361;
                            _3349 = _3643 + _3362;
                            if (_3367 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3367;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3352;
                        frontier_phi_77_pred_1 = _3351;
                        frontier_phi_77_pred_2 = _3350;
                        frontier_phi_77_pred_3 = _3349;
                        frontier_phi_77_pred_4 = _3348;
                        frontier_phi_77_pred_5 = _3347;
                    }
                    _2989 = frontier_phi_77_pred;
                    _2987 = frontier_phi_77_pred_1;
                    _2985 = frontier_phi_77_pred_2;
                    _2983 = frontier_phi_77_pred_3;
                    _2981 = frontier_phi_77_pred_4;
                    _2979 = frontier_phi_77_pred_5;
                    uint _3145 = _3144 + 1u;
                    if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3138 = _2979;
                        _3139 = _2981;
                        _3140 = _2983;
                        _3141 = _2985;
                        _3142 = _2987;
                        _3143 = _2989;
                        _3144 = _3145;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2983;
                frontier_phi_58_59_ladder_1 = _2989;
                frontier_phi_58_59_ladder_2 = _2987;
                frontier_phi_58_59_ladder_3 = _2985;
                frontier_phi_58_59_ladder_4 = _2981;
                frontier_phi_58_59_ladder_5 = _2979;
            }
            else
            {
                frontier_phi_58_59_ladder = _2862;
                frontier_phi_58_59_ladder_1 = _2868;
                frontier_phi_58_59_ladder_2 = _2866;
                frontier_phi_58_59_ladder_3 = _2864;
                frontier_phi_58_59_ladder_4 = _2860;
                frontier_phi_58_59_ladder_5 = _2858;
            }
            _2978 = frontier_phi_58_59_ladder_5;
            _2980 = frontier_phi_58_59_ladder_4;
            _2982 = frontier_phi_58_59_ladder;
            _2984 = frontier_phi_58_59_ladder_3;
            _2986 = frontier_phi_58_59_ladder_2;
            _2988 = frontier_phi_58_59_ladder_1;
        }
        float _2993 = isnan(1.0) ? _981 : (isnan(_981) ? 1.0 : min(_981, 1.0));
        _2770 = (_2993 * _2984) + _2203;
        _2772 = (_2993 * _2986) + _2205;
        _2774 = (_2993 * _2988) + _2207;
        _2776 = ((_2978 * _965) * _2993) + _2551;
        _2778 = ((_2980 * _967) * _2993) + _2553;
        _2780 = ((_2982 * _968) * _2993) + _2555;
    }
    else
    {
        _2770 = _2203;
        _2772 = _2205;
        _2774 = _2207;
        _2776 = _2551;
        _2778 = _2553;
        _2780 = _2555;
    }
    float _4794 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4805 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _4816 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _2797 = ((isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2770 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _981))) + ((_2776 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1820)) * cbPerFrame._m0[3u].x);
    float _2798 = ((isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2772 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _981))) + ((_2778 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1820)) * cbPerFrame._m0[3u].x);
    float _2799 = ((isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2774 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _981))) + ((_2780 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1820)) * cbPerFrame._m0[3u].x);
    uint _2800 = _255 + 6u;
    float _2808 = _903 / cbSceneParam._m0[86u].x;
    float _2809 = _904 / cbSceneParam._m0[86u].y;
    vec4 _2823 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2808, _2809, (log2((isnan(cbSceneParam._m0[77u].w) ? _826 : (isnan(_826) ? cbSceneParam._m0[77u].w : min(_826, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2825 = _2823.x;
    float _2826 = _2823.y;
    float _2827 = _2823.z;
    float _2828 = _2823.w;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    if (_826 > cbSceneParam._m0[78u].w)
    {
        float _2883 = isnan(_826) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _826 : min(cbSceneParam._m0[80u].w, _826));
        float _2884 = _2883 / _826;
        float _2895 = _2884 * _876;
        float _2896 = _877 * _2884;
        float _2897 = (-0.0) - _2896;
        float _2898 = _2884 * _878;
        float _2900 = (cbSceneParam._m0[77u].w * _2897) / _2883;
        float _2901 = _2900 + cbSceneParam._m0[79u].w;
        float _2902 = cbSceneParam._m0[79u].w - _2896;
        float _2908 = sqrt(((_2895 * _2895) + (_2896 * _2896)) + (_2898 * _2898));
        float _2911 = (1.0 - (cbSceneParam._m0[77u].w / _2883)) * _2908;
        float _2916 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2918 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3095;
        if (abs((_2897 - _2900) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3095 = ((((_2901 > 0.0) ? exp2(_2916 * _2901) : (2.0 - exp2(_2918 * _2901))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2911;
        }
        else
        {
            float _3039 = 1.0 / cbSceneParam._m0[80u].x;
            float _3040 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : max(_2901, _2902));
            float _3041 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : min(_2901, _2902));
            float _3050 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : min(_3040, 0.0));
            float _3051 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : min(_3041, 0.0));
            _3095 = ((abs(_2908 / _2897) * cbSceneParam._m0[80u].y) * ((((_3050 - _3051) * 2.0) - ((exp2(_2916 * (isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0)))) - exp2(_2916 * (isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0))))) * _3039)) - ((exp2(_2918 * _3050) - exp2(_2918 * _3051)) * _3039))) + (_2911 * cbSceneParam._m0[80u].z);
        }
        vec4 _3097 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2808, _2809, 1.0), 0.0);
        float _3106 = exp2((_3095 * (-1.44269502162933349609375)) * (1.0 - _3097.w));
        float _3107 = log2(_3106);
        float _3123 = log2(_2828);
        _2920 = (exp2(_3123 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].x)) * _3097.x) / cbSceneParam._m0[78u].x)) + _2825;
        _2922 = (exp2(_3123 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].y)) * _3097.y) / cbSceneParam._m0[78u].y)) + _2826;
        _2924 = (exp2(_3123 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].z)) * _3097.z) / cbSceneParam._m0[78u].z)) + _2827;
        _2926 = _3106 * _2828;
    }
    else
    {
        _2920 = _2825;
        _2922 = _2826;
        _2924 = _2827;
        _2926 = _2828;
    }
    bool _3133;
    vec4 _2936;
    vec4 _2958;
    float _2960;
    float _2964;
    float _2965;
    float _2966;
    float _2967;
    bool _2977;
    for (;;)
    {
        _2936 = cbMatDynParam._m0[0u];
        float _2938 = roundEven(_2936.y);
        bool _2939 = _2938 == 3.0;
        float _2940 = log2(_2926);
        float _2947 = exp2(_2940 * cbSceneParam._m0[78u].x) * _2797;
        float _2948 = exp2(_2940 * cbSceneParam._m0[78u].y) * _2798;
        float _2949 = exp2(_2940 * cbSceneParam._m0[78u].z) * _2799;
        float _2956 = _892 + (-0.5);
        _2958 = cbMtdParam._m0[1u];
        _2960 = _2958.y * _2956;
        float _2963 = (_2938 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2964 = _2963 * (_2939 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2920)));
        _2965 = _2963 * (_2939 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2922)));
        _2966 = _2963 * (_2939 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2924)));
        _2967 = _2956 * 0.999000012874603271484375;
        _2977 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2977)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2967) < 0.5)
            {
                _3133 = true;
                break;
            }
        }
        uint _3074 = _941 + uint(_2936.w);
        if ((cbInstanceData._m0[_3074].w < 1.0) && ((cbInstanceData._m0[_3074].w + _2967) < 0.5))
        {
            _3133 = true;
            break;
        }
        if ((_2960 + 1.0) < _2958.x)
        {
            _3133 = true;
            break;
        }
        _3133 = false;
        break;
    }
    float _3338;
    if (_3133)
    {
        discard_state = true;
        _3338 = 0.0;
    }
    else
    {
        _3338 = cbInstanceData._m0[_2800].w;
    }
    SV_Target.x = _2964;
    SV_Target.y = _2965;
    SV_Target.z = _2966;
    SV_Target.w = _3338;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2800].w;
    discard_exit();
}


