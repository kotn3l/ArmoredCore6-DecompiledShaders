#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1327;
float _3708;
float _3709;
float _3710;
float _3711;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3720 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3731 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3742 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].y) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3753 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _428 = (_421 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _429 = (_421 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _430 = (_421 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    float _434 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _428;
    float _437 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _429;
    float _440 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _430;
    float _447 = ((_428 - _434) * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) + _434;
    float _448 = ((_429 - _437) * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) + _437;
    float _449 = ((_430 - _440) * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) + _440;
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _513 = _511.x;
    float _514 = _511.y;
    float _515 = _511.z;
    float _524 = ((_494.z - _515) * _421) + _515;
    float _527 = ((((_494.x - _513) * _421) + _513) * 2.0) + (-1.0);
    float _528 = ((((_494.y - _514) * _421) + _514) * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3764 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _534 = sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))));
    float _537 = _527 + ((((_467.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _538 = _528 + ((((_467.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _541 = fma(_534, _237, fma(_538, _244, _537 * _230));
    float _544 = fma(_534, _238, fma(_538, _245, _537 * _231));
    float _547 = fma(_534, _239, fma(_538, _246, _537 * _232));
    float _551 = inversesqrt(dot(vec3(_541, _544, _547), vec3(_541, _544, _547)));
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _593 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _595 = _593.x;
    float _596 = 1.0 - _595;
    float _600 = ((_595 - _596) * cbMtdParam._m0[24u].z) + _596;
    float _602 = (cbMtdParam._m0[19u].x + dot(vec4(_551 * _541, _551 * _544, _551 * _547, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_600 * cbMtdParam._m0[21u].z);
    float _3775 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _618 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_600 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3786 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _623 = ((_603 * (cbMtdParam._m0[17u].x - _447)) * _619) + _447;
    float _624 = ((_603 * (cbMtdParam._m0[17u].y - _448)) * _619) + _448;
    float _625 = ((_603 * (cbMtdParam._m0[17u].z - _449)) * _619) + _449;
    vec4 _637 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _651 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _653 = _651.x;
    float _671 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _289) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _290) + cbTextureTilingScale._m0[9u].w)).x - _653) * _421) + _653;
    float _675 = ((_637.x - _671) * cbMtdParam._m0[19u].z) + _671;
    float _678 = _675 - ((_619 * _603) * _675);
    float _683 = (((_467.z - _524) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _524;
    vec4 _696 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _703 = (_696.x * 2.0) + (-1.0);
    float _704 = (_696.y * 2.0) + (-1.0);
    float _705 = dot(vec2(_703, _704), vec2(_703, _704));
    float _3797 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _714 = (((_696.z - _683) * _603) * _619) + _683;
    float _729 = (((cbMtdParam._m0[21u].x * _537) + ((_703 - _537) * _603)) * _619) + _537;
    float _730 = (((cbMtdParam._m0[21u].x * _538) + ((_704 - _538) * _603)) * _619) + _538;
    float _731 = (((sqrt(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) - _534) * _603) * _619) + _534;
    float _733 = cbMtdParam._m0[22u].x + _567.w;
    float _736 = fma(_731, _237, fma(_730, _244, _729 * _230));
    float _739 = fma(_731, _238, fma(_730, _245, _729 * _231));
    float _742 = fma(_731, _239, fma(_730, _246, _729 * _232));
    float _746 = inversesqrt(dot(vec3(_736, _739, _742), vec3(_736, _739, _742)));
    float _747 = _746 * _736;
    float _748 = _746 * _739;
    float _749 = _746 * _742;
    float _3808 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _750 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _3830 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3841 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3852 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3863 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _755 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _769 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _820 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _810);
    float _821 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _810);
    float _822 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _810);
    float _826 = inversesqrt(dot(vec3(_820, _821, _822), vec3(_820, _821, _822)));
    float _827 = _820 * _826;
    float _828 = _821 * _826;
    float _829 = _822 * _826;
    vec4 _834 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _836 = _834.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1008 = sqrt(((_820 * _820) + (_821 * _821)) + (_822 * _822));
        float _1014 = (cbMatDynParam._m0[5u].x * _1008) + cbMatDynParam._m0[5u].y;
        float _3874 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1019 = (cbMatDynParam._m0[5u].z * _1008) + cbMatDynParam._m0[5u].w;
        float _3885 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) - _1015)) + _1015) < ((_836 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _847 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _848 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _866 = fma(_749, cbSceneParam._m0[5u].z, fma(_748, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _747));
    float _869 = fma(_749, cbSceneParam._m0[6u].z, fma(_748, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _747));
    float _872 = fma(_749, cbSceneParam._m0[7u].z, fma(_748, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _747));
    uint _885 = _270 + 9u;
    uint _886 = _885 + uint(cbMatDynParam._m0[0u].w);
    float _892 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * cbInstanceData._m0[_886].x;
    float _893 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * cbInstanceData._m0[_886].y;
    float _894 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * cbInstanceData._m0[_886].z;
    float _3896 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _898 = 1.0 - _755;
    float _899 = _895 * _898;
    float _900 = _896 * _898;
    float _901 = _897 * _898;
    float _906 = (_895 + (-0.039999999105930328369140625)) * _755;
    float _907 = (_896 + (-0.039999999105930328369140625)) * _755;
    float _908 = (_897 + (-0.039999999105930328369140625)) * _755;
    float _909 = _906 + 0.039999999105930328369140625;
    float _911 = _907 + 0.039999999105930328369140625;
    float _912 = _908 + 0.039999999105930328369140625;
    vec4 _921 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _847, cbSceneParam._m0[86u].y * _848));
    float _925 = ((isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * TEXCOORD_5.w) * _921.x;
    float _926 = dot(vec3(_747, _748, _749), vec3(_827, _828, _829));
    float _929 = _926 * 2.0;
    float _933 = (_929 * _747) - _827;
    float _934 = (_929 * _748) - _828;
    float _935 = (_929 * _749) - _829;
    float _939 = abs(dot(vec3(_827, _828, _829), vec3(_747, _748, _749)));
    float _3929 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _941 = sqrt(_750);
    float _954 = exp2((_941 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_941 * 3.0));
    float _960 = (1.0 - _954) * ((_941 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _961 = _954 * _941;
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1326;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1051 = fma(_997, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _989));
        float _1055 = fma(_997, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _989));
        float _1059 = fma(_997, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _989));
        float _1084 = _989 + _747;
        float _1085 = _993 + _748;
        float _1086 = _997 + _749;
        float _1096 = fma(_1086, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1084)) - _1051;
        float _1097 = fma(_1086, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1084)) - _1055;
        float _1098 = fma(_1086, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1084)) - _1059;
        float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
        float _1115 = ((_1102 * _1096) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1051 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1102 * _1097) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1055 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1102 * _1098) / cbModelParam._m0[34u].z) + ((((((_1059 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        float _1154 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1120.x + (-0.5));
        float _1156 = _1154 * (_1120.y + (-0.5));
        float _1157 = _1154 * (_1120.z + (-0.5));
        float _1164 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1127.x + (-0.5));
        float _1166 = _1164 * (_1127.y + (-0.5));
        float _1167 = _1164 * (_1127.z + (-0.5));
        float _1174 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1134.x + (-0.5));
        float _1176 = _1174 * (_1134.y + (-0.5));
        float _1177 = _1174 * (_1134.z + (-0.5));
        float _1184 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1141.x + (-0.5));
        float _1186 = _1184 * (_1141.y + (-0.5));
        float _1187 = _1184 * (_1141.z + (-0.5));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = _1155 * 0.5;
        float _1192 = _1165 * 0.5;
        float _1193 = _1175 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1208 = (dot(vec3(_747, _748, _749), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1218 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3977 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1220 + 1.0))) + _1225) * _1188;
        float _1235 = _1156 * 0.5;
        float _1236 = _1166 * 0.5;
        float _1237 = _1176 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_747, _748, _749), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4010 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1262 + 1.0))) + _1267) * _1189;
        float _1277 = _1157 * 0.5;
        float _1278 = _1167 * 0.5;
        float _1279 = _1177 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_747, _748, _749), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4043 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1304 + 1.0))) + _1309) * _1190;
        _1326 = _1157;
        _1328 = _1156;
        _1329 = _1155;
        _1330 = _1167;
        _1331 = _1166;
        _1332 = _1165;
        _1333 = _1177;
        _1334 = _1176;
        _1335 = _1175;
        _1336 = _1190;
        _1337 = _1189;
        _1338 = _1188;
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1327;
        _1328 = _1327;
        _1329 = _1327;
        _1330 = _1327;
        _1331 = _1327;
        _1332 = _1327;
        _1333 = _1327;
        _1334 = _1327;
        _1335 = _1327;
        _1336 = _1327;
        _1337 = _1327;
        _1338 = _1327;
        _1339 = 0.0;
        _1340 = 0.0;
        _1341 = 0.0;
    }
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1369 = fma(_997, cbModelParam._m0[30u].z, fma(_993, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _989));
        float _1373 = fma(_997, cbModelParam._m0[31u].z, fma(_993, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _989));
        float _1377 = fma(_997, cbModelParam._m0[32u].z, fma(_993, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _989));
        float _1400 = _989 + _747;
        float _1401 = _993 + _748;
        float _1402 = _997 + _749;
        float _1412 = fma(_1402, cbModelParam._m0[30u].z, fma(_1401, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1400)) - _1369;
        float _1413 = fma(_1402, cbModelParam._m0[31u].z, fma(_1401, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1400)) - _1373;
        float _1414 = fma(_1402, cbModelParam._m0[32u].z, fma(_1401, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1400)) - _1377;
        float _1418 = inversesqrt(dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414)));
        float _1431 = ((_1418 * _1412) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1369 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1418 * _1413) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1373 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1418 * _1414) / cbModelParam._m0[35u].z) + ((((((_1377 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        float _1468 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1435.x + (-0.5));
        float _1470 = _1468 * (_1435.y + (-0.5));
        float _1471 = _1468 * (_1435.z + (-0.5));
        float _1478 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1442.x + (-0.5));
        float _1480 = _1478 * (_1442.y + (-0.5));
        float _1481 = _1478 * (_1442.z + (-0.5));
        float _1488 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1449.x + (-0.5));
        float _1490 = _1488 * (_1449.y + (-0.5));
        float _1491 = _1488 * (_1449.z + (-0.5));
        float _1498 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1456.x + (-0.5));
        float _1500 = _1498 * (_1456.y + (-0.5));
        float _1501 = _1498 * (_1456.z + (-0.5));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = _1469 * 0.5;
        float _1506 = _1479 * 0.5;
        float _1507 = _1489 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_747, _748, _749), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _4106 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1532 + 1.0))) + _1537) * _1502;
        float _1547 = _1470 * 0.5;
        float _1548 = _1480 * 0.5;
        float _1549 = _1490 * 0.5;
        float _1550 = dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549));
        float _1555 = (_1550 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1550);
        float _1563 = (dot(vec3(_747, _748, _749), vec3(_1555 * _1547, _1555 * _1548, _1555 * _1549)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1572 = sqrt(((_1548 * _1548) + (_1547 * _1547)) + (_1549 * _1549)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1574 = _1573 * 2.0;
        float _1578 = (1.0 - _1573) / (_1573 + 1.0);
        float _4139 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1588 = ((((1.0 - _1579) * (_1574 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1574 + 1.0))) + _1579) * _1503;
        float _1589 = _1471 * 0.5;
        float _1590 = _1481 * 0.5;
        float _1591 = _1491 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_747, _748, _749), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4172 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1616 + 1.0))) + _1621) * _1504;
        _1638 = _1471;
        _1639 = _1470;
        _1640 = _1469;
        _1641 = _1481;
        _1642 = _1480;
        _1643 = _1479;
        _1644 = _1491;
        _1645 = _1490;
        _1646 = _1489;
        _1647 = _1504;
        _1648 = _1503;
        _1649 = _1502;
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)));
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
    }
    else
    {
        _1638 = _1327;
        _1639 = _1327;
        _1640 = _1327;
        _1641 = _1327;
        _1642 = _1327;
        _1643 = _1327;
        _1644 = _1327;
        _1645 = _1327;
        _1646 = _1327;
        _1647 = _1327;
        _1648 = _1327;
        _1649 = _1327;
        _1650 = 0.0;
        _1651 = 0.0;
        _1652 = 0.0;
    }
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1339)) + _1339;
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1340)) + _1340;
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1341)) + _1341;
    float _1685 = fma(_1664, cbSceneParam._m0[89u].z, fma(_1663, cbSceneParam._m0[89u].y, _1662 * cbSceneParam._m0[89u].x));
    float _1688 = fma(_1664, cbSceneParam._m0[90u].z, fma(_1663, cbSceneParam._m0[90u].y, _1662 * cbSceneParam._m0[90u].x));
    float _1691 = fma(_1664, cbSceneParam._m0[91u].z, fma(_1663, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1662));
    float _1706 = _933 * 0.5;
    float _1707 = _934 * 0.5;
    float _1708 = _935 * 0.5;
    float _1709 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1712 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1715 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1749;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1722 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1326, _1330, _1333, _1336));
        float _1726 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1730 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1329, _1332, _1335, _1338));
        float _1737 = dot(vec4(cbModelParam._m0[39u]), vec4(_1706, _1707, _1708, 1.0));
        _1749 = dot(vec3(isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1737) ? 0.0 : (isnan(0.0) ? _1737 : max(0.0, _1737))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1749 = 1.0;
    }
    float _1760;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1751 = dot(vec4(cbModelParam._m0[40u]), vec4(_1706, _1707, _1708, 1.0));
        _1760 = dot(vec3(isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1751) ? 0.0 : (isnan(0.0) ? _1751 : max(0.0, _1751))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1760 = 1.0;
    }
    float _1764 = (_1760 * cbModelParam._m0[1u].x) + (_1749 * (1.0 - cbModelParam._m0[1u].x));
    float _1774 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _750);
    float _1775 = isnan(_1774) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1774 : min(cbModelParam._m0[25u].z, _1774));
    float _1856;
    float _1858;
    float _1860;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1823 = fma(_997, cbModelParam._m0[13u].z, fma(_993, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _989)) + cbModelParam._m0[13u].w;
        float _1827 = fma(_997, cbModelParam._m0[14u].z, fma(_993, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _989)) + cbModelParam._m0[14u].w;
        float _1831 = fma(_997, cbModelParam._m0[15u].z, fma(_993, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _989)) + cbModelParam._m0[15u].w;
        float _1834 = fma(_935, cbModelParam._m0[13u].z, fma(_934, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _933));
        float _1837 = fma(_935, cbModelParam._m0[14u].z, fma(_934, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _933));
        float _1840 = fma(_935, cbModelParam._m0[15u].z, fma(_934, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _933));
        float _1868;
        if (_1834 > 0.0)
        {
            _1868 = abs((1.0 - _1823) / _1834);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1823 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1868 = frontier_phi_17_15_ladder;
        }
        float _2071;
        if (_1837 > 0.0)
        {
            _2071 = abs((1.0 - _1827) / _1837);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1827 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2071 = frontier_phi_26_22_ladder;
        }
        float _2325;
        if (_1840 > 0.0)
        {
            _2325 = abs((1.0 - _1831) / _1840);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1831 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2325 = frontier_phi_38_33_ladder;
        }
        float _2327 = isnan(_2071) ? _1868 : (isnan(_1868) ? _2071 : min(_1868, _2071));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1834) + _1823;
        float _2333 = (_2328 * _1837) + _1827;
        float _2334 = (_2328 * _1840) + _1831;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2337 = (-1.0) - _2335;
        float _2339 = _2335 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2334 > _2339) || ((_2334 < _2337) || ((_2333 > _2339) || ((_2333 < _2337) || ((_2332 < _2337) || (_2332 > _2339))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2462 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2334, cbModelParam._m0[9u].z, fma(_2333, cbModelParam._m0[9u].y, _2332 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2334, cbModelParam._m0[10u].z, fma(_2333, cbModelParam._m0[10u].y, _2332 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2334, cbModelParam._m0[11u].z, fma(_2333, cbModelParam._m0[11u].y, _2332 * cbModelParam._m0[11u].x))), _1775);
            frontier_phi_16_38_ladder = _2462.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2462.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2462.x * cbModelParam._m0[1u].y;
        }
        _1856 = frontier_phi_16_38_ladder_2;
        _1858 = frontier_phi_16_38_ladder_1;
        _1860 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1844 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_933, _934, _935), _1775);
        _1856 = _1844.x * cbModelParam._m0[1u].y;
        _1858 = _1844.y * cbModelParam._m0[1u].y;
        _1860 = _1844.z * cbModelParam._m0[1u].y;
    }
    float _1864 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _750);
    float _1865 = isnan(_1864) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1864 : min(cbModelParam._m0[25u].w, _1864));
    float _1955;
    float _1957;
    float _1959;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1919 = fma(_997, cbModelParam._m0[21u].z, fma(_993, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _989)) + cbModelParam._m0[21u].w;
        float _1923 = fma(_997, cbModelParam._m0[22u].z, fma(_993, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _989)) + cbModelParam._m0[22u].w;
        float _1927 = fma(_997, cbModelParam._m0[23u].z, fma(_993, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _989)) + cbModelParam._m0[23u].w;
        float _1930 = fma(_935, cbModelParam._m0[21u].z, fma(_934, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _933));
        float _1933 = fma(_935, cbModelParam._m0[22u].z, fma(_934, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _933));
        float _1936 = fma(_935, cbModelParam._m0[23u].z, fma(_934, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _933));
        float _2076;
        if (_1930 > 0.0)
        {
            _2076 = abs((1.0 - _1919) / _1930);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1919 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2076 = frontier_phi_28_24_ladder;
        }
        float _2352;
        if (_1933 > 0.0)
        {
            _2352 = abs((1.0 - _1923) / _1933);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1923 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2352 = frontier_phi_40_35_ladder;
        }
        float _2565;
        if (_1936 > 0.0)
        {
            _2565 = abs((1.0 - _1927) / _1936);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1927 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2565 = frontier_phi_49_46_ladder;
        }
        float _2567 = isnan(_2352) ? _2076 : (isnan(_2076) ? _2352 : min(_2076, _2352));
        float _2568 = isnan(_2565) ? _2567 : (isnan(_2567) ? _2565 : min(_2567, _2565));
        float _2572 = (_2568 * _1930) + _1919;
        float _2573 = (_2568 * _1933) + _1923;
        float _2574 = (_2568 * _1936) + _1927;
        float _2575 = _2568 * 9.9999997473787516355514526367188e-05;
        float _2576 = (-1.0) - _2575;
        float _2578 = _2575 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2574 > _2578) || ((_2574 < _2576) || ((_2573 > _2578) || ((_2573 < _2576) || ((_2572 < _2576) || (_2572 > _2578))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2773 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2574, cbModelParam._m0[17u].z, fma(_2573, cbModelParam._m0[17u].y, _2572 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2574, cbModelParam._m0[18u].z, fma(_2573, cbModelParam._m0[18u].y, _2572 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2574, cbModelParam._m0[19u].z, fma(_2573, cbModelParam._m0[19u].y, _2572 * cbModelParam._m0[19u].x))), _1865);
            frontier_phi_25_49_ladder = _2773.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2773.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2773.x * cbModelParam._m0[1u].z;
        }
        _1955 = frontier_phi_25_49_ladder_2;
        _1957 = frontier_phi_25_49_ladder_1;
        _1959 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_933, _934, _935), _1865);
        _1955 = _1939.x * cbModelParam._m0[1u].z;
        _1957 = _1939.y * cbModelParam._m0[1u].z;
        _1959 = _1939.z * cbModelParam._m0[1u].z;
    }
    float _1972 = (((_960 * _909) + _961) * _925) * ((cbModelParam._m0[1u].w * (_1955 - _1856)) + _1856);
    float _1974 = (((_960 * _911) + _961) * _925) * ((cbModelParam._m0[1u].w * (_1957 - _1858)) + _1858);
    float _1976 = (((_960 * _912) + _961) * _925) * ((cbModelParam._m0[1u].w * (_1959 - _1860)) + _1860);
    float _1979 = fma(_1976, cbSceneParam._m0[89u].z, fma(_1974, cbSceneParam._m0[89u].y, _1972 * cbSceneParam._m0[89u].x));
    float _1982 = fma(_1976, cbSceneParam._m0[90u].z, fma(_1974, cbSceneParam._m0[90u].y, _1972 * cbSceneParam._m0[90u].x));
    float _1985 = fma(_1976, cbSceneParam._m0[91u].z, fma(_1974, cbSceneParam._m0[91u].y, _1972 * cbSceneParam._m0[91u].x));
    uvec4 _1995 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1997 = _1995.x * 14u;
    uint _1998 = _1997 + 13u;
    float _2005 = _925 + (-1.0);
    float _2010 = (cbLight._m0[_1998].x * _2005) + 1.0;
    float _2011 = (cbLight._m0[_1998].y * _2005) + 1.0;
    float _2012 = (cbLight._m0[_1998].z * _2005) + 1.0;
    float _2013 = (cbLight._m0[_1998].w * _2005) + 1.0;
    uint _2014 = _1997 + 5u;
    float _2020 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
    uint _2024 = _1997 + 4u;
    float _2030 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
    uint _2034 = _1997 | 1u;
    float _2045 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_747, _748, _749));
    float _2048 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_747, _748, _749));
    float _4308 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _4319 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2053 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * 0.3183098733425140380859375;
    float _2055 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * 0.3183098733425140380859375;
    float _2062 = ((cbLight._m0[_2014].x * _2020) * _2055) + ((cbLight._m0[_2024].x * _2030) * _2053);
    float _2063 = ((_2020 * cbLight._m0[_2014].y) * _2055) + ((_2030 * cbLight._m0[_2024].y) * _2053);
    float _2064 = ((_2020 * cbLight._m0[_2014].z) * _2055) + ((_2030 * cbLight._m0[_2024].z) * _2053);
    uvec4 _2068 = floatBitsToUint(cbLight._m0[_1997 + 12u]);
    bool _2070 = _2068.x == 0u;
    float _2081;
    float _2083;
    float _2085;
    if (_2070)
    {
        _2081 = _2062;
        _2083 = _2063;
        _2085 = _2064;
    }
    else
    {
        uint _2089 = _1997 + 6u;
        float _2105 = (dot(vec3(cbLight._m0[_1997 + 2u].xyz), vec3(_747, _748, _749)) * 0.5) + 0.5;
        float _2106 = _2105 * _2105;
        float _4330 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2107 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2108 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2081 = (((cbLight._m0[_2089].x * 0.3183098733425140380859375) * _2107) * _2108) + _2062;
        _2083 = (((cbLight._m0[_2089].y * 0.3183098733425140380859375) * _2107) * _2108) + _2063;
        _2085 = (((cbLight._m0[_2089].z * 0.3183098733425140380859375) * _2107) * _2108) + _2064;
    }
    bool _2088 = _2068.y == 0u;
    float _2126;
    float _2128;
    float _2130;
    if (_2088)
    {
        _2126 = _2081;
        _2128 = _2083;
        _2130 = _2085;
    }
    else
    {
        uint _2296 = _1997 + 7u;
        float _2312 = (dot(vec3(cbLight._m0[_1997 + 3u].xyz), vec3(_747, _748, _749)) * 0.5) + 0.5;
        float _2313 = _2312 * _2312;
        float _4346 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2314 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2315 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2126 = (((cbLight._m0[_2296].x * 0.3183098733425140380859375) * _2314) * _2315) + _2081;
        _2128 = (((cbLight._m0[_2296].y * 0.3183098733425140380859375) * _2314) * _2315) + _2083;
        _2130 = (((cbLight._m0[_2296].z * 0.3183098733425140380859375) * _2314) * _2315) + _2085;
    }
    uint _2133 = _1997 + 8u;
    float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _750) * 0.949999988079071044921875);
    float _2147 = _2146 * _2146;
    float _2148 = cbLight._m0[_1997].x + _827;
    float _2149 = cbLight._m0[_1997].y + _828;
    float _2150 = cbLight._m0[_1997].z + _829;
    float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
    float _2155 = _2154 * _2148;
    float _2156 = _2154 * _2149;
    float _2157 = _2154 * _2150;
    float _2158 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_1997].xyz));
    float _4362 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _4373 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _2162 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2163 = dot(vec3(_747, _748, _749), vec3(_2155, _2156, _2157));
    float _4384 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2167 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2155, _2156, _2157));
    float _4395 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2171 = _2147 * _2147;
    float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
    float _2183 = exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0);
    float _2184 = 0.959999978542327880859375 - _906;
    float _2186 = 0.959999978542327880859375 - _907;
    float _2187 = 0.959999978542327880859375 - _908;
    float _2194 = 1.0 - _2147;
    float _2205 = (0.5 / (((_2162 * ((_2161 * _2194) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2194) + _2147) * _2161))) * _2161;
    float _4406 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2207 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
    uint _2218 = _1997 + 9u;
    float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _750) * 0.949999988079071044921875);
    float _2230 = _2229 * _2229;
    float _2231 = cbLight._m0[_2034].x + _827;
    float _2232 = cbLight._m0[_2034].y + _828;
    float _2233 = cbLight._m0[_2034].z + _829;
    float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
    float _2238 = _2237 * _2231;
    float _2239 = _2237 * _2232;
    float _2240 = _2237 * _2233;
    float _2241 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2034].xyz));
    float _4417 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2245 = dot(vec3(_747, _748, _749), vec3(_2238, _2239, _2240));
    float _4428 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2249 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2238, _2239, _2240));
    float _4439 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2253 = _2230 * _2230;
    float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
    float _2264 = exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0);
    float _2271 = 1.0 - _2230;
    float _2281 = (0.5 / (((_2162 * ((_2244 * _2271) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2271) + _2230) * _2244))) * _2244;
    float _4450 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2283 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
    float _2293 = (((((_2264 * _2184) + _909) * cbLight._m0[_2218].x) * _2283) * _2020) + (((((_2183 * _2184) + _909) * cbLight._m0[_2133].x) * _2207) * _2030);
    float _2294 = (((((_2264 * _2186) + _911) * cbLight._m0[_2218].y) * _2283) * _2020) + (((((_2183 * _2186) + _911) * cbLight._m0[_2133].y) * _2207) * _2030);
    float _2295 = (((((_2264 * _2187) + _912) * cbLight._m0[_2218].z) * _2283) * _2020) + (((((_2183 * _2187) + _912) * cbLight._m0[_2133].z) * _2207) * _2030);
    float _2357;
    float _2359;
    float _2361;
    if (_2070)
    {
        _2357 = _2293;
        _2359 = _2294;
        _2361 = _2295;
    }
    else
    {
        uint _2363 = _1997 + 2u;
        uint _2367 = _1997 + 10u;
        float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2363].w)) * _750) * 0.949999988079071044921875);
        float _2382 = _2381 * _2381;
        float _2383 = cbLight._m0[_2363].x + _827;
        float _2384 = cbLight._m0[_2363].y + _828;
        float _2385 = cbLight._m0[_2363].z + _829;
        float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
        float _2390 = _2389 * _2383;
        float _2391 = _2389 * _2384;
        float _2392 = _2389 * _2385;
        float _2393 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2363].xyz));
        float _4461 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2397 = dot(vec3(_747, _748, _749), vec3(_2390, _2391, _2392));
        float _4472 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2401 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_2390, _2391, _2392));
        float _4483 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2405 = _2382 * _2382;
        float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
        float _2416 = exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0);
        float _2423 = 1.0 - _2382;
        float _2433 = (0.5 / (((_2162 * ((_2396 * _2423) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2423) + _2382) * _2396))) * _2396;
        float _4494 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2435 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
        float _2436 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2357 = (((((_2416 * _2184) + _909) * cbLight._m0[_2367].x) * _2435) * _2436) + _2293;
        _2359 = (((((_2416 * _2186) + _911) * cbLight._m0[_2367].y) * _2435) * _2436) + _2294;
        _2361 = (((((_2416 * _2187) + _912) * cbLight._m0[_2367].z) * _2435) * _2436) + _2295;
    }
    float _2471;
    float _2473;
    float _2475;
    if (_2088)
    {
        _2471 = _2357;
        _2473 = _2359;
        _2475 = _2361;
    }
    else
    {
        uint _2482 = _1997 + 3u;
        uint _2486 = _1997 + 11u;
        float _2500 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _750) * 0.949999988079071044921875);
        float _2501 = _2500 * _2500;
        float _2502 = cbLight._m0[_2482].x + _827;
        float _2503 = cbLight._m0[_2482].y + _828;
        float _2504 = cbLight._m0[_2482].z + _829;
        float _2508 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
        float _2509 = _2508 * _2502;
        float _2510 = _2508 * _2503;
        float _2511 = _2508 * _2504;
        float _2512 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2482].xyz));
        float _4510 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2516 = dot(vec3(_747, _748, _749), vec3(_2509, _2510, _2511));
        float _4521 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2520 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2509, _2510, _2511));
        float _4532 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2524 = _2501 * _2501;
        float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
        float _2535 = exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0);
        float _2542 = 1.0 - _2501;
        float _2552 = (0.5 / (((_2162 * ((_2515 * _2542) + _2501)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2542) + _2501) * _2515))) * _2515;
        float _4543 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2554 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
        float _2555 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2471 = (((((_2535 * _2184) + _909) * cbLight._m0[_2486].x) * _2554) * _2555) + _2357;
        _2473 = (((((_2535 * _2186) + _911) * cbLight._m0[_2486].y) * _2554) * _2555) + _2359;
        _2475 = (((((_2535 * _2187) + _912) * cbLight._m0[_2486].z) * _2554) * _2555) + _2361;
    }
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    if (_1995.y == 0u)
    {
        float _2630 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2630;
        float _2632 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2630;
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2630;
        uvec4 _2645 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2646 = _2645.x;
        uint _2657 = uint((float(_2645.y) * floor(float(uint(cbSceneParam._m0[85u].y * _848) / _2646))) + floor(float(uint(cbSceneParam._m0[85u].x * _847) / _2646)));
        float _2667 = (log2(_2633 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2668 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        uint _2671 = uint(isnan(14.0) ? _2668 : (isnan(_2668) ? 14.0 : min(_2668, 14.0)));
        uvec4 _2676 = texelFetch(g_lightClusterGridBuffer, int(((_2671 << 2u) + (_2657 << 6u)) >> 2u));
        uint _2677 = _2676.x;
        uint _2678 = _2645.z;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        if (((((1u << ((_2678 >> 4u) & 15u)) + 4294967295u) & _2677) == 0u) || ((_2678 & 240u) == 0u))
        {
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
        }
        else
        {
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            uint _2937 = 0u;
            uint _2946;
            bool _2947;
            for (;;)
            {
                _2946 = texelFetch(g_lightClassification, int((((_2671 << 5u) + (_2657 << 9u)) + (_2937 << 2u)) >> 2u)).x;
                _2947 = _2946 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2947)
                {
                    frontier_phi_66_pred = _2931;
                    frontier_phi_66_pred_1 = _2936;
                    frontier_phi_66_pred_2 = _2935;
                    frontier_phi_66_pred_3 = _2934;
                    frontier_phi_66_pred_4 = _2933;
                    frontier_phi_66_pred_5 = _2932;
                }
                else
                {
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    uint _3082;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2934;
                    _3080 = _2935;
                    _3081 = _2936;
                    _3082 = _2946;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    for (;;)
                    {
                        uint _3086 = uint(findLSB(_3082)) + (_2937 << 5u);
                        uint _3083 = (_3082 + 4294967295u) & _3082;
                        uint _3088 = _3086 * 48u;
                        vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3088)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 3u)).x));
                        uint _3108 = (_3086 * 48u) + 4u;
                        vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 3u)).x));
                        uint _3127 = (_3086 * 48u) + 8u;
                        vec3 _3138 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x));
                        float _3142 = _3102.x - _2631;
                        float _3143 = _3102.y - _2632;
                        float _3144 = _3102.z - _2633;
                        float _3145 = dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144));
                        float _3148 = inversesqrt(_3145);
                        float _3149 = _3148 * _3142;
                        float _3150 = _3148 * _3143;
                        float _3151 = _3148 * _3144;
                        float _3152 = dot(vec3(_866, _869, _872), vec3(_3149, _3150, _3151));
                        float _3157 = 1.0 - (_3145 * _3102.w);
                        float _4569 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3158 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3159 = sqrt(_3145) * _3121.w;
                        float _3162 = 1.39999997615814208984375 / (_3159 + 1.39999997615814208984375);
                        float _3163 = _3162 * _3162;
                        float _3166 = ((1.0 - _3163) * _3152) + _3163;
                        float _3169 = _3159 * _3159;
                        float _3173 = ((isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0))) * _3158) / ((_3169 * 0.699999988079071044921875) + 1.0);
                        float _3177 = (-0.0) - _2631;
                        float _3178 = (-0.0) - _2632;
                        float _3179 = (-0.0) - _2633;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3194 = exp2(log2(1.0 / ((_3169 * 3.5) + 5.0)) * 0.25);
                        float _3195 = 1.0 - _941;
                        float _3202 = sqrt(1.0 - ((1.0 - (_3195 * _3195)) * (1.0 - (_3194 * _3194))));
                        float _3203 = _3202 * _3202;
                        float _3204 = _3203 * _3203;
                        float _3205 = _3184 + _3149;
                        float _3206 = _3185 + _3150;
                        float _3207 = _3186 + _3151;
                        float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                        float _3215 = dot(vec3(_866, _869, _872), vec3(_3184, _3185, _3186));
                        float _4585 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3218 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3219 = dot(vec3(_866, _869, _872), vec3(_3211 * _3205, _3211 * _3206, _3211 * _3207));
                        float _4596 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3222 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3226 = ((_3222 * _3222) * (_3204 + (-1.0))) + 1.0;
                        float _3227 = _3162 * _3203;
                        float _3228 = _3227 * _3227;
                        float _3231 = ((1.0 - _3228) * _3152) + _3228;
                        float _4607 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3232 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3233 = 1.0 - _3203;
                        float _3243 = (0.5 / (((_3232 * ((_3218 * _3233) + _3203)) + 9.9999999392252902907785028219223e-09) + (((_3232 * _3233) + _3203) * _3218))) * _3232;
                        float _4618 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3254 = (((_3204 * 3.1415927410125732421875) * (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) / ((_3226 * _3226) * ((_3169 * 2.1991131305694580078125) + 3.141590118408203125))) * _3158;
                        _3006 = (_3173 * _3121.x) + _3079;
                        _3007 = (_3173 * _3121.y) + _3080;
                        _3008 = (_3173 * _3121.z) + _3081;
                        _3003 = (_3254 * _3138.x) + _3076;
                        _3004 = (_3254 * _3138.y) + _3077;
                        _3005 = (_3254 * _3138.z) + _3078;
                        if (_3083 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3006;
                            _3080 = _3007;
                            _3081 = _3008;
                            _3082 = _3083;
                        }
                    }
                    frontier_phi_66_pred = _3003;
                    frontier_phi_66_pred_1 = _3008;
                    frontier_phi_66_pred_2 = _3007;
                    frontier_phi_66_pred_3 = _3006;
                    frontier_phi_66_pred_4 = _3005;
                    frontier_phi_66_pred_5 = _3004;
                }
                _2779 = frontier_phi_66_pred;
                _2789 = frontier_phi_66_pred_1;
                _2787 = frontier_phi_66_pred_2;
                _2785 = frontier_phi_66_pred_3;
                _2783 = frontier_phi_66_pred_4;
                _2781 = frontier_phi_66_pred_5;
                uint _2938 = _2937 + 1u;
                if (_2938 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2931 = _2779;
                    _2932 = _2781;
                    _2933 = _2783;
                    _2934 = _2785;
                    _2935 = _2787;
                    _2936 = _2789;
                    _2937 = _2938;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
        }
        uvec4 _2792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2793 = _2792.z;
        uint _2795 = (_2793 >> 8u) & 15u;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        if (((4294967295u << _2795) & _2677) == 0u)
        {
            _2899 = _2778;
            _2901 = _2780;
            _2903 = _2782;
            _2905 = _2784;
            _2907 = _2786;
            _2909 = _2788;
        }
        else
        {
            float _2924 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
            float _2925 = _2924 * _2631;
            float _2926 = _2924 * _2632;
            float _2927 = _2924 * _2633;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2795 < ((_2793 >> 12u) & 15u))
            {
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _2908;
                float _2910;
                float _3059 = _2778;
                float _3060 = _2780;
                float _3061 = _2782;
                float _3062 = _2784;
                float _3063 = _2786;
                float _3064 = _2788;
                uint _3065 = _2795;
                uint _3074;
                bool _3075;
                for (;;)
                {
                    _3074 = texelFetch(g_lightClassification, int((((_2671 << 5u) + (_2657 << 9u)) + (_3065 << 2u)) >> 2u)).x;
                    _3075 = _3074 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3075)
                    {
                        frontier_phi_77_pred = _3064;
                        frontier_phi_77_pred_1 = _3063;
                        frontier_phi_77_pred_2 = _3062;
                        frontier_phi_77_pred_3 = _3061;
                        frontier_phi_77_pred_4 = _3060;
                        frontier_phi_77_pred_5 = _3059;
                    }
                    else
                    {
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3281 = _3059;
                        float _3282 = _3060;
                        float _3283 = _3061;
                        float _3284 = _3062;
                        float _3285 = _3063;
                        float _3286 = _3064;
                        uint _3287 = _3074;
                        uint _3288;
                        vec4 _3313;
                        float _3314;
                        vec4 _3329;
                        vec3 _3341;
                        vec4 _3356;
                        vec4 _3371;
                        float _3417;
                        bool _3418;
                        for (;;)
                        {
                            uint _3298 = ((_3065 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3287));
                            _3288 = (_3287 + 4294967295u) & _3287;
                            uint _3300 = _3298 * 40u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            _3314 = _3313.w;
                            uint _3316 = (_3298 * 40u) + 4u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3331 = (_3298 * 40u) + 8u;
                            _3341 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x));
                            uint _3343 = (_3298 * 40u) + 16u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3358 = (_3298 * 40u) + 20u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3298 * 40u) + 24u;
                            vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3392 = (_3298 * 40u) + 28u;
                            vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3417 = fma(_2633, _3405.z, fma(_2632, _3405.y, _3405.x * _2631)) + _3405.w;
                            _3418 = !((fma(_2633, _3386.z, fma(_2632, _3386.y, _3386.x * _2631)) + _3386.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3418)
                            {
                                float _3445 = _3313.x - _2631;
                                float _3446 = _3313.y - _2632;
                                float _3447 = _3313.z - _2633;
                                float _3448 = dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447));
                                float _3451 = inversesqrt(_3448);
                                float _3452 = _3451 * _3445;
                                float _3453 = _3451 * _3446;
                                float _3454 = _3451 * _3447;
                                float _3458 = 1.0 - (_3448 / (_3314 * _3314));
                                float _4629 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3463 = sqrt(_3448) * _3329.w;
                                float _3465 = 1.39999997615814208984375 / (_3463 + 1.39999997615814208984375);
                                float _3466 = _3465 * _3465;
                                float _3469 = ((1.0 - _3466) * dot(vec3(_3452, _3453, _3454), vec3(_866, _869, _872))) + _3466;
                                float _3472 = _3463 * _3463;
                                float _3476 = (fma(_2633, _3356.z, fma(_2632, _3356.y, _3356.x * _2631)) + _3356.w) / _3417;
                                float _3477 = (fma(_2633, _3371.z, fma(_2632, _3371.y, _3371.x * _2631)) + _3371.w) / _3417;
                                float _3481 = 1.0 - dot(vec2(_3476, _3477), vec2(_3476, _3477));
                                float _4645 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3482 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3483 = _3482 * (((isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0))) * _3459) / ((_3472 * 0.699999988079071044921875) + 1.0));
                                float _3495 = exp2(log2(1.0 / ((_3472 * 3.5) + 5.0)) * 0.25);
                                float _3496 = 1.0 - _941;
                                float _3503 = sqrt(1.0 - ((1.0 - (_3496 * _3496)) * (1.0 - (_3495 * _3495))));
                                float _3504 = _3503 * _3503;
                                float _3505 = _3504 * _3504;
                                float _3506 = _3452 - _2925;
                                float _3507 = _3453 - _2926;
                                float _3508 = _3454 - _2927;
                                float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                                float _3516 = dot(vec3(_866, _869, _872), vec3((-0.0) - _2925, (-0.0) - _2926, (-0.0) - _2927));
                                float _4656 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3519 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3520 = dot(vec3(_866, _869, _872), vec3(_3512 * _3506, _3512 * _3507, _3512 * _3508));
                                float _4667 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3527 = ((_3523 * _3523) * (_3505 + (-1.0))) + 1.0;
                                float _3528 = _3465 * _3504;
                                float _3529 = _3528 * _3528;
                                float _3535 = ((1.0 - _3529) * dot(vec3(_866, _869, _872), vec3(_3452, _3453, _3454))) + _3529;
                                float _4678 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3537 = 1.0 - _3504;
                                float _3547 = (0.5 / (((_3536 * ((_3519 * _3537) + _3504)) + 9.9999999392252902907785028219223e-09) + (((_3536 * _3537) + _3504) * _3519))) * _3536;
                                float _4689 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3557 = (_3482 * _3459) * (((_3505 * 3.1415927410125732421875) * (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) / ((_3527 * _3527) * ((_3472 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3483 * _3329.y;
                                frontier_phi_83_pred_1 = _3483 * _3329.x;
                                frontier_phi_83_pred_2 = _3557 * _3341.z;
                                frontier_phi_83_pred_3 = _3557 * _3341.y;
                                frontier_phi_83_pred_4 = _3557 * _3341.x;
                                frontier_phi_83_pred_5 = _3483 * _3329.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3565 = frontier_phi_83_pred;
                            _3564 = frontier_phi_83_pred_1;
                            _3563 = frontier_phi_83_pred_2;
                            _3562 = frontier_phi_83_pred_3;
                            _3561 = frontier_phi_83_pred_4;
                            _3566 = frontier_phi_83_pred_5;
                            _3271 = _3564 + _3284;
                            _3272 = _3565 + _3285;
                            _3273 = _3566 + _3286;
                            _3268 = _3561 + _3281;
                            _3269 = _3562 + _3282;
                            _3270 = _3563 + _3283;
                            if (_3288 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3288;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3273;
                        frontier_phi_77_pred_1 = _3272;
                        frontier_phi_77_pred_2 = _3271;
                        frontier_phi_77_pred_3 = _3270;
                        frontier_phi_77_pred_4 = _3269;
                        frontier_phi_77_pred_5 = _3268;
                    }
                    _2910 = frontier_phi_77_pred;
                    _2908 = frontier_phi_77_pred_1;
                    _2906 = frontier_phi_77_pred_2;
                    _2904 = frontier_phi_77_pred_3;
                    _2902 = frontier_phi_77_pred_4;
                    _2900 = frontier_phi_77_pred_5;
                    uint _3066 = _3065 + 1u;
                    if (_3066 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3059 = _2900;
                        _3060 = _2902;
                        _3061 = _2904;
                        _3062 = _2906;
                        _3063 = _2908;
                        _3064 = _2910;
                        _3065 = _3066;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2904;
                frontier_phi_58_59_ladder_1 = _2910;
                frontier_phi_58_59_ladder_2 = _2908;
                frontier_phi_58_59_ladder_3 = _2906;
                frontier_phi_58_59_ladder_4 = _2902;
                frontier_phi_58_59_ladder_5 = _2900;
            }
            else
            {
                frontier_phi_58_59_ladder = _2782;
                frontier_phi_58_59_ladder_1 = _2788;
                frontier_phi_58_59_ladder_2 = _2786;
                frontier_phi_58_59_ladder_3 = _2784;
                frontier_phi_58_59_ladder_4 = _2780;
                frontier_phi_58_59_ladder_5 = _2778;
            }
            _2899 = frontier_phi_58_59_ladder_5;
            _2901 = frontier_phi_58_59_ladder_4;
            _2903 = frontier_phi_58_59_ladder;
            _2905 = frontier_phi_58_59_ladder_3;
            _2907 = frontier_phi_58_59_ladder_2;
            _2909 = frontier_phi_58_59_ladder_1;
        }
        float _2914 = isnan(1.0) ? _925 : (isnan(_925) ? 1.0 : min(_925, 1.0));
        _2690 = (_2914 * _2905) + _2126;
        _2692 = (_2914 * _2907) + _2128;
        _2694 = (_2914 * _2909) + _2130;
        _2696 = ((_2899 * _909) * _2914) + _2471;
        _2698 = ((_2901 * _911) * _2914) + _2473;
        _2700 = ((_2903 * _912) * _2914) + _2475;
    }
    else
    {
        _2690 = _2126;
        _2692 = _2128;
        _2694 = _2130;
        _2696 = _2471;
        _2698 = _2473;
        _2700 = _2475;
    }
    float _4705 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _4716 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _4727 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _2717 = ((isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2690 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _925))) + ((_2696 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1764)) * cbPerFrame._m0[3u].x);
    float _2718 = ((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2692 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _925))) + ((_2698 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1764)) * cbPerFrame._m0[3u].x);
    float _2719 = ((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2694 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _925))) + ((_2700 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1764)) * cbPerFrame._m0[3u].x);
    uint _2720 = _270 + 6u;
    float _2728 = _847 / cbSceneParam._m0[86u].x;
    float _2729 = _848 / cbSceneParam._m0[86u].y;
    vec4 _2743 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2728, _2729, (log2((isnan(cbSceneParam._m0[77u].w) ? _769 : (isnan(_769) ? cbSceneParam._m0[77u].w : min(_769, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2745 = _2743.x;
    float _2746 = _2743.y;
    float _2747 = _2743.z;
    float _2748 = _2743.w;
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    if (_769 > cbSceneParam._m0[78u].w)
    {
        float _2803 = isnan(_769) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _769 : min(cbSceneParam._m0[80u].w, _769));
        float _2804 = _2803 / _769;
        float _2815 = _2804 * _820;
        float _2816 = _821 * _2804;
        float _2817 = (-0.0) - _2816;
        float _2819 = _2804 * _822;
        float _2821 = (cbSceneParam._m0[77u].w * _2817) / _2803;
        float _2822 = _2821 + cbSceneParam._m0[79u].w;
        float _2823 = cbSceneParam._m0[79u].w - _2816;
        float _2829 = sqrt(((_2815 * _2815) + (_2816 * _2816)) + (_2819 * _2819));
        float _2832 = (1.0 - (cbSceneParam._m0[77u].w / _2803)) * _2829;
        float _2837 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2839 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3016;
        if (abs((_2817 - _2821) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3016 = ((((_2822 > 0.0) ? exp2(_2837 * _2822) : (2.0 - exp2(_2839 * _2822))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2832;
        }
        else
        {
            float _2960 = 1.0 / cbSceneParam._m0[80u].x;
            float _2961 = isnan(_2823) ? _2822 : (isnan(_2822) ? _2823 : max(_2822, _2823));
            float _2962 = isnan(_2823) ? _2822 : (isnan(_2822) ? _2823 : min(_2822, _2823));
            float _2971 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : min(_2961, 0.0));
            float _2972 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : min(_2962, 0.0));
            _3016 = ((abs(_2829 / _2817) * cbSceneParam._m0[80u].y) * ((((_2971 - _2972) * 2.0) - ((exp2(_2837 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0)))) - exp2(_2837 * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0))))) * _2960)) - ((exp2(_2839 * _2971) - exp2(_2839 * _2972)) * _2960))) + (_2832 * cbSceneParam._m0[80u].z);
        }
        vec4 _3018 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2728, _2729, 1.0), 0.0);
        float _3027 = exp2((_3016 * (-1.44269502162933349609375)) * (1.0 - _3018.w));
        float _3028 = log2(_3027);
        float _3044 = log2(_2748);
        _2841 = (exp2(_3044 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3028 * cbSceneParam._m0[78u].x)) * _3018.x) / cbSceneParam._m0[78u].x)) + _2745;
        _2843 = (exp2(_3044 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3028 * cbSceneParam._m0[78u].y)) * _3018.y) / cbSceneParam._m0[78u].y)) + _2746;
        _2845 = (exp2(_3044 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3028 * cbSceneParam._m0[78u].z)) * _3018.z) / cbSceneParam._m0[78u].z)) + _2747;
        _2847 = _3027 * _2748;
    }
    else
    {
        _2841 = _2745;
        _2843 = _2746;
        _2845 = _2747;
        _2847 = _2748;
    }
    bool _3054;
    vec4 _2857;
    vec4 _2879;
    float _2881;
    float _2885;
    float _2886;
    float _2887;
    float _2888;
    bool _2898;
    for (;;)
    {
        _2857 = cbMatDynParam._m0[0u];
        float _2859 = roundEven(_2857.y);
        bool _2860 = _2859 == 3.0;
        float _2861 = log2(_2847);
        float _2868 = exp2(_2861 * cbSceneParam._m0[78u].x) * _2717;
        float _2869 = exp2(_2861 * cbSceneParam._m0[78u].y) * _2718;
        float _2870 = exp2(_2861 * cbSceneParam._m0[78u].z) * _2719;
        float _2877 = _836 + (-0.5);
        _2879 = cbMtdParam._m0[1u];
        _2881 = _2879.y * _2877;
        float _2884 = (_2859 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2885 = _2884 * (_2860 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2841)));
        _2886 = _2884 * (_2860 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2843)));
        _2887 = _2884 * (_2860 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2845)));
        _2888 = _2877 * 0.999000012874603271484375;
        _2898 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2898)
        {
            if ((cbInstanceData._m0[_270 + 7u].x + _2888) < 0.5)
            {
                _3054 = true;
                break;
            }
        }
        uint _2995 = _885 + uint(_2857.w);
        if ((cbInstanceData._m0[_2995].w < 1.0) && ((cbInstanceData._m0[_2995].w + _2888) < 0.5))
        {
            _3054 = true;
            break;
        }
        if ((_2881 + 1.0) < _2879.x)
        {
            _3054 = true;
            break;
        }
        _3054 = false;
        break;
    }
    float _3259;
    if (_3054)
    {
        discard_state = true;
        _3259 = 0.0;
    }
    else
    {
        _3259 = cbInstanceData._m0[_2720].w;
    }
    SV_Target.x = _2885;
    SV_Target.y = _2886;
    SV_Target.z = _2887;
    SV_Target.w = _3259;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2720].w;
    discard_exit();
}


