#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1280;
float _3942;
float _3943;
float _3944;
float _3945;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].y) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3954 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _393 = (_386 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _394 = (_386 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _395 = (_386 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _480 = _478.x;
    float _481 = _478.y;
    float _482 = _478.z;
    float _491 = ((_461.z - _482) * _386) + _482;
    float _494 = ((((_461.x - _480) * _386) + _480) * 2.0) + (-1.0);
    float _495 = ((((_461.y - _481) * _386) + _481) * 2.0) + (-1.0);
    float _496 = dot(vec2(_494, _495), vec2(_494, _495));
    float _3965 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))));
    float _504 = _494 + ((((_434.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _505 = _495 + ((((_434.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _508 = fma(_501, _236, fma(_505, _243, _504 * _229));
    float _511 = fma(_501, _237, fma(_505, _244, _504 * _230));
    float _514 = fma(_501, _238, fma(_505, _245, _504 * _231));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _560 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _562 = _560.x;
    float _563 = 1.0 - _562;
    float _569 = (cbMtdParam._m0[19u].x + dot(vec4(_518 * _508, _518 * _511, _518 * _514, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_562 - _563) * cbMtdParam._m0[24u].z) + _563) * cbMtdParam._m0[21u].z);
    float _3976 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _577 = (_570 * ((_414.x * cbMtdParam._m0[18u].x) - _393)) + _393;
    float _578 = (_570 * ((_414.y * cbMtdParam._m0[18u].y) - _394)) + _394;
    float _579 = (_570 * ((_414.z * cbMtdParam._m0[18u].z) - _395)) + _395;
    vec4 _591 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _607 = _605.x;
    float _625 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _607) * _386) + _607;
    float _629 = ((_591.x - _625) * cbMtdParam._m0[19u].z) + _625;
    float _631 = _629 - (_629 * _570);
    float _636 = (((_434.z - _491) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _491;
    vec4 _649 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _656 = (_649.x * 2.0) + (-1.0);
    float _657 = (_649.y * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _3987 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _666 = ((_649.z - _636) * _570) + _636;
    float _676 = ((sqrt(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) - _501) * _570) + _501;
    float _679 = (((_656 - _504) * _570) + _504) + (cbMtdParam._m0[21u].x * _504);
    float _680 = (((_657 - _505) * _570) + _505) + (cbMtdParam._m0[21u].x * _505);
    float _685 = cbMtdParam._m0[22u].x + _534.w;
    float _688 = fma(_676, _236, fma(_680, _243, _679 * _229));
    float _691 = fma(_676, _237, fma(_680, _244, _679 * _230));
    float _694 = fma(_676, _238, fma(_680, _245, _679 * _231));
    float _698 = inversesqrt(dot(vec3(_688, _691, _694), vec3(_688, _691, _694)));
    float _699 = _698 * _688;
    float _700 = _698 * _691;
    float _701 = _698 * _694;
    float _3998 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _702 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _4009 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4020 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4031 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _4042 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _4053 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _707 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _721 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _772 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _762);
    float _773 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _762);
    float _774 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _762);
    float _778 = inversesqrt(dot(vec3(_772, _773, _774), vec3(_772, _773, _774)));
    float _779 = _772 * _778;
    float _780 = _773 * _778;
    float _781 = _774 * _778;
    vec4 _786 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _788 = _786.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _960 = sqrt(((_772 * _772) + (_773 * _773)) + (_774 * _774));
        float _966 = (cbMatDynParam._m0[5u].x * _960) + cbMatDynParam._m0[5u].y;
        float _4064 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _971 = (cbMatDynParam._m0[5u].z * _960) + cbMatDynParam._m0[5u].w;
        float _4075 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) - _967)) + _967) < ((_788 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _799 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _800 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _818 = fma(_701, cbSceneParam._m0[5u].z, fma(_700, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _699));
    float _821 = fma(_701, cbSceneParam._m0[6u].z, fma(_700, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _699));
    float _824 = fma(_701, cbSceneParam._m0[7u].z, fma(_700, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _699));
    uint _837 = _248 + 9u;
    uint _838 = _837 + uint(cbMatDynParam._m0[0u].w);
    float _844 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * cbInstanceData._m0[_838].x;
    float _845 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * cbInstanceData._m0[_838].y;
    float _846 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * cbInstanceData._m0[_838].z;
    float _4086 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _4108 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _850 = 1.0 - _707;
    float _851 = _847 * _850;
    float _852 = _848 * _850;
    float _853 = _849 * _850;
    float _858 = (_847 + (-0.039999999105930328369140625)) * _707;
    float _859 = (_848 + (-0.039999999105930328369140625)) * _707;
    float _860 = (_849 + (-0.039999999105930328369140625)) * _707;
    float _861 = _858 + 0.039999999105930328369140625;
    float _863 = _859 + 0.039999999105930328369140625;
    float _864 = _860 + 0.039999999105930328369140625;
    vec4 _873 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _799, cbSceneParam._m0[86u].y * _800));
    float _877 = ((isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * TEXCOORD_5.w) * _873.x;
    float _878 = dot(vec3(_699, _700, _701), vec3(_779, _780, _781));
    float _881 = _878 * 2.0;
    float _885 = (_881 * _699) - _779;
    float _886 = (_881 * _700) - _780;
    float _887 = (_881 * _701) - _781;
    float _891 = abs(dot(vec3(_779, _780, _781), vec3(_699, _700, _701)));
    float _4119 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _893 = sqrt(_702);
    float _906 = exp2((_893 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_893 * 3.0));
    float _912 = (1.0 - _906) * ((_893 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _913 = _906 * _893;
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1279;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1004 = fma(_949, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941));
        float _1008 = fma(_949, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941));
        float _1012 = fma(_949, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941));
        float _1037 = _941 + _699;
        float _1038 = _945 + _700;
        float _1039 = _949 + _701;
        float _1049 = fma(_1039, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037)) - _1004;
        float _1050 = fma(_1039, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037)) - _1008;
        float _1051 = fma(_1039, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037)) - _1012;
        float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
        float _1068 = ((_1055 * _1049) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1004 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1055 * _1050) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1008 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1055 * _1051) / cbModelParam._m0[34u].z) + ((((((_1012 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        float _1107 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1073.x + (-0.5));
        float _1109 = _1107 * (_1073.y + (-0.5));
        float _1110 = _1107 * (_1073.z + (-0.5));
        float _1117 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1080.x + (-0.5));
        float _1119 = _1117 * (_1080.y + (-0.5));
        float _1120 = _1117 * (_1080.z + (-0.5));
        float _1127 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1087.x + (-0.5));
        float _1129 = _1127 * (_1087.y + (-0.5));
        float _1130 = _1127 * (_1087.z + (-0.5));
        float _1137 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1094.x + (-0.5));
        float _1139 = _1137 * (_1094.y + (-0.5));
        float _1140 = _1137 * (_1094.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1161 = (dot(vec3(_699, _700, _701), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1171 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _4167 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1173 + 1.0))) + _1178) * _1141;
        float _1188 = _1109 * 0.5;
        float _1189 = _1119 * 0.5;
        float _1190 = _1129 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_699, _700, _701), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _4200 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1215 + 1.0))) + _1220) * _1142;
        float _1230 = _1110 * 0.5;
        float _1231 = _1120 * 0.5;
        float _1232 = _1130 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_699, _700, _701), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _4233 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1257 + 1.0))) + _1262) * _1143;
        _1279 = _1110;
        _1281 = _1109;
        _1282 = _1108;
        _1283 = _1120;
        _1284 = _1119;
        _1285 = _1118;
        _1286 = _1130;
        _1287 = _1129;
        _1288 = _1128;
        _1289 = _1143;
        _1290 = _1142;
        _1291 = _1141;
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _1280;
        _1281 = _1280;
        _1282 = _1280;
        _1283 = _1280;
        _1284 = _1280;
        _1285 = _1280;
        _1286 = _1280;
        _1287 = _1280;
        _1288 = _1280;
        _1289 = _1280;
        _1290 = _1280;
        _1291 = _1280;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1322 = fma(_949, cbModelParam._m0[30u].z, fma(_945, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _941));
        float _1326 = fma(_949, cbModelParam._m0[31u].z, fma(_945, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _941));
        float _1330 = fma(_949, cbModelParam._m0[32u].z, fma(_945, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _941));
        float _1353 = _941 + _699;
        float _1354 = _945 + _700;
        float _1355 = _949 + _701;
        float _1365 = fma(_1355, cbModelParam._m0[30u].z, fma(_1354, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1353)) - _1322;
        float _1366 = fma(_1355, cbModelParam._m0[31u].z, fma(_1354, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1353)) - _1326;
        float _1367 = fma(_1355, cbModelParam._m0[32u].z, fma(_1354, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1353)) - _1330;
        float _1371 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
        float _1384 = ((_1371 * _1365) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1322 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1371 * _1366) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1326 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1371 * _1367) / cbModelParam._m0[35u].z) + ((((((_1330 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        float _1421 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1388.x + (-0.5));
        float _1423 = _1421 * (_1388.y + (-0.5));
        float _1424 = _1421 * (_1388.z + (-0.5));
        float _1431 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1395.x + (-0.5));
        float _1433 = _1431 * (_1395.y + (-0.5));
        float _1434 = _1431 * (_1395.z + (-0.5));
        float _1441 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1402.x + (-0.5));
        float _1443 = _1441 * (_1402.y + (-0.5));
        float _1444 = _1441 * (_1402.z + (-0.5));
        float _1451 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1409.x + (-0.5));
        float _1453 = _1451 * (_1409.y + (-0.5));
        float _1454 = _1451 * (_1409.z + (-0.5));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = _1422 * 0.5;
        float _1459 = _1432 * 0.5;
        float _1460 = _1442 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_699, _700, _701), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4296 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1485 + 1.0))) + _1490) * _1455;
        float _1500 = _1423 * 0.5;
        float _1501 = _1433 * 0.5;
        float _1502 = _1443 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_699, _700, _701), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4329 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1527 + 1.0))) + _1532) * _1456;
        float _1542 = _1424 * 0.5;
        float _1543 = _1434 * 0.5;
        float _1544 = _1444 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_699, _700, _701), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4362 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1569 + 1.0))) + _1574) * _1457;
        _1591 = _1424;
        _1592 = _1423;
        _1593 = _1422;
        _1594 = _1434;
        _1595 = _1433;
        _1596 = _1432;
        _1597 = _1444;
        _1598 = _1443;
        _1599 = _1442;
        _1600 = _1457;
        _1601 = _1456;
        _1602 = _1455;
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
    }
    else
    {
        _1591 = _1280;
        _1592 = _1280;
        _1593 = _1280;
        _1594 = _1280;
        _1595 = _1280;
        _1596 = _1280;
        _1597 = _1280;
        _1598 = _1280;
        _1599 = _1280;
        _1600 = _1280;
        _1601 = _1280;
        _1602 = _1280;
        _1603 = 0.0;
        _1604 = 0.0;
        _1605 = 0.0;
    }
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1292)) + _1292;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1293)) + _1293;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1294)) + _1294;
    float _1638 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1615));
    float _1659 = _885 * 0.5;
    float _1660 = _886 * 0.5;
    float _1661 = _887 * 0.5;
    float _1662 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1665 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1668 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1702;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1675 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1279, _1283, _1286, _1289));
        float _1679 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1683 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1690 = dot(vec4(cbModelParam._m0[39u]), vec4(_1659, _1660, _1661, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1713;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1704 = dot(vec4(cbModelParam._m0[40u]), vec4(_1659, _1660, _1661, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1717 = (_1713 * cbModelParam._m0[1u].x) + (_1702 * (1.0 - cbModelParam._m0[1u].x));
    float _1727 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _702);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1727 : min(cbModelParam._m0[25u].z, _1727));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1775 = fma(_949, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941)) + cbModelParam._m0[13u].w;
        float _1779 = fma(_949, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941)) + cbModelParam._m0[14u].w;
        float _1783 = fma(_949, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941)) + cbModelParam._m0[15u].w;
        float _1786 = fma(_887, cbModelParam._m0[13u].z, fma(_886, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885));
        float _1789 = fma(_887, cbModelParam._m0[14u].z, fma(_886, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885));
        float _1792 = fma(_887, cbModelParam._m0[15u].z, fma(_886, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885));
        float _1820;
        if (_1786 > 0.0)
        {
            _1820 = abs((1.0 - _1775) / _1786);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1775 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1820 = frontier_phi_17_15_ladder;
        }
        float _1991;
        if (_1789 > 0.0)
        {
            _1991 = abs((1.0 - _1779) / _1789);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1779 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1991 = frontier_phi_26_22_ladder;
        }
        float _2286;
        if (_1792 > 0.0)
        {
            _2286 = abs((1.0 - _1783) / _1792);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1783 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2286 = frontier_phi_38_33_ladder;
        }
        float _2288 = isnan(_1991) ? _1820 : (isnan(_1820) ? _1991 : min(_1820, _1991));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1786) + _1775;
        float _2294 = (_2289 * _1789) + _1779;
        float _2295 = (_2289 * _1792) + _1783;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2296;
        float _2300 = _2296 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 > _2300) || ((_2294 < _2298) || ((_2293 < _2298) || (_2293 > _2300))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2440 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2295, cbModelParam._m0[9u].z, fma(_2294, cbModelParam._m0[9u].y, _2293 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2295, cbModelParam._m0[10u].z, fma(_2294, cbModelParam._m0[10u].y, _2293 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2295, cbModelParam._m0[11u].z, fma(_2294, cbModelParam._m0[11u].y, _2293 * cbModelParam._m0[11u].x))), _1728);
            frontier_phi_16_38_ladder = _2440.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2440.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2440.x * cbModelParam._m0[1u].y;
        }
        _1808 = frontier_phi_16_38_ladder_2;
        _1810 = frontier_phi_16_38_ladder_1;
        _1812 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_885, _886, _887), _1728);
        _1808 = _1796.x * cbModelParam._m0[1u].y;
        _1810 = _1796.y * cbModelParam._m0[1u].y;
        _1812 = _1796.z * cbModelParam._m0[1u].y;
    }
    float _1816 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _702);
    float _1817 = isnan(_1816) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1816 : min(cbModelParam._m0[25u].w, _1816));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1870 = fma(_949, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941)) + cbModelParam._m0[21u].w;
        float _1874 = fma(_949, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941)) + cbModelParam._m0[22u].w;
        float _1878 = fma(_949, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941)) + cbModelParam._m0[23u].w;
        float _1881 = fma(_887, cbModelParam._m0[21u].z, fma(_886, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885));
        float _1884 = fma(_887, cbModelParam._m0[22u].z, fma(_886, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885));
        float _1887 = fma(_887, cbModelParam._m0[23u].z, fma(_886, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885));
        float _1996;
        if (_1881 > 0.0)
        {
            _1996 = abs((1.0 - _1870) / _1881);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1870 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1996 = frontier_phi_28_24_ladder;
        }
        float _2313;
        if (_1884 > 0.0)
        {
            _2313 = abs((1.0 - _1874) / _1884);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1874 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2313 = frontier_phi_40_35_ladder;
        }
        float _2651;
        if (_1887 > 0.0)
        {
            _2651 = abs((1.0 - _1878) / _1887);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1878 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2651 = frontier_phi_50_47_ladder;
        }
        float _2653 = isnan(_2313) ? _1996 : (isnan(_1996) ? _2313 : min(_1996, _2313));
        float _2654 = isnan(_2651) ? _2653 : (isnan(_2653) ? _2651 : min(_2653, _2651));
        float _2658 = (_2654 * _1881) + _1870;
        float _2659 = (_2654 * _1884) + _1874;
        float _2660 = (_2654 * _1887) + _1878;
        float _2661 = _2654 * 9.9999997473787516355514526367188e-05;
        float _2662 = (-1.0) - _2661;
        float _2664 = _2661 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2660 > _2664) || ((_2660 < _2662) || ((_2659 > _2664) || ((_2659 < _2662) || ((_2658 < _2662) || (_2658 > _2664))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2660, cbModelParam._m0[17u].z, fma(_2659, cbModelParam._m0[17u].y, _2658 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2660, cbModelParam._m0[18u].z, fma(_2659, cbModelParam._m0[18u].y, _2658 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2660, cbModelParam._m0[19u].z, fma(_2659, cbModelParam._m0[19u].y, _2658 * cbModelParam._m0[19u].x))), _1817);
            frontier_phi_25_50_ladder = _2782.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2782.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2782.x * cbModelParam._m0[1u].z;
        }
        _1906 = frontier_phi_25_50_ladder_2;
        _1908 = frontier_phi_25_50_ladder_1;
        _1910 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1890 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_885, _886, _887), _1817);
        _1906 = _1890.x * cbModelParam._m0[1u].z;
        _1908 = _1890.y * cbModelParam._m0[1u].z;
        _1910 = _1890.z * cbModelParam._m0[1u].z;
    }
    float _1923 = (((_912 * _861) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1906 - _1808)) + _1808);
    float _1925 = (((_912 * _863) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1908 - _1810)) + _1810);
    float _1927 = (((_912 * _864) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1910 - _1812)) + _1812);
    float _1930 = fma(_1927, cbSceneParam._m0[89u].z, fma(_1925, cbSceneParam._m0[89u].y, _1923 * cbSceneParam._m0[89u].x));
    float _1933 = fma(_1927, cbSceneParam._m0[90u].z, fma(_1925, cbSceneParam._m0[90u].y, _1923 * cbSceneParam._m0[90u].x));
    float _1936 = fma(_1927, cbSceneParam._m0[91u].z, fma(_1925, cbSceneParam._m0[91u].y, _1923 * cbSceneParam._m0[91u].x));
    float _1970 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1983 = _1970 / _1982;
    float _1984 = _1974 / _1982;
    float _1985 = _1978 / _1982;
    float _2132;
    float _2133;
    float _2134;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2012 = ((uint(_1985 > cbSceneParam._m0[59u].y) + uint(_1985 > cbSceneParam._m0[59u].x)) + uint(_1985 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2013 = _2012 + 43u;
        uint _2021 = _2012 + 44u;
        uint _2029 = _2012 + 45u;
        uint _2037 = _2012 + 46u;
        float _2048 = fma(_1982, cbSceneParam._m0[_2013].w, fma(_1978, cbSceneParam._m0[_2013].z, fma(_1974, cbSceneParam._m0[_2013].y, _1970 * cbSceneParam._m0[_2013].x)));
        float _2052 = fma(_1982, cbSceneParam._m0[_2021].w, fma(_1978, cbSceneParam._m0[_2021].z, fma(_1974, cbSceneParam._m0[_2021].y, _1970 * cbSceneParam._m0[_2021].x)));
        float _2060 = fma(_1982, cbSceneParam._m0[_2037].w, fma(_1978, cbSceneParam._m0[_2037].z, fma(_1974, cbSceneParam._m0[_2037].y, _1970 * cbSceneParam._m0[_2037].x)));
        float _2065 = cbSceneParam._m0[33u].z * _2060;
        float _2067 = cbSceneParam._m0[33u].w * _2060;
        float _2070 = fma(_1982, cbSceneParam._m0[_2029].w, fma(_1978, cbSceneParam._m0[_2029].z, fma(_1974, cbSceneParam._m0[_2029].y, _1970 * cbSceneParam._m0[_2029].x))) / _2060;
        float _2118 = (cbSceneParam._m0[33u].x - sqrt(((_1984 * _1984) + (_1983 * _1983)) + (_1985 * _1985))) * cbSceneParam._m0[33u].y;
        float _4488 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2125 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 + _2048) / _2060, (_2067 + _2052) / _2060), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 + _2048) / _2060, (_2052 - _2065) / _2060), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2048 - _2065) / _2060, (_2052 - _2067) / _2060), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2048 - _2067) / _2060, (_2065 + _2052) / _2060), _2070), 0.0)).x), vec4(0.25)));
        _2132 = 1.0 - (_2125 * cbSceneParam._m0[34u].x);
        _2133 = 1.0 - (_2125 * cbSceneParam._m0[34u].y);
        _2134 = 1.0 - (_2125 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2132 = 1.0;
        _2133 = 1.0;
        _2134 = 1.0;
    }
    float _2198;
    float _2200;
    float _2202;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2186 = fma(_1982, cbSceneParam._m0[63u].w, fma(_1978, cbSceneParam._m0[63u].z, fma(_1974, cbSceneParam._m0[63u].y, _1970 * cbSceneParam._m0[63u].x)));
        float _2187 = fma(_1982, cbSceneParam._m0[60u].w, fma(_1978, cbSceneParam._m0[60u].z, fma(_1974, cbSceneParam._m0[60u].y, _1970 * cbSceneParam._m0[60u].x))) / _2186;
        float _2188 = fma(_1982, cbSceneParam._m0[61u].w, fma(_1978, cbSceneParam._m0[61u].z, fma(_1974, cbSceneParam._m0[61u].y, _1970 * cbSceneParam._m0[61u].x))) / _2186;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2187 >= cbSceneParam._m0[64u].x) && (_2188 >= cbSceneParam._m0[64u].y)) && (_2187 <= cbSceneParam._m0[64u].z)) && (_2188 <= cbSceneParam._m0[64u].w))
        {
            float _2326 = fma(_1982, cbSceneParam._m0[62u].w, fma(_1978, cbSceneParam._m0[62u].z, fma(_1974, cbSceneParam._m0[62u].y, _1970 * cbSceneParam._m0[62u].x))) / _2186;
            float _2330 = isnan(cbSceneParam._m0[41u].w) ? _2326 : (isnan(_2326) ? cbSceneParam._m0[41u].w : max(_2326, cbSceneParam._m0[41u].w));
            float _2373 = (cbSceneParam._m0[33u].x - sqrt(((_1984 * _1984) + (_1983 * _1983)) + (_1985 * _1985))) * cbSceneParam._m0[33u].y;
            float _4504 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
            float _2380 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2187, cbSceneParam._m0[33u].w + _2188), _2330), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2187, _2188 - cbSceneParam._m0[33u].z), _2330), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2187 - cbSceneParam._m0[33u].z, _2188 - cbSceneParam._m0[33u].w), _2330), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2187 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2188), _2330), 0.0)).x), vec4(0.25)));
            float _2384 = 1.0 - (_2380 * cbSceneParam._m0[34u].x);
            float _2385 = 1.0 - (_2380 * cbSceneParam._m0[34u].y);
            float _2386 = 1.0 - (_2380 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2386) ? _2134 : (isnan(_2134) ? _2386 : min(_2134, _2386));
            frontier_phi_37_36_ladder_1 = isnan(_2385) ? _2133 : (isnan(_2133) ? _2385 : min(_2133, _2385));
            frontier_phi_37_36_ladder_2 = isnan(_2384) ? _2132 : (isnan(_2132) ? _2384 : min(_2132, _2384));
        }
        else
        {
            frontier_phi_37_36_ladder = _2134;
            frontier_phi_37_36_ladder_1 = _2133;
            frontier_phi_37_36_ladder_2 = _2132;
        }
        _2198 = frontier_phi_37_36_ladder_2;
        _2200 = frontier_phi_37_36_ladder_1;
        _2202 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2198 = _2132;
        _2200 = _2133;
        _2202 = _2134;
    }
    uvec4 _2207 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2209 = _2207.x * 14u;
    uint _2210 = _2209 + 13u;
    float _2217 = _877 + (-1.0);
    float _2222 = (cbLight._m0[_2210].x * _2217) + 1.0;
    float _2223 = (cbLight._m0[_2210].y * _2217) + 1.0;
    float _2224 = (cbLight._m0[_2210].z * _2217) + 1.0;
    float _2225 = (cbLight._m0[_2210].w * _2217) + 1.0;
    uint _2226 = _2209 + 5u;
    float _2232 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
    uint _2236 = _2209 + 4u;
    float _2245 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
    uint _2249 = _2209 | 1u;
    float _2260 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_699, _700, _701));
    float _2263 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_699, _700, _701));
    float _4540 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _4551 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2268 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * 0.3183098733425140380859375;
    float _2270 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * 0.3183098733425140380859375;
    float _2277 = ((cbLight._m0[_2226].x * _2232) * _2270) + (((cbLight._m0[_2236].x * _2198) * _2245) * _2268);
    float _2278 = ((_2232 * cbLight._m0[_2226].y) * _2270) + (((cbLight._m0[_2236].y * _2200) * _2245) * _2268);
    float _2279 = ((_2232 * cbLight._m0[_2226].z) * _2270) + (((cbLight._m0[_2236].z * _2202) * _2245) * _2268);
    uvec4 _2283 = floatBitsToUint(cbLight._m0[_2209 + 12u]);
    bool _2285 = _2283.x == 0u;
    float _2387;
    float _2389;
    float _2391;
    if (_2285)
    {
        _2387 = _2277;
        _2389 = _2278;
        _2391 = _2279;
    }
    else
    {
        uint _2395 = _2209 + 6u;
        float _2411 = (dot(vec3(cbLight._m0[_2209 + 2u].xyz), vec3(_699, _700, _701)) * 0.5) + 0.5;
        float _2412 = _2411 * _2411;
        float _4562 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2413 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2414 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
        _2387 = (((cbLight._m0[_2395].x * 0.3183098733425140380859375) * _2413) * _2414) + _2277;
        _2389 = (((cbLight._m0[_2395].y * 0.3183098733425140380859375) * _2413) * _2414) + _2278;
        _2391 = (((cbLight._m0[_2395].z * 0.3183098733425140380859375) * _2413) * _2414) + _2279;
    }
    bool _2394 = _2283.y == 0u;
    float _2449;
    float _2451;
    float _2453;
    if (_2394)
    {
        _2449 = _2387;
        _2451 = _2389;
        _2453 = _2391;
    }
    else
    {
        uint _2622 = _2209 + 7u;
        float _2638 = (dot(vec3(cbLight._m0[_2209 + 3u].xyz), vec3(_699, _700, _701)) * 0.5) + 0.5;
        float _2639 = _2638 * _2638;
        float _4578 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2640 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2641 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2449 = (((cbLight._m0[_2622].x * 0.3183098733425140380859375) * _2640) * _2641) + _2387;
        _2451 = (((cbLight._m0[_2622].y * 0.3183098733425140380859375) * _2640) * _2641) + _2389;
        _2453 = (((cbLight._m0[_2622].z * 0.3183098733425140380859375) * _2640) * _2641) + _2391;
    }
    uint _2456 = _2209 + 8u;
    float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _702) * 0.949999988079071044921875);
    float _2470 = _2469 * _2469;
    float _2471 = cbLight._m0[_2209].x + _779;
    float _2472 = cbLight._m0[_2209].y + _780;
    float _2473 = cbLight._m0[_2209].z + _781;
    float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
    float _2478 = _2477 * _2471;
    float _2479 = _2477 * _2472;
    float _2480 = _2477 * _2473;
    float _2481 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_2209].xyz));
    float _4594 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _4605 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _2485 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
    float _2486 = dot(vec3(_699, _700, _701), vec3(_2478, _2479, _2480));
    float _4616 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
    float _2490 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2478, _2479, _2480));
    float _4627 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2494 = _2470 * _2470;
    float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
    float _2506 = exp2(log2(1.0 - (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) * 5.0);
    float _2507 = 0.959999978542327880859375 - _858;
    float _2509 = 0.959999978542327880859375 - _859;
    float _2510 = 0.959999978542327880859375 - _860;
    float _2517 = 1.0 - _2470;
    float _2528 = (0.5 / (((_2485 * ((_2484 * _2517) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2485 * _2517) + _2470) * _2484))) * _2484;
    float _4638 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2530 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
    uint _2544 = _2209 + 9u;
    float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _702) * 0.949999988079071044921875);
    float _2556 = _2555 * _2555;
    float _2557 = cbLight._m0[_2249].x + _779;
    float _2558 = cbLight._m0[_2249].y + _780;
    float _2559 = cbLight._m0[_2249].z + _781;
    float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
    float _2564 = _2563 * _2557;
    float _2565 = _2563 * _2558;
    float _2566 = _2563 * _2559;
    float _2567 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_2249].xyz));
    float _4649 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2570 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _2571 = dot(vec3(_699, _700, _701), vec3(_2564, _2565, _2566));
    float _4660 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
    float _2575 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2564, _2565, _2566));
    float _4671 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2579 = _2556 * _2556;
    float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
    float _2590 = exp2(log2(1.0 - (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) * 5.0);
    float _2597 = 1.0 - _2556;
    float _2607 = (0.5 / (((_2485 * ((_2570 * _2597) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2485 * _2597) + _2556) * _2570))) * _2570;
    float _4682 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2609 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
    float _2619 = (((((_2590 * _2507) + _861) * cbLight._m0[_2544].x) * _2609) * _2232) + ((((cbLight._m0[_2456].x * _2198) * ((_2506 * _2507) + _861)) * _2530) * _2245);
    float _2620 = (((((_2590 * _2509) + _863) * cbLight._m0[_2544].y) * _2609) * _2232) + ((((cbLight._m0[_2456].y * _2200) * ((_2506 * _2509) + _863)) * _2530) * _2245);
    float _2621 = (((((_2590 * _2510) + _864) * cbLight._m0[_2544].z) * _2609) * _2232) + ((((cbLight._m0[_2456].z * _2202) * ((_2506 * _2510) + _864)) * _2530) * _2245);
    float _2677;
    float _2679;
    float _2681;
    if (_2285)
    {
        _2677 = _2619;
        _2679 = _2620;
        _2681 = _2621;
    }
    else
    {
        uint _2683 = _2209 + 2u;
        uint _2687 = _2209 + 10u;
        float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2683].w)) * _702) * 0.949999988079071044921875);
        float _2702 = _2701 * _2701;
        float _2703 = cbLight._m0[_2683].x + _779;
        float _2704 = cbLight._m0[_2683].y + _780;
        float _2705 = cbLight._m0[_2683].z + _781;
        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
        float _2710 = _2709 * _2703;
        float _2711 = _2709 * _2704;
        float _2712 = _2709 * _2705;
        float _2713 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_2683].xyz));
        float _4693 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2717 = dot(vec3(_699, _700, _701), vec3(_2710, _2711, _2712));
        float _4704 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2721 = dot(vec3(cbLight._m0[_2683].xyz), vec3(_2710, _2711, _2712));
        float _4715 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2725 = _2702 * _2702;
        float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
        float _2736 = exp2(log2(1.0 - (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) * 5.0);
        float _2743 = 1.0 - _2702;
        float _2753 = (0.5 / (((_2485 * ((_2716 * _2743) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2485 * _2743) + _2702) * _2716))) * _2716;
        float _4726 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2755 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
        float _2756 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
        _2677 = (((((_2736 * _2507) + _861) * cbLight._m0[_2687].x) * _2755) * _2756) + _2619;
        _2679 = (((((_2736 * _2509) + _863) * cbLight._m0[_2687].y) * _2755) * _2756) + _2620;
        _2681 = (((((_2736 * _2510) + _864) * cbLight._m0[_2687].z) * _2755) * _2756) + _2621;
    }
    float _2787;
    float _2789;
    float _2791;
    if (_2394)
    {
        _2787 = _2677;
        _2789 = _2679;
        _2791 = _2681;
    }
    else
    {
        uint _2798 = _2209 + 3u;
        uint _2802 = _2209 + 11u;
        float _2816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2798].w)) * _702) * 0.949999988079071044921875);
        float _2817 = _2816 * _2816;
        float _2818 = cbLight._m0[_2798].x + _779;
        float _2819 = cbLight._m0[_2798].y + _780;
        float _2820 = cbLight._m0[_2798].z + _781;
        float _2824 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
        float _2825 = _2824 * _2818;
        float _2826 = _2824 * _2819;
        float _2827 = _2824 * _2820;
        float _2828 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_2798].xyz));
        float _4742 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2831 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2832 = dot(vec3(_699, _700, _701), vec3(_2825, _2826, _2827));
        float _4753 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2835 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _2836 = dot(vec3(cbLight._m0[_2798].xyz), vec3(_2825, _2826, _2827));
        float _4764 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2840 = _2817 * _2817;
        float _2844 = ((_2835 * _2835) * (_2840 + (-1.0))) + 1.0;
        float _2851 = exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0);
        float _2858 = 1.0 - _2817;
        float _2868 = (0.5 / (((_2485 * ((_2831 * _2858) + _2817)) + 9.9999999392252902907785028219223e-09) + (((_2485 * _2858) + _2817) * _2831))) * _2831;
        float _4775 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2870 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2840 / ((_2844 * _2844) * 3.141590118408203125));
        float _2871 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2787 = (((((_2851 * _2507) + _861) * cbLight._m0[_2802].x) * _2870) * _2871) + _2677;
        _2789 = (((((_2851 * _2509) + _863) * cbLight._m0[_2802].y) * _2870) * _2871) + _2679;
        _2791 = (((((_2851 * _2510) + _864) * cbLight._m0[_2802].z) * _2870) * _2871) + _2681;
    }
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    if (_2207.y == 0u)
    {
        uvec4 _2892 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2893 = _2892.x;
        uint _2904 = uint((float(_2892.y) * floor(float(uint(cbSceneParam._m0[85u].y * _800) / _2893))) + floor(float(uint(cbSceneParam._m0[85u].x * _799) / _2893)));
        float _2914 = (log2(_1985 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2915 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        uint _2918 = uint(isnan(14.0) ? _2915 : (isnan(_2915) ? 14.0 : min(_2915, 14.0)));
        uvec4 _2923 = texelFetch(g_lightClusterGridBuffer, int(((_2918 << 2u) + (_2904 << 6u)) >> 2u));
        uint _2924 = _2923.x;
        uint _2925 = _2892.z;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        if (((((1u << ((_2925 >> 4u) & 15u)) + 4294967295u) & _2924) == 0u) || ((_2925 & 240u) == 0u))
        {
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
        }
        else
        {
            float _3005;
            float _3007;
            float _3009;
            float _3011;
            float _3013;
            float _3015;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            uint _3163 = 0u;
            uint _3172;
            bool _3173;
            for (;;)
            {
                _3172 = texelFetch(g_lightClassification, int((((_2918 << 5u) + (_2904 << 9u)) + (_3163 << 2u)) >> 2u)).x;
                _3173 = _3172 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3173)
                {
                    frontier_phi_71_pred = _3162;
                    frontier_phi_71_pred_1 = _3161;
                    frontier_phi_71_pred_2 = _3160;
                    frontier_phi_71_pred_3 = _3159;
                    frontier_phi_71_pred_4 = _3158;
                    frontier_phi_71_pred_5 = _3157;
                }
                else
                {
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    uint _3308;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3172;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    for (;;)
                    {
                        uint _3312 = uint(findLSB(_3308)) + (_3163 << 5u);
                        uint _3309 = (_3308 + 4294967295u) & _3308;
                        uint _3314 = _3312 * 48u;
                        vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3314)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 3u)).x));
                        uint _3334 = (_3312 * 48u) + 4u;
                        vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 3u)).x));
                        uint _3353 = (_3312 * 48u) + 8u;
                        vec3 _3364 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3353)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 2u)).x));
                        float _3368 = _3328.x - _1983;
                        float _3369 = _3328.y - _1984;
                        float _3370 = _3328.z - _1985;
                        float _3371 = dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370));
                        float _3374 = inversesqrt(_3371);
                        float _3375 = _3374 * _3368;
                        float _3376 = _3374 * _3369;
                        float _3377 = _3374 * _3370;
                        float _3378 = dot(vec3(_818, _821, _824), vec3(_3375, _3376, _3377));
                        float _3383 = 1.0 - (_3371 * _3328.w);
                        float _4801 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3384 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3385 = sqrt(_3371) * _3347.w;
                        float _3388 = 1.39999997615814208984375 / (_3385 + 1.39999997615814208984375);
                        float _3389 = _3388 * _3388;
                        float _3392 = ((1.0 - _3389) * _3378) + _3389;
                        float _3395 = _3385 * _3385;
                        float _3399 = ((isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0))) * _3384) / ((_3395 * 0.699999988079071044921875) + 1.0);
                        float _3403 = (-0.0) - _1983;
                        float _3404 = (-0.0) - _1984;
                        float _3405 = (-0.0) - _1985;
                        float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                        float _3410 = _3409 * _3403;
                        float _3411 = _3409 * _3404;
                        float _3412 = _3409 * _3405;
                        float _3419 = exp2(log2(1.0 / ((_3395 * 3.5) + 5.0)) * 0.25);
                        float _3420 = 1.0 - _893;
                        float _3427 = sqrt(1.0 - ((1.0 - (_3420 * _3420)) * (1.0 - (_3419 * _3419))));
                        float _3428 = _3427 * _3427;
                        float _3429 = _3428 * _3428;
                        float _3430 = _3410 + _3375;
                        float _3431 = _3411 + _3376;
                        float _3432 = _3412 + _3377;
                        float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                        float _3440 = dot(vec3(_818, _821, _824), vec3(_3410, _3411, _3412));
                        float _4817 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3443 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                        float _3444 = dot(vec3(_818, _821, _824), vec3(_3436 * _3430, _3436 * _3431, _3436 * _3432));
                        float _4828 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3447 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                        float _3451 = ((_3447 * _3447) * (_3429 + (-1.0))) + 1.0;
                        float _3452 = _3388 * _3428;
                        float _3453 = _3452 * _3452;
                        float _3456 = ((1.0 - _3453) * _3378) + _3453;
                        float _4839 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3457 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                        float _3458 = 1.0 - _3428;
                        float _3468 = (0.5 / (((_3457 * ((_3443 * _3458) + _3428)) + 9.9999999392252902907785028219223e-09) + (((_3457 * _3458) + _3428) * _3443))) * _3457;
                        float _4850 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3479 = (((_3429 * 3.1415927410125732421875) * (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) / ((_3451 * _3451) * ((_3395 * 2.1991131305694580078125) + 3.141590118408203125))) * _3384;
                        _3232 = (_3399 * _3347.x) + _3305;
                        _3233 = (_3399 * _3347.y) + _3306;
                        _3234 = (_3399 * _3347.z) + _3307;
                        _3229 = (_3479 * _3364.x) + _3302;
                        _3230 = (_3479 * _3364.y) + _3303;
                        _3231 = (_3479 * _3364.z) + _3304;
                        if (_3309 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3309;
                        }
                    }
                    frontier_phi_71_pred = _3234;
                    frontier_phi_71_pred_1 = _3233;
                    frontier_phi_71_pred_2 = _3232;
                    frontier_phi_71_pred_3 = _3231;
                    frontier_phi_71_pred_4 = _3230;
                    frontier_phi_71_pred_5 = _3229;
                }
                _3015 = frontier_phi_71_pred;
                _3013 = frontier_phi_71_pred_1;
                _3011 = frontier_phi_71_pred_2;
                _3009 = frontier_phi_71_pred_3;
                _3007 = frontier_phi_71_pred_4;
                _3005 = frontier_phi_71_pred_5;
                uint _3164 = _3163 + 1u;
                if (_3164 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3157 = _3005;
                    _3158 = _3007;
                    _3159 = _3009;
                    _3160 = _3011;
                    _3161 = _3013;
                    _3162 = _3015;
                    _3163 = _3164;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
        }
        uvec4 _3018 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3019 = _3018.z;
        uint _3021 = (_3019 >> 8u) & 15u;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        if (((4294967295u << _3021) & _2924) == 0u)
        {
            _3125 = _3004;
            _3127 = _3006;
            _3129 = _3008;
            _3131 = _3010;
            _3133 = _3012;
            _3135 = _3014;
        }
        else
        {
            float _3150 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
            float _3151 = _3150 * _1983;
            float _3152 = _3150 * _1984;
            float _3153 = _3150 * _1985;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3021 < ((_3019 >> 12u) & 15u))
            {
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3285 = _3004;
                float _3286 = _3006;
                float _3287 = _3008;
                float _3288 = _3010;
                float _3289 = _3012;
                float _3290 = _3014;
                uint _3291 = _3021;
                uint _3300;
                bool _3301;
                for (;;)
                {
                    _3300 = texelFetch(g_lightClassification, int((((_2918 << 5u) + (_2904 << 9u)) + (_3291 << 2u)) >> 2u)).x;
                    _3301 = _3300 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3301)
                    {
                        frontier_phi_82_pred = _3290;
                        frontier_phi_82_pred_1 = _3289;
                        frontier_phi_82_pred_2 = _3288;
                        frontier_phi_82_pred_3 = _3287;
                        frontier_phi_82_pred_4 = _3286;
                        frontier_phi_82_pred_5 = _3285;
                    }
                    else
                    {
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3506 = _3285;
                        float _3507 = _3286;
                        float _3508 = _3287;
                        float _3509 = _3288;
                        float _3510 = _3289;
                        float _3511 = _3290;
                        uint _3512 = _3300;
                        uint _3513;
                        vec4 _3538;
                        float _3539;
                        vec4 _3554;
                        vec3 _3566;
                        vec4 _3581;
                        vec4 _3596;
                        float _3642;
                        bool _3643;
                        for (;;)
                        {
                            uint _3523 = ((_3291 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3512));
                            _3513 = (_3512 + 4294967295u) & _3512;
                            uint _3525 = _3523 * 40u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            _3539 = _3538.w;
                            uint _3541 = (_3523 * 40u) + 4u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3523 * 40u) + 8u;
                            _3566 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x));
                            uint _3568 = (_3523 * 40u) + 16u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3523 * 40u) + 20u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3523 * 40u) + 24u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            uint _3617 = (_3523 * 40u) + 28u;
                            vec4 _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            _3642 = fma(_1985, _3630.z, fma(_1984, _3630.y, _3630.x * _1983)) + _3630.w;
                            _3643 = !((fma(_1985, _3611.z, fma(_1984, _3611.y, _3611.x * _1983)) + _3611.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3643)
                            {
                                float _3670 = _3538.x - _1983;
                                float _3671 = _3538.y - _1984;
                                float _3672 = _3538.z - _1985;
                                float _3673 = dot(vec3(_3670, _3671, _3672), vec3(_3670, _3671, _3672));
                                float _3676 = inversesqrt(_3673);
                                float _3677 = _3676 * _3670;
                                float _3678 = _3676 * _3671;
                                float _3679 = _3676 * _3672;
                                float _3683 = 1.0 - (_3673 / (_3539 * _3539));
                                float _4861 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3684 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3688 = sqrt(_3673) * _3554.w;
                                float _3690 = 1.39999997615814208984375 / (_3688 + 1.39999997615814208984375);
                                float _3691 = _3690 * _3690;
                                float _3694 = ((1.0 - _3691) * dot(vec3(_3677, _3678, _3679), vec3(_818, _821, _824))) + _3691;
                                float _3697 = _3688 * _3688;
                                float _3701 = (fma(_1985, _3581.z, fma(_1984, _3581.y, _3581.x * _1983)) + _3581.w) / _3642;
                                float _3702 = (fma(_1985, _3596.z, fma(_1984, _3596.y, _3596.x * _1983)) + _3596.w) / _3642;
                                float _3706 = 1.0 - dot(vec2(_3701, _3702), vec2(_3701, _3702));
                                float _4877 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3707 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3708 = _3707 * (((isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0))) * _3684) / ((_3697 * 0.699999988079071044921875) + 1.0));
                                float _3720 = exp2(log2(1.0 / ((_3697 * 3.5) + 5.0)) * 0.25);
                                float _3721 = 1.0 - _893;
                                float _3728 = sqrt(1.0 - ((1.0 - (_3721 * _3721)) * (1.0 - (_3720 * _3720))));
                                float _3729 = _3728 * _3728;
                                float _3730 = _3729 * _3729;
                                float _3731 = _3677 - _3151;
                                float _3732 = _3678 - _3152;
                                float _3733 = _3679 - _3153;
                                float _3737 = inversesqrt(dot(vec3(_3731, _3732, _3733), vec3(_3731, _3732, _3733)));
                                float _3741 = dot(vec3(_818, _821, _824), vec3((-0.0) - _3151, (-0.0) - _3152, (-0.0) - _3153));
                                float _4888 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3744 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3745 = dot(vec3(_818, _821, _824), vec3(_3737 * _3731, _3737 * _3732, _3737 * _3733));
                                float _4899 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3748 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                                float _3752 = ((_3748 * _3748) * (_3730 + (-1.0))) + 1.0;
                                float _3753 = _3690 * _3729;
                                float _3754 = _3753 * _3753;
                                float _3760 = ((1.0 - _3754) * dot(vec3(_818, _821, _824), vec3(_3677, _3678, _3679))) + _3754;
                                float _4910 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3761 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                                float _3762 = 1.0 - _3729;
                                float _3772 = (0.5 / (((_3761 * ((_3744 * _3762) + _3729)) + 9.9999999392252902907785028219223e-09) + (((_3761 * _3762) + _3729) * _3744))) * _3761;
                                float _4921 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3782 = (_3707 * _3684) * (((_3730 * 3.1415927410125732421875) * (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) / ((_3752 * _3752) * ((_3697 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3708 * _3554.z;
                                frontier_phi_88_pred_1 = _3708 * _3554.y;
                                frontier_phi_88_pred_2 = _3708 * _3554.x;
                                frontier_phi_88_pred_3 = _3782 * _3566.z;
                                frontier_phi_88_pred_4 = _3782 * _3566.y;
                                frontier_phi_88_pred_5 = _3782 * _3566.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3791 = frontier_phi_88_pred;
                            _3790 = frontier_phi_88_pred_1;
                            _3789 = frontier_phi_88_pred_2;
                            _3788 = frontier_phi_88_pred_3;
                            _3787 = frontier_phi_88_pred_4;
                            _3786 = frontier_phi_88_pred_5;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            if (_3513 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3513;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3498;
                        frontier_phi_82_pred_1 = _3497;
                        frontier_phi_82_pred_2 = _3496;
                        frontier_phi_82_pred_3 = _3495;
                        frontier_phi_82_pred_4 = _3494;
                        frontier_phi_82_pred_5 = _3493;
                    }
                    _3136 = frontier_phi_82_pred;
                    _3134 = frontier_phi_82_pred_1;
                    _3132 = frontier_phi_82_pred_2;
                    _3130 = frontier_phi_82_pred_3;
                    _3128 = frontier_phi_82_pred_4;
                    _3126 = frontier_phi_82_pred_5;
                    uint _3292 = _3291 + 1u;
                    if (_3292 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3285 = _3126;
                        _3286 = _3128;
                        _3287 = _3130;
                        _3288 = _3132;
                        _3289 = _3134;
                        _3290 = _3136;
                        _3291 = _3292;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3132;
                frontier_phi_63_64_ladder_1 = _3136;
                frontier_phi_63_64_ladder_2 = _3134;
                frontier_phi_63_64_ladder_3 = _3130;
                frontier_phi_63_64_ladder_4 = _3128;
                frontier_phi_63_64_ladder_5 = _3126;
            }
            else
            {
                frontier_phi_63_64_ladder = _3010;
                frontier_phi_63_64_ladder_1 = _3014;
                frontier_phi_63_64_ladder_2 = _3012;
                frontier_phi_63_64_ladder_3 = _3008;
                frontier_phi_63_64_ladder_4 = _3006;
                frontier_phi_63_64_ladder_5 = _3004;
            }
            _3125 = frontier_phi_63_64_ladder_5;
            _3127 = frontier_phi_63_64_ladder_4;
            _3129 = frontier_phi_63_64_ladder_3;
            _3131 = frontier_phi_63_64_ladder;
            _3133 = frontier_phi_63_64_ladder_2;
            _3135 = frontier_phi_63_64_ladder_1;
        }
        float _3140 = isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0));
        _2937 = (_3140 * _3131) + _2449;
        _2939 = (_3140 * _3133) + _2451;
        _2941 = (_3140 * _3135) + _2453;
        _2943 = ((_3125 * _861) * _3140) + _2787;
        _2945 = ((_3127 * _863) * _3140) + _2789;
        _2947 = ((_3129 * _864) * _3140) + _2791;
    }
    else
    {
        _2937 = _2449;
        _2939 = _2451;
        _2941 = _2453;
        _2943 = _2787;
        _2945 = _2789;
        _2947 = _2791;
    }
    float _4937 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4948 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4959 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _2964 = ((isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_2937 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _877))) + ((_2943 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2965 = ((isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0))) * (_2939 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _877))) + ((_2945 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2966 = ((isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0))) * (_2941 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _877))) + ((_2947 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    uint _2967 = _248 + 6u;
    float _2975 = _799 / cbSceneParam._m0[86u].x;
    float _2976 = _800 / cbSceneParam._m0[86u].y;
    vec4 _2990 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2975, _2976, (log2((isnan(cbSceneParam._m0[77u].w) ? _721 : (isnan(_721) ? cbSceneParam._m0[77u].w : min(_721, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2992 = _2990.x;
    float _2993 = _2990.y;
    float _2994 = _2990.z;
    float _2995 = _2990.w;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    if (_721 > cbSceneParam._m0[78u].w)
    {
        float _3029 = isnan(_721) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _721 : min(cbSceneParam._m0[80u].w, _721));
        float _3030 = _3029 / _721;
        float _3041 = _3030 * _772;
        float _3042 = _773 * _3030;
        float _3043 = (-0.0) - _3042;
        float _3045 = _3030 * _774;
        float _3047 = (cbSceneParam._m0[77u].w * _3043) / _3029;
        float _3048 = _3047 + cbSceneParam._m0[79u].w;
        float _3049 = cbSceneParam._m0[79u].w - _3042;
        float _3055 = sqrt(((_3041 * _3041) + (_3042 * _3042)) + (_3045 * _3045));
        float _3058 = (1.0 - (cbSceneParam._m0[77u].w / _3029)) * _3055;
        float _3063 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3065 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3242;
        if (abs((_3043 - _3047) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3242 = ((((_3048 > 0.0) ? exp2(_3063 * _3048) : (2.0 - exp2(_3065 * _3048))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3058;
        }
        else
        {
            float _3186 = 1.0 / cbSceneParam._m0[80u].x;
            float _3187 = isnan(_3049) ? _3048 : (isnan(_3048) ? _3049 : max(_3048, _3049));
            float _3188 = isnan(_3049) ? _3048 : (isnan(_3048) ? _3049 : min(_3048, _3049));
            float _3197 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : min(_3187, 0.0));
            float _3198 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : min(_3188, 0.0));
            _3242 = ((abs(_3055 / _3043) * cbSceneParam._m0[80u].y) * ((((_3197 - _3198) * 2.0) - ((exp2(_3063 * (isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0)))) - exp2(_3063 * (isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))))) * _3186)) - ((exp2(_3065 * _3197) - exp2(_3065 * _3198)) * _3186))) + (_3058 * cbSceneParam._m0[80u].z);
        }
        vec4 _3244 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2975, _2976, 1.0), 0.0);
        float _3253 = exp2((_3242 * (-1.44269502162933349609375)) * (1.0 - _3244.w));
        float _3254 = log2(_3253);
        float _3270 = log2(_2995);
        _3067 = (exp2(_3270 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].x)) * _3244.x) / cbSceneParam._m0[78u].x)) + _2992;
        _3069 = (exp2(_3270 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].y)) * _3244.y) / cbSceneParam._m0[78u].y)) + _2993;
        _3071 = (exp2(_3270 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].z)) * _3244.z) / cbSceneParam._m0[78u].z)) + _2994;
        _3073 = _3253 * _2995;
    }
    else
    {
        _3067 = _2992;
        _3069 = _2993;
        _3071 = _2994;
        _3073 = _2995;
    }
    bool _3280;
    vec4 _3083;
    vec4 _3105;
    float _3107;
    float _3111;
    float _3112;
    float _3113;
    float _3114;
    bool _3124;
    for (;;)
    {
        _3083 = cbMatDynParam._m0[0u];
        float _3085 = roundEven(_3083.y);
        bool _3086 = _3085 == 3.0;
        float _3087 = log2(_3073);
        float _3094 = exp2(_3087 * cbSceneParam._m0[78u].x) * _2964;
        float _3095 = exp2(_3087 * cbSceneParam._m0[78u].y) * _2965;
        float _3096 = exp2(_3087 * cbSceneParam._m0[78u].z) * _2966;
        float _3103 = _788 + (-0.5);
        _3105 = cbMtdParam._m0[1u];
        _3107 = _3105.y * _3103;
        float _3110 = (_3085 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3111 = _3110 * (_3086 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3067)));
        _3112 = _3110 * (_3086 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3069)));
        _3113 = _3110 * (_3086 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3071)));
        _3114 = _3103 * 0.999000012874603271484375;
        _3124 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3124)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _3114) < 0.5)
            {
                _3280 = true;
                break;
            }
        }
        uint _3221 = _837 + uint(_3083.w);
        if ((cbInstanceData._m0[_3221].w < 1.0) && ((cbInstanceData._m0[_3221].w + _3114) < 0.5))
        {
            _3280 = true;
            break;
        }
        if ((_3107 + 1.0) < _3105.x)
        {
            _3280 = true;
            break;
        }
        _3280 = false;
        break;
    }
    float _3484;
    if (_3280)
    {
        discard_state = true;
        _3484 = 0.0;
    }
    else
    {
        _3484 = cbInstanceData._m0[_2967].w;
    }
    SV_Target.x = _3111;
    SV_Target.y = _3112;
    SV_Target.z = _3113;
    SV_Target.w = _3484;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2967].w;
    discard_exit();
}


