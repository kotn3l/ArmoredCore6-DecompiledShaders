#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1218;
float _3883;
float _3884;
float _3885;
float _3886;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].y) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3895 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _387 = (_380 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _388 = (_380 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _389 = (_380 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _426 = _424.x;
    float _427 = _424.y;
    float _428 = _424.z;
    float _437 = ((_407.z - _428) * _380) + _428;
    float _440 = ((((_407.x - _426) * _380) + _426) * 2.0) + (-1.0);
    float _442 = ((((_407.y - _427) * _380) + _427) * 2.0) + (-1.0);
    float _443 = dot(vec2(_440, _442), vec2(_440, _442));
    float _3906 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _448 = sqrt(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))));
    vec4 _464 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _491 = _489.x;
    float _492 = 1.0 - _491;
    float _505 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_491 - _492) * cbMtdParam._m0[24u].z) + _492) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3917 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _513 = (_506 * (cbMtdParam._m0[17u].x - _387)) + _387;
    float _514 = (_506 * (cbMtdParam._m0[17u].y - _388)) + _388;
    float _515 = (_506 * (cbMtdParam._m0[17u].z - _389)) + _389;
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _541 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _543 = _541.x;
    float _561 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _543) * _380) + _543;
    float _565 = ((_527.x - _561) * cbMtdParam._m0[19u].z) + _561;
    float _567 = _565 - (_565 * _506);
    float _571 = (cbMtdParam._m0[19u].w * (_464.z - _437)) + _437;
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _591 = (_584.x * 2.0) + (-1.0);
    float _592 = (_584.y * 2.0) + (-1.0);
    float _593 = dot(vec2(_591, _592), vec2(_591, _592));
    float _3928 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _601 = (_506 * (_584.z - _571)) + _571;
    float _604 = (((_464.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _440;
    float _605 = (((_464.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _442;
    float _617 = (((_591 - _604) + (cbMtdParam._m0[21u].x * _604)) * _506) + _604;
    float _618 = (((_592 - _605) + (cbMtdParam._m0[21u].x * _605)) * _506) + _605;
    float _619 = (_506 * (sqrt(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) - _448)) + _448;
    float _624 = cbMtdParam._m0[22u].x + _464.w;
    float _627 = fma(_619, _229 * NORMAL.x, fma(_618, _236 * TANGENT.x, (_222 * _214) * _617));
    float _630 = fma(_619, _229 * NORMAL.y, fma(_618, _236 * TANGENT.y, (_222 * _215) * _617));
    float _633 = fma(_619, _229 * NORMAL.z, fma(_618, _236 * TANGENT.z, (_222 * _216) * _617));
    float _637 = inversesqrt(dot(vec3(_627, _630, _633), vec3(_627, _630, _633)));
    float _638 = _637 * _627;
    float _639 = _637 * _630;
    float _640 = _637 * _633;
    float _3939 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _641 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3961 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3972 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3983 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3994 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _646 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _660 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _711 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _701);
    float _712 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _701);
    float _713 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _701);
    float _717 = inversesqrt(dot(vec3(_711, _712, _713), vec3(_711, _712, _713)));
    float _718 = _711 * _717;
    float _719 = _712 * _717;
    float _720 = _713 * _717;
    vec4 _725 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _727 = _725.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _899 = sqrt(((_711 * _711) + (_712 * _712)) + (_713 * _713));
        float _905 = (cbMatDynParam._m0[5u].x * _899) + cbMatDynParam._m0[5u].y;
        float _4005 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _910 = (cbMatDynParam._m0[5u].z * _899) + cbMatDynParam._m0[5u].w;
        float _4016 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) - _906)) + _906) < ((_727 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _738 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _739 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _757 = fma(_640, cbSceneParam._m0[5u].z, fma(_639, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _638));
    float _760 = fma(_640, cbSceneParam._m0[6u].z, fma(_639, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _638));
    float _763 = fma(_640, cbSceneParam._m0[7u].z, fma(_639, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _638));
    uint _776 = _242 + 9u;
    uint _777 = _776 + uint(cbMatDynParam._m0[0u].w);
    float _783 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * cbInstanceData._m0[_777].x;
    float _784 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * cbInstanceData._m0[_777].y;
    float _785 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * cbInstanceData._m0[_777].z;
    float _4027 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _4049 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _789 = 1.0 - _646;
    float _790 = _786 * _789;
    float _791 = _787 * _789;
    float _792 = _788 * _789;
    float _797 = (_786 + (-0.039999999105930328369140625)) * _646;
    float _798 = (_787 + (-0.039999999105930328369140625)) * _646;
    float _799 = (_788 + (-0.039999999105930328369140625)) * _646;
    float _800 = _797 + 0.039999999105930328369140625;
    float _802 = _798 + 0.039999999105930328369140625;
    float _803 = _799 + 0.039999999105930328369140625;
    vec4 _812 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _738, cbSceneParam._m0[86u].y * _739));
    float _816 = ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * TEXCOORD_5.w) * _812.x;
    float _817 = dot(vec3(_638, _639, _640), vec3(_718, _719, _720));
    float _820 = _817 * 2.0;
    float _824 = (_820 * _638) - _718;
    float _825 = (_820 * _639) - _719;
    float _826 = (_820 * _640) - _720;
    float _830 = abs(dot(vec3(_718, _719, _720), vec3(_638, _639, _640)));
    float _4060 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _832 = sqrt(_641);
    float _845 = exp2((_832 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_832 * 3.0));
    float _851 = (1.0 - _845) * ((_832 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _852 = _845 * _832;
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1217;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _942 = fma(_888, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _880));
        float _946 = fma(_888, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _880));
        float _950 = fma(_888, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _880));
        float _975 = _880 + _638;
        float _976 = _884 + _639;
        float _977 = _888 + _640;
        float _987 = fma(_977, cbModelParam._m0[26u].z, fma(_976, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975)) - _942;
        float _988 = fma(_977, cbModelParam._m0[27u].z, fma(_976, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975)) - _946;
        float _989 = fma(_977, cbModelParam._m0[28u].z, fma(_976, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975)) - _950;
        float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
        float _1006 = ((_993 * _987) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_942 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_993 * _988) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_946 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_993 * _989) / cbModelParam._m0[34u].z) + ((((((_950 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1045 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1011.x + (-0.5));
        float _1047 = _1045 * (_1011.y + (-0.5));
        float _1048 = _1045 * (_1011.z + (-0.5));
        float _1055 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1018.x + (-0.5));
        float _1057 = _1055 * (_1018.y + (-0.5));
        float _1058 = _1055 * (_1018.z + (-0.5));
        float _1065 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1025.x + (-0.5));
        float _1067 = _1065 * (_1025.y + (-0.5));
        float _1068 = _1065 * (_1025.z + (-0.5));
        float _1075 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1032.x + (-0.5));
        float _1077 = _1075 * (_1032.y + (-0.5));
        float _1078 = _1075 * (_1032.z + (-0.5));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = _1046 * 0.5;
        float _1083 = _1056 * 0.5;
        float _1084 = _1066 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1099 = (dot(vec3(_638, _639, _640), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1109 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _4108 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1111 + 1.0))) + _1116) * _1079;
        float _1126 = _1047 * 0.5;
        float _1127 = _1057 * 0.5;
        float _1128 = _1067 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_638, _639, _640), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _4141 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1153 + 1.0))) + _1158) * _1080;
        float _1168 = _1048 * 0.5;
        float _1169 = _1058 * 0.5;
        float _1170 = _1068 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_638, _639, _640), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _4174 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1195 + 1.0))) + _1200) * _1081;
        _1217 = _1048;
        _1219 = _1047;
        _1220 = _1046;
        _1221 = _1058;
        _1222 = _1057;
        _1223 = _1056;
        _1224 = _1068;
        _1225 = _1067;
        _1226 = _1066;
        _1227 = _1081;
        _1228 = _1080;
        _1229 = _1079;
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
    }
    else
    {
        _1217 = _1218;
        _1219 = _1218;
        _1220 = _1218;
        _1221 = _1218;
        _1222 = _1218;
        _1223 = _1218;
        _1224 = _1218;
        _1225 = _1218;
        _1226 = _1218;
        _1227 = _1218;
        _1228 = _1218;
        _1229 = _1218;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1260 = fma(_888, cbModelParam._m0[30u].z, fma(_884, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _880));
        float _1264 = fma(_888, cbModelParam._m0[31u].z, fma(_884, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _880));
        float _1268 = fma(_888, cbModelParam._m0[32u].z, fma(_884, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _880));
        float _1291 = _880 + _638;
        float _1292 = _884 + _639;
        float _1293 = _888 + _640;
        float _1303 = fma(_1293, cbModelParam._m0[30u].z, fma(_1292, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1291)) - _1260;
        float _1304 = fma(_1293, cbModelParam._m0[31u].z, fma(_1292, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1291)) - _1264;
        float _1305 = fma(_1293, cbModelParam._m0[32u].z, fma(_1292, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1291)) - _1268;
        float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
        float _1322 = ((_1309 * _1303) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1260 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1309 * _1304) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1264 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1309 * _1305) / cbModelParam._m0[35u].z) + ((((((_1268 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        float _1359 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1326.x + (-0.5));
        float _1361 = _1359 * (_1326.y + (-0.5));
        float _1362 = _1359 * (_1326.z + (-0.5));
        float _1369 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1333.x + (-0.5));
        float _1371 = _1369 * (_1333.y + (-0.5));
        float _1372 = _1369 * (_1333.z + (-0.5));
        float _1379 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1340.x + (-0.5));
        float _1381 = _1379 * (_1340.y + (-0.5));
        float _1382 = _1379 * (_1340.z + (-0.5));
        float _1389 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1347.x + (-0.5));
        float _1391 = _1389 * (_1347.y + (-0.5));
        float _1392 = _1389 * (_1347.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_638, _639, _640), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4237 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1423 + 1.0))) + _1428) * _1393;
        float _1438 = _1361 * 0.5;
        float _1439 = _1371 * 0.5;
        float _1440 = _1381 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_638, _639, _640), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4270 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1465 + 1.0))) + _1470) * _1394;
        float _1480 = _1362 * 0.5;
        float _1481 = _1372 * 0.5;
        float _1482 = _1382 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_638, _639, _640), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4303 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1507 + 1.0))) + _1512) * _1395;
        _1529 = _1362;
        _1530 = _1361;
        _1531 = _1360;
        _1532 = _1372;
        _1533 = _1371;
        _1534 = _1370;
        _1535 = _1382;
        _1536 = _1381;
        _1537 = _1380;
        _1538 = _1395;
        _1539 = _1394;
        _1540 = _1393;
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
    }
    else
    {
        _1529 = _1218;
        _1530 = _1218;
        _1531 = _1218;
        _1532 = _1218;
        _1533 = _1218;
        _1534 = _1218;
        _1535 = _1218;
        _1536 = _1218;
        _1537 = _1218;
        _1538 = _1218;
        _1539 = _1218;
        _1540 = _1218;
        _1541 = 0.0;
        _1542 = 0.0;
        _1543 = 0.0;
    }
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1230)) + _1230;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1231)) + _1231;
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1232)) + _1232;
    float _1576 = fma(_1555, cbSceneParam._m0[89u].z, fma(_1554, cbSceneParam._m0[89u].y, _1553 * cbSceneParam._m0[89u].x));
    float _1579 = fma(_1555, cbSceneParam._m0[90u].z, fma(_1554, cbSceneParam._m0[90u].y, _1553 * cbSceneParam._m0[90u].x));
    float _1582 = fma(_1555, cbSceneParam._m0[91u].z, fma(_1554, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1553));
    float _1597 = _824 * 0.5;
    float _1598 = _825 * 0.5;
    float _1599 = _826 * 0.5;
    float _1600 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1603 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1606 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1640;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1613 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1217, _1221, _1224, _1227));
        float _1617 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1621 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1628 = dot(vec4(cbModelParam._m0[39u]), vec4(_1597, _1598, _1599, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1651;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1642 = dot(vec4(cbModelParam._m0[40u]), vec4(_1597, _1598, _1599, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1655 = (_1651 * cbModelParam._m0[1u].x) + (_1640 * (1.0 - cbModelParam._m0[1u].x));
    float _1665 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _641);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1665 : min(cbModelParam._m0[25u].z, _1665));
    float _1747;
    float _1749;
    float _1751;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1714 = fma(_888, cbModelParam._m0[13u].z, fma(_884, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _880)) + cbModelParam._m0[13u].w;
        float _1718 = fma(_888, cbModelParam._m0[14u].z, fma(_884, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _880)) + cbModelParam._m0[14u].w;
        float _1722 = fma(_888, cbModelParam._m0[15u].z, fma(_884, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _880)) + cbModelParam._m0[15u].w;
        float _1725 = fma(_826, cbModelParam._m0[13u].z, fma(_825, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _824));
        float _1728 = fma(_826, cbModelParam._m0[14u].z, fma(_825, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _824));
        float _1731 = fma(_826, cbModelParam._m0[15u].z, fma(_825, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _824));
        float _1759;
        if (_1725 > 0.0)
        {
            _1759 = abs((1.0 - _1714) / _1725);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1714 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1759 = frontier_phi_17_15_ladder;
        }
        float _1931;
        if (_1728 > 0.0)
        {
            _1931 = abs((1.0 - _1718) / _1728);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1718 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1931 = frontier_phi_26_22_ladder;
        }
        float _2226;
        if (_1731 > 0.0)
        {
            _2226 = abs((1.0 - _1722) / _1731);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1722 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2226 = frontier_phi_38_33_ladder;
        }
        float _2228 = isnan(_1931) ? _1759 : (isnan(_1759) ? _1931 : min(_1759, _1931));
        float _2229 = isnan(_2226) ? _2228 : (isnan(_2228) ? _2226 : min(_2228, _2226));
        float _2233 = (_2229 * _1725) + _1714;
        float _2234 = (_2229 * _1728) + _1718;
        float _2235 = (_2229 * _1731) + _1722;
        float _2236 = _2229 * 9.9999997473787516355514526367188e-05;
        float _2238 = (-1.0) - _2236;
        float _2240 = _2236 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2235 > _2240) || ((_2235 < _2238) || ((_2234 > _2240) || ((_2234 < _2238) || ((_2233 < _2238) || (_2233 > _2240))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2380 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2235, cbModelParam._m0[9u].z, fma(_2234, cbModelParam._m0[9u].y, _2233 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2235, cbModelParam._m0[10u].z, fma(_2234, cbModelParam._m0[10u].y, _2233 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2235, cbModelParam._m0[11u].z, fma(_2234, cbModelParam._m0[11u].y, _2233 * cbModelParam._m0[11u].x))), _1666);
            frontier_phi_16_38_ladder = _2380.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2380.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2380.x * cbModelParam._m0[1u].y;
        }
        _1747 = frontier_phi_16_38_ladder_2;
        _1749 = frontier_phi_16_38_ladder_1;
        _1751 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1735 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_824, _825, _826), _1666);
        _1747 = _1735.x * cbModelParam._m0[1u].y;
        _1749 = _1735.y * cbModelParam._m0[1u].y;
        _1751 = _1735.z * cbModelParam._m0[1u].y;
    }
    float _1755 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _641);
    float _1756 = isnan(_1755) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1755 : min(cbModelParam._m0[25u].w, _1755));
    float _1846;
    float _1848;
    float _1850;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1810 = fma(_888, cbModelParam._m0[21u].z, fma(_884, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _880)) + cbModelParam._m0[21u].w;
        float _1814 = fma(_888, cbModelParam._m0[22u].z, fma(_884, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _880)) + cbModelParam._m0[22u].w;
        float _1818 = fma(_888, cbModelParam._m0[23u].z, fma(_884, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _880)) + cbModelParam._m0[23u].w;
        float _1821 = fma(_826, cbModelParam._m0[21u].z, fma(_825, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _824));
        float _1824 = fma(_826, cbModelParam._m0[22u].z, fma(_825, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _824));
        float _1827 = fma(_826, cbModelParam._m0[23u].z, fma(_825, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _824));
        float _1936;
        if (_1821 > 0.0)
        {
            _1936 = abs((1.0 - _1810) / _1821);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1810 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1936 = frontier_phi_28_24_ladder;
        }
        float _2253;
        if (_1824 > 0.0)
        {
            _2253 = abs((1.0 - _1814) / _1824);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1814 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2253 = frontier_phi_40_35_ladder;
        }
        float _2591;
        if (_1827 > 0.0)
        {
            _2591 = abs((1.0 - _1818) / _1827);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1818 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2591 = frontier_phi_50_47_ladder;
        }
        float _2593 = isnan(_2253) ? _1936 : (isnan(_1936) ? _2253 : min(_1936, _2253));
        float _2594 = isnan(_2591) ? _2593 : (isnan(_2593) ? _2591 : min(_2593, _2591));
        float _2598 = (_2594 * _1821) + _1810;
        float _2599 = (_2594 * _1824) + _1814;
        float _2600 = (_2594 * _1827) + _1818;
        float _2601 = _2594 * 9.9999997473787516355514526367188e-05;
        float _2602 = (-1.0) - _2601;
        float _2604 = _2601 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2600 > _2604) || ((_2600 < _2602) || ((_2599 > _2604) || ((_2599 < _2602) || ((_2598 < _2602) || (_2598 > _2604))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2722 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2600, cbModelParam._m0[17u].z, fma(_2599, cbModelParam._m0[17u].y, _2598 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2600, cbModelParam._m0[18u].z, fma(_2599, cbModelParam._m0[18u].y, _2598 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2600, cbModelParam._m0[19u].z, fma(_2599, cbModelParam._m0[19u].y, _2598 * cbModelParam._m0[19u].x))), _1756);
            frontier_phi_25_50_ladder = _2722.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2722.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2722.x * cbModelParam._m0[1u].z;
        }
        _1846 = frontier_phi_25_50_ladder_2;
        _1848 = frontier_phi_25_50_ladder_1;
        _1850 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1830 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_824, _825, _826), _1756);
        _1846 = _1830.x * cbModelParam._m0[1u].z;
        _1848 = _1830.y * cbModelParam._m0[1u].z;
        _1850 = _1830.z * cbModelParam._m0[1u].z;
    }
    float _1863 = (((_851 * _800) + _852) * _816) * ((cbModelParam._m0[1u].w * (_1846 - _1747)) + _1747);
    float _1865 = (((_851 * _802) + _852) * _816) * ((cbModelParam._m0[1u].w * (_1848 - _1749)) + _1749);
    float _1867 = (((_851 * _803) + _852) * _816) * ((cbModelParam._m0[1u].w * (_1850 - _1751)) + _1751);
    float _1870 = fma(_1867, cbSceneParam._m0[89u].z, fma(_1865, cbSceneParam._m0[89u].y, _1863 * cbSceneParam._m0[89u].x));
    float _1873 = fma(_1867, cbSceneParam._m0[90u].z, fma(_1865, cbSceneParam._m0[90u].y, _1863 * cbSceneParam._m0[90u].x));
    float _1876 = fma(_1867, cbSceneParam._m0[91u].z, fma(_1865, cbSceneParam._m0[91u].y, _1863 * cbSceneParam._m0[91u].x));
    float _1910 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1914 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1918 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1922 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1923 = _1910 / _1922;
    float _1924 = _1914 / _1922;
    float _1925 = _1918 / _1922;
    float _2072;
    float _2073;
    float _2074;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1952 = ((uint(_1925 > cbSceneParam._m0[59u].y) + uint(_1925 > cbSceneParam._m0[59u].x)) + uint(_1925 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1953 = _1952 + 43u;
        uint _1961 = _1952 + 44u;
        uint _1969 = _1952 + 45u;
        uint _1977 = _1952 + 46u;
        float _1988 = fma(_1922, cbSceneParam._m0[_1953].w, fma(_1918, cbSceneParam._m0[_1953].z, fma(_1914, cbSceneParam._m0[_1953].y, _1910 * cbSceneParam._m0[_1953].x)));
        float _1992 = fma(_1922, cbSceneParam._m0[_1961].w, fma(_1918, cbSceneParam._m0[_1961].z, fma(_1914, cbSceneParam._m0[_1961].y, _1910 * cbSceneParam._m0[_1961].x)));
        float _2000 = fma(_1922, cbSceneParam._m0[_1977].w, fma(_1918, cbSceneParam._m0[_1977].z, fma(_1914, cbSceneParam._m0[_1977].y, _1910 * cbSceneParam._m0[_1977].x)));
        float _2005 = cbSceneParam._m0[33u].z * _2000;
        float _2007 = cbSceneParam._m0[33u].w * _2000;
        float _2010 = fma(_1922, cbSceneParam._m0[_1969].w, fma(_1918, cbSceneParam._m0[_1969].z, fma(_1914, cbSceneParam._m0[_1969].y, _1910 * cbSceneParam._m0[_1969].x))) / _2000;
        float _2058 = (cbSceneParam._m0[33u].x - sqrt(((_1924 * _1924) + (_1923 * _1923)) + (_1925 * _1925))) * cbSceneParam._m0[33u].y;
        float _4429 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2065 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2005 + _1988) / _2000, (_2007 + _1992) / _2000), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2007 + _1988) / _2000, (_1992 - _2005) / _2000), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1988 - _2005) / _2000, (_1992 - _2007) / _2000), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1988 - _2007) / _2000, (_2005 + _1992) / _2000), _2010), 0.0)).x), vec4(0.25)));
        _2072 = 1.0 - (_2065 * cbSceneParam._m0[34u].x);
        _2073 = 1.0 - (_2065 * cbSceneParam._m0[34u].y);
        _2074 = 1.0 - (_2065 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2072 = 1.0;
        _2073 = 1.0;
        _2074 = 1.0;
    }
    float _2138;
    float _2140;
    float _2142;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2126 = fma(_1922, cbSceneParam._m0[63u].w, fma(_1918, cbSceneParam._m0[63u].z, fma(_1914, cbSceneParam._m0[63u].y, _1910 * cbSceneParam._m0[63u].x)));
        float _2127 = fma(_1922, cbSceneParam._m0[60u].w, fma(_1918, cbSceneParam._m0[60u].z, fma(_1914, cbSceneParam._m0[60u].y, _1910 * cbSceneParam._m0[60u].x))) / _2126;
        float _2128 = fma(_1922, cbSceneParam._m0[61u].w, fma(_1918, cbSceneParam._m0[61u].z, fma(_1914, cbSceneParam._m0[61u].y, _1910 * cbSceneParam._m0[61u].x))) / _2126;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2127 >= cbSceneParam._m0[64u].x) && (_2128 >= cbSceneParam._m0[64u].y)) && (_2127 <= cbSceneParam._m0[64u].z)) && (_2128 <= cbSceneParam._m0[64u].w))
        {
            float _2266 = fma(_1922, cbSceneParam._m0[62u].w, fma(_1918, cbSceneParam._m0[62u].z, fma(_1914, cbSceneParam._m0[62u].y, _1910 * cbSceneParam._m0[62u].x))) / _2126;
            float _2270 = isnan(cbSceneParam._m0[41u].w) ? _2266 : (isnan(_2266) ? cbSceneParam._m0[41u].w : max(_2266, cbSceneParam._m0[41u].w));
            float _2313 = (cbSceneParam._m0[33u].x - sqrt(((_1924 * _1924) + (_1923 * _1923)) + (_1925 * _1925))) * cbSceneParam._m0[33u].y;
            float _4445 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
            float _2320 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2127, cbSceneParam._m0[33u].w + _2128), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2127, _2128 - cbSceneParam._m0[33u].z), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2127 - cbSceneParam._m0[33u].z, _2128 - cbSceneParam._m0[33u].w), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2127 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2128), _2270), 0.0)).x), vec4(0.25)));
            float _2324 = 1.0 - (_2320 * cbSceneParam._m0[34u].x);
            float _2325 = 1.0 - (_2320 * cbSceneParam._m0[34u].y);
            float _2326 = 1.0 - (_2320 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2326) ? _2074 : (isnan(_2074) ? _2326 : min(_2074, _2326));
            frontier_phi_37_36_ladder_1 = isnan(_2325) ? _2073 : (isnan(_2073) ? _2325 : min(_2073, _2325));
            frontier_phi_37_36_ladder_2 = isnan(_2324) ? _2072 : (isnan(_2072) ? _2324 : min(_2072, _2324));
        }
        else
        {
            frontier_phi_37_36_ladder = _2074;
            frontier_phi_37_36_ladder_1 = _2073;
            frontier_phi_37_36_ladder_2 = _2072;
        }
        _2138 = frontier_phi_37_36_ladder_2;
        _2140 = frontier_phi_37_36_ladder_1;
        _2142 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2138 = _2072;
        _2140 = _2073;
        _2142 = _2074;
    }
    uvec4 _2147 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2149 = _2147.x * 14u;
    uint _2150 = _2149 + 13u;
    float _2157 = _816 + (-1.0);
    float _2162 = (cbLight._m0[_2150].x * _2157) + 1.0;
    float _2163 = (cbLight._m0[_2150].y * _2157) + 1.0;
    float _2164 = (cbLight._m0[_2150].z * _2157) + 1.0;
    float _2165 = (cbLight._m0[_2150].w * _2157) + 1.0;
    uint _2166 = _2149 + 5u;
    float _2172 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
    uint _2176 = _2149 + 4u;
    float _2185 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
    uint _2189 = _2149 | 1u;
    float _2200 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_638, _639, _640));
    float _2203 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_638, _639, _640));
    float _4481 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _4492 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2208 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * 0.3183098733425140380859375;
    float _2210 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * 0.3183098733425140380859375;
    float _2217 = ((cbLight._m0[_2166].x * _2172) * _2210) + (((cbLight._m0[_2176].x * _2138) * _2185) * _2208);
    float _2218 = ((_2172 * cbLight._m0[_2166].y) * _2210) + (((cbLight._m0[_2176].y * _2140) * _2185) * _2208);
    float _2219 = ((_2172 * cbLight._m0[_2166].z) * _2210) + (((cbLight._m0[_2176].z * _2142) * _2185) * _2208);
    uvec4 _2223 = floatBitsToUint(cbLight._m0[_2149 + 12u]);
    bool _2225 = _2223.x == 0u;
    float _2327;
    float _2329;
    float _2331;
    if (_2225)
    {
        _2327 = _2217;
        _2329 = _2218;
        _2331 = _2219;
    }
    else
    {
        uint _2335 = _2149 + 6u;
        float _2351 = (dot(vec3(cbLight._m0[_2149 + 2u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _2352 = _2351 * _2351;
        float _4503 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2353 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2354 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2327 = (((cbLight._m0[_2335].x * 0.3183098733425140380859375) * _2353) * _2354) + _2217;
        _2329 = (((cbLight._m0[_2335].y * 0.3183098733425140380859375) * _2353) * _2354) + _2218;
        _2331 = (((cbLight._m0[_2335].z * 0.3183098733425140380859375) * _2353) * _2354) + _2219;
    }
    bool _2334 = _2223.y == 0u;
    float _2389;
    float _2391;
    float _2393;
    if (_2334)
    {
        _2389 = _2327;
        _2391 = _2329;
        _2393 = _2331;
    }
    else
    {
        uint _2562 = _2149 + 7u;
        float _2578 = (dot(vec3(cbLight._m0[_2149 + 3u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _2579 = _2578 * _2578;
        float _4519 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2580 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2581 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2389 = (((cbLight._m0[_2562].x * 0.3183098733425140380859375) * _2580) * _2581) + _2327;
        _2391 = (((cbLight._m0[_2562].y * 0.3183098733425140380859375) * _2580) * _2581) + _2329;
        _2393 = (((cbLight._m0[_2562].z * 0.3183098733425140380859375) * _2580) * _2581) + _2331;
    }
    uint _2396 = _2149 + 8u;
    float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _641) * 0.949999988079071044921875);
    float _2410 = _2409 * _2409;
    float _2411 = cbLight._m0[_2149].x + _718;
    float _2412 = cbLight._m0[_2149].y + _719;
    float _2413 = cbLight._m0[_2149].z + _720;
    float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
    float _2418 = _2417 * _2411;
    float _2419 = _2417 * _2412;
    float _2420 = _2417 * _2413;
    float _2421 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2149].xyz));
    float _4535 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _4546 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _2425 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2426 = dot(vec3(_638, _639, _640), vec3(_2418, _2419, _2420));
    float _4557 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2430 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2418, _2419, _2420));
    float _4568 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2434 = _2410 * _2410;
    float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
    float _2446 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
    float _2447 = 0.959999978542327880859375 - _797;
    float _2449 = 0.959999978542327880859375 - _798;
    float _2450 = 0.959999978542327880859375 - _799;
    float _2457 = 1.0 - _2410;
    float _2468 = (0.5 / (((_2425 * ((_2424 * _2457) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2457) + _2410) * _2424))) * _2424;
    float _4579 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2470 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
    uint _2484 = _2149 + 9u;
    float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _641) * 0.949999988079071044921875);
    float _2496 = _2495 * _2495;
    float _2497 = cbLight._m0[_2189].x + _718;
    float _2498 = cbLight._m0[_2189].y + _719;
    float _2499 = cbLight._m0[_2189].z + _720;
    float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
    float _2504 = _2503 * _2497;
    float _2505 = _2503 * _2498;
    float _2506 = _2503 * _2499;
    float _2507 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2189].xyz));
    float _4590 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2511 = dot(vec3(_638, _639, _640), vec3(_2504, _2505, _2506));
    float _4601 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2514 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2515 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2504, _2505, _2506));
    float _4612 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2519 = _2496 * _2496;
    float _2523 = ((_2514 * _2514) * (_2519 + (-1.0))) + 1.0;
    float _2530 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
    float _2537 = 1.0 - _2496;
    float _2547 = (0.5 / (((_2425 * ((_2510 * _2537) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2537) + _2496) * _2510))) * _2510;
    float _4623 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2549 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2519 / ((_2523 * _2523) * 3.141590118408203125));
    float _2559 = (((((_2530 * _2447) + _800) * cbLight._m0[_2484].x) * _2549) * _2172) + ((((cbLight._m0[_2396].x * _2138) * ((_2446 * _2447) + _800)) * _2470) * _2185);
    float _2560 = (((((_2530 * _2449) + _802) * cbLight._m0[_2484].y) * _2549) * _2172) + ((((cbLight._m0[_2396].y * _2140) * ((_2446 * _2449) + _802)) * _2470) * _2185);
    float _2561 = (((((_2530 * _2450) + _803) * cbLight._m0[_2484].z) * _2549) * _2172) + ((((cbLight._m0[_2396].z * _2142) * ((_2446 * _2450) + _803)) * _2470) * _2185);
    float _2617;
    float _2619;
    float _2621;
    if (_2225)
    {
        _2617 = _2559;
        _2619 = _2560;
        _2621 = _2561;
    }
    else
    {
        uint _2623 = _2149 + 2u;
        uint _2627 = _2149 + 10u;
        float _2641 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2623].w)) * _641) * 0.949999988079071044921875);
        float _2642 = _2641 * _2641;
        float _2643 = cbLight._m0[_2623].x + _718;
        float _2644 = cbLight._m0[_2623].y + _719;
        float _2645 = cbLight._m0[_2623].z + _720;
        float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
        float _2650 = _2649 * _2643;
        float _2651 = _2649 * _2644;
        float _2652 = _2649 * _2645;
        float _2653 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2623].xyz));
        float _4634 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2656 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2657 = dot(vec3(_638, _639, _640), vec3(_2650, _2651, _2652));
        float _4645 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2660 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2661 = dot(vec3(cbLight._m0[_2623].xyz), vec3(_2650, _2651, _2652));
        float _4656 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2665 = _2642 * _2642;
        float _2669 = ((_2660 * _2660) * (_2665 + (-1.0))) + 1.0;
        float _2676 = exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0);
        float _2683 = 1.0 - _2642;
        float _2693 = (0.5 / (((_2425 * ((_2656 * _2683) + _2642)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2683) + _2642) * _2656))) * _2656;
        float _4667 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2695 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2665 / ((_2669 * _2669) * 3.141590118408203125));
        float _2696 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2617 = (((((_2676 * _2447) + _800) * cbLight._m0[_2627].x) * _2695) * _2696) + _2559;
        _2619 = (((((_2676 * _2449) + _802) * cbLight._m0[_2627].y) * _2695) * _2696) + _2560;
        _2621 = (((((_2676 * _2450) + _803) * cbLight._m0[_2627].z) * _2695) * _2696) + _2561;
    }
    float _2727;
    float _2729;
    float _2731;
    if (_2334)
    {
        _2727 = _2617;
        _2729 = _2619;
        _2731 = _2621;
    }
    else
    {
        uint _2738 = _2149 + 3u;
        uint _2742 = _2149 + 11u;
        float _2756 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2738].w)) * _641) * 0.949999988079071044921875);
        float _2757 = _2756 * _2756;
        float _2758 = cbLight._m0[_2738].x + _718;
        float _2759 = cbLight._m0[_2738].y + _719;
        float _2760 = cbLight._m0[_2738].z + _720;
        float _2764 = inversesqrt(dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760)));
        float _2765 = _2764 * _2758;
        float _2766 = _2764 * _2759;
        float _2767 = _2764 * _2760;
        float _2768 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2738].xyz));
        float _4683 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2771 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2772 = dot(vec3(_638, _639, _640), vec3(_2765, _2766, _2767));
        float _4694 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2775 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2776 = dot(vec3(cbLight._m0[_2738].xyz), vec3(_2765, _2766, _2767));
        float _4705 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2780 = _2757 * _2757;
        float _2784 = ((_2775 * _2775) * (_2780 + (-1.0))) + 1.0;
        float _2791 = exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0);
        float _2798 = 1.0 - _2757;
        float _2808 = (0.5 / (((_2425 * ((_2771 * _2798) + _2757)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2798) + _2757) * _2771))) * _2771;
        float _4716 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2810 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2780 / ((_2784 * _2784) * 3.141590118408203125));
        float _2811 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2727 = (((((_2791 * _2447) + _800) * cbLight._m0[_2742].x) * _2810) * _2811) + _2617;
        _2729 = (((((_2791 * _2449) + _802) * cbLight._m0[_2742].y) * _2810) * _2811) + _2619;
        _2731 = (((((_2791 * _2450) + _803) * cbLight._m0[_2742].z) * _2810) * _2811) + _2621;
    }
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    if (_2147.y == 0u)
    {
        uvec4 _2832 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2833 = _2832.x;
        uint _2844 = uint((float(_2832.y) * floor(float(uint(cbSceneParam._m0[85u].y * _739) / _2833))) + floor(float(uint(cbSceneParam._m0[85u].x * _738) / _2833)));
        float _2854 = (log2(_1925 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2855 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        uint _2858 = uint(isnan(14.0) ? _2855 : (isnan(_2855) ? 14.0 : min(_2855, 14.0)));
        uvec4 _2863 = texelFetch(g_lightClusterGridBuffer, int(((_2858 << 2u) + (_2844 << 6u)) >> 2u));
        uint _2864 = _2863.x;
        uint _2865 = _2832.z;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        if (((((1u << ((_2865 >> 4u) & 15u)) + 4294967295u) & _2864) == 0u) || ((_2865 & 240u) == 0u))
        {
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
        }
        else
        {
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            uint _3103 = 0u;
            uint _3112;
            bool _3113;
            for (;;)
            {
                _3112 = texelFetch(g_lightClassification, int((((_2858 << 5u) + (_2844 << 9u)) + (_3103 << 2u)) >> 2u)).x;
                _3113 = _3112 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3113)
                {
                    frontier_phi_71_pred = _3102;
                    frontier_phi_71_pred_1 = _3101;
                    frontier_phi_71_pred_2 = _3100;
                    frontier_phi_71_pred_3 = _3099;
                    frontier_phi_71_pred_4 = _3098;
                    frontier_phi_71_pred_5 = _3097;
                }
                else
                {
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    uint _3248;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3112;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    for (;;)
                    {
                        uint _3252 = uint(findLSB(_3248)) + (_3103 << 5u);
                        uint _3249 = (_3248 + 4294967295u) & _3248;
                        uint _3254 = _3252 * 48u;
                        vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 3u)).x));
                        uint _3274 = (_3252 * 48u) + 4u;
                        vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 3u)).x));
                        uint _3293 = (_3252 * 48u) + 8u;
                        vec3 _3304 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x));
                        float _3308 = _3268.x - _1923;
                        float _3309 = _3268.y - _1924;
                        float _3310 = _3268.z - _1925;
                        float _3311 = dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310));
                        float _3314 = inversesqrt(_3311);
                        float _3315 = _3314 * _3308;
                        float _3316 = _3314 * _3309;
                        float _3317 = _3314 * _3310;
                        float _3318 = dot(vec3(_757, _760, _763), vec3(_3315, _3316, _3317));
                        float _3323 = 1.0 - (_3311 * _3268.w);
                        float _4742 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3325 = sqrt(_3311) * _3287.w;
                        float _3328 = 1.39999997615814208984375 / (_3325 + 1.39999997615814208984375);
                        float _3329 = _3328 * _3328;
                        float _3332 = ((1.0 - _3329) * _3318) + _3329;
                        float _3335 = _3325 * _3325;
                        float _3339 = ((isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0))) * _3324) / ((_3335 * 0.699999988079071044921875) + 1.0);
                        float _3343 = (-0.0) - _1923;
                        float _3344 = (-0.0) - _1924;
                        float _3345 = (-0.0) - _1925;
                        float _3349 = inversesqrt(dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345)));
                        float _3350 = _3349 * _3343;
                        float _3351 = _3349 * _3344;
                        float _3352 = _3349 * _3345;
                        float _3359 = exp2(log2(1.0 / ((_3335 * 3.5) + 5.0)) * 0.25);
                        float _3360 = 1.0 - _832;
                        float _3367 = sqrt(1.0 - ((1.0 - (_3360 * _3360)) * (1.0 - (_3359 * _3359))));
                        float _3368 = _3367 * _3367;
                        float _3369 = _3368 * _3368;
                        float _3370 = _3350 + _3315;
                        float _3371 = _3351 + _3316;
                        float _3372 = _3352 + _3317;
                        float _3376 = inversesqrt(dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372)));
                        float _3380 = dot(vec3(_757, _760, _763), vec3(_3350, _3351, _3352));
                        float _4758 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3383 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3384 = dot(vec3(_757, _760, _763), vec3(_3376 * _3370, _3376 * _3371, _3376 * _3372));
                        float _4769 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3387 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3391 = ((_3387 * _3387) * (_3369 + (-1.0))) + 1.0;
                        float _3392 = _3328 * _3368;
                        float _3393 = _3392 * _3392;
                        float _3396 = ((1.0 - _3393) * _3318) + _3393;
                        float _4780 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3397 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3398 = 1.0 - _3368;
                        float _3408 = (0.5 / (((_3397 * ((_3383 * _3398) + _3368)) + 9.9999999392252902907785028219223e-09) + (((_3397 * _3398) + _3368) * _3383))) * _3397;
                        float _4791 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3419 = (((_3369 * 3.1415927410125732421875) * (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) / ((_3391 * _3391) * ((_3335 * 2.1991131305694580078125) + 3.141590118408203125))) * _3324;
                        _3172 = (_3339 * _3287.x) + _3245;
                        _3173 = (_3339 * _3287.y) + _3246;
                        _3174 = (_3339 * _3287.z) + _3247;
                        _3169 = (_3419 * _3304.x) + _3242;
                        _3170 = (_3419 * _3304.y) + _3243;
                        _3171 = (_3419 * _3304.z) + _3244;
                        if (_3249 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3249;
                        }
                    }
                    frontier_phi_71_pred = _3174;
                    frontier_phi_71_pred_1 = _3173;
                    frontier_phi_71_pred_2 = _3172;
                    frontier_phi_71_pred_3 = _3171;
                    frontier_phi_71_pred_4 = _3170;
                    frontier_phi_71_pred_5 = _3169;
                }
                _2955 = frontier_phi_71_pred;
                _2953 = frontier_phi_71_pred_1;
                _2951 = frontier_phi_71_pred_2;
                _2949 = frontier_phi_71_pred_3;
                _2947 = frontier_phi_71_pred_4;
                _2945 = frontier_phi_71_pred_5;
                uint _3104 = _3103 + 1u;
                if (_3104 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3097 = _2945;
                    _3098 = _2947;
                    _3099 = _2949;
                    _3100 = _2951;
                    _3101 = _2953;
                    _3102 = _2955;
                    _3103 = _3104;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
        }
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.z;
        uint _2961 = (_2959 >> 8u) & 15u;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        if (((4294967295u << _2961) & _2864) == 0u)
        {
            _3065 = _2944;
            _3067 = _2946;
            _3069 = _2948;
            _3071 = _2950;
            _3073 = _2952;
            _3075 = _2954;
        }
        else
        {
            float _3090 = inversesqrt(dot(vec3(_1923, _1924, _1925), vec3(_1923, _1924, _1925)));
            float _3091 = _3090 * _1923;
            float _3092 = _3090 * _1924;
            float _3093 = _3090 * _1925;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2961 < ((_2959 >> 12u) & 15u))
            {
                float _3066;
                float _3068;
                float _3070;
                float _3072;
                float _3074;
                float _3076;
                float _3225 = _2944;
                float _3226 = _2946;
                float _3227 = _2948;
                float _3228 = _2950;
                float _3229 = _2952;
                float _3230 = _2954;
                uint _3231 = _2961;
                uint _3240;
                bool _3241;
                for (;;)
                {
                    _3240 = texelFetch(g_lightClassification, int((((_2858 << 5u) + (_2844 << 9u)) + (_3231 << 2u)) >> 2u)).x;
                    _3241 = _3240 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3241)
                    {
                        frontier_phi_82_pred = _3230;
                        frontier_phi_82_pred_1 = _3229;
                        frontier_phi_82_pred_2 = _3228;
                        frontier_phi_82_pred_3 = _3227;
                        frontier_phi_82_pred_4 = _3226;
                        frontier_phi_82_pred_5 = _3225;
                    }
                    else
                    {
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3446 = _3225;
                        float _3447 = _3226;
                        float _3448 = _3227;
                        float _3449 = _3228;
                        float _3450 = _3229;
                        float _3451 = _3230;
                        uint _3452 = _3240;
                        uint _3453;
                        vec4 _3478;
                        float _3479;
                        vec4 _3494;
                        vec3 _3506;
                        vec4 _3521;
                        vec4 _3537;
                        float _3583;
                        bool _3584;
                        for (;;)
                        {
                            uint _3463 = ((_3231 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3452));
                            _3453 = (_3452 + 4294967295u) & _3452;
                            uint _3465 = _3463 * 40u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            _3479 = _3478.w;
                            uint _3481 = (_3463 * 40u) + 4u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3463 * 40u) + 8u;
                            _3506 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x));
                            uint _3508 = (_3463 * 40u) + 16u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            uint _3524 = (_3463 * 40u) + 20u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3539 = (_3463 * 40u) + 24u;
                            vec4 _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3558 = (_3463 * 40u) + 28u;
                            vec4 _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            _3583 = fma(_1925, _3571.z, fma(_1924, _3571.y, _3571.x * _1923)) + _3571.w;
                            _3584 = !((fma(_1925, _3552.z, fma(_1924, _3552.y, _3552.x * _1923)) + _3552.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3584)
                            {
                                float _3611 = _3478.x - _1923;
                                float _3612 = _3478.y - _1924;
                                float _3613 = _3478.z - _1925;
                                float _3614 = dot(vec3(_3611, _3612, _3613), vec3(_3611, _3612, _3613));
                                float _3617 = inversesqrt(_3614);
                                float _3618 = _3617 * _3611;
                                float _3619 = _3617 * _3612;
                                float _3620 = _3617 * _3613;
                                float _3624 = 1.0 - (_3614 / (_3479 * _3479));
                                float _4802 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3625 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3629 = sqrt(_3614) * _3494.w;
                                float _3631 = 1.39999997615814208984375 / (_3629 + 1.39999997615814208984375);
                                float _3632 = _3631 * _3631;
                                float _3635 = ((1.0 - _3632) * dot(vec3(_3618, _3619, _3620), vec3(_757, _760, _763))) + _3632;
                                float _3638 = _3629 * _3629;
                                float _3642 = (fma(_1925, _3521.z, fma(_1924, _3521.y, _3521.x * _1923)) + _3521.w) / _3583;
                                float _3643 = (fma(_1925, _3537.z, fma(_1924, _3537.y, _3537.x * _1923)) + _3537.w) / _3583;
                                float _3647 = 1.0 - dot(vec2(_3642, _3643), vec2(_3642, _3643));
                                float _4818 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3648 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3649 = _3648 * (((isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0))) * _3625) / ((_3638 * 0.699999988079071044921875) + 1.0));
                                float _3661 = exp2(log2(1.0 / ((_3638 * 3.5) + 5.0)) * 0.25);
                                float _3662 = 1.0 - _832;
                                float _3669 = sqrt(1.0 - ((1.0 - (_3662 * _3662)) * (1.0 - (_3661 * _3661))));
                                float _3670 = _3669 * _3669;
                                float _3671 = _3670 * _3670;
                                float _3672 = _3618 - _3091;
                                float _3673 = _3619 - _3092;
                                float _3674 = _3620 - _3093;
                                float _3678 = inversesqrt(dot(vec3(_3672, _3673, _3674), vec3(_3672, _3673, _3674)));
                                float _3682 = dot(vec3(_757, _760, _763), vec3((-0.0) - _3091, (-0.0) - _3092, (-0.0) - _3093));
                                float _4829 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3685 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3686 = dot(vec3(_757, _760, _763), vec3(_3678 * _3672, _3678 * _3673, _3678 * _3674));
                                float _4840 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3689 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3693 = ((_3689 * _3689) * (_3671 + (-1.0))) + 1.0;
                                float _3694 = _3631 * _3670;
                                float _3695 = _3694 * _3694;
                                float _3701 = ((1.0 - _3695) * dot(vec3(_757, _760, _763), vec3(_3618, _3619, _3620))) + _3695;
                                float _4851 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3702 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3703 = 1.0 - _3670;
                                float _3713 = (0.5 / (((_3702 * ((_3685 * _3703) + _3670)) + 9.9999999392252902907785028219223e-09) + (((_3702 * _3703) + _3670) * _3685))) * _3702;
                                float _4862 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3723 = (_3648 * _3625) * (((_3671 * 3.1415927410125732421875) * (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0)))) / ((_3693 * _3693) * ((_3638 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3649 * _3494.z;
                                frontier_phi_88_pred_1 = _3649 * _3494.y;
                                frontier_phi_88_pred_2 = _3649 * _3494.x;
                                frontier_phi_88_pred_3 = _3723 * _3506.z;
                                frontier_phi_88_pred_4 = _3723 * _3506.y;
                                frontier_phi_88_pred_5 = _3723 * _3506.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3732 = frontier_phi_88_pred;
                            _3731 = frontier_phi_88_pred_1;
                            _3730 = frontier_phi_88_pred_2;
                            _3729 = frontier_phi_88_pred_3;
                            _3728 = frontier_phi_88_pred_4;
                            _3727 = frontier_phi_88_pred_5;
                            _3436 = _3730 + _3449;
                            _3437 = _3731 + _3450;
                            _3438 = _3732 + _3451;
                            _3433 = _3727 + _3446;
                            _3434 = _3728 + _3447;
                            _3435 = _3729 + _3448;
                            if (_3453 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3453;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3438;
                        frontier_phi_82_pred_1 = _3437;
                        frontier_phi_82_pred_2 = _3436;
                        frontier_phi_82_pred_3 = _3435;
                        frontier_phi_82_pred_4 = _3434;
                        frontier_phi_82_pred_5 = _3433;
                    }
                    _3076 = frontier_phi_82_pred;
                    _3074 = frontier_phi_82_pred_1;
                    _3072 = frontier_phi_82_pred_2;
                    _3070 = frontier_phi_82_pred_3;
                    _3068 = frontier_phi_82_pred_4;
                    _3066 = frontier_phi_82_pred_5;
                    uint _3232 = _3231 + 1u;
                    if (_3232 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3225 = _3066;
                        _3226 = _3068;
                        _3227 = _3070;
                        _3228 = _3072;
                        _3229 = _3074;
                        _3230 = _3076;
                        _3231 = _3232;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3072;
                frontier_phi_63_64_ladder_1 = _3076;
                frontier_phi_63_64_ladder_2 = _3074;
                frontier_phi_63_64_ladder_3 = _3070;
                frontier_phi_63_64_ladder_4 = _3068;
                frontier_phi_63_64_ladder_5 = _3066;
            }
            else
            {
                frontier_phi_63_64_ladder = _2950;
                frontier_phi_63_64_ladder_1 = _2954;
                frontier_phi_63_64_ladder_2 = _2952;
                frontier_phi_63_64_ladder_3 = _2948;
                frontier_phi_63_64_ladder_4 = _2946;
                frontier_phi_63_64_ladder_5 = _2944;
            }
            _3065 = frontier_phi_63_64_ladder_5;
            _3067 = frontier_phi_63_64_ladder_4;
            _3069 = frontier_phi_63_64_ladder_3;
            _3071 = frontier_phi_63_64_ladder;
            _3073 = frontier_phi_63_64_ladder_2;
            _3075 = frontier_phi_63_64_ladder_1;
        }
        float _3080 = isnan(1.0) ? _816 : (isnan(_816) ? 1.0 : min(_816, 1.0));
        _2877 = (_3080 * _3071) + _2389;
        _2879 = (_3080 * _3073) + _2391;
        _2881 = (_3080 * _3075) + _2393;
        _2883 = ((_3065 * _800) * _3080) + _2727;
        _2885 = ((_3067 * _802) * _3080) + _2729;
        _2887 = ((_3069 * _803) * _3080) + _2731;
    }
    else
    {
        _2877 = _2389;
        _2879 = _2391;
        _2881 = _2393;
        _2883 = _2727;
        _2885 = _2729;
        _2887 = _2731;
    }
    float _4878 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4889 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4900 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _2904 = ((isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2877 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _816))) + ((_2883 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    float _2905 = ((isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2879 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _816))) + ((_2885 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    float _2906 = ((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2881 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _816))) + ((_2887 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    uint _2907 = _242 + 6u;
    float _2915 = _738 / cbSceneParam._m0[86u].x;
    float _2916 = _739 / cbSceneParam._m0[86u].y;
    vec4 _2930 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2915, _2916, (log2((isnan(cbSceneParam._m0[77u].w) ? _660 : (isnan(_660) ? cbSceneParam._m0[77u].w : min(_660, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2932 = _2930.x;
    float _2933 = _2930.y;
    float _2934 = _2930.z;
    float _2935 = _2930.w;
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    if (_660 > cbSceneParam._m0[78u].w)
    {
        float _2969 = isnan(_660) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _660 : min(cbSceneParam._m0[80u].w, _660));
        float _2970 = _2969 / _660;
        float _2981 = _2970 * _711;
        float _2982 = _712 * _2970;
        float _2983 = (-0.0) - _2982;
        float _2985 = _2970 * _713;
        float _2987 = (cbSceneParam._m0[77u].w * _2983) / _2969;
        float _2988 = _2987 + cbSceneParam._m0[79u].w;
        float _2989 = cbSceneParam._m0[79u].w - _2982;
        float _2995 = sqrt(((_2981 * _2981) + (_2982 * _2982)) + (_2985 * _2985));
        float _2998 = (1.0 - (cbSceneParam._m0[77u].w / _2969)) * _2995;
        float _3003 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3005 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3182;
        if (abs((_2983 - _2987) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3182 = ((((_2988 > 0.0) ? exp2(_3003 * _2988) : (2.0 - exp2(_3005 * _2988))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2998;
        }
        else
        {
            float _3126 = 1.0 / cbSceneParam._m0[80u].x;
            float _3127 = isnan(_2989) ? _2988 : (isnan(_2988) ? _2989 : max(_2988, _2989));
            float _3128 = isnan(_2989) ? _2988 : (isnan(_2988) ? _2989 : min(_2988, _2989));
            float _3137 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : min(_3127, 0.0));
            float _3138 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : min(_3128, 0.0));
            _3182 = ((abs(_2995 / _2983) * cbSceneParam._m0[80u].y) * ((((_3137 - _3138) * 2.0) - ((exp2(_3003 * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0)))) - exp2(_3003 * (isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0))))) * _3126)) - ((exp2(_3005 * _3137) - exp2(_3005 * _3138)) * _3126))) + (_2998 * cbSceneParam._m0[80u].z);
        }
        vec4 _3184 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2915, _2916, 1.0), 0.0);
        float _3193 = exp2((_3182 * (-1.44269502162933349609375)) * (1.0 - _3184.w));
        float _3194 = log2(_3193);
        float _3210 = log2(_2935);
        _3007 = (exp2(_3210 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].x)) * _3184.x) / cbSceneParam._m0[78u].x)) + _2932;
        _3009 = (exp2(_3210 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].y)) * _3184.y) / cbSceneParam._m0[78u].y)) + _2933;
        _3011 = (exp2(_3210 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].z)) * _3184.z) / cbSceneParam._m0[78u].z)) + _2934;
        _3013 = _3193 * _2935;
    }
    else
    {
        _3007 = _2932;
        _3009 = _2933;
        _3011 = _2934;
        _3013 = _2935;
    }
    bool _3220;
    vec4 _3023;
    vec4 _3045;
    float _3047;
    float _3051;
    float _3052;
    float _3053;
    float _3054;
    bool _3064;
    for (;;)
    {
        _3023 = cbMatDynParam._m0[0u];
        float _3025 = roundEven(_3023.y);
        bool _3026 = _3025 == 3.0;
        float _3027 = log2(_3013);
        float _3034 = exp2(_3027 * cbSceneParam._m0[78u].x) * _2904;
        float _3035 = exp2(_3027 * cbSceneParam._m0[78u].y) * _2905;
        float _3036 = exp2(_3027 * cbSceneParam._m0[78u].z) * _2906;
        float _3043 = _727 + (-0.5);
        _3045 = cbMtdParam._m0[1u];
        _3047 = _3045.y * _3043;
        float _3050 = (_3025 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3051 = _3050 * (_3026 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3007)));
        _3052 = _3050 * (_3026 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3009)));
        _3053 = _3050 * (_3026 ? _3036 : (_3036 + (cbSceneParam._m0[72u].w * _3011)));
        _3054 = _3043 * 0.999000012874603271484375;
        _3064 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3064)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _3054) < 0.5)
            {
                _3220 = true;
                break;
            }
        }
        uint _3161 = _776 + uint(_3023.w);
        if ((cbInstanceData._m0[_3161].w < 1.0) && ((cbInstanceData._m0[_3161].w + _3054) < 0.5))
        {
            _3220 = true;
            break;
        }
        if ((_3047 + 1.0) < _3045.x)
        {
            _3220 = true;
            break;
        }
        _3220 = false;
        break;
    }
    float _3424;
    if (_3220)
    {
        discard_state = true;
        _3424 = 0.0;
    }
    else
    {
        _3424 = cbInstanceData._m0[_2907].w;
    }
    SV_Target.x = _3051;
    SV_Target.y = _3052;
    SV_Target.z = _3053;
    SV_Target.w = _3424;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2907].w;
    discard_exit();
}


