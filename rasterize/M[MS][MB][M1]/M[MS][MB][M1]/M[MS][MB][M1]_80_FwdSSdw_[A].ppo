#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1398;
float _3803;
float _3804;
float _3805;
float _3806;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3815 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3826 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3837 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].y) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3848 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _439 = (_432 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _440 = (_432 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _441 = (_432 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _445 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _439;
    float _448 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _440;
    float _451 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _441;
    float _458 = ((_439 - _445) * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) + _445;
    float _459 = ((_440 - _448) * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) + _448;
    float _460 = ((_441 - _451) * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) + _451;
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _517 = _515.x;
    float _518 = _515.y;
    float _519 = _515.z;
    float _528 = ((_498.z - _519) * _432) + _519;
    float _531 = ((((_498.x - _517) * _432) + _517) * 2.0) + (-1.0);
    float _532 = ((((_498.y - _518) * _432) + _518) * 2.0) + (-1.0);
    float _533 = dot(vec2(_531, _532), vec2(_531, _532));
    float _3859 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _538 = sqrt(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))));
    vec4 _560 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _572 = (_531 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_473.x * 2.0) + (-1.0)))) + (((_560.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _573 = (_532 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_473.y * 2.0) + (-1.0)))) + (((_560.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _585 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _587 = _585.x;
    float _588 = 1.0 - _587;
    float _614 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_587 - _588) * cbMtdParam._m0[24u].w) + _588) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3870 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _623 = ((((cbMtdParam._m0[10u].x - _458) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _615) + _458;
    float _624 = ((((cbMtdParam._m0[10u].y - _459) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _615) + _459;
    float _625 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _460)) * _615) + _460;
    vec4 _637 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _651 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _653 = _651.x;
    float _671 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _300) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _301) + cbTextureTilingScale._m0[9u].w)).x - _653) * _432) + _653;
    float _675 = ((_637.x - _671) * cbMtdParam._m0[19u].z) + _671;
    float _677 = _675 - (_675 * _615);
    float _682 = (((_473.z - _528) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _528;
    float _686 = ((_560.z - _682) * cbMtdParam._m0[19u].w) + _682;
    float _690 = ((cbMtdParam._m0[23u].y - _686) * _615) + _686;
    vec4 _709 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _711 = _709.x;
    float _712 = _709.y;
    float _716 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_250, _251, _252, 0.0));
    vec4 _731 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _300) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _301) + cbTextureTilingScale._m0[18u].w));
    float _733 = _731.x;
    float _738 = fract(_731.w + cbPerFrame._m0[22u].x);
    float _740 = (1.0 - _738) * _733;
    float _745 = ((_738 + (-1.0)) + _733) * 9.0;
    float _747 = ((_733 + (-1.0)) + _738) * 9.0;
    float _748 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _749 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _763 = (_740 * ((_731.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _748 : (isnan(_748) ? 3.0 : min(_748, 3.0))) * 3.1415927410125732421875);
    float _765 = (_740 * ((_731.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _749 : (isnan(_749) ? 3.0 : min(_749, 3.0))) * 3.1415927410125732421875);
    float _769 = inversesqrt(dot(vec3(_763, _765, 1.0), vec3(_763, _765, 1.0)));
    float _785 = (((((0.5 - _711) + ((_763 * 0.5) * _769)) * _716) + _711) * 2.0) + (-1.0);
    float _786 = (((((0.5 - _712) + ((_769 * 0.5) * _765)) * _716) + _712) * 2.0) + (-1.0);
    float _787 = dot(vec2(_785, _786), vec2(_785, _786));
    float _3901 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _803 = ((((cbMtdParam._m0[22u].z * _572) - _572) + _785) * _615) + _572;
    float _804 = ((((cbMtdParam._m0[22u].z * _573) - _573) + _786) * _615) + _573;
    float _805 = (_615 * (sqrt(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) - _538)) + _538;
    float _807 = cbMtdParam._m0[22u].x + _560.w;
    float _810 = fma(_805, _250, fma(_804, _256 * TANGENT.x, (_242 * _234) * _803));
    float _813 = fma(_805, _251, fma(_804, _256 * TANGENT.y, (_242 * _235) * _803));
    float _816 = fma(_805, _252, fma(_804, _256 * TANGENT.z, (_242 * _236) * _803));
    float _820 = inversesqrt(dot(vec3(_810, _813, _816), vec3(_810, _813, _816)));
    float _821 = _820 * _810;
    float _822 = _820 * _813;
    float _823 = _820 * _816;
    float _3912 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _824 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _3934 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3945 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3956 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3967 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _829 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _843 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _893 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _883);
    float _894 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _883);
    float _895 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _883);
    float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
    float _900 = _893 * _899;
    float _901 = _894 * _899;
    float _902 = _895 * _899;
    vec4 _907 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _909 = _907.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1080 = sqrt(((_893 * _893) + (_894 * _894)) + (_895 * _895));
        float _1086 = (cbMatDynParam._m0[5u].x * _1080) + cbMatDynParam._m0[5u].y;
        float _3978 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1091 = (cbMatDynParam._m0[5u].z * _1080) + cbMatDynParam._m0[5u].w;
        float _3989 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) - _1087)) + _1087) < ((_909 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _920 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _921 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _939 = fma(_823, cbSceneParam._m0[5u].z, fma(_822, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _821));
    float _942 = fma(_823, cbSceneParam._m0[6u].z, fma(_822, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _821));
    float _945 = fma(_823, cbSceneParam._m0[7u].z, fma(_822, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _821));
    uint _958 = _281 + 9u;
    uint _959 = _958 + uint(cbMatDynParam._m0[0u].w);
    float _965 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_959].x;
    float _966 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * cbInstanceData._m0[_959].y;
    float _967 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) * cbInstanceData._m0[_959].z;
    float _4000 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _4022 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _971 = 1.0 - _829;
    float _972 = _968 * _971;
    float _973 = _969 * _971;
    float _974 = _970 * _971;
    float _979 = (_968 + (-0.039999999105930328369140625)) * _829;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _829;
    float _981 = (_970 + (-0.039999999105930328369140625)) * _829;
    float _982 = _979 + 0.039999999105930328369140625;
    float _984 = _980 + 0.039999999105930328369140625;
    float _985 = _981 + 0.039999999105930328369140625;
    vec4 _994 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _920, cbSceneParam._m0[86u].y * _921));
    float _998 = ((isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * TEXCOORD_5.w) * _994.x;
    float _999 = dot(vec3(_821, _822, _823), vec3(_900, _901, _902));
    float _1002 = _999 * 2.0;
    float _1006 = (_1002 * _821) - _900;
    float _1007 = (_1002 * _822) - _901;
    float _1008 = (_1002 * _823) - _902;
    float _1012 = abs(dot(vec3(_900, _901, _902), vec3(_821, _822, _823)));
    float _4033 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1014 = sqrt(_824);
    float _1026 = exp2((_1014 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1014 * 3.0));
    float _1032 = (1.0 - _1026) * ((_1014 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1033 = _1026 * _1014;
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1397;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1123 = fma(_1069, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061));
        float _1127 = fma(_1069, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061));
        float _1131 = fma(_1069, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061));
        float _1155 = _1061 + _821;
        float _1156 = _1065 + _822;
        float _1157 = _1069 + _823;
        float _1167 = fma(_1157, cbModelParam._m0[26u].z, fma(_1156, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1155)) - _1123;
        float _1168 = fma(_1157, cbModelParam._m0[27u].z, fma(_1156, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1155)) - _1127;
        float _1169 = fma(_1157, cbModelParam._m0[28u].z, fma(_1156, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1155)) - _1131;
        float _1173 = inversesqrt(dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169)));
        float _1186 = ((_1173 * _1167) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1123 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1173 * _1168) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1127 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1173 * _1169) / cbModelParam._m0[34u].z) + ((((((_1131 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        float _1225 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1191.x + (-0.5));
        float _1227 = _1225 * (_1191.y + (-0.5));
        float _1228 = _1225 * (_1191.z + (-0.5));
        float _1235 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1198.x + (-0.5));
        float _1237 = _1235 * (_1198.y + (-0.5));
        float _1238 = _1235 * (_1198.z + (-0.5));
        float _1245 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1205.x + (-0.5));
        float _1247 = _1245 * (_1205.y + (-0.5));
        float _1248 = _1245 * (_1205.z + (-0.5));
        float _1255 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1212.x + (-0.5));
        float _1257 = _1255 * (_1212.y + (-0.5));
        float _1258 = _1255 * (_1212.z + (-0.5));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = _1226 * 0.5;
        float _1263 = _1236 * 0.5;
        float _1264 = _1246 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1279 = (dot(vec3(_821, _822, _823), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1289 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4081 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1291 + 1.0))) + _1296) * _1259;
        float _1306 = _1227 * 0.5;
        float _1307 = _1237 * 0.5;
        float _1308 = _1247 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_821, _822, _823), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4114 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1333 + 1.0))) + _1338) * _1260;
        float _1348 = _1228 * 0.5;
        float _1349 = _1238 * 0.5;
        float _1350 = _1248 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_821, _822, _823), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4147 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1375 + 1.0))) + _1380) * _1261;
        _1397 = _1228;
        _1399 = _1227;
        _1400 = _1226;
        _1401 = _1238;
        _1402 = _1237;
        _1403 = _1236;
        _1404 = _1248;
        _1405 = _1247;
        _1406 = _1246;
        _1407 = _1261;
        _1408 = _1260;
        _1409 = _1259;
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
    }
    else
    {
        _1397 = _1398;
        _1399 = _1398;
        _1400 = _1398;
        _1401 = _1398;
        _1402 = _1398;
        _1403 = _1398;
        _1404 = _1398;
        _1405 = _1398;
        _1406 = _1398;
        _1407 = _1398;
        _1408 = _1398;
        _1409 = _1398;
        _1410 = 0.0;
        _1411 = 0.0;
        _1412 = 0.0;
    }
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1440 = fma(_1069, cbModelParam._m0[30u].z, fma(_1065, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061));
        float _1444 = fma(_1069, cbModelParam._m0[31u].z, fma(_1065, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061));
        float _1448 = fma(_1069, cbModelParam._m0[32u].z, fma(_1065, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061));
        float _1471 = _1061 + _821;
        float _1472 = _1065 + _822;
        float _1473 = _1069 + _823;
        float _1483 = fma(_1473, cbModelParam._m0[30u].z, fma(_1472, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1471)) - _1440;
        float _1484 = fma(_1473, cbModelParam._m0[31u].z, fma(_1472, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1471)) - _1444;
        float _1485 = fma(_1473, cbModelParam._m0[32u].z, fma(_1472, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1471)) - _1448;
        float _1489 = inversesqrt(dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485)));
        float _1502 = ((_1489 * _1483) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1440 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1503 = ((_1489 * _1484) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1444 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1504 = ((_1489 * _1485) / cbModelParam._m0[35u].z) + ((((((_1448 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        float _1539 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1506.x + (-0.5));
        float _1541 = _1539 * (_1506.y + (-0.5));
        float _1542 = _1539 * (_1506.z + (-0.5));
        float _1549 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1513.x + (-0.5));
        float _1551 = _1549 * (_1513.y + (-0.5));
        float _1552 = _1549 * (_1513.z + (-0.5));
        float _1559 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1520.x + (-0.5));
        float _1561 = _1559 * (_1520.y + (-0.5));
        float _1562 = _1559 * (_1520.z + (-0.5));
        float _1569 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1527.x + (-0.5));
        float _1571 = _1569 * (_1527.y + (-0.5));
        float _1572 = _1569 * (_1527.z + (-0.5));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = _1540 * 0.5;
        float _1577 = _1550 * 0.5;
        float _1578 = _1560 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_821, _822, _823), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4210 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1603 + 1.0))) + _1608) * _1573;
        float _1618 = _1541 * 0.5;
        float _1619 = _1551 * 0.5;
        float _1620 = _1561 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_821, _822, _823), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4243 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1645 + 1.0))) + _1650) * _1574;
        float _1660 = _1542 * 0.5;
        float _1661 = _1552 * 0.5;
        float _1662 = _1562 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_821, _822, _823), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4276 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1687 + 1.0))) + _1692) * _1575;
        _1709 = _1542;
        _1710 = _1541;
        _1711 = _1540;
        _1712 = _1552;
        _1713 = _1551;
        _1714 = _1550;
        _1715 = _1562;
        _1716 = _1561;
        _1717 = _1560;
        _1718 = _1575;
        _1719 = _1574;
        _1720 = _1573;
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
    }
    else
    {
        _1709 = _1398;
        _1710 = _1398;
        _1711 = _1398;
        _1712 = _1398;
        _1713 = _1398;
        _1714 = _1398;
        _1715 = _1398;
        _1716 = _1398;
        _1717 = _1398;
        _1718 = _1398;
        _1719 = _1398;
        _1720 = _1398;
        _1721 = 0.0;
        _1722 = 0.0;
        _1723 = 0.0;
    }
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1410)) + _1410;
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1411)) + _1411;
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1412)) + _1412;
    float _1756 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1733 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1733 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1733));
    float _1777 = _1006 * 0.5;
    float _1778 = _1007 * 0.5;
    float _1779 = _1008 * 0.5;
    float _1780 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1783 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1786 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1820;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1793 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1397, _1401, _1404, _1407));
        float _1797 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1399, _1402, _1405, _1408));
        float _1801 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1400, _1403, _1406, _1409));
        float _1808 = dot(vec4(cbModelParam._m0[39u]), vec4(_1777, _1778, _1779, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1831;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1822 = dot(vec4(cbModelParam._m0[40u]), vec4(_1777, _1778, _1779, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1835 = (_1831 * cbModelParam._m0[1u].x) + (_1820 * (1.0 - cbModelParam._m0[1u].x));
    float _1845 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _824);
    float _1846 = isnan(_1845) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1845 : min(cbModelParam._m0[25u].z, _1845));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1895 = fma(_1069, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061)) + cbModelParam._m0[13u].w;
        float _1899 = fma(_1069, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061)) + cbModelParam._m0[14u].w;
        float _1903 = fma(_1069, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061)) + cbModelParam._m0[15u].w;
        float _1906 = fma(_1008, cbModelParam._m0[13u].z, fma(_1007, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1006));
        float _1909 = fma(_1008, cbModelParam._m0[14u].z, fma(_1007, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1006));
        float _1912 = fma(_1008, cbModelParam._m0[15u].z, fma(_1007, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1006));
        float _1940;
        if (_1906 > 0.0)
        {
            _1940 = abs((1.0 - _1895) / _1906);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1895 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1940 = frontier_phi_17_15_ladder;
        }
        float _2164;
        if (_1909 > 0.0)
        {
            _2164 = abs((1.0 - _1899) / _1909);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1899 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2164 = frontier_phi_26_22_ladder;
        }
        float _2421;
        if (_1912 > 0.0)
        {
            _2421 = abs((1.0 - _1903) / _1912);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1903 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2421 = frontier_phi_38_33_ladder;
        }
        float _2423 = isnan(_2164) ? _1940 : (isnan(_1940) ? _2164 : min(_1940, _2164));
        float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
        float _2428 = (_2424 * _1906) + _1895;
        float _2429 = (_2424 * _1909) + _1899;
        float _2430 = (_2424 * _1912) + _1903;
        float _2431 = _2424 * 9.9999997473787516355514526367188e-05;
        float _2433 = (-1.0) - _2431;
        float _2435 = _2431 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2430 > _2435) || ((_2430 < _2433) || ((_2429 > _2435) || ((_2429 < _2433) || ((_2428 < _2433) || (_2428 > _2435))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2430, cbModelParam._m0[9u].z, fma(_2429, cbModelParam._m0[9u].y, _2428 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2430, cbModelParam._m0[10u].z, fma(_2429, cbModelParam._m0[10u].y, _2428 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2430, cbModelParam._m0[11u].z, fma(_2429, cbModelParam._m0[11u].y, _2428 * cbModelParam._m0[11u].x))), _1846);
            frontier_phi_16_38_ladder = _2558.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2558.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2558.x * cbModelParam._m0[1u].y;
        }
        _1928 = frontier_phi_16_38_ladder_2;
        _1930 = frontier_phi_16_38_ladder_1;
        _1932 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1916 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1006, _1007, _1008), _1846);
        _1928 = _1916.x * cbModelParam._m0[1u].y;
        _1930 = _1916.y * cbModelParam._m0[1u].y;
        _1932 = _1916.z * cbModelParam._m0[1u].y;
    }
    float _1936 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _824);
    float _1937 = isnan(_1936) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1936 : min(cbModelParam._m0[25u].w, _1936));
    float _2027;
    float _2029;
    float _2031;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1991 = fma(_1069, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061)) + cbModelParam._m0[21u].w;
        float _1995 = fma(_1069, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061)) + cbModelParam._m0[22u].w;
        float _1999 = fma(_1069, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061)) + cbModelParam._m0[23u].w;
        float _2002 = fma(_1008, cbModelParam._m0[21u].z, fma(_1007, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1006));
        float _2005 = fma(_1008, cbModelParam._m0[22u].z, fma(_1007, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1006));
        float _2008 = fma(_1008, cbModelParam._m0[23u].z, fma(_1007, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1006));
        float _2169;
        if (_2002 > 0.0)
        {
            _2169 = abs((1.0 - _1991) / _2002);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1991 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2169 = frontier_phi_28_24_ladder;
        }
        float _2448;
        if (_2005 > 0.0)
        {
            _2448 = abs((1.0 - _1995) / _2005);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1995 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2448 = frontier_phi_40_35_ladder;
        }
        float _2661;
        if (_2008 > 0.0)
        {
            _2661 = abs((1.0 - _1999) / _2008);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1999 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2661 = frontier_phi_49_46_ladder;
        }
        float _2663 = isnan(_2448) ? _2169 : (isnan(_2169) ? _2448 : min(_2169, _2448));
        float _2664 = isnan(_2661) ? _2663 : (isnan(_2663) ? _2661 : min(_2663, _2661));
        float _2668 = (_2664 * _2002) + _1991;
        float _2669 = (_2664 * _2005) + _1995;
        float _2670 = (_2664 * _2008) + _1999;
        float _2671 = _2664 * 9.9999997473787516355514526367188e-05;
        float _2672 = (-1.0) - _2671;
        float _2674 = _2671 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2670 > _2674) || ((_2670 < _2672) || ((_2669 > _2674) || ((_2669 < _2672) || ((_2668 < _2672) || (_2668 > _2674))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2670, cbModelParam._m0[17u].z, fma(_2669, cbModelParam._m0[17u].y, _2668 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2670, cbModelParam._m0[18u].z, fma(_2669, cbModelParam._m0[18u].y, _2668 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2670, cbModelParam._m0[19u].z, fma(_2669, cbModelParam._m0[19u].y, _2668 * cbModelParam._m0[19u].x))), _1937);
            frontier_phi_25_49_ladder = _2869.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2869.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2869.x * cbModelParam._m0[1u].z;
        }
        _2027 = frontier_phi_25_49_ladder_2;
        _2029 = frontier_phi_25_49_ladder_1;
        _2031 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2011 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1006, _1007, _1008), _1937);
        _2027 = _2011.x * cbModelParam._m0[1u].z;
        _2029 = _2011.y * cbModelParam._m0[1u].z;
        _2031 = _2011.z * cbModelParam._m0[1u].z;
    }
    float _2044 = (((_1032 * _982) + _1033) * _998) * ((cbModelParam._m0[1u].w * (_2027 - _1928)) + _1928);
    float _2046 = (((_1032 * _984) + _1033) * _998) * ((cbModelParam._m0[1u].w * (_2029 - _1930)) + _1930);
    float _2048 = (((_1032 * _985) + _1033) * _998) * ((cbModelParam._m0[1u].w * (_2031 - _1932)) + _1932);
    float _2051 = fma(_2048, cbSceneParam._m0[89u].z, fma(_2046, cbSceneParam._m0[89u].y, _2044 * cbSceneParam._m0[89u].x));
    float _2054 = fma(_2048, cbSceneParam._m0[90u].z, fma(_2046, cbSceneParam._m0[90u].y, _2044 * cbSceneParam._m0[90u].x));
    float _2057 = fma(_2048, cbSceneParam._m0[91u].z, fma(_2046, cbSceneParam._m0[91u].y, _2044 * cbSceneParam._m0[91u].x));
    vec4 _2065 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_920, _921));
    float _2067 = _2065.w;
    float _2079 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2067);
    float _2080 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2067);
    float _2081 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2067);
    uvec4 _2085 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2087 = _2085.x * 14u;
    uint _2088 = _2087 + 13u;
    float _2095 = _998 + (-1.0);
    float _2100 = (cbLight._m0[_2088].x * _2095) + 1.0;
    float _2101 = (cbLight._m0[_2088].y * _2095) + 1.0;
    float _2102 = (cbLight._m0[_2088].z * _2095) + 1.0;
    float _2103 = (cbLight._m0[_2088].w * _2095) + 1.0;
    uint _2104 = _2087 + 5u;
    float _2110 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
    uint _2114 = _2087 + 4u;
    float _2123 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2127 = _2087 | 1u;
    float _2138 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_821, _822, _823));
    float _2141 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_821, _822, _823));
    float _4412 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _4423 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2146 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * 0.3183098733425140380859375;
    float _2148 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * 0.3183098733425140380859375;
    float _2155 = ((cbLight._m0[_2104].x * _2110) * _2148) + (((cbLight._m0[_2114].x * _2079) * _2123) * _2146);
    float _2156 = ((_2110 * cbLight._m0[_2104].y) * _2148) + (((cbLight._m0[_2114].y * _2080) * _2123) * _2146);
    float _2157 = ((_2110 * cbLight._m0[_2104].z) * _2148) + (((cbLight._m0[_2114].z * _2081) * _2123) * _2146);
    uvec4 _2161 = floatBitsToUint(cbLight._m0[_2087 + 12u]);
    bool _2163 = _2161.x == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2163)
    {
        _2174 = _2155;
        _2176 = _2156;
        _2178 = _2157;
    }
    else
    {
        uint _2182 = _2087 + 6u;
        float _2198 = (dot(vec3(cbLight._m0[_2087 + 2u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2199 = _2198 * _2198;
        float _4434 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2200 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2201 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2174 = (((cbLight._m0[_2182].x * 0.3183098733425140380859375) * _2200) * _2201) + _2155;
        _2176 = (((cbLight._m0[_2182].y * 0.3183098733425140380859375) * _2200) * _2201) + _2156;
        _2178 = (((cbLight._m0[_2182].z * 0.3183098733425140380859375) * _2200) * _2201) + _2157;
    }
    bool _2181 = _2161.y == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2181)
    {
        _2219 = _2174;
        _2221 = _2176;
        _2223 = _2178;
    }
    else
    {
        uint _2392 = _2087 + 7u;
        float _2408 = (dot(vec3(cbLight._m0[_2087 + 3u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2409 = _2408 * _2408;
        float _4450 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2410 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2411 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2219 = (((cbLight._m0[_2392].x * 0.3183098733425140380859375) * _2410) * _2411) + _2174;
        _2221 = (((cbLight._m0[_2392].y * 0.3183098733425140380859375) * _2410) * _2411) + _2176;
        _2223 = (((cbLight._m0[_2392].z * 0.3183098733425140380859375) * _2410) * _2411) + _2178;
    }
    uint _2226 = _2087 + 8u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _824) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_2087].x + _900;
    float _2242 = cbLight._m0[_2087].y + _901;
    float _2243 = cbLight._m0[_2087].z + _902;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2087].xyz));
    float _4466 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _4477 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _2255 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2256 = dot(vec3(_821, _822, _823), vec3(_2248, _2249, _2250));
    float _4488 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2248, _2249, _2250));
    float _4499 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2240 * _2240;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2276 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
    float _2277 = 0.959999978542327880859375 - _979;
    float _2279 = 0.959999978542327880859375 - _980;
    float _2280 = 0.959999978542327880859375 - _981;
    float _2287 = 1.0 - _2240;
    float _2298 = (0.5 / (((_2255 * ((_2254 * _2287) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2287) + _2240) * _2254))) * _2254;
    float _4510 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2300 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    uint _2314 = _2087 + 9u;
    float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _824) * 0.949999988079071044921875);
    float _2326 = _2325 * _2325;
    float _2327 = cbLight._m0[_2127].x + _900;
    float _2328 = cbLight._m0[_2127].y + _901;
    float _2329 = cbLight._m0[_2127].z + _902;
    float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
    float _2334 = _2333 * _2327;
    float _2335 = _2333 * _2328;
    float _2336 = _2333 * _2329;
    float _2337 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2127].xyz));
    float _4521 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2341 = dot(vec3(_821, _822, _823), vec3(_2334, _2335, _2336));
    float _4532 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _2345 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2334, _2335, _2336));
    float _4543 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2349 = _2326 * _2326;
    float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
    float _2360 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
    float _2367 = 1.0 - _2326;
    float _2377 = (0.5 / (((_2255 * ((_2340 * _2367) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2367) + _2326) * _2340))) * _2340;
    float _4554 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2379 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
    float _2389 = (((((_2360 * _2277) + _982) * cbLight._m0[_2314].x) * _2379) * _2110) + ((((cbLight._m0[_2226].x * _2079) * ((_2276 * _2277) + _982)) * _2300) * _2123);
    float _2390 = (((((_2360 * _2279) + _984) * cbLight._m0[_2314].y) * _2379) * _2110) + ((((cbLight._m0[_2226].y * _2080) * ((_2276 * _2279) + _984)) * _2300) * _2123);
    float _2391 = (((((_2360 * _2280) + _985) * cbLight._m0[_2314].z) * _2379) * _2110) + ((((cbLight._m0[_2226].z * _2081) * ((_2276 * _2280) + _985)) * _2300) * _2123);
    float _2453;
    float _2455;
    float _2457;
    if (_2163)
    {
        _2453 = _2389;
        _2455 = _2390;
        _2457 = _2391;
    }
    else
    {
        uint _2459 = _2087 + 2u;
        uint _2463 = _2087 + 10u;
        float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _824) * 0.949999988079071044921875);
        float _2478 = _2477 * _2477;
        float _2479 = cbLight._m0[_2459].x + _900;
        float _2480 = cbLight._m0[_2459].y + _901;
        float _2481 = cbLight._m0[_2459].z + _902;
        float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
        float _2486 = _2485 * _2479;
        float _2487 = _2485 * _2480;
        float _2488 = _2485 * _2481;
        float _2489 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2459].xyz));
        float _4565 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2493 = dot(vec3(_821, _822, _823), vec3(_2486, _2487, _2488));
        float _4576 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2497 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2486, _2487, _2488));
        float _4587 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2501 = _2478 * _2478;
        float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
        float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
        float _2519 = 1.0 - _2478;
        float _2529 = (0.5 / (((_2255 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2519) + _2478) * _2492))) * _2492;
        float _4598 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2453 = (((((_2512 * _2277) + _982) * cbLight._m0[_2463].x) * _2531) * _2532) + _2389;
        _2455 = (((((_2512 * _2279) + _984) * cbLight._m0[_2463].y) * _2531) * _2532) + _2390;
        _2457 = (((((_2512 * _2280) + _985) * cbLight._m0[_2463].z) * _2531) * _2532) + _2391;
    }
    float _2567;
    float _2569;
    float _2571;
    if (_2181)
    {
        _2567 = _2453;
        _2569 = _2455;
        _2571 = _2457;
    }
    else
    {
        uint _2578 = _2087 + 3u;
        uint _2582 = _2087 + 11u;
        float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _824) * 0.949999988079071044921875);
        float _2597 = _2596 * _2596;
        float _2598 = cbLight._m0[_2578].x + _900;
        float _2599 = cbLight._m0[_2578].y + _901;
        float _2600 = cbLight._m0[_2578].z + _902;
        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
        float _2605 = _2604 * _2598;
        float _2606 = _2604 * _2599;
        float _2607 = _2604 * _2600;
        float _2608 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2578].xyz));
        float _4614 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2612 = dot(vec3(_821, _822, _823), vec3(_2605, _2606, _2607));
        float _4625 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2616 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2605, _2606, _2607));
        float _4636 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2620 = _2597 * _2597;
        float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
        float _2631 = exp2(log2(1.0 - (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) * 5.0);
        float _2638 = 1.0 - _2597;
        float _2648 = (0.5 / (((_2255 * ((_2611 * _2638) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2638) + _2597) * _2611))) * _2611;
        float _4647 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2650 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
        float _2651 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2567 = (((((_2631 * _2277) + _982) * cbLight._m0[_2582].x) * _2650) * _2651) + _2453;
        _2569 = (((((_2631 * _2279) + _984) * cbLight._m0[_2582].y) * _2650) * _2651) + _2455;
        _2571 = (((((_2631 * _2280) + _985) * cbLight._m0[_2582].z) * _2650) * _2651) + _2457;
    }
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    if (_2085.y == 0u)
    {
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2726;
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2726;
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2726;
        uvec4 _2741 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2742 = _2741.x;
        uint _2753 = uint((float(_2741.y) * floor(float(uint(cbSceneParam._m0[85u].y * _921) / _2742))) + floor(float(uint(cbSceneParam._m0[85u].x * _920) / _2742)));
        float _2763 = (log2(_2729 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2764 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        uint _2767 = uint(isnan(14.0) ? _2764 : (isnan(_2764) ? 14.0 : min(_2764, 14.0)));
        uvec4 _2772 = texelFetch(g_lightClusterGridBuffer, int(((_2767 << 2u) + (_2753 << 6u)) >> 2u));
        uint _2773 = _2772.x;
        uint _2774 = _2741.z;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        if (((((1u << ((_2774 >> 4u) & 15u)) + 4294967295u) & _2773) == 0u) || ((_2774 & 240u) == 0u))
        {
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
        }
        else
        {
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            uint _3033 = 0u;
            uint _3042;
            bool _3043;
            for (;;)
            {
                _3042 = texelFetch(g_lightClassification, int((((_2767 << 5u) + (_2753 << 9u)) + (_3033 << 2u)) >> 2u)).x;
                _3043 = _3042 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3043)
                {
                    frontier_phi_66_pred = _3027;
                    frontier_phi_66_pred_1 = _3032;
                    frontier_phi_66_pred_2 = _3031;
                    frontier_phi_66_pred_3 = _3030;
                    frontier_phi_66_pred_4 = _3029;
                    frontier_phi_66_pred_5 = _3028;
                }
                else
                {
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    uint _3178;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3031;
                    _3177 = _3032;
                    _3178 = _3042;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    for (;;)
                    {
                        uint _3182 = uint(findLSB(_3178)) + (_3033 << 5u);
                        uint _3179 = (_3178 + 4294967295u) & _3178;
                        uint _3184 = _3182 * 48u;
                        vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3204 = (_3182 * 48u) + 4u;
                        vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 3u)).x));
                        uint _3223 = (_3182 * 48u) + 8u;
                        vec3 _3234 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x));
                        float _3238 = _3198.x - _2727;
                        float _3239 = _3198.y - _2728;
                        float _3240 = _3198.z - _2729;
                        float _3241 = dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240));
                        float _3244 = inversesqrt(_3241);
                        float _3245 = _3244 * _3238;
                        float _3246 = _3244 * _3239;
                        float _3247 = _3244 * _3240;
                        float _3248 = dot(vec3(_939, _942, _945), vec3(_3245, _3246, _3247));
                        float _3253 = 1.0 - (_3241 * _3198.w);
                        float _4673 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3254 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                        float _3255 = sqrt(_3241) * _3217.w;
                        float _3258 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                        float _3259 = _3258 * _3258;
                        float _3262 = ((1.0 - _3259) * _3248) + _3259;
                        float _3265 = _3255 * _3255;
                        float _3269 = ((isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))) * _3254) / ((_3265 * 0.699999988079071044921875) + 1.0);
                        float _3273 = (-0.0) - _2727;
                        float _3274 = (-0.0) - _2728;
                        float _3275 = (-0.0) - _2729;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3280 = _3279 * _3273;
                        float _3281 = _3279 * _3274;
                        float _3282 = _3279 * _3275;
                        float _3290 = exp2(log2(1.0 / ((_3265 * 3.5) + 5.0)) * 0.25);
                        float _3291 = 1.0 - _1014;
                        float _3298 = sqrt(1.0 - ((1.0 - (_3291 * _3291)) * (1.0 - (_3290 * _3290))));
                        float _3299 = _3298 * _3298;
                        float _3300 = _3299 * _3299;
                        float _3301 = _3280 + _3245;
                        float _3302 = _3281 + _3246;
                        float _3303 = _3282 + _3247;
                        float _3307 = inversesqrt(dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303)));
                        float _3311 = dot(vec3(_939, _942, _945), vec3(_3280, _3281, _3282));
                        float _4689 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3315 = dot(vec3(_939, _942, _945), vec3(_3307 * _3301, _3307 * _3302, _3307 * _3303));
                        float _4700 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3318 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3322 = ((_3318 * _3318) * (_3300 + (-1.0))) + 1.0;
                        float _3323 = _3258 * _3299;
                        float _3324 = _3323 * _3323;
                        float _3327 = ((1.0 - _3324) * _3248) + _3324;
                        float _4711 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3328 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                        float _3329 = 1.0 - _3299;
                        float _3339 = (0.5 / (((_3328 * ((_3314 * _3329) + _3299)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3299) * _3314))) * _3328;
                        float _4722 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3349 = (((_3300 * 3.1415927410125732421875) * (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) / ((_3322 * _3322) * ((_3265 * 2.1991131305694580078125) + 3.141590118408203125))) * _3254;
                        _3102 = (_3269 * _3217.x) + _3175;
                        _3103 = (_3269 * _3217.y) + _3176;
                        _3104 = (_3269 * _3217.z) + _3177;
                        _3099 = (_3349 * _3234.x) + _3172;
                        _3100 = (_3349 * _3234.y) + _3173;
                        _3101 = (_3349 * _3234.z) + _3174;
                        if (_3179 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3103;
                            _3177 = _3104;
                            _3178 = _3179;
                        }
                    }
                    frontier_phi_66_pred = _3099;
                    frontier_phi_66_pred_1 = _3104;
                    frontier_phi_66_pred_2 = _3103;
                    frontier_phi_66_pred_3 = _3102;
                    frontier_phi_66_pred_4 = _3101;
                    frontier_phi_66_pred_5 = _3100;
                }
                _2875 = frontier_phi_66_pred;
                _2885 = frontier_phi_66_pred_1;
                _2883 = frontier_phi_66_pred_2;
                _2881 = frontier_phi_66_pred_3;
                _2879 = frontier_phi_66_pred_4;
                _2877 = frontier_phi_66_pred_5;
                uint _3034 = _3033 + 1u;
                if (_3034 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3027 = _2875;
                    _3028 = _2877;
                    _3029 = _2879;
                    _3030 = _2881;
                    _3031 = _2883;
                    _3032 = _2885;
                    _3033 = _3034;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
        }
        uvec4 _2888 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2889 = _2888.z;
        uint _2891 = (_2889 >> 8u) & 15u;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        if (((4294967295u << _2891) & _2773) == 0u)
        {
            _2995 = _2874;
            _2997 = _2876;
            _2999 = _2878;
            _3001 = _2880;
            _3003 = _2882;
            _3005 = _2884;
        }
        else
        {
            float _3020 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
            float _3021 = _3020 * _2727;
            float _3022 = _3020 * _2728;
            float _3023 = _3020 * _2729;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2891 < ((_2889 >> 12u) & 15u))
            {
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3155 = _2874;
                float _3156 = _2876;
                float _3157 = _2878;
                float _3158 = _2880;
                float _3159 = _2882;
                float _3160 = _2884;
                uint _3161 = _2891;
                uint _3170;
                bool _3171;
                for (;;)
                {
                    _3170 = texelFetch(g_lightClassification, int((((_2767 << 5u) + (_2753 << 9u)) + (_3161 << 2u)) >> 2u)).x;
                    _3171 = _3170 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3171)
                    {
                        frontier_phi_77_pred = _3160;
                        frontier_phi_77_pred_1 = _3159;
                        frontier_phi_77_pred_2 = _3158;
                        frontier_phi_77_pred_3 = _3157;
                        frontier_phi_77_pred_4 = _3156;
                        frontier_phi_77_pred_5 = _3155;
                    }
                    else
                    {
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3376 = _3155;
                        float _3377 = _3156;
                        float _3378 = _3157;
                        float _3379 = _3158;
                        float _3380 = _3159;
                        float _3381 = _3160;
                        uint _3382 = _3170;
                        uint _3383;
                        vec4 _3408;
                        float _3409;
                        vec4 _3424;
                        vec3 _3436;
                        vec4 _3451;
                        vec4 _3466;
                        float _3512;
                        bool _3513;
                        for (;;)
                        {
                            uint _3393 = ((_3161 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3382));
                            _3383 = (_3382 + 4294967295u) & _3382;
                            uint _3395 = _3393 * 40u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            _3409 = _3408.w;
                            uint _3411 = (_3393 * 40u) + 4u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3426 = (_3393 * 40u) + 8u;
                            _3436 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x));
                            uint _3438 = (_3393 * 40u) + 16u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3393 * 40u) + 20u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3393 * 40u) + 24u;
                            vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3487 = (_3393 * 40u) + 28u;
                            vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            _3512 = fma(_2729, _3500.z, fma(_2728, _3500.y, _3500.x * _2727)) + _3500.w;
                            _3513 = !((fma(_2729, _3481.z, fma(_2728, _3481.y, _3481.x * _2727)) + _3481.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3513)
                            {
                                float _3540 = _3408.x - _2727;
                                float _3541 = _3408.y - _2728;
                                float _3542 = _3408.z - _2729;
                                float _3543 = dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542));
                                float _3546 = inversesqrt(_3543);
                                float _3547 = _3546 * _3540;
                                float _3548 = _3546 * _3541;
                                float _3549 = _3546 * _3542;
                                float _3553 = 1.0 - (_3543 / (_3409 * _3409));
                                float _4733 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3558 = sqrt(_3543) * _3424.w;
                                float _3560 = 1.39999997615814208984375 / (_3558 + 1.39999997615814208984375);
                                float _3561 = _3560 * _3560;
                                float _3564 = ((1.0 - _3561) * dot(vec3(_3547, _3548, _3549), vec3(_939, _942, _945))) + _3561;
                                float _3567 = _3558 * _3558;
                                float _3571 = (fma(_2729, _3451.z, fma(_2728, _3451.y, _3451.x * _2727)) + _3451.w) / _3512;
                                float _3572 = (fma(_2729, _3466.z, fma(_2728, _3466.y, _3466.x * _2727)) + _3466.w) / _3512;
                                float _3576 = 1.0 - dot(vec2(_3571, _3572), vec2(_3571, _3572));
                                float _4749 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3578 = _3577 * (((isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0))) * _3554) / ((_3567 * 0.699999988079071044921875) + 1.0));
                                float _3590 = exp2(log2(1.0 / ((_3567 * 3.5) + 5.0)) * 0.25);
                                float _3591 = 1.0 - _1014;
                                float _3598 = sqrt(1.0 - ((1.0 - (_3591 * _3591)) * (1.0 - (_3590 * _3590))));
                                float _3599 = _3598 * _3598;
                                float _3600 = _3599 * _3599;
                                float _3601 = _3547 - _3021;
                                float _3602 = _3548 - _3022;
                                float _3603 = _3549 - _3023;
                                float _3607 = inversesqrt(dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603)));
                                float _3611 = dot(vec3(_939, _942, _945), vec3((-0.0) - _3021, (-0.0) - _3022, (-0.0) - _3023));
                                float _4760 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3614 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3615 = dot(vec3(_939, _942, _945), vec3(_3607 * _3601, _3607 * _3602, _3607 * _3603));
                                float _4771 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3618 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3622 = ((_3618 * _3618) * (_3600 + (-1.0))) + 1.0;
                                float _3623 = _3560 * _3599;
                                float _3624 = _3623 * _3623;
                                float _3630 = ((1.0 - _3624) * dot(vec3(_939, _942, _945), vec3(_3547, _3548, _3549))) + _3624;
                                float _4782 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                                float _3632 = 1.0 - _3599;
                                float _3642 = (0.5 / (((_3631 * ((_3614 * _3632) + _3599)) + 9.9999999392252902907785028219223e-09) + (((_3631 * _3632) + _3599) * _3614))) * _3631;
                                float _4793 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3652 = (_3577 * _3554) * (((_3600 * 3.1415927410125732421875) * (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0)))) / ((_3622 * _3622) * ((_3567 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3578 * _3424.y;
                                frontier_phi_83_pred_1 = _3578 * _3424.x;
                                frontier_phi_83_pred_2 = _3652 * _3436.z;
                                frontier_phi_83_pred_3 = _3652 * _3436.y;
                                frontier_phi_83_pred_4 = _3652 * _3436.x;
                                frontier_phi_83_pred_5 = _3578 * _3424.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3660 = frontier_phi_83_pred;
                            _3659 = frontier_phi_83_pred_1;
                            _3658 = frontier_phi_83_pred_2;
                            _3657 = frontier_phi_83_pred_3;
                            _3656 = frontier_phi_83_pred_4;
                            _3661 = frontier_phi_83_pred_5;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            if (_3383 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3383;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3368;
                        frontier_phi_77_pred_1 = _3367;
                        frontier_phi_77_pred_2 = _3366;
                        frontier_phi_77_pred_3 = _3365;
                        frontier_phi_77_pred_4 = _3364;
                        frontier_phi_77_pred_5 = _3363;
                    }
                    _3006 = frontier_phi_77_pred;
                    _3004 = frontier_phi_77_pred_1;
                    _3002 = frontier_phi_77_pred_2;
                    _3000 = frontier_phi_77_pred_3;
                    _2998 = frontier_phi_77_pred_4;
                    _2996 = frontier_phi_77_pred_5;
                    uint _3162 = _3161 + 1u;
                    if (_3162 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3155 = _2996;
                        _3156 = _2998;
                        _3157 = _3000;
                        _3158 = _3002;
                        _3159 = _3004;
                        _3160 = _3006;
                        _3161 = _3162;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3000;
                frontier_phi_58_59_ladder_1 = _3006;
                frontier_phi_58_59_ladder_2 = _3004;
                frontier_phi_58_59_ladder_3 = _3002;
                frontier_phi_58_59_ladder_4 = _2998;
                frontier_phi_58_59_ladder_5 = _2996;
            }
            else
            {
                frontier_phi_58_59_ladder = _2878;
                frontier_phi_58_59_ladder_1 = _2884;
                frontier_phi_58_59_ladder_2 = _2882;
                frontier_phi_58_59_ladder_3 = _2880;
                frontier_phi_58_59_ladder_4 = _2876;
                frontier_phi_58_59_ladder_5 = _2874;
            }
            _2995 = frontier_phi_58_59_ladder_5;
            _2997 = frontier_phi_58_59_ladder_4;
            _2999 = frontier_phi_58_59_ladder;
            _3001 = frontier_phi_58_59_ladder_3;
            _3003 = frontier_phi_58_59_ladder_2;
            _3005 = frontier_phi_58_59_ladder_1;
        }
        float _3010 = isnan(1.0) ? _998 : (isnan(_998) ? 1.0 : min(_998, 1.0));
        _2786 = (_3010 * _3001) + _2219;
        _2788 = (_3010 * _3003) + _2221;
        _2790 = (_3010 * _3005) + _2223;
        _2792 = ((_2995 * _982) * _3010) + _2567;
        _2794 = ((_2997 * _984) * _3010) + _2569;
        _2796 = ((_2999 * _985) * _3010) + _2571;
    }
    else
    {
        _2786 = _2219;
        _2788 = _2221;
        _2790 = _2223;
        _2792 = _2567;
        _2794 = _2569;
        _2796 = _2571;
    }
    float _4809 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4820 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _4831 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _2813 = ((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2786 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _998))) + ((_2792 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    float _2814 = ((isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2788 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _998))) + ((_2794 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    float _2815 = ((isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * (_2790 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _998))) + ((_2796 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    uint _2816 = _281 + 6u;
    float _2824 = _920 / cbSceneParam._m0[86u].x;
    float _2825 = _921 / cbSceneParam._m0[86u].y;
    vec4 _2839 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2824, _2825, (log2((isnan(cbSceneParam._m0[77u].w) ? _843 : (isnan(_843) ? cbSceneParam._m0[77u].w : min(_843, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2841 = _2839.x;
    float _2842 = _2839.y;
    float _2843 = _2839.z;
    float _2844 = _2839.w;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    if (_843 > cbSceneParam._m0[78u].w)
    {
        float _2899 = isnan(_843) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _843 : min(cbSceneParam._m0[80u].w, _843));
        float _2900 = _2899 / _843;
        float _2911 = _2900 * _893;
        float _2912 = _894 * _2900;
        float _2913 = (-0.0) - _2912;
        float _2915 = _2900 * _895;
        float _2917 = (cbSceneParam._m0[77u].w * _2913) / _2899;
        float _2918 = _2917 + cbSceneParam._m0[79u].w;
        float _2919 = cbSceneParam._m0[79u].w - _2912;
        float _2925 = sqrt(((_2911 * _2911) + (_2912 * _2912)) + (_2915 * _2915));
        float _2928 = (1.0 - (cbSceneParam._m0[77u].w / _2899)) * _2925;
        float _2933 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2935 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3112;
        if (abs((_2913 - _2917) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3112 = ((((_2918 > 0.0) ? exp2(_2933 * _2918) : (2.0 - exp2(_2935 * _2918))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2928;
        }
        else
        {
            float _3056 = 1.0 / cbSceneParam._m0[80u].x;
            float _3057 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : max(_2918, _2919));
            float _3058 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : min(_2918, _2919));
            float _3067 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : min(_3057, 0.0));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            _3112 = ((abs(_2925 / _2913) * cbSceneParam._m0[80u].y) * ((((_3067 - _3068) * 2.0) - ((exp2(_2933 * (isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0)))) - exp2(_2933 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))))) * _3056)) - ((exp2(_2935 * _3067) - exp2(_2935 * _3068)) * _3056))) + (_2928 * cbSceneParam._m0[80u].z);
        }
        vec4 _3114 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2824, _2825, 1.0), 0.0);
        float _3123 = exp2((_3112 * (-1.44269502162933349609375)) * (1.0 - _3114.w));
        float _3124 = log2(_3123);
        float _3140 = log2(_2844);
        _2937 = (exp2(_3140 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].x)) * _3114.x) / cbSceneParam._m0[78u].x)) + _2841;
        _2939 = (exp2(_3140 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].y)) * _3114.y) / cbSceneParam._m0[78u].y)) + _2842;
        _2941 = (exp2(_3140 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].z)) * _3114.z) / cbSceneParam._m0[78u].z)) + _2843;
        _2943 = _3123 * _2844;
    }
    else
    {
        _2937 = _2841;
        _2939 = _2842;
        _2941 = _2843;
        _2943 = _2844;
    }
    bool _3150;
    vec4 _2953;
    vec4 _2975;
    float _2977;
    float _2981;
    float _2982;
    float _2983;
    float _2984;
    bool _2994;
    for (;;)
    {
        _2953 = cbMatDynParam._m0[0u];
        float _2955 = roundEven(_2953.y);
        bool _2956 = _2955 == 3.0;
        float _2957 = log2(_2943);
        float _2964 = exp2(_2957 * cbSceneParam._m0[78u].x) * _2813;
        float _2965 = exp2(_2957 * cbSceneParam._m0[78u].y) * _2814;
        float _2966 = exp2(_2957 * cbSceneParam._m0[78u].z) * _2815;
        float _2973 = _909 + (-0.5);
        _2975 = cbMtdParam._m0[1u];
        _2977 = _2975.y * _2973;
        float _2980 = (_2955 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2981 = _2980 * (_2956 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2937)));
        _2982 = _2980 * (_2956 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2939)));
        _2983 = _2980 * (_2956 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2941)));
        _2984 = _2973 * 0.999000012874603271484375;
        _2994 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2994)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _2984) < 0.5)
            {
                _3150 = true;
                break;
            }
        }
        uint _3091 = _958 + uint(_2953.w);
        if ((cbInstanceData._m0[_3091].w < 1.0) && ((cbInstanceData._m0[_3091].w + _2984) < 0.5))
        {
            _3150 = true;
            break;
        }
        if ((_2977 + 1.0) < _2975.x)
        {
            _3150 = true;
            break;
        }
        _3150 = false;
        break;
    }
    float _3354;
    if (_3150)
    {
        discard_state = true;
        _3354 = 0.0;
    }
    else
    {
        _3354 = cbInstanceData._m0[_2816].w;
    }
    SV_Target.x = _2981;
    SV_Target.y = _2982;
    SV_Target.z = _2983;
    SV_Target.w = _3354;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2816].w;
    discard_exit();
}


