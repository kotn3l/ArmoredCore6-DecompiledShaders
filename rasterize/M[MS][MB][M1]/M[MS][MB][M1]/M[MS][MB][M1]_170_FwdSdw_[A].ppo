#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1281;
float _3945;
float _3946;
float _3947;
float _3948;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _359 = _357.x;
    float _371 = dot(vec4(_359, _357.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _388 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_359 - _371) * cbMtdParam._m0[24u].y) + _371) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3957 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _396 = (_389 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _397 = (_389 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _398 = (_389 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _415 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _437 = _435.x;
    float _447 = dot(vec4(_437, _435.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _461 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_437 - _447) * cbMtdParam._m0[24u].y) + _447) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3968 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _469 = (_462 * ((_415.x * cbMtdParam._m0[13u].x) - _396)) + _396;
    float _470 = (_462 * ((_415.y * cbMtdParam._m0[13u].y) - _397)) + _397;
    float _471 = (_462 * ((_415.z * cbMtdParam._m0[13u].z) - _398)) + _398;
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _506 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _523 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _525 = _523.x;
    float _526 = _523.y;
    float _527 = _523.z;
    float _534 = ((_506.x - _525) * _389) + _525;
    float _535 = ((_506.y - _526) * _389) + _526;
    float _536 = ((_506.z - _527) * _389) + _527;
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _561 = ((_548.z - _536) * _462) + _536;
    float _564 = ((((_548.x - _534) * _462) + _534) * 2.0) + (-1.0);
    float _565 = ((((_548.y - _535) * _462) + _535) * 2.0) + (-1.0);
    float _566 = dot(vec2(_564, _565), vec2(_564, _565));
    float _3979 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _571 = sqrt(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))));
    vec4 _591 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _603 = (_564 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_483.x * 2.0) + (-1.0)))) + (((_591.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _604 = (_565 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_483.y * 2.0) + (-1.0)))) + (((_591.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _616 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _630 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _632 = _630.x;
    float _650 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _632) * _389) + _632;
    float _668 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _650) * _462) + _650;
    float _672 = ((_616.x - _668) * cbMtdParam._m0[19u].z) + _668;
    float _677 = (((_483.z - _561) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _561;
    float _681 = ((_591.z - _677) * cbMtdParam._m0[19u].w) + _677;
    float _686 = cbMtdParam._m0[22u].x + _591.w;
    float _689 = fma(_571, _237 * NORMAL.x, fma(_604, _244 * TANGENT.x, (_230 * _222) * _603));
    float _692 = fma(_571, _237 * NORMAL.y, fma(_604, _244 * TANGENT.y, (_230 * _223) * _603));
    float _695 = fma(_571, _237 * NORMAL.z, fma(_604, _244 * TANGENT.z, (_230 * _224) * _603));
    float _699 = inversesqrt(dot(vec3(_689, _692, _695), vec3(_689, _692, _695)));
    float _700 = _699 * _689;
    float _701 = _699 * _692;
    float _702 = _699 * _695;
    float _3990 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _703 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _4012 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _4023 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _4034 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _4045 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _708 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _722 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _773 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _763);
    float _774 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _763);
    float _775 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _763);
    float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
    float _780 = _773 * _779;
    float _781 = _774 * _779;
    float _782 = _775 * _779;
    vec4 _787 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _789 = _787.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _961 = sqrt(((_773 * _773) + (_774 * _774)) + (_775 * _775));
        float _967 = (cbMatDynParam._m0[5u].x * _961) + cbMatDynParam._m0[5u].y;
        float _4056 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _972 = (cbMatDynParam._m0[5u].z * _961) + cbMatDynParam._m0[5u].w;
        float _4067 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) - _968)) + _968) < ((_789 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _800 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _801 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _819 = fma(_702, cbSceneParam._m0[5u].z, fma(_701, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _700));
    float _822 = fma(_702, cbSceneParam._m0[6u].z, fma(_701, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _700));
    float _825 = fma(_702, cbSceneParam._m0[7u].z, fma(_701, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _700));
    uint _838 = _250 + 9u;
    uint _839 = _838 + uint(cbMatDynParam._m0[0u].w);
    float _845 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_839].x;
    float _846 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_839].y;
    float _847 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_839].z;
    float _4078 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _851 = 1.0 - _708;
    float _852 = _848 * _851;
    float _853 = _849 * _851;
    float _854 = _850 * _851;
    float _859 = (_848 + (-0.039999999105930328369140625)) * _708;
    float _860 = (_849 + (-0.039999999105930328369140625)) * _708;
    float _861 = (_850 + (-0.039999999105930328369140625)) * _708;
    float _862 = _859 + 0.039999999105930328369140625;
    float _864 = _860 + 0.039999999105930328369140625;
    float _865 = _861 + 0.039999999105930328369140625;
    vec4 _874 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _800, cbSceneParam._m0[86u].y * _801));
    float _878 = ((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * TEXCOORD_5.w) * _874.x;
    float _879 = dot(vec3(_700, _701, _702), vec3(_780, _781, _782));
    float _882 = _879 * 2.0;
    float _886 = (_882 * _700) - _780;
    float _887 = (_882 * _701) - _781;
    float _888 = (_882 * _702) - _782;
    float _892 = abs(dot(vec3(_780, _781, _782), vec3(_700, _701, _702)));
    float _4111 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _894 = sqrt(_703);
    float _907 = exp2((_894 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_894 * 3.0));
    float _913 = (1.0 - _907) * ((_894 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _914 = _907 * _894;
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1280;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1005 = fma(_950, cbModelParam._m0[26u].z, fma(_946, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _942));
        float _1009 = fma(_950, cbModelParam._m0[27u].z, fma(_946, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _942));
        float _1013 = fma(_950, cbModelParam._m0[28u].z, fma(_946, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _942));
        float _1038 = _942 + _700;
        float _1039 = _946 + _701;
        float _1040 = _950 + _702;
        float _1050 = fma(_1040, cbModelParam._m0[26u].z, fma(_1039, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1038)) - _1005;
        float _1051 = fma(_1040, cbModelParam._m0[27u].z, fma(_1039, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1038)) - _1009;
        float _1052 = fma(_1040, cbModelParam._m0[28u].z, fma(_1039, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1038)) - _1013;
        float _1056 = inversesqrt(dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052)));
        float _1069 = ((_1056 * _1050) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1005 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1056 * _1051) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1009 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1056 * _1052) / cbModelParam._m0[34u].z) + ((((((_1013 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        float _1108 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1074.x + (-0.5));
        float _1110 = _1108 * (_1074.y + (-0.5));
        float _1111 = _1108 * (_1074.z + (-0.5));
        float _1118 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1081.x + (-0.5));
        float _1120 = _1118 * (_1081.y + (-0.5));
        float _1121 = _1118 * (_1081.z + (-0.5));
        float _1128 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1088.x + (-0.5));
        float _1130 = _1128 * (_1088.y + (-0.5));
        float _1131 = _1128 * (_1088.z + (-0.5));
        float _1138 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1095.x + (-0.5));
        float _1140 = _1138 * (_1095.y + (-0.5));
        float _1141 = _1138 * (_1095.z + (-0.5));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = _1109 * 0.5;
        float _1146 = _1119 * 0.5;
        float _1147 = _1129 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1162 = (dot(vec3(_700, _701, _702), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1172 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _4159 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1174 + 1.0))) + _1179) * _1142;
        float _1189 = _1110 * 0.5;
        float _1190 = _1120 * 0.5;
        float _1191 = _1130 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_700, _701, _702), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _4192 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1216 + 1.0))) + _1221) * _1143;
        float _1231 = _1111 * 0.5;
        float _1232 = _1121 * 0.5;
        float _1233 = _1131 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_700, _701, _702), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _4225 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1258 + 1.0))) + _1263) * _1144;
        _1280 = _1111;
        _1282 = _1110;
        _1283 = _1109;
        _1284 = _1121;
        _1285 = _1120;
        _1286 = _1119;
        _1287 = _1131;
        _1288 = _1130;
        _1289 = _1129;
        _1290 = _1144;
        _1291 = _1143;
        _1292 = _1142;
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
    }
    else
    {
        _1280 = _1281;
        _1282 = _1281;
        _1283 = _1281;
        _1284 = _1281;
        _1285 = _1281;
        _1286 = _1281;
        _1287 = _1281;
        _1288 = _1281;
        _1289 = _1281;
        _1290 = _1281;
        _1291 = _1281;
        _1292 = _1281;
        _1293 = 0.0;
        _1294 = 0.0;
        _1295 = 0.0;
    }
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1322 = fma(_950, cbModelParam._m0[30u].z, fma(_946, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _942));
        float _1326 = fma(_950, cbModelParam._m0[31u].z, fma(_946, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _942));
        float _1330 = fma(_950, cbModelParam._m0[32u].z, fma(_946, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _942));
        float _1353 = _942 + _700;
        float _1354 = _946 + _701;
        float _1355 = _950 + _702;
        float _1365 = fma(_1355, cbModelParam._m0[30u].z, fma(_1354, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1353)) - _1322;
        float _1366 = fma(_1355, cbModelParam._m0[31u].z, fma(_1354, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1353)) - _1326;
        float _1367 = fma(_1355, cbModelParam._m0[32u].z, fma(_1354, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1353)) - _1330;
        float _1371 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
        float _1384 = ((_1371 * _1365) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1322 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1371 * _1366) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1326 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1371 * _1367) / cbModelParam._m0[35u].z) + ((((((_1330 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        float _1421 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1388.x + (-0.5));
        float _1423 = _1421 * (_1388.y + (-0.5));
        float _1424 = _1421 * (_1388.z + (-0.5));
        float _1431 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1395.x + (-0.5));
        float _1433 = _1431 * (_1395.y + (-0.5));
        float _1434 = _1431 * (_1395.z + (-0.5));
        float _1441 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1402.x + (-0.5));
        float _1443 = _1441 * (_1402.y + (-0.5));
        float _1444 = _1441 * (_1402.z + (-0.5));
        float _1451 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1409.x + (-0.5));
        float _1453 = _1451 * (_1409.y + (-0.5));
        float _1454 = _1451 * (_1409.z + (-0.5));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = _1422 * 0.5;
        float _1459 = _1432 * 0.5;
        float _1460 = _1442 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_700, _701, _702), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4288 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1485 + 1.0))) + _1490) * _1455;
        float _1500 = _1423 * 0.5;
        float _1501 = _1433 * 0.5;
        float _1502 = _1443 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_700, _701, _702), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4321 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1527 + 1.0))) + _1532) * _1456;
        float _1542 = _1424 * 0.5;
        float _1543 = _1434 * 0.5;
        float _1544 = _1444 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_700, _701, _702), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4354 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1569 + 1.0))) + _1574) * _1457;
        _1591 = _1424;
        _1592 = _1423;
        _1593 = _1422;
        _1594 = _1434;
        _1595 = _1433;
        _1596 = _1432;
        _1597 = _1444;
        _1598 = _1443;
        _1599 = _1442;
        _1600 = _1457;
        _1601 = _1456;
        _1602 = _1455;
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
    }
    else
    {
        _1591 = _1281;
        _1592 = _1281;
        _1593 = _1281;
        _1594 = _1281;
        _1595 = _1281;
        _1596 = _1281;
        _1597 = _1281;
        _1598 = _1281;
        _1599 = _1281;
        _1600 = _1281;
        _1601 = _1281;
        _1602 = _1281;
        _1603 = 0.0;
        _1604 = 0.0;
        _1605 = 0.0;
    }
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1293)) + _1293;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1294)) + _1294;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1295)) + _1295;
    float _1638 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1615));
    float _1659 = _886 * 0.5;
    float _1660 = _887 * 0.5;
    float _1661 = _888 * 0.5;
    float _1662 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1665 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1668 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1702;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1675 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1280, _1284, _1287, _1290));
        float _1679 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1683 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1690 = dot(vec4(cbModelParam._m0[39u]), vec4(_1659, _1660, _1661, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1713;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1704 = dot(vec4(cbModelParam._m0[40u]), vec4(_1659, _1660, _1661, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1717 = (_1713 * cbModelParam._m0[1u].x) + (_1702 * (1.0 - cbModelParam._m0[1u].x));
    float _1727 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _703);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1727 : min(cbModelParam._m0[25u].z, _1727));
    float _1810;
    float _1812;
    float _1814;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1777 = fma(_950, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942)) + cbModelParam._m0[13u].w;
        float _1781 = fma(_950, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942)) + cbModelParam._m0[14u].w;
        float _1785 = fma(_950, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942)) + cbModelParam._m0[15u].w;
        float _1788 = fma(_888, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _886));
        float _1791 = fma(_888, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _886));
        float _1794 = fma(_888, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _886));
        float _1822;
        if (_1788 > 0.0)
        {
            _1822 = abs((1.0 - _1777) / _1788);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1777 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1822 = frontier_phi_17_15_ladder;
        }
        float _1994;
        if (_1791 > 0.0)
        {
            _1994 = abs((1.0 - _1781) / _1791);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1781 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1994 = frontier_phi_26_22_ladder;
        }
        float _2289;
        if (_1794 > 0.0)
        {
            _2289 = abs((1.0 - _1785) / _1794);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1785 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2289 = frontier_phi_38_33_ladder;
        }
        float _2291 = isnan(_1994) ? _1822 : (isnan(_1822) ? _1994 : min(_1822, _1994));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1788) + _1777;
        float _2297 = (_2292 * _1791) + _1781;
        float _2298 = (_2292 * _1794) + _1785;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2301 = (-1.0) - _2299;
        float _2303 = _2299 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2298 > _2303) || ((_2298 < _2301) || ((_2297 > _2303) || ((_2297 < _2301) || ((_2296 < _2301) || (_2296 > _2303))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2298, cbModelParam._m0[9u].z, fma(_2297, cbModelParam._m0[9u].y, _2296 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2298, cbModelParam._m0[10u].z, fma(_2297, cbModelParam._m0[10u].y, _2296 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2298, cbModelParam._m0[11u].z, fma(_2297, cbModelParam._m0[11u].y, _2296 * cbModelParam._m0[11u].x))), _1728);
            frontier_phi_16_38_ladder = _2443.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2443.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2443.x * cbModelParam._m0[1u].y;
        }
        _1810 = frontier_phi_16_38_ladder_2;
        _1812 = frontier_phi_16_38_ladder_1;
        _1814 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1798 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_886, _887, _888), _1728);
        _1810 = _1798.x * cbModelParam._m0[1u].y;
        _1812 = _1798.y * cbModelParam._m0[1u].y;
        _1814 = _1798.z * cbModelParam._m0[1u].y;
    }
    float _1818 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _703);
    float _1819 = isnan(_1818) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1818 : min(cbModelParam._m0[25u].w, _1818));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1873 = fma(_950, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942)) + cbModelParam._m0[21u].w;
        float _1877 = fma(_950, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942)) + cbModelParam._m0[22u].w;
        float _1881 = fma(_950, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942)) + cbModelParam._m0[23u].w;
        float _1884 = fma(_888, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _886));
        float _1887 = fma(_888, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _886));
        float _1890 = fma(_888, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _886));
        float _1999;
        if (_1884 > 0.0)
        {
            _1999 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1999 = frontier_phi_28_24_ladder;
        }
        float _2316;
        if (_1887 > 0.0)
        {
            _2316 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2316 = frontier_phi_40_35_ladder;
        }
        float _2654;
        if (_1890 > 0.0)
        {
            _2654 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2654 = frontier_phi_50_47_ladder;
        }
        float _2656 = isnan(_2316) ? _1999 : (isnan(_1999) ? _2316 : min(_1999, _2316));
        float _2657 = isnan(_2654) ? _2656 : (isnan(_2656) ? _2654 : min(_2656, _2654));
        float _2661 = (_2657 * _1884) + _1873;
        float _2662 = (_2657 * _1887) + _1877;
        float _2663 = (_2657 * _1890) + _1881;
        float _2664 = _2657 * 9.9999997473787516355514526367188e-05;
        float _2665 = (-1.0) - _2664;
        float _2667 = _2664 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2663 > _2667) || ((_2663 < _2665) || ((_2662 > _2667) || ((_2662 < _2665) || ((_2661 < _2665) || (_2661 > _2667))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2663, cbModelParam._m0[17u].z, fma(_2662, cbModelParam._m0[17u].y, _2661 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2663, cbModelParam._m0[18u].z, fma(_2662, cbModelParam._m0[18u].y, _2661 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2663, cbModelParam._m0[19u].z, fma(_2662, cbModelParam._m0[19u].y, _2661 * cbModelParam._m0[19u].x))), _1819);
            frontier_phi_25_50_ladder = _2785.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2785.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2785.x * cbModelParam._m0[1u].z;
        }
        _1909 = frontier_phi_25_50_ladder_2;
        _1911 = frontier_phi_25_50_ladder_1;
        _1913 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_886, _887, _888), _1819);
        _1909 = _1893.x * cbModelParam._m0[1u].z;
        _1911 = _1893.y * cbModelParam._m0[1u].z;
        _1913 = _1893.z * cbModelParam._m0[1u].z;
    }
    float _1926 = (((_913 * _862) + _914) * _878) * ((cbModelParam._m0[1u].w * (_1909 - _1810)) + _1810);
    float _1928 = (((_913 * _864) + _914) * _878) * ((cbModelParam._m0[1u].w * (_1911 - _1812)) + _1812);
    float _1930 = (((_913 * _865) + _914) * _878) * ((cbModelParam._m0[1u].w * (_1913 - _1814)) + _1814);
    float _1933 = fma(_1930, cbSceneParam._m0[89u].z, fma(_1928, cbSceneParam._m0[89u].y, _1926 * cbSceneParam._m0[89u].x));
    float _1936 = fma(_1930, cbSceneParam._m0[90u].z, fma(_1928, cbSceneParam._m0[90u].y, _1926 * cbSceneParam._m0[90u].x));
    float _1939 = fma(_1930, cbSceneParam._m0[91u].z, fma(_1928, cbSceneParam._m0[91u].y, _1926 * cbSceneParam._m0[91u].x));
    float _1973 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1977 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1981 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1985 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1986 = _1973 / _1985;
    float _1987 = _1977 / _1985;
    float _1988 = _1981 / _1985;
    float _2135;
    float _2136;
    float _2137;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2015 = ((uint(_1988 > cbSceneParam._m0[59u].y) + uint(_1988 > cbSceneParam._m0[59u].x)) + uint(_1988 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2016 = _2015 + 43u;
        uint _2024 = _2015 + 44u;
        uint _2032 = _2015 + 45u;
        uint _2040 = _2015 + 46u;
        float _2051 = fma(_1985, cbSceneParam._m0[_2016].w, fma(_1981, cbSceneParam._m0[_2016].z, fma(_1977, cbSceneParam._m0[_2016].y, _1973 * cbSceneParam._m0[_2016].x)));
        float _2055 = fma(_1985, cbSceneParam._m0[_2024].w, fma(_1981, cbSceneParam._m0[_2024].z, fma(_1977, cbSceneParam._m0[_2024].y, _1973 * cbSceneParam._m0[_2024].x)));
        float _2063 = fma(_1985, cbSceneParam._m0[_2040].w, fma(_1981, cbSceneParam._m0[_2040].z, fma(_1977, cbSceneParam._m0[_2040].y, _1973 * cbSceneParam._m0[_2040].x)));
        float _2068 = cbSceneParam._m0[33u].z * _2063;
        float _2070 = cbSceneParam._m0[33u].w * _2063;
        float _2073 = fma(_1985, cbSceneParam._m0[_2032].w, fma(_1981, cbSceneParam._m0[_2032].z, fma(_1977, cbSceneParam._m0[_2032].y, _1973 * cbSceneParam._m0[_2032].x))) / _2063;
        float _2121 = (cbSceneParam._m0[33u].x - sqrt(((_1987 * _1987) + (_1986 * _1986)) + (_1988 * _1988))) * cbSceneParam._m0[33u].y;
        float _4480 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2128 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2068 + _2051) / _2063, (_2070 + _2055) / _2063), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2070 + _2051) / _2063, (_2055 - _2068) / _2063), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2051 - _2068) / _2063, (_2055 - _2070) / _2063), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2051 - _2070) / _2063, (_2068 + _2055) / _2063), _2073), 0.0)).x), vec4(0.25)));
        _2135 = 1.0 - (_2128 * cbSceneParam._m0[34u].x);
        _2136 = 1.0 - (_2128 * cbSceneParam._m0[34u].y);
        _2137 = 1.0 - (_2128 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2135 = 1.0;
        _2136 = 1.0;
        _2137 = 1.0;
    }
    float _2201;
    float _2203;
    float _2205;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2189 = fma(_1985, cbSceneParam._m0[63u].w, fma(_1981, cbSceneParam._m0[63u].z, fma(_1977, cbSceneParam._m0[63u].y, _1973 * cbSceneParam._m0[63u].x)));
        float _2190 = fma(_1985, cbSceneParam._m0[60u].w, fma(_1981, cbSceneParam._m0[60u].z, fma(_1977, cbSceneParam._m0[60u].y, _1973 * cbSceneParam._m0[60u].x))) / _2189;
        float _2191 = fma(_1985, cbSceneParam._m0[61u].w, fma(_1981, cbSceneParam._m0[61u].z, fma(_1977, cbSceneParam._m0[61u].y, _1973 * cbSceneParam._m0[61u].x))) / _2189;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2190 >= cbSceneParam._m0[64u].x) && (_2191 >= cbSceneParam._m0[64u].y)) && (_2190 <= cbSceneParam._m0[64u].z)) && (_2191 <= cbSceneParam._m0[64u].w))
        {
            float _2329 = fma(_1985, cbSceneParam._m0[62u].w, fma(_1981, cbSceneParam._m0[62u].z, fma(_1977, cbSceneParam._m0[62u].y, _1973 * cbSceneParam._m0[62u].x))) / _2189;
            float _2333 = isnan(cbSceneParam._m0[41u].w) ? _2329 : (isnan(_2329) ? cbSceneParam._m0[41u].w : max(_2329, cbSceneParam._m0[41u].w));
            float _2376 = (cbSceneParam._m0[33u].x - sqrt(((_1987 * _1987) + (_1986 * _1986)) + (_1988 * _1988))) * cbSceneParam._m0[33u].y;
            float _4496 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
            float _2383 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2190, cbSceneParam._m0[33u].w + _2191), _2333), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2190, _2191 - cbSceneParam._m0[33u].z), _2333), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2190 - cbSceneParam._m0[33u].z, _2191 - cbSceneParam._m0[33u].w), _2333), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2190 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2191), _2333), 0.0)).x), vec4(0.25)));
            float _2387 = 1.0 - (_2383 * cbSceneParam._m0[34u].x);
            float _2388 = 1.0 - (_2383 * cbSceneParam._m0[34u].y);
            float _2389 = 1.0 - (_2383 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2389) ? _2137 : (isnan(_2137) ? _2389 : min(_2137, _2389));
            frontier_phi_37_36_ladder_1 = isnan(_2388) ? _2136 : (isnan(_2136) ? _2388 : min(_2136, _2388));
            frontier_phi_37_36_ladder_2 = isnan(_2387) ? _2135 : (isnan(_2135) ? _2387 : min(_2135, _2387));
        }
        else
        {
            frontier_phi_37_36_ladder = _2137;
            frontier_phi_37_36_ladder_1 = _2136;
            frontier_phi_37_36_ladder_2 = _2135;
        }
        _2201 = frontier_phi_37_36_ladder_2;
        _2203 = frontier_phi_37_36_ladder_1;
        _2205 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2201 = _2135;
        _2203 = _2136;
        _2205 = _2137;
    }
    uvec4 _2210 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2212 = _2210.x * 14u;
    uint _2213 = _2212 + 13u;
    float _2220 = _878 + (-1.0);
    float _2225 = (cbLight._m0[_2213].x * _2220) + 1.0;
    float _2226 = (cbLight._m0[_2213].y * _2220) + 1.0;
    float _2227 = (cbLight._m0[_2213].z * _2220) + 1.0;
    float _2228 = (cbLight._m0[_2213].w * _2220) + 1.0;
    uint _2229 = _2212 + 5u;
    float _2235 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2239 = _2212 + 4u;
    float _2248 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
    uint _2252 = _2212 | 1u;
    float _2263 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_700, _701, _702));
    float _2266 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_700, _701, _702));
    float _4532 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _4543 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2271 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * 0.3183098733425140380859375;
    float _2273 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * 0.3183098733425140380859375;
    float _2280 = ((cbLight._m0[_2229].x * _2235) * _2273) + (((cbLight._m0[_2239].x * _2201) * _2248) * _2271);
    float _2281 = ((_2235 * cbLight._m0[_2229].y) * _2273) + (((cbLight._m0[_2239].y * _2203) * _2248) * _2271);
    float _2282 = ((_2235 * cbLight._m0[_2229].z) * _2273) + (((cbLight._m0[_2239].z * _2205) * _2248) * _2271);
    uvec4 _2286 = floatBitsToUint(cbLight._m0[_2212 + 12u]);
    bool _2288 = _2286.x == 0u;
    float _2390;
    float _2392;
    float _2394;
    if (_2288)
    {
        _2390 = _2280;
        _2392 = _2281;
        _2394 = _2282;
    }
    else
    {
        uint _2398 = _2212 + 6u;
        float _2414 = (dot(vec3(cbLight._m0[_2212 + 2u].xyz), vec3(_700, _701, _702)) * 0.5) + 0.5;
        float _2415 = _2414 * _2414;
        float _4554 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2416 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2417 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2390 = (((cbLight._m0[_2398].x * 0.3183098733425140380859375) * _2416) * _2417) + _2280;
        _2392 = (((cbLight._m0[_2398].y * 0.3183098733425140380859375) * _2416) * _2417) + _2281;
        _2394 = (((cbLight._m0[_2398].z * 0.3183098733425140380859375) * _2416) * _2417) + _2282;
    }
    bool _2397 = _2286.y == 0u;
    float _2452;
    float _2454;
    float _2456;
    if (_2397)
    {
        _2452 = _2390;
        _2454 = _2392;
        _2456 = _2394;
    }
    else
    {
        uint _2625 = _2212 + 7u;
        float _2641 = (dot(vec3(cbLight._m0[_2212 + 3u].xyz), vec3(_700, _701, _702)) * 0.5) + 0.5;
        float _2642 = _2641 * _2641;
        float _4570 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2643 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2644 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2452 = (((cbLight._m0[_2625].x * 0.3183098733425140380859375) * _2643) * _2644) + _2390;
        _2454 = (((cbLight._m0[_2625].y * 0.3183098733425140380859375) * _2643) * _2644) + _2392;
        _2456 = (((cbLight._m0[_2625].z * 0.3183098733425140380859375) * _2643) * _2644) + _2394;
    }
    uint _2459 = _2212 + 8u;
    float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _703) * 0.949999988079071044921875);
    float _2473 = _2472 * _2472;
    float _2474 = cbLight._m0[_2212].x + _780;
    float _2475 = cbLight._m0[_2212].y + _781;
    float _2476 = cbLight._m0[_2212].z + _782;
    float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
    float _2481 = _2480 * _2474;
    float _2482 = _2480 * _2475;
    float _2483 = _2480 * _2476;
    float _2484 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2212].xyz));
    float _4586 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _4597 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _2488 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2489 = dot(vec3(_700, _701, _702), vec3(_2481, _2482, _2483));
    float _4608 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2493 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2481, _2482, _2483));
    float _4619 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2497 = _2473 * _2473;
    float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
    float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * 5.0);
    float _2510 = 0.959999978542327880859375 - _859;
    float _2512 = 0.959999978542327880859375 - _860;
    float _2513 = 0.959999978542327880859375 - _861;
    float _2520 = 1.0 - _2473;
    float _2531 = (0.5 / (((_2488 * ((_2487 * _2520) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2520) + _2473) * _2487))) * _2487;
    float _4630 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2533 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
    uint _2547 = _2212 + 9u;
    float _2558 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _703) * 0.949999988079071044921875);
    float _2559 = _2558 * _2558;
    float _2560 = cbLight._m0[_2252].x + _780;
    float _2561 = cbLight._m0[_2252].y + _781;
    float _2562 = cbLight._m0[_2252].z + _782;
    float _2566 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
    float _2567 = _2566 * _2560;
    float _2568 = _2566 * _2561;
    float _2569 = _2566 * _2562;
    float _2570 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2252].xyz));
    float _4641 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2573 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2574 = dot(vec3(_700, _701, _702), vec3(_2567, _2568, _2569));
    float _4652 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2578 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2567, _2568, _2569));
    float _4663 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2582 = _2559 * _2559;
    float _2586 = ((_2577 * _2577) * (_2582 + (-1.0))) + 1.0;
    float _2593 = exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0);
    float _2600 = 1.0 - _2559;
    float _2610 = (0.5 / (((_2488 * ((_2573 * _2600) + _2559)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2600) + _2559) * _2573))) * _2573;
    float _4674 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2612 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2582 / ((_2586 * _2586) * 3.141590118408203125));
    float _2622 = (((((_2593 * _2510) + _862) * cbLight._m0[_2547].x) * _2612) * _2235) + ((((cbLight._m0[_2459].x * _2201) * ((_2509 * _2510) + _862)) * _2533) * _2248);
    float _2623 = (((((_2593 * _2512) + _864) * cbLight._m0[_2547].y) * _2612) * _2235) + ((((cbLight._m0[_2459].y * _2203) * ((_2509 * _2512) + _864)) * _2533) * _2248);
    float _2624 = (((((_2593 * _2513) + _865) * cbLight._m0[_2547].z) * _2612) * _2235) + ((((cbLight._m0[_2459].z * _2205) * ((_2509 * _2513) + _865)) * _2533) * _2248);
    float _2680;
    float _2682;
    float _2684;
    if (_2288)
    {
        _2680 = _2622;
        _2682 = _2623;
        _2684 = _2624;
    }
    else
    {
        uint _2686 = _2212 + 2u;
        uint _2690 = _2212 + 10u;
        float _2704 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2686].w)) * _703) * 0.949999988079071044921875);
        float _2705 = _2704 * _2704;
        float _2706 = cbLight._m0[_2686].x + _780;
        float _2707 = cbLight._m0[_2686].y + _781;
        float _2708 = cbLight._m0[_2686].z + _782;
        float _2712 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
        float _2713 = _2712 * _2706;
        float _2714 = _2712 * _2707;
        float _2715 = _2712 * _2708;
        float _2716 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2686].xyz));
        float _4685 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2719 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2720 = dot(vec3(_700, _701, _702), vec3(_2713, _2714, _2715));
        float _4696 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2723 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2724 = dot(vec3(cbLight._m0[_2686].xyz), vec3(_2713, _2714, _2715));
        float _4707 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2728 = _2705 * _2705;
        float _2732 = ((_2723 * _2723) * (_2728 + (-1.0))) + 1.0;
        float _2739 = exp2(log2(1.0 - (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) * 5.0);
        float _2746 = 1.0 - _2705;
        float _2756 = (0.5 / (((_2488 * ((_2719 * _2746) + _2705)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2746) + _2705) * _2719))) * _2719;
        float _4718 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2758 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2728 / ((_2732 * _2732) * 3.141590118408203125));
        float _2759 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2680 = (((((_2739 * _2510) + _862) * cbLight._m0[_2690].x) * _2758) * _2759) + _2622;
        _2682 = (((((_2739 * _2512) + _864) * cbLight._m0[_2690].y) * _2758) * _2759) + _2623;
        _2684 = (((((_2739 * _2513) + _865) * cbLight._m0[_2690].z) * _2758) * _2759) + _2624;
    }
    float _2790;
    float _2792;
    float _2794;
    if (_2397)
    {
        _2790 = _2680;
        _2792 = _2682;
        _2794 = _2684;
    }
    else
    {
        uint _2801 = _2212 + 3u;
        uint _2805 = _2212 + 11u;
        float _2819 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2801].w)) * _703) * 0.949999988079071044921875);
        float _2820 = _2819 * _2819;
        float _2821 = cbLight._m0[_2801].x + _780;
        float _2822 = cbLight._m0[_2801].y + _781;
        float _2823 = cbLight._m0[_2801].z + _782;
        float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
        float _2828 = _2827 * _2821;
        float _2829 = _2827 * _2822;
        float _2830 = _2827 * _2823;
        float _2831 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2801].xyz));
        float _4734 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2834 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2835 = dot(vec3(_700, _701, _702), vec3(_2828, _2829, _2830));
        float _4745 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2838 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2839 = dot(vec3(cbLight._m0[_2801].xyz), vec3(_2828, _2829, _2830));
        float _4756 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2843 = _2820 * _2820;
        float _2847 = ((_2838 * _2838) * (_2843 + (-1.0))) + 1.0;
        float _2854 = exp2(log2(1.0 - (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) * 5.0);
        float _2861 = 1.0 - _2820;
        float _2871 = (0.5 / (((_2488 * ((_2834 * _2861) + _2820)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2861) + _2820) * _2834))) * _2834;
        float _4767 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2873 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2843 / ((_2847 * _2847) * 3.141590118408203125));
        float _2874 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2790 = (((((_2854 * _2510) + _862) * cbLight._m0[_2805].x) * _2873) * _2874) + _2680;
        _2792 = (((((_2854 * _2512) + _864) * cbLight._m0[_2805].y) * _2873) * _2874) + _2682;
        _2794 = (((((_2854 * _2513) + _865) * cbLight._m0[_2805].z) * _2873) * _2874) + _2684;
    }
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    float _2950;
    if (_2210.y == 0u)
    {
        uvec4 _2895 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2896 = _2895.x;
        uint _2907 = uint((float(_2895.y) * floor(float(uint(cbSceneParam._m0[85u].y * _801) / _2896))) + floor(float(uint(cbSceneParam._m0[85u].x * _800) / _2896)));
        float _2917 = (log2(_1988 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2918 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        uint _2921 = uint(isnan(14.0) ? _2918 : (isnan(_2918) ? 14.0 : min(_2918, 14.0)));
        uvec4 _2926 = texelFetch(g_lightClusterGridBuffer, int(((_2921 << 2u) + (_2907 << 6u)) >> 2u));
        uint _2927 = _2926.x;
        uint _2928 = _2895.z;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        if (((((1u << ((_2928 >> 4u) & 15u)) + 4294967295u) & _2927) == 0u) || ((_2928 & 240u) == 0u))
        {
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
            _3017 = 0.0;
        }
        else
        {
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3016;
            float _3018;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            uint _3166 = 0u;
            uint _3175;
            bool _3176;
            for (;;)
            {
                _3175 = texelFetch(g_lightClassification, int((((_2921 << 5u) + (_2907 << 9u)) + (_3166 << 2u)) >> 2u)).x;
                _3176 = _3175 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3176)
                {
                    frontier_phi_71_pred = _3165;
                    frontier_phi_71_pred_1 = _3164;
                    frontier_phi_71_pred_2 = _3163;
                    frontier_phi_71_pred_3 = _3162;
                    frontier_phi_71_pred_4 = _3161;
                    frontier_phi_71_pred_5 = _3160;
                }
                else
                {
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    uint _3311;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3163;
                    _3309 = _3164;
                    _3310 = _3165;
                    _3311 = _3175;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    for (;;)
                    {
                        uint _3315 = uint(findLSB(_3311)) + (_3166 << 5u);
                        uint _3312 = (_3311 + 4294967295u) & _3311;
                        uint _3317 = _3315 * 48u;
                        vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3317)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 3u)).x));
                        uint _3337 = (_3315 * 48u) + 4u;
                        vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3337)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 3u)).x));
                        uint _3356 = (_3315 * 48u) + 8u;
                        vec3 _3367 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3356)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 2u)).x));
                        float _3371 = _3331.x - _1986;
                        float _3372 = _3331.y - _1987;
                        float _3373 = _3331.z - _1988;
                        float _3374 = dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373));
                        float _3377 = inversesqrt(_3374);
                        float _3378 = _3377 * _3371;
                        float _3379 = _3377 * _3372;
                        float _3380 = _3377 * _3373;
                        float _3381 = dot(vec3(_819, _822, _825), vec3(_3378, _3379, _3380));
                        float _3386 = 1.0 - (_3374 * _3331.w);
                        float _4793 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3387 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3388 = sqrt(_3374) * _3350.w;
                        float _3391 = 1.39999997615814208984375 / (_3388 + 1.39999997615814208984375);
                        float _3392 = _3391 * _3391;
                        float _3395 = ((1.0 - _3392) * _3381) + _3392;
                        float _3398 = _3388 * _3388;
                        float _3402 = ((isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0))) * _3387) / ((_3398 * 0.699999988079071044921875) + 1.0);
                        float _3406 = (-0.0) - _1986;
                        float _3407 = (-0.0) - _1987;
                        float _3408 = (-0.0) - _1988;
                        float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                        float _3413 = _3412 * _3406;
                        float _3414 = _3412 * _3407;
                        float _3415 = _3412 * _3408;
                        float _3422 = exp2(log2(1.0 / ((_3398 * 3.5) + 5.0)) * 0.25);
                        float _3423 = 1.0 - _894;
                        float _3430 = sqrt(1.0 - ((1.0 - (_3423 * _3423)) * (1.0 - (_3422 * _3422))));
                        float _3431 = _3430 * _3430;
                        float _3432 = _3431 * _3431;
                        float _3433 = _3413 + _3378;
                        float _3434 = _3414 + _3379;
                        float _3435 = _3415 + _3380;
                        float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                        float _3443 = dot(vec3(_819, _822, _825), vec3(_3413, _3414, _3415));
                        float _4809 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3446 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3447 = dot(vec3(_819, _822, _825), vec3(_3439 * _3433, _3439 * _3434, _3439 * _3435));
                        float _4820 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3450 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3454 = ((_3450 * _3450) * (_3432 + (-1.0))) + 1.0;
                        float _3455 = _3391 * _3431;
                        float _3456 = _3455 * _3455;
                        float _3459 = ((1.0 - _3456) * _3381) + _3456;
                        float _4831 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3460 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                        float _3461 = 1.0 - _3431;
                        float _3471 = (0.5 / (((_3460 * ((_3446 * _3461) + _3431)) + 9.9999999392252902907785028219223e-09) + (((_3460 * _3461) + _3431) * _3446))) * _3460;
                        float _4842 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3482 = (((_3432 * 3.1415927410125732421875) * (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) / ((_3454 * _3454) * ((_3398 * 2.1991131305694580078125) + 3.141590118408203125))) * _3387;
                        _3235 = (_3402 * _3350.x) + _3308;
                        _3236 = (_3402 * _3350.y) + _3309;
                        _3237 = (_3402 * _3350.z) + _3310;
                        _3232 = (_3482 * _3367.x) + _3305;
                        _3233 = (_3482 * _3367.y) + _3306;
                        _3234 = (_3482 * _3367.z) + _3307;
                        if (_3312 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3235;
                            _3309 = _3236;
                            _3310 = _3237;
                            _3311 = _3312;
                        }
                    }
                    frontier_phi_71_pred = _3237;
                    frontier_phi_71_pred_1 = _3236;
                    frontier_phi_71_pred_2 = _3235;
                    frontier_phi_71_pred_3 = _3234;
                    frontier_phi_71_pred_4 = _3233;
                    frontier_phi_71_pred_5 = _3232;
                }
                _3018 = frontier_phi_71_pred;
                _3016 = frontier_phi_71_pred_1;
                _3014 = frontier_phi_71_pred_2;
                _3012 = frontier_phi_71_pred_3;
                _3010 = frontier_phi_71_pred_4;
                _3008 = frontier_phi_71_pred_5;
                uint _3167 = _3166 + 1u;
                if (_3167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3160 = _3008;
                    _3161 = _3010;
                    _3162 = _3012;
                    _3163 = _3014;
                    _3164 = _3016;
                    _3165 = _3018;
                    _3166 = _3167;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
            _3017 = _3018;
        }
        uvec4 _3021 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3022 = _3021.z;
        uint _3024 = (_3022 >> 8u) & 15u;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        if (((4294967295u << _3024) & _2927) == 0u)
        {
            _3128 = _3007;
            _3130 = _3009;
            _3132 = _3011;
            _3134 = _3013;
            _3136 = _3015;
            _3138 = _3017;
        }
        else
        {
            float _3153 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
            float _3154 = _3153 * _1986;
            float _3155 = _3153 * _1987;
            float _3156 = _3153 * _1988;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3024 < ((_3022 >> 12u) & 15u))
            {
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3288 = _3007;
                float _3289 = _3009;
                float _3290 = _3011;
                float _3291 = _3013;
                float _3292 = _3015;
                float _3293 = _3017;
                uint _3294 = _3024;
                uint _3303;
                bool _3304;
                for (;;)
                {
                    _3303 = texelFetch(g_lightClassification, int((((_2921 << 5u) + (_2907 << 9u)) + (_3294 << 2u)) >> 2u)).x;
                    _3304 = _3303 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3304)
                    {
                        frontier_phi_82_pred = _3293;
                        frontier_phi_82_pred_1 = _3292;
                        frontier_phi_82_pred_2 = _3291;
                        frontier_phi_82_pred_3 = _3290;
                        frontier_phi_82_pred_4 = _3289;
                        frontier_phi_82_pred_5 = _3288;
                    }
                    else
                    {
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3509 = _3288;
                        float _3510 = _3289;
                        float _3511 = _3290;
                        float _3512 = _3291;
                        float _3513 = _3292;
                        float _3514 = _3293;
                        uint _3515 = _3303;
                        uint _3516;
                        vec4 _3541;
                        float _3542;
                        vec4 _3557;
                        vec3 _3569;
                        vec4 _3584;
                        vec4 _3599;
                        float _3645;
                        bool _3646;
                        for (;;)
                        {
                            uint _3526 = ((_3294 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3515));
                            _3516 = (_3515 + 4294967295u) & _3515;
                            uint _3528 = _3526 * 40u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            _3542 = _3541.w;
                            uint _3544 = (_3526 * 40u) + 4u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3526 * 40u) + 8u;
                            _3569 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x));
                            uint _3571 = (_3526 * 40u) + 16u;
                            _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            uint _3586 = (_3526 * 40u) + 20u;
                            _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            uint _3601 = (_3526 * 40u) + 24u;
                            vec4 _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3620 = (_3526 * 40u) + 28u;
                            vec4 _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            _3645 = fma(_1988, _3633.z, fma(_1987, _3633.y, _3633.x * _1986)) + _3633.w;
                            _3646 = !((fma(_1988, _3614.z, fma(_1987, _3614.y, _3614.x * _1986)) + _3614.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3646)
                            {
                                float _3673 = _3541.x - _1986;
                                float _3674 = _3541.y - _1987;
                                float _3675 = _3541.z - _1988;
                                float _3676 = dot(vec3(_3673, _3674, _3675), vec3(_3673, _3674, _3675));
                                float _3679 = inversesqrt(_3676);
                                float _3680 = _3679 * _3673;
                                float _3681 = _3679 * _3674;
                                float _3682 = _3679 * _3675;
                                float _3686 = 1.0 - (_3676 / (_3542 * _3542));
                                float _4853 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3691 = sqrt(_3676) * _3557.w;
                                float _3693 = 1.39999997615814208984375 / (_3691 + 1.39999997615814208984375);
                                float _3694 = _3693 * _3693;
                                float _3697 = ((1.0 - _3694) * dot(vec3(_3680, _3681, _3682), vec3(_819, _822, _825))) + _3694;
                                float _3700 = _3691 * _3691;
                                float _3704 = (fma(_1988, _3584.z, fma(_1987, _3584.y, _3584.x * _1986)) + _3584.w) / _3645;
                                float _3705 = (fma(_1988, _3599.z, fma(_1987, _3599.y, _3599.x * _1986)) + _3599.w) / _3645;
                                float _3709 = 1.0 - dot(vec2(_3704, _3705), vec2(_3704, _3705));
                                float _4869 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3710 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3711 = _3710 * (((isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0))) * _3687) / ((_3700 * 0.699999988079071044921875) + 1.0));
                                float _3723 = exp2(log2(1.0 / ((_3700 * 3.5) + 5.0)) * 0.25);
                                float _3724 = 1.0 - _894;
                                float _3731 = sqrt(1.0 - ((1.0 - (_3724 * _3724)) * (1.0 - (_3723 * _3723))));
                                float _3732 = _3731 * _3731;
                                float _3733 = _3732 * _3732;
                                float _3734 = _3680 - _3154;
                                float _3735 = _3681 - _3155;
                                float _3736 = _3682 - _3156;
                                float _3740 = inversesqrt(dot(vec3(_3734, _3735, _3736), vec3(_3734, _3735, _3736)));
                                float _3744 = dot(vec3(_819, _822, _825), vec3((-0.0) - _3154, (-0.0) - _3155, (-0.0) - _3156));
                                float _4880 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3747 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3748 = dot(vec3(_819, _822, _825), vec3(_3740 * _3734, _3740 * _3735, _3740 * _3736));
                                float _4891 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3751 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3755 = ((_3751 * _3751) * (_3733 + (-1.0))) + 1.0;
                                float _3756 = _3693 * _3732;
                                float _3757 = _3756 * _3756;
                                float _3763 = ((1.0 - _3757) * dot(vec3(_819, _822, _825), vec3(_3680, _3681, _3682))) + _3757;
                                float _4902 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3765 = 1.0 - _3732;
                                float _3775 = (0.5 / (((_3764 * ((_3747 * _3765) + _3732)) + 9.9999999392252902907785028219223e-09) + (((_3764 * _3765) + _3732) * _3747))) * _3764;
                                float _4913 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3785 = (_3710 * _3687) * (((_3733 * 3.1415927410125732421875) * (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0)))) / ((_3755 * _3755) * ((_3700 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3711 * _3557.z;
                                frontier_phi_88_pred_1 = _3711 * _3557.y;
                                frontier_phi_88_pred_2 = _3711 * _3557.x;
                                frontier_phi_88_pred_3 = _3785 * _3569.z;
                                frontier_phi_88_pred_4 = _3785 * _3569.y;
                                frontier_phi_88_pred_5 = _3785 * _3569.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3794 = frontier_phi_88_pred;
                            _3793 = frontier_phi_88_pred_1;
                            _3792 = frontier_phi_88_pred_2;
                            _3791 = frontier_phi_88_pred_3;
                            _3790 = frontier_phi_88_pred_4;
                            _3789 = frontier_phi_88_pred_5;
                            _3499 = _3792 + _3512;
                            _3500 = _3793 + _3513;
                            _3501 = _3794 + _3514;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            if (_3516 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3516;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3501;
                        frontier_phi_82_pred_1 = _3500;
                        frontier_phi_82_pred_2 = _3499;
                        frontier_phi_82_pred_3 = _3498;
                        frontier_phi_82_pred_4 = _3497;
                        frontier_phi_82_pred_5 = _3496;
                    }
                    _3139 = frontier_phi_82_pred;
                    _3137 = frontier_phi_82_pred_1;
                    _3135 = frontier_phi_82_pred_2;
                    _3133 = frontier_phi_82_pred_3;
                    _3131 = frontier_phi_82_pred_4;
                    _3129 = frontier_phi_82_pred_5;
                    uint _3295 = _3294 + 1u;
                    if (_3295 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3288 = _3129;
                        _3289 = _3131;
                        _3290 = _3133;
                        _3291 = _3135;
                        _3292 = _3137;
                        _3293 = _3139;
                        _3294 = _3295;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3135;
                frontier_phi_63_64_ladder_1 = _3139;
                frontier_phi_63_64_ladder_2 = _3137;
                frontier_phi_63_64_ladder_3 = _3133;
                frontier_phi_63_64_ladder_4 = _3131;
                frontier_phi_63_64_ladder_5 = _3129;
            }
            else
            {
                frontier_phi_63_64_ladder = _3013;
                frontier_phi_63_64_ladder_1 = _3017;
                frontier_phi_63_64_ladder_2 = _3015;
                frontier_phi_63_64_ladder_3 = _3011;
                frontier_phi_63_64_ladder_4 = _3009;
                frontier_phi_63_64_ladder_5 = _3007;
            }
            _3128 = frontier_phi_63_64_ladder_5;
            _3130 = frontier_phi_63_64_ladder_4;
            _3132 = frontier_phi_63_64_ladder_3;
            _3134 = frontier_phi_63_64_ladder;
            _3136 = frontier_phi_63_64_ladder_2;
            _3138 = frontier_phi_63_64_ladder_1;
        }
        float _3143 = isnan(1.0) ? _878 : (isnan(_878) ? 1.0 : min(_878, 1.0));
        _2940 = (_3143 * _3134) + _2452;
        _2942 = (_3143 * _3136) + _2454;
        _2944 = (_3143 * _3138) + _2456;
        _2946 = ((_3128 * _862) * _3143) + _2790;
        _2948 = ((_3130 * _864) * _3143) + _2792;
        _2950 = ((_3132 * _865) * _3143) + _2794;
    }
    else
    {
        _2940 = _2452;
        _2942 = _2454;
        _2944 = _2456;
        _2946 = _2790;
        _2948 = _2792;
        _2950 = _2794;
    }
    float _4929 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4940 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4951 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _2967 = ((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2940 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _878))) + ((_2946 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2968 = ((isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_2942 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _878))) + ((_2948 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2969 = ((isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0))) * (_2944 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _878))) + ((_2950 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    uint _2970 = _250 + 6u;
    float _2978 = _800 / cbSceneParam._m0[86u].x;
    float _2979 = _801 / cbSceneParam._m0[86u].y;
    vec4 _2993 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2978, _2979, (log2((isnan(cbSceneParam._m0[77u].w) ? _722 : (isnan(_722) ? cbSceneParam._m0[77u].w : min(_722, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2995 = _2993.x;
    float _2996 = _2993.y;
    float _2997 = _2993.z;
    float _2998 = _2993.w;
    float _3070;
    float _3072;
    float _3074;
    float _3076;
    if (_722 > cbSceneParam._m0[78u].w)
    {
        float _3032 = isnan(_722) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _722 : min(cbSceneParam._m0[80u].w, _722));
        float _3033 = _3032 / _722;
        float _3044 = _3033 * _773;
        float _3045 = _774 * _3033;
        float _3046 = (-0.0) - _3045;
        float _3048 = _3033 * _775;
        float _3050 = (cbSceneParam._m0[77u].w * _3046) / _3032;
        float _3051 = _3050 + cbSceneParam._m0[79u].w;
        float _3052 = cbSceneParam._m0[79u].w - _3045;
        float _3058 = sqrt(((_3044 * _3044) + (_3045 * _3045)) + (_3048 * _3048));
        float _3061 = (1.0 - (cbSceneParam._m0[77u].w / _3032)) * _3058;
        float _3066 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3068 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3245;
        if (abs((_3046 - _3050) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3245 = ((((_3051 > 0.0) ? exp2(_3066 * _3051) : (2.0 - exp2(_3068 * _3051))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3061;
        }
        else
        {
            float _3189 = 1.0 / cbSceneParam._m0[80u].x;
            float _3190 = isnan(_3052) ? _3051 : (isnan(_3051) ? _3052 : max(_3051, _3052));
            float _3191 = isnan(_3052) ? _3051 : (isnan(_3051) ? _3052 : min(_3051, _3052));
            float _3200 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : min(_3190, 0.0));
            float _3201 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : min(_3191, 0.0));
            _3245 = ((abs(_3058 / _3046) * cbSceneParam._m0[80u].y) * ((((_3200 - _3201) * 2.0) - ((exp2(_3066 * (isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0)))) - exp2(_3066 * (isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))))) * _3189)) - ((exp2(_3068 * _3200) - exp2(_3068 * _3201)) * _3189))) + (_3061 * cbSceneParam._m0[80u].z);
        }
        vec4 _3247 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2978, _2979, 1.0), 0.0);
        float _3256 = exp2((_3245 * (-1.44269502162933349609375)) * (1.0 - _3247.w));
        float _3257 = log2(_3256);
        float _3273 = log2(_2998);
        _3070 = (exp2(_3273 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].x)) * _3247.x) / cbSceneParam._m0[78u].x)) + _2995;
        _3072 = (exp2(_3273 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].y)) * _3247.y) / cbSceneParam._m0[78u].y)) + _2996;
        _3074 = (exp2(_3273 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].z)) * _3247.z) / cbSceneParam._m0[78u].z)) + _2997;
        _3076 = _3256 * _2998;
    }
    else
    {
        _3070 = _2995;
        _3072 = _2996;
        _3074 = _2997;
        _3076 = _2998;
    }
    bool _3283;
    vec4 _3086;
    vec4 _3108;
    float _3110;
    float _3114;
    float _3115;
    float _3116;
    float _3117;
    bool _3127;
    for (;;)
    {
        _3086 = cbMatDynParam._m0[0u];
        float _3088 = roundEven(_3086.y);
        bool _3089 = _3088 == 3.0;
        float _3090 = log2(_3076);
        float _3097 = exp2(_3090 * cbSceneParam._m0[78u].x) * _2967;
        float _3098 = exp2(_3090 * cbSceneParam._m0[78u].y) * _2968;
        float _3099 = exp2(_3090 * cbSceneParam._m0[78u].z) * _2969;
        float _3106 = _789 + (-0.5);
        _3108 = cbMtdParam._m0[1u];
        _3110 = _3108.y * _3106;
        float _3113 = (_3088 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3114 = _3113 * (_3089 ? _3097 : (_3097 + (cbSceneParam._m0[72u].w * _3070)));
        _3115 = _3113 * (_3089 ? _3098 : (_3098 + (cbSceneParam._m0[72u].w * _3072)));
        _3116 = _3113 * (_3089 ? _3099 : (_3099 + (cbSceneParam._m0[72u].w * _3074)));
        _3117 = _3106 * 0.999000012874603271484375;
        _3127 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3127)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _3117) < 0.5)
            {
                _3283 = true;
                break;
            }
        }
        uint _3224 = _838 + uint(_3086.w);
        if ((cbInstanceData._m0[_3224].w < 1.0) && ((cbInstanceData._m0[_3224].w + _3117) < 0.5))
        {
            _3283 = true;
            break;
        }
        if ((_3110 + 1.0) < _3108.x)
        {
            _3283 = true;
            break;
        }
        _3283 = false;
        break;
    }
    float _3487;
    if (_3283)
    {
        discard_state = true;
        _3487 = 0.0;
    }
    else
    {
        _3487 = cbInstanceData._m0[_2970].w;
    }
    SV_Target.x = _3114;
    SV_Target.y = _3115;
    SV_Target.z = _3116;
    SV_Target.w = _3487;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2970].w;
    discard_exit();
}


