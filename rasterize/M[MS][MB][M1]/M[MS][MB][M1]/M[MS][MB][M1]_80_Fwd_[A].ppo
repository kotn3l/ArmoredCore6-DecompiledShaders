#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1396;
float _3777;
float _3778;
float _3779;
float _3780;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3789 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3800 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3811 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].y) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3822 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _437 = (_430 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _438 = (_430 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _439 = (_430 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) + _449;
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _517 = _513.z;
    float _526 = ((_496.z - _517) * _430) + _517;
    float _529 = ((((_496.x - _515) * _430) + _515) * 2.0) + (-1.0);
    float _530 = ((((_496.y - _516) * _430) + _516) * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _3833 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _536 = sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))));
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _570 = (_529 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_471.x * 2.0) + (-1.0)))) + (((_558.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _571 = (_530 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_471.y * 2.0) + (-1.0)))) + (((_558.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _583 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _585 = _583.x;
    float _586 = 1.0 - _585;
    float _612 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_585 - _586) * cbMtdParam._m0[24u].w) + _586) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3844 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _621 = ((((cbMtdParam._m0[10u].x - _456) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _613) + _456;
    float _622 = ((((cbMtdParam._m0[10u].y - _457) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _613) + _457;
    float _623 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _458)) * _613) + _458;
    vec4 _635 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _649 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _651 = _649.x;
    float _669 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _298) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _299) + cbTextureTilingScale._m0[9u].w)).x - _651) * _430) + _651;
    float _673 = ((_635.x - _669) * cbMtdParam._m0[19u].z) + _669;
    float _675 = _673 - (_673 * _613);
    float _680 = (((_471.z - _526) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _526;
    float _684 = ((_558.z - _680) * cbMtdParam._m0[19u].w) + _680;
    float _688 = ((cbMtdParam._m0[23u].y - _684) * _613) + _684;
    vec4 _707 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _709 = _707.x;
    float _710 = _707.y;
    float _714 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_248, _249, _250, 0.0));
    vec4 _729 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _298) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _299) + cbTextureTilingScale._m0[18u].w));
    float _731 = _729.x;
    float _736 = fract(_729.w + cbPerFrame._m0[22u].x);
    float _738 = (1.0 - _736) * _731;
    float _743 = ((_736 + (-1.0)) + _731) * 9.0;
    float _745 = ((_731 + (-1.0)) + _736) * 9.0;
    float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _747 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _761 = (_738 * ((_729.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _746 : (isnan(_746) ? 3.0 : min(_746, 3.0))) * 3.1415927410125732421875);
    float _763 = (_738 * ((_729.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _747 : (isnan(_747) ? 3.0 : min(_747, 3.0))) * 3.1415927410125732421875);
    float _767 = inversesqrt(dot(vec3(_761, _763, 1.0), vec3(_761, _763, 1.0)));
    float _783 = (((((0.5 - _709) + ((_761 * 0.5) * _767)) * _714) + _709) * 2.0) + (-1.0);
    float _784 = (((((0.5 - _710) + ((_767 * 0.5) * _763)) * _714) + _710) * 2.0) + (-1.0);
    float _785 = dot(vec2(_783, _784), vec2(_783, _784));
    float _3875 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _801 = ((((cbMtdParam._m0[22u].z * _570) - _570) + _783) * _613) + _570;
    float _802 = ((((cbMtdParam._m0[22u].z * _571) - _571) + _784) * _613) + _571;
    float _803 = (_613 * (sqrt(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) - _536)) + _536;
    float _805 = cbMtdParam._m0[22u].x + _558.w;
    float _808 = fma(_803, _248, fma(_802, _254 * TANGENT.x, (_240 * _232) * _801));
    float _811 = fma(_803, _249, fma(_802, _254 * TANGENT.y, (_240 * _233) * _801));
    float _814 = fma(_803, _250, fma(_802, _254 * TANGENT.z, (_240 * _234) * _801));
    float _818 = inversesqrt(dot(vec3(_808, _811, _814), vec3(_808, _811, _814)));
    float _819 = _818 * _808;
    float _820 = _818 * _811;
    float _821 = _818 * _814;
    float _3886 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _822 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _3908 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3919 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3930 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3941 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _827 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _841 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _891 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _881);
    float _892 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _881);
    float _893 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _881);
    float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
    float _898 = _891 * _897;
    float _899 = _892 * _897;
    float _900 = _893 * _897;
    vec4 _905 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _907 = _905.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1078 = sqrt(((_891 * _891) + (_892 * _892)) + (_893 * _893));
        float _1084 = (cbMatDynParam._m0[5u].x * _1078) + cbMatDynParam._m0[5u].y;
        float _3952 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1089 = (cbMatDynParam._m0[5u].z * _1078) + cbMatDynParam._m0[5u].w;
        float _3963 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) - _1085)) + _1085) < ((_907 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _918 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _919 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _937 = fma(_821, cbSceneParam._m0[5u].z, fma(_820, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _819));
    float _940 = fma(_821, cbSceneParam._m0[6u].z, fma(_820, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _819));
    float _943 = fma(_821, cbSceneParam._m0[7u].z, fma(_820, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _819));
    uint _956 = _279 + 9u;
    uint _957 = _956 + uint(cbMatDynParam._m0[0u].w);
    float _963 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * cbInstanceData._m0[_957].x;
    float _964 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * cbInstanceData._m0[_957].y;
    float _965 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * cbInstanceData._m0[_957].z;
    float _3974 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _969 = 1.0 - _827;
    float _970 = _966 * _969;
    float _971 = _967 * _969;
    float _972 = _968 * _969;
    float _977 = (_966 + (-0.039999999105930328369140625)) * _827;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _827;
    float _979 = (_968 + (-0.039999999105930328369140625)) * _827;
    float _980 = _977 + 0.039999999105930328369140625;
    float _982 = _978 + 0.039999999105930328369140625;
    float _983 = _979 + 0.039999999105930328369140625;
    vec4 _992 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _918, cbSceneParam._m0[86u].y * _919));
    float _996 = ((isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * TEXCOORD_5.w) * _992.x;
    float _997 = dot(vec3(_819, _820, _821), vec3(_898, _899, _900));
    float _1000 = _997 * 2.0;
    float _1004 = (_1000 * _819) - _898;
    float _1005 = (_1000 * _820) - _899;
    float _1006 = (_1000 * _821) - _900;
    float _1010 = abs(dot(vec3(_898, _899, _900), vec3(_819, _820, _821)));
    float _4007 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1012 = sqrt(_822);
    float _1024 = exp2((_1012 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1012 * 3.0));
    float _1030 = (1.0 - _1024) * ((_1012 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1031 = _1024 * _1012;
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1395;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1121 = fma(_1067, cbModelParam._m0[26u].z, fma(_1063, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059));
        float _1125 = fma(_1067, cbModelParam._m0[27u].z, fma(_1063, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059));
        float _1129 = fma(_1067, cbModelParam._m0[28u].z, fma(_1063, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059));
        float _1153 = _1059 + _819;
        float _1154 = _1063 + _820;
        float _1155 = _1067 + _821;
        float _1165 = fma(_1155, cbModelParam._m0[26u].z, fma(_1154, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1153)) - _1121;
        float _1166 = fma(_1155, cbModelParam._m0[27u].z, fma(_1154, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1153)) - _1125;
        float _1167 = fma(_1155, cbModelParam._m0[28u].z, fma(_1154, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1153)) - _1129;
        float _1171 = inversesqrt(dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167)));
        float _1184 = ((_1171 * _1165) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1121 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1171 * _1166) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1125 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1171 * _1167) / cbModelParam._m0[34u].z) + ((((((_1129 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        float _1223 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1189.x + (-0.5));
        float _1225 = _1223 * (_1189.y + (-0.5));
        float _1226 = _1223 * (_1189.z + (-0.5));
        float _1233 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1196.x + (-0.5));
        float _1235 = _1233 * (_1196.y + (-0.5));
        float _1236 = _1233 * (_1196.z + (-0.5));
        float _1243 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1203.x + (-0.5));
        float _1245 = _1243 * (_1203.y + (-0.5));
        float _1246 = _1243 * (_1203.z + (-0.5));
        float _1253 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1210.x + (-0.5));
        float _1255 = _1253 * (_1210.y + (-0.5));
        float _1256 = _1253 * (_1210.z + (-0.5));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = _1224 * 0.5;
        float _1261 = _1234 * 0.5;
        float _1262 = _1244 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1277 = (dot(vec3(_819, _820, _821), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1287 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _4055 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1289 + 1.0))) + _1294) * _1257;
        float _1304 = _1225 * 0.5;
        float _1305 = _1235 * 0.5;
        float _1306 = _1245 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_819, _820, _821), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4088 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1331 + 1.0))) + _1336) * _1258;
        float _1346 = _1226 * 0.5;
        float _1347 = _1236 * 0.5;
        float _1348 = _1246 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_819, _820, _821), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4121 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1373 + 1.0))) + _1378) * _1259;
        _1395 = _1226;
        _1397 = _1225;
        _1398 = _1224;
        _1399 = _1236;
        _1400 = _1235;
        _1401 = _1234;
        _1402 = _1246;
        _1403 = _1245;
        _1404 = _1244;
        _1405 = _1259;
        _1406 = _1258;
        _1407 = _1257;
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
    }
    else
    {
        _1395 = _1396;
        _1397 = _1396;
        _1398 = _1396;
        _1399 = _1396;
        _1400 = _1396;
        _1401 = _1396;
        _1402 = _1396;
        _1403 = _1396;
        _1404 = _1396;
        _1405 = _1396;
        _1406 = _1396;
        _1407 = _1396;
        _1408 = 0.0;
        _1409 = 0.0;
        _1410 = 0.0;
    }
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1438 = fma(_1067, cbModelParam._m0[30u].z, fma(_1063, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1059));
        float _1442 = fma(_1067, cbModelParam._m0[31u].z, fma(_1063, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1059));
        float _1446 = fma(_1067, cbModelParam._m0[32u].z, fma(_1063, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1059));
        float _1469 = _1059 + _819;
        float _1470 = _1063 + _820;
        float _1471 = _1067 + _821;
        float _1481 = fma(_1471, cbModelParam._m0[30u].z, fma(_1470, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1469)) - _1438;
        float _1482 = fma(_1471, cbModelParam._m0[31u].z, fma(_1470, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1469)) - _1442;
        float _1483 = fma(_1471, cbModelParam._m0[32u].z, fma(_1470, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1469)) - _1446;
        float _1487 = inversesqrt(dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483)));
        float _1500 = ((_1487 * _1481) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1438 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1501 = ((_1487 * _1482) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1442 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1502 = ((_1487 * _1483) / cbModelParam._m0[35u].z) + ((((((_1446 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        float _1537 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1504.x + (-0.5));
        float _1539 = _1537 * (_1504.y + (-0.5));
        float _1540 = _1537 * (_1504.z + (-0.5));
        float _1547 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1511.x + (-0.5));
        float _1549 = _1547 * (_1511.y + (-0.5));
        float _1550 = _1547 * (_1511.z + (-0.5));
        float _1557 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1518.x + (-0.5));
        float _1559 = _1557 * (_1518.y + (-0.5));
        float _1560 = _1557 * (_1518.z + (-0.5));
        float _1567 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1525.x + (-0.5));
        float _1569 = _1567 * (_1525.y + (-0.5));
        float _1570 = _1567 * (_1525.z + (-0.5));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = _1538 * 0.5;
        float _1575 = _1548 * 0.5;
        float _1576 = _1558 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_819, _820, _821), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4184 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1601 + 1.0))) + _1606) * _1571;
        float _1616 = _1539 * 0.5;
        float _1617 = _1549 * 0.5;
        float _1618 = _1559 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_819, _820, _821), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4217 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1643 + 1.0))) + _1648) * _1572;
        float _1658 = _1540 * 0.5;
        float _1659 = _1550 * 0.5;
        float _1660 = _1560 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_819, _820, _821), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4250 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1685 + 1.0))) + _1690) * _1573;
        _1707 = _1540;
        _1708 = _1539;
        _1709 = _1538;
        _1710 = _1550;
        _1711 = _1549;
        _1712 = _1548;
        _1713 = _1560;
        _1714 = _1559;
        _1715 = _1558;
        _1716 = _1573;
        _1717 = _1572;
        _1718 = _1571;
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
    }
    else
    {
        _1707 = _1396;
        _1708 = _1396;
        _1709 = _1396;
        _1710 = _1396;
        _1711 = _1396;
        _1712 = _1396;
        _1713 = _1396;
        _1714 = _1396;
        _1715 = _1396;
        _1716 = _1396;
        _1717 = _1396;
        _1718 = _1396;
        _1719 = 0.0;
        _1720 = 0.0;
        _1721 = 0.0;
    }
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1408)) + _1408;
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1409)) + _1409;
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1410)) + _1410;
    float _1754 = fma(_1733, cbSceneParam._m0[89u].z, fma(_1732, cbSceneParam._m0[89u].y, _1731 * cbSceneParam._m0[89u].x));
    float _1757 = fma(_1733, cbSceneParam._m0[90u].z, fma(_1732, cbSceneParam._m0[90u].y, _1731 * cbSceneParam._m0[90u].x));
    float _1760 = fma(_1733, cbSceneParam._m0[91u].z, fma(_1732, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1731));
    float _1775 = _1004 * 0.5;
    float _1776 = _1005 * 0.5;
    float _1777 = _1006 * 0.5;
    float _1778 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1781 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1784 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1818;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1791 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1395, _1399, _1402, _1405));
        float _1795 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1397, _1400, _1403, _1406));
        float _1799 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1398, _1401, _1404, _1407));
        float _1806 = dot(vec4(cbModelParam._m0[39u]), vec4(_1775, _1776, _1777, 1.0));
        _1818 = dot(vec3(isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1806) ? 0.0 : (isnan(0.0) ? _1806 : max(0.0, _1806))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1818 = 1.0;
    }
    float _1829;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1820 = dot(vec4(cbModelParam._m0[40u]), vec4(_1775, _1776, _1777, 1.0));
        _1829 = dot(vec3(isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1820) ? 0.0 : (isnan(0.0) ? _1820 : max(0.0, _1820))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1829 = 1.0;
    }
    float _1833 = (_1829 * cbModelParam._m0[1u].x) + (_1818 * (1.0 - cbModelParam._m0[1u].x));
    float _1843 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _822);
    float _1844 = isnan(_1843) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1843 : min(cbModelParam._m0[25u].z, _1843));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1893 = fma(_1067, cbModelParam._m0[13u].z, fma(_1063, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1059)) + cbModelParam._m0[13u].w;
        float _1897 = fma(_1067, cbModelParam._m0[14u].z, fma(_1063, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1059)) + cbModelParam._m0[14u].w;
        float _1901 = fma(_1067, cbModelParam._m0[15u].z, fma(_1063, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1059)) + cbModelParam._m0[15u].w;
        float _1904 = fma(_1006, cbModelParam._m0[13u].z, fma(_1005, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004));
        float _1907 = fma(_1006, cbModelParam._m0[14u].z, fma(_1005, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004));
        float _1910 = fma(_1006, cbModelParam._m0[15u].z, fma(_1005, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004));
        float _1938;
        if (_1904 > 0.0)
        {
            _1938 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1938 = frontier_phi_17_15_ladder;
        }
        float _2141;
        if (_1907 > 0.0)
        {
            _2141 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2141 = frontier_phi_26_22_ladder;
        }
        float _2395;
        if (_1910 > 0.0)
        {
            _2395 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2395 = frontier_phi_38_33_ladder;
        }
        float _2397 = isnan(_2141) ? _1938 : (isnan(_1938) ? _2141 : min(_1938, _2141));
        float _2398 = isnan(_2395) ? _2397 : (isnan(_2397) ? _2395 : min(_2397, _2395));
        float _2402 = (_2398 * _1904) + _1893;
        float _2403 = (_2398 * _1907) + _1897;
        float _2404 = (_2398 * _1910) + _1901;
        float _2405 = _2398 * 9.9999997473787516355514526367188e-05;
        float _2407 = (-1.0) - _2405;
        float _2409 = _2405 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2404 > _2409) || ((_2404 < _2407) || ((_2403 > _2409) || ((_2403 < _2407) || ((_2402 < _2407) || (_2402 > _2409))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2404, cbModelParam._m0[9u].z, fma(_2403, cbModelParam._m0[9u].y, _2402 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2404, cbModelParam._m0[10u].z, fma(_2403, cbModelParam._m0[10u].y, _2402 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2404, cbModelParam._m0[11u].z, fma(_2403, cbModelParam._m0[11u].y, _2402 * cbModelParam._m0[11u].x))), _1844);
            frontier_phi_16_38_ladder = _2532.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2532.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2532.x * cbModelParam._m0[1u].y;
        }
        _1926 = frontier_phi_16_38_ladder_2;
        _1928 = frontier_phi_16_38_ladder_1;
        _1930 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1004, _1005, _1006), _1844);
        _1926 = _1914.x * cbModelParam._m0[1u].y;
        _1928 = _1914.y * cbModelParam._m0[1u].y;
        _1930 = _1914.z * cbModelParam._m0[1u].y;
    }
    float _1934 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _822);
    float _1935 = isnan(_1934) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1934 : min(cbModelParam._m0[25u].w, _1934));
    float _2025;
    float _2027;
    float _2029;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1989 = fma(_1067, cbModelParam._m0[21u].z, fma(_1063, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1059)) + cbModelParam._m0[21u].w;
        float _1993 = fma(_1067, cbModelParam._m0[22u].z, fma(_1063, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1059)) + cbModelParam._m0[22u].w;
        float _1997 = fma(_1067, cbModelParam._m0[23u].z, fma(_1063, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1059)) + cbModelParam._m0[23u].w;
        float _2000 = fma(_1006, cbModelParam._m0[21u].z, fma(_1005, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004));
        float _2003 = fma(_1006, cbModelParam._m0[22u].z, fma(_1005, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004));
        float _2006 = fma(_1006, cbModelParam._m0[23u].z, fma(_1005, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004));
        float _2146;
        if (_2000 > 0.0)
        {
            _2146 = abs((1.0 - _1989) / _2000);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1989 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2146 = frontier_phi_28_24_ladder;
        }
        float _2422;
        if (_2003 > 0.0)
        {
            _2422 = abs((1.0 - _1993) / _2003);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1993 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2422 = frontier_phi_40_35_ladder;
        }
        float _2635;
        if (_2006 > 0.0)
        {
            _2635 = abs((1.0 - _1997) / _2006);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1997 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2635 = frontier_phi_49_46_ladder;
        }
        float _2637 = isnan(_2422) ? _2146 : (isnan(_2146) ? _2422 : min(_2146, _2422));
        float _2638 = isnan(_2635) ? _2637 : (isnan(_2637) ? _2635 : min(_2637, _2635));
        float _2642 = (_2638 * _2000) + _1989;
        float _2643 = (_2638 * _2003) + _1993;
        float _2644 = (_2638 * _2006) + _1997;
        float _2645 = _2638 * 9.9999997473787516355514526367188e-05;
        float _2646 = (-1.0) - _2645;
        float _2648 = _2645 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2644 > _2648) || ((_2644 < _2646) || ((_2643 > _2648) || ((_2643 < _2646) || ((_2642 < _2646) || (_2642 > _2648))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2843 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2644, cbModelParam._m0[17u].z, fma(_2643, cbModelParam._m0[17u].y, _2642 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2644, cbModelParam._m0[18u].z, fma(_2643, cbModelParam._m0[18u].y, _2642 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2644, cbModelParam._m0[19u].z, fma(_2643, cbModelParam._m0[19u].y, _2642 * cbModelParam._m0[19u].x))), _1935);
            frontier_phi_25_49_ladder = _2843.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2843.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2843.x * cbModelParam._m0[1u].z;
        }
        _2025 = frontier_phi_25_49_ladder_2;
        _2027 = frontier_phi_25_49_ladder_1;
        _2029 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2009 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1004, _1005, _1006), _1935);
        _2025 = _2009.x * cbModelParam._m0[1u].z;
        _2027 = _2009.y * cbModelParam._m0[1u].z;
        _2029 = _2009.z * cbModelParam._m0[1u].z;
    }
    float _2042 = (((_1030 * _980) + _1031) * _996) * ((cbModelParam._m0[1u].w * (_2025 - _1926)) + _1926);
    float _2044 = (((_1030 * _982) + _1031) * _996) * ((cbModelParam._m0[1u].w * (_2027 - _1928)) + _1928);
    float _2046 = (((_1030 * _983) + _1031) * _996) * ((cbModelParam._m0[1u].w * (_2029 - _1930)) + _1930);
    float _2049 = fma(_2046, cbSceneParam._m0[89u].z, fma(_2044, cbSceneParam._m0[89u].y, _2042 * cbSceneParam._m0[89u].x));
    float _2052 = fma(_2046, cbSceneParam._m0[90u].z, fma(_2044, cbSceneParam._m0[90u].y, _2042 * cbSceneParam._m0[90u].x));
    float _2055 = fma(_2046, cbSceneParam._m0[91u].z, fma(_2044, cbSceneParam._m0[91u].y, _2042 * cbSceneParam._m0[91u].x));
    uvec4 _2065 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2067 = _2065.x * 14u;
    uint _2068 = _2067 + 13u;
    float _2075 = _996 + (-1.0);
    float _2080 = (cbLight._m0[_2068].x * _2075) + 1.0;
    float _2081 = (cbLight._m0[_2068].y * _2075) + 1.0;
    float _2082 = (cbLight._m0[_2068].z * _2075) + 1.0;
    float _2083 = (cbLight._m0[_2068].w * _2075) + 1.0;
    uint _2084 = _2067 + 5u;
    float _2090 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
    uint _2094 = _2067 + 4u;
    float _2100 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2104 = _2067 | 1u;
    float _2115 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_819, _820, _821));
    float _2118 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_819, _820, _821));
    float _4386 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _4397 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2123 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * 0.3183098733425140380859375;
    float _2125 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * 0.3183098733425140380859375;
    float _2132 = ((cbLight._m0[_2084].x * _2090) * _2125) + ((cbLight._m0[_2094].x * _2100) * _2123);
    float _2133 = ((_2090 * cbLight._m0[_2084].y) * _2125) + ((_2100 * cbLight._m0[_2094].y) * _2123);
    float _2134 = ((_2090 * cbLight._m0[_2084].z) * _2125) + ((_2100 * cbLight._m0[_2094].z) * _2123);
    uvec4 _2138 = floatBitsToUint(cbLight._m0[_2067 + 12u]);
    bool _2140 = _2138.x == 0u;
    float _2151;
    float _2153;
    float _2155;
    if (_2140)
    {
        _2151 = _2132;
        _2153 = _2133;
        _2155 = _2134;
    }
    else
    {
        uint _2159 = _2067 + 6u;
        float _2175 = (dot(vec3(cbLight._m0[_2067 + 2u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2176 = _2175 * _2175;
        float _4408 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2177 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2178 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2151 = (((cbLight._m0[_2159].x * 0.3183098733425140380859375) * _2177) * _2178) + _2132;
        _2153 = (((cbLight._m0[_2159].y * 0.3183098733425140380859375) * _2177) * _2178) + _2133;
        _2155 = (((cbLight._m0[_2159].z * 0.3183098733425140380859375) * _2177) * _2178) + _2134;
    }
    bool _2158 = _2138.y == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2158)
    {
        _2196 = _2151;
        _2198 = _2153;
        _2200 = _2155;
    }
    else
    {
        uint _2366 = _2067 + 7u;
        float _2382 = (dot(vec3(cbLight._m0[_2067 + 3u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2383 = _2382 * _2382;
        float _4424 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2384 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2385 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2196 = (((cbLight._m0[_2366].x * 0.3183098733425140380859375) * _2384) * _2385) + _2151;
        _2198 = (((cbLight._m0[_2366].y * 0.3183098733425140380859375) * _2384) * _2385) + _2153;
        _2200 = (((cbLight._m0[_2366].z * 0.3183098733425140380859375) * _2384) * _2385) + _2155;
    }
    uint _2203 = _2067 + 8u;
    float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _822) * 0.949999988079071044921875);
    float _2217 = _2216 * _2216;
    float _2218 = cbLight._m0[_2067].x + _898;
    float _2219 = cbLight._m0[_2067].y + _899;
    float _2220 = cbLight._m0[_2067].z + _900;
    float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
    float _2225 = _2224 * _2218;
    float _2226 = _2224 * _2219;
    float _2227 = _2224 * _2220;
    float _2228 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2067].xyz));
    float _4440 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _4451 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _2232 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2233 = dot(vec3(_819, _820, _821), vec3(_2225, _2226, _2227));
    float _4462 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2237 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2225, _2226, _2227));
    float _4473 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2241 = _2217 * _2217;
    float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
    float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0);
    float _2254 = 0.959999978542327880859375 - _977;
    float _2256 = 0.959999978542327880859375 - _978;
    float _2257 = 0.959999978542327880859375 - _979;
    float _2264 = 1.0 - _2217;
    float _2275 = (0.5 / (((_2232 * ((_2231 * _2264) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2264) + _2217) * _2231))) * _2231;
    float _4484 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2277 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
    uint _2288 = _2067 + 9u;
    float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _822) * 0.949999988079071044921875);
    float _2300 = _2299 * _2299;
    float _2301 = cbLight._m0[_2104].x + _898;
    float _2302 = cbLight._m0[_2104].y + _899;
    float _2303 = cbLight._m0[_2104].z + _900;
    float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
    float _2308 = _2307 * _2301;
    float _2309 = _2307 * _2302;
    float _2310 = _2307 * _2303;
    float _2311 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2104].xyz));
    float _4495 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _2315 = dot(vec3(_819, _820, _821), vec3(_2308, _2309, _2310));
    float _4506 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2319 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2308, _2309, _2310));
    float _4517 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2323 = _2300 * _2300;
    float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
    float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0);
    float _2341 = 1.0 - _2300;
    float _2351 = (0.5 / (((_2232 * ((_2314 * _2341) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2341) + _2300) * _2314))) * _2314;
    float _4528 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2353 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
    float _2363 = (((((_2334 * _2254) + _980) * cbLight._m0[_2288].x) * _2353) * _2090) + (((((_2253 * _2254) + _980) * cbLight._m0[_2203].x) * _2277) * _2100);
    float _2364 = (((((_2334 * _2256) + _982) * cbLight._m0[_2288].y) * _2353) * _2090) + (((((_2253 * _2256) + _982) * cbLight._m0[_2203].y) * _2277) * _2100);
    float _2365 = (((((_2334 * _2257) + _983) * cbLight._m0[_2288].z) * _2353) * _2090) + (((((_2253 * _2257) + _983) * cbLight._m0[_2203].z) * _2277) * _2100);
    float _2427;
    float _2429;
    float _2431;
    if (_2140)
    {
        _2427 = _2363;
        _2429 = _2364;
        _2431 = _2365;
    }
    else
    {
        uint _2433 = _2067 + 2u;
        uint _2437 = _2067 + 10u;
        float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2433].w)) * _822) * 0.949999988079071044921875);
        float _2452 = _2451 * _2451;
        float _2453 = cbLight._m0[_2433].x + _898;
        float _2454 = cbLight._m0[_2433].y + _899;
        float _2455 = cbLight._m0[_2433].z + _900;
        float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
        float _2460 = _2459 * _2453;
        float _2461 = _2459 * _2454;
        float _2462 = _2459 * _2455;
        float _2463 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2433].xyz));
        float _4539 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2467 = dot(vec3(_819, _820, _821), vec3(_2460, _2461, _2462));
        float _4550 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2471 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_2460, _2461, _2462));
        float _4561 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2475 = _2452 * _2452;
        float _2479 = ((_2470 * _2470) * (_2475 + (-1.0))) + 1.0;
        float _2486 = exp2(log2(1.0 - (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) * 5.0);
        float _2493 = 1.0 - _2452;
        float _2503 = (0.5 / (((_2232 * ((_2466 * _2493) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2493) + _2452) * _2466))) * _2466;
        float _4572 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2505 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2475 / ((_2479 * _2479) * 3.141590118408203125));
        float _2506 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2427 = (((((_2486 * _2254) + _980) * cbLight._m0[_2437].x) * _2505) * _2506) + _2363;
        _2429 = (((((_2486 * _2256) + _982) * cbLight._m0[_2437].y) * _2505) * _2506) + _2364;
        _2431 = (((((_2486 * _2257) + _983) * cbLight._m0[_2437].z) * _2505) * _2506) + _2365;
    }
    float _2541;
    float _2543;
    float _2545;
    if (_2158)
    {
        _2541 = _2427;
        _2543 = _2429;
        _2545 = _2431;
    }
    else
    {
        uint _2552 = _2067 + 3u;
        uint _2556 = _2067 + 11u;
        float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _822) * 0.949999988079071044921875);
        float _2571 = _2570 * _2570;
        float _2572 = cbLight._m0[_2552].x + _898;
        float _2573 = cbLight._m0[_2552].y + _899;
        float _2574 = cbLight._m0[_2552].z + _900;
        float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
        float _2579 = _2578 * _2572;
        float _2580 = _2578 * _2573;
        float _2581 = _2578 * _2574;
        float _2582 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2552].xyz));
        float _4588 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _2586 = dot(vec3(_819, _820, _821), vec3(_2579, _2580, _2581));
        float _4599 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2590 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2579, _2580, _2581));
        float _4610 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2594 = _2571 * _2571;
        float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
        float _2605 = exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0);
        float _2612 = 1.0 - _2571;
        float _2622 = (0.5 / (((_2232 * ((_2585 * _2612) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2612) + _2571) * _2585))) * _2585;
        float _4621 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2624 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
        float _2625 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2541 = (((((_2605 * _2254) + _980) * cbLight._m0[_2556].x) * _2624) * _2625) + _2427;
        _2543 = (((((_2605 * _2256) + _982) * cbLight._m0[_2556].y) * _2624) * _2625) + _2429;
        _2545 = (((((_2605 * _2257) + _983) * cbLight._m0[_2556].z) * _2624) * _2625) + _2431;
    }
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    if (_2065.y == 0u)
    {
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2700;
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2700;
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2700;
        uvec4 _2715 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2716 = _2715.x;
        uint _2727 = uint((float(_2715.y) * floor(float(uint(cbSceneParam._m0[85u].y * _919) / _2716))) + floor(float(uint(cbSceneParam._m0[85u].x * _918) / _2716)));
        float _2737 = (log2(_2703 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2738 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        uint _2741 = uint(isnan(14.0) ? _2738 : (isnan(_2738) ? 14.0 : min(_2738, 14.0)));
        uvec4 _2746 = texelFetch(g_lightClusterGridBuffer, int(((_2741 << 2u) + (_2727 << 6u)) >> 2u));
        uint _2747 = _2746.x;
        uint _2748 = _2715.z;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        if (((((1u << ((_2748 >> 4u) & 15u)) + 4294967295u) & _2747) == 0u) || ((_2748 & 240u) == 0u))
        {
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
        }
        else
        {
            float _2849;
            float _2851;
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            uint _3007 = 0u;
            uint _3016;
            bool _3017;
            for (;;)
            {
                _3016 = texelFetch(g_lightClassification, int((((_2741 << 5u) + (_2727 << 9u)) + (_3007 << 2u)) >> 2u)).x;
                _3017 = _3016 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3017)
                {
                    frontier_phi_66_pred = _3001;
                    frontier_phi_66_pred_1 = _3006;
                    frontier_phi_66_pred_2 = _3005;
                    frontier_phi_66_pred_3 = _3004;
                    frontier_phi_66_pred_4 = _3003;
                    frontier_phi_66_pred_5 = _3002;
                }
                else
                {
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    uint _3152;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3016;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    for (;;)
                    {
                        uint _3156 = uint(findLSB(_3152)) + (_3007 << 5u);
                        uint _3153 = (_3152 + 4294967295u) & _3152;
                        uint _3158 = _3156 * 48u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 3u)).x));
                        uint _3178 = (_3156 * 48u) + 4u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3197 = (_3156 * 48u) + 8u;
                        vec3 _3208 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x));
                        float _3212 = _3172.x - _2701;
                        float _3213 = _3172.y - _2702;
                        float _3214 = _3172.z - _2703;
                        float _3215 = dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214));
                        float _3218 = inversesqrt(_3215);
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3222 = dot(vec3(_937, _940, _943), vec3(_3219, _3220, _3221));
                        float _3227 = 1.0 - (_3215 * _3172.w);
                        float _4647 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3228 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3229 = sqrt(_3215) * _3191.w;
                        float _3232 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                        float _3233 = _3232 * _3232;
                        float _3236 = ((1.0 - _3233) * _3222) + _3233;
                        float _3239 = _3229 * _3229;
                        float _3243 = ((isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))) * _3228) / ((_3239 * 0.699999988079071044921875) + 1.0);
                        float _3247 = (-0.0) - _2701;
                        float _3248 = (-0.0) - _2702;
                        float _3249 = (-0.0) - _2703;
                        float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                        float _3254 = _3253 * _3247;
                        float _3255 = _3253 * _3248;
                        float _3256 = _3253 * _3249;
                        float _3264 = exp2(log2(1.0 / ((_3239 * 3.5) + 5.0)) * 0.25);
                        float _3265 = 1.0 - _1012;
                        float _3272 = sqrt(1.0 - ((1.0 - (_3265 * _3265)) * (1.0 - (_3264 * _3264))));
                        float _3273 = _3272 * _3272;
                        float _3274 = _3273 * _3273;
                        float _3275 = _3254 + _3219;
                        float _3276 = _3255 + _3220;
                        float _3277 = _3256 + _3221;
                        float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                        float _3285 = dot(vec3(_937, _940, _943), vec3(_3254, _3255, _3256));
                        float _4663 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3288 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3289 = dot(vec3(_937, _940, _943), vec3(_3281 * _3275, _3281 * _3276, _3281 * _3277));
                        float _4674 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3292 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3296 = ((_3292 * _3292) * (_3274 + (-1.0))) + 1.0;
                        float _3297 = _3232 * _3273;
                        float _3298 = _3297 * _3297;
                        float _3301 = ((1.0 - _3298) * _3222) + _3298;
                        float _4685 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3303 = 1.0 - _3273;
                        float _3313 = (0.5 / (((_3302 * ((_3288 * _3303) + _3273)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3273) * _3288))) * _3302;
                        float _4696 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3323 = (((_3274 * 3.1415927410125732421875) * (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) / ((_3296 * _3296) * ((_3239 * 2.1991131305694580078125) + 3.141590118408203125))) * _3228;
                        _3076 = (_3243 * _3191.x) + _3149;
                        _3077 = (_3243 * _3191.y) + _3150;
                        _3078 = (_3243 * _3191.z) + _3151;
                        _3073 = (_3323 * _3208.x) + _3146;
                        _3074 = (_3323 * _3208.y) + _3147;
                        _3075 = (_3323 * _3208.z) + _3148;
                        if (_3153 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3153;
                        }
                    }
                    frontier_phi_66_pred = _3073;
                    frontier_phi_66_pred_1 = _3078;
                    frontier_phi_66_pred_2 = _3077;
                    frontier_phi_66_pred_3 = _3076;
                    frontier_phi_66_pred_4 = _3075;
                    frontier_phi_66_pred_5 = _3074;
                }
                _2849 = frontier_phi_66_pred;
                _2859 = frontier_phi_66_pred_1;
                _2857 = frontier_phi_66_pred_2;
                _2855 = frontier_phi_66_pred_3;
                _2853 = frontier_phi_66_pred_4;
                _2851 = frontier_phi_66_pred_5;
                uint _3008 = _3007 + 1u;
                if (_3008 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3001 = _2849;
                    _3002 = _2851;
                    _3003 = _2853;
                    _3004 = _2855;
                    _3005 = _2857;
                    _3006 = _2859;
                    _3007 = _3008;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
        }
        uvec4 _2862 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2863 = _2862.z;
        uint _2865 = (_2863 >> 8u) & 15u;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        if (((4294967295u << _2865) & _2747) == 0u)
        {
            _2969 = _2848;
            _2971 = _2850;
            _2973 = _2852;
            _2975 = _2854;
            _2977 = _2856;
            _2979 = _2858;
        }
        else
        {
            float _2994 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
            float _2995 = _2994 * _2701;
            float _2996 = _2994 * _2702;
            float _2997 = _2994 * _2703;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2865 < ((_2863 >> 12u) & 15u))
            {
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _3129 = _2848;
                float _3130 = _2850;
                float _3131 = _2852;
                float _3132 = _2854;
                float _3133 = _2856;
                float _3134 = _2858;
                uint _3135 = _2865;
                uint _3144;
                bool _3145;
                for (;;)
                {
                    _3144 = texelFetch(g_lightClassification, int((((_2741 << 5u) + (_2727 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                    _3145 = _3144 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3145)
                    {
                        frontier_phi_77_pred = _3134;
                        frontier_phi_77_pred_1 = _3133;
                        frontier_phi_77_pred_2 = _3132;
                        frontier_phi_77_pred_3 = _3131;
                        frontier_phi_77_pred_4 = _3130;
                        frontier_phi_77_pred_5 = _3129;
                    }
                    else
                    {
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3350 = _3129;
                        float _3351 = _3130;
                        float _3352 = _3131;
                        float _3353 = _3132;
                        float _3354 = _3133;
                        float _3355 = _3134;
                        uint _3356 = _3144;
                        uint _3357;
                        vec4 _3382;
                        float _3383;
                        vec4 _3398;
                        vec3 _3410;
                        vec4 _3425;
                        vec4 _3440;
                        float _3486;
                        bool _3487;
                        for (;;)
                        {
                            uint _3367 = ((_3135 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3356));
                            _3357 = (_3356 + 4294967295u) & _3356;
                            uint _3369 = _3367 * 40u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3383 = _3382.w;
                            uint _3385 = (_3367 * 40u) + 4u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3367 * 40u) + 8u;
                            _3410 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x));
                            uint _3412 = (_3367 * 40u) + 16u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3367 * 40u) + 20u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3367 * 40u) + 24u;
                            vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3461 = (_3367 * 40u) + 28u;
                            vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            _3486 = fma(_2703, _3474.z, fma(_2702, _3474.y, _3474.x * _2701)) + _3474.w;
                            _3487 = !((fma(_2703, _3455.z, fma(_2702, _3455.y, _3455.x * _2701)) + _3455.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3487)
                            {
                                float _3514 = _3382.x - _2701;
                                float _3515 = _3382.y - _2702;
                                float _3516 = _3382.z - _2703;
                                float _3517 = dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516));
                                float _3520 = inversesqrt(_3517);
                                float _3521 = _3520 * _3514;
                                float _3522 = _3520 * _3515;
                                float _3523 = _3520 * _3516;
                                float _3527 = 1.0 - (_3517 / (_3383 * _3383));
                                float _4707 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3532 = sqrt(_3517) * _3398.w;
                                float _3534 = 1.39999997615814208984375 / (_3532 + 1.39999997615814208984375);
                                float _3535 = _3534 * _3534;
                                float _3538 = ((1.0 - _3535) * dot(vec3(_3521, _3522, _3523), vec3(_937, _940, _943))) + _3535;
                                float _3541 = _3532 * _3532;
                                float _3545 = (fma(_2703, _3425.z, fma(_2702, _3425.y, _3425.x * _2701)) + _3425.w) / _3486;
                                float _3546 = (fma(_2703, _3440.z, fma(_2702, _3440.y, _3440.x * _2701)) + _3440.w) / _3486;
                                float _3550 = 1.0 - dot(vec2(_3545, _3546), vec2(_3545, _3546));
                                float _4723 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3552 = _3551 * (((isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0))) * _3528) / ((_3541 * 0.699999988079071044921875) + 1.0));
                                float _3564 = exp2(log2(1.0 / ((_3541 * 3.5) + 5.0)) * 0.25);
                                float _3565 = 1.0 - _1012;
                                float _3572 = sqrt(1.0 - ((1.0 - (_3565 * _3565)) * (1.0 - (_3564 * _3564))));
                                float _3573 = _3572 * _3572;
                                float _3574 = _3573 * _3573;
                                float _3575 = _3521 - _2995;
                                float _3576 = _3522 - _2996;
                                float _3577 = _3523 - _2997;
                                float _3581 = inversesqrt(dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577)));
                                float _3585 = dot(vec3(_937, _940, _943), vec3((-0.0) - _2995, (-0.0) - _2996, (-0.0) - _2997));
                                float _4734 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3588 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3589 = dot(vec3(_937, _940, _943), vec3(_3581 * _3575, _3581 * _3576, _3581 * _3577));
                                float _4745 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3592 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3596 = ((_3592 * _3592) * (_3574 + (-1.0))) + 1.0;
                                float _3597 = _3534 * _3573;
                                float _3598 = _3597 * _3597;
                                float _3604 = ((1.0 - _3598) * dot(vec3(_937, _940, _943), vec3(_3521, _3522, _3523))) + _3598;
                                float _4756 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3606 = 1.0 - _3573;
                                float _3616 = (0.5 / (((_3605 * ((_3588 * _3606) + _3573)) + 9.9999999392252902907785028219223e-09) + (((_3605 * _3606) + _3573) * _3588))) * _3605;
                                float _4767 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3626 = (_3551 * _3528) * (((_3574 * 3.1415927410125732421875) * (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) / ((_3596 * _3596) * ((_3541 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3552 * _3398.y;
                                frontier_phi_83_pred_1 = _3552 * _3398.x;
                                frontier_phi_83_pred_2 = _3626 * _3410.z;
                                frontier_phi_83_pred_3 = _3626 * _3410.y;
                                frontier_phi_83_pred_4 = _3626 * _3410.x;
                                frontier_phi_83_pred_5 = _3552 * _3398.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3634 = frontier_phi_83_pred;
                            _3633 = frontier_phi_83_pred_1;
                            _3632 = frontier_phi_83_pred_2;
                            _3631 = frontier_phi_83_pred_3;
                            _3630 = frontier_phi_83_pred_4;
                            _3635 = frontier_phi_83_pred_5;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            if (_3357 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3357;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3342;
                        frontier_phi_77_pred_1 = _3341;
                        frontier_phi_77_pred_2 = _3340;
                        frontier_phi_77_pred_3 = _3339;
                        frontier_phi_77_pred_4 = _3338;
                        frontier_phi_77_pred_5 = _3337;
                    }
                    _2980 = frontier_phi_77_pred;
                    _2978 = frontier_phi_77_pred_1;
                    _2976 = frontier_phi_77_pred_2;
                    _2974 = frontier_phi_77_pred_3;
                    _2972 = frontier_phi_77_pred_4;
                    _2970 = frontier_phi_77_pred_5;
                    uint _3136 = _3135 + 1u;
                    if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3129 = _2970;
                        _3130 = _2972;
                        _3131 = _2974;
                        _3132 = _2976;
                        _3133 = _2978;
                        _3134 = _2980;
                        _3135 = _3136;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2974;
                frontier_phi_58_59_ladder_1 = _2980;
                frontier_phi_58_59_ladder_2 = _2978;
                frontier_phi_58_59_ladder_3 = _2976;
                frontier_phi_58_59_ladder_4 = _2972;
                frontier_phi_58_59_ladder_5 = _2970;
            }
            else
            {
                frontier_phi_58_59_ladder = _2852;
                frontier_phi_58_59_ladder_1 = _2858;
                frontier_phi_58_59_ladder_2 = _2856;
                frontier_phi_58_59_ladder_3 = _2854;
                frontier_phi_58_59_ladder_4 = _2850;
                frontier_phi_58_59_ladder_5 = _2848;
            }
            _2969 = frontier_phi_58_59_ladder_5;
            _2971 = frontier_phi_58_59_ladder_4;
            _2973 = frontier_phi_58_59_ladder;
            _2975 = frontier_phi_58_59_ladder_3;
            _2977 = frontier_phi_58_59_ladder_2;
            _2979 = frontier_phi_58_59_ladder_1;
        }
        float _2984 = isnan(1.0) ? _996 : (isnan(_996) ? 1.0 : min(_996, 1.0));
        _2760 = (_2984 * _2975) + _2196;
        _2762 = (_2984 * _2977) + _2198;
        _2764 = (_2984 * _2979) + _2200;
        _2766 = ((_2969 * _980) * _2984) + _2541;
        _2768 = ((_2971 * _982) * _2984) + _2543;
        _2770 = ((_2973 * _983) * _2984) + _2545;
    }
    else
    {
        _2760 = _2196;
        _2762 = _2198;
        _2764 = _2200;
        _2766 = _2541;
        _2768 = _2543;
        _2770 = _2545;
    }
    float _4783 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4794 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4805 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _2787 = ((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2760 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _996))) + ((_2766 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1833)) * cbPerFrame._m0[3u].x);
    float _2788 = ((isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2762 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _996))) + ((_2768 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1833)) * cbPerFrame._m0[3u].x);
    float _2789 = ((isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2764 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _996))) + ((_2770 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1833)) * cbPerFrame._m0[3u].x);
    uint _2790 = _279 + 6u;
    float _2798 = _918 / cbSceneParam._m0[86u].x;
    float _2799 = _919 / cbSceneParam._m0[86u].y;
    vec4 _2813 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2798, _2799, (log2((isnan(cbSceneParam._m0[77u].w) ? _841 : (isnan(_841) ? cbSceneParam._m0[77u].w : min(_841, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2815 = _2813.x;
    float _2816 = _2813.y;
    float _2817 = _2813.z;
    float _2818 = _2813.w;
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    if (_841 > cbSceneParam._m0[78u].w)
    {
        float _2873 = isnan(_841) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _841 : min(cbSceneParam._m0[80u].w, _841));
        float _2874 = _2873 / _841;
        float _2885 = _2874 * _891;
        float _2886 = _892 * _2874;
        float _2887 = (-0.0) - _2886;
        float _2889 = _2874 * _893;
        float _2891 = (cbSceneParam._m0[77u].w * _2887) / _2873;
        float _2892 = _2891 + cbSceneParam._m0[79u].w;
        float _2893 = cbSceneParam._m0[79u].w - _2886;
        float _2899 = sqrt(((_2885 * _2885) + (_2886 * _2886)) + (_2889 * _2889));
        float _2902 = (1.0 - (cbSceneParam._m0[77u].w / _2873)) * _2899;
        float _2907 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2909 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3086;
        if (abs((_2887 - _2891) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3086 = ((((_2892 > 0.0) ? exp2(_2907 * _2892) : (2.0 - exp2(_2909 * _2892))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2902;
        }
        else
        {
            float _3030 = 1.0 / cbSceneParam._m0[80u].x;
            float _3031 = isnan(_2893) ? _2892 : (isnan(_2892) ? _2893 : max(_2892, _2893));
            float _3032 = isnan(_2893) ? _2892 : (isnan(_2892) ? _2893 : min(_2892, _2893));
            float _3041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : min(_3031, 0.0));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            _3086 = ((abs(_2899 / _2887) * cbSceneParam._m0[80u].y) * ((((_3041 - _3042) * 2.0) - ((exp2(_2907 * (isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0)))) - exp2(_2907 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0))))) * _3030)) - ((exp2(_2909 * _3041) - exp2(_2909 * _3042)) * _3030))) + (_2902 * cbSceneParam._m0[80u].z);
        }
        vec4 _3088 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2798, _2799, 1.0), 0.0);
        float _3097 = exp2((_3086 * (-1.44269502162933349609375)) * (1.0 - _3088.w));
        float _3098 = log2(_3097);
        float _3114 = log2(_2818);
        _2911 = (exp2(_3114 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].x)) * _3088.x) / cbSceneParam._m0[78u].x)) + _2815;
        _2913 = (exp2(_3114 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].y)) * _3088.y) / cbSceneParam._m0[78u].y)) + _2816;
        _2915 = (exp2(_3114 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].z)) * _3088.z) / cbSceneParam._m0[78u].z)) + _2817;
        _2917 = _3097 * _2818;
    }
    else
    {
        _2911 = _2815;
        _2913 = _2816;
        _2915 = _2817;
        _2917 = _2818;
    }
    bool _3124;
    vec4 _2927;
    vec4 _2949;
    float _2951;
    float _2955;
    float _2956;
    float _2957;
    float _2958;
    bool _2968;
    for (;;)
    {
        _2927 = cbMatDynParam._m0[0u];
        float _2929 = roundEven(_2927.y);
        bool _2930 = _2929 == 3.0;
        float _2931 = log2(_2917);
        float _2938 = exp2(_2931 * cbSceneParam._m0[78u].x) * _2787;
        float _2939 = exp2(_2931 * cbSceneParam._m0[78u].y) * _2788;
        float _2940 = exp2(_2931 * cbSceneParam._m0[78u].z) * _2789;
        float _2947 = _907 + (-0.5);
        _2949 = cbMtdParam._m0[1u];
        _2951 = _2949.y * _2947;
        float _2954 = (_2929 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2955 = _2954 * (_2930 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2911)));
        _2956 = _2954 * (_2930 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2913)));
        _2957 = _2954 * (_2930 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2915)));
        _2958 = _2947 * 0.999000012874603271484375;
        _2968 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2968)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _2958) < 0.5)
            {
                _3124 = true;
                break;
            }
        }
        uint _3065 = _956 + uint(_2927.w);
        if ((cbInstanceData._m0[_3065].w < 1.0) && ((cbInstanceData._m0[_3065].w + _2958) < 0.5))
        {
            _3124 = true;
            break;
        }
        if ((_2951 + 1.0) < _2949.x)
        {
            _3124 = true;
            break;
        }
        _3124 = false;
        break;
    }
    float _3328;
    if (_3124)
    {
        discard_state = true;
        _3328 = 0.0;
    }
    else
    {
        _3328 = cbInstanceData._m0[_2790].w;
    }
    SV_Target.x = _2955;
    SV_Target.y = _2956;
    SV_Target.z = _2957;
    SV_Target.w = _3328;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2790].w;
    discard_exit();
}


