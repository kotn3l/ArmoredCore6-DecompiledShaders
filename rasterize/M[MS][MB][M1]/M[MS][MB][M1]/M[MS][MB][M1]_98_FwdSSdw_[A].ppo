#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1232;
float _3638;
float _3639;
float _3640;
float _3641;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _358 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _358) * cbMtdParam._m0[24u].y) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3650 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _383 = (_376 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _384 = (_376 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _385 = (_376 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    float _433 = ((_403.z - _424) * _376) + _424;
    float _436 = ((((_403.x - _422) * _376) + _422) * 2.0) + (-1.0);
    float _438 = ((((_403.y - _423) * _376) + _423) * 2.0) + (-1.0);
    float _439 = dot(vec2(_436, _438), vec2(_436, _438));
    float _3661 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _444 = sqrt(1.0 - (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))));
    vec4 _460 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _472 = (((_460.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _436;
    float _473 = (((_460.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _438;
    float _476 = fma(_444, _226, fma(_473, _233, _472 * _219));
    float _479 = fma(_444, _227, fma(_473, _234, _472 * _220));
    float _482 = fma(_444, _228, fma(_473, _235, _472 * _221));
    float _486 = inversesqrt(dot(vec3(_476, _479, _482), vec3(_476, _479, _482)));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _515 = _513.x;
    float _516 = 1.0 - _515;
    float _522 = (cbMtdParam._m0[19u].x + dot(vec4(_486 * _476, _486 * _479, _486 * _482, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_515 - _516) * cbMtdParam._m0[24u].z) + _516) * cbMtdParam._m0[21u].z);
    float _3672 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _530 = (_523 * (cbMtdParam._m0[17u].x - _383)) + _383;
    float _531 = (_523 * (cbMtdParam._m0[17u].y - _384)) + _384;
    float _532 = (_523 * (cbMtdParam._m0[17u].z - _385)) + _385;
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _560 = _558.x;
    float _578 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _560) * _376) + _560;
    float _582 = ((_544.x - _578) * cbMtdParam._m0[19u].z) + _578;
    float _584 = _582 - (_582 * _523);
    float _588 = (cbMtdParam._m0[19u].w * (_460.z - _433)) + _433;
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _608 = (_601.x * 2.0) + (-1.0);
    float _609 = (_601.y * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _3683 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _618 = ((_601.z - _588) * _523) + _588;
    float _628 = ((sqrt(1.0 - (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) - _444) * _523) + _444;
    float _631 = (((_608 - _472) * _523) + _472) + (cbMtdParam._m0[21u].x * _472);
    float _632 = (((_609 - _473) * _523) + _473) + (cbMtdParam._m0[21u].x * _473);
    float _637 = cbMtdParam._m0[22u].x + _460.w;
    float _640 = fma(_628, _226, fma(_632, _233, _631 * _219));
    float _643 = fma(_628, _227, fma(_632, _234, _631 * _220));
    float _646 = fma(_628, _228, fma(_632, _235, _631 * _221));
    float _650 = inversesqrt(dot(vec3(_640, _643, _646), vec3(_640, _643, _646)));
    float _651 = _650 * _640;
    float _652 = _650 * _643;
    float _653 = _650 * _646;
    float _3694 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _654 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3716 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _3727 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _3738 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3749 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _659 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _673 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _724 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _714);
    float _725 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _714);
    float _726 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _714);
    float _730 = inversesqrt(dot(vec3(_724, _725, _726), vec3(_724, _725, _726)));
    float _731 = _724 * _730;
    float _732 = _725 * _730;
    float _733 = _726 * _730;
    vec4 _738 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _740 = _738.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _912 = sqrt(((_724 * _724) + (_725 * _725)) + (_726 * _726));
        float _918 = (cbMatDynParam._m0[5u].x * _912) + cbMatDynParam._m0[5u].y;
        float _3760 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _923 = (cbMatDynParam._m0[5u].z * _912) + cbMatDynParam._m0[5u].w;
        float _3771 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) - _919)) + _919) < ((_740 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _751 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _752 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _770 = fma(_653, cbSceneParam._m0[5u].z, fma(_652, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _651));
    float _773 = fma(_653, cbSceneParam._m0[6u].z, fma(_652, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _651));
    float _776 = fma(_653, cbSceneParam._m0[7u].z, fma(_652, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _651));
    uint _789 = _238 + 9u;
    uint _790 = _789 + uint(cbMatDynParam._m0[0u].w);
    float _796 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) * cbInstanceData._m0[_790].x;
    float _797 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) * cbInstanceData._m0[_790].y;
    float _798 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) * cbInstanceData._m0[_790].z;
    float _3782 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _3793 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _3804 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _802 = 1.0 - _659;
    float _803 = _799 * _802;
    float _804 = _800 * _802;
    float _805 = _801 * _802;
    float _810 = (_799 + (-0.039999999105930328369140625)) * _659;
    float _811 = (_800 + (-0.039999999105930328369140625)) * _659;
    float _812 = (_801 + (-0.039999999105930328369140625)) * _659;
    float _813 = _810 + 0.039999999105930328369140625;
    float _815 = _811 + 0.039999999105930328369140625;
    float _816 = _812 + 0.039999999105930328369140625;
    vec4 _825 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _751, cbSceneParam._m0[86u].y * _752));
    float _829 = ((isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * TEXCOORD_5.w) * _825.x;
    float _830 = dot(vec3(_651, _652, _653), vec3(_731, _732, _733));
    float _833 = _830 * 2.0;
    float _837 = (_833 * _651) - _731;
    float _838 = (_833 * _652) - _732;
    float _839 = (_833 * _653) - _733;
    float _843 = abs(dot(vec3(_731, _732, _733), vec3(_651, _652, _653)));
    float _3815 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _845 = sqrt(_654);
    float _858 = exp2((_845 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_845 * 3.0));
    float _864 = (1.0 - _858) * ((_845 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _865 = _858 * _845;
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1231;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _956 = fma(_901, cbModelParam._m0[26u].z, fma(_897, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _893));
        float _960 = fma(_901, cbModelParam._m0[27u].z, fma(_897, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _893));
        float _964 = fma(_901, cbModelParam._m0[28u].z, fma(_897, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _893));
        float _989 = _893 + _651;
        float _990 = _897 + _652;
        float _991 = _901 + _653;
        float _1001 = fma(_991, cbModelParam._m0[26u].z, fma(_990, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _989)) - _956;
        float _1002 = fma(_991, cbModelParam._m0[27u].z, fma(_990, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _989)) - _960;
        float _1003 = fma(_991, cbModelParam._m0[28u].z, fma(_990, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _989)) - _964;
        float _1007 = inversesqrt(dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003)));
        float _1020 = ((_1007 * _1001) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_956 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1007 * _1002) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_960 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1007 * _1003) / cbModelParam._m0[34u].z) + ((((((_964 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        float _1059 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1025.x + (-0.5));
        float _1061 = _1059 * (_1025.y + (-0.5));
        float _1062 = _1059 * (_1025.z + (-0.5));
        float _1069 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1032.x + (-0.5));
        float _1071 = _1069 * (_1032.y + (-0.5));
        float _1072 = _1069 * (_1032.z + (-0.5));
        float _1079 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1039.x + (-0.5));
        float _1081 = _1079 * (_1039.y + (-0.5));
        float _1082 = _1079 * (_1039.z + (-0.5));
        float _1089 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1046.x + (-0.5));
        float _1091 = _1089 * (_1046.y + (-0.5));
        float _1092 = _1089 * (_1046.z + (-0.5));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = _1060 * 0.5;
        float _1097 = _1070 * 0.5;
        float _1098 = _1080 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1113 = (dot(vec3(_651, _652, _653), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1123 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3863 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1125 + 1.0))) + _1130) * _1093;
        float _1140 = _1061 * 0.5;
        float _1141 = _1071 * 0.5;
        float _1142 = _1081 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_651, _652, _653), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3896 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1167 + 1.0))) + _1172) * _1094;
        float _1182 = _1062 * 0.5;
        float _1183 = _1072 * 0.5;
        float _1184 = _1082 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_651, _652, _653), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3929 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1209 + 1.0))) + _1214) * _1095;
        _1231 = _1062;
        _1233 = _1061;
        _1234 = _1060;
        _1235 = _1072;
        _1236 = _1071;
        _1237 = _1070;
        _1238 = _1082;
        _1239 = _1081;
        _1240 = _1080;
        _1241 = _1095;
        _1242 = _1094;
        _1243 = _1093;
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
    }
    else
    {
        _1231 = _1232;
        _1233 = _1232;
        _1234 = _1232;
        _1235 = _1232;
        _1236 = _1232;
        _1237 = _1232;
        _1238 = _1232;
        _1239 = _1232;
        _1240 = _1232;
        _1241 = _1232;
        _1242 = _1232;
        _1243 = _1232;
        _1244 = 0.0;
        _1245 = 0.0;
        _1246 = 0.0;
    }
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1274 = fma(_901, cbModelParam._m0[30u].z, fma(_897, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _893));
        float _1278 = fma(_901, cbModelParam._m0[31u].z, fma(_897, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _893));
        float _1282 = fma(_901, cbModelParam._m0[32u].z, fma(_897, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _893));
        float _1305 = _893 + _651;
        float _1306 = _897 + _652;
        float _1307 = _901 + _653;
        float _1317 = fma(_1307, cbModelParam._m0[30u].z, fma(_1306, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1305)) - _1274;
        float _1318 = fma(_1307, cbModelParam._m0[31u].z, fma(_1306, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1305)) - _1278;
        float _1319 = fma(_1307, cbModelParam._m0[32u].z, fma(_1306, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1305)) - _1282;
        float _1323 = inversesqrt(dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319)));
        float _1336 = ((_1323 * _1317) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1274 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1323 * _1318) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1278 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1338 = ((_1323 * _1319) / cbModelParam._m0[35u].z) + ((((((_1282 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        float _1373 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1340.x + (-0.5));
        float _1375 = _1373 * (_1340.y + (-0.5));
        float _1376 = _1373 * (_1340.z + (-0.5));
        float _1383 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1347.x + (-0.5));
        float _1385 = _1383 * (_1347.y + (-0.5));
        float _1386 = _1383 * (_1347.z + (-0.5));
        float _1393 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1354.x + (-0.5));
        float _1395 = _1393 * (_1354.y + (-0.5));
        float _1396 = _1393 * (_1354.z + (-0.5));
        float _1403 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1361.x + (-0.5));
        float _1405 = _1403 * (_1361.y + (-0.5));
        float _1406 = _1403 * (_1361.z + (-0.5));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = _1374 * 0.5;
        float _1411 = _1384 * 0.5;
        float _1412 = _1394 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_651, _652, _653), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _3992 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1437 + 1.0))) + _1442) * _1407;
        float _1452 = _1375 * 0.5;
        float _1453 = _1385 * 0.5;
        float _1454 = _1395 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_651, _652, _653), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4025 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1479 + 1.0))) + _1484) * _1408;
        float _1494 = _1376 * 0.5;
        float _1495 = _1386 * 0.5;
        float _1496 = _1396 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_651, _652, _653), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4058 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1521 + 1.0))) + _1526) * _1409;
        _1543 = _1376;
        _1544 = _1375;
        _1545 = _1374;
        _1546 = _1386;
        _1547 = _1385;
        _1548 = _1384;
        _1549 = _1396;
        _1550 = _1395;
        _1551 = _1394;
        _1552 = _1409;
        _1553 = _1408;
        _1554 = _1407;
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
    }
    else
    {
        _1543 = _1232;
        _1544 = _1232;
        _1545 = _1232;
        _1546 = _1232;
        _1547 = _1232;
        _1548 = _1232;
        _1549 = _1232;
        _1550 = _1232;
        _1551 = _1232;
        _1552 = _1232;
        _1553 = _1232;
        _1554 = _1232;
        _1555 = 0.0;
        _1556 = 0.0;
        _1557 = 0.0;
    }
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1244)) + _1244;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1245)) + _1245;
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1246)) + _1246;
    float _1590 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1593 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1596 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1567));
    float _1611 = _837 * 0.5;
    float _1612 = _838 * 0.5;
    float _1613 = _839 * 0.5;
    float _1614 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1617 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1620 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1654;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1627 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1231, _1235, _1238, _1241));
        float _1631 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1233, _1236, _1239, _1242));
        float _1635 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1234, _1237, _1240, _1243));
        float _1642 = dot(vec4(cbModelParam._m0[39u]), vec4(_1611, _1612, _1613, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1665;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1656 = dot(vec4(cbModelParam._m0[40u]), vec4(_1611, _1612, _1613, 1.0));
        _1665 = dot(vec3(isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1656) ? 0.0 : (isnan(0.0) ? _1656 : max(0.0, _1656))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1665 = 1.0;
    }
    float _1669 = (_1665 * cbModelParam._m0[1u].x) + (_1654 * (1.0 - cbModelParam._m0[1u].x));
    float _1679 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _654);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1679 : min(cbModelParam._m0[25u].z, _1679));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1728 = fma(_901, cbModelParam._m0[13u].z, fma(_897, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _893)) + cbModelParam._m0[13u].w;
        float _1732 = fma(_901, cbModelParam._m0[14u].z, fma(_897, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _893)) + cbModelParam._m0[14u].w;
        float _1736 = fma(_901, cbModelParam._m0[15u].z, fma(_897, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _893)) + cbModelParam._m0[15u].w;
        float _1739 = fma(_839, cbModelParam._m0[13u].z, fma(_838, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _837));
        float _1742 = fma(_839, cbModelParam._m0[14u].z, fma(_838, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _837));
        float _1745 = fma(_839, cbModelParam._m0[15u].z, fma(_838, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _837));
        float _1773;
        if (_1739 > 0.0)
        {
            _1773 = abs((1.0 - _1728) / _1739);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1728 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1773 = frontier_phi_17_15_ladder;
        }
        float _1997;
        if (_1742 > 0.0)
        {
            _1997 = abs((1.0 - _1732) / _1742);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1732 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1997 = frontier_phi_26_22_ladder;
        }
        float _2254;
        if (_1745 > 0.0)
        {
            _2254 = abs((1.0 - _1736) / _1745);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1736 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2254 = frontier_phi_38_33_ladder;
        }
        float _2256 = isnan(_1997) ? _1773 : (isnan(_1773) ? _1997 : min(_1773, _1997));
        float _2257 = isnan(_2254) ? _2256 : (isnan(_2256) ? _2254 : min(_2256, _2254));
        float _2261 = (_2257 * _1739) + _1728;
        float _2262 = (_2257 * _1742) + _1732;
        float _2263 = (_2257 * _1745) + _1736;
        float _2264 = _2257 * 9.9999997473787516355514526367188e-05;
        float _2266 = (-1.0) - _2264;
        float _2268 = _2264 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2263 > _2268) || ((_2263 < _2266) || ((_2262 > _2268) || ((_2262 < _2266) || ((_2261 < _2266) || (_2261 > _2268))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2263, cbModelParam._m0[9u].z, fma(_2262, cbModelParam._m0[9u].y, _2261 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2263, cbModelParam._m0[10u].z, fma(_2262, cbModelParam._m0[10u].y, _2261 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2263, cbModelParam._m0[11u].z, fma(_2262, cbModelParam._m0[11u].y, _2261 * cbModelParam._m0[11u].x))), _1680);
            frontier_phi_16_38_ladder = _2391.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2391.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2391.x * cbModelParam._m0[1u].y;
        }
        _1761 = frontier_phi_16_38_ladder_2;
        _1763 = frontier_phi_16_38_ladder_1;
        _1765 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1749 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_837, _838, _839), _1680);
        _1761 = _1749.x * cbModelParam._m0[1u].y;
        _1763 = _1749.y * cbModelParam._m0[1u].y;
        _1765 = _1749.z * cbModelParam._m0[1u].y;
    }
    float _1769 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _654);
    float _1770 = isnan(_1769) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1769 : min(cbModelParam._m0[25u].w, _1769));
    float _1860;
    float _1862;
    float _1864;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1824 = fma(_901, cbModelParam._m0[21u].z, fma(_897, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _893)) + cbModelParam._m0[21u].w;
        float _1828 = fma(_901, cbModelParam._m0[22u].z, fma(_897, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _893)) + cbModelParam._m0[22u].w;
        float _1832 = fma(_901, cbModelParam._m0[23u].z, fma(_897, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _893)) + cbModelParam._m0[23u].w;
        float _1835 = fma(_839, cbModelParam._m0[21u].z, fma(_838, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _837));
        float _1838 = fma(_839, cbModelParam._m0[22u].z, fma(_838, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _837));
        float _1841 = fma(_839, cbModelParam._m0[23u].z, fma(_838, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _837));
        float _2002;
        if (_1835 > 0.0)
        {
            _2002 = abs((1.0 - _1824) / _1835);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1824 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2002 = frontier_phi_28_24_ladder;
        }
        float _2281;
        if (_1838 > 0.0)
        {
            _2281 = abs((1.0 - _1828) / _1838);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1828 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2281 = frontier_phi_40_35_ladder;
        }
        float _2494;
        if (_1841 > 0.0)
        {
            _2494 = abs((1.0 - _1832) / _1841);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1832 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2494 = frontier_phi_49_46_ladder;
        }
        float _2496 = isnan(_2281) ? _2002 : (isnan(_2002) ? _2281 : min(_2002, _2281));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1835) + _1824;
        float _2502 = (_2497 * _1838) + _1828;
        float _2503 = (_2497 * _1841) + _1832;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2504;
        float _2507 = _2504 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2503 > _2507) || ((_2503 < _2505) || ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 < _2505) || (_2501 > _2507))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2702 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2503, cbModelParam._m0[17u].z, fma(_2502, cbModelParam._m0[17u].y, _2501 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2503, cbModelParam._m0[18u].z, fma(_2502, cbModelParam._m0[18u].y, _2501 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2503, cbModelParam._m0[19u].z, fma(_2502, cbModelParam._m0[19u].y, _2501 * cbModelParam._m0[19u].x))), _1770);
            frontier_phi_25_49_ladder = _2702.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2702.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2702.x * cbModelParam._m0[1u].z;
        }
        _1860 = frontier_phi_25_49_ladder_2;
        _1862 = frontier_phi_25_49_ladder_1;
        _1864 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1844 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_837, _838, _839), _1770);
        _1860 = _1844.x * cbModelParam._m0[1u].z;
        _1862 = _1844.y * cbModelParam._m0[1u].z;
        _1864 = _1844.z * cbModelParam._m0[1u].z;
    }
    float _1877 = (((_864 * _813) + _865) * _829) * ((cbModelParam._m0[1u].w * (_1860 - _1761)) + _1761);
    float _1879 = (((_864 * _815) + _865) * _829) * ((cbModelParam._m0[1u].w * (_1862 - _1763)) + _1763);
    float _1881 = (((_864 * _816) + _865) * _829) * ((cbModelParam._m0[1u].w * (_1864 - _1765)) + _1765);
    float _1884 = fma(_1881, cbSceneParam._m0[89u].z, fma(_1879, cbSceneParam._m0[89u].y, _1877 * cbSceneParam._m0[89u].x));
    float _1887 = fma(_1881, cbSceneParam._m0[90u].z, fma(_1879, cbSceneParam._m0[90u].y, _1877 * cbSceneParam._m0[90u].x));
    float _1890 = fma(_1881, cbSceneParam._m0[91u].z, fma(_1879, cbSceneParam._m0[91u].y, _1877 * cbSceneParam._m0[91u].x));
    vec4 _1898 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_751, _752));
    float _1900 = _1898.w;
    float _1912 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1900);
    float _1913 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1900);
    float _1914 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1900);
    uvec4 _1918 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1920 = _1918.x * 14u;
    uint _1921 = _1920 + 13u;
    float _1928 = _829 + (-1.0);
    float _1933 = (cbLight._m0[_1921].x * _1928) + 1.0;
    float _1934 = (cbLight._m0[_1921].y * _1928) + 1.0;
    float _1935 = (cbLight._m0[_1921].z * _1928) + 1.0;
    float _1936 = (cbLight._m0[_1921].w * _1928) + 1.0;
    uint _1937 = _1920 + 5u;
    float _1943 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
    uint _1947 = _1920 + 4u;
    float _1956 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
    uint _1960 = _1920 | 1u;
    float _1971 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_651, _652, _653));
    float _1974 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_651, _652, _653));
    float _4194 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _4205 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1979 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * 0.3183098733425140380859375;
    float _1981 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * 0.3183098733425140380859375;
    float _1988 = ((cbLight._m0[_1937].x * _1943) * _1981) + (((cbLight._m0[_1947].x * _1912) * _1956) * _1979);
    float _1989 = ((_1943 * cbLight._m0[_1937].y) * _1981) + (((cbLight._m0[_1947].y * _1913) * _1956) * _1979);
    float _1990 = ((_1943 * cbLight._m0[_1937].z) * _1981) + (((cbLight._m0[_1947].z * _1914) * _1956) * _1979);
    uvec4 _1994 = floatBitsToUint(cbLight._m0[_1920 + 12u]);
    bool _1996 = _1994.x == 0u;
    float _2007;
    float _2009;
    float _2011;
    if (_1996)
    {
        _2007 = _1988;
        _2009 = _1989;
        _2011 = _1990;
    }
    else
    {
        uint _2015 = _1920 + 6u;
        float _2031 = (dot(vec3(cbLight._m0[_1920 + 2u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2032 = _2031 * _2031;
        float _4216 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2033 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2034 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2007 = (((cbLight._m0[_2015].x * 0.3183098733425140380859375) * _2033) * _2034) + _1988;
        _2009 = (((cbLight._m0[_2015].y * 0.3183098733425140380859375) * _2033) * _2034) + _1989;
        _2011 = (((cbLight._m0[_2015].z * 0.3183098733425140380859375) * _2033) * _2034) + _1990;
    }
    bool _2014 = _1994.y == 0u;
    float _2052;
    float _2054;
    float _2056;
    if (_2014)
    {
        _2052 = _2007;
        _2054 = _2009;
        _2056 = _2011;
    }
    else
    {
        uint _2225 = _1920 + 7u;
        float _2241 = (dot(vec3(cbLight._m0[_1920 + 3u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2242 = _2241 * _2241;
        float _4232 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2243 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2244 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
        _2052 = (((cbLight._m0[_2225].x * 0.3183098733425140380859375) * _2243) * _2244) + _2007;
        _2054 = (((cbLight._m0[_2225].y * 0.3183098733425140380859375) * _2243) * _2244) + _2009;
        _2056 = (((cbLight._m0[_2225].z * 0.3183098733425140380859375) * _2243) * _2244) + _2011;
    }
    uint _2059 = _1920 + 8u;
    float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _654) * 0.949999988079071044921875);
    float _2073 = _2072 * _2072;
    float _2074 = cbLight._m0[_1920].x + _731;
    float _2075 = cbLight._m0[_1920].y + _732;
    float _2076 = cbLight._m0[_1920].z + _733;
    float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
    float _2081 = _2080 * _2074;
    float _2082 = _2080 * _2075;
    float _2083 = _2080 * _2076;
    float _2084 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1920].xyz));
    float _4248 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _4259 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _2088 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2089 = dot(vec3(_651, _652, _653), vec3(_2081, _2082, _2083));
    float _4270 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2093 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_2081, _2082, _2083));
    float _4281 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2097 = _2073 * _2073;
    float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
    float _2109 = exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0);
    float _2110 = 0.959999978542327880859375 - _810;
    float _2112 = 0.959999978542327880859375 - _811;
    float _2113 = 0.959999978542327880859375 - _812;
    float _2120 = 1.0 - _2073;
    float _2131 = (0.5 / (((_2088 * ((_2087 * _2120) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2120) + _2073) * _2087))) * _2087;
    float _4292 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2133 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
    uint _2147 = _1920 + 9u;
    float _2158 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1960].w)) * _654) * 0.949999988079071044921875);
    float _2159 = _2158 * _2158;
    float _2160 = cbLight._m0[_1960].x + _731;
    float _2161 = cbLight._m0[_1960].y + _732;
    float _2162 = cbLight._m0[_1960].z + _733;
    float _2166 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
    float _2167 = _2166 * _2160;
    float _2168 = _2166 * _2161;
    float _2169 = _2166 * _2162;
    float _2170 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1960].xyz));
    float _4303 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2174 = dot(vec3(_651, _652, _653), vec3(_2167, _2168, _2169));
    float _4314 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _2178 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_2167, _2168, _2169));
    float _4325 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2182 = _2159 * _2159;
    float _2186 = ((_2177 * _2177) * (_2182 + (-1.0))) + 1.0;
    float _2193 = exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0);
    float _2200 = 1.0 - _2159;
    float _2210 = (0.5 / (((_2088 * ((_2173 * _2200) + _2159)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2200) + _2159) * _2173))) * _2173;
    float _4336 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2212 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2182 / ((_2186 * _2186) * 3.141590118408203125));
    float _2222 = (((((_2193 * _2110) + _813) * cbLight._m0[_2147].x) * _2212) * _1943) + ((((cbLight._m0[_2059].x * _1912) * ((_2109 * _2110) + _813)) * _2133) * _1956);
    float _2223 = (((((_2193 * _2112) + _815) * cbLight._m0[_2147].y) * _2212) * _1943) + ((((cbLight._m0[_2059].y * _1913) * ((_2109 * _2112) + _815)) * _2133) * _1956);
    float _2224 = (((((_2193 * _2113) + _816) * cbLight._m0[_2147].z) * _2212) * _1943) + ((((cbLight._m0[_2059].z * _1914) * ((_2109 * _2113) + _816)) * _2133) * _1956);
    float _2286;
    float _2288;
    float _2290;
    if (_1996)
    {
        _2286 = _2222;
        _2288 = _2223;
        _2290 = _2224;
    }
    else
    {
        uint _2292 = _1920 + 2u;
        uint _2296 = _1920 + 10u;
        float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _654) * 0.949999988079071044921875);
        float _2311 = _2310 * _2310;
        float _2312 = cbLight._m0[_2292].x + _731;
        float _2313 = cbLight._m0[_2292].y + _732;
        float _2314 = cbLight._m0[_2292].z + _733;
        float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
        float _2319 = _2318 * _2312;
        float _2320 = _2318 * _2313;
        float _2321 = _2318 * _2314;
        float _2322 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2292].xyz));
        float _4347 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2326 = dot(vec3(_651, _652, _653), vec3(_2319, _2320, _2321));
        float _4358 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2330 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2319, _2320, _2321));
        float _4369 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2334 = _2311 * _2311;
        float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
        float _2345 = exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0);
        float _2352 = 1.0 - _2311;
        float _2362 = (0.5 / (((_2088 * ((_2325 * _2352) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2352) + _2311) * _2325))) * _2325;
        float _4380 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2364 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
        float _2365 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2286 = (((((_2345 * _2110) + _813) * cbLight._m0[_2296].x) * _2364) * _2365) + _2222;
        _2288 = (((((_2345 * _2112) + _815) * cbLight._m0[_2296].y) * _2364) * _2365) + _2223;
        _2290 = (((((_2345 * _2113) + _816) * cbLight._m0[_2296].z) * _2364) * _2365) + _2224;
    }
    float _2400;
    float _2402;
    float _2404;
    if (_2014)
    {
        _2400 = _2286;
        _2402 = _2288;
        _2404 = _2290;
    }
    else
    {
        uint _2411 = _1920 + 3u;
        uint _2415 = _1920 + 11u;
        float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2411].w)) * _654) * 0.949999988079071044921875);
        float _2430 = _2429 * _2429;
        float _2431 = cbLight._m0[_2411].x + _731;
        float _2432 = cbLight._m0[_2411].y + _732;
        float _2433 = cbLight._m0[_2411].z + _733;
        float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
        float _2438 = _2437 * _2431;
        float _2439 = _2437 * _2432;
        float _2440 = _2437 * _2433;
        float _2441 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2411].xyz));
        float _4396 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2445 = dot(vec3(_651, _652, _653), vec3(_2438, _2439, _2440));
        float _4407 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2449 = dot(vec3(cbLight._m0[_2411].xyz), vec3(_2438, _2439, _2440));
        float _4418 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2453 = _2430 * _2430;
        float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
        float _2464 = exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0);
        float _2471 = 1.0 - _2430;
        float _2481 = (0.5 / (((_2088 * ((_2444 * _2471) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2471) + _2430) * _2444))) * _2444;
        float _4429 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2483 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
        float _2484 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
        _2400 = (((((_2464 * _2110) + _813) * cbLight._m0[_2415].x) * _2483) * _2484) + _2286;
        _2402 = (((((_2464 * _2112) + _815) * cbLight._m0[_2415].y) * _2483) * _2484) + _2288;
        _2404 = (((((_2464 * _2113) + _816) * cbLight._m0[_2415].z) * _2483) * _2484) + _2290;
    }
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    if (_1918.y == 0u)
    {
        float _2559 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2560 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2559;
        float _2561 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2559;
        float _2562 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2559;
        uvec4 _2574 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2575 = _2574.x;
        uint _2586 = uint((float(_2574.y) * floor(float(uint(cbSceneParam._m0[85u].y * _752) / _2575))) + floor(float(uint(cbSceneParam._m0[85u].x * _751) / _2575)));
        float _2596 = (log2(_2562 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2597 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        uint _2600 = uint(isnan(14.0) ? _2597 : (isnan(_2597) ? 14.0 : min(_2597, 14.0)));
        uvec4 _2605 = texelFetch(g_lightClusterGridBuffer, int(((_2600 << 2u) + (_2586 << 6u)) >> 2u));
        uint _2606 = _2605.x;
        uint _2607 = _2574.z;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((((1u << ((_2607 >> 4u) & 15u)) + 4294967295u) & _2606) == 0u) || ((_2607 & 240u) == 0u))
        {
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
        }
        else
        {
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            uint _2866 = 0u;
            uint _2875;
            bool _2876;
            for (;;)
            {
                _2875 = texelFetch(g_lightClassification, int((((_2600 << 5u) + (_2586 << 9u)) + (_2866 << 2u)) >> 2u)).x;
                _2876 = _2875 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2876)
                {
                    frontier_phi_66_pred = _2860;
                    frontier_phi_66_pred_1 = _2865;
                    frontier_phi_66_pred_2 = _2864;
                    frontier_phi_66_pred_3 = _2863;
                    frontier_phi_66_pred_4 = _2862;
                    frontier_phi_66_pred_5 = _2861;
                }
                else
                {
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    uint _3011;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2875;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    for (;;)
                    {
                        uint _3015 = uint(findLSB(_3011)) + (_2866 << 5u);
                        uint _3012 = (_3011 + 4294967295u) & _3011;
                        uint _3017 = _3015 * 48u;
                        vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 3u)).x));
                        uint _3037 = (_3015 * 48u) + 4u;
                        vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 3u)).x));
                        uint _3056 = (_3015 * 48u) + 8u;
                        vec3 _3067 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x));
                        float _3071 = _3031.x - _2560;
                        float _3072 = _3031.y - _2561;
                        float _3073 = _3031.z - _2562;
                        float _3074 = dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073));
                        float _3077 = inversesqrt(_3074);
                        float _3078 = _3077 * _3071;
                        float _3079 = _3077 * _3072;
                        float _3080 = _3077 * _3073;
                        float _3081 = dot(vec3(_770, _773, _776), vec3(_3078, _3079, _3080));
                        float _3086 = 1.0 - (_3074 * _3031.w);
                        float _4455 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3087 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3088 = sqrt(_3074) * _3050.w;
                        float _3091 = 1.39999997615814208984375 / (_3088 + 1.39999997615814208984375);
                        float _3092 = _3091 * _3091;
                        float _3095 = ((1.0 - _3092) * _3081) + _3092;
                        float _3098 = _3088 * _3088;
                        float _3102 = ((isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))) * _3087) / ((_3098 * 0.699999988079071044921875) + 1.0);
                        float _3106 = (-0.0) - _2560;
                        float _3107 = (-0.0) - _2561;
                        float _3108 = (-0.0) - _2562;
                        float _3112 = inversesqrt(dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108)));
                        float _3113 = _3112 * _3106;
                        float _3114 = _3112 * _3107;
                        float _3115 = _3112 * _3108;
                        float _3123 = exp2(log2(1.0 / ((_3098 * 3.5) + 5.0)) * 0.25);
                        float _3124 = 1.0 - _845;
                        float _3131 = sqrt(1.0 - ((1.0 - (_3124 * _3124)) * (1.0 - (_3123 * _3123))));
                        float _3132 = _3131 * _3131;
                        float _3133 = _3132 * _3132;
                        float _3134 = _3113 + _3078;
                        float _3135 = _3114 + _3079;
                        float _3136 = _3115 + _3080;
                        float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
                        float _3144 = dot(vec3(_770, _773, _776), vec3(_3113, _3114, _3115));
                        float _4471 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3147 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3148 = dot(vec3(_770, _773, _776), vec3(_3140 * _3134, _3140 * _3135, _3140 * _3136));
                        float _4482 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3151 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3155 = ((_3151 * _3151) * (_3133 + (-1.0))) + 1.0;
                        float _3156 = _3091 * _3132;
                        float _3157 = _3156 * _3156;
                        float _3160 = ((1.0 - _3157) * _3081) + _3157;
                        float _4493 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3161 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3162 = 1.0 - _3132;
                        float _3172 = (0.5 / (((_3161 * ((_3147 * _3162) + _3132)) + 9.9999999392252902907785028219223e-09) + (((_3161 * _3162) + _3132) * _3147))) * _3161;
                        float _4504 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3183 = (((_3133 * 3.1415927410125732421875) * (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) / ((_3155 * _3155) * ((_3098 * 2.1991131305694580078125) + 3.141590118408203125))) * _3087;
                        _2935 = (_3102 * _3050.x) + _3008;
                        _2936 = (_3102 * _3050.y) + _3009;
                        _2937 = (_3102 * _3050.z) + _3010;
                        _2932 = (_3183 * _3067.x) + _3005;
                        _2933 = (_3183 * _3067.y) + _3006;
                        _2934 = (_3183 * _3067.z) + _3007;
                        if (_3012 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _3012;
                        }
                    }
                    frontier_phi_66_pred = _2932;
                    frontier_phi_66_pred_1 = _2937;
                    frontier_phi_66_pred_2 = _2936;
                    frontier_phi_66_pred_3 = _2935;
                    frontier_phi_66_pred_4 = _2934;
                    frontier_phi_66_pred_5 = _2933;
                }
                _2708 = frontier_phi_66_pred;
                _2718 = frontier_phi_66_pred_1;
                _2716 = frontier_phi_66_pred_2;
                _2714 = frontier_phi_66_pred_3;
                _2712 = frontier_phi_66_pred_4;
                _2710 = frontier_phi_66_pred_5;
                uint _2867 = _2866 + 1u;
                if (_2867 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2860 = _2708;
                    _2861 = _2710;
                    _2862 = _2712;
                    _2863 = _2714;
                    _2864 = _2716;
                    _2865 = _2718;
                    _2866 = _2867;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
        }
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.z;
        uint _2724 = (_2722 >> 8u) & 15u;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        if (((4294967295u << _2724) & _2606) == 0u)
        {
            _2828 = _2707;
            _2830 = _2709;
            _2832 = _2711;
            _2834 = _2713;
            _2836 = _2715;
            _2838 = _2717;
        }
        else
        {
            float _2853 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
            float _2854 = _2853 * _2560;
            float _2855 = _2853 * _2561;
            float _2856 = _2853 * _2562;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2724 < ((_2722 >> 12u) & 15u))
            {
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2988 = _2707;
                float _2989 = _2709;
                float _2990 = _2711;
                float _2991 = _2713;
                float _2992 = _2715;
                float _2993 = _2717;
                uint _2994 = _2724;
                uint _3003;
                bool _3004;
                for (;;)
                {
                    _3003 = texelFetch(g_lightClassification, int((((_2600 << 5u) + (_2586 << 9u)) + (_2994 << 2u)) >> 2u)).x;
                    _3004 = _3003 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3004)
                    {
                        frontier_phi_77_pred = _2993;
                        frontier_phi_77_pred_1 = _2992;
                        frontier_phi_77_pred_2 = _2991;
                        frontier_phi_77_pred_3 = _2990;
                        frontier_phi_77_pred_4 = _2989;
                        frontier_phi_77_pred_5 = _2988;
                    }
                    else
                    {
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3210 = _2988;
                        float _3211 = _2989;
                        float _3212 = _2990;
                        float _3213 = _2991;
                        float _3214 = _2992;
                        float _3215 = _2993;
                        uint _3216 = _3003;
                        uint _3217;
                        vec4 _3242;
                        float _3243;
                        vec4 _3258;
                        vec3 _3270;
                        vec4 _3285;
                        vec4 _3301;
                        float _3347;
                        bool _3348;
                        for (;;)
                        {
                            uint _3227 = ((_2994 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3216));
                            _3217 = (_3216 + 4294967295u) & _3216;
                            uint _3229 = _3227 * 40u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            _3243 = _3242.w;
                            uint _3245 = (_3227 * 40u) + 4u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3227 * 40u) + 8u;
                            _3270 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x));
                            uint _3272 = (_3227 * 40u) + 16u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3288 = (_3227 * 40u) + 20u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3227 * 40u) + 24u;
                            vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3322 = (_3227 * 40u) + 28u;
                            vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            _3347 = fma(_2562, _3335.z, fma(_2561, _3335.y, _3335.x * _2560)) + _3335.w;
                            _3348 = !((fma(_2562, _3316.z, fma(_2561, _3316.y, _3316.x * _2560)) + _3316.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3348)
                            {
                                float _3375 = _3242.x - _2560;
                                float _3376 = _3242.y - _2561;
                                float _3377 = _3242.z - _2562;
                                float _3378 = dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377));
                                float _3381 = inversesqrt(_3378);
                                float _3382 = _3381 * _3375;
                                float _3383 = _3381 * _3376;
                                float _3384 = _3381 * _3377;
                                float _3388 = 1.0 - (_3378 / (_3243 * _3243));
                                float _4515 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3393 = sqrt(_3378) * _3258.w;
                                float _3395 = 1.39999997615814208984375 / (_3393 + 1.39999997615814208984375);
                                float _3396 = _3395 * _3395;
                                float _3399 = ((1.0 - _3396) * dot(vec3(_3382, _3383, _3384), vec3(_770, _773, _776))) + _3396;
                                float _3402 = _3393 * _3393;
                                float _3406 = (fma(_2562, _3285.z, fma(_2561, _3285.y, _3285.x * _2560)) + _3285.w) / _3347;
                                float _3407 = (fma(_2562, _3301.z, fma(_2561, _3301.y, _3301.x * _2560)) + _3301.w) / _3347;
                                float _3411 = 1.0 - dot(vec2(_3406, _3407), vec2(_3406, _3407));
                                float _4531 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3413 = _3412 * (((isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0))) * _3389) / ((_3402 * 0.699999988079071044921875) + 1.0));
                                float _3425 = exp2(log2(1.0 / ((_3402 * 3.5) + 5.0)) * 0.25);
                                float _3426 = 1.0 - _845;
                                float _3433 = sqrt(1.0 - ((1.0 - (_3426 * _3426)) * (1.0 - (_3425 * _3425))));
                                float _3434 = _3433 * _3433;
                                float _3435 = _3434 * _3434;
                                float _3436 = _3382 - _2854;
                                float _3437 = _3383 - _2855;
                                float _3438 = _3384 - _2856;
                                float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                                float _3446 = dot(vec3(_770, _773, _776), vec3((-0.0) - _2854, (-0.0) - _2855, (-0.0) - _2856));
                                float _4542 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3449 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3450 = dot(vec3(_770, _773, _776), vec3(_3442 * _3436, _3442 * _3437, _3442 * _3438));
                                float _4553 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3453 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3457 = ((_3453 * _3453) * (_3435 + (-1.0))) + 1.0;
                                float _3458 = _3395 * _3434;
                                float _3459 = _3458 * _3458;
                                float _3465 = ((1.0 - _3459) * dot(vec3(_770, _773, _776), vec3(_3382, _3383, _3384))) + _3459;
                                float _4564 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3467 = 1.0 - _3434;
                                float _3477 = (0.5 / (((_3466 * ((_3449 * _3467) + _3434)) + 9.9999999392252902907785028219223e-09) + (((_3466 * _3467) + _3434) * _3449))) * _3466;
                                float _4575 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3487 = (_3412 * _3389) * (((_3435 * 3.1415927410125732421875) * (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) / ((_3457 * _3457) * ((_3402 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3413 * _3258.y;
                                frontier_phi_83_pred_1 = _3413 * _3258.x;
                                frontier_phi_83_pred_2 = _3487 * _3270.z;
                                frontier_phi_83_pred_3 = _3487 * _3270.y;
                                frontier_phi_83_pred_4 = _3487 * _3270.x;
                                frontier_phi_83_pred_5 = _3413 * _3258.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3495 = frontier_phi_83_pred;
                            _3494 = frontier_phi_83_pred_1;
                            _3493 = frontier_phi_83_pred_2;
                            _3492 = frontier_phi_83_pred_3;
                            _3491 = frontier_phi_83_pred_4;
                            _3496 = frontier_phi_83_pred_5;
                            _3200 = _3494 + _3213;
                            _3201 = _3495 + _3214;
                            _3202 = _3496 + _3215;
                            _3197 = _3491 + _3210;
                            _3198 = _3492 + _3211;
                            _3199 = _3493 + _3212;
                            if (_3217 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3217;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3202;
                        frontier_phi_77_pred_1 = _3201;
                        frontier_phi_77_pred_2 = _3200;
                        frontier_phi_77_pred_3 = _3199;
                        frontier_phi_77_pred_4 = _3198;
                        frontier_phi_77_pred_5 = _3197;
                    }
                    _2839 = frontier_phi_77_pred;
                    _2837 = frontier_phi_77_pred_1;
                    _2835 = frontier_phi_77_pred_2;
                    _2833 = frontier_phi_77_pred_3;
                    _2831 = frontier_phi_77_pred_4;
                    _2829 = frontier_phi_77_pred_5;
                    uint _2995 = _2994 + 1u;
                    if (_2995 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2988 = _2829;
                        _2989 = _2831;
                        _2990 = _2833;
                        _2991 = _2835;
                        _2992 = _2837;
                        _2993 = _2839;
                        _2994 = _2995;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2833;
                frontier_phi_58_59_ladder_1 = _2839;
                frontier_phi_58_59_ladder_2 = _2837;
                frontier_phi_58_59_ladder_3 = _2835;
                frontier_phi_58_59_ladder_4 = _2831;
                frontier_phi_58_59_ladder_5 = _2829;
            }
            else
            {
                frontier_phi_58_59_ladder = _2711;
                frontier_phi_58_59_ladder_1 = _2717;
                frontier_phi_58_59_ladder_2 = _2715;
                frontier_phi_58_59_ladder_3 = _2713;
                frontier_phi_58_59_ladder_4 = _2709;
                frontier_phi_58_59_ladder_5 = _2707;
            }
            _2828 = frontier_phi_58_59_ladder_5;
            _2830 = frontier_phi_58_59_ladder_4;
            _2832 = frontier_phi_58_59_ladder;
            _2834 = frontier_phi_58_59_ladder_3;
            _2836 = frontier_phi_58_59_ladder_2;
            _2838 = frontier_phi_58_59_ladder_1;
        }
        float _2843 = isnan(1.0) ? _829 : (isnan(_829) ? 1.0 : min(_829, 1.0));
        _2619 = (_2843 * _2834) + _2052;
        _2621 = (_2843 * _2836) + _2054;
        _2623 = (_2843 * _2838) + _2056;
        _2625 = ((_2828 * _813) * _2843) + _2400;
        _2627 = ((_2830 * _815) * _2843) + _2402;
        _2629 = ((_2832 * _816) * _2843) + _2404;
    }
    else
    {
        _2619 = _2052;
        _2621 = _2054;
        _2623 = _2056;
        _2625 = _2400;
        _2627 = _2402;
        _2629 = _2404;
    }
    float _4591 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4602 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _4613 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _2646 = ((isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2619 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _829))) + ((_2625 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1669)) * cbPerFrame._m0[3u].x);
    float _2647 = ((isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2621 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _829))) + ((_2627 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1669)) * cbPerFrame._m0[3u].x);
    float _2648 = ((isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2623 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _829))) + ((_2629 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1669)) * cbPerFrame._m0[3u].x);
    uint _2649 = _238 + 6u;
    float _2657 = _751 / cbSceneParam._m0[86u].x;
    float _2658 = _752 / cbSceneParam._m0[86u].y;
    vec4 _2672 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, (log2((isnan(cbSceneParam._m0[77u].w) ? _673 : (isnan(_673) ? cbSceneParam._m0[77u].w : min(_673, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2674 = _2672.x;
    float _2675 = _2672.y;
    float _2676 = _2672.z;
    float _2677 = _2672.w;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_673 > cbSceneParam._m0[78u].w)
    {
        float _2732 = isnan(_673) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _673 : min(cbSceneParam._m0[80u].w, _673));
        float _2733 = _2732 / _673;
        float _2744 = _2733 * _724;
        float _2745 = _725 * _2733;
        float _2746 = (-0.0) - _2745;
        float _2748 = _2733 * _726;
        float _2750 = (cbSceneParam._m0[77u].w * _2746) / _2732;
        float _2751 = _2750 + cbSceneParam._m0[79u].w;
        float _2752 = cbSceneParam._m0[79u].w - _2745;
        float _2758 = sqrt(((_2744 * _2744) + (_2745 * _2745)) + (_2748 * _2748));
        float _2761 = (1.0 - (cbSceneParam._m0[77u].w / _2732)) * _2758;
        float _2766 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2768 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2945;
        if (abs((_2746 - _2750) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2945 = ((((_2751 > 0.0) ? exp2(_2766 * _2751) : (2.0 - exp2(_2768 * _2751))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2761;
        }
        else
        {
            float _2889 = 1.0 / cbSceneParam._m0[80u].x;
            float _2890 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : max(_2751, _2752));
            float _2891 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : min(_2751, _2752));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            _2945 = ((abs(_2758 / _2746) * cbSceneParam._m0[80u].y) * ((((_2900 - _2901) * 2.0) - ((exp2(_2766 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0)))) - exp2(_2766 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))))) * _2889)) - ((exp2(_2768 * _2900) - exp2(_2768 * _2901)) * _2889))) + (_2761 * cbSceneParam._m0[80u].z);
        }
        vec4 _2947 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, 1.0), 0.0);
        float _2956 = exp2((_2945 * (-1.44269502162933349609375)) * (1.0 - _2947.w));
        float _2957 = log2(_2956);
        float _2973 = log2(_2677);
        _2770 = (exp2(_2973 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].x)) * _2947.x) / cbSceneParam._m0[78u].x)) + _2674;
        _2772 = (exp2(_2973 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].y)) * _2947.y) / cbSceneParam._m0[78u].y)) + _2675;
        _2774 = (exp2(_2973 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].z)) * _2947.z) / cbSceneParam._m0[78u].z)) + _2676;
        _2776 = _2956 * _2677;
    }
    else
    {
        _2770 = _2674;
        _2772 = _2675;
        _2774 = _2676;
        _2776 = _2677;
    }
    bool _2983;
    vec4 _2786;
    vec4 _2808;
    float _2810;
    float _2814;
    float _2815;
    float _2816;
    float _2817;
    bool _2827;
    for (;;)
    {
        _2786 = cbMatDynParam._m0[0u];
        float _2788 = roundEven(_2786.y);
        bool _2789 = _2788 == 3.0;
        float _2790 = log2(_2776);
        float _2797 = exp2(_2790 * cbSceneParam._m0[78u].x) * _2646;
        float _2798 = exp2(_2790 * cbSceneParam._m0[78u].y) * _2647;
        float _2799 = exp2(_2790 * cbSceneParam._m0[78u].z) * _2648;
        float _2806 = _740 + (-0.5);
        _2808 = cbMtdParam._m0[1u];
        _2810 = _2808.y * _2806;
        float _2813 = (_2788 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2814 = _2813 * (_2789 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2770)));
        _2815 = _2813 * (_2789 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2772)));
        _2816 = _2813 * (_2789 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2774)));
        _2817 = _2806 * 0.999000012874603271484375;
        _2827 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2827)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2817) < 0.5)
            {
                _2983 = true;
                break;
            }
        }
        uint _2924 = _789 + uint(_2786.w);
        if ((cbInstanceData._m0[_2924].w < 1.0) && ((cbInstanceData._m0[_2924].w + _2817) < 0.5))
        {
            _2983 = true;
            break;
        }
        if ((_2810 + 1.0) < _2808.x)
        {
            _2983 = true;
            break;
        }
        _2983 = false;
        break;
    }
    float _3188;
    if (_2983)
    {
        discard_state = true;
        _3188 = 0.0;
    }
    else
    {
        _3188 = cbInstanceData._m0[_2649].w;
    }
    SV_Target.x = _2814;
    SV_Target.y = _2815;
    SV_Target.z = _2816;
    SV_Target.w = _3188;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2649].w;
    discard_exit();
}


