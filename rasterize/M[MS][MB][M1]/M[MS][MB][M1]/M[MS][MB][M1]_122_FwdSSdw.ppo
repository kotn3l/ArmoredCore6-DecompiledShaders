#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1437;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3787 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3798 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3809 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].y) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3820 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _439 = (_432 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _440 = (_432 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _441 = (_432 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _445 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _439;
    float _448 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _440;
    float _451 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _441;
    float _458 = ((_439 - _445) * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) + _445;
    float _459 = ((_440 - _448) * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) + _448;
    float _460 = ((_441 - _451) * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) + _451;
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    float _535 = ((_505.z - _526) * _432) + _526;
    float _538 = ((((_505.x - _524) * _432) + _524) * 2.0) + (-1.0);
    float _539 = ((((_505.y - _525) * _432) + _525) * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3831 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))));
    vec4 _565 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _577 = (_538 + ((((_478.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_565.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _578 = (_539 + ((((_478.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_565.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _581 = fma(_545, _250, fma(_578, _257, _577 * _243));
    float _584 = fma(_545, _251, fma(_578, _258, _577 * _244));
    float _587 = fma(_545, _252, fma(_578, _259, _577 * _245));
    float _591 = inversesqrt(dot(vec3(_581, _584, _587), vec3(_581, _584, _587)));
    vec4 _618 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _620 = _618.x;
    float _621 = 1.0 - _620;
    float _625 = ((_620 - _621) * cbMtdParam._m0[24u].z) + _621;
    float _627 = (cbMtdParam._m0[19u].x + dot(vec4(_591 * _581, _591 * _584, _591 * _587, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_625 * cbMtdParam._m0[21u].z);
    float _3842 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _630 = (-0.0) - cbMtdParam._m0[24u].x;
    float _632 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _632 : (isnan(_632) ? 1.0 : min(_632, 1.0));
    float _640 = _628 - ((_628 * TEXCOORD_8.x) * _633);
    float _641 = _628 - ((_628 * TEXCOORD_8.y) * _633);
    float _642 = _628 - ((_628 * TEXCOORD_8.z) * _633);
    float _649 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _653 = ((isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : min(_649, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _661 = (_653 - (((_625 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _653))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3873 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _662 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _666 = ((_640 * (cbMtdParam._m0[17u].x - _458)) * _662) + _458;
    float _667 = ((_641 * (cbMtdParam._m0[17u].y - _459)) * _662) + _459;
    float _668 = ((_642 * (cbMtdParam._m0[17u].z - _460)) * _662) + _460;
    vec4 _680 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _682 = _680.x;
    float _683 = 1.0 - _682;
    float _708 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_682 - _683) * cbMtdParam._m0[24u].w) + _683) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3884 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _709 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _717 = ((((cbMtdParam._m0[10u].x - _666) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _709) + _666;
    float _718 = ((((cbMtdParam._m0[10u].y - _667) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _709) + _667;
    float _719 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _668)) * _709) + _668;
    vec4 _745 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _747 = _745.x;
    float _765 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _300) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _301) + cbTextureTilingScale._m0[9u].w)).x - _747) * _432) + _747;
    float _769 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _765) * cbMtdParam._m0[19u].z) + _765;
    float _772 = _769 - ((_662 * _640) * _769);
    float _774 = _772 - (_772 * _709);
    float _779 = (((_478.z - _535) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _535;
    float _783 = ((_565.z - _779) * cbMtdParam._m0[19u].w) + _779;
    vec4 _797 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _804 = (_797.x * 2.0) + (-1.0);
    float _805 = (_797.y * 2.0) + (-1.0);
    float _806 = dot(vec2(_804, _805), vec2(_804, _805));
    float _3895 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _815 = (((_797.z - _783) * _640) * _662) + _783;
    float _818 = ((cbMtdParam._m0[23u].y - _815) * _709) + _815;
    vec4 _837 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _843 = (_837.x * 2.0) + (-1.0);
    float _844 = (_837.y * 2.0) + (-1.0);
    float _845 = dot(vec2(_843, _844), vec2(_843, _844));
    float _3906 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _865 = (((cbMtdParam._m0[21u].x * _577) + ((_804 - _577) * _640)) * _662) + _577;
    float _866 = (((cbMtdParam._m0[21u].x * _578) + ((_805 - _578) * _641)) * _662) + _578;
    float _867 = (((sqrt(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) - _545) * _642) * _662) + _545;
    float _878 = (((_843 - _865) + (_865 * cbMtdParam._m0[22u].z)) * _709) + _865;
    float _879 = (((_844 - _866) + (_866 * cbMtdParam._m0[22u].z)) * _709) + _866;
    float _880 = ((sqrt(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) - _867) * _709) + _867;
    float _884 = cbMtdParam._m0[22u].x + _565.w;
    float _887 = fma(_880, _250, fma(_879, _257, _878 * _243));
    float _890 = fma(_880, _251, fma(_879, _258, _878 * _244));
    float _893 = fma(_880, _252, fma(_879, _259, _878 * _245));
    float _897 = inversesqrt(dot(vec3(_887, _890, _893), vec3(_887, _890, _893)));
    float _898 = _897 * _887;
    float _899 = _897 * _890;
    float _900 = _897 * _893;
    float _3917 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _901 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _3939 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _3950 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _3961 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _3972 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _906 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _920 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _970 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _960);
    float _971 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _960);
    float _972 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _960);
    float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
    float _977 = _970 * _976;
    float _978 = _971 * _976;
    float _979 = _972 * _976;
    float _985 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _986 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1004 = fma(_900, cbSceneParam._m0[5u].z, fma(_899, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _898));
    float _1007 = fma(_900, cbSceneParam._m0[6u].z, fma(_899, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _898));
    float _1010 = fma(_900, cbSceneParam._m0[7u].z, fma(_899, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _898));
    uint _1024 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1030 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * cbInstanceData._m0[_1024].x;
    float _1031 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * cbInstanceData._m0[_1024].y;
    float _1032 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * cbInstanceData._m0[_1024].z;
    float _3983 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _4005 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _1036 = 1.0 - _906;
    float _1037 = _1033 * _1036;
    float _1038 = _1034 * _1036;
    float _1039 = _1035 * _1036;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _906;
    float _1045 = (_1034 + (-0.039999999105930328369140625)) * _906;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _906;
    float _1047 = _1044 + 0.039999999105930328369140625;
    float _1049 = _1045 + 0.039999999105930328369140625;
    float _1050 = _1046 + 0.039999999105930328369140625;
    vec4 _1059 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _985, cbSceneParam._m0[86u].y * _986));
    float _1063 = ((isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * TEXCOORD_5.w) * _1059.x;
    float _1064 = dot(vec3(_898, _899, _900), vec3(_977, _978, _979));
    float _1067 = _1064 * 2.0;
    float _1071 = (_1067 * _898) - _977;
    float _1072 = (_1067 * _899) - _978;
    float _1073 = (_1067 * _900) - _979;
    float _1077 = abs(dot(vec3(_977, _978, _979), vec3(_898, _899, _900)));
    float _4016 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1079 = sqrt(_901);
    float _1092 = exp2((_1079 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1079 * 3.0));
    float _1098 = (1.0 - _1092) * ((_1079 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1099 = _1092 * _1079;
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1135 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1436;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1161 = fma(_1135, cbModelParam._m0[26u].z, fma(_1131, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127));
        float _1165 = fma(_1135, cbModelParam._m0[27u].z, fma(_1131, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127));
        float _1169 = fma(_1135, cbModelParam._m0[28u].z, fma(_1131, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127));
        float _1194 = _1127 + _898;
        float _1195 = _1131 + _899;
        float _1196 = _1135 + _900;
        float _1206 = fma(_1196, cbModelParam._m0[26u].z, fma(_1195, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1194)) - _1161;
        float _1207 = fma(_1196, cbModelParam._m0[27u].z, fma(_1195, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1194)) - _1165;
        float _1208 = fma(_1196, cbModelParam._m0[28u].z, fma(_1195, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1194)) - _1169;
        float _1212 = inversesqrt(dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208)));
        float _1225 = ((_1212 * _1206) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1161 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1212 * _1207) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1165 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1212 * _1208) / cbModelParam._m0[34u].z) + ((((((_1169 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        float _1264 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1230.x + (-0.5));
        float _1266 = _1264 * (_1230.y + (-0.5));
        float _1267 = _1264 * (_1230.z + (-0.5));
        float _1274 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1237.x + (-0.5));
        float _1276 = _1274 * (_1237.y + (-0.5));
        float _1277 = _1274 * (_1237.z + (-0.5));
        float _1284 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1244.x + (-0.5));
        float _1286 = _1284 * (_1244.y + (-0.5));
        float _1287 = _1284 * (_1244.z + (-0.5));
        float _1294 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1251.x + (-0.5));
        float _1296 = _1294 * (_1251.y + (-0.5));
        float _1297 = _1294 * (_1251.z + (-0.5));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = _1265 * 0.5;
        float _1302 = _1275 * 0.5;
        float _1303 = _1285 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1318 = (dot(vec3(_898, _899, _900), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1328 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4064 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1330 + 1.0))) + _1335) * _1298;
        float _1345 = _1266 * 0.5;
        float _1346 = _1276 * 0.5;
        float _1347 = _1286 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_898, _899, _900), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4097 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1372 + 1.0))) + _1377) * _1299;
        float _1387 = _1267 * 0.5;
        float _1388 = _1277 * 0.5;
        float _1389 = _1287 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_898, _899, _900), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4130 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1414 + 1.0))) + _1419) * _1300;
        _1436 = _1267;
        _1438 = _1266;
        _1439 = _1265;
        _1440 = _1277;
        _1441 = _1276;
        _1442 = _1275;
        _1443 = _1287;
        _1444 = _1286;
        _1445 = _1285;
        _1446 = _1300;
        _1447 = _1299;
        _1448 = _1298;
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
    }
    else
    {
        _1436 = _1437;
        _1438 = _1437;
        _1439 = _1437;
        _1440 = _1437;
        _1441 = _1437;
        _1442 = _1437;
        _1443 = _1437;
        _1444 = _1437;
        _1445 = _1437;
        _1446 = _1437;
        _1447 = _1437;
        _1448 = _1437;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1476 = fma(_1135, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1127));
        float _1480 = fma(_1135, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1127));
        float _1484 = fma(_1135, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1127));
        float _1507 = _1127 + _898;
        float _1508 = _1131 + _899;
        float _1509 = _1135 + _900;
        float _1519 = fma(_1509, cbModelParam._m0[30u].z, fma(_1508, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1507)) - _1476;
        float _1520 = fma(_1509, cbModelParam._m0[31u].z, fma(_1508, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1507)) - _1480;
        float _1521 = fma(_1509, cbModelParam._m0[32u].z, fma(_1508, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1507)) - _1484;
        float _1525 = inversesqrt(dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521)));
        float _1538 = ((_1525 * _1519) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1476 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1539 = ((_1525 * _1520) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1480 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1540 = ((_1525 * _1521) / cbModelParam._m0[35u].z) + ((((((_1484 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        float _1575 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1542.x + (-0.5));
        float _1577 = _1575 * (_1542.y + (-0.5));
        float _1578 = _1575 * (_1542.z + (-0.5));
        float _1585 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1549.x + (-0.5));
        float _1587 = _1585 * (_1549.y + (-0.5));
        float _1588 = _1585 * (_1549.z + (-0.5));
        float _1595 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1556.x + (-0.5));
        float _1597 = _1595 * (_1556.y + (-0.5));
        float _1598 = _1595 * (_1556.z + (-0.5));
        float _1605 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1563.x + (-0.5));
        float _1607 = _1605 * (_1563.y + (-0.5));
        float _1608 = _1605 * (_1563.z + (-0.5));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = _1576 * 0.5;
        float _1613 = _1586 * 0.5;
        float _1614 = _1596 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_898, _899, _900), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4193 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1639 + 1.0))) + _1644) * _1609;
        float _1654 = _1577 * 0.5;
        float _1655 = _1587 * 0.5;
        float _1656 = _1597 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_898, _899, _900), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4226 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1681 + 1.0))) + _1686) * _1610;
        float _1696 = _1578 * 0.5;
        float _1697 = _1588 * 0.5;
        float _1698 = _1598 * 0.5;
        float _1699 = dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698));
        float _1704 = (_1699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1699);
        float _1712 = (dot(vec3(_898, _899, _900), vec3(_1704 * _1696, _1704 * _1697, _1704 * _1698)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1721 = sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1723 = _1722 * 2.0;
        float _1727 = (1.0 - _1722) / (_1722 + 1.0);
        float _4259 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1737 = ((((1.0 - _1728) * (_1723 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1723 + 1.0))) + _1728) * _1611;
        _1745 = _1578;
        _1746 = _1577;
        _1747 = _1576;
        _1748 = _1588;
        _1749 = _1587;
        _1750 = _1586;
        _1751 = _1598;
        _1752 = _1597;
        _1753 = _1596;
        _1754 = _1611;
        _1755 = _1610;
        _1756 = _1609;
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
        _1758 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
        _1759 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)));
    }
    else
    {
        _1745 = _1437;
        _1746 = _1437;
        _1747 = _1437;
        _1748 = _1437;
        _1749 = _1437;
        _1750 = _1437;
        _1751 = _1437;
        _1752 = _1437;
        _1753 = _1437;
        _1754 = _1437;
        _1755 = _1437;
        _1756 = _1437;
        _1757 = 0.0;
        _1758 = 0.0;
        _1759 = 0.0;
    }
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1449)) + _1449;
    float _1770 = (cbModelParam._m0[1u].x * (_1758 - _1450)) + _1450;
    float _1771 = (cbModelParam._m0[1u].x * (_1759 - _1451)) + _1451;
    float _1792 = fma(_1771, cbSceneParam._m0[89u].z, fma(_1770, cbSceneParam._m0[89u].y, _1769 * cbSceneParam._m0[89u].x));
    float _1795 = fma(_1771, cbSceneParam._m0[90u].z, fma(_1770, cbSceneParam._m0[90u].y, _1769 * cbSceneParam._m0[90u].x));
    float _1798 = fma(_1771, cbSceneParam._m0[91u].z, fma(_1770, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1769));
    float _1813 = _1071 * 0.5;
    float _1814 = _1072 * 0.5;
    float _1815 = _1073 * 0.5;
    float _1816 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1747, _1750, _1753, _1756));
    float _1819 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1746, _1749, _1752, _1755));
    float _1822 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1856;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1829 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1436, _1440, _1443, _1446));
        float _1833 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1438, _1441, _1444, _1447));
        float _1837 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1844 = dot(vec4(cbModelParam._m0[39u]), vec4(_1813, _1814, _1815, 1.0));
        _1856 = dot(vec3(isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1844) ? 0.0 : (isnan(0.0) ? _1844 : max(0.0, _1844))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1856 = 1.0;
    }
    float _1867;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1858 = dot(vec4(cbModelParam._m0[40u]), vec4(_1813, _1814, _1815, 1.0));
        _1867 = dot(vec3(isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1858) ? 0.0 : (isnan(0.0) ? _1858 : max(0.0, _1858))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1867 = 1.0;
    }
    float _1871 = (_1867 * cbModelParam._m0[1u].x) + (_1856 * (1.0 - cbModelParam._m0[1u].x));
    float _1881 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _901);
    float _1882 = isnan(_1881) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1881 : min(cbModelParam._m0[25u].z, _1881));
    float _1963;
    float _1965;
    float _1967;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1930 = fma(_1135, cbModelParam._m0[13u].z, fma(_1131, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1127)) + cbModelParam._m0[13u].w;
        float _1934 = fma(_1135, cbModelParam._m0[14u].z, fma(_1131, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1127)) + cbModelParam._m0[14u].w;
        float _1938 = fma(_1135, cbModelParam._m0[15u].z, fma(_1131, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1127)) + cbModelParam._m0[15u].w;
        float _1941 = fma(_1073, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071));
        float _1944 = fma(_1073, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071));
        float _1947 = fma(_1073, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071));
        float _1975;
        if (_1941 > 0.0)
        {
            _1975 = abs((1.0 - _1930) / _1941);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1930 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1975 = frontier_phi_14_12_ladder;
        }
        float _2199;
        if (_1944 > 0.0)
        {
            _2199 = abs((1.0 - _1934) / _1944);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1934 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2199 = frontier_phi_23_19_ladder;
        }
        float _2456;
        if (_1947 > 0.0)
        {
            _2456 = abs((1.0 - _1938) / _1947);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1938 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2456 = frontier_phi_35_30_ladder;
        }
        float _2458 = isnan(_2199) ? _1975 : (isnan(_1975) ? _2199 : min(_1975, _2199));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1941) + _1930;
        float _2464 = (_2459 * _1944) + _1934;
        float _2465 = (_2459 * _1947) + _1938;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2468 = (-1.0) - _2466;
        float _2470 = _2466 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2465 > _2470) || ((_2465 < _2468) || ((_2464 > _2470) || ((_2464 < _2468) || ((_2463 < _2468) || (_2463 > _2470))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2593 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2465, cbModelParam._m0[9u].z, fma(_2464, cbModelParam._m0[9u].y, _2463 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2465, cbModelParam._m0[10u].z, fma(_2464, cbModelParam._m0[10u].y, _2463 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2465, cbModelParam._m0[11u].z, fma(_2464, cbModelParam._m0[11u].y, _2463 * cbModelParam._m0[11u].x))), _1882);
            frontier_phi_13_35_ladder = _2593.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2593.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2593.x * cbModelParam._m0[1u].y;
        }
        _1963 = frontier_phi_13_35_ladder_2;
        _1965 = frontier_phi_13_35_ladder_1;
        _1967 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1951 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1071, _1072, _1073), _1882);
        _1963 = _1951.x * cbModelParam._m0[1u].y;
        _1965 = _1951.y * cbModelParam._m0[1u].y;
        _1967 = _1951.z * cbModelParam._m0[1u].y;
    }
    float _1971 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _901);
    float _1972 = isnan(_1971) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1971 : min(cbModelParam._m0[25u].w, _1971));
    float _2062;
    float _2064;
    float _2066;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2026 = fma(_1135, cbModelParam._m0[21u].z, fma(_1131, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1127)) + cbModelParam._m0[21u].w;
        float _2030 = fma(_1135, cbModelParam._m0[22u].z, fma(_1131, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1127)) + cbModelParam._m0[22u].w;
        float _2034 = fma(_1135, cbModelParam._m0[23u].z, fma(_1131, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1127)) + cbModelParam._m0[23u].w;
        float _2037 = fma(_1073, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071));
        float _2040 = fma(_1073, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071));
        float _2043 = fma(_1073, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071));
        float _2204;
        if (_2037 > 0.0)
        {
            _2204 = abs((1.0 - _2026) / _2037);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2026 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2204 = frontier_phi_25_21_ladder;
        }
        float _2483;
        if (_2040 > 0.0)
        {
            _2483 = abs((1.0 - _2030) / _2040);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2030 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2483 = frontier_phi_37_32_ladder;
        }
        float _2696;
        if (_2043 > 0.0)
        {
            _2696 = abs((1.0 - _2034) / _2043);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2034 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2696 = frontier_phi_46_43_ladder;
        }
        float _2698 = isnan(_2483) ? _2204 : (isnan(_2204) ? _2483 : min(_2204, _2483));
        float _2699 = isnan(_2696) ? _2698 : (isnan(_2698) ? _2696 : min(_2698, _2696));
        float _2703 = (_2699 * _2037) + _2026;
        float _2704 = (_2699 * _2040) + _2030;
        float _2705 = (_2699 * _2043) + _2034;
        float _2706 = _2699 * 9.9999997473787516355514526367188e-05;
        float _2707 = (-1.0) - _2706;
        float _2709 = _2706 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2705 > _2709) || ((_2705 < _2707) || ((_2704 > _2709) || ((_2704 < _2707) || ((_2703 < _2707) || (_2703 > _2709))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2904 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2705, cbModelParam._m0[17u].z, fma(_2704, cbModelParam._m0[17u].y, _2703 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2705, cbModelParam._m0[18u].z, fma(_2704, cbModelParam._m0[18u].y, _2703 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2705, cbModelParam._m0[19u].z, fma(_2704, cbModelParam._m0[19u].y, _2703 * cbModelParam._m0[19u].x))), _1972);
            frontier_phi_22_46_ladder = _2904.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2904.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2904.x * cbModelParam._m0[1u].z;
        }
        _2062 = frontier_phi_22_46_ladder_2;
        _2064 = frontier_phi_22_46_ladder_1;
        _2066 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2046 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1071, _1072, _1073), _1972);
        _2062 = _2046.x * cbModelParam._m0[1u].z;
        _2064 = _2046.y * cbModelParam._m0[1u].z;
        _2066 = _2046.z * cbModelParam._m0[1u].z;
    }
    float _2079 = (((_1098 * _1047) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2062 - _1963)) + _1963);
    float _2081 = (((_1098 * _1049) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2064 - _1965)) + _1965);
    float _2083 = (((_1098 * _1050) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2066 - _1967)) + _1967);
    float _2086 = fma(_2083, cbSceneParam._m0[89u].z, fma(_2081, cbSceneParam._m0[89u].y, _2079 * cbSceneParam._m0[89u].x));
    float _2089 = fma(_2083, cbSceneParam._m0[90u].z, fma(_2081, cbSceneParam._m0[90u].y, _2079 * cbSceneParam._m0[90u].x));
    float _2092 = fma(_2083, cbSceneParam._m0[91u].z, fma(_2081, cbSceneParam._m0[91u].y, _2079 * cbSceneParam._m0[91u].x));
    vec4 _2100 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_985, _986));
    float _2102 = _2100.w;
    float _2114 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2102);
    float _2115 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2102);
    float _2116 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2102);
    uvec4 _2120 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2122 = _2120.x * 14u;
    uint _2123 = _2122 + 13u;
    float _2130 = _1063 + (-1.0);
    float _2135 = (cbLight._m0[_2123].x * _2130) + 1.0;
    float _2136 = (cbLight._m0[_2123].y * _2130) + 1.0;
    float _2137 = (cbLight._m0[_2123].z * _2130) + 1.0;
    float _2138 = (cbLight._m0[_2123].w * _2130) + 1.0;
    uint _2139 = _2122 + 5u;
    float _2145 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
    uint _2149 = _2122 + 4u;
    float _2158 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2162 = _2122 | 1u;
    float _2173 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_898, _899, _900));
    float _2176 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_898, _899, _900));
    float _4395 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _4406 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2181 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * 0.3183098733425140380859375;
    float _2183 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * 0.3183098733425140380859375;
    float _2190 = ((cbLight._m0[_2139].x * _2145) * _2183) + (((cbLight._m0[_2149].x * _2114) * _2158) * _2181);
    float _2191 = ((_2145 * cbLight._m0[_2139].y) * _2183) + (((cbLight._m0[_2149].y * _2115) * _2158) * _2181);
    float _2192 = ((_2145 * cbLight._m0[_2139].z) * _2183) + (((cbLight._m0[_2149].z * _2116) * _2158) * _2181);
    uvec4 _2196 = floatBitsToUint(cbLight._m0[_2122 + 12u]);
    bool _2198 = _2196.x == 0u;
    float _2209;
    float _2211;
    float _2213;
    if (_2198)
    {
        _2209 = _2190;
        _2211 = _2191;
        _2213 = _2192;
    }
    else
    {
        uint _2217 = _2122 + 6u;
        float _2233 = (dot(vec3(cbLight._m0[_2122 + 2u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2234 = _2233 * _2233;
        float _4417 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2235 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2236 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2209 = (((cbLight._m0[_2217].x * 0.3183098733425140380859375) * _2235) * _2236) + _2190;
        _2211 = (((cbLight._m0[_2217].y * 0.3183098733425140380859375) * _2235) * _2236) + _2191;
        _2213 = (((cbLight._m0[_2217].z * 0.3183098733425140380859375) * _2235) * _2236) + _2192;
    }
    bool _2216 = _2196.y == 0u;
    float _2254;
    float _2256;
    float _2258;
    if (_2216)
    {
        _2254 = _2209;
        _2256 = _2211;
        _2258 = _2213;
    }
    else
    {
        uint _2427 = _2122 + 7u;
        float _2443 = (dot(vec3(cbLight._m0[_2122 + 3u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2444 = _2443 * _2443;
        float _4433 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2445 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2446 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2254 = (((cbLight._m0[_2427].x * 0.3183098733425140380859375) * _2445) * _2446) + _2209;
        _2256 = (((cbLight._m0[_2427].y * 0.3183098733425140380859375) * _2445) * _2446) + _2211;
        _2258 = (((cbLight._m0[_2427].z * 0.3183098733425140380859375) * _2445) * _2446) + _2213;
    }
    uint _2261 = _2122 + 8u;
    float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _901) * 0.949999988079071044921875);
    float _2275 = _2274 * _2274;
    float _2276 = cbLight._m0[_2122].x + _977;
    float _2277 = cbLight._m0[_2122].y + _978;
    float _2278 = cbLight._m0[_2122].z + _979;
    float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
    float _2283 = _2282 * _2276;
    float _2284 = _2282 * _2277;
    float _2285 = _2282 * _2278;
    float _2286 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2122].xyz));
    float _4449 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _4460 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _2290 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2291 = dot(vec3(_898, _899, _900), vec3(_2283, _2284, _2285));
    float _4471 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2295 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2283, _2284, _2285));
    float _4482 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2299 = _2275 * _2275;
    float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
    float _2311 = exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0);
    float _2312 = 0.959999978542327880859375 - _1044;
    float _2314 = 0.959999978542327880859375 - _1045;
    float _2315 = 0.959999978542327880859375 - _1046;
    float _2322 = 1.0 - _2275;
    float _2333 = (0.5 / (((_2290 * ((_2289 * _2322) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2322) + _2275) * _2289))) * _2289;
    float _4493 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2335 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
    uint _2349 = _2122 + 9u;
    float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _901) * 0.949999988079071044921875);
    float _2361 = _2360 * _2360;
    float _2362 = cbLight._m0[_2162].x + _977;
    float _2363 = cbLight._m0[_2162].y + _978;
    float _2364 = cbLight._m0[_2162].z + _979;
    float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
    float _2369 = _2368 * _2362;
    float _2370 = _2368 * _2363;
    float _2371 = _2368 * _2364;
    float _2372 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2162].xyz));
    float _4504 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2376 = dot(vec3(_898, _899, _900), vec3(_2369, _2370, _2371));
    float _4515 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2380 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2369, _2370, _2371));
    float _4526 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2384 = _2361 * _2361;
    float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
    float _2395 = exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0);
    float _2402 = 1.0 - _2361;
    float _2412 = (0.5 / (((_2290 * ((_2375 * _2402) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2402) + _2361) * _2375))) * _2375;
    float _4537 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2414 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
    float _2424 = (((((_2395 * _2312) + _1047) * cbLight._m0[_2349].x) * _2414) * _2145) + ((((cbLight._m0[_2261].x * _2114) * ((_2311 * _2312) + _1047)) * _2335) * _2158);
    float _2425 = (((((_2395 * _2314) + _1049) * cbLight._m0[_2349].y) * _2414) * _2145) + ((((cbLight._m0[_2261].y * _2115) * ((_2311 * _2314) + _1049)) * _2335) * _2158);
    float _2426 = (((((_2395 * _2315) + _1050) * cbLight._m0[_2349].z) * _2414) * _2145) + ((((cbLight._m0[_2261].z * _2116) * ((_2311 * _2315) + _1050)) * _2335) * _2158);
    float _2488;
    float _2490;
    float _2492;
    if (_2198)
    {
        _2488 = _2424;
        _2490 = _2425;
        _2492 = _2426;
    }
    else
    {
        uint _2494 = _2122 + 2u;
        uint _2498 = _2122 + 10u;
        float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2494].w)) * _901) * 0.949999988079071044921875);
        float _2513 = _2512 * _2512;
        float _2514 = cbLight._m0[_2494].x + _977;
        float _2515 = cbLight._m0[_2494].y + _978;
        float _2516 = cbLight._m0[_2494].z + _979;
        float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
        float _2521 = _2520 * _2514;
        float _2522 = _2520 * _2515;
        float _2523 = _2520 * _2516;
        float _2524 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2494].xyz));
        float _4548 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2528 = dot(vec3(_898, _899, _900), vec3(_2521, _2522, _2523));
        float _4559 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2532 = dot(vec3(cbLight._m0[_2494].xyz), vec3(_2521, _2522, _2523));
        float _4570 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2536 = _2513 * _2513;
        float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
        float _2547 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
        float _2554 = 1.0 - _2513;
        float _2564 = (0.5 / (((_2290 * ((_2527 * _2554) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2554) + _2513) * _2527))) * _2527;
        float _4581 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2566 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
        float _2567 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2488 = (((((_2547 * _2312) + _1047) * cbLight._m0[_2498].x) * _2566) * _2567) + _2424;
        _2490 = (((((_2547 * _2314) + _1049) * cbLight._m0[_2498].y) * _2566) * _2567) + _2425;
        _2492 = (((((_2547 * _2315) + _1050) * cbLight._m0[_2498].z) * _2566) * _2567) + _2426;
    }
    float _2602;
    float _2604;
    float _2606;
    if (_2216)
    {
        _2602 = _2488;
        _2604 = _2490;
        _2606 = _2492;
    }
    else
    {
        uint _2613 = _2122 + 3u;
        uint _2617 = _2122 + 11u;
        float _2631 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2613].w)) * _901) * 0.949999988079071044921875);
        float _2632 = _2631 * _2631;
        float _2633 = cbLight._m0[_2613].x + _977;
        float _2634 = cbLight._m0[_2613].y + _978;
        float _2635 = cbLight._m0[_2613].z + _979;
        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
        float _2640 = _2639 * _2633;
        float _2641 = _2639 * _2634;
        float _2642 = _2639 * _2635;
        float _2643 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2613].xyz));
        float _4597 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2647 = dot(vec3(_898, _899, _900), vec3(_2640, _2641, _2642));
        float _4608 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2651 = dot(vec3(cbLight._m0[_2613].xyz), vec3(_2640, _2641, _2642));
        float _4619 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2655 = _2632 * _2632;
        float _2659 = ((_2650 * _2650) * (_2655 + (-1.0))) + 1.0;
        float _2666 = exp2(log2(1.0 - (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * 5.0);
        float _2673 = 1.0 - _2632;
        float _2683 = (0.5 / (((_2290 * ((_2646 * _2673) + _2632)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2673) + _2632) * _2646))) * _2646;
        float _4630 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2685 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2655 / ((_2659 * _2659) * 3.141590118408203125));
        float _2686 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2602 = (((((_2666 * _2312) + _1047) * cbLight._m0[_2617].x) * _2685) * _2686) + _2488;
        _2604 = (((((_2666 * _2314) + _1049) * cbLight._m0[_2617].y) * _2685) * _2686) + _2490;
        _2606 = (((((_2666 * _2315) + _1050) * cbLight._m0[_2617].z) * _2685) * _2686) + _2492;
    }
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    if (_2120.y == 0u)
    {
        float _2761 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2762 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2761;
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2761;
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2761;
        uvec4 _2776 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2777 = _2776.x;
        uint _2788 = uint((float(_2776.y) * floor(float(uint(cbSceneParam._m0[85u].y * _986) / _2777))) + floor(float(uint(cbSceneParam._m0[85u].x * _985) / _2777)));
        float _2798 = (log2(_2764 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2799 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        uint _2802 = uint(isnan(14.0) ? _2799 : (isnan(_2799) ? 14.0 : min(_2799, 14.0)));
        uvec4 _2807 = texelFetch(g_lightClusterGridBuffer, int(((_2802 << 2u) + (_2788 << 6u)) >> 2u));
        uint _2808 = _2807.x;
        uint _2809 = _2776.z;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        if (((((1u << ((_2809 >> 4u) & 15u)) + 4294967295u) & _2808) == 0u) || ((_2809 & 240u) == 0u))
        {
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
        }
        else
        {
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _2920;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            uint _3059 = 0u;
            uint _3068;
            bool _3069;
            for (;;)
            {
                _3068 = texelFetch(g_lightClassification, int((((_2802 << 5u) + (_2788 << 9u)) + (_3059 << 2u)) >> 2u)).x;
                _3069 = _3068 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3069)
                {
                    frontier_phi_61_pred = _3053;
                    frontier_phi_61_pred_1 = _3058;
                    frontier_phi_61_pred_2 = _3057;
                    frontier_phi_61_pred_3 = _3056;
                    frontier_phi_61_pred_4 = _3055;
                    frontier_phi_61_pred_5 = _3054;
                }
                else
                {
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    uint _3183;
                    _3177 = _3053;
                    _3178 = _3054;
                    _3179 = _3055;
                    _3180 = _3056;
                    _3181 = _3057;
                    _3182 = _3058;
                    _3183 = _3068;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    for (;;)
                    {
                        uint _3187 = uint(findLSB(_3183)) + (_3059 << 5u);
                        uint _3184 = (_3183 + 4294967295u) & _3183;
                        uint _3189 = _3187 * 48u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 3u)).x));
                        uint _3209 = (_3187 * 48u) + 4u;
                        vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 3u)).x));
                        uint _3228 = (_3187 * 48u) + 8u;
                        vec3 _3239 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x));
                        float _3243 = _3203.x - _2762;
                        float _3244 = _3203.y - _2763;
                        float _3245 = _3203.z - _2764;
                        float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                        float _3249 = inversesqrt(_3246);
                        float _3250 = _3249 * _3243;
                        float _3251 = _3249 * _3244;
                        float _3252 = _3249 * _3245;
                        float _3253 = dot(vec3(_1004, _1007, _1010), vec3(_3250, _3251, _3252));
                        float _3258 = 1.0 - (_3246 * _3203.w);
                        float _4656 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3259 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3260 = sqrt(_3246) * _3222.w;
                        float _3263 = 1.39999997615814208984375 / (_3260 + 1.39999997615814208984375);
                        float _3264 = _3263 * _3263;
                        float _3267 = ((1.0 - _3264) * _3253) + _3264;
                        float _3270 = _3260 * _3260;
                        float _3274 = ((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3259) / ((_3270 * 0.699999988079071044921875) + 1.0);
                        float _3278 = (-0.0) - _2762;
                        float _3279 = (-0.0) - _2763;
                        float _3280 = (-0.0) - _2764;
                        float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                        float _3285 = _3284 * _3278;
                        float _3286 = _3284 * _3279;
                        float _3287 = _3284 * _3280;
                        float _3295 = exp2(log2(1.0 / ((_3270 * 3.5) + 5.0)) * 0.25);
                        float _3296 = 1.0 - _1079;
                        float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                        float _3304 = _3303 * _3303;
                        float _3305 = _3304 * _3304;
                        float _3306 = _3285 + _3250;
                        float _3307 = _3286 + _3251;
                        float _3308 = _3287 + _3252;
                        float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                        float _3316 = dot(vec3(_1004, _1007, _1010), vec3(_3285, _3286, _3287));
                        float _4672 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                        float _3320 = dot(vec3(_1004, _1007, _1010), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                        float _4683 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3323 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                        float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                        float _3328 = _3263 * _3304;
                        float _3329 = _3328 * _3328;
                        float _3332 = ((1.0 - _3329) * _3253) + _3329;
                        float _4694 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3333 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3334 = 1.0 - _3304;
                        float _3344 = (0.5 / (((_3333 * ((_3319 * _3334) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3333 * _3334) + _3304) * _3319))) * _3333;
                        float _4705 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3355 = (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) / ((_3327 * _3327) * ((_3270 * 2.1991131305694580078125) + 3.141590118408203125))) * _3259;
                        _3112 = (_3274 * _3222.x) + _3180;
                        _3113 = (_3274 * _3222.y) + _3181;
                        _3114 = (_3274 * _3222.z) + _3182;
                        _3109 = (_3355 * _3239.x) + _3177;
                        _3110 = (_3355 * _3239.y) + _3178;
                        _3111 = (_3355 * _3239.z) + _3179;
                        if (_3184 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3177 = _3109;
                            _3178 = _3110;
                            _3179 = _3111;
                            _3180 = _3112;
                            _3181 = _3113;
                            _3182 = _3114;
                            _3183 = _3184;
                        }
                    }
                    frontier_phi_61_pred = _3109;
                    frontier_phi_61_pred_1 = _3114;
                    frontier_phi_61_pred_2 = _3113;
                    frontier_phi_61_pred_3 = _3112;
                    frontier_phi_61_pred_4 = _3111;
                    frontier_phi_61_pred_5 = _3110;
                }
                _2910 = frontier_phi_61_pred;
                _2920 = frontier_phi_61_pred_1;
                _2918 = frontier_phi_61_pred_2;
                _2916 = frontier_phi_61_pred_3;
                _2914 = frontier_phi_61_pred_4;
                _2912 = frontier_phi_61_pred_5;
                uint _3060 = _3059 + 1u;
                if (_3060 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3053 = _2910;
                    _3054 = _2912;
                    _3055 = _2914;
                    _3056 = _2916;
                    _3057 = _2918;
                    _3058 = _2920;
                    _3059 = _3060;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
        }
        uvec4 _2923 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2924 = _2923.z;
        uint _2926 = (_2924 >> 8u) & 15u;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        if (((4294967295u << _2926) & _2808) == 0u)
        {
            _3021 = _2909;
            _3023 = _2911;
            _3025 = _2913;
            _3027 = _2915;
            _3029 = _2917;
            _3031 = _2919;
        }
        else
        {
            float _3046 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
            float _3047 = _3046 * _2762;
            float _3048 = _3046 * _2763;
            float _3049 = _3046 * _2764;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2926 < ((_2924 >> 12u) & 15u))
            {
                float _3022;
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3160 = _2909;
                float _3161 = _2911;
                float _3162 = _2913;
                float _3163 = _2915;
                float _3164 = _2917;
                float _3165 = _2919;
                uint _3166 = _2926;
                uint _3175;
                bool _3176;
                for (;;)
                {
                    _3175 = texelFetch(g_lightClassification, int((((_2802 << 5u) + (_2788 << 9u)) + (_3166 << 2u)) >> 2u)).x;
                    _3176 = _3175 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3176)
                    {
                        frontier_phi_67_pred = _3163;
                        frontier_phi_67_pred_1 = _3164;
                        frontier_phi_67_pred_2 = _3165;
                        frontier_phi_67_pred_3 = _3162;
                        frontier_phi_67_pred_4 = _3161;
                        frontier_phi_67_pred_5 = _3160;
                    }
                    else
                    {
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3373 = _3160;
                        float _3374 = _3161;
                        float _3375 = _3162;
                        float _3376 = _3163;
                        float _3377 = _3164;
                        float _3378 = _3165;
                        uint _3379 = _3175;
                        uint _3380;
                        vec4 _3405;
                        float _3406;
                        vec4 _3421;
                        vec3 _3433;
                        vec4 _3448;
                        vec4 _3463;
                        float _3509;
                        bool _3510;
                        for (;;)
                        {
                            uint _3390 = ((_3166 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3379));
                            _3380 = (_3379 + 4294967295u) & _3379;
                            uint _3392 = _3390 * 40u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3406 = _3405.w;
                            uint _3408 = (_3390 * 40u) + 4u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3423 = (_3390 * 40u) + 8u;
                            _3433 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x));
                            uint _3435 = (_3390 * 40u) + 16u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3390 * 40u) + 20u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3390 * 40u) + 24u;
                            vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3484 = (_3390 * 40u) + 28u;
                            vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3509 = fma(_2764, _3497.z, fma(_2763, _3497.y, _3497.x * _2762)) + _3497.w;
                            _3510 = !((fma(_2764, _3478.z, fma(_2763, _3478.y, _3478.x * _2762)) + _3478.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3510)
                            {
                                float _3537 = _3405.x - _2762;
                                float _3538 = _3405.y - _2763;
                                float _3539 = _3405.z - _2764;
                                float _3540 = dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539));
                                float _3543 = inversesqrt(_3540);
                                float _3544 = _3543 * _3537;
                                float _3545 = _3543 * _3538;
                                float _3546 = _3543 * _3539;
                                float _3550 = 1.0 - (_3540 / (_3406 * _3406));
                                float _4716 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3555 = sqrt(_3540) * _3421.w;
                                float _3557 = 1.39999997615814208984375 / (_3555 + 1.39999997615814208984375);
                                float _3558 = _3557 * _3557;
                                float _3561 = ((1.0 - _3558) * dot(vec3(_3544, _3545, _3546), vec3(_1004, _1007, _1010))) + _3558;
                                float _3564 = _3555 * _3555;
                                float _3568 = (fma(_2764, _3448.z, fma(_2763, _3448.y, _3448.x * _2762)) + _3448.w) / _3509;
                                float _3569 = (fma(_2764, _3463.z, fma(_2763, _3463.y, _3463.x * _2762)) + _3463.w) / _3509;
                                float _3573 = 1.0 - dot(vec2(_3568, _3569), vec2(_3568, _3569));
                                float _4732 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3575 = _3574 * (((isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0))) * _3551) / ((_3564 * 0.699999988079071044921875) + 1.0));
                                float _3587 = exp2(log2(1.0 / ((_3564 * 3.5) + 5.0)) * 0.25);
                                float _3588 = 1.0 - _1079;
                                float _3595 = sqrt(1.0 - ((1.0 - (_3588 * _3588)) * (1.0 - (_3587 * _3587))));
                                float _3596 = _3595 * _3595;
                                float _3597 = _3596 * _3596;
                                float _3598 = _3544 - _3047;
                                float _3599 = _3545 - _3048;
                                float _3600 = _3546 - _3049;
                                float _3604 = inversesqrt(dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600)));
                                float _3608 = dot(vec3(_1004, _1007, _1010), vec3((-0.0) - _3047, (-0.0) - _3048, (-0.0) - _3049));
                                float _4743 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3611 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                                float _3612 = dot(vec3(_1004, _1007, _1010), vec3(_3604 * _3598, _3604 * _3599, _3604 * _3600));
                                float _4754 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3615 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3619 = ((_3615 * _3615) * (_3597 + (-1.0))) + 1.0;
                                float _3620 = _3557 * _3596;
                                float _3621 = _3620 * _3620;
                                float _3627 = ((1.0 - _3621) * dot(vec3(_1004, _1007, _1010), vec3(_3544, _3545, _3546))) + _3621;
                                float _4765 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3628 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3629 = 1.0 - _3596;
                                float _3639 = (0.5 / (((_3628 * ((_3611 * _3629) + _3596)) + 9.9999999392252902907785028219223e-09) + (((_3628 * _3629) + _3596) * _3611))) * _3628;
                                float _4776 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3649 = (_3574 * _3551) * (((_3597 * 3.1415927410125732421875) * (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)))) / ((_3619 * _3619) * ((_3564 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3649 * _3433.x;
                                frontier_phi_73_pred_1 = _3649 * _3433.y;
                                frontier_phi_73_pred_2 = _3575 * _3421.z;
                                frontier_phi_73_pred_3 = _3575 * _3421.y;
                                frontier_phi_73_pred_4 = _3575 * _3421.x;
                                frontier_phi_73_pred_5 = _3649 * _3433.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3653 = frontier_phi_73_pred;
                            _3654 = frontier_phi_73_pred_1;
                            _3658 = frontier_phi_73_pred_2;
                            _3657 = frontier_phi_73_pred_3;
                            _3656 = frontier_phi_73_pred_4;
                            _3655 = frontier_phi_73_pred_5;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            if (_3380 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3380;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3363;
                        frontier_phi_67_pred_1 = _3364;
                        frontier_phi_67_pred_2 = _3365;
                        frontier_phi_67_pred_3 = _3362;
                        frontier_phi_67_pred_4 = _3361;
                        frontier_phi_67_pred_5 = _3360;
                    }
                    _3028 = frontier_phi_67_pred;
                    _3030 = frontier_phi_67_pred_1;
                    _3032 = frontier_phi_67_pred_2;
                    _3026 = frontier_phi_67_pred_3;
                    _3024 = frontier_phi_67_pred_4;
                    _3022 = frontier_phi_67_pred_5;
                    uint _3167 = _3166 + 1u;
                    if (_3167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3160 = _3022;
                        _3161 = _3024;
                        _3162 = _3026;
                        _3163 = _3028;
                        _3164 = _3030;
                        _3165 = _3032;
                        _3166 = _3167;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3030;
                frontier_phi_55_56_ladder_1 = _3032;
                frontier_phi_55_56_ladder_2 = _3028;
                frontier_phi_55_56_ladder_3 = _3026;
                frontier_phi_55_56_ladder_4 = _3024;
                frontier_phi_55_56_ladder_5 = _3022;
            }
            else
            {
                frontier_phi_55_56_ladder = _2917;
                frontier_phi_55_56_ladder_1 = _2919;
                frontier_phi_55_56_ladder_2 = _2915;
                frontier_phi_55_56_ladder_3 = _2913;
                frontier_phi_55_56_ladder_4 = _2911;
                frontier_phi_55_56_ladder_5 = _2909;
            }
            _3021 = frontier_phi_55_56_ladder_5;
            _3023 = frontier_phi_55_56_ladder_4;
            _3025 = frontier_phi_55_56_ladder_3;
            _3027 = frontier_phi_55_56_ladder_2;
            _3029 = frontier_phi_55_56_ladder;
            _3031 = frontier_phi_55_56_ladder_1;
        }
        float _3036 = isnan(1.0) ? _1063 : (isnan(_1063) ? 1.0 : min(_1063, 1.0));
        _2821 = (_3036 * _3027) + _2254;
        _2823 = (_3036 * _3029) + _2256;
        _2825 = (_3036 * _3031) + _2258;
        _2827 = ((_3021 * _1047) * _3036) + _2602;
        _2829 = ((_3023 * _1049) * _3036) + _2604;
        _2831 = ((_3025 * _1050) * _3036) + _2606;
    }
    else
    {
        _2821 = _2254;
        _2823 = _2256;
        _2825 = _2258;
        _2827 = _2602;
        _2829 = _2604;
        _2831 = _2606;
    }
    float _4792 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _4803 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _4814 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    uint _2851 = _281 + 6u;
    float _2859 = _985 / cbSceneParam._m0[86u].x;
    float _2860 = _986 / cbSceneParam._m0[86u].y;
    vec4 _2874 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2859, _2860, (log2((isnan(cbSceneParam._m0[77u].w) ? _920 : (isnan(_920) ? cbSceneParam._m0[77u].w : min(_920, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2876 = _2874.x;
    float _2877 = _2874.y;
    float _2878 = _2874.z;
    float _2879 = _2874.w;
    float _2971;
    float _2973;
    float _2975;
    float _2977;
    if (_920 > cbSceneParam._m0[78u].w)
    {
        float _2934 = isnan(_920) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _920 : min(cbSceneParam._m0[80u].w, _920));
        float _2935 = _2934 / _920;
        float _2946 = _2935 * _970;
        float _2947 = _971 * _2935;
        float _2948 = (-0.0) - _2947;
        float _2949 = _2935 * _972;
        float _2951 = (cbSceneParam._m0[77u].w * _2948) / _2934;
        float _2952 = _2951 + cbSceneParam._m0[79u].w;
        float _2953 = cbSceneParam._m0[79u].w - _2947;
        float _2959 = sqrt(((_2946 * _2946) + (_2947 * _2947)) + (_2949 * _2949));
        float _2962 = (1.0 - (cbSceneParam._m0[77u].w / _2934)) * _2959;
        float _2967 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2969 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3122;
        if (abs((_2948 - _2951) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3122 = ((((_2952 > 0.0) ? exp2(_2967 * _2952) : (2.0 - exp2(_2969 * _2952))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2962;
        }
        else
        {
            float _3082 = 1.0 / cbSceneParam._m0[80u].x;
            float _3083 = isnan(_2953) ? _2952 : (isnan(_2952) ? _2953 : max(_2952, _2953));
            float _3084 = isnan(_2953) ? _2952 : (isnan(_2952) ? _2953 : min(_2952, _2953));
            float _3093 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : min(_3083, 0.0));
            float _3094 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : min(_3084, 0.0));
            _3122 = ((abs(_2959 / _2948) * cbSceneParam._m0[80u].y) * ((((_3093 - _3094) * 2.0) - ((exp2(_2967 * (isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0)))) - exp2(_2967 * (isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))))) * _3082)) - ((exp2(_2969 * _3093) - exp2(_2969 * _3094)) * _3082))) + (_2962 * cbSceneParam._m0[80u].z);
        }
        vec4 _3124 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2859, _2860, 1.0), 0.0);
        float _3133 = exp2((_3122 * (-1.44269502162933349609375)) * (1.0 - _3124.w));
        float _3134 = log2(_3133);
        float _3150 = log2(_2879);
        _2971 = (exp2(_3150 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].x)) * _3124.x) / cbSceneParam._m0[78u].x)) + _2876;
        _2973 = (exp2(_3150 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].y)) * _3124.y) / cbSceneParam._m0[78u].y)) + _2877;
        _2975 = (exp2(_3150 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].z)) * _3124.z) / cbSceneParam._m0[78u].z)) + _2878;
        _2977 = _3133 * _2879;
    }
    else
    {
        _2971 = _2876;
        _2973 = _2877;
        _2975 = _2878;
        _2977 = _2879;
    }
    float _2989 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2990 = _2989 == 3.0;
    float _2991 = log2(_2977);
    float _2998 = exp2(_2991 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2821 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1063))) + ((_2827 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1871)) * cbPerFrame._m0[3u].x));
    float _2999 = exp2(_2991 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2823 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1063))) + ((_2829 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1871)) * cbPerFrame._m0[3u].x));
    float _3000 = exp2(_2991 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2825 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1063))) + ((_2831 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1871)) * cbPerFrame._m0[3u].x));
    float _3009 = (_2989 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3009 * (_2990 ? _2998 : (_2998 + (cbSceneParam._m0[72u].w * _2971)));
    SV_Target.y = _3009 * (_2990 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2973)));
    SV_Target.z = _3009 * (_2990 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2975)));
    SV_Target.w = cbInstanceData._m0[_2851].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2851].w;
}


