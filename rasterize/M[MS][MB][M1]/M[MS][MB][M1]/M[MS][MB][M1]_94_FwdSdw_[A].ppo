#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1435;
float _4099;
float _4100;
float _4101;
float _4102;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4111 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4122 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4133 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _408 = _406.x;
    float _420 = dot(vec4(_408, _406.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _437 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_408 - _420) * cbMtdParam._m0[24u].y) + _420) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4144 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _445 = (_438 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _446 = (_438 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _447 = (_438 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    float _451 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _445;
    float _454 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _446;
    float _457 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _447;
    float _464 = ((_445 - _451) * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) + _451;
    float _465 = ((_446 - _454) * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) + _454;
    float _466 = ((_447 - _457) * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) + _457;
    vec4 _484 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _528 = _526.x;
    float _529 = _526.y;
    float _530 = _526.z;
    float _539 = ((_509.z - _530) * _438) + _530;
    float _542 = ((((_509.x - _528) * _438) + _528) * 2.0) + (-1.0);
    float _543 = ((((_509.y - _529) * _438) + _529) * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _4155 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))));
    vec4 _565 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _590 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _592 = _590.x;
    float _593 = 1.0 - _592;
    float _599 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _602 = ((isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : min(_599, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _611 = (_602 - ((((((_592 - _593) * cbMtdParam._m0[24u].z) + _593) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _602))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4176 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _612 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _619 = (_612 * (cbMtdParam._m0[17u].x - _464)) + _464;
    float _620 = (_612 * (cbMtdParam._m0[17u].y - _465)) + _465;
    float _621 = (_612 * (cbMtdParam._m0[17u].z - _466)) + _466;
    vec4 _633 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _635 = _633.x;
    float _636 = 1.0 - _635;
    float _661 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_635 - _636) * cbMtdParam._m0[24u].w) + _636) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4187 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _662 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _670 = ((((cbMtdParam._m0[10u].x - _619) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _662) + _619;
    float _671 = ((((cbMtdParam._m0[10u].y - _620) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _662) + _620;
    float _672 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _621)) * _662) + _621;
    vec4 _684 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _698 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _700 = _698.x;
    float _718 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _700) * _438) + _700;
    float _722 = ((_684.x - _718) * cbMtdParam._m0[19u].z) + _718;
    float _724 = _722 - (_722 * _612);
    float _726 = _724 - (_724 * _662);
    float _731 = (((_484.z - _539) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _539;
    float _735 = ((_565.z - _731) * cbMtdParam._m0[19u].w) + _731;
    vec4 _749 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _756 = (_749.x * 2.0) + (-1.0);
    float _757 = (_749.y * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _4198 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _766 = (_612 * (_749.z - _735)) + _735;
    float _769 = ((cbMtdParam._m0[23u].y - _766) * _662) + _766;
    vec4 _788 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _794 = (_788.x * 2.0) + (-1.0);
    float _795 = (_788.y * 2.0) + (-1.0);
    float _796 = dot(vec2(_794, _795), vec2(_794, _795));
    float _4209 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _810 = (_542 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_484.x * 2.0) + (-1.0)))) + (((_565.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _811 = (_543 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_484.y * 2.0) + (-1.0)))) + (((_565.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _823 = (((_756 - _810) + (cbMtdParam._m0[21u].x * _810)) * _612) + _810;
    float _824 = (((_757 - _811) + (cbMtdParam._m0[21u].x * _811)) * _612) + _811;
    float _825 = (_612 * (sqrt(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) - _549)) + _549;
    float _836 = (((_794 - _823) + (_823 * cbMtdParam._m0[22u].z)) * _662) + _823;
    float _837 = (((_795 - _824) + (_824 * cbMtdParam._m0[22u].z)) * _662) + _824;
    float _838 = ((sqrt(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) - _825) * _662) + _825;
    float _842 = cbMtdParam._m0[22u].x + _565.w;
    float _845 = fma(_838, _255 * NORMAL.x, fma(_837, _262 * TANGENT.x, (_248 * _240) * _836));
    float _848 = fma(_838, _255 * NORMAL.y, fma(_837, _262 * TANGENT.y, (_248 * _241) * _836));
    float _851 = fma(_838, _255 * NORMAL.z, fma(_837, _262 * TANGENT.z, (_248 * _242) * _836));
    float _855 = inversesqrt(dot(vec3(_845, _848, _851), vec3(_845, _848, _851)));
    float _856 = _855 * _845;
    float _857 = _855 * _848;
    float _858 = _855 * _851;
    float _4220 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _859 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4242 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4253 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4264 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4275 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _864 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _878 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _928 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _918);
    float _929 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _918);
    float _930 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _918);
    float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
    float _935 = _928 * _934;
    float _936 = _929 * _934;
    float _937 = _930 * _934;
    vec4 _942 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _944 = _942.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1116 = sqrt(((_928 * _928) + (_929 * _929)) + (_930 * _930));
        float _1122 = (cbMatDynParam._m0[5u].x * _1116) + cbMatDynParam._m0[5u].y;
        float _4286 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1127 = (cbMatDynParam._m0[5u].z * _1116) + cbMatDynParam._m0[5u].w;
        float _4297 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) - _1123)) + _1123) < ((_944 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _955 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _956 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _974 = fma(_858, cbSceneParam._m0[5u].z, fma(_857, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _856));
    float _977 = fma(_858, cbSceneParam._m0[6u].z, fma(_857, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _856));
    float _980 = fma(_858, cbSceneParam._m0[7u].z, fma(_857, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _856));
    uint _993 = _287 + 9u;
    uint _994 = _993 + uint(cbMatDynParam._m0[0u].w);
    float _1000 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * cbInstanceData._m0[_994].x;
    float _1001 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * cbInstanceData._m0[_994].y;
    float _1002 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * cbInstanceData._m0[_994].z;
    float _4308 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _4319 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _4330 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _1006 = 1.0 - _864;
    float _1007 = _1003 * _1006;
    float _1008 = _1004 * _1006;
    float _1009 = _1005 * _1006;
    float _1014 = (_1003 + (-0.039999999105930328369140625)) * _864;
    float _1015 = (_1004 + (-0.039999999105930328369140625)) * _864;
    float _1016 = (_1005 + (-0.039999999105930328369140625)) * _864;
    float _1017 = _1014 + 0.039999999105930328369140625;
    float _1019 = _1015 + 0.039999999105930328369140625;
    float _1020 = _1016 + 0.039999999105930328369140625;
    vec4 _1029 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _955, cbSceneParam._m0[86u].y * _956));
    float _1033 = ((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * TEXCOORD_5.w) * _1029.x;
    float _1034 = dot(vec3(_856, _857, _858), vec3(_935, _936, _937));
    float _1037 = _1034 * 2.0;
    float _1041 = (_1037 * _856) - _935;
    float _1042 = (_1037 * _857) - _936;
    float _1043 = (_1037 * _858) - _937;
    float _1047 = abs(dot(vec3(_935, _936, _937), vec3(_856, _857, _858)));
    float _4341 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1049 = sqrt(_859);
    float _1062 = exp2((_1049 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1049 * 3.0));
    float _1068 = (1.0 - _1062) * ((_1049 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1069 = _1062 * _1049;
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1434;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1159 = fma(_1105, cbModelParam._m0[26u].z, fma(_1101, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1097));
        float _1163 = fma(_1105, cbModelParam._m0[27u].z, fma(_1101, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1097));
        float _1167 = fma(_1105, cbModelParam._m0[28u].z, fma(_1101, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1097));
        float _1192 = _1097 + _856;
        float _1193 = _1101 + _857;
        float _1194 = _1105 + _858;
        float _1204 = fma(_1194, cbModelParam._m0[26u].z, fma(_1193, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1192)) - _1159;
        float _1205 = fma(_1194, cbModelParam._m0[27u].z, fma(_1193, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1192)) - _1163;
        float _1206 = fma(_1194, cbModelParam._m0[28u].z, fma(_1193, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1192)) - _1167;
        float _1210 = inversesqrt(dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206)));
        float _1223 = ((_1210 * _1204) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1159 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1210 * _1205) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1163 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1210 * _1206) / cbModelParam._m0[34u].z) + ((((((_1167 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        float _1262 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1228.x + (-0.5));
        float _1264 = _1262 * (_1228.y + (-0.5));
        float _1265 = _1262 * (_1228.z + (-0.5));
        float _1272 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1235.x + (-0.5));
        float _1274 = _1272 * (_1235.y + (-0.5));
        float _1275 = _1272 * (_1235.z + (-0.5));
        float _1282 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1242.x + (-0.5));
        float _1284 = _1282 * (_1242.y + (-0.5));
        float _1285 = _1282 * (_1242.z + (-0.5));
        float _1292 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1249.x + (-0.5));
        float _1294 = _1292 * (_1249.y + (-0.5));
        float _1295 = _1292 * (_1249.z + (-0.5));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = _1263 * 0.5;
        float _1300 = _1273 * 0.5;
        float _1301 = _1283 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1316 = (dot(vec3(_856, _857, _858), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1326 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4389 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1328 + 1.0))) + _1333) * _1296;
        float _1343 = _1264 * 0.5;
        float _1344 = _1274 * 0.5;
        float _1345 = _1284 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_856, _857, _858), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4400 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4411 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4422 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_1370 + 1.0))) + _1375) * _1297;
        float _1385 = _1265 * 0.5;
        float _1386 = _1275 * 0.5;
        float _1387 = _1285 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_856, _857, _858), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4455 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1412 + 1.0))) + _1417) * _1298;
        _1434 = _1265;
        _1436 = _1264;
        _1437 = _1263;
        _1438 = _1275;
        _1439 = _1274;
        _1440 = _1273;
        _1441 = _1285;
        _1442 = _1284;
        _1443 = _1283;
        _1444 = _1298;
        _1445 = _1297;
        _1446 = _1296;
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1448 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
    }
    else
    {
        _1434 = _1435;
        _1436 = _1435;
        _1437 = _1435;
        _1438 = _1435;
        _1439 = _1435;
        _1440 = _1435;
        _1441 = _1435;
        _1442 = _1435;
        _1443 = _1435;
        _1444 = _1435;
        _1445 = _1435;
        _1446 = _1435;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1477 = fma(_1105, cbModelParam._m0[30u].z, fma(_1101, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1097));
        float _1481 = fma(_1105, cbModelParam._m0[31u].z, fma(_1101, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1097));
        float _1485 = fma(_1105, cbModelParam._m0[32u].z, fma(_1101, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1097));
        float _1508 = _1097 + _856;
        float _1509 = _1101 + _857;
        float _1510 = _1105 + _858;
        float _1520 = fma(_1510, cbModelParam._m0[30u].z, fma(_1509, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1508)) - _1477;
        float _1521 = fma(_1510, cbModelParam._m0[31u].z, fma(_1509, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1508)) - _1481;
        float _1522 = fma(_1510, cbModelParam._m0[32u].z, fma(_1509, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1508)) - _1485;
        float _1526 = inversesqrt(dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522)));
        float _1539 = ((_1526 * _1520) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1477 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1540 = ((_1526 * _1521) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1481 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1541 = ((_1526 * _1522) / cbModelParam._m0[35u].z) + ((((((_1485 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        float _1576 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1543.x + (-0.5));
        float _1578 = _1576 * (_1543.y + (-0.5));
        float _1579 = _1576 * (_1543.z + (-0.5));
        float _1586 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1550.x + (-0.5));
        float _1588 = _1586 * (_1550.y + (-0.5));
        float _1589 = _1586 * (_1550.z + (-0.5));
        float _1596 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1557.x + (-0.5));
        float _1598 = _1596 * (_1557.y + (-0.5));
        float _1599 = _1596 * (_1557.z + (-0.5));
        float _1606 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1564.x + (-0.5));
        float _1608 = _1606 * (_1564.y + (-0.5));
        float _1609 = _1606 * (_1564.z + (-0.5));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1613 = _1577 * 0.5;
        float _1614 = _1587 * 0.5;
        float _1615 = _1597 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_856, _857, _858), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4496 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4507 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4518 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_1640 + 1.0))) + _1645) * _1610;
        float _1655 = _1578 * 0.5;
        float _1656 = _1588 * 0.5;
        float _1657 = _1598 * 0.5;
        float _1658 = dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657));
        float _1663 = (_1658 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1658);
        float _1671 = (dot(vec3(_856, _857, _858), vec3(_1663 * _1655, _1663 * _1656, _1663 * _1657)) + 1.0) * 0.5;
        float _4529 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1680 = sqrt(((_1656 * _1656) + (_1655 * _1655)) + (_1657 * _1657)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4540 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _1682 = _1681 * 2.0;
        float _1686 = (1.0 - _1681) / (_1681 + 1.0);
        float _4551 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1696 = ((((1.0 - _1687) * (_1682 + 2.0)) * exp2(log2(isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_1682 + 1.0))) + _1687) * _1611;
        float _1697 = _1579 * 0.5;
        float _1698 = _1589 * 0.5;
        float _1699 = _1599 * 0.5;
        float _1700 = dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699));
        float _1705 = (_1700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1700);
        float _1713 = (dot(vec3(_856, _857, _858), vec3(_1705 * _1697, _1705 * _1698, _1705 * _1699)) + 1.0) * 0.5;
        float _4562 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1722 = sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699)) / (_1612 + 9.9999997473787516355514526367188e-06);
        float _4573 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _1724 = _1723 * 2.0;
        float _1728 = (1.0 - _1723) / (_1723 + 1.0);
        float _4584 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1738 = ((((1.0 - _1729) * (_1724 + 2.0)) * exp2(log2(isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_1724 + 1.0))) + _1729) * _1612;
        _1746 = _1579;
        _1747 = _1578;
        _1748 = _1577;
        _1749 = _1589;
        _1750 = _1588;
        _1751 = _1587;
        _1752 = _1599;
        _1753 = _1598;
        _1754 = _1597;
        _1755 = _1612;
        _1756 = _1611;
        _1757 = _1610;
        _1758 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
        _1759 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)));
        _1760 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)));
    }
    else
    {
        _1746 = _1435;
        _1747 = _1435;
        _1748 = _1435;
        _1749 = _1435;
        _1750 = _1435;
        _1751 = _1435;
        _1752 = _1435;
        _1753 = _1435;
        _1754 = _1435;
        _1755 = _1435;
        _1756 = _1435;
        _1757 = _1435;
        _1758 = 0.0;
        _1759 = 0.0;
        _1760 = 0.0;
    }
    float _1770 = (cbModelParam._m0[1u].x * (_1758 - _1447)) + _1447;
    float _1771 = (cbModelParam._m0[1u].x * (_1759 - _1448)) + _1448;
    float _1772 = (cbModelParam._m0[1u].x * (_1760 - _1449)) + _1449;
    float _1793 = fma(_1772, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1770 * cbSceneParam._m0[89u].x));
    float _1796 = fma(_1772, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1770 * cbSceneParam._m0[90u].x));
    float _1799 = fma(_1772, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1770));
    float _1814 = _1041 * 0.5;
    float _1815 = _1042 * 0.5;
    float _1816 = _1043 * 0.5;
    float _1817 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1748, _1751, _1754, _1757));
    float _1820 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1747, _1750, _1753, _1756));
    float _1823 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1746, _1749, _1752, _1755));
    float _1857;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1830 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1434, _1438, _1441, _1444));
        float _1834 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1436, _1439, _1442, _1445));
        float _1838 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1437, _1440, _1443, _1446));
        float _1845 = dot(vec4(cbModelParam._m0[39u]), vec4(_1814, _1815, _1816, 1.0));
        _1857 = dot(vec3(isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1845) ? 0.0 : (isnan(0.0) ? _1845 : max(0.0, _1845))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1857 = 1.0;
    }
    float _1868;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1859 = dot(vec4(cbModelParam._m0[40u]), vec4(_1814, _1815, _1816, 1.0));
        _1868 = dot(vec3(isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1859) ? 0.0 : (isnan(0.0) ? _1859 : max(0.0, _1859))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1868 = 1.0;
    }
    float _1872 = (_1868 * cbModelParam._m0[1u].x) + (_1857 * (1.0 - cbModelParam._m0[1u].x));
    float _1882 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _859);
    float _1883 = isnan(_1882) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1882 : min(cbModelParam._m0[25u].z, _1882));
    float _1964;
    float _1966;
    float _1968;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1931 = fma(_1105, cbModelParam._m0[13u].z, fma(_1101, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1097)) + cbModelParam._m0[13u].w;
        float _1935 = fma(_1105, cbModelParam._m0[14u].z, fma(_1101, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1097)) + cbModelParam._m0[14u].w;
        float _1939 = fma(_1105, cbModelParam._m0[15u].z, fma(_1101, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1097)) + cbModelParam._m0[15u].w;
        float _1942 = fma(_1043, cbModelParam._m0[13u].z, fma(_1042, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1041));
        float _1945 = fma(_1043, cbModelParam._m0[14u].z, fma(_1042, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1041));
        float _1948 = fma(_1043, cbModelParam._m0[15u].z, fma(_1042, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1041));
        float _1976;
        if (_1942 > 0.0)
        {
            _1976 = abs((1.0 - _1931) / _1942);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1931 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1976 = frontier_phi_17_15_ladder;
        }
        float _2148;
        if (_1945 > 0.0)
        {
            _2148 = abs((1.0 - _1935) / _1945);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1935 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2148 = frontier_phi_26_22_ladder;
        }
        float _2443;
        if (_1948 > 0.0)
        {
            _2443 = abs((1.0 - _1939) / _1948);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1939 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2443 = frontier_phi_38_33_ladder;
        }
        float _2445 = isnan(_2148) ? _1976 : (isnan(_1976) ? _2148 : min(_1976, _2148));
        float _2446 = isnan(_2443) ? _2445 : (isnan(_2445) ? _2443 : min(_2445, _2443));
        float _2450 = (_2446 * _1942) + _1931;
        float _2451 = (_2446 * _1945) + _1935;
        float _2452 = (_2446 * _1948) + _1939;
        float _2453 = _2446 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2453;
        float _2457 = _2453 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 > _2457) || ((_2451 < _2455) || ((_2450 < _2455) || (_2450 > _2457))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2597 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2452, cbModelParam._m0[9u].z, fma(_2451, cbModelParam._m0[9u].y, _2450 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2452, cbModelParam._m0[10u].z, fma(_2451, cbModelParam._m0[10u].y, _2450 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2452, cbModelParam._m0[11u].z, fma(_2451, cbModelParam._m0[11u].y, _2450 * cbModelParam._m0[11u].x))), _1883);
            frontier_phi_16_38_ladder = _2597.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2597.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2597.x * cbModelParam._m0[1u].y;
        }
        _1964 = frontier_phi_16_38_ladder_2;
        _1966 = frontier_phi_16_38_ladder_1;
        _1968 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1952 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1041, _1042, _1043), _1883);
        _1964 = _1952.x * cbModelParam._m0[1u].y;
        _1966 = _1952.y * cbModelParam._m0[1u].y;
        _1968 = _1952.z * cbModelParam._m0[1u].y;
    }
    float _1972 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _859);
    float _1973 = isnan(_1972) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1972 : min(cbModelParam._m0[25u].w, _1972));
    float _2063;
    float _2065;
    float _2067;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2027 = fma(_1105, cbModelParam._m0[21u].z, fma(_1101, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1097)) + cbModelParam._m0[21u].w;
        float _2031 = fma(_1105, cbModelParam._m0[22u].z, fma(_1101, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1097)) + cbModelParam._m0[22u].w;
        float _2035 = fma(_1105, cbModelParam._m0[23u].z, fma(_1101, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1097)) + cbModelParam._m0[23u].w;
        float _2038 = fma(_1043, cbModelParam._m0[21u].z, fma(_1042, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1041));
        float _2041 = fma(_1043, cbModelParam._m0[22u].z, fma(_1042, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1041));
        float _2044 = fma(_1043, cbModelParam._m0[23u].z, fma(_1042, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1041));
        float _2153;
        if (_2038 > 0.0)
        {
            _2153 = abs((1.0 - _2027) / _2038);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2027 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2153 = frontier_phi_28_24_ladder;
        }
        float _2470;
        if (_2041 > 0.0)
        {
            _2470 = abs((1.0 - _2031) / _2041);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2031 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2470 = frontier_phi_40_35_ladder;
        }
        float _2808;
        if (_2044 > 0.0)
        {
            _2808 = abs((1.0 - _2035) / _2044);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2035 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2808 = frontier_phi_50_47_ladder;
        }
        float _2810 = isnan(_2470) ? _2153 : (isnan(_2153) ? _2470 : min(_2153, _2470));
        float _2811 = isnan(_2808) ? _2810 : (isnan(_2810) ? _2808 : min(_2810, _2808));
        float _2815 = (_2811 * _2038) + _2027;
        float _2816 = (_2811 * _2041) + _2031;
        float _2817 = (_2811 * _2044) + _2035;
        float _2818 = _2811 * 9.9999997473787516355514526367188e-05;
        float _2819 = (-1.0) - _2818;
        float _2821 = _2818 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2817 > _2821) || ((_2817 < _2819) || ((_2816 > _2821) || ((_2816 < _2819) || ((_2815 < _2819) || (_2815 > _2821))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2817, cbModelParam._m0[17u].z, fma(_2816, cbModelParam._m0[17u].y, _2815 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2817, cbModelParam._m0[18u].z, fma(_2816, cbModelParam._m0[18u].y, _2815 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2817, cbModelParam._m0[19u].z, fma(_2816, cbModelParam._m0[19u].y, _2815 * cbModelParam._m0[19u].x))), _1973);
            frontier_phi_25_50_ladder = _2939.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2939.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2939.x * cbModelParam._m0[1u].z;
        }
        _2063 = frontier_phi_25_50_ladder_2;
        _2065 = frontier_phi_25_50_ladder_1;
        _2067 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2047 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1041, _1042, _1043), _1973);
        _2063 = _2047.x * cbModelParam._m0[1u].z;
        _2065 = _2047.y * cbModelParam._m0[1u].z;
        _2067 = _2047.z * cbModelParam._m0[1u].z;
    }
    float _2080 = (((_1068 * _1017) + _1069) * _1033) * ((cbModelParam._m0[1u].w * (_2063 - _1964)) + _1964);
    float _2082 = (((_1068 * _1019) + _1069) * _1033) * ((cbModelParam._m0[1u].w * (_2065 - _1966)) + _1966);
    float _2084 = (((_1068 * _1020) + _1069) * _1033) * ((cbModelParam._m0[1u].w * (_2067 - _1968)) + _1968);
    float _2087 = fma(_2084, cbSceneParam._m0[89u].z, fma(_2082, cbSceneParam._m0[89u].y, _2080 * cbSceneParam._m0[89u].x));
    float _2090 = fma(_2084, cbSceneParam._m0[90u].z, fma(_2082, cbSceneParam._m0[90u].y, _2080 * cbSceneParam._m0[90u].x));
    float _2093 = fma(_2084, cbSceneParam._m0[91u].z, fma(_2082, cbSceneParam._m0[91u].y, _2080 * cbSceneParam._m0[91u].x));
    float _2127 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2131 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2135 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2139 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2140 = _2127 / _2139;
    float _2141 = _2131 / _2139;
    float _2142 = _2135 / _2139;
    float _2289;
    float _2290;
    float _2291;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2169 = ((uint(_2142 > cbSceneParam._m0[59u].y) + uint(_2142 > cbSceneParam._m0[59u].x)) + uint(_2142 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2170 = _2169 + 43u;
        uint _2178 = _2169 + 44u;
        uint _2186 = _2169 + 45u;
        uint _2194 = _2169 + 46u;
        float _2205 = fma(_2139, cbSceneParam._m0[_2170].w, fma(_2135, cbSceneParam._m0[_2170].z, fma(_2131, cbSceneParam._m0[_2170].y, _2127 * cbSceneParam._m0[_2170].x)));
        float _2209 = fma(_2139, cbSceneParam._m0[_2178].w, fma(_2135, cbSceneParam._m0[_2178].z, fma(_2131, cbSceneParam._m0[_2178].y, _2127 * cbSceneParam._m0[_2178].x)));
        float _2217 = fma(_2139, cbSceneParam._m0[_2194].w, fma(_2135, cbSceneParam._m0[_2194].z, fma(_2131, cbSceneParam._m0[_2194].y, _2127 * cbSceneParam._m0[_2194].x)));
        float _2222 = cbSceneParam._m0[33u].z * _2217;
        float _2224 = cbSceneParam._m0[33u].w * _2217;
        float _2227 = fma(_2139, cbSceneParam._m0[_2186].w, fma(_2135, cbSceneParam._m0[_2186].z, fma(_2131, cbSceneParam._m0[_2186].y, _2127 * cbSceneParam._m0[_2186].x))) / _2217;
        float _2275 = (cbSceneParam._m0[33u].x - sqrt(((_2141 * _2141) + (_2140 * _2140)) + (_2142 * _2142))) * cbSceneParam._m0[33u].y;
        float _4710 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2282 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2222 + _2205) / _2217, (_2224 + _2209) / _2217), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2224 + _2205) / _2217, (_2209 - _2222) / _2217), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2205 - _2222) / _2217, (_2209 - _2224) / _2217), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2205 - _2224) / _2217, (_2222 + _2209) / _2217), _2227), 0.0)).x), vec4(0.25)));
        _2289 = 1.0 - (_2282 * cbSceneParam._m0[34u].x);
        _2290 = 1.0 - (_2282 * cbSceneParam._m0[34u].y);
        _2291 = 1.0 - (_2282 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2289 = 1.0;
        _2290 = 1.0;
        _2291 = 1.0;
    }
    float _2355;
    float _2357;
    float _2359;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2343 = fma(_2139, cbSceneParam._m0[63u].w, fma(_2135, cbSceneParam._m0[63u].z, fma(_2131, cbSceneParam._m0[63u].y, _2127 * cbSceneParam._m0[63u].x)));
        float _2344 = fma(_2139, cbSceneParam._m0[60u].w, fma(_2135, cbSceneParam._m0[60u].z, fma(_2131, cbSceneParam._m0[60u].y, _2127 * cbSceneParam._m0[60u].x))) / _2343;
        float _2345 = fma(_2139, cbSceneParam._m0[61u].w, fma(_2135, cbSceneParam._m0[61u].z, fma(_2131, cbSceneParam._m0[61u].y, _2127 * cbSceneParam._m0[61u].x))) / _2343;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2344 >= cbSceneParam._m0[64u].x) && (_2345 >= cbSceneParam._m0[64u].y)) && (_2344 <= cbSceneParam._m0[64u].z)) && (_2345 <= cbSceneParam._m0[64u].w))
        {
            float _2483 = fma(_2139, cbSceneParam._m0[62u].w, fma(_2135, cbSceneParam._m0[62u].z, fma(_2131, cbSceneParam._m0[62u].y, _2127 * cbSceneParam._m0[62u].x))) / _2343;
            float _2487 = isnan(cbSceneParam._m0[41u].w) ? _2483 : (isnan(_2483) ? cbSceneParam._m0[41u].w : max(_2483, cbSceneParam._m0[41u].w));
            float _2530 = (cbSceneParam._m0[33u].x - sqrt(((_2141 * _2141) + (_2140 * _2140)) + (_2142 * _2142))) * cbSceneParam._m0[33u].y;
            float _4726 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
            float _2537 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2344, cbSceneParam._m0[33u].w + _2345), _2487), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2344, _2345 - cbSceneParam._m0[33u].z), _2487), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2344 - cbSceneParam._m0[33u].z, _2345 - cbSceneParam._m0[33u].w), _2487), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2344 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2345), _2487), 0.0)).x), vec4(0.25)));
            float _2541 = 1.0 - (_2537 * cbSceneParam._m0[34u].x);
            float _2542 = 1.0 - (_2537 * cbSceneParam._m0[34u].y);
            float _2543 = 1.0 - (_2537 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2543) ? _2291 : (isnan(_2291) ? _2543 : min(_2291, _2543));
            frontier_phi_37_36_ladder_1 = isnan(_2542) ? _2290 : (isnan(_2290) ? _2542 : min(_2290, _2542));
            frontier_phi_37_36_ladder_2 = isnan(_2541) ? _2289 : (isnan(_2289) ? _2541 : min(_2289, _2541));
        }
        else
        {
            frontier_phi_37_36_ladder = _2291;
            frontier_phi_37_36_ladder_1 = _2290;
            frontier_phi_37_36_ladder_2 = _2289;
        }
        _2355 = frontier_phi_37_36_ladder_2;
        _2357 = frontier_phi_37_36_ladder_1;
        _2359 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2355 = _2289;
        _2357 = _2290;
        _2359 = _2291;
    }
    uvec4 _2364 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2366 = _2364.x * 14u;
    uint _2367 = _2366 + 13u;
    float _2374 = _1033 + (-1.0);
    float _2379 = (cbLight._m0[_2367].x * _2374) + 1.0;
    float _2380 = (cbLight._m0[_2367].y * _2374) + 1.0;
    float _2381 = (cbLight._m0[_2367].z * _2374) + 1.0;
    float _2382 = (cbLight._m0[_2367].w * _2374) + 1.0;
    uint _2383 = _2366 + 5u;
    float _2389 = isnan(1.0) ? _2380 : (isnan(_2380) ? 1.0 : min(_2380, 1.0));
    uint _2393 = _2366 + 4u;
    float _2402 = isnan(1.0) ? _2379 : (isnan(_2379) ? 1.0 : min(_2379, 1.0));
    uint _2406 = _2366 | 1u;
    float _2417 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_856, _857, _858));
    float _2420 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_856, _857, _858));
    float _4762 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _4773 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2425 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * 0.3183098733425140380859375;
    float _2427 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * 0.3183098733425140380859375;
    float _2434 = ((cbLight._m0[_2383].x * _2389) * _2427) + (((cbLight._m0[_2393].x * _2355) * _2402) * _2425);
    float _2435 = ((_2389 * cbLight._m0[_2383].y) * _2427) + (((cbLight._m0[_2393].y * _2357) * _2402) * _2425);
    float _2436 = ((_2389 * cbLight._m0[_2383].z) * _2427) + (((cbLight._m0[_2393].z * _2359) * _2402) * _2425);
    uvec4 _2440 = floatBitsToUint(cbLight._m0[_2366 + 12u]);
    bool _2442 = _2440.x == 0u;
    float _2544;
    float _2546;
    float _2548;
    if (_2442)
    {
        _2544 = _2434;
        _2546 = _2435;
        _2548 = _2436;
    }
    else
    {
        uint _2552 = _2366 + 6u;
        float _2568 = (dot(vec3(cbLight._m0[_2366 + 2u].xyz), vec3(_856, _857, _858)) * 0.5) + 0.5;
        float _2569 = _2568 * _2568;
        float _4784 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2570 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2571 = isnan(1.0) ? _2381 : (isnan(_2381) ? 1.0 : min(_2381, 1.0));
        _2544 = (((cbLight._m0[_2552].x * 0.3183098733425140380859375) * _2570) * _2571) + _2434;
        _2546 = (((cbLight._m0[_2552].y * 0.3183098733425140380859375) * _2570) * _2571) + _2435;
        _2548 = (((cbLight._m0[_2552].z * 0.3183098733425140380859375) * _2570) * _2571) + _2436;
    }
    bool _2551 = _2440.y == 0u;
    float _2606;
    float _2608;
    float _2610;
    if (_2551)
    {
        _2606 = _2544;
        _2608 = _2546;
        _2610 = _2548;
    }
    else
    {
        uint _2779 = _2366 + 7u;
        float _2795 = (dot(vec3(cbLight._m0[_2366 + 3u].xyz), vec3(_856, _857, _858)) * 0.5) + 0.5;
        float _2796 = _2795 * _2795;
        float _4800 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2797 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2798 = isnan(1.0) ? _2382 : (isnan(_2382) ? 1.0 : min(_2382, 1.0));
        _2606 = (((cbLight._m0[_2779].x * 0.3183098733425140380859375) * _2797) * _2798) + _2544;
        _2608 = (((cbLight._m0[_2779].y * 0.3183098733425140380859375) * _2797) * _2798) + _2546;
        _2610 = (((cbLight._m0[_2779].z * 0.3183098733425140380859375) * _2797) * _2798) + _2548;
    }
    uint _2613 = _2366 + 8u;
    float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _859) * 0.949999988079071044921875);
    float _2627 = _2626 * _2626;
    float _2628 = cbLight._m0[_2366].x + _935;
    float _2629 = cbLight._m0[_2366].y + _936;
    float _2630 = cbLight._m0[_2366].z + _937;
    float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
    float _2635 = _2634 * _2628;
    float _2636 = _2634 * _2629;
    float _2637 = _2634 * _2630;
    float _2638 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2366].xyz));
    float _4816 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2641 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
    float _4827 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _2642 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
    float _2643 = dot(vec3(_856, _857, _858), vec3(_2635, _2636, _2637));
    float _4838 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2646 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
    float _2647 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2635, _2636, _2637));
    float _4849 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2651 = _2627 * _2627;
    float _2655 = ((_2646 * _2646) * (_2651 + (-1.0))) + 1.0;
    float _2663 = exp2(log2(1.0 - (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) * 5.0);
    float _2664 = 0.959999978542327880859375 - _1014;
    float _2666 = 0.959999978542327880859375 - _1015;
    float _2667 = 0.959999978542327880859375 - _1016;
    float _2674 = 1.0 - _2627;
    float _2685 = (0.5 / (((_2642 * ((_2641 * _2674) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2642 * _2674) + _2627) * _2641))) * _2641;
    float _4860 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2687 = (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2651 / ((_2655 * _2655) * 3.141590118408203125));
    uint _2701 = _2366 + 9u;
    float _2712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2406].w)) * _859) * 0.949999988079071044921875);
    float _2713 = _2712 * _2712;
    float _2714 = cbLight._m0[_2406].x + _935;
    float _2715 = cbLight._m0[_2406].y + _936;
    float _2716 = cbLight._m0[_2406].z + _937;
    float _2720 = inversesqrt(dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716)));
    float _2721 = _2720 * _2714;
    float _2722 = _2720 * _2715;
    float _2723 = _2720 * _2716;
    float _2724 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2406].xyz));
    float _4871 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2727 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
    float _2728 = dot(vec3(_856, _857, _858), vec3(_2721, _2722, _2723));
    float _4882 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2731 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
    float _2732 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_2721, _2722, _2723));
    float _4893 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2736 = _2713 * _2713;
    float _2740 = ((_2731 * _2731) * (_2736 + (-1.0))) + 1.0;
    float _2747 = exp2(log2(1.0 - (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0)))) * 5.0);
    float _2754 = 1.0 - _2713;
    float _2764 = (0.5 / (((_2642 * ((_2727 * _2754) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2642 * _2754) + _2713) * _2727))) * _2727;
    float _4904 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2766 = (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2736 / ((_2740 * _2740) * 3.141590118408203125));
    float _2776 = (((((_2747 * _2664) + _1017) * cbLight._m0[_2701].x) * _2766) * _2389) + ((((cbLight._m0[_2613].x * _2355) * ((_2663 * _2664) + _1017)) * _2687) * _2402);
    float _2777 = (((((_2747 * _2666) + _1019) * cbLight._m0[_2701].y) * _2766) * _2389) + ((((cbLight._m0[_2613].y * _2357) * ((_2663 * _2666) + _1019)) * _2687) * _2402);
    float _2778 = (((((_2747 * _2667) + _1020) * cbLight._m0[_2701].z) * _2766) * _2389) + ((((cbLight._m0[_2613].z * _2359) * ((_2663 * _2667) + _1020)) * _2687) * _2402);
    float _2834;
    float _2836;
    float _2838;
    if (_2442)
    {
        _2834 = _2776;
        _2836 = _2777;
        _2838 = _2778;
    }
    else
    {
        uint _2840 = _2366 + 2u;
        uint _2844 = _2366 + 10u;
        float _2858 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2840].w)) * _859) * 0.949999988079071044921875);
        float _2859 = _2858 * _2858;
        float _2860 = cbLight._m0[_2840].x + _935;
        float _2861 = cbLight._m0[_2840].y + _936;
        float _2862 = cbLight._m0[_2840].z + _937;
        float _2866 = inversesqrt(dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862)));
        float _2867 = _2866 * _2860;
        float _2868 = _2866 * _2861;
        float _2869 = _2866 * _2862;
        float _2870 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2840].xyz));
        float _4915 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2873 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
        float _2874 = dot(vec3(_856, _857, _858), vec3(_2867, _2868, _2869));
        float _4926 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2877 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
        float _2878 = dot(vec3(cbLight._m0[_2840].xyz), vec3(_2867, _2868, _2869));
        float _4937 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2882 = _2859 * _2859;
        float _2886 = ((_2877 * _2877) * (_2882 + (-1.0))) + 1.0;
        float _2893 = exp2(log2(1.0 - (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) * 5.0);
        float _2900 = 1.0 - _2859;
        float _2910 = (0.5 / (((_2642 * ((_2873 * _2900) + _2859)) + 9.9999999392252902907785028219223e-09) + (((_2642 * _2900) + _2859) * _2873))) * _2873;
        float _4948 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2912 = (isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0))) * (_2882 / ((_2886 * _2886) * 3.141590118408203125));
        float _2913 = isnan(1.0) ? _2381 : (isnan(_2381) ? 1.0 : min(_2381, 1.0));
        _2834 = (((((_2893 * _2664) + _1017) * cbLight._m0[_2844].x) * _2912) * _2913) + _2776;
        _2836 = (((((_2893 * _2666) + _1019) * cbLight._m0[_2844].y) * _2912) * _2913) + _2777;
        _2838 = (((((_2893 * _2667) + _1020) * cbLight._m0[_2844].z) * _2912) * _2913) + _2778;
    }
    float _2944;
    float _2946;
    float _2948;
    if (_2551)
    {
        _2944 = _2834;
        _2946 = _2836;
        _2948 = _2838;
    }
    else
    {
        uint _2955 = _2366 + 3u;
        uint _2959 = _2366 + 11u;
        float _2973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2955].w)) * _859) * 0.949999988079071044921875);
        float _2974 = _2973 * _2973;
        float _2975 = cbLight._m0[_2955].x + _935;
        float _2976 = cbLight._m0[_2955].y + _936;
        float _2977 = cbLight._m0[_2955].z + _937;
        float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
        float _2982 = _2981 * _2975;
        float _2983 = _2981 * _2976;
        float _2984 = _2981 * _2977;
        float _2985 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2955].xyz));
        float _4964 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        float _2988 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
        float _2989 = dot(vec3(_856, _857, _858), vec3(_2982, _2983, _2984));
        float _4975 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2992 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
        float _2993 = dot(vec3(cbLight._m0[_2955].xyz), vec3(_2982, _2983, _2984));
        float _4986 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        float _2997 = _2974 * _2974;
        float _3001 = ((_2992 * _2992) * (_2997 + (-1.0))) + 1.0;
        float _3008 = exp2(log2(1.0 - (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) * 5.0);
        float _3015 = 1.0 - _2974;
        float _3025 = (0.5 / (((_2642 * ((_2988 * _3015) + _2974)) + 9.9999999392252902907785028219223e-09) + (((_2642 * _3015) + _2974) * _2988))) * _2988;
        float _4997 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
        float _3027 = (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_2997 / ((_3001 * _3001) * 3.141590118408203125));
        float _3028 = isnan(1.0) ? _2382 : (isnan(_2382) ? 1.0 : min(_2382, 1.0));
        _2944 = (((((_3008 * _2664) + _1017) * cbLight._m0[_2959].x) * _3027) * _3028) + _2834;
        _2946 = (((((_3008 * _2666) + _1019) * cbLight._m0[_2959].y) * _3027) * _3028) + _2836;
        _2948 = (((((_3008 * _2667) + _1020) * cbLight._m0[_2959].z) * _3027) * _3028) + _2838;
    }
    float _3094;
    float _3096;
    float _3098;
    float _3100;
    float _3102;
    float _3104;
    if (_2364.y == 0u)
    {
        uvec4 _3049 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3050 = _3049.x;
        uint _3061 = uint((float(_3049.y) * floor(float(uint(cbSceneParam._m0[85u].y * _956) / _3050))) + floor(float(uint(cbSceneParam._m0[85u].x * _955) / _3050)));
        float _3071 = (log2(_2142 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3072 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
        uint _3075 = uint(isnan(14.0) ? _3072 : (isnan(_3072) ? 14.0 : min(_3072, 14.0)));
        uvec4 _3080 = texelFetch(g_lightClusterGridBuffer, int(((_3075 << 2u) + (_3061 << 6u)) >> 2u));
        uint _3081 = _3080.x;
        uint _3082 = _3049.z;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        if (((((1u << ((_3082 >> 4u) & 15u)) + 4294967295u) & _3081) == 0u) || ((_3082 & 240u) == 0u))
        {
            _3161 = 0.0;
            _3163 = 0.0;
            _3165 = 0.0;
            _3167 = 0.0;
            _3169 = 0.0;
            _3171 = 0.0;
        }
        else
        {
            float _3162;
            float _3164;
            float _3166;
            float _3168;
            float _3170;
            float _3172;
            float _3314 = 0.0;
            float _3315 = 0.0;
            float _3316 = 0.0;
            float _3317 = 0.0;
            float _3318 = 0.0;
            float _3319 = 0.0;
            uint _3320 = 0u;
            uint _3329;
            bool _3330;
            for (;;)
            {
                _3329 = texelFetch(g_lightClassification, int((((_3075 << 5u) + (_3061 << 9u)) + (_3320 << 2u)) >> 2u)).x;
                _3330 = _3329 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3330)
                {
                    frontier_phi_71_pred = _3319;
                    frontier_phi_71_pred_1 = _3318;
                    frontier_phi_71_pred_2 = _3317;
                    frontier_phi_71_pred_3 = _3316;
                    frontier_phi_71_pred_4 = _3315;
                    frontier_phi_71_pred_5 = _3314;
                }
                else
                {
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    float _3463;
                    float _3464;
                    uint _3465;
                    _3459 = _3314;
                    _3460 = _3315;
                    _3461 = _3316;
                    _3462 = _3317;
                    _3463 = _3318;
                    _3464 = _3319;
                    _3465 = _3329;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    for (;;)
                    {
                        uint _3469 = uint(findLSB(_3465)) + (_3320 << 5u);
                        uint _3466 = (_3465 + 4294967295u) & _3465;
                        uint _3471 = _3469 * 48u;
                        vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3471)).x, texelFetch(g_PointLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3471 + 3u)).x));
                        uint _3491 = (_3469 * 48u) + 4u;
                        vec4 _3504 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3491)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 3u)).x));
                        uint _3510 = (_3469 * 48u) + 8u;
                        vec3 _3521 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3510)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 2u)).x));
                        float _3525 = _3485.x - _2140;
                        float _3526 = _3485.y - _2141;
                        float _3527 = _3485.z - _2142;
                        float _3528 = dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527));
                        float _3531 = inversesqrt(_3528);
                        float _3532 = _3531 * _3525;
                        float _3533 = _3531 * _3526;
                        float _3534 = _3531 * _3527;
                        float _3535 = dot(vec3(_974, _977, _980), vec3(_3532, _3533, _3534));
                        float _3540 = 1.0 - (_3528 * _3485.w);
                        float _5023 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3541 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                        float _3542 = sqrt(_3528) * _3504.w;
                        float _3545 = 1.39999997615814208984375 / (_3542 + 1.39999997615814208984375);
                        float _3546 = _3545 * _3545;
                        float _3549 = ((1.0 - _3546) * _3535) + _3546;
                        float _3552 = _3542 * _3542;
                        float _3556 = ((isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0))) * _3541) / ((_3552 * 0.699999988079071044921875) + 1.0);
                        float _3560 = (-0.0) - _2140;
                        float _3561 = (-0.0) - _2141;
                        float _3562 = (-0.0) - _2142;
                        float _3566 = inversesqrt(dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562)));
                        float _3567 = _3566 * _3560;
                        float _3568 = _3566 * _3561;
                        float _3569 = _3566 * _3562;
                        float _3576 = exp2(log2(1.0 / ((_3552 * 3.5) + 5.0)) * 0.25);
                        float _3577 = 1.0 - _1049;
                        float _3584 = sqrt(1.0 - ((1.0 - (_3577 * _3577)) * (1.0 - (_3576 * _3576))));
                        float _3585 = _3584 * _3584;
                        float _3586 = _3585 * _3585;
                        float _3587 = _3567 + _3532;
                        float _3588 = _3568 + _3533;
                        float _3589 = _3569 + _3534;
                        float _3593 = inversesqrt(dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589)));
                        float _3597 = dot(vec3(_974, _977, _980), vec3(_3567, _3568, _3569));
                        float _5039 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                        float _3600 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                        float _3601 = dot(vec3(_974, _977, _980), vec3(_3593 * _3587, _3593 * _3588, _3593 * _3589));
                        float _5050 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                        float _3604 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
                        float _3608 = ((_3604 * _3604) * (_3586 + (-1.0))) + 1.0;
                        float _3609 = _3545 * _3585;
                        float _3610 = _3609 * _3609;
                        float _3613 = ((1.0 - _3610) * _3535) + _3610;
                        float _5061 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                        float _3614 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
                        float _3615 = 1.0 - _3585;
                        float _3625 = (0.5 / (((_3614 * ((_3600 * _3615) + _3585)) + 9.9999999392252902907785028219223e-09) + (((_3614 * _3615) + _3585) * _3600))) * _3614;
                        float _5072 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                        float _3636 = (((_3586 * 3.1415927410125732421875) * (isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0)))) / ((_3608 * _3608) * ((_3552 * 2.1991131305694580078125) + 3.141590118408203125))) * _3541;
                        _3389 = (_3556 * _3504.x) + _3462;
                        _3390 = (_3556 * _3504.y) + _3463;
                        _3391 = (_3556 * _3504.z) + _3464;
                        _3386 = (_3636 * _3521.x) + _3459;
                        _3387 = (_3636 * _3521.y) + _3460;
                        _3388 = (_3636 * _3521.z) + _3461;
                        if (_3466 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3459 = _3386;
                            _3460 = _3387;
                            _3461 = _3388;
                            _3462 = _3389;
                            _3463 = _3390;
                            _3464 = _3391;
                            _3465 = _3466;
                        }
                    }
                    frontier_phi_71_pred = _3391;
                    frontier_phi_71_pred_1 = _3390;
                    frontier_phi_71_pred_2 = _3389;
                    frontier_phi_71_pred_3 = _3388;
                    frontier_phi_71_pred_4 = _3387;
                    frontier_phi_71_pred_5 = _3386;
                }
                _3172 = frontier_phi_71_pred;
                _3170 = frontier_phi_71_pred_1;
                _3168 = frontier_phi_71_pred_2;
                _3166 = frontier_phi_71_pred_3;
                _3164 = frontier_phi_71_pred_4;
                _3162 = frontier_phi_71_pred_5;
                uint _3321 = _3320 + 1u;
                if (_3321 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3314 = _3162;
                    _3315 = _3164;
                    _3316 = _3166;
                    _3317 = _3168;
                    _3318 = _3170;
                    _3319 = _3172;
                    _3320 = _3321;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3161 = _3162;
            _3163 = _3164;
            _3165 = _3166;
            _3167 = _3168;
            _3169 = _3170;
            _3171 = _3172;
        }
        uvec4 _3175 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3176 = _3175.z;
        uint _3178 = (_3176 >> 8u) & 15u;
        float _3282;
        float _3284;
        float _3286;
        float _3288;
        float _3290;
        float _3292;
        if (((4294967295u << _3178) & _3081) == 0u)
        {
            _3282 = _3161;
            _3284 = _3163;
            _3286 = _3165;
            _3288 = _3167;
            _3290 = _3169;
            _3292 = _3171;
        }
        else
        {
            float _3307 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
            float _3308 = _3307 * _2140;
            float _3309 = _3307 * _2141;
            float _3310 = _3307 * _2142;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3178 < ((_3176 >> 12u) & 15u))
            {
                float _3283;
                float _3285;
                float _3287;
                float _3289;
                float _3291;
                float _3293;
                float _3442 = _3161;
                float _3443 = _3163;
                float _3444 = _3165;
                float _3445 = _3167;
                float _3446 = _3169;
                float _3447 = _3171;
                uint _3448 = _3178;
                uint _3457;
                bool _3458;
                for (;;)
                {
                    _3457 = texelFetch(g_lightClassification, int((((_3075 << 5u) + (_3061 << 9u)) + (_3448 << 2u)) >> 2u)).x;
                    _3458 = _3457 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3458)
                    {
                        frontier_phi_82_pred = _3447;
                        frontier_phi_82_pred_1 = _3446;
                        frontier_phi_82_pred_2 = _3445;
                        frontier_phi_82_pred_3 = _3444;
                        frontier_phi_82_pred_4 = _3443;
                        frontier_phi_82_pred_5 = _3442;
                    }
                    else
                    {
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3943;
                        float _3944;
                        float _3945;
                        float _3946;
                        float _3947;
                        float _3948;
                        float _3663 = _3442;
                        float _3664 = _3443;
                        float _3665 = _3444;
                        float _3666 = _3445;
                        float _3667 = _3446;
                        float _3668 = _3447;
                        uint _3669 = _3457;
                        uint _3670;
                        vec4 _3695;
                        float _3696;
                        vec4 _3711;
                        vec3 _3723;
                        vec4 _3738;
                        vec4 _3753;
                        float _3799;
                        bool _3800;
                        for (;;)
                        {
                            uint _3680 = ((_3448 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3669));
                            _3670 = (_3669 + 4294967295u) & _3669;
                            uint _3682 = _3680 * 40u;
                            _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            _3696 = _3695.w;
                            uint _3698 = (_3680 * 40u) + 4u;
                            _3711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 3u)).x));
                            uint _3713 = (_3680 * 40u) + 8u;
                            _3723 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x));
                            uint _3725 = (_3680 * 40u) + 16u;
                            _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            uint _3740 = (_3680 * 40u) + 20u;
                            _3753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 3u)).x));
                            uint _3755 = (_3680 * 40u) + 24u;
                            vec4 _3768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 3u)).x));
                            uint _3774 = (_3680 * 40u) + 28u;
                            vec4 _3787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 3u)).x));
                            _3799 = fma(_2142, _3787.z, fma(_2141, _3787.y, _3787.x * _2140)) + _3787.w;
                            _3800 = !((fma(_2142, _3768.z, fma(_2141, _3768.y, _3768.x * _2140)) + _3768.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3800)
                            {
                                float _3827 = _3695.x - _2140;
                                float _3828 = _3695.y - _2141;
                                float _3829 = _3695.z - _2142;
                                float _3830 = dot(vec3(_3827, _3828, _3829), vec3(_3827, _3828, _3829));
                                float _3833 = inversesqrt(_3830);
                                float _3834 = _3833 * _3827;
                                float _3835 = _3833 * _3828;
                                float _3836 = _3833 * _3829;
                                float _3840 = 1.0 - (_3830 / (_3696 * _3696));
                                float _5083 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3841 = isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0));
                                float _3845 = sqrt(_3830) * _3711.w;
                                float _3847 = 1.39999997615814208984375 / (_3845 + 1.39999997615814208984375);
                                float _3848 = _3847 * _3847;
                                float _3851 = ((1.0 - _3848) * dot(vec3(_3834, _3835, _3836), vec3(_974, _977, _980))) + _3848;
                                float _3854 = _3845 * _3845;
                                float _3858 = (fma(_2142, _3738.z, fma(_2141, _3738.y, _3738.x * _2140)) + _3738.w) / _3799;
                                float _3859 = (fma(_2142, _3753.z, fma(_2141, _3753.y, _3753.x * _2140)) + _3753.w) / _3799;
                                float _3863 = 1.0 - dot(vec2(_3858, _3859), vec2(_3858, _3859));
                                float _5099 = isnan(0.0) ? _3863 : (isnan(_3863) ? 0.0 : max(_3863, 0.0));
                                float _3864 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
                                float _3865 = _3864 * (((isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0))) * _3841) / ((_3854 * 0.699999988079071044921875) + 1.0));
                                float _3877 = exp2(log2(1.0 / ((_3854 * 3.5) + 5.0)) * 0.25);
                                float _3878 = 1.0 - _1049;
                                float _3885 = sqrt(1.0 - ((1.0 - (_3878 * _3878)) * (1.0 - (_3877 * _3877))));
                                float _3886 = _3885 * _3885;
                                float _3887 = _3886 * _3886;
                                float _3888 = _3834 - _3308;
                                float _3889 = _3835 - _3309;
                                float _3890 = _3836 - _3310;
                                float _3894 = inversesqrt(dot(vec3(_3888, _3889, _3890), vec3(_3888, _3889, _3890)));
                                float _3898 = dot(vec3(_974, _977, _980), vec3((-0.0) - _3308, (-0.0) - _3309, (-0.0) - _3310));
                                float _5110 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3901 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                                float _3902 = dot(vec3(_974, _977, _980), vec3(_3894 * _3888, _3894 * _3889, _3894 * _3890));
                                float _5121 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3905 = isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0));
                                float _3909 = ((_3905 * _3905) * (_3887 + (-1.0))) + 1.0;
                                float _3910 = _3847 * _3886;
                                float _3911 = _3910 * _3910;
                                float _3917 = ((1.0 - _3911) * dot(vec3(_974, _977, _980), vec3(_3834, _3835, _3836))) + _3911;
                                float _5132 = isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0));
                                float _3918 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                                float _3919 = 1.0 - _3886;
                                float _3929 = (0.5 / (((_3918 * ((_3901 * _3919) + _3886)) + 9.9999999392252902907785028219223e-09) + (((_3918 * _3919) + _3886) * _3901))) * _3918;
                                float _5143 = isnan(0.0) ? _3929 : (isnan(_3929) ? 0.0 : max(_3929, 0.0));
                                float _3939 = (_3864 * _3841) * (((_3887 * 3.1415927410125732421875) * (isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0)))) / ((_3909 * _3909) * ((_3854 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3865 * _3711.z;
                                frontier_phi_88_pred_1 = _3865 * _3711.y;
                                frontier_phi_88_pred_2 = _3865 * _3711.x;
                                frontier_phi_88_pred_3 = _3939 * _3723.z;
                                frontier_phi_88_pred_4 = _3939 * _3723.y;
                                frontier_phi_88_pred_5 = _3939 * _3723.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3948 = frontier_phi_88_pred;
                            _3947 = frontier_phi_88_pred_1;
                            _3946 = frontier_phi_88_pred_2;
                            _3945 = frontier_phi_88_pred_3;
                            _3944 = frontier_phi_88_pred_4;
                            _3943 = frontier_phi_88_pred_5;
                            _3653 = _3946 + _3666;
                            _3654 = _3947 + _3667;
                            _3655 = _3948 + _3668;
                            _3650 = _3943 + _3663;
                            _3651 = _3944 + _3664;
                            _3652 = _3945 + _3665;
                            if (_3670 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3663 = _3650;
                                _3664 = _3651;
                                _3665 = _3652;
                                _3666 = _3653;
                                _3667 = _3654;
                                _3668 = _3655;
                                _3669 = _3670;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3655;
                        frontier_phi_82_pred_1 = _3654;
                        frontier_phi_82_pred_2 = _3653;
                        frontier_phi_82_pred_3 = _3652;
                        frontier_phi_82_pred_4 = _3651;
                        frontier_phi_82_pred_5 = _3650;
                    }
                    _3293 = frontier_phi_82_pred;
                    _3291 = frontier_phi_82_pred_1;
                    _3289 = frontier_phi_82_pred_2;
                    _3287 = frontier_phi_82_pred_3;
                    _3285 = frontier_phi_82_pred_4;
                    _3283 = frontier_phi_82_pred_5;
                    uint _3449 = _3448 + 1u;
                    if (_3449 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3442 = _3283;
                        _3443 = _3285;
                        _3444 = _3287;
                        _3445 = _3289;
                        _3446 = _3291;
                        _3447 = _3293;
                        _3448 = _3449;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3289;
                frontier_phi_63_64_ladder_1 = _3293;
                frontier_phi_63_64_ladder_2 = _3291;
                frontier_phi_63_64_ladder_3 = _3287;
                frontier_phi_63_64_ladder_4 = _3285;
                frontier_phi_63_64_ladder_5 = _3283;
            }
            else
            {
                frontier_phi_63_64_ladder = _3167;
                frontier_phi_63_64_ladder_1 = _3171;
                frontier_phi_63_64_ladder_2 = _3169;
                frontier_phi_63_64_ladder_3 = _3165;
                frontier_phi_63_64_ladder_4 = _3163;
                frontier_phi_63_64_ladder_5 = _3161;
            }
            _3282 = frontier_phi_63_64_ladder_5;
            _3284 = frontier_phi_63_64_ladder_4;
            _3286 = frontier_phi_63_64_ladder_3;
            _3288 = frontier_phi_63_64_ladder;
            _3290 = frontier_phi_63_64_ladder_2;
            _3292 = frontier_phi_63_64_ladder_1;
        }
        float _3297 = isnan(1.0) ? _1033 : (isnan(_1033) ? 1.0 : min(_1033, 1.0));
        _3094 = (_3297 * _3288) + _2606;
        _3096 = (_3297 * _3290) + _2608;
        _3098 = (_3297 * _3292) + _2610;
        _3100 = ((_3282 * _1017) * _3297) + _2944;
        _3102 = ((_3284 * _1019) * _3297) + _2946;
        _3104 = ((_3286 * _1020) * _3297) + _2948;
    }
    else
    {
        _3094 = _2606;
        _3096 = _2608;
        _3098 = _2610;
        _3100 = _2944;
        _3102 = _2946;
        _3104 = _2948;
    }
    float _5159 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _5170 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _5181 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _3121 = ((isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0))) * (_3094 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1033))) + ((_3100 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1872)) * cbPerFrame._m0[3u].x);
    float _3122 = ((isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0))) * (_3096 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1033))) + ((_3102 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1872)) * cbPerFrame._m0[3u].x);
    float _3123 = ((isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0))) * (_3098 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1033))) + ((_3104 + ((isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0))) * _1872)) * cbPerFrame._m0[3u].x);
    uint _3124 = _287 + 6u;
    float _3132 = _955 / cbSceneParam._m0[86u].x;
    float _3133 = _956 / cbSceneParam._m0[86u].y;
    vec4 _3147 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3132, _3133, (log2((isnan(cbSceneParam._m0[77u].w) ? _878 : (isnan(_878) ? cbSceneParam._m0[77u].w : min(_878, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3149 = _3147.x;
    float _3150 = _3147.y;
    float _3151 = _3147.z;
    float _3152 = _3147.w;
    float _3224;
    float _3226;
    float _3228;
    float _3230;
    if (_878 > cbSceneParam._m0[78u].w)
    {
        float _3186 = isnan(_878) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _878 : min(cbSceneParam._m0[80u].w, _878));
        float _3187 = _3186 / _878;
        float _3198 = _3187 * _928;
        float _3199 = _929 * _3187;
        float _3200 = (-0.0) - _3199;
        float _3202 = _3187 * _930;
        float _3204 = (cbSceneParam._m0[77u].w * _3200) / _3186;
        float _3205 = _3204 + cbSceneParam._m0[79u].w;
        float _3206 = cbSceneParam._m0[79u].w - _3199;
        float _3212 = sqrt(((_3198 * _3198) + (_3199 * _3199)) + (_3202 * _3202));
        float _3215 = (1.0 - (cbSceneParam._m0[77u].w / _3186)) * _3212;
        float _3220 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3222 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3399;
        if (abs((_3200 - _3204) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3399 = ((((_3205 > 0.0) ? exp2(_3220 * _3205) : (2.0 - exp2(_3222 * _3205))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3215;
        }
        else
        {
            float _3343 = 1.0 / cbSceneParam._m0[80u].x;
            float _3344 = isnan(_3206) ? _3205 : (isnan(_3205) ? _3206 : max(_3205, _3206));
            float _3345 = isnan(_3206) ? _3205 : (isnan(_3205) ? _3206 : min(_3205, _3206));
            float _3354 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : min(_3344, 0.0));
            float _3355 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : min(_3345, 0.0));
            _3399 = ((abs(_3212 / _3200) * cbSceneParam._m0[80u].y) * ((((_3354 - _3355) * 2.0) - ((exp2(_3220 * (isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0)))) - exp2(_3220 * (isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0))))) * _3343)) - ((exp2(_3222 * _3354) - exp2(_3222 * _3355)) * _3343))) + (_3215 * cbSceneParam._m0[80u].z);
        }
        vec4 _3401 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3132, _3133, 1.0), 0.0);
        float _3410 = exp2((_3399 * (-1.44269502162933349609375)) * (1.0 - _3401.w));
        float _3411 = log2(_3410);
        float _3427 = log2(_3152);
        _3224 = (exp2(_3427 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3411 * cbSceneParam._m0[78u].x)) * _3401.x) / cbSceneParam._m0[78u].x)) + _3149;
        _3226 = (exp2(_3427 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3411 * cbSceneParam._m0[78u].y)) * _3401.y) / cbSceneParam._m0[78u].y)) + _3150;
        _3228 = (exp2(_3427 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3411 * cbSceneParam._m0[78u].z)) * _3401.z) / cbSceneParam._m0[78u].z)) + _3151;
        _3230 = _3410 * _3152;
    }
    else
    {
        _3224 = _3149;
        _3226 = _3150;
        _3228 = _3151;
        _3230 = _3152;
    }
    bool _3437;
    vec4 _3240;
    vec4 _3262;
    float _3264;
    float _3268;
    float _3269;
    float _3270;
    float _3271;
    bool _3281;
    for (;;)
    {
        _3240 = cbMatDynParam._m0[0u];
        float _3242 = roundEven(_3240.y);
        bool _3243 = _3242 == 3.0;
        float _3244 = log2(_3230);
        float _3251 = exp2(_3244 * cbSceneParam._m0[78u].x) * _3121;
        float _3252 = exp2(_3244 * cbSceneParam._m0[78u].y) * _3122;
        float _3253 = exp2(_3244 * cbSceneParam._m0[78u].z) * _3123;
        float _3260 = _944 + (-0.5);
        _3262 = cbMtdParam._m0[1u];
        _3264 = _3262.y * _3260;
        float _3267 = (_3242 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3268 = _3267 * (_3243 ? _3251 : (_3251 + (cbSceneParam._m0[72u].w * _3224)));
        _3269 = _3267 * (_3243 ? _3252 : (_3252 + (cbSceneParam._m0[72u].w * _3226)));
        _3270 = _3267 * (_3243 ? _3253 : (_3253 + (cbSceneParam._m0[72u].w * _3228)));
        _3271 = _3260 * 0.999000012874603271484375;
        _3281 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3281)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3271) < 0.5)
            {
                _3437 = true;
                break;
            }
        }
        uint _3378 = _993 + uint(_3240.w);
        if ((cbInstanceData._m0[_3378].w < 1.0) && ((cbInstanceData._m0[_3378].w + _3271) < 0.5))
        {
            _3437 = true;
            break;
        }
        if ((_3264 + 1.0) < _3262.x)
        {
            _3437 = true;
            break;
        }
        _3437 = false;
        break;
    }
    float _3641;
    if (_3437)
    {
        discard_state = true;
        _3641 = 0.0;
    }
    else
    {
        _3641 = cbInstanceData._m0[_3124].w;
    }
    SV_Target.x = _3268;
    SV_Target.y = _3269;
    SV_Target.z = _3270;
    SV_Target.w = _3641;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3124].w;
    discard_exit();
}


