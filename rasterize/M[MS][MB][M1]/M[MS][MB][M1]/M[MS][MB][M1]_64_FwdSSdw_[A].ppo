#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1196;
float _3603;
float _3604;
float _3605;
float _3606;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3615 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3626 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3637 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _328 = _323.x * cbMtdParam._m0[11u].x;
    float _329 = _323.y * cbMtdParam._m0[11u].y;
    float _330 = _323.z * cbMtdParam._m0[11u].z;
    vec4 _349 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[24u].y) + _399) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3648 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _424 = (_417 * ((_349.x * cbMtdParam._m0[12u].x) - _328)) + _328;
    float _425 = (_417 * ((_349.y * cbMtdParam._m0[12u].y) - _329)) + _329;
    float _426 = (_417 * ((_349.z * cbMtdParam._m0[12u].z) - _330)) + _330;
    float _430 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _424;
    float _433 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _425;
    float _436 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _426;
    float _443 = ((_424 - _430) * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) + _430;
    float _444 = ((_425 - _433) * (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) + _433;
    float _445 = ((_426 - _436) * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) + _436;
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _500 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _502 = _500.x;
    float _503 = _500.y;
    float _504 = _500.z;
    float _513 = ((_483.z - _504) * _417) + _504;
    float _516 = ((((_483.x - _502) * _417) + _502) * 2.0) + (-1.0);
    float _517 = ((((_483.y - _503) * _417) + _503) * 2.0) + (-1.0);
    float _518 = dot(vec2(_516, _517), vec2(_516, _517));
    float _3659 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _523 = sqrt(1.0 - (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))));
    float _528 = _516 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_458.x * 2.0) + (-1.0)));
    float _529 = _517 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_458.y * 2.0) + (-1.0)));
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _570 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _572 = _570.x;
    float _590 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _285) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _286) + cbTextureTilingScale._m0[9u].w)).x - _572) * _417) + _572;
    float _594 = ((_556.x - _590) * cbMtdParam._m0[19u].z) + _590;
    float _599 = (((_458.z - _513) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _513;
    float _601 = cbMtdParam._m0[22u].x + _542.w;
    float _604 = fma(_523, _232 * NORMAL.x, fma(_529, _239 * TANGENT.x, (_225 * _217) * _528));
    float _607 = fma(_523, _232 * NORMAL.y, fma(_529, _239 * TANGENT.y, (_225 * _218) * _528));
    float _610 = fma(_523, _232 * NORMAL.z, fma(_529, _239 * TANGENT.z, (_225 * _219) * _528));
    float _614 = inversesqrt(dot(vec3(_604, _607, _610), vec3(_604, _607, _610)));
    float _615 = _614 * _604;
    float _616 = _614 * _607;
    float _617 = _614 * _610;
    float _3670 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _618 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3692 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3703 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3714 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3725 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _623 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _637 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _688 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _678);
    float _689 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _678);
    float _690 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _678);
    float _694 = inversesqrt(dot(vec3(_688, _689, _690), vec3(_688, _689, _690)));
    float _695 = _688 * _694;
    float _696 = _689 * _694;
    float _697 = _690 * _694;
    vec4 _702 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _704 = _702.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _876 = sqrt(((_688 * _688) + (_689 * _689)) + (_690 * _690));
        float _882 = (cbMatDynParam._m0[5u].x * _876) + cbMatDynParam._m0[5u].y;
        float _3736 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _887 = (cbMatDynParam._m0[5u].z * _876) + cbMatDynParam._m0[5u].w;
        float _3747 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) - _883)) + _883) < ((_704 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _715 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _716 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _734 = fma(_617, cbSceneParam._m0[5u].z, fma(_616, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _615));
    float _737 = fma(_617, cbSceneParam._m0[6u].z, fma(_616, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _615));
    float _740 = fma(_617, cbSceneParam._m0[7u].z, fma(_616, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _615));
    uint _753 = _266 + 9u;
    uint _754 = _753 + uint(cbMatDynParam._m0[0u].w);
    float _760 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_754].x;
    float _761 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) * cbInstanceData._m0[_754].y;
    float _762 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_754].z;
    float _3758 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _766 = 1.0 - _623;
    float _767 = _763 * _766;
    float _768 = _764 * _766;
    float _769 = _765 * _766;
    float _774 = (_763 + (-0.039999999105930328369140625)) * _623;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _623;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _623;
    float _777 = _774 + 0.039999999105930328369140625;
    float _779 = _775 + 0.039999999105930328369140625;
    float _780 = _776 + 0.039999999105930328369140625;
    vec4 _789 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _715, cbSceneParam._m0[86u].y * _716));
    float _793 = ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * TEXCOORD_5.w) * _789.x;
    float _794 = dot(vec3(_615, _616, _617), vec3(_695, _696, _697));
    float _797 = _794 * 2.0;
    float _801 = (_797 * _615) - _695;
    float _802 = (_797 * _616) - _696;
    float _803 = (_797 * _617) - _697;
    float _807 = abs(dot(vec3(_695, _696, _697), vec3(_615, _616, _617)));
    float _3791 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _809 = sqrt(_618);
    float _822 = exp2((_809 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_809 * 3.0));
    float _828 = (1.0 - _822) * ((_809 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _829 = _822 * _809;
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1195;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _920 = fma(_865, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857));
        float _924 = fma(_865, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857));
        float _928 = fma(_865, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857));
        float _953 = _857 + _615;
        float _954 = _861 + _616;
        float _955 = _865 + _617;
        float _965 = fma(_955, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953)) - _920;
        float _966 = fma(_955, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953)) - _924;
        float _967 = fma(_955, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953)) - _928;
        float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
        float _984 = ((_971 * _965) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_920 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_971 * _966) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_924 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_971 * _967) / cbModelParam._m0[34u].z) + ((((((_928 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1023 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_989.x + (-0.5));
        float _1025 = _1023 * (_989.y + (-0.5));
        float _1026 = _1023 * (_989.z + (-0.5));
        float _1033 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_996.x + (-0.5));
        float _1035 = _1033 * (_996.y + (-0.5));
        float _1036 = _1033 * (_996.z + (-0.5));
        float _1043 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1003.x + (-0.5));
        float _1045 = _1043 * (_1003.y + (-0.5));
        float _1046 = _1043 * (_1003.z + (-0.5));
        float _1053 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1010.x + (-0.5));
        float _1055 = _1053 * (_1010.y + (-0.5));
        float _1056 = _1053 * (_1010.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1077 = (dot(vec3(_615, _616, _617), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1087 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3839 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1089 + 1.0))) + _1094) * _1057;
        float _1104 = _1025 * 0.5;
        float _1105 = _1035 * 0.5;
        float _1106 = _1045 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_615, _616, _617), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3872 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1131 + 1.0))) + _1136) * _1058;
        float _1146 = _1026 * 0.5;
        float _1147 = _1036 * 0.5;
        float _1148 = _1046 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_615, _616, _617), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3905 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1173 + 1.0))) + _1178) * _1059;
        _1195 = _1026;
        _1197 = _1025;
        _1198 = _1024;
        _1199 = _1036;
        _1200 = _1035;
        _1201 = _1034;
        _1202 = _1046;
        _1203 = _1045;
        _1204 = _1044;
        _1205 = _1059;
        _1206 = _1058;
        _1207 = _1057;
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _1196;
        _1197 = _1196;
        _1198 = _1196;
        _1199 = _1196;
        _1200 = _1196;
        _1201 = _1196;
        _1202 = _1196;
        _1203 = _1196;
        _1204 = _1196;
        _1205 = _1196;
        _1206 = _1196;
        _1207 = _1196;
        _1208 = 0.0;
        _1209 = 0.0;
        _1210 = 0.0;
    }
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1238 = fma(_865, cbModelParam._m0[30u].z, fma(_861, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857));
        float _1242 = fma(_865, cbModelParam._m0[31u].z, fma(_861, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857));
        float _1246 = fma(_865, cbModelParam._m0[32u].z, fma(_861, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857));
        float _1269 = _857 + _615;
        float _1270 = _861 + _616;
        float _1271 = _865 + _617;
        float _1281 = fma(_1271, cbModelParam._m0[30u].z, fma(_1270, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1269)) - _1238;
        float _1282 = fma(_1271, cbModelParam._m0[31u].z, fma(_1270, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1269)) - _1242;
        float _1283 = fma(_1271, cbModelParam._m0[32u].z, fma(_1270, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1269)) - _1246;
        float _1287 = inversesqrt(dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283)));
        float _1300 = ((_1287 * _1281) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1238 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1287 * _1282) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1242 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1287 * _1283) / cbModelParam._m0[35u].z) + ((((((_1246 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        float _1337 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1304.x + (-0.5));
        float _1339 = _1337 * (_1304.y + (-0.5));
        float _1340 = _1337 * (_1304.z + (-0.5));
        float _1347 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1311.x + (-0.5));
        float _1349 = _1347 * (_1311.y + (-0.5));
        float _1350 = _1347 * (_1311.z + (-0.5));
        float _1357 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1318.x + (-0.5));
        float _1359 = _1357 * (_1318.y + (-0.5));
        float _1360 = _1357 * (_1318.z + (-0.5));
        float _1367 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1325.x + (-0.5));
        float _1369 = _1367 * (_1325.y + (-0.5));
        float _1370 = _1367 * (_1325.z + (-0.5));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = _1338 * 0.5;
        float _1375 = _1348 * 0.5;
        float _1376 = _1358 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_615, _616, _617), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _3968 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1401 + 1.0))) + _1406) * _1371;
        float _1416 = _1339 * 0.5;
        float _1417 = _1349 * 0.5;
        float _1418 = _1359 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_615, _616, _617), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4001 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1443 + 1.0))) + _1448) * _1372;
        float _1458 = _1340 * 0.5;
        float _1459 = _1350 * 0.5;
        float _1460 = _1360 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_615, _616, _617), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4034 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1485 + 1.0))) + _1490) * _1373;
        _1507 = _1340;
        _1508 = _1339;
        _1509 = _1338;
        _1510 = _1350;
        _1511 = _1349;
        _1512 = _1348;
        _1513 = _1360;
        _1514 = _1359;
        _1515 = _1358;
        _1516 = _1373;
        _1517 = _1372;
        _1518 = _1371;
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
    }
    else
    {
        _1507 = _1196;
        _1508 = _1196;
        _1509 = _1196;
        _1510 = _1196;
        _1511 = _1196;
        _1512 = _1196;
        _1513 = _1196;
        _1514 = _1196;
        _1515 = _1196;
        _1516 = _1196;
        _1517 = _1196;
        _1518 = _1196;
        _1519 = 0.0;
        _1520 = 0.0;
        _1521 = 0.0;
    }
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1208)) + _1208;
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1209)) + _1209;
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1210)) + _1210;
    float _1554 = fma(_1533, cbSceneParam._m0[89u].z, fma(_1532, cbSceneParam._m0[89u].y, _1531 * cbSceneParam._m0[89u].x));
    float _1557 = fma(_1533, cbSceneParam._m0[90u].z, fma(_1532, cbSceneParam._m0[90u].y, _1531 * cbSceneParam._m0[90u].x));
    float _1560 = fma(_1533, cbSceneParam._m0[91u].z, fma(_1532, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1531));
    float _1575 = _801 * 0.5;
    float _1576 = _802 * 0.5;
    float _1577 = _803 * 0.5;
    float _1578 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1581 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1584 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1618;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1591 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1195, _1199, _1202, _1205));
        float _1595 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1599 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1606 = dot(vec4(cbModelParam._m0[39u]), vec4(_1575, _1576, _1577, 1.0));
        _1618 = dot(vec3(isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1606) ? 0.0 : (isnan(0.0) ? _1606 : max(0.0, _1606))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1618 = 1.0;
    }
    float _1629;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1620 = dot(vec4(cbModelParam._m0[40u]), vec4(_1575, _1576, _1577, 1.0));
        _1629 = dot(vec3(isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1620) ? 0.0 : (isnan(0.0) ? _1620 : max(0.0, _1620))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1629 = 1.0;
    }
    float _1633 = (_1629 * cbModelParam._m0[1u].x) + (_1618 * (1.0 - cbModelParam._m0[1u].x));
    float _1643 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _618);
    float _1644 = isnan(_1643) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1643 : min(cbModelParam._m0[25u].z, _1643));
    float _1726;
    float _1728;
    float _1730;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1693 = fma(_865, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857)) + cbModelParam._m0[13u].w;
        float _1697 = fma(_865, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857)) + cbModelParam._m0[14u].w;
        float _1701 = fma(_865, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857)) + cbModelParam._m0[15u].w;
        float _1704 = fma(_803, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801));
        float _1707 = fma(_803, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801));
        float _1710 = fma(_803, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801));
        float _1738;
        if (_1704 > 0.0)
        {
            _1738 = abs((1.0 - _1693) / _1704);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1693 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1738 = frontier_phi_17_15_ladder;
        }
        float _1963;
        if (_1707 > 0.0)
        {
            _1963 = abs((1.0 - _1697) / _1707);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1697 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1963 = frontier_phi_26_22_ladder;
        }
        float _2220;
        if (_1710 > 0.0)
        {
            _2220 = abs((1.0 - _1701) / _1710);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1701 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2220 = frontier_phi_38_33_ladder;
        }
        float _2222 = isnan(_1963) ? _1738 : (isnan(_1738) ? _1963 : min(_1738, _1963));
        float _2223 = isnan(_2220) ? _2222 : (isnan(_2222) ? _2220 : min(_2222, _2220));
        float _2227 = (_2223 * _1704) + _1693;
        float _2228 = (_2223 * _1707) + _1697;
        float _2229 = (_2223 * _1710) + _1701;
        float _2230 = _2223 * 9.9999997473787516355514526367188e-05;
        float _2232 = (-1.0) - _2230;
        float _2234 = _2230 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2229 > _2234) || ((_2229 < _2232) || ((_2228 > _2234) || ((_2228 < _2232) || ((_2227 < _2232) || (_2227 > _2234))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2357 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2229, cbModelParam._m0[9u].z, fma(_2228, cbModelParam._m0[9u].y, _2227 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2229, cbModelParam._m0[10u].z, fma(_2228, cbModelParam._m0[10u].y, _2227 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2229, cbModelParam._m0[11u].z, fma(_2228, cbModelParam._m0[11u].y, _2227 * cbModelParam._m0[11u].x))), _1644);
            frontier_phi_16_38_ladder = _2357.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2357.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2357.x * cbModelParam._m0[1u].y;
        }
        _1726 = frontier_phi_16_38_ladder_2;
        _1728 = frontier_phi_16_38_ladder_1;
        _1730 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1714 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_801, _802, _803), _1644);
        _1726 = _1714.x * cbModelParam._m0[1u].y;
        _1728 = _1714.y * cbModelParam._m0[1u].y;
        _1730 = _1714.z * cbModelParam._m0[1u].y;
    }
    float _1734 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _618);
    float _1735 = isnan(_1734) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1734 : min(cbModelParam._m0[25u].w, _1734));
    float _1826;
    float _1828;
    float _1830;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1790 = fma(_865, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857)) + cbModelParam._m0[21u].w;
        float _1794 = fma(_865, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857)) + cbModelParam._m0[22u].w;
        float _1798 = fma(_865, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857)) + cbModelParam._m0[23u].w;
        float _1801 = fma(_803, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801));
        float _1804 = fma(_803, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801));
        float _1807 = fma(_803, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801));
        float _1968;
        if (_1801 > 0.0)
        {
            _1968 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1968 = frontier_phi_28_24_ladder;
        }
        float _2247;
        if (_1804 > 0.0)
        {
            _2247 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2247 = frontier_phi_40_35_ladder;
        }
        float _2460;
        if (_1807 > 0.0)
        {
            _2460 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2460 = frontier_phi_49_46_ladder;
        }
        float _2462 = isnan(_2247) ? _1968 : (isnan(_1968) ? _2247 : min(_1968, _2247));
        float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
        float _2467 = (_2463 * _1801) + _1790;
        float _2468 = (_2463 * _1804) + _1794;
        float _2469 = (_2463 * _1807) + _1798;
        float _2470 = _2463 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2470;
        float _2473 = _2470 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2469 > _2473) || ((_2469 < _2471) || ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 < _2471) || (_2467 > _2473))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2469, cbModelParam._m0[17u].z, fma(_2468, cbModelParam._m0[17u].y, _2467 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2469, cbModelParam._m0[18u].z, fma(_2468, cbModelParam._m0[18u].y, _2467 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2469, cbModelParam._m0[19u].z, fma(_2468, cbModelParam._m0[19u].y, _2467 * cbModelParam._m0[19u].x))), _1735);
            frontier_phi_25_49_ladder = _2668.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2668.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2668.x * cbModelParam._m0[1u].z;
        }
        _1826 = frontier_phi_25_49_ladder_2;
        _1828 = frontier_phi_25_49_ladder_1;
        _1830 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1810 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_801, _802, _803), _1735);
        _1826 = _1810.x * cbModelParam._m0[1u].z;
        _1828 = _1810.y * cbModelParam._m0[1u].z;
        _1830 = _1810.z * cbModelParam._m0[1u].z;
    }
    float _1843 = (((_828 * _777) + _829) * _793) * ((cbModelParam._m0[1u].w * (_1826 - _1726)) + _1726);
    float _1845 = (((_828 * _779) + _829) * _793) * ((cbModelParam._m0[1u].w * (_1828 - _1728)) + _1728);
    float _1847 = (((_828 * _780) + _829) * _793) * ((cbModelParam._m0[1u].w * (_1830 - _1730)) + _1730);
    float _1850 = fma(_1847, cbSceneParam._m0[89u].z, fma(_1845, cbSceneParam._m0[89u].y, _1843 * cbSceneParam._m0[89u].x));
    float _1853 = fma(_1847, cbSceneParam._m0[90u].z, fma(_1845, cbSceneParam._m0[90u].y, _1843 * cbSceneParam._m0[90u].x));
    float _1856 = fma(_1847, cbSceneParam._m0[91u].z, fma(_1845, cbSceneParam._m0[91u].y, _1843 * cbSceneParam._m0[91u].x));
    vec4 _1864 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_715, _716));
    float _1866 = _1864.w;
    float _1878 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1866);
    float _1879 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1866);
    float _1880 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1866);
    uvec4 _1884 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _1886 = _1884.x * 14u;
    uint _1887 = _1886 + 13u;
    float _1894 = _793 + (-1.0);
    float _1899 = (cbLight._m0[_1887].x * _1894) + 1.0;
    float _1900 = (cbLight._m0[_1887].y * _1894) + 1.0;
    float _1901 = (cbLight._m0[_1887].z * _1894) + 1.0;
    float _1902 = (cbLight._m0[_1887].w * _1894) + 1.0;
    uint _1903 = _1886 + 5u;
    float _1909 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
    uint _1913 = _1886 + 4u;
    float _1922 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
    uint _1926 = _1886 | 1u;
    float _1937 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_615, _616, _617));
    float _1940 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_615, _616, _617));
    float _4170 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _4181 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1945 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * 0.3183098733425140380859375;
    float _1947 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * 0.3183098733425140380859375;
    float _1954 = ((cbLight._m0[_1903].x * _1909) * _1947) + (((cbLight._m0[_1913].x * _1878) * _1922) * _1945);
    float _1955 = ((_1909 * cbLight._m0[_1903].y) * _1947) + (((cbLight._m0[_1913].y * _1879) * _1922) * _1945);
    float _1956 = ((_1909 * cbLight._m0[_1903].z) * _1947) + (((cbLight._m0[_1913].z * _1880) * _1922) * _1945);
    uvec4 _1960 = floatBitsToUint(cbLight._m0[_1886 + 12u]);
    bool _1962 = _1960.x == 0u;
    float _1973;
    float _1975;
    float _1977;
    if (_1962)
    {
        _1973 = _1954;
        _1975 = _1955;
        _1977 = _1956;
    }
    else
    {
        uint _1981 = _1886 + 6u;
        float _1997 = (dot(vec3(cbLight._m0[_1886 + 2u].xyz), vec3(_615, _616, _617)) * 0.5) + 0.5;
        float _1998 = _1997 * _1997;
        float _4192 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _1999 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2000 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _1973 = (((cbLight._m0[_1981].x * 0.3183098733425140380859375) * _1999) * _2000) + _1954;
        _1975 = (((cbLight._m0[_1981].y * 0.3183098733425140380859375) * _1999) * _2000) + _1955;
        _1977 = (((cbLight._m0[_1981].z * 0.3183098733425140380859375) * _1999) * _2000) + _1956;
    }
    bool _1980 = _1960.y == 0u;
    float _2018;
    float _2020;
    float _2022;
    if (_1980)
    {
        _2018 = _1973;
        _2020 = _1975;
        _2022 = _1977;
    }
    else
    {
        uint _2191 = _1886 + 7u;
        float _2207 = (dot(vec3(cbLight._m0[_1886 + 3u].xyz), vec3(_615, _616, _617)) * 0.5) + 0.5;
        float _2208 = _2207 * _2207;
        float _4208 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2209 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2210 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2018 = (((cbLight._m0[_2191].x * 0.3183098733425140380859375) * _2209) * _2210) + _1973;
        _2020 = (((cbLight._m0[_2191].y * 0.3183098733425140380859375) * _2209) * _2210) + _1975;
        _2022 = (((cbLight._m0[_2191].z * 0.3183098733425140380859375) * _2209) * _2210) + _1977;
    }
    uint _2025 = _1886 + 8u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1886].w)) * _618) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1886].x + _695;
    float _2041 = cbLight._m0[_1886].y + _696;
    float _2042 = cbLight._m0[_1886].z + _697;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_1886].xyz));
    float _4224 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _4235 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _2054 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _2055 = dot(vec3(_615, _616, _617), vec3(_2047, _2048, _2049));
    float _4246 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_2047, _2048, _2049));
    float _4257 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2039 * _2039;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2075 = exp2(log2(1.0 - (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * 5.0);
    float _2076 = 0.959999978542327880859375 - _774;
    float _2078 = 0.959999978542327880859375 - _775;
    float _2079 = 0.959999978542327880859375 - _776;
    float _2086 = 1.0 - _2039;
    float _2097 = (0.5 / (((_2054 * ((_2053 * _2086) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2086) + _2039) * _2053))) * _2053;
    float _4268 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2099 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    uint _2113 = _1886 + 9u;
    float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _618) * 0.949999988079071044921875);
    float _2125 = _2124 * _2124;
    float _2126 = cbLight._m0[_1926].x + _695;
    float _2127 = cbLight._m0[_1926].y + _696;
    float _2128 = cbLight._m0[_1926].z + _697;
    float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
    float _2133 = _2132 * _2126;
    float _2134 = _2132 * _2127;
    float _2135 = _2132 * _2128;
    float _2136 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_1926].xyz));
    float _4279 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _2140 = dot(vec3(_615, _616, _617), vec3(_2133, _2134, _2135));
    float _4290 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2144 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_2133, _2134, _2135));
    float _4301 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2148 = _2125 * _2125;
    float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
    float _2159 = exp2(log2(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * 5.0);
    float _2166 = 1.0 - _2125;
    float _2176 = (0.5 / (((_2054 * ((_2139 * _2166) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2166) + _2125) * _2139))) * _2139;
    float _4312 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2178 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
    float _2188 = (((((_2159 * _2076) + _777) * cbLight._m0[_2113].x) * _2178) * _1909) + ((((cbLight._m0[_2025].x * _1878) * ((_2075 * _2076) + _777)) * _2099) * _1922);
    float _2189 = (((((_2159 * _2078) + _779) * cbLight._m0[_2113].y) * _2178) * _1909) + ((((cbLight._m0[_2025].y * _1879) * ((_2075 * _2078) + _779)) * _2099) * _1922);
    float _2190 = (((((_2159 * _2079) + _780) * cbLight._m0[_2113].z) * _2178) * _1909) + ((((cbLight._m0[_2025].z * _1880) * ((_2075 * _2079) + _780)) * _2099) * _1922);
    float _2252;
    float _2254;
    float _2256;
    if (_1962)
    {
        _2252 = _2188;
        _2254 = _2189;
        _2256 = _2190;
    }
    else
    {
        uint _2258 = _1886 + 2u;
        uint _2262 = _1886 + 10u;
        float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _618) * 0.949999988079071044921875);
        float _2277 = _2276 * _2276;
        float _2278 = cbLight._m0[_2258].x + _695;
        float _2279 = cbLight._m0[_2258].y + _696;
        float _2280 = cbLight._m0[_2258].z + _697;
        float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
        float _2285 = _2284 * _2278;
        float _2286 = _2284 * _2279;
        float _2287 = _2284 * _2280;
        float _2288 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2258].xyz));
        float _4323 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2292 = dot(vec3(_615, _616, _617), vec3(_2285, _2286, _2287));
        float _4334 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2296 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2285, _2286, _2287));
        float _4345 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2300 = _2277 * _2277;
        float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
        float _2311 = exp2(log2(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * 5.0);
        float _2318 = 1.0 - _2277;
        float _2328 = (0.5 / (((_2054 * ((_2291 * _2318) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2318) + _2277) * _2291))) * _2291;
        float _4356 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2330 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
        float _2331 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _2252 = (((((_2311 * _2076) + _777) * cbLight._m0[_2262].x) * _2330) * _2331) + _2188;
        _2254 = (((((_2311 * _2078) + _779) * cbLight._m0[_2262].y) * _2330) * _2331) + _2189;
        _2256 = (((((_2311 * _2079) + _780) * cbLight._m0[_2262].z) * _2330) * _2331) + _2190;
    }
    float _2366;
    float _2368;
    float _2370;
    if (_1980)
    {
        _2366 = _2252;
        _2368 = _2254;
        _2370 = _2256;
    }
    else
    {
        uint _2377 = _1886 + 3u;
        uint _2381 = _1886 + 11u;
        float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _618) * 0.949999988079071044921875);
        float _2396 = _2395 * _2395;
        float _2397 = cbLight._m0[_2377].x + _695;
        float _2398 = cbLight._m0[_2377].y + _696;
        float _2399 = cbLight._m0[_2377].z + _697;
        float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
        float _2404 = _2403 * _2397;
        float _2405 = _2403 * _2398;
        float _2406 = _2403 * _2399;
        float _2407 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2377].xyz));
        float _4372 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2411 = dot(vec3(_615, _616, _617), vec3(_2404, _2405, _2406));
        float _4383 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2414 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2415 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2404, _2405, _2406));
        float _4394 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2419 = _2396 * _2396;
        float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
        float _2430 = exp2(log2(1.0 - (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) * 5.0);
        float _2437 = 1.0 - _2396;
        float _2447 = (0.5 / (((_2054 * ((_2410 * _2437) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2437) + _2396) * _2410))) * _2410;
        float _4405 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2449 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
        float _2450 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2366 = (((((_2430 * _2076) + _777) * cbLight._m0[_2381].x) * _2449) * _2450) + _2252;
        _2368 = (((((_2430 * _2078) + _779) * cbLight._m0[_2381].y) * _2449) * _2450) + _2254;
        _2370 = (((((_2430 * _2079) + _780) * cbLight._m0[_2381].z) * _2449) * _2450) + _2256;
    }
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    if (_1884.y == 0u)
    {
        float _2525 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2526 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2525;
        float _2527 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2525;
        float _2528 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2525;
        uvec4 _2540 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2541 = _2540.x;
        uint _2552 = uint((float(_2540.y) * floor(float(uint(cbSceneParam._m0[85u].y * _716) / _2541))) + floor(float(uint(cbSceneParam._m0[85u].x * _715) / _2541)));
        float _2562 = (log2(_2528 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2563 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        uint _2566 = uint(isnan(14.0) ? _2563 : (isnan(_2563) ? 14.0 : min(_2563, 14.0)));
        uvec4 _2571 = texelFetch(g_lightClusterGridBuffer, int(((_2566 << 2u) + (_2552 << 6u)) >> 2u));
        uint _2572 = _2571.x;
        uint _2573 = _2540.z;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        if (((((1u << ((_2573 >> 4u) & 15u)) + 4294967295u) & _2572) == 0u) || ((_2573 & 240u) == 0u))
        {
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
        }
        else
        {
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            uint _2832 = 0u;
            uint _2841;
            bool _2842;
            for (;;)
            {
                _2841 = texelFetch(g_lightClassification, int((((_2566 << 5u) + (_2552 << 9u)) + (_2832 << 2u)) >> 2u)).x;
                _2842 = _2841 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2842)
                {
                    frontier_phi_66_pred = _2826;
                    frontier_phi_66_pred_1 = _2831;
                    frontier_phi_66_pred_2 = _2830;
                    frontier_phi_66_pred_3 = _2829;
                    frontier_phi_66_pred_4 = _2828;
                    frontier_phi_66_pred_5 = _2827;
                }
                else
                {
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    uint _2977;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2830;
                    _2976 = _2831;
                    _2977 = _2841;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    for (;;)
                    {
                        uint _2981 = uint(findLSB(_2977)) + (_2832 << 5u);
                        uint _2978 = (_2977 + 4294967295u) & _2977;
                        uint _2983 = _2981 * 48u;
                        vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2983)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 3u)).x));
                        uint _3003 = (_2981 * 48u) + 4u;
                        vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 3u)).x));
                        uint _3022 = (_2981 * 48u) + 8u;
                        vec3 _3033 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x));
                        float _3037 = _2997.x - _2526;
                        float _3038 = _2997.y - _2527;
                        float _3039 = _2997.z - _2528;
                        float _3040 = dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039));
                        float _3043 = inversesqrt(_3040);
                        float _3044 = _3043 * _3037;
                        float _3045 = _3043 * _3038;
                        float _3046 = _3043 * _3039;
                        float _3047 = dot(vec3(_734, _737, _740), vec3(_3044, _3045, _3046));
                        float _3052 = 1.0 - (_3040 * _2997.w);
                        float _4431 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3053 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3054 = sqrt(_3040) * _3016.w;
                        float _3057 = 1.39999997615814208984375 / (_3054 + 1.39999997615814208984375);
                        float _3058 = _3057 * _3057;
                        float _3061 = ((1.0 - _3058) * _3047) + _3058;
                        float _3064 = _3054 * _3054;
                        float _3068 = ((isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))) * _3053) / ((_3064 * 0.699999988079071044921875) + 1.0);
                        float _3072 = (-0.0) - _2526;
                        float _3073 = (-0.0) - _2527;
                        float _3074 = (-0.0) - _2528;
                        float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                        float _3079 = _3078 * _3072;
                        float _3080 = _3078 * _3073;
                        float _3081 = _3078 * _3074;
                        float _3089 = exp2(log2(1.0 / ((_3064 * 3.5) + 5.0)) * 0.25);
                        float _3090 = 1.0 - _809;
                        float _3097 = sqrt(1.0 - ((1.0 - (_3090 * _3090)) * (1.0 - (_3089 * _3089))));
                        float _3098 = _3097 * _3097;
                        float _3099 = _3098 * _3098;
                        float _3100 = _3079 + _3044;
                        float _3101 = _3080 + _3045;
                        float _3102 = _3081 + _3046;
                        float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
                        float _3110 = dot(vec3(_734, _737, _740), vec3(_3079, _3080, _3081));
                        float _4447 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3113 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3114 = dot(vec3(_734, _737, _740), vec3(_3106 * _3100, _3106 * _3101, _3106 * _3102));
                        float _4458 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3117 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3121 = ((_3117 * _3117) * (_3099 + (-1.0))) + 1.0;
                        float _3122 = _3057 * _3098;
                        float _3123 = _3122 * _3122;
                        float _3126 = ((1.0 - _3123) * _3047) + _3123;
                        float _4469 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3127 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3128 = 1.0 - _3098;
                        float _3138 = (0.5 / (((_3127 * ((_3113 * _3128) + _3098)) + 9.9999999392252902907785028219223e-09) + (((_3127 * _3128) + _3098) * _3113))) * _3127;
                        float _4480 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3149 = (((_3099 * 3.1415927410125732421875) * (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) / ((_3121 * _3121) * ((_3064 * 2.1991131305694580078125) + 3.141590118408203125))) * _3053;
                        _2901 = (_3068 * _3016.x) + _2974;
                        _2902 = (_3068 * _3016.y) + _2975;
                        _2903 = (_3068 * _3016.z) + _2976;
                        _2898 = (_3149 * _3033.x) + _2971;
                        _2899 = (_3149 * _3033.y) + _2972;
                        _2900 = (_3149 * _3033.z) + _2973;
                        if (_2978 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2902;
                            _2976 = _2903;
                            _2977 = _2978;
                        }
                    }
                    frontier_phi_66_pred = _2898;
                    frontier_phi_66_pred_1 = _2903;
                    frontier_phi_66_pred_2 = _2902;
                    frontier_phi_66_pred_3 = _2901;
                    frontier_phi_66_pred_4 = _2900;
                    frontier_phi_66_pred_5 = _2899;
                }
                _2674 = frontier_phi_66_pred;
                _2684 = frontier_phi_66_pred_1;
                _2682 = frontier_phi_66_pred_2;
                _2680 = frontier_phi_66_pred_3;
                _2678 = frontier_phi_66_pred_4;
                _2676 = frontier_phi_66_pred_5;
                uint _2833 = _2832 + 1u;
                if (_2833 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2826 = _2674;
                    _2827 = _2676;
                    _2828 = _2678;
                    _2829 = _2680;
                    _2830 = _2682;
                    _2831 = _2684;
                    _2832 = _2833;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
        }
        uvec4 _2687 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2688 = _2687.z;
        uint _2690 = (_2688 >> 8u) & 15u;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        if (((4294967295u << _2690) & _2572) == 0u)
        {
            _2794 = _2673;
            _2796 = _2675;
            _2798 = _2677;
            _2800 = _2679;
            _2802 = _2681;
            _2804 = _2683;
        }
        else
        {
            float _2819 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
            float _2820 = _2819 * _2526;
            float _2821 = _2819 * _2527;
            float _2822 = _2819 * _2528;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2690 < ((_2688 >> 12u) & 15u))
            {
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2954 = _2673;
                float _2955 = _2675;
                float _2956 = _2677;
                float _2957 = _2679;
                float _2958 = _2681;
                float _2959 = _2683;
                uint _2960 = _2690;
                uint _2969;
                bool _2970;
                for (;;)
                {
                    _2969 = texelFetch(g_lightClassification, int((((_2566 << 5u) + (_2552 << 9u)) + (_2960 << 2u)) >> 2u)).x;
                    _2970 = _2969 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2970)
                    {
                        frontier_phi_77_pred = _2959;
                        frontier_phi_77_pred_1 = _2958;
                        frontier_phi_77_pred_2 = _2957;
                        frontier_phi_77_pred_3 = _2956;
                        frontier_phi_77_pred_4 = _2955;
                        frontier_phi_77_pred_5 = _2954;
                    }
                    else
                    {
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3176 = _2954;
                        float _3177 = _2955;
                        float _3178 = _2956;
                        float _3179 = _2957;
                        float _3180 = _2958;
                        float _3181 = _2959;
                        uint _3182 = _2969;
                        uint _3183;
                        vec4 _3208;
                        float _3209;
                        vec4 _3224;
                        vec3 _3236;
                        vec4 _3251;
                        vec4 _3266;
                        float _3312;
                        bool _3313;
                        for (;;)
                        {
                            uint _3193 = ((_2960 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3182));
                            _3183 = (_3182 + 4294967295u) & _3182;
                            uint _3195 = _3193 * 40u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            _3209 = _3208.w;
                            uint _3211 = (_3193 * 40u) + 4u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3226 = (_3193 * 40u) + 8u;
                            _3236 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x));
                            uint _3238 = (_3193 * 40u) + 16u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3253 = (_3193 * 40u) + 20u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3268 = (_3193 * 40u) + 24u;
                            vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3287 = (_3193 * 40u) + 28u;
                            vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            _3312 = fma(_2528, _3300.z, fma(_2527, _3300.y, _3300.x * _2526)) + _3300.w;
                            _3313 = !((fma(_2528, _3281.z, fma(_2527, _3281.y, _3281.x * _2526)) + _3281.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3313)
                            {
                                float _3340 = _3208.x - _2526;
                                float _3341 = _3208.y - _2527;
                                float _3342 = _3208.z - _2528;
                                float _3343 = dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342));
                                float _3346 = inversesqrt(_3343);
                                float _3347 = _3346 * _3340;
                                float _3348 = _3346 * _3341;
                                float _3349 = _3346 * _3342;
                                float _3353 = 1.0 - (_3343 / (_3209 * _3209));
                                float _4491 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3354 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3358 = sqrt(_3343) * _3224.w;
                                float _3360 = 1.39999997615814208984375 / (_3358 + 1.39999997615814208984375);
                                float _3361 = _3360 * _3360;
                                float _3364 = ((1.0 - _3361) * dot(vec3(_3347, _3348, _3349), vec3(_734, _737, _740))) + _3361;
                                float _3367 = _3358 * _3358;
                                float _3371 = (fma(_2528, _3251.z, fma(_2527, _3251.y, _3251.x * _2526)) + _3251.w) / _3312;
                                float _3372 = (fma(_2528, _3266.z, fma(_2527, _3266.y, _3266.x * _2526)) + _3266.w) / _3312;
                                float _3376 = 1.0 - dot(vec2(_3371, _3372), vec2(_3371, _3372));
                                float _4507 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3378 = _3377 * (((isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0))) * _3354) / ((_3367 * 0.699999988079071044921875) + 1.0));
                                float _3390 = exp2(log2(1.0 / ((_3367 * 3.5) + 5.0)) * 0.25);
                                float _3391 = 1.0 - _809;
                                float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                                float _3399 = _3398 * _3398;
                                float _3400 = _3399 * _3399;
                                float _3401 = _3347 - _2820;
                                float _3402 = _3348 - _2821;
                                float _3403 = _3349 - _2822;
                                float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                                float _3411 = dot(vec3(_734, _737, _740), vec3((-0.0) - _2820, (-0.0) - _2821, (-0.0) - _2822));
                                float _4518 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3414 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3415 = dot(vec3(_734, _737, _740), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                                float _4529 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3418 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                                float _3423 = _3360 * _3399;
                                float _3424 = _3423 * _3423;
                                float _3430 = ((1.0 - _3424) * dot(vec3(_734, _737, _740), vec3(_3347, _3348, _3349))) + _3424;
                                float _4540 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3432 = 1.0 - _3399;
                                float _3442 = (0.5 / (((_3431 * ((_3414 * _3432) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3431 * _3432) + _3399) * _3414))) * _3431;
                                float _4551 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3452 = (_3377 * _3354) * (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) / ((_3422 * _3422) * ((_3367 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3378 * _3224.y;
                                frontier_phi_83_pred_1 = _3378 * _3224.x;
                                frontier_phi_83_pred_2 = _3452 * _3236.z;
                                frontier_phi_83_pred_3 = _3452 * _3236.y;
                                frontier_phi_83_pred_4 = _3452 * _3236.x;
                                frontier_phi_83_pred_5 = _3378 * _3224.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3460 = frontier_phi_83_pred;
                            _3459 = frontier_phi_83_pred_1;
                            _3458 = frontier_phi_83_pred_2;
                            _3457 = frontier_phi_83_pred_3;
                            _3456 = frontier_phi_83_pred_4;
                            _3461 = frontier_phi_83_pred_5;
                            _3166 = _3459 + _3179;
                            _3167 = _3460 + _3180;
                            _3168 = _3461 + _3181;
                            _3163 = _3456 + _3176;
                            _3164 = _3457 + _3177;
                            _3165 = _3458 + _3178;
                            if (_3183 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3183;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3168;
                        frontier_phi_77_pred_1 = _3167;
                        frontier_phi_77_pred_2 = _3166;
                        frontier_phi_77_pred_3 = _3165;
                        frontier_phi_77_pred_4 = _3164;
                        frontier_phi_77_pred_5 = _3163;
                    }
                    _2805 = frontier_phi_77_pred;
                    _2803 = frontier_phi_77_pred_1;
                    _2801 = frontier_phi_77_pred_2;
                    _2799 = frontier_phi_77_pred_3;
                    _2797 = frontier_phi_77_pred_4;
                    _2795 = frontier_phi_77_pred_5;
                    uint _2961 = _2960 + 1u;
                    if (_2961 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2954 = _2795;
                        _2955 = _2797;
                        _2956 = _2799;
                        _2957 = _2801;
                        _2958 = _2803;
                        _2959 = _2805;
                        _2960 = _2961;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2799;
                frontier_phi_58_59_ladder_1 = _2805;
                frontier_phi_58_59_ladder_2 = _2803;
                frontier_phi_58_59_ladder_3 = _2801;
                frontier_phi_58_59_ladder_4 = _2797;
                frontier_phi_58_59_ladder_5 = _2795;
            }
            else
            {
                frontier_phi_58_59_ladder = _2677;
                frontier_phi_58_59_ladder_1 = _2683;
                frontier_phi_58_59_ladder_2 = _2681;
                frontier_phi_58_59_ladder_3 = _2679;
                frontier_phi_58_59_ladder_4 = _2675;
                frontier_phi_58_59_ladder_5 = _2673;
            }
            _2794 = frontier_phi_58_59_ladder_5;
            _2796 = frontier_phi_58_59_ladder_4;
            _2798 = frontier_phi_58_59_ladder;
            _2800 = frontier_phi_58_59_ladder_3;
            _2802 = frontier_phi_58_59_ladder_2;
            _2804 = frontier_phi_58_59_ladder_1;
        }
        float _2809 = isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0));
        _2585 = (_2809 * _2800) + _2018;
        _2587 = (_2809 * _2802) + _2020;
        _2589 = (_2809 * _2804) + _2022;
        _2591 = ((_2794 * _777) * _2809) + _2366;
        _2593 = ((_2796 * _779) * _2809) + _2368;
        _2595 = ((_2798 * _780) * _2809) + _2370;
    }
    else
    {
        _2585 = _2018;
        _2587 = _2020;
        _2589 = _2022;
        _2591 = _2366;
        _2593 = _2368;
        _2595 = _2370;
    }
    float _4567 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4578 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4589 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _2612 = ((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2585 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _793))) + ((_2591 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1633)) * cbPerFrame._m0[3u].x);
    float _2613 = ((isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2587 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _793))) + ((_2593 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1633)) * cbPerFrame._m0[3u].x);
    float _2614 = ((isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2589 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _793))) + ((_2595 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1633)) * cbPerFrame._m0[3u].x);
    uint _2615 = _266 + 6u;
    float _2623 = _715 / cbSceneParam._m0[86u].x;
    float _2624 = _716 / cbSceneParam._m0[86u].y;
    vec4 _2638 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2623, _2624, (log2((isnan(cbSceneParam._m0[77u].w) ? _637 : (isnan(_637) ? cbSceneParam._m0[77u].w : min(_637, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2640 = _2638.x;
    float _2641 = _2638.y;
    float _2642 = _2638.z;
    float _2643 = _2638.w;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    if (_637 > cbSceneParam._m0[78u].w)
    {
        float _2698 = isnan(_637) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _637 : min(cbSceneParam._m0[80u].w, _637));
        float _2699 = _2698 / _637;
        float _2710 = _2699 * _688;
        float _2711 = _689 * _2699;
        float _2712 = (-0.0) - _2711;
        float _2714 = _2699 * _690;
        float _2716 = (cbSceneParam._m0[77u].w * _2712) / _2698;
        float _2717 = _2716 + cbSceneParam._m0[79u].w;
        float _2718 = cbSceneParam._m0[79u].w - _2711;
        float _2724 = sqrt(((_2710 * _2710) + (_2711 * _2711)) + (_2714 * _2714));
        float _2727 = (1.0 - (cbSceneParam._m0[77u].w / _2698)) * _2724;
        float _2732 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2734 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2911;
        if (abs((_2712 - _2716) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2911 = ((((_2717 > 0.0) ? exp2(_2732 * _2717) : (2.0 - exp2(_2734 * _2717))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2727;
        }
        else
        {
            float _2855 = 1.0 / cbSceneParam._m0[80u].x;
            float _2856 = isnan(_2718) ? _2717 : (isnan(_2717) ? _2718 : max(_2717, _2718));
            float _2857 = isnan(_2718) ? _2717 : (isnan(_2717) ? _2718 : min(_2717, _2718));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            float _2867 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : min(_2857, 0.0));
            _2911 = ((abs(_2724 / _2712) * cbSceneParam._m0[80u].y) * ((((_2866 - _2867) * 2.0) - ((exp2(_2732 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0)))) - exp2(_2732 * (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))))) * _2855)) - ((exp2(_2734 * _2866) - exp2(_2734 * _2867)) * _2855))) + (_2727 * cbSceneParam._m0[80u].z);
        }
        vec4 _2913 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2623, _2624, 1.0), 0.0);
        float _2922 = exp2((_2911 * (-1.44269502162933349609375)) * (1.0 - _2913.w));
        float _2923 = log2(_2922);
        float _2939 = log2(_2643);
        _2736 = (exp2(_2939 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].x)) * _2913.x) / cbSceneParam._m0[78u].x)) + _2640;
        _2738 = (exp2(_2939 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].y)) * _2913.y) / cbSceneParam._m0[78u].y)) + _2641;
        _2740 = (exp2(_2939 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].z)) * _2913.z) / cbSceneParam._m0[78u].z)) + _2642;
        _2742 = _2922 * _2643;
    }
    else
    {
        _2736 = _2640;
        _2738 = _2641;
        _2740 = _2642;
        _2742 = _2643;
    }
    bool _2949;
    vec4 _2752;
    vec4 _2774;
    float _2776;
    float _2780;
    float _2781;
    float _2782;
    float _2783;
    bool _2793;
    for (;;)
    {
        _2752 = cbMatDynParam._m0[0u];
        float _2754 = roundEven(_2752.y);
        bool _2755 = _2754 == 3.0;
        float _2756 = log2(_2742);
        float _2763 = exp2(_2756 * cbSceneParam._m0[78u].x) * _2612;
        float _2764 = exp2(_2756 * cbSceneParam._m0[78u].y) * _2613;
        float _2765 = exp2(_2756 * cbSceneParam._m0[78u].z) * _2614;
        float _2772 = _704 + (-0.5);
        _2774 = cbMtdParam._m0[1u];
        _2776 = _2774.y * _2772;
        float _2779 = (_2754 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2780 = _2779 * (_2755 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2736)));
        _2781 = _2779 * (_2755 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2738)));
        _2782 = _2779 * (_2755 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2740)));
        _2783 = _2772 * 0.999000012874603271484375;
        _2793 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2793)
        {
            if ((cbInstanceData._m0[_266 + 7u].x + _2783) < 0.5)
            {
                _2949 = true;
                break;
            }
        }
        uint _2890 = _753 + uint(_2752.w);
        if ((cbInstanceData._m0[_2890].w < 1.0) && ((cbInstanceData._m0[_2890].w + _2783) < 0.5))
        {
            _2949 = true;
            break;
        }
        if ((_2776 + 1.0) < _2774.x)
        {
            _2949 = true;
            break;
        }
        _2949 = false;
        break;
    }
    float _3154;
    if (_2949)
    {
        discard_state = true;
        _3154 = 0.0;
    }
    else
    {
        _3154 = cbInstanceData._m0[_2615].w;
    }
    SV_Target.x = _2780;
    SV_Target.y = _2781;
    SV_Target.z = _2782;
    SV_Target.w = _3154;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2615].w;
    discard_exit();
}


