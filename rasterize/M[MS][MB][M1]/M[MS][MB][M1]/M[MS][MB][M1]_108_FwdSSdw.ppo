#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1414;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3764 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3775 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3786 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].y) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3797 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _437 = (_430 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _438 = (_430 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _439 = (_430 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) + _449;
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _524 = _520.z;
    float _533 = ((_503.z - _524) * _430) + _524;
    float _536 = ((((_503.x - _522) * _430) + _522) * 2.0) + (-1.0);
    float _537 = ((((_503.y - _523) * _430) + _523) * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3808 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))));
    vec4 _563 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _575 = (_536 + ((((_476.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_563.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _576 = (_537 + ((((_476.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_563.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _579 = fma(_543, _248, fma(_576, _255, _575 * _241));
    float _582 = fma(_543, _249, fma(_576, _256, _575 * _242));
    float _585 = fma(_543, _250, fma(_576, _257, _575 * _243));
    float _589 = inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585)));
    vec4 _616 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _618 = _616.x;
    float _619 = 1.0 - _618;
    float _625 = (cbMtdParam._m0[19u].x + dot(vec4(_589 * _579, _589 * _582, _589 * _585, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_618 - _619) * cbMtdParam._m0[24u].z) + _619) * cbMtdParam._m0[21u].z);
    float _3819 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _628 = (-0.0) - cbMtdParam._m0[24u].x;
    float _630 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _630 : (isnan(_630) ? 1.0 : min(_630, 1.0));
    float _638 = _626 - ((_626 * TEXCOORD_8.x) * _631);
    float _639 = _626 - ((_626 * TEXCOORD_8.y) * _631);
    float _640 = _626 - ((_626 * TEXCOORD_8.z) * _631);
    float _647 = (_638 * (cbMtdParam._m0[17u].x - _456)) + _456;
    float _648 = (_639 * (cbMtdParam._m0[17u].y - _457)) + _457;
    float _649 = (_640 * (cbMtdParam._m0[17u].z - _458)) + _458;
    vec4 _661 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _663 = _661.x;
    float _664 = 1.0 - _663;
    float _690 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_663 - _664) * cbMtdParam._m0[24u].w) + _664) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3840 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _691 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _699 = ((((cbMtdParam._m0[10u].x - _647) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _691) + _647;
    float _700 = ((((cbMtdParam._m0[10u].y - _648) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _691) + _648;
    float _701 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _649)) * _691) + _649;
    vec4 _727 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _729 = _727.x;
    float _747 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _298) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _299) + cbTextureTilingScale._m0[9u].w)).x - _729) * _430) + _729;
    float _751 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _747) * cbMtdParam._m0[19u].z) + _747;
    float _753 = _751 - (_751 * _638);
    float _755 = _753 - (_753 * _691);
    float _760 = (((_476.z - _533) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _533;
    float _764 = ((_563.z - _760) * cbMtdParam._m0[19u].w) + _760;
    vec4 _778 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _785 = (_778.x * 2.0) + (-1.0);
    float _786 = (_778.y * 2.0) + (-1.0);
    float _787 = dot(vec2(_785, _786), vec2(_785, _786));
    float _3851 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _795 = ((_778.z - _764) * _638) + _764;
    float _798 = ((cbMtdParam._m0[23u].y - _795) * _691) + _795;
    vec4 _817 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _823 = (_817.x * 2.0) + (-1.0);
    float _824 = (_817.y * 2.0) + (-1.0);
    float _825 = dot(vec2(_823, _824), vec2(_823, _824));
    float _3862 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _840 = ((sqrt(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) - _543) * _640) + _543;
    float _843 = (((_785 - _575) * _638) + _575) + (cbMtdParam._m0[21u].x * _575);
    float _844 = (((_786 - _576) * _639) + _576) + (cbMtdParam._m0[21u].x * _576);
    float _855 = (((_823 - _843) + (_843 * cbMtdParam._m0[22u].z)) * _691) + _843;
    float _856 = (((_824 - _844) + (_844 * cbMtdParam._m0[22u].z)) * _691) + _844;
    float _857 = (_691 * (sqrt(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) - _840)) + _840;
    float _861 = cbMtdParam._m0[22u].x + _563.w;
    float _864 = fma(_857, _248, fma(_856, _255, _855 * _241));
    float _867 = fma(_857, _249, fma(_856, _256, _855 * _242));
    float _870 = fma(_857, _250, fma(_856, _257, _855 * _243));
    float _874 = inversesqrt(dot(vec3(_864, _867, _870), vec3(_864, _867, _870)));
    float _875 = _874 * _864;
    float _876 = _874 * _867;
    float _877 = _874 * _870;
    float _3873 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _878 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _3895 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _3906 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _3917 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _3928 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _883 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _897 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _947 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _937);
    float _948 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _937);
    float _949 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _937);
    float _953 = inversesqrt(dot(vec3(_947, _948, _949), vec3(_947, _948, _949)));
    float _954 = _947 * _953;
    float _955 = _948 * _953;
    float _956 = _949 * _953;
    float _962 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _963 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _981 = fma(_877, cbSceneParam._m0[5u].z, fma(_876, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _875));
    float _984 = fma(_877, cbSceneParam._m0[6u].z, fma(_876, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _875));
    float _987 = fma(_877, cbSceneParam._m0[7u].z, fma(_876, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _875));
    uint _1001 = (_279 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1007 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * cbInstanceData._m0[_1001].x;
    float _1008 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * cbInstanceData._m0[_1001].y;
    float _1009 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * cbInstanceData._m0[_1001].z;
    float _3939 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1013 = 1.0 - _883;
    float _1014 = _1010 * _1013;
    float _1015 = _1011 * _1013;
    float _1016 = _1012 * _1013;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _883;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _883;
    float _1023 = (_1012 + (-0.039999999105930328369140625)) * _883;
    float _1024 = _1021 + 0.039999999105930328369140625;
    float _1026 = _1022 + 0.039999999105930328369140625;
    float _1027 = _1023 + 0.039999999105930328369140625;
    vec4 _1036 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _962, cbSceneParam._m0[86u].y * _963));
    float _1040 = ((isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * TEXCOORD_5.w) * _1036.x;
    float _1041 = dot(vec3(_875, _876, _877), vec3(_954, _955, _956));
    float _1044 = _1041 * 2.0;
    float _1048 = (_1044 * _875) - _954;
    float _1049 = (_1044 * _876) - _955;
    float _1050 = (_1044 * _877) - _956;
    float _1054 = abs(dot(vec3(_954, _955, _956), vec3(_875, _876, _877)));
    float _3972 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1056 = sqrt(_878);
    float _1069 = exp2((_1056 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1056 * 3.0));
    float _1075 = (1.0 - _1069) * ((_1056 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1076 = _1069 * _1056;
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1413;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1138 = fma(_1112, cbModelParam._m0[26u].z, fma(_1108, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104));
        float _1142 = fma(_1112, cbModelParam._m0[27u].z, fma(_1108, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104));
        float _1146 = fma(_1112, cbModelParam._m0[28u].z, fma(_1108, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104));
        float _1171 = _1104 + _875;
        float _1172 = _1108 + _876;
        float _1173 = _1112 + _877;
        float _1183 = fma(_1173, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171)) - _1138;
        float _1184 = fma(_1173, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171)) - _1142;
        float _1185 = fma(_1173, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171)) - _1146;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1138 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1142 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[34u].z) + ((((((_1146 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1241 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1207.x + (-0.5));
        float _1243 = _1241 * (_1207.y + (-0.5));
        float _1244 = _1241 * (_1207.z + (-0.5));
        float _1251 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1214.x + (-0.5));
        float _1253 = _1251 * (_1214.y + (-0.5));
        float _1254 = _1251 * (_1214.z + (-0.5));
        float _1261 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1221.x + (-0.5));
        float _1263 = _1261 * (_1221.y + (-0.5));
        float _1264 = _1261 * (_1221.z + (-0.5));
        float _1271 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1228.x + (-0.5));
        float _1273 = _1271 * (_1228.y + (-0.5));
        float _1274 = _1271 * (_1228.z + (-0.5));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = _1242 * 0.5;
        float _1279 = _1252 * 0.5;
        float _1280 = _1262 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1295 = (dot(vec3(_875, _876, _877), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1305 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4020 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1307 + 1.0))) + _1312) * _1275;
        float _1322 = _1243 * 0.5;
        float _1323 = _1253 * 0.5;
        float _1324 = _1263 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_875, _876, _877), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4053 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1349 + 1.0))) + _1354) * _1276;
        float _1364 = _1244 * 0.5;
        float _1365 = _1254 * 0.5;
        float _1366 = _1264 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_875, _876, _877), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4086 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1391 + 1.0))) + _1396) * _1277;
        _1413 = _1244;
        _1415 = _1243;
        _1416 = _1242;
        _1417 = _1254;
        _1418 = _1253;
        _1419 = _1252;
        _1420 = _1264;
        _1421 = _1263;
        _1422 = _1262;
        _1423 = _1277;
        _1424 = _1276;
        _1425 = _1275;
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
    }
    else
    {
        _1413 = _1414;
        _1415 = _1414;
        _1416 = _1414;
        _1417 = _1414;
        _1418 = _1414;
        _1419 = _1414;
        _1420 = _1414;
        _1421 = _1414;
        _1422 = _1414;
        _1423 = _1414;
        _1424 = _1414;
        _1425 = _1414;
        _1426 = 0.0;
        _1427 = 0.0;
        _1428 = 0.0;
    }
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1453 = fma(_1112, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1104));
        float _1457 = fma(_1112, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1104));
        float _1461 = fma(_1112, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1104));
        float _1484 = _1104 + _875;
        float _1485 = _1108 + _876;
        float _1486 = _1112 + _877;
        float _1496 = fma(_1486, cbModelParam._m0[30u].z, fma(_1485, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1484)) - _1453;
        float _1497 = fma(_1486, cbModelParam._m0[31u].z, fma(_1485, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1484)) - _1457;
        float _1498 = fma(_1486, cbModelParam._m0[32u].z, fma(_1485, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1484)) - _1461;
        float _1502 = inversesqrt(dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498)));
        float _1515 = ((_1502 * _1496) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1453 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1502 * _1497) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1457 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1502 * _1498) / cbModelParam._m0[35u].z) + ((((((_1461 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        float _1552 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1519.x + (-0.5));
        float _1554 = _1552 * (_1519.y + (-0.5));
        float _1555 = _1552 * (_1519.z + (-0.5));
        float _1562 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1526.x + (-0.5));
        float _1564 = _1562 * (_1526.y + (-0.5));
        float _1565 = _1562 * (_1526.z + (-0.5));
        float _1572 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1533.x + (-0.5));
        float _1574 = _1572 * (_1533.y + (-0.5));
        float _1575 = _1572 * (_1533.z + (-0.5));
        float _1582 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1540.x + (-0.5));
        float _1584 = _1582 * (_1540.y + (-0.5));
        float _1585 = _1582 * (_1540.z + (-0.5));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = _1553 * 0.5;
        float _1590 = _1563 * 0.5;
        float _1591 = _1573 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_875, _876, _877), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4149 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1616 + 1.0))) + _1621) * _1586;
        float _1631 = _1554 * 0.5;
        float _1632 = _1564 * 0.5;
        float _1633 = _1574 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_875, _876, _877), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4182 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1658 + 1.0))) + _1663) * _1587;
        float _1673 = _1555 * 0.5;
        float _1674 = _1565 * 0.5;
        float _1675 = _1575 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_875, _876, _877), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4215 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1700 + 1.0))) + _1705) * _1588;
        _1722 = _1555;
        _1723 = _1554;
        _1724 = _1553;
        _1725 = _1565;
        _1726 = _1564;
        _1727 = _1563;
        _1728 = _1575;
        _1729 = _1574;
        _1730 = _1573;
        _1731 = _1588;
        _1732 = _1587;
        _1733 = _1586;
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
    }
    else
    {
        _1722 = _1414;
        _1723 = _1414;
        _1724 = _1414;
        _1725 = _1414;
        _1726 = _1414;
        _1727 = _1414;
        _1728 = _1414;
        _1729 = _1414;
        _1730 = _1414;
        _1731 = _1414;
        _1732 = _1414;
        _1733 = _1414;
        _1734 = 0.0;
        _1735 = 0.0;
        _1736 = 0.0;
    }
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1426)) + _1426;
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1427)) + _1427;
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1428)) + _1428;
    float _1769 = fma(_1748, cbSceneParam._m0[89u].z, fma(_1747, cbSceneParam._m0[89u].y, _1746 * cbSceneParam._m0[89u].x));
    float _1772 = fma(_1748, cbSceneParam._m0[90u].z, fma(_1747, cbSceneParam._m0[90u].y, _1746 * cbSceneParam._m0[90u].x));
    float _1775 = fma(_1748, cbSceneParam._m0[91u].z, fma(_1747, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1746));
    float _1790 = _1048 * 0.5;
    float _1791 = _1049 * 0.5;
    float _1792 = _1050 * 0.5;
    float _1793 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1796 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1799 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1833;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1806 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1413, _1417, _1420, _1423));
        float _1810 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1415, _1418, _1421, _1424));
        float _1814 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1416, _1419, _1422, _1425));
        float _1821 = dot(vec4(cbModelParam._m0[39u]), vec4(_1790, _1791, _1792, 1.0));
        _1833 = dot(vec3(isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1821) ? 0.0 : (isnan(0.0) ? _1821 : max(0.0, _1821))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1833 = 1.0;
    }
    float _1844;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1835 = dot(vec4(cbModelParam._m0[40u]), vec4(_1790, _1791, _1792, 1.0));
        _1844 = dot(vec3(isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1835) ? 0.0 : (isnan(0.0) ? _1835 : max(0.0, _1835))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1844 = 1.0;
    }
    float _1848 = (_1844 * cbModelParam._m0[1u].x) + (_1833 * (1.0 - cbModelParam._m0[1u].x));
    float _1858 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _878);
    float _1859 = isnan(_1858) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1858 : min(cbModelParam._m0[25u].z, _1858));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1907 = fma(_1112, cbModelParam._m0[13u].z, fma(_1108, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1104)) + cbModelParam._m0[13u].w;
        float _1911 = fma(_1112, cbModelParam._m0[14u].z, fma(_1108, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1104)) + cbModelParam._m0[14u].w;
        float _1915 = fma(_1112, cbModelParam._m0[15u].z, fma(_1108, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1104)) + cbModelParam._m0[15u].w;
        float _1918 = fma(_1050, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1048));
        float _1921 = fma(_1050, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1048));
        float _1924 = fma(_1050, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1048));
        float _1952;
        if (_1918 > 0.0)
        {
            _1952 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1952 = frontier_phi_14_12_ladder;
        }
        float _2176;
        if (_1921 > 0.0)
        {
            _2176 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2176 = frontier_phi_23_19_ladder;
        }
        float _2433;
        if (_1924 > 0.0)
        {
            _2433 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2433 = frontier_phi_35_30_ladder;
        }
        float _2435 = isnan(_2176) ? _1952 : (isnan(_1952) ? _2176 : min(_1952, _2176));
        float _2436 = isnan(_2433) ? _2435 : (isnan(_2435) ? _2433 : min(_2435, _2433));
        float _2440 = (_2436 * _1918) + _1907;
        float _2441 = (_2436 * _1921) + _1911;
        float _2442 = (_2436 * _1924) + _1915;
        float _2443 = _2436 * 9.9999997473787516355514526367188e-05;
        float _2445 = (-1.0) - _2443;
        float _2447 = _2443 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2442 > _2447) || ((_2442 < _2445) || ((_2441 > _2447) || ((_2441 < _2445) || ((_2440 < _2445) || (_2440 > _2447))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2570 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2442, cbModelParam._m0[9u].z, fma(_2441, cbModelParam._m0[9u].y, _2440 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2442, cbModelParam._m0[10u].z, fma(_2441, cbModelParam._m0[10u].y, _2440 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2442, cbModelParam._m0[11u].z, fma(_2441, cbModelParam._m0[11u].y, _2440 * cbModelParam._m0[11u].x))), _1859);
            frontier_phi_13_35_ladder = _2570.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2570.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2570.x * cbModelParam._m0[1u].y;
        }
        _1940 = frontier_phi_13_35_ladder_2;
        _1942 = frontier_phi_13_35_ladder_1;
        _1944 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1048, _1049, _1050), _1859);
        _1940 = _1928.x * cbModelParam._m0[1u].y;
        _1942 = _1928.y * cbModelParam._m0[1u].y;
        _1944 = _1928.z * cbModelParam._m0[1u].y;
    }
    float _1948 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _878);
    float _1949 = isnan(_1948) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1948 : min(cbModelParam._m0[25u].w, _1948));
    float _2039;
    float _2041;
    float _2043;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2003 = fma(_1112, cbModelParam._m0[21u].z, fma(_1108, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1104)) + cbModelParam._m0[21u].w;
        float _2007 = fma(_1112, cbModelParam._m0[22u].z, fma(_1108, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1104)) + cbModelParam._m0[22u].w;
        float _2011 = fma(_1112, cbModelParam._m0[23u].z, fma(_1108, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1104)) + cbModelParam._m0[23u].w;
        float _2014 = fma(_1050, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1048));
        float _2017 = fma(_1050, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1048));
        float _2020 = fma(_1050, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1048));
        float _2181;
        if (_2014 > 0.0)
        {
            _2181 = abs((1.0 - _2003) / _2014);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2003 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2181 = frontier_phi_25_21_ladder;
        }
        float _2460;
        if (_2017 > 0.0)
        {
            _2460 = abs((1.0 - _2007) / _2017);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2007 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2460 = frontier_phi_37_32_ladder;
        }
        float _2673;
        if (_2020 > 0.0)
        {
            _2673 = abs((1.0 - _2011) / _2020);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2011 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2673 = frontier_phi_46_43_ladder;
        }
        float _2675 = isnan(_2460) ? _2181 : (isnan(_2181) ? _2460 : min(_2181, _2460));
        float _2676 = isnan(_2673) ? _2675 : (isnan(_2675) ? _2673 : min(_2675, _2673));
        float _2680 = (_2676 * _2014) + _2003;
        float _2681 = (_2676 * _2017) + _2007;
        float _2682 = (_2676 * _2020) + _2011;
        float _2683 = _2676 * 9.9999997473787516355514526367188e-05;
        float _2684 = (-1.0) - _2683;
        float _2686 = _2683 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2682 > _2686) || ((_2682 < _2684) || ((_2681 > _2686) || ((_2681 < _2684) || ((_2680 < _2684) || (_2680 > _2686))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2881 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2682, cbModelParam._m0[17u].z, fma(_2681, cbModelParam._m0[17u].y, _2680 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2682, cbModelParam._m0[18u].z, fma(_2681, cbModelParam._m0[18u].y, _2680 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2682, cbModelParam._m0[19u].z, fma(_2681, cbModelParam._m0[19u].y, _2680 * cbModelParam._m0[19u].x))), _1949);
            frontier_phi_22_46_ladder = _2881.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2881.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2881.x * cbModelParam._m0[1u].z;
        }
        _2039 = frontier_phi_22_46_ladder_2;
        _2041 = frontier_phi_22_46_ladder_1;
        _2043 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1048, _1049, _1050), _1949);
        _2039 = _2023.x * cbModelParam._m0[1u].z;
        _2041 = _2023.y * cbModelParam._m0[1u].z;
        _2043 = _2023.z * cbModelParam._m0[1u].z;
    }
    float _2056 = (((_1075 * _1024) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2039 - _1940)) + _1940);
    float _2058 = (((_1075 * _1026) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2041 - _1942)) + _1942);
    float _2060 = (((_1075 * _1027) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2043 - _1944)) + _1944);
    float _2063 = fma(_2060, cbSceneParam._m0[89u].z, fma(_2058, cbSceneParam._m0[89u].y, _2056 * cbSceneParam._m0[89u].x));
    float _2066 = fma(_2060, cbSceneParam._m0[90u].z, fma(_2058, cbSceneParam._m0[90u].y, _2056 * cbSceneParam._m0[90u].x));
    float _2069 = fma(_2060, cbSceneParam._m0[91u].z, fma(_2058, cbSceneParam._m0[91u].y, _2056 * cbSceneParam._m0[91u].x));
    vec4 _2077 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_962, _963));
    float _2079 = _2077.w;
    float _2091 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2079);
    float _2092 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2079);
    float _2093 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2079);
    uvec4 _2097 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2099 = _2097.x * 14u;
    uint _2100 = _2099 + 13u;
    float _2107 = _1040 + (-1.0);
    float _2112 = (cbLight._m0[_2100].x * _2107) + 1.0;
    float _2113 = (cbLight._m0[_2100].y * _2107) + 1.0;
    float _2114 = (cbLight._m0[_2100].z * _2107) + 1.0;
    float _2115 = (cbLight._m0[_2100].w * _2107) + 1.0;
    uint _2116 = _2099 + 5u;
    float _2122 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
    uint _2126 = _2099 + 4u;
    float _2135 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
    uint _2139 = _2099 | 1u;
    float _2150 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_875, _876, _877));
    float _2153 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_875, _876, _877));
    float _4351 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _4362 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2158 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * 0.3183098733425140380859375;
    float _2160 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.3183098733425140380859375;
    float _2167 = ((cbLight._m0[_2116].x * _2122) * _2160) + (((cbLight._m0[_2126].x * _2091) * _2135) * _2158);
    float _2168 = ((_2122 * cbLight._m0[_2116].y) * _2160) + (((cbLight._m0[_2126].y * _2092) * _2135) * _2158);
    float _2169 = ((_2122 * cbLight._m0[_2116].z) * _2160) + (((cbLight._m0[_2126].z * _2093) * _2135) * _2158);
    uvec4 _2173 = floatBitsToUint(cbLight._m0[_2099 + 12u]);
    bool _2175 = _2173.x == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2175)
    {
        _2186 = _2167;
        _2188 = _2168;
        _2190 = _2169;
    }
    else
    {
        uint _2194 = _2099 + 6u;
        float _2210 = (dot(vec3(cbLight._m0[_2099 + 2u].xyz), vec3(_875, _876, _877)) * 0.5) + 0.5;
        float _2211 = _2210 * _2210;
        float _4373 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2212 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2213 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2186 = (((cbLight._m0[_2194].x * 0.3183098733425140380859375) * _2212) * _2213) + _2167;
        _2188 = (((cbLight._m0[_2194].y * 0.3183098733425140380859375) * _2212) * _2213) + _2168;
        _2190 = (((cbLight._m0[_2194].z * 0.3183098733425140380859375) * _2212) * _2213) + _2169;
    }
    bool _2193 = _2173.y == 0u;
    float _2231;
    float _2233;
    float _2235;
    if (_2193)
    {
        _2231 = _2186;
        _2233 = _2188;
        _2235 = _2190;
    }
    else
    {
        uint _2404 = _2099 + 7u;
        float _2420 = (dot(vec3(cbLight._m0[_2099 + 3u].xyz), vec3(_875, _876, _877)) * 0.5) + 0.5;
        float _2421 = _2420 * _2420;
        float _4389 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2422 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2423 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2231 = (((cbLight._m0[_2404].x * 0.3183098733425140380859375) * _2422) * _2423) + _2186;
        _2233 = (((cbLight._m0[_2404].y * 0.3183098733425140380859375) * _2422) * _2423) + _2188;
        _2235 = (((cbLight._m0[_2404].z * 0.3183098733425140380859375) * _2422) * _2423) + _2190;
    }
    uint _2238 = _2099 + 8u;
    float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _878) * 0.949999988079071044921875);
    float _2252 = _2251 * _2251;
    float _2253 = cbLight._m0[_2099].x + _954;
    float _2254 = cbLight._m0[_2099].y + _955;
    float _2255 = cbLight._m0[_2099].z + _956;
    float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
    float _2260 = _2259 * _2253;
    float _2261 = _2259 * _2254;
    float _2262 = _2259 * _2255;
    float _2263 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2099].xyz));
    float _4405 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _4416 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _2267 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2268 = dot(vec3(_875, _876, _877), vec3(_2260, _2261, _2262));
    float _4427 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2272 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2260, _2261, _2262));
    float _4438 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2276 = _2252 * _2252;
    float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
    float _2288 = exp2(log2(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) * 5.0);
    float _2289 = 0.959999978542327880859375 - _1021;
    float _2291 = 0.959999978542327880859375 - _1022;
    float _2292 = 0.959999978542327880859375 - _1023;
    float _2299 = 1.0 - _2252;
    float _2310 = (0.5 / (((_2267 * ((_2266 * _2299) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2299) + _2252) * _2266))) * _2266;
    float _4449 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
    uint _2326 = _2099 + 9u;
    float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _878) * 0.949999988079071044921875);
    float _2338 = _2337 * _2337;
    float _2339 = cbLight._m0[_2139].x + _954;
    float _2340 = cbLight._m0[_2139].y + _955;
    float _2341 = cbLight._m0[_2139].z + _956;
    float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
    float _2346 = _2345 * _2339;
    float _2347 = _2345 * _2340;
    float _2348 = _2345 * _2341;
    float _2349 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2139].xyz));
    float _4460 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2353 = dot(vec3(_875, _876, _877), vec3(_2346, _2347, _2348));
    float _4471 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2357 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2346, _2347, _2348));
    float _4482 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2361 = _2338 * _2338;
    float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
    float _2372 = exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0);
    float _2379 = 1.0 - _2338;
    float _2389 = (0.5 / (((_2267 * ((_2352 * _2379) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2379) + _2338) * _2352))) * _2352;
    float _4493 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2391 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
    float _2401 = (((((_2372 * _2289) + _1024) * cbLight._m0[_2326].x) * _2391) * _2122) + ((((cbLight._m0[_2238].x * _2091) * ((_2288 * _2289) + _1024)) * _2312) * _2135);
    float _2402 = (((((_2372 * _2291) + _1026) * cbLight._m0[_2326].y) * _2391) * _2122) + ((((cbLight._m0[_2238].y * _2092) * ((_2288 * _2291) + _1026)) * _2312) * _2135);
    float _2403 = (((((_2372 * _2292) + _1027) * cbLight._m0[_2326].z) * _2391) * _2122) + ((((cbLight._m0[_2238].z * _2093) * ((_2288 * _2292) + _1027)) * _2312) * _2135);
    float _2465;
    float _2467;
    float _2469;
    if (_2175)
    {
        _2465 = _2401;
        _2467 = _2402;
        _2469 = _2403;
    }
    else
    {
        uint _2471 = _2099 + 2u;
        uint _2475 = _2099 + 10u;
        float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2471].w)) * _878) * 0.949999988079071044921875);
        float _2490 = _2489 * _2489;
        float _2491 = cbLight._m0[_2471].x + _954;
        float _2492 = cbLight._m0[_2471].y + _955;
        float _2493 = cbLight._m0[_2471].z + _956;
        float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
        float _2498 = _2497 * _2491;
        float _2499 = _2497 * _2492;
        float _2500 = _2497 * _2493;
        float _2501 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2471].xyz));
        float _4504 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2505 = dot(vec3(_875, _876, _877), vec3(_2498, _2499, _2500));
        float _4515 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2508 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2509 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_2498, _2499, _2500));
        float _4526 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2513 = _2490 * _2490;
        float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
        float _2524 = exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0);
        float _2531 = 1.0 - _2490;
        float _2541 = (0.5 / (((_2267 * ((_2504 * _2531) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2531) + _2490) * _2504))) * _2504;
        float _4537 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2543 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
        float _2544 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2465 = (((((_2524 * _2289) + _1024) * cbLight._m0[_2475].x) * _2543) * _2544) + _2401;
        _2467 = (((((_2524 * _2291) + _1026) * cbLight._m0[_2475].y) * _2543) * _2544) + _2402;
        _2469 = (((((_2524 * _2292) + _1027) * cbLight._m0[_2475].z) * _2543) * _2544) + _2403;
    }
    float _2579;
    float _2581;
    float _2583;
    if (_2193)
    {
        _2579 = _2465;
        _2581 = _2467;
        _2583 = _2469;
    }
    else
    {
        uint _2590 = _2099 + 3u;
        uint _2594 = _2099 + 11u;
        float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2590].w)) * _878) * 0.949999988079071044921875);
        float _2609 = _2608 * _2608;
        float _2610 = cbLight._m0[_2590].x + _954;
        float _2611 = cbLight._m0[_2590].y + _955;
        float _2612 = cbLight._m0[_2590].z + _956;
        float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
        float _2617 = _2616 * _2610;
        float _2618 = _2616 * _2611;
        float _2619 = _2616 * _2612;
        float _2620 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2590].xyz));
        float _4553 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2624 = dot(vec3(_875, _876, _877), vec3(_2617, _2618, _2619));
        float _4564 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2628 = dot(vec3(cbLight._m0[_2590].xyz), vec3(_2617, _2618, _2619));
        float _4575 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2632 = _2609 * _2609;
        float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
        float _2643 = exp2(log2(1.0 - (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) * 5.0);
        float _2650 = 1.0 - _2609;
        float _2660 = (0.5 / (((_2267 * ((_2623 * _2650) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2650) + _2609) * _2623))) * _2623;
        float _4586 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2662 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
        float _2663 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2579 = (((((_2643 * _2289) + _1024) * cbLight._m0[_2594].x) * _2662) * _2663) + _2465;
        _2581 = (((((_2643 * _2291) + _1026) * cbLight._m0[_2594].y) * _2662) * _2663) + _2467;
        _2583 = (((((_2643 * _2292) + _1027) * cbLight._m0[_2594].z) * _2662) * _2663) + _2469;
    }
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    if (_2097.y == 0u)
    {
        float _2738 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2739 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2738;
        float _2740 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2738;
        float _2741 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2738;
        uvec4 _2753 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2754 = _2753.x;
        uint _2765 = uint((float(_2753.y) * floor(float(uint(cbSceneParam._m0[85u].y * _963) / _2754))) + floor(float(uint(cbSceneParam._m0[85u].x * _962) / _2754)));
        float _2775 = (log2(_2741 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2776 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        uint _2779 = uint(isnan(14.0) ? _2776 : (isnan(_2776) ? 14.0 : min(_2776, 14.0)));
        uvec4 _2784 = texelFetch(g_lightClusterGridBuffer, int(((_2779 << 2u) + (_2765 << 6u)) >> 2u));
        uint _2785 = _2784.x;
        uint _2786 = _2753.z;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        if (((((1u << ((_2786 >> 4u) & 15u)) + 4294967295u) & _2785) == 0u) || ((_2786 & 240u) == 0u))
        {
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
        }
        else
        {
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            uint _3036 = 0u;
            uint _3045;
            bool _3046;
            for (;;)
            {
                _3045 = texelFetch(g_lightClassification, int((((_2779 << 5u) + (_2765 << 9u)) + (_3036 << 2u)) >> 2u)).x;
                _3046 = _3045 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3046)
                {
                    frontier_phi_61_pred = _3030;
                    frontier_phi_61_pred_1 = _3035;
                    frontier_phi_61_pred_2 = _3034;
                    frontier_phi_61_pred_3 = _3033;
                    frontier_phi_61_pred_4 = _3032;
                    frontier_phi_61_pred_5 = _3031;
                }
                else
                {
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    uint _3160;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3034;
                    _3159 = _3035;
                    _3160 = _3045;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    for (;;)
                    {
                        uint _3164 = uint(findLSB(_3160)) + (_3036 << 5u);
                        uint _3161 = (_3160 + 4294967295u) & _3160;
                        uint _3166 = _3164 * 48u;
                        vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3166)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 3u)).x));
                        uint _3186 = (_3164 * 48u) + 4u;
                        vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 3u)).x));
                        uint _3205 = (_3164 * 48u) + 8u;
                        vec3 _3216 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x));
                        float _3220 = _3180.x - _2739;
                        float _3221 = _3180.y - _2740;
                        float _3222 = _3180.z - _2741;
                        float _3223 = dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222));
                        float _3226 = inversesqrt(_3223);
                        float _3227 = _3226 * _3220;
                        float _3228 = _3226 * _3221;
                        float _3229 = _3226 * _3222;
                        float _3230 = dot(vec3(_981, _984, _987), vec3(_3227, _3228, _3229));
                        float _3235 = 1.0 - (_3223 * _3180.w);
                        float _4612 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3236 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3237 = sqrt(_3223) * _3199.w;
                        float _3240 = 1.39999997615814208984375 / (_3237 + 1.39999997615814208984375);
                        float _3241 = _3240 * _3240;
                        float _3244 = ((1.0 - _3241) * _3230) + _3241;
                        float _3247 = _3237 * _3237;
                        float _3251 = ((isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0))) * _3236) / ((_3247 * 0.699999988079071044921875) + 1.0);
                        float _3255 = (-0.0) - _2739;
                        float _3256 = (-0.0) - _2740;
                        float _3257 = (-0.0) - _2741;
                        float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                        float _3262 = _3261 * _3255;
                        float _3263 = _3261 * _3256;
                        float _3264 = _3261 * _3257;
                        float _3272 = exp2(log2(1.0 / ((_3247 * 3.5) + 5.0)) * 0.25);
                        float _3273 = 1.0 - _1056;
                        float _3280 = sqrt(1.0 - ((1.0 - (_3273 * _3273)) * (1.0 - (_3272 * _3272))));
                        float _3281 = _3280 * _3280;
                        float _3282 = _3281 * _3281;
                        float _3283 = _3262 + _3227;
                        float _3284 = _3263 + _3228;
                        float _3285 = _3264 + _3229;
                        float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                        float _3293 = dot(vec3(_981, _984, _987), vec3(_3262, _3263, _3264));
                        float _4628 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3296 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3297 = dot(vec3(_981, _984, _987), vec3(_3289 * _3283, _3289 * _3284, _3289 * _3285));
                        float _4639 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3300 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3304 = ((_3300 * _3300) * (_3282 + (-1.0))) + 1.0;
                        float _3305 = _3240 * _3281;
                        float _3306 = _3305 * _3305;
                        float _3309 = ((1.0 - _3306) * _3230) + _3306;
                        float _4650 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3310 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3311 = 1.0 - _3281;
                        float _3321 = (0.5 / (((_3310 * ((_3296 * _3311) + _3281)) + 9.9999999392252902907785028219223e-09) + (((_3310 * _3311) + _3281) * _3296))) * _3310;
                        float _4661 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3332 = (((_3282 * 3.1415927410125732421875) * (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) / ((_3304 * _3304) * ((_3247 * 2.1991131305694580078125) + 3.141590118408203125))) * _3236;
                        _3089 = (_3251 * _3199.x) + _3157;
                        _3090 = (_3251 * _3199.y) + _3158;
                        _3091 = (_3251 * _3199.z) + _3159;
                        _3086 = (_3332 * _3216.x) + _3154;
                        _3087 = (_3332 * _3216.y) + _3155;
                        _3088 = (_3332 * _3216.z) + _3156;
                        if (_3161 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3090;
                            _3159 = _3091;
                            _3160 = _3161;
                        }
                    }
                    frontier_phi_61_pred = _3086;
                    frontier_phi_61_pred_1 = _3091;
                    frontier_phi_61_pred_2 = _3090;
                    frontier_phi_61_pred_3 = _3089;
                    frontier_phi_61_pred_4 = _3088;
                    frontier_phi_61_pred_5 = _3087;
                }
                _2887 = frontier_phi_61_pred;
                _2897 = frontier_phi_61_pred_1;
                _2895 = frontier_phi_61_pred_2;
                _2893 = frontier_phi_61_pred_3;
                _2891 = frontier_phi_61_pred_4;
                _2889 = frontier_phi_61_pred_5;
                uint _3037 = _3036 + 1u;
                if (_3037 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3030 = _2887;
                    _3031 = _2889;
                    _3032 = _2891;
                    _3033 = _2893;
                    _3034 = _2895;
                    _3035 = _2897;
                    _3036 = _3037;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
        }
        uvec4 _2900 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2901 = _2900.z;
        uint _2903 = (_2901 >> 8u) & 15u;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        if (((4294967295u << _2903) & _2785) == 0u)
        {
            _2998 = _2886;
            _3000 = _2888;
            _3002 = _2890;
            _3004 = _2892;
            _3006 = _2894;
            _3008 = _2896;
        }
        else
        {
            float _3023 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
            float _3024 = _3023 * _2739;
            float _3025 = _3023 * _2740;
            float _3026 = _3023 * _2741;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2903 < ((_2901 >> 12u) & 15u))
            {
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3137 = _2886;
                float _3138 = _2888;
                float _3139 = _2890;
                float _3140 = _2892;
                float _3141 = _2894;
                float _3142 = _2896;
                uint _3143 = _2903;
                uint _3152;
                bool _3153;
                for (;;)
                {
                    _3152 = texelFetch(g_lightClassification, int((((_2779 << 5u) + (_2765 << 9u)) + (_3143 << 2u)) >> 2u)).x;
                    _3153 = _3152 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3153)
                    {
                        frontier_phi_67_pred = _3140;
                        frontier_phi_67_pred_1 = _3141;
                        frontier_phi_67_pred_2 = _3142;
                        frontier_phi_67_pred_3 = _3139;
                        frontier_phi_67_pred_4 = _3138;
                        frontier_phi_67_pred_5 = _3137;
                    }
                    else
                    {
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3350 = _3137;
                        float _3351 = _3138;
                        float _3352 = _3139;
                        float _3353 = _3140;
                        float _3354 = _3141;
                        float _3355 = _3142;
                        uint _3356 = _3152;
                        uint _3357;
                        vec4 _3382;
                        float _3383;
                        vec4 _3398;
                        vec3 _3410;
                        vec4 _3425;
                        vec4 _3440;
                        float _3486;
                        bool _3487;
                        for (;;)
                        {
                            uint _3367 = ((_3143 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3356));
                            _3357 = (_3356 + 4294967295u) & _3356;
                            uint _3369 = _3367 * 40u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3383 = _3382.w;
                            uint _3385 = (_3367 * 40u) + 4u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3367 * 40u) + 8u;
                            _3410 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x));
                            uint _3412 = (_3367 * 40u) + 16u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3367 * 40u) + 20u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3367 * 40u) + 24u;
                            vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3461 = (_3367 * 40u) + 28u;
                            vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            _3486 = fma(_2741, _3474.z, fma(_2740, _3474.y, _3474.x * _2739)) + _3474.w;
                            _3487 = !((fma(_2741, _3455.z, fma(_2740, _3455.y, _3455.x * _2739)) + _3455.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3487)
                            {
                                float _3514 = _3382.x - _2739;
                                float _3515 = _3382.y - _2740;
                                float _3516 = _3382.z - _2741;
                                float _3517 = dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516));
                                float _3520 = inversesqrt(_3517);
                                float _3521 = _3520 * _3514;
                                float _3522 = _3520 * _3515;
                                float _3523 = _3520 * _3516;
                                float _3527 = 1.0 - (_3517 / (_3383 * _3383));
                                float _4672 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3532 = sqrt(_3517) * _3398.w;
                                float _3534 = 1.39999997615814208984375 / (_3532 + 1.39999997615814208984375);
                                float _3535 = _3534 * _3534;
                                float _3538 = ((1.0 - _3535) * dot(vec3(_3521, _3522, _3523), vec3(_981, _984, _987))) + _3535;
                                float _3541 = _3532 * _3532;
                                float _3545 = (fma(_2741, _3425.z, fma(_2740, _3425.y, _3425.x * _2739)) + _3425.w) / _3486;
                                float _3546 = (fma(_2741, _3440.z, fma(_2740, _3440.y, _3440.x * _2739)) + _3440.w) / _3486;
                                float _3550 = 1.0 - dot(vec2(_3545, _3546), vec2(_3545, _3546));
                                float _4688 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3552 = _3551 * (((isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0))) * _3528) / ((_3541 * 0.699999988079071044921875) + 1.0));
                                float _3564 = exp2(log2(1.0 / ((_3541 * 3.5) + 5.0)) * 0.25);
                                float _3565 = 1.0 - _1056;
                                float _3572 = sqrt(1.0 - ((1.0 - (_3565 * _3565)) * (1.0 - (_3564 * _3564))));
                                float _3573 = _3572 * _3572;
                                float _3574 = _3573 * _3573;
                                float _3575 = _3521 - _3024;
                                float _3576 = _3522 - _3025;
                                float _3577 = _3523 - _3026;
                                float _3581 = inversesqrt(dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577)));
                                float _3585 = dot(vec3(_981, _984, _987), vec3((-0.0) - _3024, (-0.0) - _3025, (-0.0) - _3026));
                                float _4699 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3588 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3589 = dot(vec3(_981, _984, _987), vec3(_3581 * _3575, _3581 * _3576, _3581 * _3577));
                                float _4710 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3592 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3596 = ((_3592 * _3592) * (_3574 + (-1.0))) + 1.0;
                                float _3597 = _3534 * _3573;
                                float _3598 = _3597 * _3597;
                                float _3604 = ((1.0 - _3598) * dot(vec3(_981, _984, _987), vec3(_3521, _3522, _3523))) + _3598;
                                float _4721 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3606 = 1.0 - _3573;
                                float _3616 = (0.5 / (((_3605 * ((_3588 * _3606) + _3573)) + 9.9999999392252902907785028219223e-09) + (((_3605 * _3606) + _3573) * _3588))) * _3605;
                                float _4732 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3626 = (_3551 * _3528) * (((_3574 * 3.1415927410125732421875) * (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) / ((_3596 * _3596) * ((_3541 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3626 * _3410.x;
                                frontier_phi_73_pred_1 = _3626 * _3410.y;
                                frontier_phi_73_pred_2 = _3552 * _3398.z;
                                frontier_phi_73_pred_3 = _3552 * _3398.y;
                                frontier_phi_73_pred_4 = _3552 * _3398.x;
                                frontier_phi_73_pred_5 = _3626 * _3410.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3630 = frontier_phi_73_pred;
                            _3631 = frontier_phi_73_pred_1;
                            _3635 = frontier_phi_73_pred_2;
                            _3634 = frontier_phi_73_pred_3;
                            _3633 = frontier_phi_73_pred_4;
                            _3632 = frontier_phi_73_pred_5;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            if (_3357 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3357;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3340;
                        frontier_phi_67_pred_1 = _3341;
                        frontier_phi_67_pred_2 = _3342;
                        frontier_phi_67_pred_3 = _3339;
                        frontier_phi_67_pred_4 = _3338;
                        frontier_phi_67_pred_5 = _3337;
                    }
                    _3005 = frontier_phi_67_pred;
                    _3007 = frontier_phi_67_pred_1;
                    _3009 = frontier_phi_67_pred_2;
                    _3003 = frontier_phi_67_pred_3;
                    _3001 = frontier_phi_67_pred_4;
                    _2999 = frontier_phi_67_pred_5;
                    uint _3144 = _3143 + 1u;
                    if (_3144 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3137 = _2999;
                        _3138 = _3001;
                        _3139 = _3003;
                        _3140 = _3005;
                        _3141 = _3007;
                        _3142 = _3009;
                        _3143 = _3144;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3007;
                frontier_phi_55_56_ladder_1 = _3009;
                frontier_phi_55_56_ladder_2 = _3005;
                frontier_phi_55_56_ladder_3 = _3003;
                frontier_phi_55_56_ladder_4 = _3001;
                frontier_phi_55_56_ladder_5 = _2999;
            }
            else
            {
                frontier_phi_55_56_ladder = _2894;
                frontier_phi_55_56_ladder_1 = _2896;
                frontier_phi_55_56_ladder_2 = _2892;
                frontier_phi_55_56_ladder_3 = _2890;
                frontier_phi_55_56_ladder_4 = _2888;
                frontier_phi_55_56_ladder_5 = _2886;
            }
            _2998 = frontier_phi_55_56_ladder_5;
            _3000 = frontier_phi_55_56_ladder_4;
            _3002 = frontier_phi_55_56_ladder_3;
            _3004 = frontier_phi_55_56_ladder_2;
            _3006 = frontier_phi_55_56_ladder;
            _3008 = frontier_phi_55_56_ladder_1;
        }
        float _3013 = isnan(1.0) ? _1040 : (isnan(_1040) ? 1.0 : min(_1040, 1.0));
        _2798 = (_3013 * _3004) + _2231;
        _2800 = (_3013 * _3006) + _2233;
        _2802 = (_3013 * _3008) + _2235;
        _2804 = ((_2998 * _1024) * _3013) + _2579;
        _2806 = ((_3000 * _1026) * _3013) + _2581;
        _2808 = ((_3002 * _1027) * _3013) + _2583;
    }
    else
    {
        _2798 = _2231;
        _2800 = _2233;
        _2802 = _2235;
        _2804 = _2579;
        _2806 = _2581;
        _2808 = _2583;
    }
    float _4748 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _4759 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _4770 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    uint _2828 = _279 + 6u;
    float _2836 = _962 / cbSceneParam._m0[86u].x;
    float _2837 = _963 / cbSceneParam._m0[86u].y;
    vec4 _2851 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, (log2((isnan(cbSceneParam._m0[77u].w) ? _897 : (isnan(_897) ? cbSceneParam._m0[77u].w : min(_897, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2853 = _2851.x;
    float _2854 = _2851.y;
    float _2855 = _2851.z;
    float _2856 = _2851.w;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_897 > cbSceneParam._m0[78u].w)
    {
        float _2911 = isnan(_897) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _897 : min(cbSceneParam._m0[80u].w, _897));
        float _2912 = _2911 / _897;
        float _2923 = _2912 * _947;
        float _2924 = _948 * _2912;
        float _2925 = (-0.0) - _2924;
        float _2926 = _2912 * _949;
        float _2928 = (cbSceneParam._m0[77u].w * _2925) / _2911;
        float _2929 = _2928 + cbSceneParam._m0[79u].w;
        float _2930 = cbSceneParam._m0[79u].w - _2924;
        float _2936 = sqrt(((_2923 * _2923) + (_2924 * _2924)) + (_2926 * _2926));
        float _2939 = (1.0 - (cbSceneParam._m0[77u].w / _2911)) * _2936;
        float _2944 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2946 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3099;
        if (abs((_2925 - _2928) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3099 = ((((_2929 > 0.0) ? exp2(_2944 * _2929) : (2.0 - exp2(_2946 * _2929))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2939;
        }
        else
        {
            float _3059 = 1.0 / cbSceneParam._m0[80u].x;
            float _3060 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : max(_2929, _2930));
            float _3061 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : min(_2929, _2930));
            float _3070 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : min(_3060, 0.0));
            float _3071 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : min(_3061, 0.0));
            _3099 = ((abs(_2936 / _2925) * cbSceneParam._m0[80u].y) * ((((_3070 - _3071) * 2.0) - ((exp2(_2944 * (isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0)))) - exp2(_2944 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))))) * _3059)) - ((exp2(_2946 * _3070) - exp2(_2946 * _3071)) * _3059))) + (_2939 * cbSceneParam._m0[80u].z);
        }
        vec4 _3101 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, 1.0), 0.0);
        float _3110 = exp2((_3099 * (-1.44269502162933349609375)) * (1.0 - _3101.w));
        float _3111 = log2(_3110);
        float _3127 = log2(_2856);
        _2948 = (exp2(_3127 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3111 * cbSceneParam._m0[78u].x)) * _3101.x) / cbSceneParam._m0[78u].x)) + _2853;
        _2950 = (exp2(_3127 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3111 * cbSceneParam._m0[78u].y)) * _3101.y) / cbSceneParam._m0[78u].y)) + _2854;
        _2952 = (exp2(_3127 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3111 * cbSceneParam._m0[78u].z)) * _3101.z) / cbSceneParam._m0[78u].z)) + _2855;
        _2954 = _3110 * _2856;
    }
    else
    {
        _2948 = _2853;
        _2950 = _2854;
        _2952 = _2855;
        _2954 = _2856;
    }
    float _2966 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2967 = _2966 == 3.0;
    float _2968 = log2(_2954);
    float _2975 = exp2(_2968 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2798 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1040))) + ((_2804 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1848)) * cbPerFrame._m0[3u].x));
    float _2976 = exp2(_2968 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2800 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1040))) + ((_2806 + ((isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0))) * _1848)) * cbPerFrame._m0[3u].x));
    float _2977 = exp2(_2968 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2802 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1040))) + ((_2808 + ((isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0))) * _1848)) * cbPerFrame._m0[3u].x));
    float _2986 = (_2966 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2986 * (_2967 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2948)));
    SV_Target.y = _2986 * (_2967 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2950)));
    SV_Target.z = _2986 * (_2967 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2952)));
    SV_Target.w = cbInstanceData._m0[_2828].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2828].w;
}


