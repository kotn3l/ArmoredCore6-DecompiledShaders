#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1220;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _355 = _353.x;
    float _367 = dot(vec4(_355, _353.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _384 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_355 - _367) * cbMtdParam._m0[24u].y) + _367) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3830 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _392 = (_385 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _393 = (_385 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _394 = (_385 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _443 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _457 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_433 - _443) * cbMtdParam._m0[24u].y) + _443) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3841 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _465 = (_458 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392;
    float _466 = (_458 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393;
    float _467 = (_458 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394;
    vec4 _479 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _502 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _519 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _521 = _519.x;
    float _522 = _519.y;
    float _523 = _519.z;
    float _530 = ((_502.x - _521) * _385) + _521;
    float _531 = ((_502.y - _522) * _385) + _522;
    float _532 = ((_502.z - _523) * _385) + _523;
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _557 = ((_544.z - _532) * _458) + _532;
    float _560 = ((((_544.x - _530) * _458) + _530) * 2.0) + (-1.0);
    float _561 = ((((_544.y - _531) * _458) + _531) * 2.0) + (-1.0);
    float _562 = dot(vec2(_560, _561), vec2(_560, _561));
    float _3852 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _567 = sqrt(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))));
    float _572 = _560 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_479.x * 2.0) + (-1.0)));
    float _573 = _561 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_479.y * 2.0) + (-1.0)));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _600 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _614 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _616 = _614.x;
    float _634 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _616) * _385) + _616;
    float _652 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _266) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _267) + cbTextureTilingScale._m0[21u].w)).x - _634) * _458) + _634;
    float _656 = ((_600.x - _652) * cbMtdParam._m0[19u].z) + _652;
    float _661 = (((_479.z - _557) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _557;
    float _666 = cbMtdParam._m0[22u].x + _586.w;
    float _669 = fma(_567, _233 * NORMAL.x, fma(_573, _240 * TANGENT.x, (_226 * _218) * _572));
    float _672 = fma(_567, _233 * NORMAL.y, fma(_573, _240 * TANGENT.y, (_226 * _219) * _572));
    float _675 = fma(_567, _233 * NORMAL.z, fma(_573, _240 * TANGENT.z, (_226 * _220) * _572));
    float _679 = inversesqrt(dot(vec3(_669, _672, _675), vec3(_669, _672, _675)));
    float _680 = _679 * _669;
    float _681 = _679 * _672;
    float _682 = _679 * _675;
    float _3863 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _683 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3885 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3896 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3907 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3918 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _688 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _702 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _753 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _743);
    float _754 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _743);
    float _755 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _743);
    float _759 = inversesqrt(dot(vec3(_753, _754, _755), vec3(_753, _754, _755)));
    float _760 = _753 * _759;
    float _761 = _754 * _759;
    float _762 = _755 * _759;
    float _768 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _769 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _787 = fma(_682, cbSceneParam._m0[5u].z, fma(_681, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _680));
    float _790 = fma(_682, cbSceneParam._m0[6u].z, fma(_681, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _680));
    float _793 = fma(_682, cbSceneParam._m0[7u].z, fma(_681, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _680));
    uint _807 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _813 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_807].x;
    float _814 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_807].y;
    float _815 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_807].z;
    float _3929 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _819 = 1.0 - _688;
    float _820 = _816 * _819;
    float _821 = _817 * _819;
    float _822 = _818 * _819;
    float _827 = (_816 + (-0.039999999105930328369140625)) * _688;
    float _828 = (_817 + (-0.039999999105930328369140625)) * _688;
    float _829 = (_818 + (-0.039999999105930328369140625)) * _688;
    float _830 = _827 + 0.039999999105930328369140625;
    float _832 = _828 + 0.039999999105930328369140625;
    float _833 = _829 + 0.039999999105930328369140625;
    vec4 _842 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _768, cbSceneParam._m0[86u].y * _769));
    float _846 = ((isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * TEXCOORD_5.w) * _842.x;
    float _847 = dot(vec3(_680, _681, _682), vec3(_760, _761, _762));
    float _850 = _847 * 2.0;
    float _854 = (_850 * _680) - _760;
    float _855 = (_850 * _681) - _761;
    float _856 = (_850 * _682) - _762;
    float _860 = abs(dot(vec3(_760, _761, _762), vec3(_680, _681, _682)));
    float _3962 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _862 = sqrt(_683);
    float _875 = exp2((_862 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_862 * 3.0));
    float _881 = (1.0 - _875) * ((_862 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _882 = _875 * _862;
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1219;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _944 = fma(_918, cbModelParam._m0[26u].z, fma(_914, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910));
        float _948 = fma(_918, cbModelParam._m0[27u].z, fma(_914, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910));
        float _952 = fma(_918, cbModelParam._m0[28u].z, fma(_914, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910));
        float _977 = _910 + _680;
        float _978 = _914 + _681;
        float _979 = _918 + _682;
        float _989 = fma(_979, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _977)) - _944;
        float _990 = fma(_979, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _977)) - _948;
        float _991 = fma(_979, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _977)) - _952;
        float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
        float _1008 = ((_995 * _989) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_944 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_995 * _990) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_948 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_995 * _991) / cbModelParam._m0[34u].z) + ((((((_952 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        float _1047 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1013.x + (-0.5));
        float _1049 = _1047 * (_1013.y + (-0.5));
        float _1050 = _1047 * (_1013.z + (-0.5));
        float _1057 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1020.x + (-0.5));
        float _1059 = _1057 * (_1020.y + (-0.5));
        float _1060 = _1057 * (_1020.z + (-0.5));
        float _1067 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1027.x + (-0.5));
        float _1069 = _1067 * (_1027.y + (-0.5));
        float _1070 = _1067 * (_1027.z + (-0.5));
        float _1077 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1034.x + (-0.5));
        float _1079 = _1077 * (_1034.y + (-0.5));
        float _1080 = _1077 * (_1034.z + (-0.5));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = _1048 * 0.5;
        float _1085 = _1058 * 0.5;
        float _1086 = _1068 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1101 = (dot(vec3(_680, _681, _682), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1111 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _4010 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1113 + 1.0))) + _1118) * _1081;
        float _1128 = _1049 * 0.5;
        float _1129 = _1059 * 0.5;
        float _1130 = _1069 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_680, _681, _682), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _4043 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1155 + 1.0))) + _1160) * _1082;
        float _1170 = _1050 * 0.5;
        float _1171 = _1060 * 0.5;
        float _1172 = _1070 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_680, _681, _682), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _4076 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1197 + 1.0))) + _1202) * _1083;
        _1219 = _1050;
        _1221 = _1049;
        _1222 = _1048;
        _1223 = _1060;
        _1224 = _1059;
        _1225 = _1058;
        _1226 = _1070;
        _1227 = _1069;
        _1228 = _1068;
        _1229 = _1083;
        _1230 = _1082;
        _1231 = _1081;
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
    }
    else
    {
        _1219 = _1220;
        _1221 = _1220;
        _1222 = _1220;
        _1223 = _1220;
        _1224 = _1220;
        _1225 = _1220;
        _1226 = _1220;
        _1227 = _1220;
        _1228 = _1220;
        _1229 = _1220;
        _1230 = _1220;
        _1231 = _1220;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1258 = fma(_918, cbModelParam._m0[30u].z, fma(_914, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _910));
        float _1262 = fma(_918, cbModelParam._m0[31u].z, fma(_914, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _910));
        float _1266 = fma(_918, cbModelParam._m0[32u].z, fma(_914, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _910));
        float _1289 = _910 + _680;
        float _1290 = _914 + _681;
        float _1291 = _918 + _682;
        float _1301 = fma(_1291, cbModelParam._m0[30u].z, fma(_1290, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1289)) - _1258;
        float _1302 = fma(_1291, cbModelParam._m0[31u].z, fma(_1290, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1289)) - _1262;
        float _1303 = fma(_1291, cbModelParam._m0[32u].z, fma(_1290, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1289)) - _1266;
        float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
        float _1320 = ((_1307 * _1301) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1258 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1307 * _1302) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1262 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1307 * _1303) / cbModelParam._m0[35u].z) + ((((((_1266 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1357 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1324.x + (-0.5));
        float _1359 = _1357 * (_1324.y + (-0.5));
        float _1360 = _1357 * (_1324.z + (-0.5));
        float _1367 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1331.x + (-0.5));
        float _1369 = _1367 * (_1331.y + (-0.5));
        float _1370 = _1367 * (_1331.z + (-0.5));
        float _1377 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1338.x + (-0.5));
        float _1379 = _1377 * (_1338.y + (-0.5));
        float _1380 = _1377 * (_1338.z + (-0.5));
        float _1387 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1345.x + (-0.5));
        float _1389 = _1387 * (_1345.y + (-0.5));
        float _1390 = _1387 * (_1345.z + (-0.5));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = _1358 * 0.5;
        float _1395 = _1368 * 0.5;
        float _1396 = _1378 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_680, _681, _682), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4139 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1421 + 1.0))) + _1426) * _1391;
        float _1436 = _1359 * 0.5;
        float _1437 = _1369 * 0.5;
        float _1438 = _1379 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_680, _681, _682), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4172 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1463 + 1.0))) + _1468) * _1392;
        float _1478 = _1360 * 0.5;
        float _1479 = _1370 * 0.5;
        float _1480 = _1380 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_680, _681, _682), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4205 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1505 + 1.0))) + _1510) * _1393;
        _1527 = _1360;
        _1528 = _1359;
        _1529 = _1358;
        _1530 = _1370;
        _1531 = _1369;
        _1532 = _1368;
        _1533 = _1380;
        _1534 = _1379;
        _1535 = _1378;
        _1536 = _1393;
        _1537 = _1392;
        _1538 = _1391;
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
    }
    else
    {
        _1527 = _1220;
        _1528 = _1220;
        _1529 = _1220;
        _1530 = _1220;
        _1531 = _1220;
        _1532 = _1220;
        _1533 = _1220;
        _1534 = _1220;
        _1535 = _1220;
        _1536 = _1220;
        _1537 = _1220;
        _1538 = _1220;
        _1539 = 0.0;
        _1540 = 0.0;
        _1541 = 0.0;
    }
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1232)) + _1232;
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1233)) + _1233;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1234)) + _1234;
    float _1574 = fma(_1553, cbSceneParam._m0[89u].z, fma(_1552, cbSceneParam._m0[89u].y, _1551 * cbSceneParam._m0[89u].x));
    float _1577 = fma(_1553, cbSceneParam._m0[90u].z, fma(_1552, cbSceneParam._m0[90u].y, _1551 * cbSceneParam._m0[90u].x));
    float _1580 = fma(_1553, cbSceneParam._m0[91u].z, fma(_1552, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1551));
    float _1595 = _854 * 0.5;
    float _1596 = _855 * 0.5;
    float _1597 = _856 * 0.5;
    float _1598 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1601 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1604 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1638;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1611 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1219, _1223, _1226, _1229));
        float _1615 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1221, _1224, _1227, _1230));
        float _1619 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1222, _1225, _1228, _1231));
        float _1626 = dot(vec4(cbModelParam._m0[39u]), vec4(_1595, _1596, _1597, 1.0));
        _1638 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1638 = 1.0;
    }
    float _1649;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1640 = dot(vec4(cbModelParam._m0[40u]), vec4(_1595, _1596, _1597, 1.0));
        _1649 = dot(vec3(isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1640) ? 0.0 : (isnan(0.0) ? _1640 : max(0.0, _1640))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1649 = 1.0;
    }
    float _1653 = (_1649 * cbModelParam._m0[1u].x) + (_1638 * (1.0 - cbModelParam._m0[1u].x));
    float _1663 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _683);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1663 : min(cbModelParam._m0[25u].z, _1663));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1713 = fma(_918, cbModelParam._m0[13u].z, fma(_914, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _910)) + cbModelParam._m0[13u].w;
        float _1717 = fma(_918, cbModelParam._m0[14u].z, fma(_914, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _910)) + cbModelParam._m0[14u].w;
        float _1721 = fma(_918, cbModelParam._m0[15u].z, fma(_914, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _910)) + cbModelParam._m0[15u].w;
        float _1724 = fma(_856, cbModelParam._m0[13u].z, fma(_855, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _854));
        float _1727 = fma(_856, cbModelParam._m0[14u].z, fma(_855, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _854));
        float _1730 = fma(_856, cbModelParam._m0[15u].z, fma(_855, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _854));
        float _1758;
        if (_1724 > 0.0)
        {
            _1758 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1758 = frontier_phi_14_12_ladder;
        }
        float _1930;
        if (_1727 > 0.0)
        {
            _1930 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1930 = frontier_phi_23_19_ladder;
        }
        float _2225;
        if (_1730 > 0.0)
        {
            _2225 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2225 = frontier_phi_35_30_ladder;
        }
        float _2227 = isnan(_1930) ? _1758 : (isnan(_1758) ? _1930 : min(_1758, _1930));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1724) + _1713;
        float _2233 = (_2228 * _1727) + _1717;
        float _2234 = (_2228 * _1730) + _1721;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2235;
        float _2239 = _2235 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 > _2239) || ((_2233 < _2237) || ((_2232 < _2237) || (_2232 > _2239))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2379 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2234, cbModelParam._m0[9u].z, fma(_2233, cbModelParam._m0[9u].y, _2232 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2234, cbModelParam._m0[10u].z, fma(_2233, cbModelParam._m0[10u].y, _2232 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2234, cbModelParam._m0[11u].z, fma(_2233, cbModelParam._m0[11u].y, _2232 * cbModelParam._m0[11u].x))), _1664);
            frontier_phi_13_35_ladder = _2379.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2379.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2379.x * cbModelParam._m0[1u].y;
        }
        _1746 = frontier_phi_13_35_ladder_2;
        _1748 = frontier_phi_13_35_ladder_1;
        _1750 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_854, _855, _856), _1664);
        _1746 = _1734.x * cbModelParam._m0[1u].y;
        _1748 = _1734.y * cbModelParam._m0[1u].y;
        _1750 = _1734.z * cbModelParam._m0[1u].y;
    }
    float _1754 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _683);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1754 : min(cbModelParam._m0[25u].w, _1754));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1809 = fma(_918, cbModelParam._m0[21u].z, fma(_914, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _910)) + cbModelParam._m0[21u].w;
        float _1813 = fma(_918, cbModelParam._m0[22u].z, fma(_914, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _910)) + cbModelParam._m0[22u].w;
        float _1817 = fma(_918, cbModelParam._m0[23u].z, fma(_914, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _910)) + cbModelParam._m0[23u].w;
        float _1820 = fma(_856, cbModelParam._m0[21u].z, fma(_855, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _854));
        float _1823 = fma(_856, cbModelParam._m0[22u].z, fma(_855, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _854));
        float _1826 = fma(_856, cbModelParam._m0[23u].z, fma(_855, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _854));
        float _1935;
        if (_1820 > 0.0)
        {
            _1935 = abs((1.0 - _1809) / _1820);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1809 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1935 = frontier_phi_25_21_ladder;
        }
        float _2252;
        if (_1823 > 0.0)
        {
            _2252 = abs((1.0 - _1813) / _1823);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1813 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2252 = frontier_phi_37_32_ladder;
        }
        float _2590;
        if (_1826 > 0.0)
        {
            _2590 = abs((1.0 - _1817) / _1826);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1817 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2590 = frontier_phi_47_44_ladder;
        }
        float _2592 = isnan(_2252) ? _1935 : (isnan(_1935) ? _2252 : min(_1935, _2252));
        float _2593 = isnan(_2590) ? _2592 : (isnan(_2592) ? _2590 : min(_2592, _2590));
        float _2597 = (_2593 * _1820) + _1809;
        float _2598 = (_2593 * _1823) + _1813;
        float _2599 = (_2593 * _1826) + _1817;
        float _2600 = _2593 * 9.9999997473787516355514526367188e-05;
        float _2601 = (-1.0) - _2600;
        float _2603 = _2600 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2599 > _2603) || ((_2599 < _2601) || ((_2598 > _2603) || ((_2598 < _2601) || ((_2597 < _2601) || (_2597 > _2603))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2721 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2599, cbModelParam._m0[17u].z, fma(_2598, cbModelParam._m0[17u].y, _2597 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2599, cbModelParam._m0[18u].z, fma(_2598, cbModelParam._m0[18u].y, _2597 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2599, cbModelParam._m0[19u].z, fma(_2598, cbModelParam._m0[19u].y, _2597 * cbModelParam._m0[19u].x))), _1755);
            frontier_phi_22_47_ladder = _2721.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2721.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2721.x * cbModelParam._m0[1u].z;
        }
        _1845 = frontier_phi_22_47_ladder_2;
        _1847 = frontier_phi_22_47_ladder_1;
        _1849 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_854, _855, _856), _1755);
        _1845 = _1829.x * cbModelParam._m0[1u].z;
        _1847 = _1829.y * cbModelParam._m0[1u].z;
        _1849 = _1829.z * cbModelParam._m0[1u].z;
    }
    float _1862 = (((_881 * _830) + _882) * _846) * ((cbModelParam._m0[1u].w * (_1845 - _1746)) + _1746);
    float _1864 = (((_881 * _832) + _882) * _846) * ((cbModelParam._m0[1u].w * (_1847 - _1748)) + _1748);
    float _1866 = (((_881 * _833) + _882) * _846) * ((cbModelParam._m0[1u].w * (_1849 - _1750)) + _1750);
    float _1869 = fma(_1866, cbSceneParam._m0[89u].z, fma(_1864, cbSceneParam._m0[89u].y, _1862 * cbSceneParam._m0[89u].x));
    float _1872 = fma(_1866, cbSceneParam._m0[90u].z, fma(_1864, cbSceneParam._m0[90u].y, _1862 * cbSceneParam._m0[90u].x));
    float _1875 = fma(_1866, cbSceneParam._m0[91u].z, fma(_1864, cbSceneParam._m0[91u].y, _1862 * cbSceneParam._m0[91u].x));
    float _1909 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1913 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1917 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1921 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1922 = _1909 / _1921;
    float _1923 = _1913 / _1921;
    float _1924 = _1917 / _1921;
    float _2071;
    float _2072;
    float _2073;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1951 = ((uint(_1924 > cbSceneParam._m0[59u].y) + uint(_1924 > cbSceneParam._m0[59u].x)) + uint(_1924 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1952 = _1951 + 43u;
        uint _1960 = _1951 + 44u;
        uint _1968 = _1951 + 45u;
        uint _1976 = _1951 + 46u;
        float _1987 = fma(_1921, cbSceneParam._m0[_1952].w, fma(_1917, cbSceneParam._m0[_1952].z, fma(_1913, cbSceneParam._m0[_1952].y, _1909 * cbSceneParam._m0[_1952].x)));
        float _1991 = fma(_1921, cbSceneParam._m0[_1960].w, fma(_1917, cbSceneParam._m0[_1960].z, fma(_1913, cbSceneParam._m0[_1960].y, _1909 * cbSceneParam._m0[_1960].x)));
        float _1999 = fma(_1921, cbSceneParam._m0[_1976].w, fma(_1917, cbSceneParam._m0[_1976].z, fma(_1913, cbSceneParam._m0[_1976].y, _1909 * cbSceneParam._m0[_1976].x)));
        float _2004 = cbSceneParam._m0[33u].z * _1999;
        float _2006 = cbSceneParam._m0[33u].w * _1999;
        float _2009 = fma(_1921, cbSceneParam._m0[_1968].w, fma(_1917, cbSceneParam._m0[_1968].z, fma(_1913, cbSceneParam._m0[_1968].y, _1909 * cbSceneParam._m0[_1968].x))) / _1999;
        float _2057 = (cbSceneParam._m0[33u].x - sqrt(((_1923 * _1923) + (_1922 * _1922)) + (_1924 * _1924))) * cbSceneParam._m0[33u].y;
        float _4331 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2064 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2004 + _1987) / _1999, (_2006 + _1991) / _1999), _2009), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2006 + _1987) / _1999, (_1991 - _2004) / _1999), _2009), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1987 - _2004) / _1999, (_1991 - _2006) / _1999), _2009), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1987 - _2006) / _1999, (_2004 + _1991) / _1999), _2009), 0.0)).x), vec4(0.25)));
        _2071 = 1.0 - (_2064 * cbSceneParam._m0[34u].x);
        _2072 = 1.0 - (_2064 * cbSceneParam._m0[34u].y);
        _2073 = 1.0 - (_2064 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2071 = 1.0;
        _2072 = 1.0;
        _2073 = 1.0;
    }
    float _2137;
    float _2139;
    float _2141;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2125 = fma(_1921, cbSceneParam._m0[63u].w, fma(_1917, cbSceneParam._m0[63u].z, fma(_1913, cbSceneParam._m0[63u].y, _1909 * cbSceneParam._m0[63u].x)));
        float _2126 = fma(_1921, cbSceneParam._m0[60u].w, fma(_1917, cbSceneParam._m0[60u].z, fma(_1913, cbSceneParam._m0[60u].y, _1909 * cbSceneParam._m0[60u].x))) / _2125;
        float _2127 = fma(_1921, cbSceneParam._m0[61u].w, fma(_1917, cbSceneParam._m0[61u].z, fma(_1913, cbSceneParam._m0[61u].y, _1909 * cbSceneParam._m0[61u].x))) / _2125;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2126 >= cbSceneParam._m0[64u].x) && (_2127 >= cbSceneParam._m0[64u].y)) && (_2126 <= cbSceneParam._m0[64u].z)) && (_2127 <= cbSceneParam._m0[64u].w))
        {
            float _2265 = fma(_1921, cbSceneParam._m0[62u].w, fma(_1917, cbSceneParam._m0[62u].z, fma(_1913, cbSceneParam._m0[62u].y, _1909 * cbSceneParam._m0[62u].x))) / _2125;
            float _2269 = isnan(cbSceneParam._m0[41u].w) ? _2265 : (isnan(_2265) ? cbSceneParam._m0[41u].w : max(_2265, cbSceneParam._m0[41u].w));
            float _2312 = (cbSceneParam._m0[33u].x - sqrt(((_1923 * _1923) + (_1922 * _1922)) + (_1924 * _1924))) * cbSceneParam._m0[33u].y;
            float _4347 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
            float _2319 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2126, cbSceneParam._m0[33u].w + _2127), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2126, _2127 - cbSceneParam._m0[33u].z), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2126 - cbSceneParam._m0[33u].z, _2127 - cbSceneParam._m0[33u].w), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2126 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2127), _2269), 0.0)).x), vec4(0.25)));
            float _2323 = 1.0 - (_2319 * cbSceneParam._m0[34u].x);
            float _2324 = 1.0 - (_2319 * cbSceneParam._m0[34u].y);
            float _2325 = 1.0 - (_2319 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2325) ? _2073 : (isnan(_2073) ? _2325 : min(_2073, _2325));
            frontier_phi_34_33_ladder_1 = isnan(_2324) ? _2072 : (isnan(_2072) ? _2324 : min(_2072, _2324));
            frontier_phi_34_33_ladder_2 = isnan(_2323) ? _2071 : (isnan(_2071) ? _2323 : min(_2071, _2323));
        }
        else
        {
            frontier_phi_34_33_ladder = _2073;
            frontier_phi_34_33_ladder_1 = _2072;
            frontier_phi_34_33_ladder_2 = _2071;
        }
        _2137 = frontier_phi_34_33_ladder_2;
        _2139 = frontier_phi_34_33_ladder_1;
        _2141 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2137 = _2071;
        _2139 = _2072;
        _2141 = _2073;
    }
    uvec4 _2146 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2148 = _2146.x * 14u;
    uint _2149 = _2148 + 13u;
    float _2156 = _846 + (-1.0);
    float _2161 = (cbLight._m0[_2149].x * _2156) + 1.0;
    float _2162 = (cbLight._m0[_2149].y * _2156) + 1.0;
    float _2163 = (cbLight._m0[_2149].z * _2156) + 1.0;
    float _2164 = (cbLight._m0[_2149].w * _2156) + 1.0;
    uint _2165 = _2148 + 5u;
    float _2171 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
    uint _2175 = _2148 + 4u;
    float _2184 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
    uint _2188 = _2148 | 1u;
    float _2199 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_680, _681, _682));
    float _2202 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_680, _681, _682));
    float _4383 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _4394 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2207 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * 0.3183098733425140380859375;
    float _2209 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.3183098733425140380859375;
    float _2216 = ((cbLight._m0[_2165].x * _2171) * _2209) + (((cbLight._m0[_2175].x * _2137) * _2184) * _2207);
    float _2217 = ((_2171 * cbLight._m0[_2165].y) * _2209) + (((cbLight._m0[_2175].y * _2139) * _2184) * _2207);
    float _2218 = ((_2171 * cbLight._m0[_2165].z) * _2209) + (((cbLight._m0[_2175].z * _2141) * _2184) * _2207);
    uvec4 _2222 = floatBitsToUint(cbLight._m0[_2148 + 12u]);
    bool _2224 = _2222.x == 0u;
    float _2326;
    float _2328;
    float _2330;
    if (_2224)
    {
        _2326 = _2216;
        _2328 = _2217;
        _2330 = _2218;
    }
    else
    {
        uint _2334 = _2148 + 6u;
        float _2350 = (dot(vec3(cbLight._m0[_2148 + 2u].xyz), vec3(_680, _681, _682)) * 0.5) + 0.5;
        float _2351 = _2350 * _2350;
        float _4405 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2352 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2353 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2326 = (((cbLight._m0[_2334].x * 0.3183098733425140380859375) * _2352) * _2353) + _2216;
        _2328 = (((cbLight._m0[_2334].y * 0.3183098733425140380859375) * _2352) * _2353) + _2217;
        _2330 = (((cbLight._m0[_2334].z * 0.3183098733425140380859375) * _2352) * _2353) + _2218;
    }
    bool _2333 = _2222.y == 0u;
    float _2388;
    float _2390;
    float _2392;
    if (_2333)
    {
        _2388 = _2326;
        _2390 = _2328;
        _2392 = _2330;
    }
    else
    {
        uint _2561 = _2148 + 7u;
        float _2577 = (dot(vec3(cbLight._m0[_2148 + 3u].xyz), vec3(_680, _681, _682)) * 0.5) + 0.5;
        float _2578 = _2577 * _2577;
        float _4421 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2579 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2580 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2388 = (((cbLight._m0[_2561].x * 0.3183098733425140380859375) * _2579) * _2580) + _2326;
        _2390 = (((cbLight._m0[_2561].y * 0.3183098733425140380859375) * _2579) * _2580) + _2328;
        _2392 = (((cbLight._m0[_2561].z * 0.3183098733425140380859375) * _2579) * _2580) + _2330;
    }
    uint _2395 = _2148 + 8u;
    float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _683) * 0.949999988079071044921875);
    float _2409 = _2408 * _2408;
    float _2410 = cbLight._m0[_2148].x + _760;
    float _2411 = cbLight._m0[_2148].y + _761;
    float _2412 = cbLight._m0[_2148].z + _762;
    float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
    float _2417 = _2416 * _2410;
    float _2418 = _2416 * _2411;
    float _2419 = _2416 * _2412;
    float _2420 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2148].xyz));
    float _4437 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2423 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _4448 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _2424 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2425 = dot(vec3(_680, _681, _682), vec3(_2417, _2418, _2419));
    float _4459 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2429 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2417, _2418, _2419));
    float _4470 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2433 = _2409 * _2409;
    float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
    float _2445 = exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0);
    float _2446 = 0.959999978542327880859375 - _827;
    float _2448 = 0.959999978542327880859375 - _828;
    float _2449 = 0.959999978542327880859375 - _829;
    float _2456 = 1.0 - _2409;
    float _2467 = (0.5 / (((_2424 * ((_2423 * _2456) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2456) + _2409) * _2423))) * _2423;
    float _4481 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2469 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
    uint _2483 = _2148 + 9u;
    float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _683) * 0.949999988079071044921875);
    float _2495 = _2494 * _2494;
    float _2496 = cbLight._m0[_2188].x + _760;
    float _2497 = cbLight._m0[_2188].y + _761;
    float _2498 = cbLight._m0[_2188].z + _762;
    float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
    float _2503 = _2502 * _2496;
    float _2504 = _2502 * _2497;
    float _2505 = _2502 * _2498;
    float _2506 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2188].xyz));
    float _4492 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2510 = dot(vec3(_680, _681, _682), vec3(_2503, _2504, _2505));
    float _4503 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2513 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2514 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2503, _2504, _2505));
    float _4514 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2518 = _2495 * _2495;
    float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
    float _2529 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
    float _2536 = 1.0 - _2495;
    float _2546 = (0.5 / (((_2424 * ((_2509 * _2536) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2536) + _2495) * _2509))) * _2509;
    float _4525 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2548 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
    float _2558 = (((((_2529 * _2446) + _830) * cbLight._m0[_2483].x) * _2548) * _2171) + ((((cbLight._m0[_2395].x * _2137) * ((_2445 * _2446) + _830)) * _2469) * _2184);
    float _2559 = (((((_2529 * _2448) + _832) * cbLight._m0[_2483].y) * _2548) * _2171) + ((((cbLight._m0[_2395].y * _2139) * ((_2445 * _2448) + _832)) * _2469) * _2184);
    float _2560 = (((((_2529 * _2449) + _833) * cbLight._m0[_2483].z) * _2548) * _2171) + ((((cbLight._m0[_2395].z * _2141) * ((_2445 * _2449) + _833)) * _2469) * _2184);
    float _2616;
    float _2618;
    float _2620;
    if (_2224)
    {
        _2616 = _2558;
        _2618 = _2559;
        _2620 = _2560;
    }
    else
    {
        uint _2622 = _2148 + 2u;
        uint _2626 = _2148 + 10u;
        float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2622].w)) * _683) * 0.949999988079071044921875);
        float _2641 = _2640 * _2640;
        float _2642 = cbLight._m0[_2622].x + _760;
        float _2643 = cbLight._m0[_2622].y + _761;
        float _2644 = cbLight._m0[_2622].z + _762;
        float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
        float _2649 = _2648 * _2642;
        float _2650 = _2648 * _2643;
        float _2651 = _2648 * _2644;
        float _2652 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2622].xyz));
        float _4536 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2656 = dot(vec3(_680, _681, _682), vec3(_2649, _2650, _2651));
        float _4547 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2660 = dot(vec3(cbLight._m0[_2622].xyz), vec3(_2649, _2650, _2651));
        float _4558 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2664 = _2641 * _2641;
        float _2668 = ((_2659 * _2659) * (_2664 + (-1.0))) + 1.0;
        float _2675 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
        float _2682 = 1.0 - _2641;
        float _2692 = (0.5 / (((_2424 * ((_2655 * _2682) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2682) + _2641) * _2655))) * _2655;
        float _4569 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2694 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2664 / ((_2668 * _2668) * 3.141590118408203125));
        float _2695 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2616 = (((((_2675 * _2446) + _830) * cbLight._m0[_2626].x) * _2694) * _2695) + _2558;
        _2618 = (((((_2675 * _2448) + _832) * cbLight._m0[_2626].y) * _2694) * _2695) + _2559;
        _2620 = (((((_2675 * _2449) + _833) * cbLight._m0[_2626].z) * _2694) * _2695) + _2560;
    }
    float _2726;
    float _2728;
    float _2730;
    if (_2333)
    {
        _2726 = _2616;
        _2728 = _2618;
        _2730 = _2620;
    }
    else
    {
        uint _2737 = _2148 + 3u;
        uint _2741 = _2148 + 11u;
        float _2755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2737].w)) * _683) * 0.949999988079071044921875);
        float _2756 = _2755 * _2755;
        float _2757 = cbLight._m0[_2737].x + _760;
        float _2758 = cbLight._m0[_2737].y + _761;
        float _2759 = cbLight._m0[_2737].z + _762;
        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
        float _2764 = _2763 * _2757;
        float _2765 = _2763 * _2758;
        float _2766 = _2763 * _2759;
        float _2767 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2737].xyz));
        float _4585 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2771 = dot(vec3(_680, _681, _682), vec3(_2764, _2765, _2766));
        float _4596 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2775 = dot(vec3(cbLight._m0[_2737].xyz), vec3(_2764, _2765, _2766));
        float _4607 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2779 = _2756 * _2756;
        float _2783 = ((_2774 * _2774) * (_2779 + (-1.0))) + 1.0;
        float _2790 = exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0);
        float _2797 = 1.0 - _2756;
        float _2807 = (0.5 / (((_2424 * ((_2770 * _2797) + _2756)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2797) + _2756) * _2770))) * _2770;
        float _4618 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2809 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2779 / ((_2783 * _2783) * 3.141590118408203125));
        float _2810 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2726 = (((((_2790 * _2446) + _830) * cbLight._m0[_2741].x) * _2809) * _2810) + _2616;
        _2728 = (((((_2790 * _2448) + _832) * cbLight._m0[_2741].y) * _2809) * _2810) + _2618;
        _2730 = (((((_2790 * _2449) + _833) * cbLight._m0[_2741].z) * _2809) * _2810) + _2620;
    }
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    if (_2146.y == 0u)
    {
        uvec4 _2831 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2832 = _2831.x;
        uint _2843 = uint((float(_2831.y) * floor(float(uint(cbSceneParam._m0[85u].y * _769) / _2832))) + floor(float(uint(cbSceneParam._m0[85u].x * _768) / _2832)));
        float _2853 = (log2(_1924 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2854 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        uint _2857 = uint(isnan(14.0) ? _2854 : (isnan(_2854) ? 14.0 : min(_2854, 14.0)));
        uvec4 _2862 = texelFetch(g_lightClusterGridBuffer, int(((_2857 << 2u) + (_2843 << 6u)) >> 2u));
        uint _2863 = _2862.x;
        uint _2864 = _2831.z;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        if (((((1u << ((_2864 >> 4u) & 15u)) + 4294967295u) & _2863) == 0u) || ((_2864 & 240u) == 0u))
        {
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
        }
        else
        {
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            uint _3094 = 0u;
            uint _3103;
            bool _3104;
            for (;;)
            {
                _3103 = texelFetch(g_lightClassification, int((((_2857 << 5u) + (_2843 << 9u)) + (_3094 << 2u)) >> 2u)).x;
                _3104 = _3103 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3104)
                {
                    frontier_phi_66_pred = _3093;
                    frontier_phi_66_pred_1 = _3092;
                    frontier_phi_66_pred_2 = _3091;
                    frontier_phi_66_pred_3 = _3090;
                    frontier_phi_66_pred_4 = _3089;
                    frontier_phi_66_pred_5 = _3088;
                }
                else
                {
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    uint _3218;
                    _3212 = _3088;
                    _3213 = _3089;
                    _3214 = _3090;
                    _3215 = _3091;
                    _3216 = _3092;
                    _3217 = _3093;
                    _3218 = _3103;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    for (;;)
                    {
                        uint _3222 = uint(findLSB(_3218)) + (_3094 << 5u);
                        uint _3219 = (_3218 + 4294967295u) & _3218;
                        uint _3224 = _3222 * 48u;
                        vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 3u)).x));
                        uint _3244 = (_3222 * 48u) + 4u;
                        vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3244)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 3u)).x));
                        uint _3263 = (_3222 * 48u) + 8u;
                        vec3 _3274 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x));
                        float _3278 = _3238.x - _1922;
                        float _3279 = _3238.y - _1923;
                        float _3280 = _3238.z - _1924;
                        float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                        float _3284 = inversesqrt(_3281);
                        float _3285 = _3284 * _3278;
                        float _3286 = _3284 * _3279;
                        float _3287 = _3284 * _3280;
                        float _3288 = dot(vec3(_787, _790, _793), vec3(_3285, _3286, _3287));
                        float _3293 = 1.0 - (_3281 * _3238.w);
                        float _4644 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3294 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3295 = sqrt(_3281) * _3257.w;
                        float _3298 = 1.39999997615814208984375 / (_3295 + 1.39999997615814208984375);
                        float _3299 = _3298 * _3298;
                        float _3302 = ((1.0 - _3299) * _3288) + _3299;
                        float _3305 = _3295 * _3295;
                        float _3309 = ((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3294) / ((_3305 * 0.699999988079071044921875) + 1.0);
                        float _3313 = (-0.0) - _1922;
                        float _3314 = (-0.0) - _1923;
                        float _3315 = (-0.0) - _1924;
                        float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                        float _3320 = _3319 * _3313;
                        float _3321 = _3319 * _3314;
                        float _3322 = _3319 * _3315;
                        float _3329 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                        float _3330 = 1.0 - _862;
                        float _3337 = sqrt(1.0 - ((1.0 - (_3330 * _3330)) * (1.0 - (_3329 * _3329))));
                        float _3338 = _3337 * _3337;
                        float _3339 = _3338 * _3338;
                        float _3340 = _3320 + _3285;
                        float _3341 = _3321 + _3286;
                        float _3342 = _3322 + _3287;
                        float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                        float _3350 = dot(vec3(_787, _790, _793), vec3(_3320, _3321, _3322));
                        float _4660 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3353 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3354 = dot(vec3(_787, _790, _793), vec3(_3346 * _3340, _3346 * _3341, _3346 * _3342));
                        float _4671 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3357 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3361 = ((_3357 * _3357) * (_3339 + (-1.0))) + 1.0;
                        float _3362 = _3298 * _3338;
                        float _3363 = _3362 * _3362;
                        float _3366 = ((1.0 - _3363) * _3288) + _3363;
                        float _4682 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3367 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3368 = 1.0 - _3338;
                        float _3378 = (0.5 / (((_3367 * ((_3353 * _3368) + _3338)) + 9.9999999392252902907785028219223e-09) + (((_3367 * _3368) + _3338) * _3353))) * _3367;
                        float _4693 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3389 = (((_3339 * 3.1415927410125732421875) * (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) / ((_3361 * _3361) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125))) * _3294;
                        _3147 = (_3309 * _3257.x) + _3215;
                        _3148 = (_3309 * _3257.y) + _3216;
                        _3149 = (_3309 * _3257.z) + _3217;
                        _3144 = (_3389 * _3274.x) + _3212;
                        _3145 = (_3389 * _3274.y) + _3213;
                        _3146 = (_3389 * _3274.z) + _3214;
                        if (_3219 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3212 = _3144;
                            _3213 = _3145;
                            _3214 = _3146;
                            _3215 = _3147;
                            _3216 = _3148;
                            _3217 = _3149;
                            _3218 = _3219;
                        }
                    }
                    frontier_phi_66_pred = _3149;
                    frontier_phi_66_pred_1 = _3148;
                    frontier_phi_66_pred_2 = _3147;
                    frontier_phi_66_pred_3 = _3146;
                    frontier_phi_66_pred_4 = _3145;
                    frontier_phi_66_pred_5 = _3144;
                }
                _2954 = frontier_phi_66_pred;
                _2952 = frontier_phi_66_pred_1;
                _2950 = frontier_phi_66_pred_2;
                _2948 = frontier_phi_66_pred_3;
                _2946 = frontier_phi_66_pred_4;
                _2944 = frontier_phi_66_pred_5;
                uint _3095 = _3094 + 1u;
                if (_3095 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3088 = _2944;
                    _3089 = _2946;
                    _3090 = _2948;
                    _3091 = _2950;
                    _3092 = _2952;
                    _3093 = _2954;
                    _3094 = _3095;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
        }
        uvec4 _2957 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2958 = _2957.z;
        uint _2960 = (_2958 >> 8u) & 15u;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        if (((4294967295u << _2960) & _2863) == 0u)
        {
            _3056 = _2943;
            _3058 = _2945;
            _3060 = _2947;
            _3062 = _2949;
            _3064 = _2951;
            _3066 = _2953;
        }
        else
        {
            float _3081 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
            float _3082 = _3081 * _1922;
            float _3083 = _3081 * _1923;
            float _3084 = _3081 * _1924;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2960 < ((_2958 >> 12u) & 15u))
            {
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3195 = _2943;
                float _3196 = _2945;
                float _3197 = _2947;
                float _3198 = _2949;
                float _3199 = _2951;
                float _3200 = _2953;
                uint _3201 = _2960;
                uint _3210;
                bool _3211;
                for (;;)
                {
                    _3210 = texelFetch(g_lightClassification, int((((_2857 << 5u) + (_2843 << 9u)) + (_3201 << 2u)) >> 2u)).x;
                    _3211 = _3210 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3211)
                    {
                        frontier_phi_72_pred = _3200;
                        frontier_phi_72_pred_1 = _3199;
                        frontier_phi_72_pred_2 = _3198;
                        frontier_phi_72_pred_3 = _3197;
                        frontier_phi_72_pred_4 = _3196;
                        frontier_phi_72_pred_5 = _3195;
                    }
                    else
                    {
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3407 = _3195;
                        float _3408 = _3196;
                        float _3409 = _3197;
                        float _3410 = _3198;
                        float _3411 = _3199;
                        float _3412 = _3200;
                        uint _3413 = _3210;
                        uint _3414;
                        vec4 _3439;
                        float _3440;
                        vec4 _3455;
                        vec3 _3467;
                        vec4 _3482;
                        vec4 _3497;
                        float _3543;
                        bool _3544;
                        for (;;)
                        {
                            uint _3424 = ((_3201 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3413));
                            _3414 = (_3413 + 4294967295u) & _3413;
                            uint _3426 = _3424 * 40u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            _3440 = _3439.w;
                            uint _3442 = (_3424 * 40u) + 4u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3457 = (_3424 * 40u) + 8u;
                            _3467 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x));
                            uint _3469 = (_3424 * 40u) + 16u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3484 = (_3424 * 40u) + 20u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3424 * 40u) + 24u;
                            vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3518 = (_3424 * 40u) + 28u;
                            vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            _3543 = fma(_1924, _3531.z, fma(_1923, _3531.y, _3531.x * _1922)) + _3531.w;
                            _3544 = !((fma(_1924, _3512.z, fma(_1923, _3512.y, _3512.x * _1922)) + _3512.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3544)
                            {
                                float _3571 = _3439.x - _1922;
                                float _3572 = _3439.y - _1923;
                                float _3573 = _3439.z - _1924;
                                float _3574 = dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573));
                                float _3577 = inversesqrt(_3574);
                                float _3578 = _3577 * _3571;
                                float _3579 = _3577 * _3572;
                                float _3580 = _3577 * _3573;
                                float _3584 = 1.0 - (_3574 / (_3440 * _3440));
                                float _4704 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3589 = sqrt(_3574) * _3455.w;
                                float _3591 = 1.39999997615814208984375 / (_3589 + 1.39999997615814208984375);
                                float _3592 = _3591 * _3591;
                                float _3595 = ((1.0 - _3592) * dot(vec3(_3578, _3579, _3580), vec3(_787, _790, _793))) + _3592;
                                float _3598 = _3589 * _3589;
                                float _3602 = (fma(_1924, _3482.z, fma(_1923, _3482.y, _3482.x * _1922)) + _3482.w) / _3543;
                                float _3603 = (fma(_1924, _3497.z, fma(_1923, _3497.y, _3497.x * _1922)) + _3497.w) / _3543;
                                float _3607 = 1.0 - dot(vec2(_3602, _3603), vec2(_3602, _3603));
                                float _4720 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3609 = _3608 * (((isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0))) * _3585) / ((_3598 * 0.699999988079071044921875) + 1.0));
                                float _3621 = exp2(log2(1.0 / ((_3598 * 3.5) + 5.0)) * 0.25);
                                float _3622 = 1.0 - _862;
                                float _3629 = sqrt(1.0 - ((1.0 - (_3622 * _3622)) * (1.0 - (_3621 * _3621))));
                                float _3630 = _3629 * _3629;
                                float _3631 = _3630 * _3630;
                                float _3632 = _3578 - _3082;
                                float _3633 = _3579 - _3083;
                                float _3634 = _3580 - _3084;
                                float _3638 = inversesqrt(dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634)));
                                float _3642 = dot(vec3(_787, _790, _793), vec3((-0.0) - _3082, (-0.0) - _3083, (-0.0) - _3084));
                                float _4731 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3645 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3646 = dot(vec3(_787, _790, _793), vec3(_3638 * _3632, _3638 * _3633, _3638 * _3634));
                                float _4742 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3649 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3653 = ((_3649 * _3649) * (_3631 + (-1.0))) + 1.0;
                                float _3654 = _3591 * _3630;
                                float _3655 = _3654 * _3654;
                                float _3661 = ((1.0 - _3655) * dot(vec3(_787, _790, _793), vec3(_3578, _3579, _3580))) + _3655;
                                float _4753 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3663 = 1.0 - _3630;
                                float _3673 = (0.5 / (((_3662 * ((_3645 * _3663) + _3630)) + 9.9999999392252902907785028219223e-09) + (((_3662 * _3663) + _3630) * _3645))) * _3662;
                                float _4764 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3683 = (_3608 * _3585) * (((_3631 * 3.1415927410125732421875) * (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) / ((_3653 * _3653) * ((_3598 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3609 * _3455.y;
                                frontier_phi_78_pred_1 = _3609 * _3455.x;
                                frontier_phi_78_pred_2 = _3683 * _3467.z;
                                frontier_phi_78_pred_3 = _3683 * _3467.y;
                                frontier_phi_78_pred_4 = _3683 * _3467.x;
                                frontier_phi_78_pred_5 = _3609 * _3455.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3691 = frontier_phi_78_pred;
                            _3690 = frontier_phi_78_pred_1;
                            _3689 = frontier_phi_78_pred_2;
                            _3688 = frontier_phi_78_pred_3;
                            _3687 = frontier_phi_78_pred_4;
                            _3692 = frontier_phi_78_pred_5;
                            _3397 = _3690 + _3410;
                            _3398 = _3691 + _3411;
                            _3399 = _3692 + _3412;
                            _3394 = _3687 + _3407;
                            _3395 = _3688 + _3408;
                            _3396 = _3689 + _3409;
                            if (_3414 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3414;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3399;
                        frontier_phi_72_pred_1 = _3398;
                        frontier_phi_72_pred_2 = _3397;
                        frontier_phi_72_pred_3 = _3396;
                        frontier_phi_72_pred_4 = _3395;
                        frontier_phi_72_pred_5 = _3394;
                    }
                    _3067 = frontier_phi_72_pred;
                    _3065 = frontier_phi_72_pred_1;
                    _3063 = frontier_phi_72_pred_2;
                    _3061 = frontier_phi_72_pred_3;
                    _3059 = frontier_phi_72_pred_4;
                    _3057 = frontier_phi_72_pred_5;
                    uint _3202 = _3201 + 1u;
                    if (_3202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3195 = _3057;
                        _3196 = _3059;
                        _3197 = _3061;
                        _3198 = _3063;
                        _3199 = _3065;
                        _3200 = _3067;
                        _3201 = _3202;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3067;
                frontier_phi_60_61_ladder_1 = _3065;
                frontier_phi_60_61_ladder_2 = _3061;
                frontier_phi_60_61_ladder_3 = _3059;
                frontier_phi_60_61_ladder_4 = _3057;
                frontier_phi_60_61_ladder_5 = _3063;
            }
            else
            {
                frontier_phi_60_61_ladder = _2953;
                frontier_phi_60_61_ladder_1 = _2951;
                frontier_phi_60_61_ladder_2 = _2947;
                frontier_phi_60_61_ladder_3 = _2945;
                frontier_phi_60_61_ladder_4 = _2943;
                frontier_phi_60_61_ladder_5 = _2949;
            }
            _3056 = frontier_phi_60_61_ladder_4;
            _3058 = frontier_phi_60_61_ladder_3;
            _3060 = frontier_phi_60_61_ladder_2;
            _3062 = frontier_phi_60_61_ladder_5;
            _3064 = frontier_phi_60_61_ladder_1;
            _3066 = frontier_phi_60_61_ladder;
        }
        float _3071 = isnan(1.0) ? _846 : (isnan(_846) ? 1.0 : min(_846, 1.0));
        _2876 = (_3071 * _3062) + _2388;
        _2878 = (_3071 * _3064) + _2390;
        _2880 = (_3071 * _3066) + _2392;
        _2882 = ((_3056 * _830) * _3071) + _2726;
        _2884 = ((_3058 * _832) * _3071) + _2728;
        _2886 = ((_3060 * _833) * _3071) + _2730;
    }
    else
    {
        _2876 = _2388;
        _2878 = _2390;
        _2880 = _2392;
        _2882 = _2726;
        _2884 = _2728;
        _2886 = _2730;
    }
    float _4780 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4791 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4802 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    uint _2906 = _246 + 6u;
    float _2914 = _768 / cbSceneParam._m0[86u].x;
    float _2915 = _769 / cbSceneParam._m0[86u].y;
    vec4 _2929 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2914, _2915, (log2((isnan(cbSceneParam._m0[77u].w) ? _702 : (isnan(_702) ? cbSceneParam._m0[77u].w : min(_702, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2931 = _2929.x;
    float _2932 = _2929.y;
    float _2933 = _2929.z;
    float _2934 = _2929.w;
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    if (_702 > cbSceneParam._m0[78u].w)
    {
        float _2968 = isnan(_702) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _702 : min(cbSceneParam._m0[80u].w, _702));
        float _2969 = _2968 / _702;
        float _2980 = _2969 * _753;
        float _2981 = _754 * _2969;
        float _2982 = (-0.0) - _2981;
        float _2984 = _2969 * _755;
        float _2986 = (cbSceneParam._m0[77u].w * _2982) / _2968;
        float _2987 = _2986 + cbSceneParam._m0[79u].w;
        float _2988 = cbSceneParam._m0[79u].w - _2981;
        float _2994 = sqrt(((_2980 * _2980) + (_2981 * _2981)) + (_2984 * _2984));
        float _2997 = (1.0 - (cbSceneParam._m0[77u].w / _2968)) * _2994;
        float _3002 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3004 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3157;
        if (abs((_2982 - _2986) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3157 = ((((_2987 > 0.0) ? exp2(_3002 * _2987) : (2.0 - exp2(_3004 * _2987))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2997;
        }
        else
        {
            float _3117 = 1.0 / cbSceneParam._m0[80u].x;
            float _3118 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : max(_2987, _2988));
            float _3119 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : min(_2987, _2988));
            float _3128 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : min(_3118, 0.0));
            float _3129 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : min(_3119, 0.0));
            _3157 = ((abs(_2994 / _2982) * cbSceneParam._m0[80u].y) * ((((_3128 - _3129) * 2.0) - ((exp2(_3002 * (isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0)))) - exp2(_3002 * (isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))))) * _3117)) - ((exp2(_3004 * _3128) - exp2(_3004 * _3129)) * _3117))) + (_2997 * cbSceneParam._m0[80u].z);
        }
        vec4 _3159 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2914, _2915, 1.0), 0.0);
        float _3168 = exp2((_3157 * (-1.44269502162933349609375)) * (1.0 - _3159.w));
        float _3169 = log2(_3168);
        float _3185 = log2(_2934);
        _3006 = (exp2(_3185 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].x)) * _3159.x) / cbSceneParam._m0[78u].x)) + _2931;
        _3008 = (exp2(_3185 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].y)) * _3159.y) / cbSceneParam._m0[78u].y)) + _2932;
        _3010 = (exp2(_3185 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].z)) * _3159.z) / cbSceneParam._m0[78u].z)) + _2933;
        _3012 = _3168 * _2934;
    }
    else
    {
        _3006 = _2931;
        _3008 = _2932;
        _3010 = _2933;
        _3012 = _2934;
    }
    float _3024 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3025 = _3024 == 3.0;
    float _3026 = log2(_3012);
    float _3033 = exp2(_3026 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2876 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _846))) + ((_2882 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1653)) * cbPerFrame._m0[3u].x));
    float _3034 = exp2(_3026 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2878 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _846))) + ((_2884 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1653)) * cbPerFrame._m0[3u].x));
    float _3035 = exp2(_3026 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2880 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _846))) + ((_2886 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1653)) * cbPerFrame._m0[3u].x));
    float _3044 = (_3024 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3044 * (_3025 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3006)));
    SV_Target.y = _3044 * (_3025 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3008)));
    SV_Target.z = _3044 * (_3025 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3010)));
    SV_Target.w = cbInstanceData._m0[_2906].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2906].w;
}


