#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1129;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    uint _235 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _235 + 1u;
    uint _244 = _235 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_235].x * cbInstanceData._m0[_235].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _304 = _300.z;
    float _309 = (_300.x * 2.0) + (-1.0);
    float _311 = (_300.y * 2.0) + (-1.0);
    float _312 = dot(vec2(_309, _311), vec2(_309, _311));
    float _3482 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))));
    float _321 = fma(_318, _223, fma(_311, _230, _309 * _216));
    float _324 = fma(_318, _224, fma(_311, _231, _309 * _217));
    float _327 = fma(_318, _225, fma(_311, _232, _309 * _218));
    float _331 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _369 = _367.x;
    float _370 = 1.0 - _369;
    float _379 = (cbMtdParam._m0[19u].x + dot(vec4(_331 * _321, _331 * _324, _331 * _327, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_369 - _370) * cbMtdParam._m0[24u].z) + _370) * cbMtdParam._m0[21u].z);
    float _3493 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _382 = (-0.0) - cbMtdParam._m0[24u].x;
    float _384 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _385 = isnan(1.0) ? _384 : (isnan(_384) ? 1.0 : min(_384, 1.0));
    float _392 = _380 - ((_380 * TEXCOORD_8.x) * _385);
    float _393 = _380 - ((_380 * TEXCOORD_8.y) * _385);
    float _394 = _380 - ((_380 * TEXCOORD_8.z) * _385);
    float _401 = (_392 * (cbMtdParam._m0[17u].x - _280)) + _280;
    float _402 = (_393 * (cbMtdParam._m0[17u].y - _281)) + _281;
    float _403 = (_394 * (cbMtdParam._m0[17u].z - _282)) + _282;
    vec4 _415 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _254) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _255) + cbTextureTilingScale._m0[19u].w));
    float _417 = _415.x;
    float _418 = 1.0 - _417;
    float _448 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_417 - _418) * cbMtdParam._m0[24u].w) + _418) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3514 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _457 = ((((cbMtdParam._m0[10u].x - _401) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _449) + _401;
    float _458 = ((((cbMtdParam._m0[10u].y - _402) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _449) + _402;
    float _459 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _403)) * _449) + _403;
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _474 = _472.x;
    float _476 = _474 - (_474 * _392);
    float _478 = _476 - (_476 * _449);
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _499 = (_492.x * 2.0) + (-1.0);
    float _500 = (_492.y * 2.0) + (-1.0);
    float _501 = dot(vec2(_499, _500), vec2(_499, _500));
    float _3525 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _509 = ((_492.z - _304) * _392) + _304;
    float _512 = ((cbMtdParam._m0[23u].y - _509) * _449) + _509;
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _254) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _255) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _537 = (_531.x * 2.0) + (-1.0);
    float _538 = (_531.y * 2.0) + (-1.0);
    float _539 = dot(vec2(_537, _538), vec2(_537, _538));
    float _3536 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _554 = ((sqrt(1.0 - (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) - _318) * _394) + _318;
    float _557 = (((_499 - _309) * _392) + _309) + (cbMtdParam._m0[21u].x * _309);
    float _558 = (((_500 - _311) * _393) + _311) + (cbMtdParam._m0[21u].x * _311);
    float _569 = (((_537 - _557) + (_557 * cbMtdParam._m0[22u].z)) * _449) + _557;
    float _570 = (((_538 - _558) + (_558 * cbMtdParam._m0[22u].z)) * _449) + _558;
    float _571 = (_449 * (sqrt(1.0 - (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) - _554)) + _554;
    float _573 = cbMtdParam._m0[22u].x + _300.w;
    float _576 = fma(_571, _223, fma(_570, _230, _569 * _216));
    float _579 = fma(_571, _224, fma(_570, _231, _569 * _217));
    float _582 = fma(_571, _225, fma(_570, _232, _569 * _218));
    float _586 = inversesqrt(dot(vec3(_576, _579, _582), vec3(_576, _579, _582)));
    float _587 = _586 * _576;
    float _588 = _586 * _579;
    float _589 = _586 * _582;
    float _3547 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _590 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3569 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3580 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3591 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3602 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _595 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _609 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _659 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _649);
    float _660 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _649);
    float _661 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _649);
    float _665 = inversesqrt(dot(vec3(_659, _660, _661), vec3(_659, _660, _661)));
    float _666 = _659 * _665;
    float _667 = _660 * _665;
    float _668 = _661 * _665;
    float _674 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _675 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _696 = fma(_589, cbSceneParam._m0[5u].z, fma(_588, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _587));
    float _699 = fma(_589, cbSceneParam._m0[6u].z, fma(_588, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _587));
    float _702 = fma(_589, cbSceneParam._m0[7u].z, fma(_588, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _587));
    uint _716 = (_235 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _722 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_716].x;
    float _723 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_716].y;
    float _724 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * cbInstanceData._m0[_716].z;
    float _3613 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _3624 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _728 = 1.0 - _595;
    float _729 = _725 * _728;
    float _730 = _726 * _728;
    float _731 = _727 * _728;
    float _736 = (_725 + (-0.039999999105930328369140625)) * _595;
    float _737 = (_726 + (-0.039999999105930328369140625)) * _595;
    float _738 = (_727 + (-0.039999999105930328369140625)) * _595;
    float _739 = _736 + 0.039999999105930328369140625;
    float _741 = _737 + 0.039999999105930328369140625;
    float _742 = _738 + 0.039999999105930328369140625;
    vec4 _751 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _674, cbSceneParam._m0[86u].y * _675));
    float _755 = ((isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * TEXCOORD_5.w) * _751.x;
    float _756 = dot(vec3(_587, _588, _589), vec3(_666, _667, _668));
    float _759 = _756 * 2.0;
    float _763 = (_759 * _587) - _666;
    float _764 = (_759 * _588) - _667;
    float _765 = (_759 * _589) - _668;
    float _769 = abs(dot(vec3(_666, _667, _668), vec3(_587, _588, _589)));
    float _3646 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _771 = sqrt(_590);
    float _784 = exp2((_771 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_771 * 3.0));
    float _790 = (1.0 - _784) * ((_771 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _791 = _784 * _771;
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1128;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _853 = fma(_827, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _819));
        float _857 = fma(_827, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _819));
        float _861 = fma(_827, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _819));
        float _886 = _819 + _587;
        float _887 = _823 + _588;
        float _888 = _827 + _589;
        float _898 = fma(_888, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _886)) - _853;
        float _899 = fma(_888, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _886)) - _857;
        float _900 = fma(_888, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _886)) - _861;
        float _904 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
        float _917 = ((_904 * _898) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_853 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_904 * _899) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_857 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_904 * _900) / cbModelParam._m0[34u].z) + ((((((_861 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        float _956 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_922.x + (-0.5));
        float _958 = _956 * (_922.y + (-0.5));
        float _959 = _956 * (_922.z + (-0.5));
        float _966 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_929.x + (-0.5));
        float _968 = _966 * (_929.y + (-0.5));
        float _969 = _966 * (_929.z + (-0.5));
        float _976 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_936.x + (-0.5));
        float _978 = _976 * (_936.y + (-0.5));
        float _979 = _976 * (_936.z + (-0.5));
        float _986 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_943.x + (-0.5));
        float _988 = _986 * (_943.y + (-0.5));
        float _989 = _986 * (_943.z + (-0.5));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = _957 * 0.5;
        float _994 = _967 * 0.5;
        float _995 = _977 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1010 = (dot(vec3(_587, _588, _589), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1020 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3694 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1022 + 1.0))) + _1027) * _990;
        float _1037 = _958 * 0.5;
        float _1038 = _968 * 0.5;
        float _1039 = _978 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_587, _588, _589), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3727 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1064 + 1.0))) + _1069) * _991;
        float _1079 = _959 * 0.5;
        float _1080 = _969 * 0.5;
        float _1081 = _979 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_587, _588, _589), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3760 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1106 + 1.0))) + _1111) * _992;
        _1128 = _959;
        _1130 = _958;
        _1131 = _957;
        _1132 = _969;
        _1133 = _968;
        _1134 = _967;
        _1135 = _979;
        _1136 = _978;
        _1137 = _977;
        _1138 = _992;
        _1139 = _991;
        _1140 = _990;
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
    }
    else
    {
        _1128 = _1129;
        _1130 = _1129;
        _1131 = _1129;
        _1132 = _1129;
        _1133 = _1129;
        _1134 = _1129;
        _1135 = _1129;
        _1136 = _1129;
        _1137 = _1129;
        _1138 = _1129;
        _1139 = _1129;
        _1140 = _1129;
        _1141 = 0.0;
        _1142 = 0.0;
        _1143 = 0.0;
    }
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1168 = fma(_827, cbModelParam._m0[30u].z, fma(_823, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _819));
        float _1172 = fma(_827, cbModelParam._m0[31u].z, fma(_823, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _819));
        float _1176 = fma(_827, cbModelParam._m0[32u].z, fma(_823, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _819));
        float _1199 = _819 + _587;
        float _1200 = _823 + _588;
        float _1201 = _827 + _589;
        float _1211 = fma(_1201, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199)) - _1168;
        float _1212 = fma(_1201, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199)) - _1172;
        float _1213 = fma(_1201, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199)) - _1176;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1168 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1172 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[35u].z) + ((((((_1176 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1267 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1234.x + (-0.5));
        float _1269 = _1267 * (_1234.y + (-0.5));
        float _1270 = _1267 * (_1234.z + (-0.5));
        float _1277 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1241.x + (-0.5));
        float _1279 = _1277 * (_1241.y + (-0.5));
        float _1280 = _1277 * (_1241.z + (-0.5));
        float _1287 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1248.x + (-0.5));
        float _1289 = _1287 * (_1248.y + (-0.5));
        float _1290 = _1287 * (_1248.z + (-0.5));
        float _1297 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1255.x + (-0.5));
        float _1299 = _1297 * (_1255.y + (-0.5));
        float _1300 = _1297 * (_1255.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_587, _588, _589), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3823 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1331 + 1.0))) + _1336) * _1301;
        float _1346 = _1269 * 0.5;
        float _1347 = _1279 * 0.5;
        float _1348 = _1289 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_587, _588, _589), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3856 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1373 + 1.0))) + _1378) * _1302;
        float _1388 = _1270 * 0.5;
        float _1389 = _1280 * 0.5;
        float _1390 = _1290 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_587, _588, _589), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3889 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1415 + 1.0))) + _1420) * _1303;
        _1437 = _1270;
        _1438 = _1269;
        _1439 = _1268;
        _1440 = _1280;
        _1441 = _1279;
        _1442 = _1278;
        _1443 = _1290;
        _1444 = _1289;
        _1445 = _1288;
        _1446 = _1303;
        _1447 = _1302;
        _1448 = _1301;
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1129;
        _1438 = _1129;
        _1439 = _1129;
        _1440 = _1129;
        _1441 = _1129;
        _1442 = _1129;
        _1443 = _1129;
        _1444 = _1129;
        _1445 = _1129;
        _1446 = _1129;
        _1447 = _1129;
        _1448 = _1129;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1141)) + _1141;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1142)) + _1142;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1143)) + _1143;
    float _1484 = fma(_1463, cbSceneParam._m0[89u].z, fma(_1462, cbSceneParam._m0[89u].y, _1461 * cbSceneParam._m0[89u].x));
    float _1487 = fma(_1463, cbSceneParam._m0[90u].z, fma(_1462, cbSceneParam._m0[90u].y, _1461 * cbSceneParam._m0[90u].x));
    float _1490 = fma(_1463, cbSceneParam._m0[91u].z, fma(_1462, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1461));
    float _1505 = _763 * 0.5;
    float _1506 = _764 * 0.5;
    float _1507 = _765 * 0.5;
    float _1508 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1511 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1514 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1548;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1521 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1128, _1132, _1135, _1138));
        float _1525 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1529 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1536 = dot(vec4(cbModelParam._m0[39u]), vec4(_1505, _1506, _1507, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1559;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1550 = dot(vec4(cbModelParam._m0[40u]), vec4(_1505, _1506, _1507, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1563 = (_1559 * cbModelParam._m0[1u].x) + (_1548 * (1.0 - cbModelParam._m0[1u].x));
    float _1573 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _590);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1573 : min(cbModelParam._m0[25u].z, _1573));
    float _1655;
    float _1657;
    float _1659;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1622 = fma(_827, cbModelParam._m0[13u].z, fma(_823, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819)) + cbModelParam._m0[13u].w;
        float _1626 = fma(_827, cbModelParam._m0[14u].z, fma(_823, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819)) + cbModelParam._m0[14u].w;
        float _1630 = fma(_827, cbModelParam._m0[15u].z, fma(_823, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819)) + cbModelParam._m0[15u].w;
        float _1633 = fma(_765, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763));
        float _1636 = fma(_765, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763));
        float _1639 = fma(_765, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763));
        float _1667;
        if (_1633 > 0.0)
        {
            _1667 = abs((1.0 - _1622) / _1633);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1622 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1667 = frontier_phi_14_12_ladder;
        }
        float _1892;
        if (_1636 > 0.0)
        {
            _1892 = abs((1.0 - _1626) / _1636);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1626 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1892 = frontier_phi_23_19_ladder;
        }
        float _2149;
        if (_1639 > 0.0)
        {
            _2149 = abs((1.0 - _1630) / _1639);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1630 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2149 = frontier_phi_35_30_ladder;
        }
        float _2151 = isnan(_1892) ? _1667 : (isnan(_1667) ? _1892 : min(_1667, _1892));
        float _2152 = isnan(_2149) ? _2151 : (isnan(_2151) ? _2149 : min(_2151, _2149));
        float _2156 = (_2152 * _1633) + _1622;
        float _2157 = (_2152 * _1636) + _1626;
        float _2158 = (_2152 * _1639) + _1630;
        float _2159 = _2152 * 9.9999997473787516355514526367188e-05;
        float _2161 = (-1.0) - _2159;
        float _2163 = _2159 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2158 > _2163) || ((_2158 < _2161) || ((_2157 > _2163) || ((_2157 < _2161) || ((_2156 < _2161) || (_2156 > _2163))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2286 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2158, cbModelParam._m0[9u].z, fma(_2157, cbModelParam._m0[9u].y, _2156 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2158, cbModelParam._m0[10u].z, fma(_2157, cbModelParam._m0[10u].y, _2156 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2158, cbModelParam._m0[11u].z, fma(_2157, cbModelParam._m0[11u].y, _2156 * cbModelParam._m0[11u].x))), _1574);
            frontier_phi_13_35_ladder = _2286.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2286.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2286.x * cbModelParam._m0[1u].y;
        }
        _1655 = frontier_phi_13_35_ladder_2;
        _1657 = frontier_phi_13_35_ladder_1;
        _1659 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1643 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_763, _764, _765), _1574);
        _1655 = _1643.x * cbModelParam._m0[1u].y;
        _1657 = _1643.y * cbModelParam._m0[1u].y;
        _1659 = _1643.z * cbModelParam._m0[1u].y;
    }
    float _1663 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _590);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1663 : min(cbModelParam._m0[25u].w, _1663));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1718 = fma(_827, cbModelParam._m0[21u].z, fma(_823, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819)) + cbModelParam._m0[21u].w;
        float _1722 = fma(_827, cbModelParam._m0[22u].z, fma(_823, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819)) + cbModelParam._m0[22u].w;
        float _1726 = fma(_827, cbModelParam._m0[23u].z, fma(_823, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819)) + cbModelParam._m0[23u].w;
        float _1729 = fma(_765, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763));
        float _1732 = fma(_765, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763));
        float _1735 = fma(_765, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763));
        float _1897;
        if (_1729 > 0.0)
        {
            _1897 = abs((1.0 - _1718) / _1729);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1718 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1897 = frontier_phi_25_21_ladder;
        }
        float _2176;
        if (_1732 > 0.0)
        {
            _2176 = abs((1.0 - _1722) / _1732);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1722 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2176 = frontier_phi_37_32_ladder;
        }
        float _2389;
        if (_1735 > 0.0)
        {
            _2389 = abs((1.0 - _1726) / _1735);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1726 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2389 = frontier_phi_46_43_ladder;
        }
        float _2391 = isnan(_2176) ? _1897 : (isnan(_1897) ? _2176 : min(_1897, _2176));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1729) + _1718;
        float _2397 = (_2392 * _1732) + _1722;
        float _2398 = (_2392 * _1735) + _1726;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2400 = (-1.0) - _2399;
        float _2402 = _2399 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2398 > _2402) || ((_2398 < _2400) || ((_2397 > _2402) || ((_2397 < _2400) || ((_2396 < _2400) || (_2396 > _2402))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2597 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2398, cbModelParam._m0[17u].z, fma(_2397, cbModelParam._m0[17u].y, _2396 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2398, cbModelParam._m0[18u].z, fma(_2397, cbModelParam._m0[18u].y, _2396 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2398, cbModelParam._m0[19u].z, fma(_2397, cbModelParam._m0[19u].y, _2396 * cbModelParam._m0[19u].x))), _1664);
            frontier_phi_22_46_ladder = _2597.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2597.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2597.x * cbModelParam._m0[1u].z;
        }
        _1754 = frontier_phi_22_46_ladder_2;
        _1756 = frontier_phi_22_46_ladder_1;
        _1758 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_763, _764, _765), _1664);
        _1754 = _1738.x * cbModelParam._m0[1u].z;
        _1756 = _1738.y * cbModelParam._m0[1u].z;
        _1758 = _1738.z * cbModelParam._m0[1u].z;
    }
    float _1771 = (((_790 * _739) + _791) * _755) * ((cbModelParam._m0[1u].w * (_1754 - _1655)) + _1655);
    float _1773 = (((_790 * _741) + _791) * _755) * ((cbModelParam._m0[1u].w * (_1756 - _1657)) + _1657);
    float _1775 = (((_790 * _742) + _791) * _755) * ((cbModelParam._m0[1u].w * (_1758 - _1659)) + _1659);
    float _1778 = fma(_1775, cbSceneParam._m0[89u].z, fma(_1773, cbSceneParam._m0[89u].y, _1771 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1775, cbSceneParam._m0[90u].z, fma(_1773, cbSceneParam._m0[90u].y, _1771 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1775, cbSceneParam._m0[91u].z, fma(_1773, cbSceneParam._m0[91u].y, _1771 * cbSceneParam._m0[91u].x));
    vec4 _1792 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_674, _675));
    float _1794 = _1792.w;
    float _1806 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1794);
    float _1807 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1794);
    float _1808 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1794);
    uvec4 _1812 = floatBitsToUint(cbInstanceData._m0[_235 + 5u]);
    uint _1814 = _1812.x * 14u;
    uint _1815 = _1814 + 13u;
    float _1822 = _755 + (-1.0);
    float _1827 = (cbLight._m0[_1815].x * _1822) + 1.0;
    float _1828 = (cbLight._m0[_1815].y * _1822) + 1.0;
    float _1829 = (cbLight._m0[_1815].z * _1822) + 1.0;
    float _1830 = (cbLight._m0[_1815].w * _1822) + 1.0;
    uint _1831 = _1814 + 5u;
    float _1837 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
    uint _1841 = _1814 + 4u;
    float _1851 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
    uint _1855 = _1814 | 1u;
    float _1866 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_587, _588, _589));
    float _1869 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_587, _588, _589));
    float _4025 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _4036 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1874 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * 0.3183098733425140380859375;
    float _1876 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * 0.3183098733425140380859375;
    float _1883 = ((cbLight._m0[_1831].x * _1837) * _1876) + (((cbLight._m0[_1841].x * _1806) * _1851) * _1874);
    float _1884 = ((_1837 * cbLight._m0[_1831].y) * _1876) + (((cbLight._m0[_1841].y * _1807) * _1851) * _1874);
    float _1885 = ((_1837 * cbLight._m0[_1831].z) * _1876) + (((cbLight._m0[_1841].z * _1808) * _1851) * _1874);
    uvec4 _1889 = floatBitsToUint(cbLight._m0[_1814 + 12u]);
    bool _1891 = _1889.x == 0u;
    float _1902;
    float _1904;
    float _1906;
    if (_1891)
    {
        _1902 = _1883;
        _1904 = _1884;
        _1906 = _1885;
    }
    else
    {
        uint _1910 = _1814 + 6u;
        float _1926 = (dot(vec3(cbLight._m0[_1814 + 2u].xyz), vec3(_587, _588, _589)) * 0.5) + 0.5;
        float _1927 = _1926 * _1926;
        float _4047 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1928 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1929 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        _1902 = (((cbLight._m0[_1910].x * 0.3183098733425140380859375) * _1928) * _1929) + _1883;
        _1904 = (((cbLight._m0[_1910].y * 0.3183098733425140380859375) * _1928) * _1929) + _1884;
        _1906 = (((cbLight._m0[_1910].z * 0.3183098733425140380859375) * _1928) * _1929) + _1885;
    }
    bool _1909 = _1889.y == 0u;
    float _1947;
    float _1949;
    float _1951;
    if (_1909)
    {
        _1947 = _1902;
        _1949 = _1904;
        _1951 = _1906;
    }
    else
    {
        uint _2120 = _1814 + 7u;
        float _2136 = (dot(vec3(cbLight._m0[_1814 + 3u].xyz), vec3(_587, _588, _589)) * 0.5) + 0.5;
        float _2137 = _2136 * _2136;
        float _4063 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2138 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2139 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _1947 = (((cbLight._m0[_2120].x * 0.3183098733425140380859375) * _2138) * _2139) + _1902;
        _1949 = (((cbLight._m0[_2120].y * 0.3183098733425140380859375) * _2138) * _2139) + _1904;
        _1951 = (((cbLight._m0[_2120].z * 0.3183098733425140380859375) * _2138) * _2139) + _1906;
    }
    uint _1954 = _1814 + 8u;
    float _1967 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1814].w)) * _590) * 0.949999988079071044921875);
    float _1968 = _1967 * _1967;
    float _1969 = cbLight._m0[_1814].x + _666;
    float _1970 = cbLight._m0[_1814].y + _667;
    float _1971 = cbLight._m0[_1814].z + _668;
    float _1975 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
    float _1976 = _1975 * _1969;
    float _1977 = _1975 * _1970;
    float _1978 = _1975 * _1971;
    float _1979 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_1814].xyz));
    float _4079 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _1983 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _1984 = dot(vec3(_587, _588, _589), vec3(_1976, _1977, _1978));
    float _4101 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _1988 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_1976, _1977, _1978));
    float _4112 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1992 = _1968 * _1968;
    float _1996 = ((_1987 * _1987) * (_1992 + (-1.0))) + 1.0;
    float _2004 = exp2(log2(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * 5.0);
    float _2005 = 0.959999978542327880859375 - _736;
    float _2007 = 0.959999978542327880859375 - _737;
    float _2008 = 0.959999978542327880859375 - _738;
    float _2015 = 1.0 - _1968;
    float _2026 = (0.5 / (((_1983 * ((_1982 * _2015) + _1968)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2015) + _1968) * _1982))) * _1982;
    float _4123 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2028 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1992 / ((_1996 * _1996) * 3.141590118408203125));
    uint _2042 = _1814 + 9u;
    float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1855].w)) * _590) * 0.949999988079071044921875);
    float _2054 = _2053 * _2053;
    float _2055 = cbLight._m0[_1855].x + _666;
    float _2056 = cbLight._m0[_1855].y + _667;
    float _2057 = cbLight._m0[_1855].z + _668;
    float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
    float _2062 = _2061 * _2055;
    float _2063 = _2061 * _2056;
    float _2064 = _2061 * _2057;
    float _2065 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_1855].xyz));
    float _4134 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2069 = dot(vec3(_587, _588, _589), vec3(_2062, _2063, _2064));
    float _4145 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _2073 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_2062, _2063, _2064));
    float _4156 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2077 = _2054 * _2054;
    float _2081 = ((_2072 * _2072) * (_2077 + (-1.0))) + 1.0;
    float _2088 = exp2(log2(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * 5.0);
    float _2095 = 1.0 - _2054;
    float _2105 = (0.5 / (((_1983 * ((_2068 * _2095) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2095) + _2054) * _2068))) * _2068;
    float _4167 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2107 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2077 / ((_2081 * _2081) * 3.141590118408203125));
    float _2117 = (((((_2088 * _2005) + _739) * cbLight._m0[_2042].x) * _2107) * _1837) + ((((cbLight._m0[_1954].x * _1806) * ((_2004 * _2005) + _739)) * _2028) * _1851);
    float _2118 = (((((_2088 * _2007) + _741) * cbLight._m0[_2042].y) * _2107) * _1837) + ((((cbLight._m0[_1954].y * _1807) * ((_2004 * _2007) + _741)) * _2028) * _1851);
    float _2119 = (((((_2088 * _2008) + _742) * cbLight._m0[_2042].z) * _2107) * _1837) + ((((cbLight._m0[_1954].z * _1808) * ((_2004 * _2008) + _742)) * _2028) * _1851);
    float _2181;
    float _2183;
    float _2185;
    if (_1891)
    {
        _2181 = _2117;
        _2183 = _2118;
        _2185 = _2119;
    }
    else
    {
        uint _2187 = _1814 + 2u;
        uint _2191 = _1814 + 10u;
        float _2205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _590) * 0.949999988079071044921875);
        float _2206 = _2205 * _2205;
        float _2207 = cbLight._m0[_2187].x + _666;
        float _2208 = cbLight._m0[_2187].y + _667;
        float _2209 = cbLight._m0[_2187].z + _668;
        float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
        float _2214 = _2213 * _2207;
        float _2215 = _2213 * _2208;
        float _2216 = _2213 * _2209;
        float _2217 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2187].xyz));
        float _4178 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2221 = dot(vec3(_587, _588, _589), vec3(_2214, _2215, _2216));
        float _4189 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2225 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2214, _2215, _2216));
        float _4200 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2229 = _2206 * _2206;
        float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
        float _2240 = exp2(log2(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * 5.0);
        float _2247 = 1.0 - _2206;
        float _2257 = (0.5 / (((_1983 * ((_2220 * _2247) + _2206)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2247) + _2206) * _2220))) * _2220;
        float _4211 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2259 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
        float _2260 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        _2181 = (((((_2240 * _2005) + _739) * cbLight._m0[_2191].x) * _2259) * _2260) + _2117;
        _2183 = (((((_2240 * _2007) + _741) * cbLight._m0[_2191].y) * _2259) * _2260) + _2118;
        _2185 = (((((_2240 * _2008) + _742) * cbLight._m0[_2191].z) * _2259) * _2260) + _2119;
    }
    float _2295;
    float _2297;
    float _2299;
    if (_1909)
    {
        _2295 = _2181;
        _2297 = _2183;
        _2299 = _2185;
    }
    else
    {
        uint _2306 = _1814 + 3u;
        uint _2310 = _1814 + 11u;
        float _2324 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _590) * 0.949999988079071044921875);
        float _2325 = _2324 * _2324;
        float _2326 = cbLight._m0[_2306].x + _666;
        float _2327 = cbLight._m0[_2306].y + _667;
        float _2328 = cbLight._m0[_2306].z + _668;
        float _2332 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
        float _2333 = _2332 * _2326;
        float _2334 = _2332 * _2327;
        float _2335 = _2332 * _2328;
        float _2336 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2306].xyz));
        float _4227 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2340 = dot(vec3(_587, _588, _589), vec3(_2333, _2334, _2335));
        float _4238 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2343 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2344 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2333, _2334, _2335));
        float _4249 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2348 = _2325 * _2325;
        float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
        float _2359 = exp2(log2(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * 5.0);
        float _2366 = 1.0 - _2325;
        float _2376 = (0.5 / (((_1983 * ((_2339 * _2366) + _2325)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2366) + _2325) * _2339))) * _2339;
        float _4260 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2378 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
        float _2379 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _2295 = (((((_2359 * _2005) + _739) * cbLight._m0[_2310].x) * _2378) * _2379) + _2181;
        _2297 = (((((_2359 * _2007) + _741) * cbLight._m0[_2310].y) * _2378) * _2379) + _2183;
        _2299 = (((((_2359 * _2008) + _742) * cbLight._m0[_2310].z) * _2378) * _2379) + _2185;
    }
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    if (_1812.y == 0u)
    {
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2454;
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2454;
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2454;
        uvec4 _2469 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2470 = _2469.x;
        uint _2481 = uint((float(_2469.y) * floor(float(uint(cbSceneParam._m0[85u].y * _675) / _2470))) + floor(float(uint(cbSceneParam._m0[85u].x * _674) / _2470)));
        float _2491 = (log2(_2457 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2492 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        uint _2495 = uint(isnan(14.0) ? _2492 : (isnan(_2492) ? 14.0 : min(_2492, 14.0)));
        uvec4 _2500 = texelFetch(g_lightClusterGridBuffer, int(((_2495 << 2u) + (_2481 << 6u)) >> 2u));
        uint _2501 = _2500.x;
        uint _2502 = _2469.z;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        if (((((1u << ((_2502 >> 4u) & 15u)) + 4294967295u) & _2501) == 0u) || ((_2502 & 240u) == 0u))
        {
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
        }
        else
        {
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            uint _2752 = 0u;
            uint _2761;
            bool _2762;
            for (;;)
            {
                _2761 = texelFetch(g_lightClassification, int((((_2495 << 5u) + (_2481 << 9u)) + (_2752 << 2u)) >> 2u)).x;
                _2762 = _2761 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2762)
                {
                    frontier_phi_61_pred = _2746;
                    frontier_phi_61_pred_1 = _2751;
                    frontier_phi_61_pred_2 = _2750;
                    frontier_phi_61_pred_3 = _2749;
                    frontier_phi_61_pred_4 = _2748;
                    frontier_phi_61_pred_5 = _2747;
                }
                else
                {
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    uint _2876;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2748;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2751;
                    _2876 = _2761;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    for (;;)
                    {
                        uint _2880 = uint(findLSB(_2876)) + (_2752 << 5u);
                        uint _2877 = (_2876 + 4294967295u) & _2876;
                        uint _2882 = _2880 * 48u;
                        vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 3u)).x));
                        uint _2902 = (_2880 * 48u) + 4u;
                        vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2921 = (_2880 * 48u) + 8u;
                        vec3 _2932 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x));
                        float _2936 = _2896.x - _2455;
                        float _2937 = _2896.y - _2456;
                        float _2938 = _2896.z - _2457;
                        float _2939 = dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938));
                        float _2942 = inversesqrt(_2939);
                        float _2943 = _2942 * _2936;
                        float _2944 = _2942 * _2937;
                        float _2945 = _2942 * _2938;
                        float _2946 = dot(vec3(_696, _699, _702), vec3(_2943, _2944, _2945));
                        float _2951 = 1.0 - (_2939 * _2896.w);
                        float _4286 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                        float _2953 = sqrt(_2939) * _2915.w;
                        float _2956 = 1.39999997615814208984375 / (_2953 + 1.39999997615814208984375);
                        float _2957 = _2956 * _2956;
                        float _2960 = ((1.0 - _2957) * _2946) + _2957;
                        float _2963 = _2953 * _2953;
                        float _2967 = ((isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))) * _2952) / ((_2963 * 0.699999988079071044921875) + 1.0);
                        float _2971 = (-0.0) - _2455;
                        float _2972 = (-0.0) - _2456;
                        float _2973 = (-0.0) - _2457;
                        float _2977 = inversesqrt(dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973)));
                        float _2978 = _2977 * _2971;
                        float _2979 = _2977 * _2972;
                        float _2980 = _2977 * _2973;
                        float _2988 = exp2(log2(1.0 / ((_2963 * 3.5) + 5.0)) * 0.25);
                        float _2989 = 1.0 - _771;
                        float _2996 = sqrt(1.0 - ((1.0 - (_2989 * _2989)) * (1.0 - (_2988 * _2988))));
                        float _2997 = _2996 * _2996;
                        float _2998 = _2997 * _2997;
                        float _2999 = _2978 + _2943;
                        float _3000 = _2979 + _2944;
                        float _3001 = _2980 + _2945;
                        float _3005 = inversesqrt(dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001)));
                        float _3009 = dot(vec3(_696, _699, _702), vec3(_2978, _2979, _2980));
                        float _4302 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3012 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _3013 = dot(vec3(_696, _699, _702), vec3(_3005 * _2999, _3005 * _3000, _3005 * _3001));
                        float _4313 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3016 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                        float _3020 = ((_3016 * _3016) * (_2998 + (-1.0))) + 1.0;
                        float _3021 = _2956 * _2997;
                        float _3022 = _3021 * _3021;
                        float _3025 = ((1.0 - _3022) * _2946) + _3022;
                        float _4324 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3026 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _3027 = 1.0 - _2997;
                        float _3037 = (0.5 / (((_3026 * ((_3012 * _3027) + _2997)) + 9.9999999392252902907785028219223e-09) + (((_3026 * _3027) + _2997) * _3012))) * _3026;
                        float _4335 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3048 = (((_2998 * 3.1415927410125732421875) * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) / ((_3020 * _3020) * ((_2963 * 2.1991131305694580078125) + 3.141590118408203125))) * _2952;
                        _2805 = (_2967 * _2915.x) + _2873;
                        _2806 = (_2967 * _2915.y) + _2874;
                        _2807 = (_2967 * _2915.z) + _2875;
                        _2802 = (_3048 * _2932.x) + _2870;
                        _2803 = (_3048 * _2932.y) + _2871;
                        _2804 = (_3048 * _2932.z) + _2872;
                        if (_2877 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2804;
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2807;
                            _2876 = _2877;
                        }
                    }
                    frontier_phi_61_pred = _2802;
                    frontier_phi_61_pred_1 = _2807;
                    frontier_phi_61_pred_2 = _2806;
                    frontier_phi_61_pred_3 = _2805;
                    frontier_phi_61_pred_4 = _2804;
                    frontier_phi_61_pred_5 = _2803;
                }
                _2603 = frontier_phi_61_pred;
                _2613 = frontier_phi_61_pred_1;
                _2611 = frontier_phi_61_pred_2;
                _2609 = frontier_phi_61_pred_3;
                _2607 = frontier_phi_61_pred_4;
                _2605 = frontier_phi_61_pred_5;
                uint _2753 = _2752 + 1u;
                if (_2753 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2746 = _2603;
                    _2747 = _2605;
                    _2748 = _2607;
                    _2749 = _2609;
                    _2750 = _2611;
                    _2751 = _2613;
                    _2752 = _2753;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
        }
        uvec4 _2616 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2617 = _2616.z;
        uint _2619 = (_2617 >> 8u) & 15u;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        if (((4294967295u << _2619) & _2501) == 0u)
        {
            _2714 = _2602;
            _2716 = _2604;
            _2718 = _2606;
            _2720 = _2608;
            _2722 = _2610;
            _2724 = _2612;
        }
        else
        {
            float _2739 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
            float _2740 = _2739 * _2455;
            float _2741 = _2739 * _2456;
            float _2742 = _2739 * _2457;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2619 < ((_2617 >> 12u) & 15u))
            {
                float _2715;
                float _2717;
                float _2719;
                float _2721;
                float _2723;
                float _2725;
                float _2853 = _2602;
                float _2854 = _2604;
                float _2855 = _2606;
                float _2856 = _2608;
                float _2857 = _2610;
                float _2858 = _2612;
                uint _2859 = _2619;
                uint _2868;
                bool _2869;
                for (;;)
                {
                    _2868 = texelFetch(g_lightClassification, int((((_2495 << 5u) + (_2481 << 9u)) + (_2859 << 2u)) >> 2u)).x;
                    _2869 = _2868 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2869)
                    {
                        frontier_phi_67_pred = _2856;
                        frontier_phi_67_pred_1 = _2857;
                        frontier_phi_67_pred_2 = _2858;
                        frontier_phi_67_pred_3 = _2855;
                        frontier_phi_67_pred_4 = _2854;
                        frontier_phi_67_pred_5 = _2853;
                    }
                    else
                    {
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3066 = _2853;
                        float _3067 = _2854;
                        float _3068 = _2855;
                        float _3069 = _2856;
                        float _3070 = _2857;
                        float _3071 = _2858;
                        uint _3072 = _2868;
                        uint _3073;
                        vec4 _3098;
                        float _3099;
                        vec4 _3114;
                        vec3 _3126;
                        vec4 _3142;
                        vec4 _3158;
                        float _3204;
                        bool _3205;
                        for (;;)
                        {
                            uint _3083 = ((_2859 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3072));
                            _3073 = (_3072 + 4294967295u) & _3072;
                            uint _3085 = _3083 * 40u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            _3099 = _3098.w;
                            uint _3101 = (_3083 * 40u) + 4u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3083 * 40u) + 8u;
                            _3126 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x));
                            uint _3129 = (_3083 * 40u) + 16u;
                            _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            uint _3145 = (_3083 * 40u) + 20u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3160 = (_3083 * 40u) + 24u;
                            vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3179 = (_3083 * 40u) + 28u;
                            vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            _3204 = fma(_2457, _3192.z, fma(_2456, _3192.y, _3192.x * _2455)) + _3192.w;
                            _3205 = !((fma(_2457, _3173.z, fma(_2456, _3173.y, _3173.x * _2455)) + _3173.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3205)
                            {
                                float _3232 = _3098.x - _2455;
                                float _3233 = _3098.y - _2456;
                                float _3234 = _3098.z - _2457;
                                float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                                float _3238 = inversesqrt(_3235);
                                float _3239 = _3238 * _3232;
                                float _3240 = _3238 * _3233;
                                float _3241 = _3238 * _3234;
                                float _3245 = 1.0 - (_3235 / (_3099 * _3099));
                                float _4346 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3250 = sqrt(_3235) * _3114.w;
                                float _3252 = 1.39999997615814208984375 / (_3250 + 1.39999997615814208984375);
                                float _3253 = _3252 * _3252;
                                float _3256 = ((1.0 - _3253) * dot(vec3(_3239, _3240, _3241), vec3(_696, _699, _702))) + _3253;
                                float _3259 = _3250 * _3250;
                                float _3263 = (fma(_2457, _3142.z, fma(_2456, _3142.y, _3142.x * _2455)) + _3142.w) / _3204;
                                float _3264 = (fma(_2457, _3158.z, fma(_2456, _3158.y, _3158.x * _2455)) + _3158.w) / _3204;
                                float _3268 = 1.0 - dot(vec2(_3263, _3264), vec2(_3263, _3264));
                                float _4362 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3270 = _3269 * (((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3246) / ((_3259 * 0.699999988079071044921875) + 1.0));
                                float _3282 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                                float _3283 = 1.0 - _771;
                                float _3290 = sqrt(1.0 - ((1.0 - (_3283 * _3283)) * (1.0 - (_3282 * _3282))));
                                float _3291 = _3290 * _3290;
                                float _3292 = _3291 * _3291;
                                float _3293 = _3239 - _2740;
                                float _3294 = _3240 - _2741;
                                float _3295 = _3241 - _2742;
                                float _3299 = inversesqrt(dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295)));
                                float _3303 = dot(vec3(_696, _699, _702), vec3((-0.0) - _2740, (-0.0) - _2741, (-0.0) - _2742));
                                float _4373 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3306 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3307 = dot(vec3(_696, _699, _702), vec3(_3299 * _3293, _3299 * _3294, _3299 * _3295));
                                float _4384 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3310 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3314 = ((_3310 * _3310) * (_3292 + (-1.0))) + 1.0;
                                float _3315 = _3252 * _3291;
                                float _3316 = _3315 * _3315;
                                float _3322 = ((1.0 - _3316) * dot(vec3(_696, _699, _702), vec3(_3239, _3240, _3241))) + _3316;
                                float _4395 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3324 = 1.0 - _3291;
                                float _3334 = (0.5 / (((_3323 * ((_3306 * _3324) + _3291)) + 9.9999999392252902907785028219223e-09) + (((_3323 * _3324) + _3291) * _3306))) * _3323;
                                float _4406 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3344 = (_3269 * _3246) * (((_3292 * 3.1415927410125732421875) * (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) / ((_3314 * _3314) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3344 * _3126.x;
                                frontier_phi_73_pred_1 = _3344 * _3126.y;
                                frontier_phi_73_pred_2 = _3270 * _3114.z;
                                frontier_phi_73_pred_3 = _3270 * _3114.y;
                                frontier_phi_73_pred_4 = _3270 * _3114.x;
                                frontier_phi_73_pred_5 = _3344 * _3126.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3348 = frontier_phi_73_pred;
                            _3349 = frontier_phi_73_pred_1;
                            _3353 = frontier_phi_73_pred_2;
                            _3352 = frontier_phi_73_pred_3;
                            _3351 = frontier_phi_73_pred_4;
                            _3350 = frontier_phi_73_pred_5;
                            _3056 = _3351 + _3069;
                            _3057 = _3352 + _3070;
                            _3058 = _3353 + _3071;
                            _3053 = _3348 + _3066;
                            _3054 = _3349 + _3067;
                            _3055 = _3350 + _3068;
                            if (_3073 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3073;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3056;
                        frontier_phi_67_pred_1 = _3057;
                        frontier_phi_67_pred_2 = _3058;
                        frontier_phi_67_pred_3 = _3055;
                        frontier_phi_67_pred_4 = _3054;
                        frontier_phi_67_pred_5 = _3053;
                    }
                    _2721 = frontier_phi_67_pred;
                    _2723 = frontier_phi_67_pred_1;
                    _2725 = frontier_phi_67_pred_2;
                    _2719 = frontier_phi_67_pred_3;
                    _2717 = frontier_phi_67_pred_4;
                    _2715 = frontier_phi_67_pred_5;
                    uint _2860 = _2859 + 1u;
                    if (_2860 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2853 = _2715;
                        _2854 = _2717;
                        _2855 = _2719;
                        _2856 = _2721;
                        _2857 = _2723;
                        _2858 = _2725;
                        _2859 = _2860;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2723;
                frontier_phi_55_56_ladder_1 = _2725;
                frontier_phi_55_56_ladder_2 = _2721;
                frontier_phi_55_56_ladder_3 = _2719;
                frontier_phi_55_56_ladder_4 = _2717;
                frontier_phi_55_56_ladder_5 = _2715;
            }
            else
            {
                frontier_phi_55_56_ladder = _2610;
                frontier_phi_55_56_ladder_1 = _2612;
                frontier_phi_55_56_ladder_2 = _2608;
                frontier_phi_55_56_ladder_3 = _2606;
                frontier_phi_55_56_ladder_4 = _2604;
                frontier_phi_55_56_ladder_5 = _2602;
            }
            _2714 = frontier_phi_55_56_ladder_5;
            _2716 = frontier_phi_55_56_ladder_4;
            _2718 = frontier_phi_55_56_ladder_3;
            _2720 = frontier_phi_55_56_ladder_2;
            _2722 = frontier_phi_55_56_ladder;
            _2724 = frontier_phi_55_56_ladder_1;
        }
        float _2729 = isnan(1.0) ? _755 : (isnan(_755) ? 1.0 : min(_755, 1.0));
        _2514 = (_2729 * _2720) + _1947;
        _2516 = (_2729 * _2722) + _1949;
        _2518 = (_2729 * _2724) + _1951;
        _2520 = ((_2714 * _739) * _2729) + _2295;
        _2522 = ((_2716 * _741) * _2729) + _2297;
        _2524 = ((_2718 * _742) * _2729) + _2299;
    }
    else
    {
        _2514 = _1947;
        _2516 = _1949;
        _2518 = _1951;
        _2520 = _2295;
        _2522 = _2297;
        _2524 = _2299;
    }
    float _4422 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4433 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4444 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    uint _2544 = _235 + 6u;
    float _2552 = _674 / cbSceneParam._m0[86u].x;
    float _2553 = _675 / cbSceneParam._m0[86u].y;
    vec4 _2567 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2552, _2553, (log2((isnan(cbSceneParam._m0[77u].w) ? _609 : (isnan(_609) ? cbSceneParam._m0[77u].w : min(_609, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2569 = _2567.x;
    float _2570 = _2567.y;
    float _2571 = _2567.z;
    float _2572 = _2567.w;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    if (_609 > cbSceneParam._m0[78u].w)
    {
        float _2627 = isnan(_609) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _609 : min(cbSceneParam._m0[80u].w, _609));
        float _2628 = _2627 / _609;
        float _2639 = _2628 * _659;
        float _2640 = _660 * _2628;
        float _2641 = (-0.0) - _2640;
        float _2642 = _2628 * _661;
        float _2644 = (cbSceneParam._m0[77u].w * _2641) / _2627;
        float _2645 = _2644 + cbSceneParam._m0[79u].w;
        float _2646 = cbSceneParam._m0[79u].w - _2640;
        float _2652 = sqrt(((_2639 * _2639) + (_2640 * _2640)) + (_2642 * _2642));
        float _2655 = (1.0 - (cbSceneParam._m0[77u].w / _2627)) * _2652;
        float _2660 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2662 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2815;
        if (abs((_2641 - _2644) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2815 = ((((_2645 > 0.0) ? exp2(_2660 * _2645) : (2.0 - exp2(_2662 * _2645))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2655;
        }
        else
        {
            float _2775 = 1.0 / cbSceneParam._m0[80u].x;
            float _2776 = isnan(_2646) ? _2645 : (isnan(_2645) ? _2646 : max(_2645, _2646));
            float _2777 = isnan(_2646) ? _2645 : (isnan(_2645) ? _2646 : min(_2645, _2646));
            float _2786 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : min(_2776, 0.0));
            float _2787 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : min(_2777, 0.0));
            _2815 = ((abs(_2652 / _2641) * cbSceneParam._m0[80u].y) * ((((_2786 - _2787) * 2.0) - ((exp2(_2660 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0)))) - exp2(_2660 * (isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0))))) * _2775)) - ((exp2(_2662 * _2786) - exp2(_2662 * _2787)) * _2775))) + (_2655 * cbSceneParam._m0[80u].z);
        }
        vec4 _2817 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2552, _2553, 1.0), 0.0);
        float _2826 = exp2((_2815 * (-1.44269502162933349609375)) * (1.0 - _2817.w));
        float _2827 = log2(_2826);
        float _2843 = log2(_2572);
        _2664 = (exp2(_2843 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].x)) * _2817.x) / cbSceneParam._m0[78u].x)) + _2569;
        _2666 = (exp2(_2843 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].y)) * _2817.y) / cbSceneParam._m0[78u].y)) + _2570;
        _2668 = (exp2(_2843 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].z)) * _2817.z) / cbSceneParam._m0[78u].z)) + _2571;
        _2670 = _2826 * _2572;
    }
    else
    {
        _2664 = _2569;
        _2666 = _2570;
        _2668 = _2571;
        _2670 = _2572;
    }
    float _2682 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2683 = _2682 == 3.0;
    float _2684 = log2(_2670);
    float _2691 = exp2(_2684 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2514 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _755))) + ((_2520 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1563)) * cbPerFrame._m0[3u].x));
    float _2692 = exp2(_2684 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2516 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _755))) + ((_2522 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1563)) * cbPerFrame._m0[3u].x));
    float _2693 = exp2(_2684 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2518 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _755))) + ((_2524 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1563)) * cbPerFrame._m0[3u].x));
    float _2702 = (_2682 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2702 * (_2683 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2664)));
    SV_Target.y = _2702 * (_2683 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2666)));
    SV_Target.z = _2702 * (_2683 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2668)));
    SV_Target.w = cbInstanceData._m0[_2544].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2544].w;
}


