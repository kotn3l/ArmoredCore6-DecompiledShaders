#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1263;
float _3668;
float _3669;
float _3670;
float _3671;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _369 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_357 - _369) * cbMtdParam._m0[24u].y) + _369) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3680 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _394 = (_387 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _395 = (_387 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _396 = (_387 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _445 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _459 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_435 - _445) * cbMtdParam._m0[24u].y) + _445) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3691 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _467 = (_460 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394;
    float _468 = (_460 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395;
    float _469 = (_460 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396;
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _504 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _521 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _523 = _521.x;
    float _524 = _521.y;
    float _525 = _521.z;
    float _532 = ((_504.x - _523) * _387) + _523;
    float _533 = ((_504.y - _524) * _387) + _524;
    float _534 = ((_504.z - _525) * _387) + _525;
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _559 = ((_546.z - _534) * _460) + _534;
    float _562 = ((((_546.x - _532) * _460) + _532) * 2.0) + (-1.0);
    float _563 = ((((_546.y - _533) * _460) + _533) * 2.0) + (-1.0);
    float _564 = dot(vec2(_562, _563), vec2(_562, _563));
    float _3702 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _569 = sqrt(1.0 - (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))));
    float _574 = _562 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_481.x * 2.0) + (-1.0)));
    float _575 = _563 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_481.y * 2.0) + (-1.0)));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _602 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _616 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _618 = _616.x;
    float _636 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _618) * _387) + _618;
    float _654 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _268) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _269) + cbTextureTilingScale._m0[21u].w)).x - _636) * _460) + _636;
    float _658 = ((_602.x - _654) * cbMtdParam._m0[19u].z) + _654;
    float _663 = (((_481.z - _559) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _559;
    float _668 = cbMtdParam._m0[22u].x + _588.w;
    float _671 = fma(_569, _235 * NORMAL.x, fma(_575, _242 * TANGENT.x, (_228 * _220) * _574));
    float _674 = fma(_569, _235 * NORMAL.y, fma(_575, _242 * TANGENT.y, (_228 * _221) * _574));
    float _677 = fma(_569, _235 * NORMAL.z, fma(_575, _242 * TANGENT.z, (_228 * _222) * _574));
    float _681 = inversesqrt(dot(vec3(_671, _674, _677), vec3(_671, _674, _677)));
    float _682 = _681 * _671;
    float _683 = _681 * _674;
    float _684 = _681 * _677;
    float _3713 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _685 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3735 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3746 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3757 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _3768 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _690 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _704 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _755 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _745);
    float _756 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _745);
    float _757 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _745);
    float _761 = inversesqrt(dot(vec3(_755, _756, _757), vec3(_755, _756, _757)));
    float _762 = _755 * _761;
    float _763 = _756 * _761;
    float _764 = _757 * _761;
    vec4 _769 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _771 = _769.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _943 = sqrt(((_755 * _755) + (_756 * _756)) + (_757 * _757));
        float _949 = (cbMatDynParam._m0[5u].x * _943) + cbMatDynParam._m0[5u].y;
        float _3779 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _954 = (cbMatDynParam._m0[5u].z * _943) + cbMatDynParam._m0[5u].w;
        float _3790 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) - _950)) + _950) < ((_771 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _782 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _783 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _801 = fma(_684, cbSceneParam._m0[5u].z, fma(_683, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _682));
    float _804 = fma(_684, cbSceneParam._m0[6u].z, fma(_683, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _682));
    float _807 = fma(_684, cbSceneParam._m0[7u].z, fma(_683, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _682));
    uint _820 = _248 + 9u;
    uint _821 = _820 + uint(cbMatDynParam._m0[0u].w);
    float _827 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * cbInstanceData._m0[_821].x;
    float _828 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * cbInstanceData._m0[_821].y;
    float _829 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * cbInstanceData._m0[_821].z;
    float _3801 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _833 = 1.0 - _690;
    float _834 = _830 * _833;
    float _835 = _831 * _833;
    float _836 = _832 * _833;
    float _841 = (_830 + (-0.039999999105930328369140625)) * _690;
    float _842 = (_831 + (-0.039999999105930328369140625)) * _690;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _690;
    float _844 = _841 + 0.039999999105930328369140625;
    float _846 = _842 + 0.039999999105930328369140625;
    float _847 = _843 + 0.039999999105930328369140625;
    vec4 _856 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _782, cbSceneParam._m0[86u].y * _783));
    float _860 = ((isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * TEXCOORD_5.w) * _856.x;
    float _861 = dot(vec3(_682, _683, _684), vec3(_762, _763, _764));
    float _864 = _861 * 2.0;
    float _868 = (_864 * _682) - _762;
    float _869 = (_864 * _683) - _763;
    float _870 = (_864 * _684) - _764;
    float _874 = abs(dot(vec3(_762, _763, _764), vec3(_682, _683, _684)));
    float _3834 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _876 = sqrt(_685);
    float _889 = exp2((_876 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_876 * 3.0));
    float _895 = (1.0 - _889) * ((_876 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _896 = _889 * _876;
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1262;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _987 = fma(_932, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924));
        float _991 = fma(_932, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924));
        float _995 = fma(_932, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924));
        float _1020 = _924 + _682;
        float _1021 = _928 + _683;
        float _1022 = _932 + _684;
        float _1032 = fma(_1022, cbModelParam._m0[26u].z, fma(_1021, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020)) - _987;
        float _1033 = fma(_1022, cbModelParam._m0[27u].z, fma(_1021, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020)) - _991;
        float _1034 = fma(_1022, cbModelParam._m0[28u].z, fma(_1021, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020)) - _995;
        float _1038 = inversesqrt(dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034)));
        float _1051 = ((_1038 * _1032) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_987 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1038 * _1033) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_991 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1038 * _1034) / cbModelParam._m0[34u].z) + ((((((_995 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        float _1090 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1056.x + (-0.5));
        float _1092 = _1090 * (_1056.y + (-0.5));
        float _1093 = _1090 * (_1056.z + (-0.5));
        float _1100 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1063.x + (-0.5));
        float _1102 = _1100 * (_1063.y + (-0.5));
        float _1103 = _1100 * (_1063.z + (-0.5));
        float _1110 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1070.x + (-0.5));
        float _1112 = _1110 * (_1070.y + (-0.5));
        float _1113 = _1110 * (_1070.z + (-0.5));
        float _1120 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1077.x + (-0.5));
        float _1122 = _1120 * (_1077.y + (-0.5));
        float _1123 = _1120 * (_1077.z + (-0.5));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = _1091 * 0.5;
        float _1128 = _1101 * 0.5;
        float _1129 = _1111 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1144 = (dot(vec3(_682, _683, _684), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1154 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3882 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1156 + 1.0))) + _1161) * _1124;
        float _1171 = _1092 * 0.5;
        float _1172 = _1102 * 0.5;
        float _1173 = _1112 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_682, _683, _684), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3915 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1198 + 1.0))) + _1203) * _1125;
        float _1213 = _1093 * 0.5;
        float _1214 = _1103 * 0.5;
        float _1215 = _1113 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_682, _683, _684), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3948 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1240 + 1.0))) + _1245) * _1126;
        _1262 = _1093;
        _1264 = _1092;
        _1265 = _1091;
        _1266 = _1103;
        _1267 = _1102;
        _1268 = _1101;
        _1269 = _1113;
        _1270 = _1112;
        _1271 = _1111;
        _1272 = _1126;
        _1273 = _1125;
        _1274 = _1124;
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
    }
    else
    {
        _1262 = _1263;
        _1264 = _1263;
        _1265 = _1263;
        _1266 = _1263;
        _1267 = _1263;
        _1268 = _1263;
        _1269 = _1263;
        _1270 = _1263;
        _1271 = _1263;
        _1272 = _1263;
        _1273 = _1263;
        _1274 = _1263;
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
    }
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1304 = fma(_932, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924));
        float _1308 = fma(_932, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924));
        float _1312 = fma(_932, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924));
        float _1335 = _924 + _682;
        float _1336 = _928 + _683;
        float _1337 = _932 + _684;
        float _1347 = fma(_1337, cbModelParam._m0[30u].z, fma(_1336, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1335)) - _1304;
        float _1348 = fma(_1337, cbModelParam._m0[31u].z, fma(_1336, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1335)) - _1308;
        float _1349 = fma(_1337, cbModelParam._m0[32u].z, fma(_1336, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1335)) - _1312;
        float _1353 = inversesqrt(dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349)));
        float _1366 = ((_1353 * _1347) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1304 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1353 * _1348) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1308 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1353 * _1349) / cbModelParam._m0[35u].z) + ((((((_1312 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        float _1403 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1370.x + (-0.5));
        float _1405 = _1403 * (_1370.y + (-0.5));
        float _1406 = _1403 * (_1370.z + (-0.5));
        float _1413 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1377.x + (-0.5));
        float _1415 = _1413 * (_1377.y + (-0.5));
        float _1416 = _1413 * (_1377.z + (-0.5));
        float _1423 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1384.x + (-0.5));
        float _1425 = _1423 * (_1384.y + (-0.5));
        float _1426 = _1423 * (_1384.z + (-0.5));
        float _1433 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1391.x + (-0.5));
        float _1435 = _1433 * (_1391.y + (-0.5));
        float _1436 = _1433 * (_1391.z + (-0.5));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = _1404 * 0.5;
        float _1441 = _1414 * 0.5;
        float _1442 = _1424 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_682, _683, _684), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4011 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1467 + 1.0))) + _1472) * _1437;
        float _1482 = _1405 * 0.5;
        float _1483 = _1415 * 0.5;
        float _1484 = _1425 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_682, _683, _684), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4044 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1509 + 1.0))) + _1514) * _1438;
        float _1524 = _1406 * 0.5;
        float _1525 = _1416 * 0.5;
        float _1526 = _1426 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_682, _683, _684), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4077 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1551 + 1.0))) + _1556) * _1439;
        _1573 = _1406;
        _1574 = _1405;
        _1575 = _1404;
        _1576 = _1416;
        _1577 = _1415;
        _1578 = _1414;
        _1579 = _1426;
        _1580 = _1425;
        _1581 = _1424;
        _1582 = _1439;
        _1583 = _1438;
        _1584 = _1437;
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
    }
    else
    {
        _1573 = _1263;
        _1574 = _1263;
        _1575 = _1263;
        _1576 = _1263;
        _1577 = _1263;
        _1578 = _1263;
        _1579 = _1263;
        _1580 = _1263;
        _1581 = _1263;
        _1582 = _1263;
        _1583 = _1263;
        _1584 = _1263;
        _1585 = 0.0;
        _1586 = 0.0;
        _1587 = 0.0;
    }
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1275)) + _1275;
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1276)) + _1276;
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1277)) + _1277;
    float _1620 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1598, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1598, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1598, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1597));
    float _1641 = _868 * 0.5;
    float _1642 = _869 * 0.5;
    float _1643 = _870 * 0.5;
    float _1644 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1647 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1650 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1684;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1657 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1262, _1266, _1269, _1272));
        float _1661 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1665 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1672 = dot(vec4(cbModelParam._m0[39u]), vec4(_1641, _1642, _1643, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1672) ? 0.0 : (isnan(0.0) ? _1672 : max(0.0, _1672))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1695;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1686 = dot(vec4(cbModelParam._m0[40u]), vec4(_1641, _1642, _1643, 1.0));
        _1695 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1695 = 1.0;
    }
    float _1699 = (_1695 * cbModelParam._m0[1u].x) + (_1684 * (1.0 - cbModelParam._m0[1u].x));
    float _1709 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _685);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1709 : min(cbModelParam._m0[25u].z, _1709));
    float _1792;
    float _1794;
    float _1796;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1759 = fma(_932, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _924)) + cbModelParam._m0[13u].w;
        float _1763 = fma(_932, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _924)) + cbModelParam._m0[14u].w;
        float _1767 = fma(_932, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _924)) + cbModelParam._m0[15u].w;
        float _1770 = fma(_870, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868));
        float _1773 = fma(_870, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868));
        float _1776 = fma(_870, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868));
        float _1804;
        if (_1770 > 0.0)
        {
            _1804 = abs((1.0 - _1759) / _1770);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1759 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1804 = frontier_phi_17_15_ladder;
        }
        float _2028;
        if (_1773 > 0.0)
        {
            _2028 = abs((1.0 - _1763) / _1773);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1763 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2028 = frontier_phi_26_22_ladder;
        }
        float _2285;
        if (_1776 > 0.0)
        {
            _2285 = abs((1.0 - _1767) / _1776);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1767 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2285 = frontier_phi_38_33_ladder;
        }
        float _2287 = isnan(_2028) ? _1804 : (isnan(_1804) ? _2028 : min(_1804, _2028));
        float _2288 = isnan(_2285) ? _2287 : (isnan(_2287) ? _2285 : min(_2287, _2285));
        float _2292 = (_2288 * _1770) + _1759;
        float _2293 = (_2288 * _1773) + _1763;
        float _2294 = (_2288 * _1776) + _1767;
        float _2295 = _2288 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2295;
        float _2299 = _2295 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 > _2299) || ((_2293 < _2297) || ((_2292 < _2297) || (_2292 > _2299))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2422 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2294, cbModelParam._m0[9u].z, fma(_2293, cbModelParam._m0[9u].y, _2292 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2294, cbModelParam._m0[10u].z, fma(_2293, cbModelParam._m0[10u].y, _2292 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2294, cbModelParam._m0[11u].z, fma(_2293, cbModelParam._m0[11u].y, _2292 * cbModelParam._m0[11u].x))), _1710);
            frontier_phi_16_38_ladder = _2422.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2422.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2422.x * cbModelParam._m0[1u].y;
        }
        _1792 = frontier_phi_16_38_ladder_2;
        _1794 = frontier_phi_16_38_ladder_1;
        _1796 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_868, _869, _870), _1710);
        _1792 = _1780.x * cbModelParam._m0[1u].y;
        _1794 = _1780.y * cbModelParam._m0[1u].y;
        _1796 = _1780.z * cbModelParam._m0[1u].y;
    }
    float _1800 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _685);
    float _1801 = isnan(_1800) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1800 : min(cbModelParam._m0[25u].w, _1800));
    float _1891;
    float _1893;
    float _1895;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1855 = fma(_932, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _924)) + cbModelParam._m0[21u].w;
        float _1859 = fma(_932, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _924)) + cbModelParam._m0[22u].w;
        float _1863 = fma(_932, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _924)) + cbModelParam._m0[23u].w;
        float _1866 = fma(_870, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868));
        float _1869 = fma(_870, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868));
        float _1872 = fma(_870, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868));
        float _2033;
        if (_1866 > 0.0)
        {
            _2033 = abs((1.0 - _1855) / _1866);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1855 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2033 = frontier_phi_28_24_ladder;
        }
        float _2312;
        if (_1869 > 0.0)
        {
            _2312 = abs((1.0 - _1859) / _1869);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1859 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2312 = frontier_phi_40_35_ladder;
        }
        float _2525;
        if (_1872 > 0.0)
        {
            _2525 = abs((1.0 - _1863) / _1872);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1863 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2525 = frontier_phi_49_46_ladder;
        }
        float _2527 = isnan(_2312) ? _2033 : (isnan(_2033) ? _2312 : min(_2033, _2312));
        float _2528 = isnan(_2525) ? _2527 : (isnan(_2527) ? _2525 : min(_2527, _2525));
        float _2532 = (_2528 * _1866) + _1855;
        float _2533 = (_2528 * _1869) + _1859;
        float _2534 = (_2528 * _1872) + _1863;
        float _2535 = _2528 * 9.9999997473787516355514526367188e-05;
        float _2536 = (-1.0) - _2535;
        float _2538 = _2535 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2534 > _2538) || ((_2534 < _2536) || ((_2533 > _2538) || ((_2533 < _2536) || ((_2532 < _2536) || (_2532 > _2538))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2534, cbModelParam._m0[17u].z, fma(_2533, cbModelParam._m0[17u].y, _2532 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2534, cbModelParam._m0[18u].z, fma(_2533, cbModelParam._m0[18u].y, _2532 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2534, cbModelParam._m0[19u].z, fma(_2533, cbModelParam._m0[19u].y, _2532 * cbModelParam._m0[19u].x))), _1801);
            frontier_phi_25_49_ladder = _2733.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2733.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2733.x * cbModelParam._m0[1u].z;
        }
        _1891 = frontier_phi_25_49_ladder_2;
        _1893 = frontier_phi_25_49_ladder_1;
        _1895 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_868, _869, _870), _1801);
        _1891 = _1875.x * cbModelParam._m0[1u].z;
        _1893 = _1875.y * cbModelParam._m0[1u].z;
        _1895 = _1875.z * cbModelParam._m0[1u].z;
    }
    float _1908 = (((_895 * _844) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1891 - _1792)) + _1792);
    float _1910 = (((_895 * _846) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1893 - _1794)) + _1794);
    float _1912 = (((_895 * _847) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1895 - _1796)) + _1796);
    float _1915 = fma(_1912, cbSceneParam._m0[89u].z, fma(_1910, cbSceneParam._m0[89u].y, _1908 * cbSceneParam._m0[89u].x));
    float _1918 = fma(_1912, cbSceneParam._m0[90u].z, fma(_1910, cbSceneParam._m0[90u].y, _1908 * cbSceneParam._m0[90u].x));
    float _1921 = fma(_1912, cbSceneParam._m0[91u].z, fma(_1910, cbSceneParam._m0[91u].y, _1908 * cbSceneParam._m0[91u].x));
    vec4 _1929 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_782, _783));
    float _1931 = _1929.w;
    float _1943 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1931);
    float _1944 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1931);
    float _1945 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1931);
    uvec4 _1949 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _1951 = _1949.x * 14u;
    uint _1952 = _1951 + 13u;
    float _1959 = _860 + (-1.0);
    float _1964 = (cbLight._m0[_1952].x * _1959) + 1.0;
    float _1965 = (cbLight._m0[_1952].y * _1959) + 1.0;
    float _1966 = (cbLight._m0[_1952].z * _1959) + 1.0;
    float _1967 = (cbLight._m0[_1952].w * _1959) + 1.0;
    uint _1968 = _1951 + 5u;
    float _1974 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
    uint _1978 = _1951 + 4u;
    float _1987 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
    uint _1991 = _1951 | 1u;
    float _2002 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_682, _683, _684));
    float _2005 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_682, _683, _684));
    float _4213 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _4224 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2010 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * 0.3183098733425140380859375;
    float _2012 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _2019 = ((cbLight._m0[_1968].x * _1974) * _2012) + (((cbLight._m0[_1978].x * _1943) * _1987) * _2010);
    float _2020 = ((_1974 * cbLight._m0[_1968].y) * _2012) + (((cbLight._m0[_1978].y * _1944) * _1987) * _2010);
    float _2021 = ((_1974 * cbLight._m0[_1968].z) * _2012) + (((cbLight._m0[_1978].z * _1945) * _1987) * _2010);
    uvec4 _2025 = floatBitsToUint(cbLight._m0[_1951 + 12u]);
    bool _2027 = _2025.x == 0u;
    float _2038;
    float _2040;
    float _2042;
    if (_2027)
    {
        _2038 = _2019;
        _2040 = _2020;
        _2042 = _2021;
    }
    else
    {
        uint _2046 = _1951 + 6u;
        float _2062 = (dot(vec3(cbLight._m0[_1951 + 2u].xyz), vec3(_682, _683, _684)) * 0.5) + 0.5;
        float _2063 = _2062 * _2062;
        float _4235 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2064 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2065 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
        _2038 = (((cbLight._m0[_2046].x * 0.3183098733425140380859375) * _2064) * _2065) + _2019;
        _2040 = (((cbLight._m0[_2046].y * 0.3183098733425140380859375) * _2064) * _2065) + _2020;
        _2042 = (((cbLight._m0[_2046].z * 0.3183098733425140380859375) * _2064) * _2065) + _2021;
    }
    bool _2045 = _2025.y == 0u;
    float _2083;
    float _2085;
    float _2087;
    if (_2045)
    {
        _2083 = _2038;
        _2085 = _2040;
        _2087 = _2042;
    }
    else
    {
        uint _2256 = _1951 + 7u;
        float _2272 = (dot(vec3(cbLight._m0[_1951 + 3u].xyz), vec3(_682, _683, _684)) * 0.5) + 0.5;
        float _2273 = _2272 * _2272;
        float _4251 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2274 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2275 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
        _2083 = (((cbLight._m0[_2256].x * 0.3183098733425140380859375) * _2274) * _2275) + _2038;
        _2085 = (((cbLight._m0[_2256].y * 0.3183098733425140380859375) * _2274) * _2275) + _2040;
        _2087 = (((cbLight._m0[_2256].z * 0.3183098733425140380859375) * _2274) * _2275) + _2042;
    }
    uint _2090 = _1951 + 8u;
    float _2103 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1951].w)) * _685) * 0.949999988079071044921875);
    float _2104 = _2103 * _2103;
    float _2105 = cbLight._m0[_1951].x + _762;
    float _2106 = cbLight._m0[_1951].y + _763;
    float _2107 = cbLight._m0[_1951].z + _764;
    float _2111 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
    float _2112 = _2111 * _2105;
    float _2113 = _2111 * _2106;
    float _2114 = _2111 * _2107;
    float _2115 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_1951].xyz));
    float _4267 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _4278 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2119 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2120 = dot(vec3(_682, _683, _684), vec3(_2112, _2113, _2114));
    float _4289 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2124 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_2112, _2113, _2114));
    float _4300 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2128 = _2104 * _2104;
    float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
    float _2140 = exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0);
    float _2141 = 0.959999978542327880859375 - _841;
    float _2143 = 0.959999978542327880859375 - _842;
    float _2144 = 0.959999978542327880859375 - _843;
    float _2151 = 1.0 - _2104;
    float _2162 = (0.5 / (((_2119 * ((_2118 * _2151) + _2104)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2151) + _2104) * _2118))) * _2118;
    float _4311 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2164 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
    uint _2178 = _1951 + 9u;
    float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _685) * 0.949999988079071044921875);
    float _2190 = _2189 * _2189;
    float _2191 = cbLight._m0[_1991].x + _762;
    float _2192 = cbLight._m0[_1991].y + _763;
    float _2193 = cbLight._m0[_1991].z + _764;
    float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
    float _2198 = _2197 * _2191;
    float _2199 = _2197 * _2192;
    float _2200 = _2197 * _2193;
    float _2201 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_1991].xyz));
    float _4322 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2205 = dot(vec3(_682, _683, _684), vec3(_2198, _2199, _2200));
    float _4333 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2209 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2198, _2199, _2200));
    float _4344 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2213 = _2190 * _2190;
    float _2217 = ((_2208 * _2208) * (_2213 + (-1.0))) + 1.0;
    float _2224 = exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0);
    float _2231 = 1.0 - _2190;
    float _2241 = (0.5 / (((_2119 * ((_2204 * _2231) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2231) + _2190) * _2204))) * _2204;
    float _4355 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2243 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2213 / ((_2217 * _2217) * 3.141590118408203125));
    float _2253 = (((((_2224 * _2141) + _844) * cbLight._m0[_2178].x) * _2243) * _1974) + ((((cbLight._m0[_2090].x * _1943) * ((_2140 * _2141) + _844)) * _2164) * _1987);
    float _2254 = (((((_2224 * _2143) + _846) * cbLight._m0[_2178].y) * _2243) * _1974) + ((((cbLight._m0[_2090].y * _1944) * ((_2140 * _2143) + _846)) * _2164) * _1987);
    float _2255 = (((((_2224 * _2144) + _847) * cbLight._m0[_2178].z) * _2243) * _1974) + ((((cbLight._m0[_2090].z * _1945) * ((_2140 * _2144) + _847)) * _2164) * _1987);
    float _2317;
    float _2319;
    float _2321;
    if (_2027)
    {
        _2317 = _2253;
        _2319 = _2254;
        _2321 = _2255;
    }
    else
    {
        uint _2323 = _1951 + 2u;
        uint _2327 = _1951 + 10u;
        float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _685) * 0.949999988079071044921875);
        float _2342 = _2341 * _2341;
        float _2343 = cbLight._m0[_2323].x + _762;
        float _2344 = cbLight._m0[_2323].y + _763;
        float _2345 = cbLight._m0[_2323].z + _764;
        float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
        float _2350 = _2349 * _2343;
        float _2351 = _2349 * _2344;
        float _2352 = _2349 * _2345;
        float _2353 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2323].xyz));
        float _4366 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2357 = dot(vec3(_682, _683, _684), vec3(_2350, _2351, _2352));
        float _4377 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2361 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2350, _2351, _2352));
        float _4388 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2365 = _2342 * _2342;
        float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
        float _2376 = exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0);
        float _2383 = 1.0 - _2342;
        float _2393 = (0.5 / (((_2119 * ((_2356 * _2383) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2383) + _2342) * _2356))) * _2356;
        float _4399 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2395 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
        float _2396 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
        _2317 = (((((_2376 * _2141) + _844) * cbLight._m0[_2327].x) * _2395) * _2396) + _2253;
        _2319 = (((((_2376 * _2143) + _846) * cbLight._m0[_2327].y) * _2395) * _2396) + _2254;
        _2321 = (((((_2376 * _2144) + _847) * cbLight._m0[_2327].z) * _2395) * _2396) + _2255;
    }
    float _2431;
    float _2433;
    float _2435;
    if (_2045)
    {
        _2431 = _2317;
        _2433 = _2319;
        _2435 = _2321;
    }
    else
    {
        uint _2442 = _1951 + 3u;
        uint _2446 = _1951 + 11u;
        float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _685) * 0.949999988079071044921875);
        float _2461 = _2460 * _2460;
        float _2462 = cbLight._m0[_2442].x + _762;
        float _2463 = cbLight._m0[_2442].y + _763;
        float _2464 = cbLight._m0[_2442].z + _764;
        float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
        float _2469 = _2468 * _2462;
        float _2470 = _2468 * _2463;
        float _2471 = _2468 * _2464;
        float _2472 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2442].xyz));
        float _4415 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2476 = dot(vec3(_682, _683, _684), vec3(_2469, _2470, _2471));
        float _4426 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2480 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2469, _2470, _2471));
        float _4437 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2484 = _2461 * _2461;
        float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
        float _2495 = exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0);
        float _2502 = 1.0 - _2461;
        float _2512 = (0.5 / (((_2119 * ((_2475 * _2502) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2502) + _2461) * _2475))) * _2475;
        float _4448 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2514 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
        float _2515 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
        _2431 = (((((_2495 * _2141) + _844) * cbLight._m0[_2446].x) * _2514) * _2515) + _2317;
        _2433 = (((((_2495 * _2143) + _846) * cbLight._m0[_2446].y) * _2514) * _2515) + _2319;
        _2435 = (((((_2495 * _2144) + _847) * cbLight._m0[_2446].z) * _2514) * _2515) + _2321;
    }
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    if (_1949.y == 0u)
    {
        float _2590 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2591 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2590;
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2590;
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2590;
        uvec4 _2605 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2606 = _2605.x;
        uint _2617 = uint((float(_2605.y) * floor(float(uint(cbSceneParam._m0[85u].y * _783) / _2606))) + floor(float(uint(cbSceneParam._m0[85u].x * _782) / _2606)));
        float _2627 = (log2(_2593 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2628 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        uint _2631 = uint(isnan(14.0) ? _2628 : (isnan(_2628) ? 14.0 : min(_2628, 14.0)));
        uvec4 _2636 = texelFetch(g_lightClusterGridBuffer, int(((_2631 << 2u) + (_2617 << 6u)) >> 2u));
        uint _2637 = _2636.x;
        uint _2638 = _2605.z;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        if (((((1u << ((_2638 >> 4u) & 15u)) + 4294967295u) & _2637) == 0u) || ((_2638 & 240u) == 0u))
        {
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
        }
        else
        {
            float _2739;
            float _2741;
            float _2743;
            float _2745;
            float _2747;
            float _2749;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            uint _2897 = 0u;
            uint _2906;
            bool _2907;
            for (;;)
            {
                _2906 = texelFetch(g_lightClassification, int((((_2631 << 5u) + (_2617 << 9u)) + (_2897 << 2u)) >> 2u)).x;
                _2907 = _2906 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2907)
                {
                    frontier_phi_66_pred = _2891;
                    frontier_phi_66_pred_1 = _2896;
                    frontier_phi_66_pred_2 = _2895;
                    frontier_phi_66_pred_3 = _2894;
                    frontier_phi_66_pred_4 = _2893;
                    frontier_phi_66_pred_5 = _2892;
                }
                else
                {
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    uint _3042;
                    _3036 = _2891;
                    _3037 = _2892;
                    _3038 = _2893;
                    _3039 = _2894;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2906;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    for (;;)
                    {
                        uint _3046 = uint(findLSB(_3042)) + (_2897 << 5u);
                        uint _3043 = (_3042 + 4294967295u) & _3042;
                        uint _3048 = _3046 * 48u;
                        vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 3u)).x));
                        uint _3068 = (_3046 * 48u) + 4u;
                        vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 3u)).x));
                        uint _3087 = (_3046 * 48u) + 8u;
                        vec3 _3098 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x));
                        float _3102 = _3062.x - _2591;
                        float _3103 = _3062.y - _2592;
                        float _3104 = _3062.z - _2593;
                        float _3105 = dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104));
                        float _3108 = inversesqrt(_3105);
                        float _3109 = _3108 * _3102;
                        float _3110 = _3108 * _3103;
                        float _3111 = _3108 * _3104;
                        float _3112 = dot(vec3(_801, _804, _807), vec3(_3109, _3110, _3111));
                        float _3117 = 1.0 - (_3105 * _3062.w);
                        float _4474 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3118 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3119 = sqrt(_3105) * _3081.w;
                        float _3122 = 1.39999997615814208984375 / (_3119 + 1.39999997615814208984375);
                        float _3123 = _3122 * _3122;
                        float _3126 = ((1.0 - _3123) * _3112) + _3123;
                        float _3129 = _3119 * _3119;
                        float _3133 = ((isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))) * _3118) / ((_3129 * 0.699999988079071044921875) + 1.0);
                        float _3137 = (-0.0) - _2591;
                        float _3138 = (-0.0) - _2592;
                        float _3139 = (-0.0) - _2593;
                        float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                        float _3144 = _3143 * _3137;
                        float _3145 = _3143 * _3138;
                        float _3146 = _3143 * _3139;
                        float _3154 = exp2(log2(1.0 / ((_3129 * 3.5) + 5.0)) * 0.25);
                        float _3155 = 1.0 - _876;
                        float _3162 = sqrt(1.0 - ((1.0 - (_3155 * _3155)) * (1.0 - (_3154 * _3154))));
                        float _3163 = _3162 * _3162;
                        float _3164 = _3163 * _3163;
                        float _3165 = _3144 + _3109;
                        float _3166 = _3145 + _3110;
                        float _3167 = _3146 + _3111;
                        float _3171 = inversesqrt(dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167)));
                        float _3175 = dot(vec3(_801, _804, _807), vec3(_3144, _3145, _3146));
                        float _4490 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3178 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3179 = dot(vec3(_801, _804, _807), vec3(_3171 * _3165, _3171 * _3166, _3171 * _3167));
                        float _4501 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3182 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3186 = ((_3182 * _3182) * (_3164 + (-1.0))) + 1.0;
                        float _3187 = _3122 * _3163;
                        float _3188 = _3187 * _3187;
                        float _3191 = ((1.0 - _3188) * _3112) + _3188;
                        float _4512 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3192 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3193 = 1.0 - _3163;
                        float _3203 = (0.5 / (((_3192 * ((_3178 * _3193) + _3163)) + 9.9999999392252902907785028219223e-09) + (((_3192 * _3193) + _3163) * _3178))) * _3192;
                        float _4523 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3214 = (((_3164 * 3.1415927410125732421875) * (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) / ((_3186 * _3186) * ((_3129 * 2.1991131305694580078125) + 3.141590118408203125))) * _3118;
                        _2966 = (_3133 * _3081.x) + _3039;
                        _2967 = (_3133 * _3081.y) + _3040;
                        _2968 = (_3133 * _3081.z) + _3041;
                        _2963 = (_3214 * _3098.x) + _3036;
                        _2964 = (_3214 * _3098.y) + _3037;
                        _2965 = (_3214 * _3098.z) + _3038;
                        if (_3043 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3036 = _2963;
                            _3037 = _2964;
                            _3038 = _2965;
                            _3039 = _2966;
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _3043;
                        }
                    }
                    frontier_phi_66_pred = _2963;
                    frontier_phi_66_pred_1 = _2968;
                    frontier_phi_66_pred_2 = _2967;
                    frontier_phi_66_pred_3 = _2966;
                    frontier_phi_66_pred_4 = _2965;
                    frontier_phi_66_pred_5 = _2964;
                }
                _2739 = frontier_phi_66_pred;
                _2749 = frontier_phi_66_pred_1;
                _2747 = frontier_phi_66_pred_2;
                _2745 = frontier_phi_66_pred_3;
                _2743 = frontier_phi_66_pred_4;
                _2741 = frontier_phi_66_pred_5;
                uint _2898 = _2897 + 1u;
                if (_2898 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2891 = _2739;
                    _2892 = _2741;
                    _2893 = _2743;
                    _2894 = _2745;
                    _2895 = _2747;
                    _2896 = _2749;
                    _2897 = _2898;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
        }
        uvec4 _2752 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2753 = _2752.z;
        uint _2755 = (_2753 >> 8u) & 15u;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        if (((4294967295u << _2755) & _2637) == 0u)
        {
            _2859 = _2738;
            _2861 = _2740;
            _2863 = _2742;
            _2865 = _2744;
            _2867 = _2746;
            _2869 = _2748;
        }
        else
        {
            float _2884 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
            float _2885 = _2884 * _2591;
            float _2886 = _2884 * _2592;
            float _2887 = _2884 * _2593;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2755 < ((_2753 >> 12u) & 15u))
            {
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _2868;
                float _2870;
                float _3019 = _2738;
                float _3020 = _2740;
                float _3021 = _2742;
                float _3022 = _2744;
                float _3023 = _2746;
                float _3024 = _2748;
                uint _3025 = _2755;
                uint _3034;
                bool _3035;
                for (;;)
                {
                    _3034 = texelFetch(g_lightClassification, int((((_2631 << 5u) + (_2617 << 9u)) + (_3025 << 2u)) >> 2u)).x;
                    _3035 = _3034 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3035)
                    {
                        frontier_phi_77_pred = _3024;
                        frontier_phi_77_pred_1 = _3023;
                        frontier_phi_77_pred_2 = _3022;
                        frontier_phi_77_pred_3 = _3021;
                        frontier_phi_77_pred_4 = _3020;
                        frontier_phi_77_pred_5 = _3019;
                    }
                    else
                    {
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3241 = _3019;
                        float _3242 = _3020;
                        float _3243 = _3021;
                        float _3244 = _3022;
                        float _3245 = _3023;
                        float _3246 = _3024;
                        uint _3247 = _3034;
                        uint _3248;
                        vec4 _3273;
                        float _3274;
                        vec4 _3289;
                        vec3 _3301;
                        vec4 _3316;
                        vec4 _3331;
                        float _3377;
                        bool _3378;
                        for (;;)
                        {
                            uint _3258 = ((_3025 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3247));
                            _3248 = (_3247 + 4294967295u) & _3247;
                            uint _3260 = _3258 * 40u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            _3274 = _3273.w;
                            uint _3276 = (_3258 * 40u) + 4u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3291 = (_3258 * 40u) + 8u;
                            _3301 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x));
                            uint _3303 = (_3258 * 40u) + 16u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3318 = (_3258 * 40u) + 20u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3333 = (_3258 * 40u) + 24u;
                            vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3352 = (_3258 * 40u) + 28u;
                            vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            _3377 = fma(_2593, _3365.z, fma(_2592, _3365.y, _3365.x * _2591)) + _3365.w;
                            _3378 = !((fma(_2593, _3346.z, fma(_2592, _3346.y, _3346.x * _2591)) + _3346.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3378)
                            {
                                float _3405 = _3273.x - _2591;
                                float _3406 = _3273.y - _2592;
                                float _3407 = _3273.z - _2593;
                                float _3408 = dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407));
                                float _3411 = inversesqrt(_3408);
                                float _3412 = _3411 * _3405;
                                float _3413 = _3411 * _3406;
                                float _3414 = _3411 * _3407;
                                float _3418 = 1.0 - (_3408 / (_3274 * _3274));
                                float _4534 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3419 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3423 = sqrt(_3408) * _3289.w;
                                float _3425 = 1.39999997615814208984375 / (_3423 + 1.39999997615814208984375);
                                float _3426 = _3425 * _3425;
                                float _3429 = ((1.0 - _3426) * dot(vec3(_3412, _3413, _3414), vec3(_801, _804, _807))) + _3426;
                                float _3432 = _3423 * _3423;
                                float _3436 = (fma(_2593, _3316.z, fma(_2592, _3316.y, _3316.x * _2591)) + _3316.w) / _3377;
                                float _3437 = (fma(_2593, _3331.z, fma(_2592, _3331.y, _3331.x * _2591)) + _3331.w) / _3377;
                                float _3441 = 1.0 - dot(vec2(_3436, _3437), vec2(_3436, _3437));
                                float _4550 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3443 = _3442 * (((isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0))) * _3419) / ((_3432 * 0.699999988079071044921875) + 1.0));
                                float _3455 = exp2(log2(1.0 / ((_3432 * 3.5) + 5.0)) * 0.25);
                                float _3456 = 1.0 - _876;
                                float _3463 = sqrt(1.0 - ((1.0 - (_3456 * _3456)) * (1.0 - (_3455 * _3455))));
                                float _3464 = _3463 * _3463;
                                float _3465 = _3464 * _3464;
                                float _3466 = _3412 - _2885;
                                float _3467 = _3413 - _2886;
                                float _3468 = _3414 - _2887;
                                float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                                float _3476 = dot(vec3(_801, _804, _807), vec3((-0.0) - _2885, (-0.0) - _2886, (-0.0) - _2887));
                                float _4561 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3479 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3480 = dot(vec3(_801, _804, _807), vec3(_3472 * _3466, _3472 * _3467, _3472 * _3468));
                                float _4572 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3483 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3487 = ((_3483 * _3483) * (_3465 + (-1.0))) + 1.0;
                                float _3488 = _3425 * _3464;
                                float _3489 = _3488 * _3488;
                                float _3495 = ((1.0 - _3489) * dot(vec3(_801, _804, _807), vec3(_3412, _3413, _3414))) + _3489;
                                float _4583 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3497 = 1.0 - _3464;
                                float _3507 = (0.5 / (((_3496 * ((_3479 * _3497) + _3464)) + 9.9999999392252902907785028219223e-09) + (((_3496 * _3497) + _3464) * _3479))) * _3496;
                                float _4594 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3517 = (_3442 * _3419) * (((_3465 * 3.1415927410125732421875) * (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) / ((_3487 * _3487) * ((_3432 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3443 * _3289.y;
                                frontier_phi_83_pred_1 = _3443 * _3289.x;
                                frontier_phi_83_pred_2 = _3517 * _3301.z;
                                frontier_phi_83_pred_3 = _3517 * _3301.y;
                                frontier_phi_83_pred_4 = _3517 * _3301.x;
                                frontier_phi_83_pred_5 = _3443 * _3289.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3525 = frontier_phi_83_pred;
                            _3524 = frontier_phi_83_pred_1;
                            _3523 = frontier_phi_83_pred_2;
                            _3522 = frontier_phi_83_pred_3;
                            _3521 = frontier_phi_83_pred_4;
                            _3526 = frontier_phi_83_pred_5;
                            _3231 = _3524 + _3244;
                            _3232 = _3525 + _3245;
                            _3233 = _3526 + _3246;
                            _3228 = _3521 + _3241;
                            _3229 = _3522 + _3242;
                            _3230 = _3523 + _3243;
                            if (_3248 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3248;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3233;
                        frontier_phi_77_pred_1 = _3232;
                        frontier_phi_77_pred_2 = _3231;
                        frontier_phi_77_pred_3 = _3230;
                        frontier_phi_77_pred_4 = _3229;
                        frontier_phi_77_pred_5 = _3228;
                    }
                    _2870 = frontier_phi_77_pred;
                    _2868 = frontier_phi_77_pred_1;
                    _2866 = frontier_phi_77_pred_2;
                    _2864 = frontier_phi_77_pred_3;
                    _2862 = frontier_phi_77_pred_4;
                    _2860 = frontier_phi_77_pred_5;
                    uint _3026 = _3025 + 1u;
                    if (_3026 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3019 = _2860;
                        _3020 = _2862;
                        _3021 = _2864;
                        _3022 = _2866;
                        _3023 = _2868;
                        _3024 = _2870;
                        _3025 = _3026;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2864;
                frontier_phi_58_59_ladder_1 = _2870;
                frontier_phi_58_59_ladder_2 = _2868;
                frontier_phi_58_59_ladder_3 = _2866;
                frontier_phi_58_59_ladder_4 = _2862;
                frontier_phi_58_59_ladder_5 = _2860;
            }
            else
            {
                frontier_phi_58_59_ladder = _2742;
                frontier_phi_58_59_ladder_1 = _2748;
                frontier_phi_58_59_ladder_2 = _2746;
                frontier_phi_58_59_ladder_3 = _2744;
                frontier_phi_58_59_ladder_4 = _2740;
                frontier_phi_58_59_ladder_5 = _2738;
            }
            _2859 = frontier_phi_58_59_ladder_5;
            _2861 = frontier_phi_58_59_ladder_4;
            _2863 = frontier_phi_58_59_ladder;
            _2865 = frontier_phi_58_59_ladder_3;
            _2867 = frontier_phi_58_59_ladder_2;
            _2869 = frontier_phi_58_59_ladder_1;
        }
        float _2874 = isnan(1.0) ? _860 : (isnan(_860) ? 1.0 : min(_860, 1.0));
        _2650 = (_2874 * _2865) + _2083;
        _2652 = (_2874 * _2867) + _2085;
        _2654 = (_2874 * _2869) + _2087;
        _2656 = ((_2859 * _844) * _2874) + _2431;
        _2658 = ((_2861 * _846) * _2874) + _2433;
        _2660 = ((_2863 * _847) * _2874) + _2435;
    }
    else
    {
        _2650 = _2083;
        _2652 = _2085;
        _2654 = _2087;
        _2656 = _2431;
        _2658 = _2433;
        _2660 = _2435;
    }
    float _4610 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4621 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4632 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _2677 = ((isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2650 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _860))) + ((_2656 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    float _2678 = ((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2652 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _860))) + ((_2658 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    float _2679 = ((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2654 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _860))) + ((_2660 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    uint _2680 = _248 + 6u;
    float _2688 = _782 / cbSceneParam._m0[86u].x;
    float _2689 = _783 / cbSceneParam._m0[86u].y;
    vec4 _2703 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2688, _2689, (log2((isnan(cbSceneParam._m0[77u].w) ? _704 : (isnan(_704) ? cbSceneParam._m0[77u].w : min(_704, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2705 = _2703.x;
    float _2706 = _2703.y;
    float _2707 = _2703.z;
    float _2708 = _2703.w;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    if (_704 > cbSceneParam._m0[78u].w)
    {
        float _2763 = isnan(_704) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _704 : min(cbSceneParam._m0[80u].w, _704));
        float _2764 = _2763 / _704;
        float _2775 = _2764 * _755;
        float _2776 = _756 * _2764;
        float _2777 = (-0.0) - _2776;
        float _2779 = _2764 * _757;
        float _2781 = (cbSceneParam._m0[77u].w * _2777) / _2763;
        float _2782 = _2781 + cbSceneParam._m0[79u].w;
        float _2783 = cbSceneParam._m0[79u].w - _2776;
        float _2789 = sqrt(((_2775 * _2775) + (_2776 * _2776)) + (_2779 * _2779));
        float _2792 = (1.0 - (cbSceneParam._m0[77u].w / _2763)) * _2789;
        float _2797 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2799 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2976;
        if (abs((_2777 - _2781) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2976 = ((((_2782 > 0.0) ? exp2(_2797 * _2782) : (2.0 - exp2(_2799 * _2782))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2792;
        }
        else
        {
            float _2920 = 1.0 / cbSceneParam._m0[80u].x;
            float _2921 = isnan(_2783) ? _2782 : (isnan(_2782) ? _2783 : max(_2782, _2783));
            float _2922 = isnan(_2783) ? _2782 : (isnan(_2782) ? _2783 : min(_2782, _2783));
            float _2931 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : min(_2921, 0.0));
            float _2932 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : min(_2922, 0.0));
            _2976 = ((abs(_2789 / _2777) * cbSceneParam._m0[80u].y) * ((((_2931 - _2932) * 2.0) - ((exp2(_2797 * (isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0)))) - exp2(_2797 * (isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0))))) * _2920)) - ((exp2(_2799 * _2931) - exp2(_2799 * _2932)) * _2920))) + (_2792 * cbSceneParam._m0[80u].z);
        }
        vec4 _2978 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2688, _2689, 1.0), 0.0);
        float _2987 = exp2((_2976 * (-1.44269502162933349609375)) * (1.0 - _2978.w));
        float _2988 = log2(_2987);
        float _3004 = log2(_2708);
        _2801 = (exp2(_3004 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].x)) * _2978.x) / cbSceneParam._m0[78u].x)) + _2705;
        _2803 = (exp2(_3004 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].y)) * _2978.y) / cbSceneParam._m0[78u].y)) + _2706;
        _2805 = (exp2(_3004 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].z)) * _2978.z) / cbSceneParam._m0[78u].z)) + _2707;
        _2807 = _2987 * _2708;
    }
    else
    {
        _2801 = _2705;
        _2803 = _2706;
        _2805 = _2707;
        _2807 = _2708;
    }
    bool _3014;
    vec4 _2817;
    vec4 _2839;
    float _2841;
    float _2845;
    float _2846;
    float _2847;
    float _2848;
    bool _2858;
    for (;;)
    {
        _2817 = cbMatDynParam._m0[0u];
        float _2819 = roundEven(_2817.y);
        bool _2820 = _2819 == 3.0;
        float _2821 = log2(_2807);
        float _2828 = exp2(_2821 * cbSceneParam._m0[78u].x) * _2677;
        float _2829 = exp2(_2821 * cbSceneParam._m0[78u].y) * _2678;
        float _2830 = exp2(_2821 * cbSceneParam._m0[78u].z) * _2679;
        float _2837 = _771 + (-0.5);
        _2839 = cbMtdParam._m0[1u];
        _2841 = _2839.y * _2837;
        float _2844 = (_2819 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2845 = _2844 * (_2820 ? _2828 : (_2828 + (cbSceneParam._m0[72u].w * _2801)));
        _2846 = _2844 * (_2820 ? _2829 : (_2829 + (cbSceneParam._m0[72u].w * _2803)));
        _2847 = _2844 * (_2820 ? _2830 : (_2830 + (cbSceneParam._m0[72u].w * _2805)));
        _2848 = _2837 * 0.999000012874603271484375;
        _2858 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2858)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _2848) < 0.5)
            {
                _3014 = true;
                break;
            }
        }
        uint _2955 = _820 + uint(_2817.w);
        if ((cbInstanceData._m0[_2955].w < 1.0) && ((cbInstanceData._m0[_2955].w + _2848) < 0.5))
        {
            _3014 = true;
            break;
        }
        if ((_2841 + 1.0) < _2839.x)
        {
            _3014 = true;
            break;
        }
        _3014 = false;
        break;
    }
    float _3219;
    if (_3014)
    {
        discard_state = true;
        _3219 = 0.0;
    }
    else
    {
        _3219 = cbInstanceData._m0[_2680].w;
    }
    SV_Target.x = _2845;
    SV_Target.y = _2846;
    SV_Target.z = _2847;
    SV_Target.w = _3219;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2680].w;
    discard_exit();
}


