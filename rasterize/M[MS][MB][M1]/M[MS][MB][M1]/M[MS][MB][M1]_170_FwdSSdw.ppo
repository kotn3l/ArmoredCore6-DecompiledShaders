#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1234;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _353 = _351.x;
    float _365 = dot(vec4(_353, _351.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _382 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_353 - _365) * cbMtdParam._m0[24u].y) + _365) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3585 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _390 = (_383 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _391 = (_383 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _392 = (_383 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _429 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _441 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _455 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_431 - _441) * cbMtdParam._m0[24u].y) + _441) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3596 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _463 = (_456 * ((_409.x * cbMtdParam._m0[13u].x) - _390)) + _390;
    float _464 = (_456 * ((_409.y * cbMtdParam._m0[13u].y) - _391)) + _391;
    float _465 = (_456 * ((_409.z * cbMtdParam._m0[13u].z) - _392)) + _392;
    vec4 _477 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _500 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _519 = _517.x;
    float _520 = _517.y;
    float _521 = _517.z;
    float _528 = ((_500.x - _519) * _383) + _519;
    float _529 = ((_500.y - _520) * _383) + _520;
    float _530 = ((_500.z - _521) * _383) + _521;
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _555 = ((_542.z - _530) * _456) + _530;
    float _558 = ((((_542.x - _528) * _456) + _528) * 2.0) + (-1.0);
    float _559 = ((((_542.y - _529) * _456) + _529) * 2.0) + (-1.0);
    float _560 = dot(vec2(_558, _559), vec2(_558, _559));
    float _3607 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _565 = sqrt(1.0 - (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))));
    vec4 _585 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _597 = (_558 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_477.x * 2.0) + (-1.0)))) + (((_585.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _598 = (_559 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_477.y * 2.0) + (-1.0)))) + (((_585.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _610 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _624 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _626 = _624.x;
    float _644 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _626) * _383) + _626;
    float _662 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _264) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _265) + cbTextureTilingScale._m0[21u].w)).x - _644) * _456) + _644;
    float _666 = ((_610.x - _662) * cbMtdParam._m0[19u].z) + _662;
    float _671 = (((_477.z - _555) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _555;
    float _675 = ((_585.z - _671) * cbMtdParam._m0[19u].w) + _671;
    float _680 = cbMtdParam._m0[22u].x + _585.w;
    float _683 = fma(_565, _231 * NORMAL.x, fma(_598, _238 * TANGENT.x, (_224 * _216) * _597));
    float _686 = fma(_565, _231 * NORMAL.y, fma(_598, _238 * TANGENT.y, (_224 * _217) * _597));
    float _689 = fma(_565, _231 * NORMAL.z, fma(_598, _238 * TANGENT.z, (_224 * _218) * _597));
    float _693 = inversesqrt(dot(vec3(_683, _686, _689), vec3(_683, _686, _689)));
    float _694 = _693 * _683;
    float _695 = _693 * _686;
    float _696 = _693 * _689;
    float _3618 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _697 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _3629 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _3640 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3651 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3662 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3673 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _702 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _716 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _767 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _757);
    float _768 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _757);
    float _769 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _757);
    float _773 = inversesqrt(dot(vec3(_767, _768, _769), vec3(_767, _768, _769)));
    float _774 = _767 * _773;
    float _775 = _768 * _773;
    float _776 = _769 * _773;
    float _782 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _783 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _801 = fma(_696, cbSceneParam._m0[5u].z, fma(_695, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _694));
    float _804 = fma(_696, cbSceneParam._m0[6u].z, fma(_695, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _694));
    float _807 = fma(_696, cbSceneParam._m0[7u].z, fma(_695, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _694));
    uint _821 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _827 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_821].x;
    float _828 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_821].y;
    float _829 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_821].z;
    float _3684 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _833 = 1.0 - _702;
    float _834 = _830 * _833;
    float _835 = _831 * _833;
    float _836 = _832 * _833;
    float _841 = (_830 + (-0.039999999105930328369140625)) * _702;
    float _842 = (_831 + (-0.039999999105930328369140625)) * _702;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _702;
    float _844 = _841 + 0.039999999105930328369140625;
    float _846 = _842 + 0.039999999105930328369140625;
    float _847 = _843 + 0.039999999105930328369140625;
    vec4 _856 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _782, cbSceneParam._m0[86u].y * _783));
    float _860 = ((isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * TEXCOORD_5.w) * _856.x;
    float _861 = dot(vec3(_694, _695, _696), vec3(_774, _775, _776));
    float _864 = _861 * 2.0;
    float _868 = (_864 * _694) - _774;
    float _869 = (_864 * _695) - _775;
    float _870 = (_864 * _696) - _776;
    float _874 = abs(dot(vec3(_774, _775, _776), vec3(_694, _695, _696)));
    float _3717 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _876 = sqrt(_697);
    float _889 = exp2((_876 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_876 * 3.0));
    float _895 = (1.0 - _889) * ((_876 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _896 = _889 * _876;
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1233;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _958 = fma(_932, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924));
        float _962 = fma(_932, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924));
        float _966 = fma(_932, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924));
        float _991 = _924 + _694;
        float _992 = _928 + _695;
        float _993 = _932 + _696;
        float _1003 = fma(_993, cbModelParam._m0[26u].z, fma(_992, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _991)) - _958;
        float _1004 = fma(_993, cbModelParam._m0[27u].z, fma(_992, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _991)) - _962;
        float _1005 = fma(_993, cbModelParam._m0[28u].z, fma(_992, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _991)) - _966;
        float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
        float _1022 = ((_1009 * _1003) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_958 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1009 * _1004) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_962 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1009 * _1005) / cbModelParam._m0[34u].z) + ((((((_966 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        float _1061 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1027.x + (-0.5));
        float _1063 = _1061 * (_1027.y + (-0.5));
        float _1064 = _1061 * (_1027.z + (-0.5));
        float _1071 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1034.x + (-0.5));
        float _1073 = _1071 * (_1034.y + (-0.5));
        float _1074 = _1071 * (_1034.z + (-0.5));
        float _1081 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1041.x + (-0.5));
        float _1083 = _1081 * (_1041.y + (-0.5));
        float _1084 = _1081 * (_1041.z + (-0.5));
        float _1091 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1048.x + (-0.5));
        float _1093 = _1091 * (_1048.y + (-0.5));
        float _1094 = _1091 * (_1048.z + (-0.5));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = _1062 * 0.5;
        float _1099 = _1072 * 0.5;
        float _1100 = _1082 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1115 = (dot(vec3(_694, _695, _696), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1125 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3765 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1127 + 1.0))) + _1132) * _1095;
        float _1142 = _1063 * 0.5;
        float _1143 = _1073 * 0.5;
        float _1144 = _1083 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_694, _695, _696), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3798 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1169 + 1.0))) + _1174) * _1096;
        float _1184 = _1064 * 0.5;
        float _1185 = _1074 * 0.5;
        float _1186 = _1084 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_694, _695, _696), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3831 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1211 + 1.0))) + _1216) * _1097;
        _1233 = _1064;
        _1235 = _1063;
        _1236 = _1062;
        _1237 = _1074;
        _1238 = _1073;
        _1239 = _1072;
        _1240 = _1084;
        _1241 = _1083;
        _1242 = _1082;
        _1243 = _1097;
        _1244 = _1096;
        _1245 = _1095;
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
    }
    else
    {
        _1233 = _1234;
        _1235 = _1234;
        _1236 = _1234;
        _1237 = _1234;
        _1238 = _1234;
        _1239 = _1234;
        _1240 = _1234;
        _1241 = _1234;
        _1242 = _1234;
        _1243 = _1234;
        _1244 = _1234;
        _1245 = _1234;
        _1246 = 0.0;
        _1247 = 0.0;
        _1248 = 0.0;
    }
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1272 = fma(_932, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924));
        float _1276 = fma(_932, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924));
        float _1280 = fma(_932, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924));
        float _1303 = _924 + _694;
        float _1304 = _928 + _695;
        float _1305 = _932 + _696;
        float _1315 = fma(_1305, cbModelParam._m0[30u].z, fma(_1304, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1303)) - _1272;
        float _1316 = fma(_1305, cbModelParam._m0[31u].z, fma(_1304, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1303)) - _1276;
        float _1317 = fma(_1305, cbModelParam._m0[32u].z, fma(_1304, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1303)) - _1280;
        float _1321 = inversesqrt(dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317)));
        float _1334 = ((_1321 * _1315) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1272 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1321 * _1316) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1276 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1336 = ((_1321 * _1317) / cbModelParam._m0[35u].z) + ((((((_1280 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        float _1371 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1338.x + (-0.5));
        float _1373 = _1371 * (_1338.y + (-0.5));
        float _1374 = _1371 * (_1338.z + (-0.5));
        float _1381 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1345.x + (-0.5));
        float _1383 = _1381 * (_1345.y + (-0.5));
        float _1384 = _1381 * (_1345.z + (-0.5));
        float _1391 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1352.x + (-0.5));
        float _1393 = _1391 * (_1352.y + (-0.5));
        float _1394 = _1391 * (_1352.z + (-0.5));
        float _1401 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1359.x + (-0.5));
        float _1403 = _1401 * (_1359.y + (-0.5));
        float _1404 = _1401 * (_1359.z + (-0.5));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = _1372 * 0.5;
        float _1409 = _1382 * 0.5;
        float _1410 = _1392 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_694, _695, _696), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _3894 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1435 + 1.0))) + _1440) * _1405;
        float _1450 = _1373 * 0.5;
        float _1451 = _1383 * 0.5;
        float _1452 = _1393 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_694, _695, _696), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _3927 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1477 + 1.0))) + _1482) * _1406;
        float _1492 = _1374 * 0.5;
        float _1493 = _1384 * 0.5;
        float _1494 = _1394 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_694, _695, _696), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _3960 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1519 + 1.0))) + _1524) * _1407;
        _1541 = _1374;
        _1542 = _1373;
        _1543 = _1372;
        _1544 = _1384;
        _1545 = _1383;
        _1546 = _1382;
        _1547 = _1394;
        _1548 = _1393;
        _1549 = _1392;
        _1550 = _1407;
        _1551 = _1406;
        _1552 = _1405;
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
    }
    else
    {
        _1541 = _1234;
        _1542 = _1234;
        _1543 = _1234;
        _1544 = _1234;
        _1545 = _1234;
        _1546 = _1234;
        _1547 = _1234;
        _1548 = _1234;
        _1549 = _1234;
        _1550 = _1234;
        _1551 = _1234;
        _1552 = _1234;
        _1553 = 0.0;
        _1554 = 0.0;
        _1555 = 0.0;
    }
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1246)) + _1246;
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1247)) + _1247;
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1248)) + _1248;
    float _1588 = fma(_1567, cbSceneParam._m0[89u].z, fma(_1566, cbSceneParam._m0[89u].y, _1565 * cbSceneParam._m0[89u].x));
    float _1591 = fma(_1567, cbSceneParam._m0[90u].z, fma(_1566, cbSceneParam._m0[90u].y, _1565 * cbSceneParam._m0[90u].x));
    float _1594 = fma(_1567, cbSceneParam._m0[91u].z, fma(_1566, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1565));
    float _1609 = _868 * 0.5;
    float _1610 = _869 * 0.5;
    float _1611 = _870 * 0.5;
    float _1612 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1615 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1618 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1652;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1625 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1233, _1237, _1240, _1243));
        float _1629 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1235, _1238, _1241, _1244));
        float _1633 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1640 = dot(vec4(cbModelParam._m0[39u]), vec4(_1609, _1610, _1611, 1.0));
        _1652 = dot(vec3(isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1640) ? 0.0 : (isnan(0.0) ? _1640 : max(0.0, _1640))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1652 = 1.0;
    }
    float _1663;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1654 = dot(vec4(cbModelParam._m0[40u]), vec4(_1609, _1610, _1611, 1.0));
        _1663 = dot(vec3(isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1654) ? 0.0 : (isnan(0.0) ? _1654 : max(0.0, _1654))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1663 = 1.0;
    }
    float _1667 = (_1663 * cbModelParam._m0[1u].x) + (_1652 * (1.0 - cbModelParam._m0[1u].x));
    float _1677 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _697);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1677 : min(cbModelParam._m0[25u].z, _1677));
    float _1760;
    float _1762;
    float _1764;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1727 = fma(_932, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _924)) + cbModelParam._m0[13u].w;
        float _1731 = fma(_932, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _924)) + cbModelParam._m0[14u].w;
        float _1735 = fma(_932, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _924)) + cbModelParam._m0[15u].w;
        float _1738 = fma(_870, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868));
        float _1741 = fma(_870, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868));
        float _1744 = fma(_870, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868));
        float _1772;
        if (_1738 > 0.0)
        {
            _1772 = abs((1.0 - _1727) / _1738);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1727 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1772 = frontier_phi_14_12_ladder;
        }
        float _1996;
        if (_1741 > 0.0)
        {
            _1996 = abs((1.0 - _1731) / _1741);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1731 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1996 = frontier_phi_23_19_ladder;
        }
        float _2253;
        if (_1744 > 0.0)
        {
            _2253 = abs((1.0 - _1735) / _1744);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1735 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2253 = frontier_phi_35_30_ladder;
        }
        float _2255 = isnan(_1996) ? _1772 : (isnan(_1772) ? _1996 : min(_1772, _1996));
        float _2256 = isnan(_2253) ? _2255 : (isnan(_2255) ? _2253 : min(_2255, _2253));
        float _2260 = (_2256 * _1738) + _1727;
        float _2261 = (_2256 * _1741) + _1731;
        float _2262 = (_2256 * _1744) + _1735;
        float _2263 = _2256 * 9.9999997473787516355514526367188e-05;
        float _2265 = (-1.0) - _2263;
        float _2267 = _2263 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2262 > _2267) || ((_2262 < _2265) || ((_2261 > _2267) || ((_2261 < _2265) || ((_2260 < _2265) || (_2260 > _2267))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2390 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2262, cbModelParam._m0[9u].z, fma(_2261, cbModelParam._m0[9u].y, _2260 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2262, cbModelParam._m0[10u].z, fma(_2261, cbModelParam._m0[10u].y, _2260 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2262, cbModelParam._m0[11u].z, fma(_2261, cbModelParam._m0[11u].y, _2260 * cbModelParam._m0[11u].x))), _1678);
            frontier_phi_13_35_ladder = _2390.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2390.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2390.x * cbModelParam._m0[1u].y;
        }
        _1760 = frontier_phi_13_35_ladder_2;
        _1762 = frontier_phi_13_35_ladder_1;
        _1764 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1748 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_868, _869, _870), _1678);
        _1760 = _1748.x * cbModelParam._m0[1u].y;
        _1762 = _1748.y * cbModelParam._m0[1u].y;
        _1764 = _1748.z * cbModelParam._m0[1u].y;
    }
    float _1768 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _697);
    float _1769 = isnan(_1768) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1768 : min(cbModelParam._m0[25u].w, _1768));
    float _1859;
    float _1861;
    float _1863;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1823 = fma(_932, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _924)) + cbModelParam._m0[21u].w;
        float _1827 = fma(_932, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _924)) + cbModelParam._m0[22u].w;
        float _1831 = fma(_932, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _924)) + cbModelParam._m0[23u].w;
        float _1834 = fma(_870, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868));
        float _1837 = fma(_870, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868));
        float _1840 = fma(_870, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868));
        float _2001;
        if (_1834 > 0.0)
        {
            _2001 = abs((1.0 - _1823) / _1834);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1823 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2001 = frontier_phi_25_21_ladder;
        }
        float _2280;
        if (_1837 > 0.0)
        {
            _2280 = abs((1.0 - _1827) / _1837);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1827 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2280 = frontier_phi_37_32_ladder;
        }
        float _2493;
        if (_1840 > 0.0)
        {
            _2493 = abs((1.0 - _1831) / _1840);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1831 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2493 = frontier_phi_46_43_ladder;
        }
        float _2495 = isnan(_2280) ? _2001 : (isnan(_2001) ? _2280 : min(_2001, _2280));
        float _2496 = isnan(_2493) ? _2495 : (isnan(_2495) ? _2493 : min(_2495, _2493));
        float _2500 = (_2496 * _1834) + _1823;
        float _2501 = (_2496 * _1837) + _1827;
        float _2502 = (_2496 * _1840) + _1831;
        float _2503 = _2496 * 9.9999997473787516355514526367188e-05;
        float _2504 = (-1.0) - _2503;
        float _2506 = _2503 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2502 > _2506) || ((_2502 < _2504) || ((_2501 > _2506) || ((_2501 < _2504) || ((_2500 < _2504) || (_2500 > _2506))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2701 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2502, cbModelParam._m0[17u].z, fma(_2501, cbModelParam._m0[17u].y, _2500 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2502, cbModelParam._m0[18u].z, fma(_2501, cbModelParam._m0[18u].y, _2500 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2502, cbModelParam._m0[19u].z, fma(_2501, cbModelParam._m0[19u].y, _2500 * cbModelParam._m0[19u].x))), _1769);
            frontier_phi_22_46_ladder = _2701.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2701.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2701.x * cbModelParam._m0[1u].z;
        }
        _1859 = frontier_phi_22_46_ladder_2;
        _1861 = frontier_phi_22_46_ladder_1;
        _1863 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1843 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_868, _869, _870), _1769);
        _1859 = _1843.x * cbModelParam._m0[1u].z;
        _1861 = _1843.y * cbModelParam._m0[1u].z;
        _1863 = _1843.z * cbModelParam._m0[1u].z;
    }
    float _1876 = (((_895 * _844) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1859 - _1760)) + _1760);
    float _1878 = (((_895 * _846) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1861 - _1762)) + _1762);
    float _1880 = (((_895 * _847) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1863 - _1764)) + _1764);
    float _1883 = fma(_1880, cbSceneParam._m0[89u].z, fma(_1878, cbSceneParam._m0[89u].y, _1876 * cbSceneParam._m0[89u].x));
    float _1886 = fma(_1880, cbSceneParam._m0[90u].z, fma(_1878, cbSceneParam._m0[90u].y, _1876 * cbSceneParam._m0[90u].x));
    float _1889 = fma(_1880, cbSceneParam._m0[91u].z, fma(_1878, cbSceneParam._m0[91u].y, _1876 * cbSceneParam._m0[91u].x));
    vec4 _1897 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_782, _783));
    float _1899 = _1897.w;
    float _1911 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1899);
    float _1912 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1899);
    float _1913 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1899);
    uvec4 _1917 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _1919 = _1917.x * 14u;
    uint _1920 = _1919 + 13u;
    float _1927 = _860 + (-1.0);
    float _1932 = (cbLight._m0[_1920].x * _1927) + 1.0;
    float _1933 = (cbLight._m0[_1920].y * _1927) + 1.0;
    float _1934 = (cbLight._m0[_1920].z * _1927) + 1.0;
    float _1935 = (cbLight._m0[_1920].w * _1927) + 1.0;
    uint _1936 = _1919 + 5u;
    float _1942 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
    uint _1946 = _1919 + 4u;
    float _1955 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1959 = _1919 | 1u;
    float _1970 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_694, _695, _696));
    float _1973 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_694, _695, _696));
    float _4096 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _4107 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1978 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.3183098733425140380859375;
    float _1980 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * 0.3183098733425140380859375;
    float _1987 = ((cbLight._m0[_1936].x * _1942) * _1980) + (((cbLight._m0[_1946].x * _1911) * _1955) * _1978);
    float _1988 = ((_1942 * cbLight._m0[_1936].y) * _1980) + (((cbLight._m0[_1946].y * _1912) * _1955) * _1978);
    float _1989 = ((_1942 * cbLight._m0[_1936].z) * _1980) + (((cbLight._m0[_1946].z * _1913) * _1955) * _1978);
    uvec4 _1993 = floatBitsToUint(cbLight._m0[_1919 + 12u]);
    bool _1995 = _1993.x == 0u;
    float _2006;
    float _2008;
    float _2010;
    if (_1995)
    {
        _2006 = _1987;
        _2008 = _1988;
        _2010 = _1989;
    }
    else
    {
        uint _2014 = _1919 + 6u;
        float _2030 = (dot(vec3(cbLight._m0[_1919 + 2u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2031 = _2030 * _2030;
        float _4118 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2032 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2033 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2006 = (((cbLight._m0[_2014].x * 0.3183098733425140380859375) * _2032) * _2033) + _1987;
        _2008 = (((cbLight._m0[_2014].y * 0.3183098733425140380859375) * _2032) * _2033) + _1988;
        _2010 = (((cbLight._m0[_2014].z * 0.3183098733425140380859375) * _2032) * _2033) + _1989;
    }
    bool _2013 = _1993.y == 0u;
    float _2051;
    float _2053;
    float _2055;
    if (_2013)
    {
        _2051 = _2006;
        _2053 = _2008;
        _2055 = _2010;
    }
    else
    {
        uint _2224 = _1919 + 7u;
        float _2240 = (dot(vec3(cbLight._m0[_1919 + 3u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2241 = _2240 * _2240;
        float _4134 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2242 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2243 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2051 = (((cbLight._m0[_2224].x * 0.3183098733425140380859375) * _2242) * _2243) + _2006;
        _2053 = (((cbLight._m0[_2224].y * 0.3183098733425140380859375) * _2242) * _2243) + _2008;
        _2055 = (((cbLight._m0[_2224].z * 0.3183098733425140380859375) * _2242) * _2243) + _2010;
    }
    uint _2058 = _1919 + 8u;
    float _2071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1919].w)) * _697) * 0.949999988079071044921875);
    float _2072 = _2071 * _2071;
    float _2073 = cbLight._m0[_1919].x + _774;
    float _2074 = cbLight._m0[_1919].y + _775;
    float _2075 = cbLight._m0[_1919].z + _776;
    float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
    float _2080 = _2079 * _2073;
    float _2081 = _2079 * _2074;
    float _2082 = _2079 * _2075;
    float _2083 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_1919].xyz));
    float _4150 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _4161 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2087 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2088 = dot(vec3(_694, _695, _696), vec3(_2080, _2081, _2082));
    float _4172 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2092 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_2080, _2081, _2082));
    float _4183 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2096 = _2072 * _2072;
    float _2100 = ((_2091 * _2091) * (_2096 + (-1.0))) + 1.0;
    float _2108 = exp2(log2(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * 5.0);
    float _2109 = 0.959999978542327880859375 - _841;
    float _2111 = 0.959999978542327880859375 - _842;
    float _2112 = 0.959999978542327880859375 - _843;
    float _2119 = 1.0 - _2072;
    float _2130 = (0.5 / (((_2087 * ((_2086 * _2119) + _2072)) + 9.9999999392252902907785028219223e-09) + (((_2087 * _2119) + _2072) * _2086))) * _2086;
    float _4194 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2132 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2096 / ((_2100 * _2100) * 3.141590118408203125));
    uint _2146 = _1919 + 9u;
    float _2157 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1959].w)) * _697) * 0.949999988079071044921875);
    float _2158 = _2157 * _2157;
    float _2159 = cbLight._m0[_1959].x + _774;
    float _2160 = cbLight._m0[_1959].y + _775;
    float _2161 = cbLight._m0[_1959].z + _776;
    float _2165 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
    float _2166 = _2165 * _2159;
    float _2167 = _2165 * _2160;
    float _2168 = _2165 * _2161;
    float _2169 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_1959].xyz));
    float _4205 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2172 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _2173 = dot(vec3(_694, _695, _696), vec3(_2166, _2167, _2168));
    float _4216 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _2177 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_2166, _2167, _2168));
    float _4227 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2181 = _2158 * _2158;
    float _2185 = ((_2176 * _2176) * (_2181 + (-1.0))) + 1.0;
    float _2192 = exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0);
    float _2199 = 1.0 - _2158;
    float _2209 = (0.5 / (((_2087 * ((_2172 * _2199) + _2158)) + 9.9999999392252902907785028219223e-09) + (((_2087 * _2199) + _2158) * _2172))) * _2172;
    float _4238 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2211 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2181 / ((_2185 * _2185) * 3.141590118408203125));
    float _2221 = (((((_2192 * _2109) + _844) * cbLight._m0[_2146].x) * _2211) * _1942) + ((((cbLight._m0[_2058].x * _1911) * ((_2108 * _2109) + _844)) * _2132) * _1955);
    float _2222 = (((((_2192 * _2111) + _846) * cbLight._m0[_2146].y) * _2211) * _1942) + ((((cbLight._m0[_2058].y * _1912) * ((_2108 * _2111) + _846)) * _2132) * _1955);
    float _2223 = (((((_2192 * _2112) + _847) * cbLight._m0[_2146].z) * _2211) * _1942) + ((((cbLight._m0[_2058].z * _1913) * ((_2108 * _2112) + _847)) * _2132) * _1955);
    float _2285;
    float _2287;
    float _2289;
    if (_1995)
    {
        _2285 = _2221;
        _2287 = _2222;
        _2289 = _2223;
    }
    else
    {
        uint _2291 = _1919 + 2u;
        uint _2295 = _1919 + 10u;
        float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _697) * 0.949999988079071044921875);
        float _2310 = _2309 * _2309;
        float _2311 = cbLight._m0[_2291].x + _774;
        float _2312 = cbLight._m0[_2291].y + _775;
        float _2313 = cbLight._m0[_2291].z + _776;
        float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
        float _2318 = _2317 * _2311;
        float _2319 = _2317 * _2312;
        float _2320 = _2317 * _2313;
        float _2321 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2291].xyz));
        float _4249 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2325 = dot(vec3(_694, _695, _696), vec3(_2318, _2319, _2320));
        float _4260 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2329 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2318, _2319, _2320));
        float _4271 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2333 = _2310 * _2310;
        float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
        float _2344 = exp2(log2(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * 5.0);
        float _2351 = 1.0 - _2310;
        float _2361 = (0.5 / (((_2087 * ((_2324 * _2351) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2087 * _2351) + _2310) * _2324))) * _2324;
        float _4282 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2363 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
        float _2364 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2285 = (((((_2344 * _2109) + _844) * cbLight._m0[_2295].x) * _2363) * _2364) + _2221;
        _2287 = (((((_2344 * _2111) + _846) * cbLight._m0[_2295].y) * _2363) * _2364) + _2222;
        _2289 = (((((_2344 * _2112) + _847) * cbLight._m0[_2295].z) * _2363) * _2364) + _2223;
    }
    float _2399;
    float _2401;
    float _2403;
    if (_2013)
    {
        _2399 = _2285;
        _2401 = _2287;
        _2403 = _2289;
    }
    else
    {
        uint _2410 = _1919 + 3u;
        uint _2414 = _1919 + 11u;
        float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _697) * 0.949999988079071044921875);
        float _2429 = _2428 * _2428;
        float _2430 = cbLight._m0[_2410].x + _774;
        float _2431 = cbLight._m0[_2410].y + _775;
        float _2432 = cbLight._m0[_2410].z + _776;
        float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
        float _2437 = _2436 * _2430;
        float _2438 = _2436 * _2431;
        float _2439 = _2436 * _2432;
        float _2440 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2410].xyz));
        float _4298 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2444 = dot(vec3(_694, _695, _696), vec3(_2437, _2438, _2439));
        float _4309 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2447 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2448 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2437, _2438, _2439));
        float _4320 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2452 = _2429 * _2429;
        float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
        float _2463 = exp2(log2(1.0 - (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * 5.0);
        float _2470 = 1.0 - _2429;
        float _2480 = (0.5 / (((_2087 * ((_2443 * _2470) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2087 * _2470) + _2429) * _2443))) * _2443;
        float _4331 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2482 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
        float _2483 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2399 = (((((_2463 * _2109) + _844) * cbLight._m0[_2414].x) * _2482) * _2483) + _2285;
        _2401 = (((((_2463 * _2111) + _846) * cbLight._m0[_2414].y) * _2482) * _2483) + _2287;
        _2403 = (((((_2463 * _2112) + _847) * cbLight._m0[_2414].z) * _2482) * _2483) + _2289;
    }
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    if (_1917.y == 0u)
    {
        float _2558 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2559 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2558;
        float _2560 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2558;
        float _2561 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2558;
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.x;
        uint _2585 = uint((float(_2573.y) * floor(float(uint(cbSceneParam._m0[85u].y * _783) / _2574))) + floor(float(uint(cbSceneParam._m0[85u].x * _782) / _2574)));
        float _2595 = (log2(_2561 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2596 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        uint _2599 = uint(isnan(14.0) ? _2596 : (isnan(_2596) ? 14.0 : min(_2596, 14.0)));
        uvec4 _2604 = texelFetch(g_lightClusterGridBuffer, int(((_2599 << 2u) + (_2585 << 6u)) >> 2u));
        uint _2605 = _2604.x;
        uint _2606 = _2573.z;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        if (((((1u << ((_2606 >> 4u) & 15u)) + 4294967295u) & _2605) == 0u) || ((_2606 & 240u) == 0u))
        {
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
        }
        else
        {
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            uint _2857 = 0u;
            uint _2866;
            bool _2867;
            for (;;)
            {
                _2866 = texelFetch(g_lightClassification, int((((_2599 << 5u) + (_2585 << 9u)) + (_2857 << 2u)) >> 2u)).x;
                _2867 = _2866 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2867)
                {
                    frontier_phi_61_pred = _2851;
                    frontier_phi_61_pred_1 = _2856;
                    frontier_phi_61_pred_2 = _2855;
                    frontier_phi_61_pred_3 = _2854;
                    frontier_phi_61_pred_4 = _2853;
                    frontier_phi_61_pred_5 = _2852;
                }
                else
                {
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    uint _2981;
                    _2975 = _2851;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2854;
                    _2979 = _2855;
                    _2980 = _2856;
                    _2981 = _2866;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    for (;;)
                    {
                        uint _2985 = uint(findLSB(_2981)) + (_2857 << 5u);
                        uint _2982 = (_2981 + 4294967295u) & _2981;
                        uint _2987 = _2985 * 48u;
                        vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 3u)).x));
                        uint _3007 = (_2985 * 48u) + 4u;
                        vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 3u)).x));
                        uint _3026 = (_2985 * 48u) + 8u;
                        vec3 _3037 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x));
                        float _3041 = _3001.x - _2559;
                        float _3042 = _3001.y - _2560;
                        float _3043 = _3001.z - _2561;
                        float _3044 = dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043));
                        float _3047 = inversesqrt(_3044);
                        float _3048 = _3047 * _3041;
                        float _3049 = _3047 * _3042;
                        float _3050 = _3047 * _3043;
                        float _3051 = dot(vec3(_801, _804, _807), vec3(_3048, _3049, _3050));
                        float _3056 = 1.0 - (_3044 * _3001.w);
                        float _4357 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3057 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3058 = sqrt(_3044) * _3020.w;
                        float _3061 = 1.39999997615814208984375 / (_3058 + 1.39999997615814208984375);
                        float _3062 = _3061 * _3061;
                        float _3065 = ((1.0 - _3062) * _3051) + _3062;
                        float _3068 = _3058 * _3058;
                        float _3072 = ((isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0))) * _3057) / ((_3068 * 0.699999988079071044921875) + 1.0);
                        float _3076 = (-0.0) - _2559;
                        float _3077 = (-0.0) - _2560;
                        float _3078 = (-0.0) - _2561;
                        float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                        float _3083 = _3082 * _3076;
                        float _3084 = _3082 * _3077;
                        float _3085 = _3082 * _3078;
                        float _3093 = exp2(log2(1.0 / ((_3068 * 3.5) + 5.0)) * 0.25);
                        float _3094 = 1.0 - _876;
                        float _3101 = sqrt(1.0 - ((1.0 - (_3094 * _3094)) * (1.0 - (_3093 * _3093))));
                        float _3102 = _3101 * _3101;
                        float _3103 = _3102 * _3102;
                        float _3104 = _3083 + _3048;
                        float _3105 = _3084 + _3049;
                        float _3106 = _3085 + _3050;
                        float _3110 = inversesqrt(dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106)));
                        float _3114 = dot(vec3(_801, _804, _807), vec3(_3083, _3084, _3085));
                        float _4373 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3117 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3118 = dot(vec3(_801, _804, _807), vec3(_3110 * _3104, _3110 * _3105, _3110 * _3106));
                        float _4384 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3121 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3125 = ((_3121 * _3121) * (_3103 + (-1.0))) + 1.0;
                        float _3126 = _3061 * _3102;
                        float _3127 = _3126 * _3126;
                        float _3130 = ((1.0 - _3127) * _3051) + _3127;
                        float _4395 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3132 = 1.0 - _3102;
                        float _3142 = (0.5 / (((_3131 * ((_3117 * _3132) + _3102)) + 9.9999999392252902907785028219223e-09) + (((_3131 * _3132) + _3102) * _3117))) * _3131;
                        float _4406 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3153 = (((_3103 * 3.1415927410125732421875) * (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) / ((_3125 * _3125) * ((_3068 * 2.1991131305694580078125) + 3.141590118408203125))) * _3057;
                        _2910 = (_3072 * _3020.x) + _2978;
                        _2911 = (_3072 * _3020.y) + _2979;
                        _2912 = (_3072 * _3020.z) + _2980;
                        _2907 = (_3153 * _3037.x) + _2975;
                        _2908 = (_3153 * _3037.y) + _2976;
                        _2909 = (_3153 * _3037.z) + _2977;
                        if (_2982 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2975 = _2907;
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2910;
                            _2979 = _2911;
                            _2980 = _2912;
                            _2981 = _2982;
                        }
                    }
                    frontier_phi_61_pred = _2907;
                    frontier_phi_61_pred_1 = _2912;
                    frontier_phi_61_pred_2 = _2911;
                    frontier_phi_61_pred_3 = _2910;
                    frontier_phi_61_pred_4 = _2909;
                    frontier_phi_61_pred_5 = _2908;
                }
                _2707 = frontier_phi_61_pred;
                _2717 = frontier_phi_61_pred_1;
                _2715 = frontier_phi_61_pred_2;
                _2713 = frontier_phi_61_pred_3;
                _2711 = frontier_phi_61_pred_4;
                _2709 = frontier_phi_61_pred_5;
                uint _2858 = _2857 + 1u;
                if (_2858 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2851 = _2707;
                    _2852 = _2709;
                    _2853 = _2711;
                    _2854 = _2713;
                    _2855 = _2715;
                    _2856 = _2717;
                    _2857 = _2858;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
        }
        uvec4 _2720 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2721 = _2720.z;
        uint _2723 = (_2721 >> 8u) & 15u;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        if (((4294967295u << _2723) & _2605) == 0u)
        {
            _2819 = _2706;
            _2821 = _2708;
            _2823 = _2710;
            _2825 = _2712;
            _2827 = _2714;
            _2829 = _2716;
        }
        else
        {
            float _2844 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
            float _2845 = _2844 * _2559;
            float _2846 = _2844 * _2560;
            float _2847 = _2844 * _2561;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2723 < ((_2721 >> 12u) & 15u))
            {
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2958 = _2706;
                float _2959 = _2708;
                float _2960 = _2710;
                float _2961 = _2712;
                float _2962 = _2714;
                float _2963 = _2716;
                uint _2964 = _2723;
                uint _2973;
                bool _2974;
                for (;;)
                {
                    _2973 = texelFetch(g_lightClassification, int((((_2599 << 5u) + (_2585 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                    _2974 = _2973 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2974)
                    {
                        frontier_phi_67_pred = _2961;
                        frontier_phi_67_pred_1 = _2962;
                        frontier_phi_67_pred_2 = _2963;
                        frontier_phi_67_pred_3 = _2960;
                        frontier_phi_67_pred_4 = _2959;
                        frontier_phi_67_pred_5 = _2958;
                    }
                    else
                    {
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3171 = _2958;
                        float _3172 = _2959;
                        float _3173 = _2960;
                        float _3174 = _2961;
                        float _3175 = _2962;
                        float _3176 = _2963;
                        uint _3177 = _2973;
                        uint _3178;
                        vec4 _3203;
                        float _3204;
                        vec4 _3219;
                        vec3 _3231;
                        vec4 _3246;
                        vec4 _3261;
                        float _3307;
                        bool _3308;
                        for (;;)
                        {
                            uint _3188 = ((_2964 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3177));
                            _3178 = (_3177 + 4294967295u) & _3177;
                            uint _3190 = _3188 * 40u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3204 = _3203.w;
                            uint _3206 = (_3188 * 40u) + 4u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3221 = (_3188 * 40u) + 8u;
                            _3231 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x));
                            uint _3233 = (_3188 * 40u) + 16u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3248 = (_3188 * 40u) + 20u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3263 = (_3188 * 40u) + 24u;
                            vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3282 = (_3188 * 40u) + 28u;
                            vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            _3307 = fma(_2561, _3295.z, fma(_2560, _3295.y, _3295.x * _2559)) + _3295.w;
                            _3308 = !((fma(_2561, _3276.z, fma(_2560, _3276.y, _3276.x * _2559)) + _3276.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3308)
                            {
                                float _3335 = _3203.x - _2559;
                                float _3336 = _3203.y - _2560;
                                float _3337 = _3203.z - _2561;
                                float _3338 = dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337));
                                float _3341 = inversesqrt(_3338);
                                float _3342 = _3341 * _3335;
                                float _3343 = _3341 * _3336;
                                float _3344 = _3341 * _3337;
                                float _3348 = 1.0 - (_3338 / (_3204 * _3204));
                                float _4417 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3349 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3353 = sqrt(_3338) * _3219.w;
                                float _3355 = 1.39999997615814208984375 / (_3353 + 1.39999997615814208984375);
                                float _3356 = _3355 * _3355;
                                float _3359 = ((1.0 - _3356) * dot(vec3(_3342, _3343, _3344), vec3(_801, _804, _807))) + _3356;
                                float _3362 = _3353 * _3353;
                                float _3366 = (fma(_2561, _3246.z, fma(_2560, _3246.y, _3246.x * _2559)) + _3246.w) / _3307;
                                float _3367 = (fma(_2561, _3261.z, fma(_2560, _3261.y, _3261.x * _2559)) + _3261.w) / _3307;
                                float _3371 = 1.0 - dot(vec2(_3366, _3367), vec2(_3366, _3367));
                                float _4433 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3372 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3373 = _3372 * (((isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0))) * _3349) / ((_3362 * 0.699999988079071044921875) + 1.0));
                                float _3385 = exp2(log2(1.0 / ((_3362 * 3.5) + 5.0)) * 0.25);
                                float _3386 = 1.0 - _876;
                                float _3393 = sqrt(1.0 - ((1.0 - (_3386 * _3386)) * (1.0 - (_3385 * _3385))));
                                float _3394 = _3393 * _3393;
                                float _3395 = _3394 * _3394;
                                float _3396 = _3342 - _2845;
                                float _3397 = _3343 - _2846;
                                float _3398 = _3344 - _2847;
                                float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                                float _3406 = dot(vec3(_801, _804, _807), vec3((-0.0) - _2845, (-0.0) - _2846, (-0.0) - _2847));
                                float _4444 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3409 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3410 = dot(vec3(_801, _804, _807), vec3(_3402 * _3396, _3402 * _3397, _3402 * _3398));
                                float _4455 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3413 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3417 = ((_3413 * _3413) * (_3395 + (-1.0))) + 1.0;
                                float _3418 = _3355 * _3394;
                                float _3419 = _3418 * _3418;
                                float _3425 = ((1.0 - _3419) * dot(vec3(_801, _804, _807), vec3(_3342, _3343, _3344))) + _3419;
                                float _4466 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3427 = 1.0 - _3394;
                                float _3437 = (0.5 / (((_3426 * ((_3409 * _3427) + _3394)) + 9.9999999392252902907785028219223e-09) + (((_3426 * _3427) + _3394) * _3409))) * _3426;
                                float _4477 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3447 = (_3372 * _3349) * (((_3395 * 3.1415927410125732421875) * (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) / ((_3417 * _3417) * ((_3362 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3447 * _3231.x;
                                frontier_phi_73_pred_1 = _3447 * _3231.y;
                                frontier_phi_73_pred_2 = _3373 * _3219.z;
                                frontier_phi_73_pred_3 = _3373 * _3219.y;
                                frontier_phi_73_pred_4 = _3373 * _3219.x;
                                frontier_phi_73_pred_5 = _3447 * _3231.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3451 = frontier_phi_73_pred;
                            _3452 = frontier_phi_73_pred_1;
                            _3456 = frontier_phi_73_pred_2;
                            _3455 = frontier_phi_73_pred_3;
                            _3454 = frontier_phi_73_pred_4;
                            _3453 = frontier_phi_73_pred_5;
                            _3161 = _3454 + _3174;
                            _3162 = _3455 + _3175;
                            _3163 = _3456 + _3176;
                            _3158 = _3451 + _3171;
                            _3159 = _3452 + _3172;
                            _3160 = _3453 + _3173;
                            if (_3178 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3178;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3161;
                        frontier_phi_67_pred_1 = _3162;
                        frontier_phi_67_pred_2 = _3163;
                        frontier_phi_67_pred_3 = _3160;
                        frontier_phi_67_pred_4 = _3159;
                        frontier_phi_67_pred_5 = _3158;
                    }
                    _2826 = frontier_phi_67_pred;
                    _2828 = frontier_phi_67_pred_1;
                    _2830 = frontier_phi_67_pred_2;
                    _2824 = frontier_phi_67_pred_3;
                    _2822 = frontier_phi_67_pred_4;
                    _2820 = frontier_phi_67_pred_5;
                    uint _2965 = _2964 + 1u;
                    if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2958 = _2820;
                        _2959 = _2822;
                        _2960 = _2824;
                        _2961 = _2826;
                        _2962 = _2828;
                        _2963 = _2830;
                        _2964 = _2965;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2828;
                frontier_phi_55_56_ladder_1 = _2830;
                frontier_phi_55_56_ladder_2 = _2826;
                frontier_phi_55_56_ladder_3 = _2824;
                frontier_phi_55_56_ladder_4 = _2822;
                frontier_phi_55_56_ladder_5 = _2820;
            }
            else
            {
                frontier_phi_55_56_ladder = _2714;
                frontier_phi_55_56_ladder_1 = _2716;
                frontier_phi_55_56_ladder_2 = _2712;
                frontier_phi_55_56_ladder_3 = _2710;
                frontier_phi_55_56_ladder_4 = _2708;
                frontier_phi_55_56_ladder_5 = _2706;
            }
            _2819 = frontier_phi_55_56_ladder_5;
            _2821 = frontier_phi_55_56_ladder_4;
            _2823 = frontier_phi_55_56_ladder_3;
            _2825 = frontier_phi_55_56_ladder_2;
            _2827 = frontier_phi_55_56_ladder;
            _2829 = frontier_phi_55_56_ladder_1;
        }
        float _2834 = isnan(1.0) ? _860 : (isnan(_860) ? 1.0 : min(_860, 1.0));
        _2618 = (_2834 * _2825) + _2051;
        _2620 = (_2834 * _2827) + _2053;
        _2622 = (_2834 * _2829) + _2055;
        _2624 = ((_2819 * _844) * _2834) + _2399;
        _2626 = ((_2821 * _846) * _2834) + _2401;
        _2628 = ((_2823 * _847) * _2834) + _2403;
    }
    else
    {
        _2618 = _2051;
        _2620 = _2053;
        _2622 = _2055;
        _2624 = _2399;
        _2626 = _2401;
        _2628 = _2403;
    }
    float _4493 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4504 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4515 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    uint _2648 = _244 + 6u;
    float _2656 = _782 / cbSceneParam._m0[86u].x;
    float _2657 = _783 / cbSceneParam._m0[86u].y;
    vec4 _2671 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2656, _2657, (log2((isnan(cbSceneParam._m0[77u].w) ? _716 : (isnan(_716) ? cbSceneParam._m0[77u].w : min(_716, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2673 = _2671.x;
    float _2674 = _2671.y;
    float _2675 = _2671.z;
    float _2676 = _2671.w;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_716 > cbSceneParam._m0[78u].w)
    {
        float _2731 = isnan(_716) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _716 : min(cbSceneParam._m0[80u].w, _716));
        float _2732 = _2731 / _716;
        float _2743 = _2732 * _767;
        float _2744 = _768 * _2732;
        float _2745 = (-0.0) - _2744;
        float _2747 = _2732 * _769;
        float _2749 = (cbSceneParam._m0[77u].w * _2745) / _2731;
        float _2750 = _2749 + cbSceneParam._m0[79u].w;
        float _2751 = cbSceneParam._m0[79u].w - _2744;
        float _2757 = sqrt(((_2743 * _2743) + (_2744 * _2744)) + (_2747 * _2747));
        float _2760 = (1.0 - (cbSceneParam._m0[77u].w / _2731)) * _2757;
        float _2765 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2767 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2920;
        if (abs((_2745 - _2749) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2920 = ((((_2750 > 0.0) ? exp2(_2765 * _2750) : (2.0 - exp2(_2767 * _2750))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2760;
        }
        else
        {
            float _2880 = 1.0 / cbSceneParam._m0[80u].x;
            float _2881 = isnan(_2751) ? _2750 : (isnan(_2750) ? _2751 : max(_2750, _2751));
            float _2882 = isnan(_2751) ? _2750 : (isnan(_2750) ? _2751 : min(_2750, _2751));
            float _2891 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : min(_2881, 0.0));
            float _2892 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : min(_2882, 0.0));
            _2920 = ((abs(_2757 / _2745) * cbSceneParam._m0[80u].y) * ((((_2891 - _2892) * 2.0) - ((exp2(_2765 * (isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0)))) - exp2(_2765 * (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0))))) * _2880)) - ((exp2(_2767 * _2891) - exp2(_2767 * _2892)) * _2880))) + (_2760 * cbSceneParam._m0[80u].z);
        }
        vec4 _2922 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2656, _2657, 1.0), 0.0);
        float _2931 = exp2((_2920 * (-1.44269502162933349609375)) * (1.0 - _2922.w));
        float _2932 = log2(_2931);
        float _2948 = log2(_2676);
        _2769 = (exp2(_2948 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].x)) * _2922.x) / cbSceneParam._m0[78u].x)) + _2673;
        _2771 = (exp2(_2948 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].y)) * _2922.y) / cbSceneParam._m0[78u].y)) + _2674;
        _2773 = (exp2(_2948 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].z)) * _2922.z) / cbSceneParam._m0[78u].z)) + _2675;
        _2775 = _2931 * _2676;
    }
    else
    {
        _2769 = _2673;
        _2771 = _2674;
        _2773 = _2675;
        _2775 = _2676;
    }
    float _2787 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2788 = _2787 == 3.0;
    float _2789 = log2(_2775);
    float _2796 = exp2(_2789 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2618 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _860))) + ((_2624 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1667)) * cbPerFrame._m0[3u].x));
    float _2797 = exp2(_2789 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2620 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _860))) + ((_2626 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1667)) * cbPerFrame._m0[3u].x));
    float _2798 = exp2(_2789 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2622 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _860))) + ((_2628 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1667)) * cbPerFrame._m0[3u].x));
    float _2807 = (_2787 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2807 * (_2788 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2769)));
    SV_Target.y = _2807 * (_2788 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2771)));
    SV_Target.z = _2807 * (_2788 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2773)));
    SV_Target.w = cbInstanceData._m0[_2648].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2648].w;
}


