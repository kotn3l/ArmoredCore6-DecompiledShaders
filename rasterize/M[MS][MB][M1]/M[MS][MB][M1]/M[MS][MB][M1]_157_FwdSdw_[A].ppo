#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1372;
float _4034;
float _4035;
float _4036;
float _4037;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4046 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4057 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4068 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _397 = _395.x;
    float _409 = dot(vec4(_397, _395.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _426 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_397 - _409) * cbMtdParam._m0[24u].y) + _409) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4079 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _434 = (_427 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _435 = (_427 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _436 = (_427 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    float _440 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _434;
    float _443 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _435;
    float _446 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _436;
    float _453 = ((_434 - _440) * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) + _440;
    float _454 = ((_435 - _443) * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) + _443;
    float _455 = ((_436 - _446) * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) + _446;
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _295) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _296) + cbTextureTilingScale._m0[14u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _521 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _540 = _538.x;
    float _541 = _538.y;
    float _542 = _538.z;
    float _551 = ((_521.z - _542) * _427) + _542;
    float _554 = ((((_521.x - _540) * _427) + _540) * 2.0) + (-1.0);
    float _555 = ((((_521.y - _541) * _427) + _541) * 2.0) + (-1.0);
    float _556 = dot(vec2(_554, _555), vec2(_554, _555));
    float _4090 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _561 = sqrt(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))));
    vec4 _581 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _593 = (_554 + ((((_494.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_581.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _594 = (_555 + ((((_494.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_581.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _597 = fma(_561, _243, fma(_594, _250, _593 * _236));
    float _600 = fma(_561, _244, fma(_594, _251, _593 * _237));
    float _603 = fma(_561, _245, fma(_594, _252, _593 * _238));
    float _607 = inversesqrt(dot(vec3(_597, _600, _603), vec3(_597, _600, _603)));
    vec4 _634 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _636 = _634.x;
    float _637 = 1.0 - _636;
    float _641 = ((_636 - _637) * cbMtdParam._m0[24u].z) + _637;
    float _643 = (cbMtdParam._m0[19u].x + dot(vec4(_607 * _597, _607 * _600, _607 * _603, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_641 * cbMtdParam._m0[21u].z);
    float _4101 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _659 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_641 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4112 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _660 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _664 = ((_644 * ((_474.x * cbMtdParam._m0[18u].x) - _453)) * _660) + _453;
    float _665 = ((_644 * ((_474.y * cbMtdParam._m0[18u].y) - _454)) * _660) + _454;
    float _666 = ((_644 * ((_474.z * cbMtdParam._m0[18u].z) - _455)) * _660) + _455;
    vec4 _678 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _692 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _694 = _692.x;
    float _712 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _295) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _296) + cbTextureTilingScale._m0[9u].w)).x - _694) * _427) + _694;
    float _716 = ((_678.x - _712) * cbMtdParam._m0[19u].z) + _712;
    float _719 = _716 - ((_660 * _644) * _716);
    float _724 = (((_494.z - _551) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _551;
    float _728 = ((_581.z - _724) * cbMtdParam._m0[19u].w) + _724;
    vec4 _741 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _748 = (_741.x * 2.0) + (-1.0);
    float _749 = (_741.y * 2.0) + (-1.0);
    float _750 = dot(vec2(_748, _749), vec2(_748, _749));
    float _4123 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _759 = (((_741.z - _728) * _644) * _660) + _728;
    float _774 = (((cbMtdParam._m0[21u].x * _593) + ((_748 - _593) * _644)) * _660) + _593;
    float _775 = (((cbMtdParam._m0[21u].x * _594) + ((_749 - _594) * _644)) * _660) + _594;
    float _776 = (((sqrt(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) - _561) * _644) * _660) + _561;
    float _778 = cbMtdParam._m0[22u].x + _581.w;
    float _781 = fma(_776, _243, fma(_775, _250, _774 * _236));
    float _784 = fma(_776, _244, fma(_775, _251, _774 * _237));
    float _787 = fma(_776, _245, fma(_775, _252, _774 * _238));
    float _791 = inversesqrt(dot(vec3(_781, _784, _787), vec3(_781, _784, _787)));
    float _792 = _791 * _781;
    float _793 = _791 * _784;
    float _794 = _791 * _787;
    float _4134 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _795 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _4145 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4156 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4167 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4178 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4189 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _800 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _865 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _855);
    float _866 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _855);
    float _867 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _855);
    float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
    float _872 = _865 * _871;
    float _873 = _866 * _871;
    float _874 = _867 * _871;
    vec4 _879 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _881 = _879.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1053 = sqrt(((_865 * _865) + (_866 * _866)) + (_867 * _867));
        float _1059 = (cbMatDynParam._m0[5u].x * _1053) + cbMatDynParam._m0[5u].y;
        float _4200 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1064 = (cbMatDynParam._m0[5u].z * _1053) + cbMatDynParam._m0[5u].w;
        float _4211 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) - _1060)) + _1060) < ((_881 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _892 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _893 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _911 = fma(_794, cbSceneParam._m0[5u].z, fma(_793, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _792));
    float _914 = fma(_794, cbSceneParam._m0[6u].z, fma(_793, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _792));
    float _917 = fma(_794, cbSceneParam._m0[7u].z, fma(_793, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _792));
    uint _930 = _276 + 9u;
    uint _931 = _930 + uint(cbMatDynParam._m0[0u].w);
    float _937 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * cbInstanceData._m0[_931].x;
    float _938 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * cbInstanceData._m0[_931].y;
    float _939 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * cbInstanceData._m0[_931].z;
    float _4222 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _4233 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _4244 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _943 = 1.0 - _800;
    float _944 = _940 * _943;
    float _945 = _941 * _943;
    float _946 = _942 * _943;
    float _951 = (_940 + (-0.039999999105930328369140625)) * _800;
    float _952 = (_941 + (-0.039999999105930328369140625)) * _800;
    float _953 = (_942 + (-0.039999999105930328369140625)) * _800;
    float _954 = _951 + 0.039999999105930328369140625;
    float _956 = _952 + 0.039999999105930328369140625;
    float _957 = _953 + 0.039999999105930328369140625;
    vec4 _966 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _892, cbSceneParam._m0[86u].y * _893));
    float _970 = ((isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * TEXCOORD_5.w) * _966.x;
    float _971 = dot(vec3(_792, _793, _794), vec3(_872, _873, _874));
    float _974 = _971 * 2.0;
    float _978 = (_974 * _792) - _872;
    float _979 = (_974 * _793) - _873;
    float _980 = (_974 * _794) - _874;
    float _984 = abs(dot(vec3(_872, _873, _874), vec3(_792, _793, _794)));
    float _4255 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _986 = sqrt(_795);
    float _999 = exp2((_986 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_986 * 3.0));
    float _1005 = (1.0 - _999) * ((_986 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1006 = _999 * _986;
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1371;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1096 = fma(_1042, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1034));
        float _1100 = fma(_1042, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1034));
        float _1104 = fma(_1042, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1034));
        float _1129 = _1034 + _792;
        float _1130 = _1038 + _793;
        float _1131 = _1042 + _794;
        float _1141 = fma(_1131, cbModelParam._m0[26u].z, fma(_1130, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1129)) - _1096;
        float _1142 = fma(_1131, cbModelParam._m0[27u].z, fma(_1130, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1129)) - _1100;
        float _1143 = fma(_1131, cbModelParam._m0[28u].z, fma(_1130, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1129)) - _1104;
        float _1147 = inversesqrt(dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143)));
        float _1160 = ((_1147 * _1141) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1096 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1147 * _1142) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1100 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1147 * _1143) / cbModelParam._m0[34u].z) + ((((((_1104 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        float _1199 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1165.x + (-0.5));
        float _1201 = _1199 * (_1165.y + (-0.5));
        float _1202 = _1199 * (_1165.z + (-0.5));
        float _1209 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1172.x + (-0.5));
        float _1211 = _1209 * (_1172.y + (-0.5));
        float _1212 = _1209 * (_1172.z + (-0.5));
        float _1219 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1179.x + (-0.5));
        float _1221 = _1219 * (_1179.y + (-0.5));
        float _1222 = _1219 * (_1179.z + (-0.5));
        float _1229 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1186.x + (-0.5));
        float _1231 = _1229 * (_1186.y + (-0.5));
        float _1232 = _1229 * (_1186.z + (-0.5));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = _1200 * 0.5;
        float _1237 = _1210 * 0.5;
        float _1238 = _1220 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1253 = (dot(vec3(_792, _793, _794), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1263 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4303 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1265 + 1.0))) + _1270) * _1233;
        float _1280 = _1201 * 0.5;
        float _1281 = _1211 * 0.5;
        float _1282 = _1221 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_792, _793, _794), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4336 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1307 + 1.0))) + _1312) * _1234;
        float _1322 = _1202 * 0.5;
        float _1323 = _1212 * 0.5;
        float _1324 = _1222 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_792, _793, _794), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4369 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1349 + 1.0))) + _1354) * _1235;
        _1371 = _1202;
        _1373 = _1201;
        _1374 = _1200;
        _1375 = _1212;
        _1376 = _1211;
        _1377 = _1210;
        _1378 = _1222;
        _1379 = _1221;
        _1380 = _1220;
        _1381 = _1235;
        _1382 = _1234;
        _1383 = _1233;
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
    }
    else
    {
        _1371 = _1372;
        _1373 = _1372;
        _1374 = _1372;
        _1375 = _1372;
        _1376 = _1372;
        _1377 = _1372;
        _1378 = _1372;
        _1379 = _1372;
        _1380 = _1372;
        _1381 = _1372;
        _1382 = _1372;
        _1383 = _1372;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1414 = fma(_1042, cbModelParam._m0[30u].z, fma(_1038, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1034));
        float _1418 = fma(_1042, cbModelParam._m0[31u].z, fma(_1038, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1034));
        float _1422 = fma(_1042, cbModelParam._m0[32u].z, fma(_1038, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1034));
        float _1445 = _1034 + _792;
        float _1446 = _1038 + _793;
        float _1447 = _1042 + _794;
        float _1457 = fma(_1447, cbModelParam._m0[30u].z, fma(_1446, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1445)) - _1414;
        float _1458 = fma(_1447, cbModelParam._m0[31u].z, fma(_1446, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1445)) - _1418;
        float _1459 = fma(_1447, cbModelParam._m0[32u].z, fma(_1446, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1445)) - _1422;
        float _1463 = inversesqrt(dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459)));
        float _1476 = ((_1463 * _1457) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1414 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1463 * _1458) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1418 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1463 * _1459) / cbModelParam._m0[35u].z) + ((((((_1422 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        float _1513 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1480.x + (-0.5));
        float _1515 = _1513 * (_1480.y + (-0.5));
        float _1516 = _1513 * (_1480.z + (-0.5));
        float _1523 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1487.x + (-0.5));
        float _1525 = _1523 * (_1487.y + (-0.5));
        float _1526 = _1523 * (_1487.z + (-0.5));
        float _1533 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1494.x + (-0.5));
        float _1535 = _1533 * (_1494.y + (-0.5));
        float _1536 = _1533 * (_1494.z + (-0.5));
        float _1543 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1501.x + (-0.5));
        float _1545 = _1543 * (_1501.y + (-0.5));
        float _1546 = _1543 * (_1501.z + (-0.5));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = _1514 * 0.5;
        float _1551 = _1524 * 0.5;
        float _1552 = _1534 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_792, _793, _794), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4410 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4421 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4432 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_1577 + 1.0))) + _1582) * _1547;
        float _1592 = _1515 * 0.5;
        float _1593 = _1525 * 0.5;
        float _1594 = _1535 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_792, _793, _794), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4443 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4454 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4465 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_1619 + 1.0))) + _1624) * _1548;
        float _1634 = _1516 * 0.5;
        float _1635 = _1526 * 0.5;
        float _1636 = _1536 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_792, _793, _794), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4476 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4487 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4498 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_1661 + 1.0))) + _1666) * _1549;
        _1683 = _1516;
        _1684 = _1515;
        _1685 = _1514;
        _1686 = _1526;
        _1687 = _1525;
        _1688 = _1524;
        _1689 = _1536;
        _1690 = _1535;
        _1691 = _1534;
        _1692 = _1549;
        _1693 = _1548;
        _1694 = _1547;
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    }
    else
    {
        _1683 = _1372;
        _1684 = _1372;
        _1685 = _1372;
        _1686 = _1372;
        _1687 = _1372;
        _1688 = _1372;
        _1689 = _1372;
        _1690 = _1372;
        _1691 = _1372;
        _1692 = _1372;
        _1693 = _1372;
        _1694 = _1372;
        _1695 = 0.0;
        _1696 = 0.0;
        _1697 = 0.0;
    }
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1384)) + _1384;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1385)) + _1385;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1386)) + _1386;
    float _1730 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1707));
    float _1751 = _978 * 0.5;
    float _1752 = _979 * 0.5;
    float _1753 = _980 * 0.5;
    float _1754 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1757 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1760 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1794;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1767 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1371, _1375, _1378, _1381));
        float _1771 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1775 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1374, _1377, _1380, _1383));
        float _1782 = dot(vec4(cbModelParam._m0[39u]), vec4(_1751, _1752, _1753, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1805;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1796 = dot(vec4(cbModelParam._m0[40u]), vec4(_1751, _1752, _1753, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1809 = (_1805 * cbModelParam._m0[1u].x) + (_1794 * (1.0 - cbModelParam._m0[1u].x));
    float _1819 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _795);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1819 : min(cbModelParam._m0[25u].z, _1819));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1867 = fma(_1042, cbModelParam._m0[13u].z, fma(_1038, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1034)) + cbModelParam._m0[13u].w;
        float _1871 = fma(_1042, cbModelParam._m0[14u].z, fma(_1038, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1034)) + cbModelParam._m0[14u].w;
        float _1875 = fma(_1042, cbModelParam._m0[15u].z, fma(_1038, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1034)) + cbModelParam._m0[15u].w;
        float _1878 = fma(_980, cbModelParam._m0[13u].z, fma(_979, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978));
        float _1881 = fma(_980, cbModelParam._m0[14u].z, fma(_979, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978));
        float _1884 = fma(_980, cbModelParam._m0[15u].z, fma(_979, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978));
        float _1912;
        if (_1878 > 0.0)
        {
            _1912 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1912 = frontier_phi_17_15_ladder;
        }
        float _2083;
        if (_1881 > 0.0)
        {
            _2083 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2083 = frontier_phi_26_22_ladder;
        }
        float _2378;
        if (_1884 > 0.0)
        {
            _2378 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2378 = frontier_phi_38_33_ladder;
        }
        float _2380 = isnan(_2083) ? _1912 : (isnan(_1912) ? _2083 : min(_1912, _2083));
        float _2381 = isnan(_2378) ? _2380 : (isnan(_2380) ? _2378 : min(_2380, _2378));
        float _2385 = (_2381 * _1878) + _1867;
        float _2386 = (_2381 * _1881) + _1871;
        float _2387 = (_2381 * _1884) + _1875;
        float _2388 = _2381 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2388;
        float _2392 = _2388 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 > _2392) || ((_2386 < _2390) || ((_2385 < _2390) || (_2385 > _2392))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2387, cbModelParam._m0[9u].z, fma(_2386, cbModelParam._m0[9u].y, _2385 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2387, cbModelParam._m0[10u].z, fma(_2386, cbModelParam._m0[10u].y, _2385 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2387, cbModelParam._m0[11u].z, fma(_2386, cbModelParam._m0[11u].y, _2385 * cbModelParam._m0[11u].x))), _1820);
            frontier_phi_16_38_ladder = _2532.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2532.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2532.x * cbModelParam._m0[1u].y;
        }
        _1900 = frontier_phi_16_38_ladder_2;
        _1902 = frontier_phi_16_38_ladder_1;
        _1904 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_978, _979, _980), _1820);
        _1900 = _1888.x * cbModelParam._m0[1u].y;
        _1902 = _1888.y * cbModelParam._m0[1u].y;
        _1904 = _1888.z * cbModelParam._m0[1u].y;
    }
    float _1908 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _795);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1908 : min(cbModelParam._m0[25u].w, _1908));
    float _1998;
    float _2000;
    float _2002;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1962 = fma(_1042, cbModelParam._m0[21u].z, fma(_1038, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1034)) + cbModelParam._m0[21u].w;
        float _1966 = fma(_1042, cbModelParam._m0[22u].z, fma(_1038, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1034)) + cbModelParam._m0[22u].w;
        float _1970 = fma(_1042, cbModelParam._m0[23u].z, fma(_1038, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1034)) + cbModelParam._m0[23u].w;
        float _1973 = fma(_980, cbModelParam._m0[21u].z, fma(_979, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978));
        float _1976 = fma(_980, cbModelParam._m0[22u].z, fma(_979, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978));
        float _1979 = fma(_980, cbModelParam._m0[23u].z, fma(_979, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978));
        float _2088;
        if (_1973 > 0.0)
        {
            _2088 = abs((1.0 - _1962) / _1973);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1962 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2088 = frontier_phi_28_24_ladder;
        }
        float _2405;
        if (_1976 > 0.0)
        {
            _2405 = abs((1.0 - _1966) / _1976);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1966 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2405 = frontier_phi_40_35_ladder;
        }
        float _2743;
        if (_1979 > 0.0)
        {
            _2743 = abs((1.0 - _1970) / _1979);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1970 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2743 = frontier_phi_50_47_ladder;
        }
        float _2745 = isnan(_2405) ? _2088 : (isnan(_2088) ? _2405 : min(_2088, _2405));
        float _2746 = isnan(_2743) ? _2745 : (isnan(_2745) ? _2743 : min(_2745, _2743));
        float _2750 = (_2746 * _1973) + _1962;
        float _2751 = (_2746 * _1976) + _1966;
        float _2752 = (_2746 * _1979) + _1970;
        float _2753 = _2746 * 9.9999997473787516355514526367188e-05;
        float _2754 = (-1.0) - _2753;
        float _2756 = _2753 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2752 > _2756) || ((_2752 < _2754) || ((_2751 > _2756) || ((_2751 < _2754) || ((_2750 < _2754) || (_2750 > _2756))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2874 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2752, cbModelParam._m0[17u].z, fma(_2751, cbModelParam._m0[17u].y, _2750 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2752, cbModelParam._m0[18u].z, fma(_2751, cbModelParam._m0[18u].y, _2750 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2752, cbModelParam._m0[19u].z, fma(_2751, cbModelParam._m0[19u].y, _2750 * cbModelParam._m0[19u].x))), _1909);
            frontier_phi_25_50_ladder = _2874.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2874.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2874.x * cbModelParam._m0[1u].z;
        }
        _1998 = frontier_phi_25_50_ladder_2;
        _2000 = frontier_phi_25_50_ladder_1;
        _2002 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1982 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_978, _979, _980), _1909);
        _1998 = _1982.x * cbModelParam._m0[1u].z;
        _2000 = _1982.y * cbModelParam._m0[1u].z;
        _2002 = _1982.z * cbModelParam._m0[1u].z;
    }
    float _2015 = (((_1005 * _954) + _1006) * _970) * ((cbModelParam._m0[1u].w * (_1998 - _1900)) + _1900);
    float _2017 = (((_1005 * _956) + _1006) * _970) * ((cbModelParam._m0[1u].w * (_2000 - _1902)) + _1902);
    float _2019 = (((_1005 * _957) + _1006) * _970) * ((cbModelParam._m0[1u].w * (_2002 - _1904)) + _1904);
    float _2022 = fma(_2019, cbSceneParam._m0[89u].z, fma(_2017, cbSceneParam._m0[89u].y, _2015 * cbSceneParam._m0[89u].x));
    float _2025 = fma(_2019, cbSceneParam._m0[90u].z, fma(_2017, cbSceneParam._m0[90u].y, _2015 * cbSceneParam._m0[90u].x));
    float _2028 = fma(_2019, cbSceneParam._m0[91u].z, fma(_2017, cbSceneParam._m0[91u].y, _2015 * cbSceneParam._m0[91u].x));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2066 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2070 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2074 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2075 = _2062 / _2074;
    float _2076 = _2066 / _2074;
    float _2077 = _2070 / _2074;
    float _2224;
    float _2225;
    float _2226;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2104 = ((uint(_2077 > cbSceneParam._m0[59u].y) + uint(_2077 > cbSceneParam._m0[59u].x)) + uint(_2077 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2105 = _2104 + 43u;
        uint _2113 = _2104 + 44u;
        uint _2121 = _2104 + 45u;
        uint _2129 = _2104 + 46u;
        float _2140 = fma(_2074, cbSceneParam._m0[_2105].w, fma(_2070, cbSceneParam._m0[_2105].z, fma(_2066, cbSceneParam._m0[_2105].y, _2062 * cbSceneParam._m0[_2105].x)));
        float _2144 = fma(_2074, cbSceneParam._m0[_2113].w, fma(_2070, cbSceneParam._m0[_2113].z, fma(_2066, cbSceneParam._m0[_2113].y, _2062 * cbSceneParam._m0[_2113].x)));
        float _2152 = fma(_2074, cbSceneParam._m0[_2129].w, fma(_2070, cbSceneParam._m0[_2129].z, fma(_2066, cbSceneParam._m0[_2129].y, _2062 * cbSceneParam._m0[_2129].x)));
        float _2157 = cbSceneParam._m0[33u].z * _2152;
        float _2159 = cbSceneParam._m0[33u].w * _2152;
        float _2162 = fma(_2074, cbSceneParam._m0[_2121].w, fma(_2070, cbSceneParam._m0[_2121].z, fma(_2066, cbSceneParam._m0[_2121].y, _2062 * cbSceneParam._m0[_2121].x))) / _2152;
        float _2210 = (cbSceneParam._m0[33u].x - sqrt(((_2076 * _2076) + (_2075 * _2075)) + (_2077 * _2077))) * cbSceneParam._m0[33u].y;
        float _4624 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2217 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2157 + _2140) / _2152, (_2159 + _2144) / _2152), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 + _2140) / _2152, (_2144 - _2157) / _2152), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 - _2157) / _2152, (_2144 - _2159) / _2152), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 - _2159) / _2152, (_2157 + _2144) / _2152), _2162), 0.0)).x), vec4(0.25)));
        _2224 = 1.0 - (_2217 * cbSceneParam._m0[34u].x);
        _2225 = 1.0 - (_2217 * cbSceneParam._m0[34u].y);
        _2226 = 1.0 - (_2217 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2224 = 1.0;
        _2225 = 1.0;
        _2226 = 1.0;
    }
    float _2290;
    float _2292;
    float _2294;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2278 = fma(_2074, cbSceneParam._m0[63u].w, fma(_2070, cbSceneParam._m0[63u].z, fma(_2066, cbSceneParam._m0[63u].y, _2062 * cbSceneParam._m0[63u].x)));
        float _2279 = fma(_2074, cbSceneParam._m0[60u].w, fma(_2070, cbSceneParam._m0[60u].z, fma(_2066, cbSceneParam._m0[60u].y, _2062 * cbSceneParam._m0[60u].x))) / _2278;
        float _2280 = fma(_2074, cbSceneParam._m0[61u].w, fma(_2070, cbSceneParam._m0[61u].z, fma(_2066, cbSceneParam._m0[61u].y, _2062 * cbSceneParam._m0[61u].x))) / _2278;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2279 >= cbSceneParam._m0[64u].x) && (_2280 >= cbSceneParam._m0[64u].y)) && (_2279 <= cbSceneParam._m0[64u].z)) && (_2280 <= cbSceneParam._m0[64u].w))
        {
            float _2418 = fma(_2074, cbSceneParam._m0[62u].w, fma(_2070, cbSceneParam._m0[62u].z, fma(_2066, cbSceneParam._m0[62u].y, _2062 * cbSceneParam._m0[62u].x))) / _2278;
            float _2422 = isnan(cbSceneParam._m0[41u].w) ? _2418 : (isnan(_2418) ? cbSceneParam._m0[41u].w : max(_2418, cbSceneParam._m0[41u].w));
            float _2465 = (cbSceneParam._m0[33u].x - sqrt(((_2076 * _2076) + (_2075 * _2075)) + (_2077 * _2077))) * cbSceneParam._m0[33u].y;
            float _4640 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
            float _2472 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2279, cbSceneParam._m0[33u].w + _2280), _2422), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2279, _2280 - cbSceneParam._m0[33u].z), _2422), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2279 - cbSceneParam._m0[33u].z, _2280 - cbSceneParam._m0[33u].w), _2422), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2279 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2280), _2422), 0.0)).x), vec4(0.25)));
            float _2476 = 1.0 - (_2472 * cbSceneParam._m0[34u].x);
            float _2477 = 1.0 - (_2472 * cbSceneParam._m0[34u].y);
            float _2478 = 1.0 - (_2472 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2478) ? _2226 : (isnan(_2226) ? _2478 : min(_2226, _2478));
            frontier_phi_37_36_ladder_1 = isnan(_2477) ? _2225 : (isnan(_2225) ? _2477 : min(_2225, _2477));
            frontier_phi_37_36_ladder_2 = isnan(_2476) ? _2224 : (isnan(_2224) ? _2476 : min(_2224, _2476));
        }
        else
        {
            frontier_phi_37_36_ladder = _2226;
            frontier_phi_37_36_ladder_1 = _2225;
            frontier_phi_37_36_ladder_2 = _2224;
        }
        _2290 = frontier_phi_37_36_ladder_2;
        _2292 = frontier_phi_37_36_ladder_1;
        _2294 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2290 = _2224;
        _2292 = _2225;
        _2294 = _2226;
    }
    uvec4 _2299 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2301 = _2299.x * 14u;
    uint _2302 = _2301 + 13u;
    float _2309 = _970 + (-1.0);
    float _2314 = (cbLight._m0[_2302].x * _2309) + 1.0;
    float _2315 = (cbLight._m0[_2302].y * _2309) + 1.0;
    float _2316 = (cbLight._m0[_2302].z * _2309) + 1.0;
    float _2317 = (cbLight._m0[_2302].w * _2309) + 1.0;
    uint _2318 = _2301 + 5u;
    float _2324 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
    uint _2328 = _2301 + 4u;
    float _2337 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
    uint _2341 = _2301 | 1u;
    float _2352 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_792, _793, _794));
    float _2355 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_792, _793, _794));
    float _4676 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _4687 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2360 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * 0.3183098733425140380859375;
    float _2362 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * 0.3183098733425140380859375;
    float _2369 = ((cbLight._m0[_2318].x * _2324) * _2362) + (((cbLight._m0[_2328].x * _2290) * _2337) * _2360);
    float _2370 = ((_2324 * cbLight._m0[_2318].y) * _2362) + (((cbLight._m0[_2328].y * _2292) * _2337) * _2360);
    float _2371 = ((_2324 * cbLight._m0[_2318].z) * _2362) + (((cbLight._m0[_2328].z * _2294) * _2337) * _2360);
    uvec4 _2375 = floatBitsToUint(cbLight._m0[_2301 + 12u]);
    bool _2377 = _2375.x == 0u;
    float _2479;
    float _2481;
    float _2483;
    if (_2377)
    {
        _2479 = _2369;
        _2481 = _2370;
        _2483 = _2371;
    }
    else
    {
        uint _2487 = _2301 + 6u;
        float _2503 = (dot(vec3(cbLight._m0[_2301 + 2u].xyz), vec3(_792, _793, _794)) * 0.5) + 0.5;
        float _2504 = _2503 * _2503;
        float _4698 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2505 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2506 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
        _2479 = (((cbLight._m0[_2487].x * 0.3183098733425140380859375) * _2505) * _2506) + _2369;
        _2481 = (((cbLight._m0[_2487].y * 0.3183098733425140380859375) * _2505) * _2506) + _2370;
        _2483 = (((cbLight._m0[_2487].z * 0.3183098733425140380859375) * _2505) * _2506) + _2371;
    }
    bool _2486 = _2375.y == 0u;
    float _2541;
    float _2543;
    float _2545;
    if (_2486)
    {
        _2541 = _2479;
        _2543 = _2481;
        _2545 = _2483;
    }
    else
    {
        uint _2714 = _2301 + 7u;
        float _2730 = (dot(vec3(cbLight._m0[_2301 + 3u].xyz), vec3(_792, _793, _794)) * 0.5) + 0.5;
        float _2731 = _2730 * _2730;
        float _4714 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2732 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2733 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2541 = (((cbLight._m0[_2714].x * 0.3183098733425140380859375) * _2732) * _2733) + _2479;
        _2543 = (((cbLight._m0[_2714].y * 0.3183098733425140380859375) * _2732) * _2733) + _2481;
        _2545 = (((cbLight._m0[_2714].z * 0.3183098733425140380859375) * _2732) * _2733) + _2483;
    }
    uint _2548 = _2301 + 8u;
    float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _795) * 0.949999988079071044921875);
    float _2562 = _2561 * _2561;
    float _2563 = cbLight._m0[_2301].x + _872;
    float _2564 = cbLight._m0[_2301].y + _873;
    float _2565 = cbLight._m0[_2301].z + _874;
    float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
    float _2570 = _2569 * _2563;
    float _2571 = _2569 * _2564;
    float _2572 = _2569 * _2565;
    float _2573 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2301].xyz));
    float _4730 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2576 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
    float _4741 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _2577 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    float _2578 = dot(vec3(_792, _793, _794), vec3(_2570, _2571, _2572));
    float _4752 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2581 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
    float _2582 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2570, _2571, _2572));
    float _4763 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2586 = _2562 * _2562;
    float _2590 = ((_2581 * _2581) * (_2586 + (-1.0))) + 1.0;
    float _2598 = exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0);
    float _2599 = 0.959999978542327880859375 - _951;
    float _2601 = 0.959999978542327880859375 - _952;
    float _2602 = 0.959999978542327880859375 - _953;
    float _2609 = 1.0 - _2562;
    float _2620 = (0.5 / (((_2577 * ((_2576 * _2609) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2577 * _2609) + _2562) * _2576))) * _2576;
    float _4774 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2622 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2586 / ((_2590 * _2590) * 3.141590118408203125));
    uint _2636 = _2301 + 9u;
    float _2647 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2341].w)) * _795) * 0.949999988079071044921875);
    float _2648 = _2647 * _2647;
    float _2649 = cbLight._m0[_2341].x + _872;
    float _2650 = cbLight._m0[_2341].y + _873;
    float _2651 = cbLight._m0[_2341].z + _874;
    float _2655 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
    float _2656 = _2655 * _2649;
    float _2657 = _2655 * _2650;
    float _2658 = _2655 * _2651;
    float _2659 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2341].xyz));
    float _4785 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2662 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
    float _2663 = dot(vec3(_792, _793, _794), vec3(_2656, _2657, _2658));
    float _4796 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2666 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
    float _2667 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_2656, _2657, _2658));
    float _4807 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2671 = _2648 * _2648;
    float _2675 = ((_2666 * _2666) * (_2671 + (-1.0))) + 1.0;
    float _2682 = exp2(log2(1.0 - (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) * 5.0);
    float _2689 = 1.0 - _2648;
    float _2699 = (0.5 / (((_2577 * ((_2662 * _2689) + _2648)) + 9.9999999392252902907785028219223e-09) + (((_2577 * _2689) + _2648) * _2662))) * _2662;
    float _4818 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2701 = (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2671 / ((_2675 * _2675) * 3.141590118408203125));
    float _2711 = (((((_2682 * _2599) + _954) * cbLight._m0[_2636].x) * _2701) * _2324) + ((((cbLight._m0[_2548].x * _2290) * ((_2598 * _2599) + _954)) * _2622) * _2337);
    float _2712 = (((((_2682 * _2601) + _956) * cbLight._m0[_2636].y) * _2701) * _2324) + ((((cbLight._m0[_2548].y * _2292) * ((_2598 * _2601) + _956)) * _2622) * _2337);
    float _2713 = (((((_2682 * _2602) + _957) * cbLight._m0[_2636].z) * _2701) * _2324) + ((((cbLight._m0[_2548].z * _2294) * ((_2598 * _2602) + _957)) * _2622) * _2337);
    float _2769;
    float _2771;
    float _2773;
    if (_2377)
    {
        _2769 = _2711;
        _2771 = _2712;
        _2773 = _2713;
    }
    else
    {
        uint _2775 = _2301 + 2u;
        uint _2779 = _2301 + 10u;
        float _2793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2775].w)) * _795) * 0.949999988079071044921875);
        float _2794 = _2793 * _2793;
        float _2795 = cbLight._m0[_2775].x + _872;
        float _2796 = cbLight._m0[_2775].y + _873;
        float _2797 = cbLight._m0[_2775].z + _874;
        float _2801 = inversesqrt(dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797)));
        float _2802 = _2801 * _2795;
        float _2803 = _2801 * _2796;
        float _2804 = _2801 * _2797;
        float _2805 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2775].xyz));
        float _4829 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2808 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2809 = dot(vec3(_792, _793, _794), vec3(_2802, _2803, _2804));
        float _4840 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2813 = dot(vec3(cbLight._m0[_2775].xyz), vec3(_2802, _2803, _2804));
        float _4851 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2817 = _2794 * _2794;
        float _2821 = ((_2812 * _2812) * (_2817 + (-1.0))) + 1.0;
        float _2828 = exp2(log2(1.0 - (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) * 5.0);
        float _2835 = 1.0 - _2794;
        float _2845 = (0.5 / (((_2577 * ((_2808 * _2835) + _2794)) + 9.9999999392252902907785028219223e-09) + (((_2577 * _2835) + _2794) * _2808))) * _2808;
        float _4862 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2847 = (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2817 / ((_2821 * _2821) * 3.141590118408203125));
        float _2848 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
        _2769 = (((((_2828 * _2599) + _954) * cbLight._m0[_2779].x) * _2847) * _2848) + _2711;
        _2771 = (((((_2828 * _2601) + _956) * cbLight._m0[_2779].y) * _2847) * _2848) + _2712;
        _2773 = (((((_2828 * _2602) + _957) * cbLight._m0[_2779].z) * _2847) * _2848) + _2713;
    }
    float _2879;
    float _2881;
    float _2883;
    if (_2486)
    {
        _2879 = _2769;
        _2881 = _2771;
        _2883 = _2773;
    }
    else
    {
        uint _2890 = _2301 + 3u;
        uint _2894 = _2301 + 11u;
        float _2908 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2890].w)) * _795) * 0.949999988079071044921875);
        float _2909 = _2908 * _2908;
        float _2910 = cbLight._m0[_2890].x + _872;
        float _2911 = cbLight._m0[_2890].y + _873;
        float _2912 = cbLight._m0[_2890].z + _874;
        float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
        float _2917 = _2916 * _2910;
        float _2918 = _2916 * _2911;
        float _2919 = _2916 * _2912;
        float _2920 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2890].xyz));
        float _4878 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2923 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
        float _2924 = dot(vec3(_792, _793, _794), vec3(_2917, _2918, _2919));
        float _4889 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2927 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
        float _2928 = dot(vec3(cbLight._m0[_2890].xyz), vec3(_2917, _2918, _2919));
        float _4900 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2932 = _2909 * _2909;
        float _2936 = ((_2927 * _2927) * (_2932 + (-1.0))) + 1.0;
        float _2943 = exp2(log2(1.0 - (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) * 5.0);
        float _2950 = 1.0 - _2909;
        float _2960 = (0.5 / (((_2577 * ((_2923 * _2950) + _2909)) + 9.9999999392252902907785028219223e-09) + (((_2577 * _2950) + _2909) * _2923))) * _2923;
        float _4911 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2962 = (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2932 / ((_2936 * _2936) * 3.141590118408203125));
        float _2963 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2879 = (((((_2943 * _2599) + _954) * cbLight._m0[_2894].x) * _2962) * _2963) + _2769;
        _2881 = (((((_2943 * _2601) + _956) * cbLight._m0[_2894].y) * _2962) * _2963) + _2771;
        _2883 = (((((_2943 * _2602) + _957) * cbLight._m0[_2894].z) * _2962) * _2963) + _2773;
    }
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    if (_2299.y == 0u)
    {
        uvec4 _2984 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2985 = _2984.x;
        uint _2996 = uint((float(_2984.y) * floor(float(uint(cbSceneParam._m0[85u].y * _893) / _2985))) + floor(float(uint(cbSceneParam._m0[85u].x * _892) / _2985)));
        float _3006 = (log2(_2077 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3007 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        uint _3010 = uint(isnan(14.0) ? _3007 : (isnan(_3007) ? 14.0 : min(_3007, 14.0)));
        uvec4 _3015 = texelFetch(g_lightClusterGridBuffer, int(((_3010 << 2u) + (_2996 << 6u)) >> 2u));
        uint _3016 = _3015.x;
        uint _3017 = _2984.z;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        if (((((1u << ((_3017 >> 4u) & 15u)) + 4294967295u) & _3016) == 0u) || ((_3017 & 240u) == 0u))
        {
            _3096 = 0.0;
            _3098 = 0.0;
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
        }
        else
        {
            float _3097;
            float _3099;
            float _3101;
            float _3103;
            float _3105;
            float _3107;
            float _3249 = 0.0;
            float _3250 = 0.0;
            float _3251 = 0.0;
            float _3252 = 0.0;
            float _3253 = 0.0;
            float _3254 = 0.0;
            uint _3255 = 0u;
            uint _3264;
            bool _3265;
            for (;;)
            {
                _3264 = texelFetch(g_lightClassification, int((((_3010 << 5u) + (_2996 << 9u)) + (_3255 << 2u)) >> 2u)).x;
                _3265 = _3264 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3265)
                {
                    frontier_phi_71_pred = _3254;
                    frontier_phi_71_pred_1 = _3253;
                    frontier_phi_71_pred_2 = _3252;
                    frontier_phi_71_pred_3 = _3251;
                    frontier_phi_71_pred_4 = _3250;
                    frontier_phi_71_pred_5 = _3249;
                }
                else
                {
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    float _3398;
                    float _3399;
                    uint _3400;
                    _3394 = _3249;
                    _3395 = _3250;
                    _3396 = _3251;
                    _3397 = _3252;
                    _3398 = _3253;
                    _3399 = _3254;
                    _3400 = _3264;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    for (;;)
                    {
                        uint _3404 = uint(findLSB(_3400)) + (_3255 << 5u);
                        uint _3401 = (_3400 + 4294967295u) & _3400;
                        uint _3406 = _3404 * 48u;
                        vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3406)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 3u)).x));
                        uint _3426 = (_3404 * 48u) + 4u;
                        vec4 _3439 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3426)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 3u)).x));
                        uint _3445 = (_3404 * 48u) + 8u;
                        vec3 _3456 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3445)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 2u)).x));
                        float _3460 = _3420.x - _2075;
                        float _3461 = _3420.y - _2076;
                        float _3462 = _3420.z - _2077;
                        float _3463 = dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462));
                        float _3466 = inversesqrt(_3463);
                        float _3467 = _3466 * _3460;
                        float _3468 = _3466 * _3461;
                        float _3469 = _3466 * _3462;
                        float _3470 = dot(vec3(_911, _914, _917), vec3(_3467, _3468, _3469));
                        float _3475 = 1.0 - (_3463 * _3420.w);
                        float _4937 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3476 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                        float _3477 = sqrt(_3463) * _3439.w;
                        float _3480 = 1.39999997615814208984375 / (_3477 + 1.39999997615814208984375);
                        float _3481 = _3480 * _3480;
                        float _3484 = ((1.0 - _3481) * _3470) + _3481;
                        float _3487 = _3477 * _3477;
                        float _3491 = ((isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0))) * _3476) / ((_3487 * 0.699999988079071044921875) + 1.0);
                        float _3495 = (-0.0) - _2075;
                        float _3496 = (-0.0) - _2076;
                        float _3497 = (-0.0) - _2077;
                        float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                        float _3502 = _3501 * _3495;
                        float _3503 = _3501 * _3496;
                        float _3504 = _3501 * _3497;
                        float _3511 = exp2(log2(1.0 / ((_3487 * 3.5) + 5.0)) * 0.25);
                        float _3512 = 1.0 - _986;
                        float _3519 = sqrt(1.0 - ((1.0 - (_3512 * _3512)) * (1.0 - (_3511 * _3511))));
                        float _3520 = _3519 * _3519;
                        float _3521 = _3520 * _3520;
                        float _3522 = _3502 + _3467;
                        float _3523 = _3503 + _3468;
                        float _3524 = _3504 + _3469;
                        float _3528 = inversesqrt(dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524)));
                        float _3532 = dot(vec3(_911, _914, _917), vec3(_3502, _3503, _3504));
                        float _4953 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3535 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                        float _3536 = dot(vec3(_911, _914, _917), vec3(_3528 * _3522, _3528 * _3523, _3528 * _3524));
                        float _4964 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3539 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                        float _3543 = ((_3539 * _3539) * (_3521 + (-1.0))) + 1.0;
                        float _3544 = _3480 * _3520;
                        float _3545 = _3544 * _3544;
                        float _3548 = ((1.0 - _3545) * _3470) + _3545;
                        float _4975 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3549 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                        float _3550 = 1.0 - _3520;
                        float _3560 = (0.5 / (((_3549 * ((_3535 * _3550) + _3520)) + 9.9999999392252902907785028219223e-09) + (((_3549 * _3550) + _3520) * _3535))) * _3549;
                        float _4986 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3571 = (((_3521 * 3.1415927410125732421875) * (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) / ((_3543 * _3543) * ((_3487 * 2.1991131305694580078125) + 3.141590118408203125))) * _3476;
                        _3324 = (_3491 * _3439.x) + _3397;
                        _3325 = (_3491 * _3439.y) + _3398;
                        _3326 = (_3491 * _3439.z) + _3399;
                        _3321 = (_3571 * _3456.x) + _3394;
                        _3322 = (_3571 * _3456.y) + _3395;
                        _3323 = (_3571 * _3456.z) + _3396;
                        if (_3401 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3394 = _3321;
                            _3395 = _3322;
                            _3396 = _3323;
                            _3397 = _3324;
                            _3398 = _3325;
                            _3399 = _3326;
                            _3400 = _3401;
                        }
                    }
                    frontier_phi_71_pred = _3326;
                    frontier_phi_71_pred_1 = _3325;
                    frontier_phi_71_pred_2 = _3324;
                    frontier_phi_71_pred_3 = _3323;
                    frontier_phi_71_pred_4 = _3322;
                    frontier_phi_71_pred_5 = _3321;
                }
                _3107 = frontier_phi_71_pred;
                _3105 = frontier_phi_71_pred_1;
                _3103 = frontier_phi_71_pred_2;
                _3101 = frontier_phi_71_pred_3;
                _3099 = frontier_phi_71_pred_4;
                _3097 = frontier_phi_71_pred_5;
                uint _3256 = _3255 + 1u;
                if (_3256 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3249 = _3097;
                    _3250 = _3099;
                    _3251 = _3101;
                    _3252 = _3103;
                    _3253 = _3105;
                    _3254 = _3107;
                    _3255 = _3256;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3096 = _3097;
            _3098 = _3099;
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
        }
        uvec4 _3110 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3111 = _3110.z;
        uint _3113 = (_3111 >> 8u) & 15u;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        if (((4294967295u << _3113) & _3016) == 0u)
        {
            _3217 = _3096;
            _3219 = _3098;
            _3221 = _3100;
            _3223 = _3102;
            _3225 = _3104;
            _3227 = _3106;
        }
        else
        {
            float _3242 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
            float _3243 = _3242 * _2075;
            float _3244 = _3242 * _2076;
            float _3245 = _3242 * _2077;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3113 < ((_3111 >> 12u) & 15u))
            {
                float _3218;
                float _3220;
                float _3222;
                float _3224;
                float _3226;
                float _3228;
                float _3377 = _3096;
                float _3378 = _3098;
                float _3379 = _3100;
                float _3380 = _3102;
                float _3381 = _3104;
                float _3382 = _3106;
                uint _3383 = _3113;
                uint _3392;
                bool _3393;
                for (;;)
                {
                    _3392 = texelFetch(g_lightClassification, int((((_3010 << 5u) + (_2996 << 9u)) + (_3383 << 2u)) >> 2u)).x;
                    _3393 = _3392 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3393)
                    {
                        frontier_phi_82_pred = _3382;
                        frontier_phi_82_pred_1 = _3381;
                        frontier_phi_82_pred_2 = _3380;
                        frontier_phi_82_pred_3 = _3379;
                        frontier_phi_82_pred_4 = _3378;
                        frontier_phi_82_pred_5 = _3377;
                    }
                    else
                    {
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _3883;
                        float _3598 = _3377;
                        float _3599 = _3378;
                        float _3600 = _3379;
                        float _3601 = _3380;
                        float _3602 = _3381;
                        float _3603 = _3382;
                        uint _3604 = _3392;
                        uint _3605;
                        vec4 _3630;
                        float _3631;
                        vec4 _3646;
                        vec3 _3658;
                        vec4 _3673;
                        vec4 _3688;
                        float _3734;
                        bool _3735;
                        for (;;)
                        {
                            uint _3615 = ((_3383 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3604));
                            _3605 = (_3604 + 4294967295u) & _3604;
                            uint _3617 = _3615 * 40u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            _3631 = _3630.w;
                            uint _3633 = (_3615 * 40u) + 4u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3648 = (_3615 * 40u) + 8u;
                            _3658 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x));
                            uint _3660 = (_3615 * 40u) + 16u;
                            _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            uint _3675 = (_3615 * 40u) + 20u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            uint _3690 = (_3615 * 40u) + 24u;
                            vec4 _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            uint _3709 = (_3615 * 40u) + 28u;
                            vec4 _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            _3734 = fma(_2077, _3722.z, fma(_2076, _3722.y, _3722.x * _2075)) + _3722.w;
                            _3735 = !((fma(_2077, _3703.z, fma(_2076, _3703.y, _3703.x * _2075)) + _3703.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3735)
                            {
                                float _3762 = _3630.x - _2075;
                                float _3763 = _3630.y - _2076;
                                float _3764 = _3630.z - _2077;
                                float _3765 = dot(vec3(_3762, _3763, _3764), vec3(_3762, _3763, _3764));
                                float _3768 = inversesqrt(_3765);
                                float _3769 = _3768 * _3762;
                                float _3770 = _3768 * _3763;
                                float _3771 = _3768 * _3764;
                                float _3775 = 1.0 - (_3765 / (_3631 * _3631));
                                float _4997 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3776 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3780 = sqrt(_3765) * _3646.w;
                                float _3782 = 1.39999997615814208984375 / (_3780 + 1.39999997615814208984375);
                                float _3783 = _3782 * _3782;
                                float _3786 = ((1.0 - _3783) * dot(vec3(_3769, _3770, _3771), vec3(_911, _914, _917))) + _3783;
                                float _3789 = _3780 * _3780;
                                float _3793 = (fma(_2077, _3673.z, fma(_2076, _3673.y, _3673.x * _2075)) + _3673.w) / _3734;
                                float _3794 = (fma(_2077, _3688.z, fma(_2076, _3688.y, _3688.x * _2075)) + _3688.w) / _3734;
                                float _3798 = 1.0 - dot(vec2(_3793, _3794), vec2(_3793, _3794));
                                float _5013 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3799 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
                                float _3800 = _3799 * (((isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0))) * _3776) / ((_3789 * 0.699999988079071044921875) + 1.0));
                                float _3812 = exp2(log2(1.0 / ((_3789 * 3.5) + 5.0)) * 0.25);
                                float _3813 = 1.0 - _986;
                                float _3820 = sqrt(1.0 - ((1.0 - (_3813 * _3813)) * (1.0 - (_3812 * _3812))));
                                float _3821 = _3820 * _3820;
                                float _3822 = _3821 * _3821;
                                float _3823 = _3769 - _3243;
                                float _3824 = _3770 - _3244;
                                float _3825 = _3771 - _3245;
                                float _3829 = inversesqrt(dot(vec3(_3823, _3824, _3825), vec3(_3823, _3824, _3825)));
                                float _3833 = dot(vec3(_911, _914, _917), vec3((-0.0) - _3243, (-0.0) - _3244, (-0.0) - _3245));
                                float _5024 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3836 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                                float _3837 = dot(vec3(_911, _914, _917), vec3(_3829 * _3823, _3829 * _3824, _3829 * _3825));
                                float _5035 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3840 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
                                float _3844 = ((_3840 * _3840) * (_3822 + (-1.0))) + 1.0;
                                float _3845 = _3782 * _3821;
                                float _3846 = _3845 * _3845;
                                float _3852 = ((1.0 - _3846) * dot(vec3(_911, _914, _917), vec3(_3769, _3770, _3771))) + _3846;
                                float _5046 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3853 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                                float _3854 = 1.0 - _3821;
                                float _3864 = (0.5 / (((_3853 * ((_3836 * _3854) + _3821)) + 9.9999999392252902907785028219223e-09) + (((_3853 * _3854) + _3821) * _3836))) * _3853;
                                float _5057 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3874 = (_3799 * _3776) * (((_3822 * 3.1415927410125732421875) * (isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0)))) / ((_3844 * _3844) * ((_3789 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3800 * _3646.z;
                                frontier_phi_88_pred_1 = _3800 * _3646.y;
                                frontier_phi_88_pred_2 = _3800 * _3646.x;
                                frontier_phi_88_pred_3 = _3874 * _3658.z;
                                frontier_phi_88_pred_4 = _3874 * _3658.y;
                                frontier_phi_88_pred_5 = _3874 * _3658.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3883 = frontier_phi_88_pred;
                            _3882 = frontier_phi_88_pred_1;
                            _3881 = frontier_phi_88_pred_2;
                            _3880 = frontier_phi_88_pred_3;
                            _3879 = frontier_phi_88_pred_4;
                            _3878 = frontier_phi_88_pred_5;
                            _3588 = _3881 + _3601;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            _3585 = _3878 + _3598;
                            _3586 = _3879 + _3599;
                            _3587 = _3880 + _3600;
                            if (_3605 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3605;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3590;
                        frontier_phi_82_pred_1 = _3589;
                        frontier_phi_82_pred_2 = _3588;
                        frontier_phi_82_pred_3 = _3587;
                        frontier_phi_82_pred_4 = _3586;
                        frontier_phi_82_pred_5 = _3585;
                    }
                    _3228 = frontier_phi_82_pred;
                    _3226 = frontier_phi_82_pred_1;
                    _3224 = frontier_phi_82_pred_2;
                    _3222 = frontier_phi_82_pred_3;
                    _3220 = frontier_phi_82_pred_4;
                    _3218 = frontier_phi_82_pred_5;
                    uint _3384 = _3383 + 1u;
                    if (_3384 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3377 = _3218;
                        _3378 = _3220;
                        _3379 = _3222;
                        _3380 = _3224;
                        _3381 = _3226;
                        _3382 = _3228;
                        _3383 = _3384;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3224;
                frontier_phi_63_64_ladder_1 = _3228;
                frontier_phi_63_64_ladder_2 = _3226;
                frontier_phi_63_64_ladder_3 = _3222;
                frontier_phi_63_64_ladder_4 = _3220;
                frontier_phi_63_64_ladder_5 = _3218;
            }
            else
            {
                frontier_phi_63_64_ladder = _3102;
                frontier_phi_63_64_ladder_1 = _3106;
                frontier_phi_63_64_ladder_2 = _3104;
                frontier_phi_63_64_ladder_3 = _3100;
                frontier_phi_63_64_ladder_4 = _3098;
                frontier_phi_63_64_ladder_5 = _3096;
            }
            _3217 = frontier_phi_63_64_ladder_5;
            _3219 = frontier_phi_63_64_ladder_4;
            _3221 = frontier_phi_63_64_ladder_3;
            _3223 = frontier_phi_63_64_ladder;
            _3225 = frontier_phi_63_64_ladder_2;
            _3227 = frontier_phi_63_64_ladder_1;
        }
        float _3232 = isnan(1.0) ? _970 : (isnan(_970) ? 1.0 : min(_970, 1.0));
        _3029 = (_3232 * _3223) + _2541;
        _3031 = (_3232 * _3225) + _2543;
        _3033 = (_3232 * _3227) + _2545;
        _3035 = ((_3217 * _954) * _3232) + _2879;
        _3037 = ((_3219 * _956) * _3232) + _2881;
        _3039 = ((_3221 * _957) * _3232) + _2883;
    }
    else
    {
        _3029 = _2541;
        _3031 = _2543;
        _3033 = _2545;
        _3035 = _2879;
        _3037 = _2881;
        _3039 = _2883;
    }
    float _5073 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _5084 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _5095 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _3056 = ((isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0))) * (_3029 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _970))) + ((_3035 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _3057 = ((isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0))) * (_3031 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _970))) + ((_3037 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _3058 = ((isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0))) * (_3033 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _970))) + ((_3039 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    uint _3059 = _276 + 6u;
    float _3067 = _892 / cbSceneParam._m0[86u].x;
    float _3068 = _893 / cbSceneParam._m0[86u].y;
    vec4 _3082 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3067, _3068, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3084 = _3082.x;
    float _3085 = _3082.y;
    float _3086 = _3082.z;
    float _3087 = _3082.w;
    float _3159;
    float _3161;
    float _3163;
    float _3165;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _3121 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _3122 = _3121 / _814;
        float _3133 = _3122 * _865;
        float _3134 = _866 * _3122;
        float _3135 = (-0.0) - _3134;
        float _3137 = _3122 * _867;
        float _3139 = (cbSceneParam._m0[77u].w * _3135) / _3121;
        float _3140 = _3139 + cbSceneParam._m0[79u].w;
        float _3141 = cbSceneParam._m0[79u].w - _3134;
        float _3147 = sqrt(((_3133 * _3133) + (_3134 * _3134)) + (_3137 * _3137));
        float _3150 = (1.0 - (cbSceneParam._m0[77u].w / _3121)) * _3147;
        float _3155 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3157 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3334;
        if (abs((_3135 - _3139) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3334 = ((((_3140 > 0.0) ? exp2(_3155 * _3140) : (2.0 - exp2(_3157 * _3140))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3150;
        }
        else
        {
            float _3278 = 1.0 / cbSceneParam._m0[80u].x;
            float _3279 = isnan(_3141) ? _3140 : (isnan(_3140) ? _3141 : max(_3140, _3141));
            float _3280 = isnan(_3141) ? _3140 : (isnan(_3140) ? _3141 : min(_3140, _3141));
            float _3289 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : min(_3279, 0.0));
            float _3290 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : min(_3280, 0.0));
            _3334 = ((abs(_3147 / _3135) * cbSceneParam._m0[80u].y) * ((((_3289 - _3290) * 2.0) - ((exp2(_3155 * (isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0)))) - exp2(_3155 * (isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))))) * _3278)) - ((exp2(_3157 * _3289) - exp2(_3157 * _3290)) * _3278))) + (_3150 * cbSceneParam._m0[80u].z);
        }
        vec4 _3336 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3067, _3068, 1.0), 0.0);
        float _3345 = exp2((_3334 * (-1.44269502162933349609375)) * (1.0 - _3336.w));
        float _3346 = log2(_3345);
        float _3362 = log2(_3087);
        _3159 = (exp2(_3362 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3346 * cbSceneParam._m0[78u].x)) * _3336.x) / cbSceneParam._m0[78u].x)) + _3084;
        _3161 = (exp2(_3362 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3346 * cbSceneParam._m0[78u].y)) * _3336.y) / cbSceneParam._m0[78u].y)) + _3085;
        _3163 = (exp2(_3362 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3346 * cbSceneParam._m0[78u].z)) * _3336.z) / cbSceneParam._m0[78u].z)) + _3086;
        _3165 = _3345 * _3087;
    }
    else
    {
        _3159 = _3084;
        _3161 = _3085;
        _3163 = _3086;
        _3165 = _3087;
    }
    bool _3372;
    vec4 _3175;
    vec4 _3197;
    float _3199;
    float _3203;
    float _3204;
    float _3205;
    float _3206;
    bool _3216;
    for (;;)
    {
        _3175 = cbMatDynParam._m0[0u];
        float _3177 = roundEven(_3175.y);
        bool _3178 = _3177 == 3.0;
        float _3179 = log2(_3165);
        float _3186 = exp2(_3179 * cbSceneParam._m0[78u].x) * _3056;
        float _3187 = exp2(_3179 * cbSceneParam._m0[78u].y) * _3057;
        float _3188 = exp2(_3179 * cbSceneParam._m0[78u].z) * _3058;
        float _3195 = _881 + (-0.5);
        _3197 = cbMtdParam._m0[1u];
        _3199 = _3197.y * _3195;
        float _3202 = (_3177 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3203 = _3202 * (_3178 ? _3186 : (_3186 + (cbSceneParam._m0[72u].w * _3159)));
        _3204 = _3202 * (_3178 ? _3187 : (_3187 + (cbSceneParam._m0[72u].w * _3161)));
        _3205 = _3202 * (_3178 ? _3188 : (_3188 + (cbSceneParam._m0[72u].w * _3163)));
        _3206 = _3195 * 0.999000012874603271484375;
        _3216 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3216)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _3206) < 0.5)
            {
                _3372 = true;
                break;
            }
        }
        uint _3313 = _930 + uint(_3175.w);
        if ((cbInstanceData._m0[_3313].w < 1.0) && ((cbInstanceData._m0[_3313].w + _3206) < 0.5))
        {
            _3372 = true;
            break;
        }
        if ((_3199 + 1.0) < _3197.x)
        {
            _3372 = true;
            break;
        }
        _3372 = false;
        break;
    }
    float _3576;
    if (_3372)
    {
        discard_state = true;
        _3576 = 0.0;
    }
    else
    {
        _3576 = cbInstanceData._m0[_3059].w;
    }
    SV_Target.x = _3203;
    SV_Target.y = _3204;
    SV_Target.z = _3205;
    SV_Target.w = _3576;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3059].w;
    discard_exit();
}


