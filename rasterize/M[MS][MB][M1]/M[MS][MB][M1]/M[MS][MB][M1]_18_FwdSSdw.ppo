#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1141;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _338 = _334.z;
    float _342 = (_334.x * 2.0) + (-1.0);
    float _343 = (_334.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_342, _343), vec2(_342, _343));
    float _3494 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))));
    float _355 = _342 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_308.x * 2.0) + (-1.0)));
    float _356 = _343 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_308.y * 2.0) + (-1.0)));
    vec4 _373 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _375 = _373.x;
    float _376 = 1.0 - _375;
    float _385 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _388 = ((isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : min(_385, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _397 = (_388 - ((((((_375 - _376) * cbMtdParam._m0[24u].z) + _376) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _388))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3515 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _405 = (_398 * (cbMtdParam._m0[17u].x - _288)) + _288;
    float _406 = (_398 * (cbMtdParam._m0[17u].y - _289)) + _289;
    float _407 = (_398 * (cbMtdParam._m0[17u].z - _290)) + _290;
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _422 = _420.x;
    float _423 = 1.0 - _422;
    float _452 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_422 - _423) * cbMtdParam._m0[24u].w) + _423) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3526 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _461 = ((((cbMtdParam._m0[10u].x - _405) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _453) + _405;
    float _462 = ((((cbMtdParam._m0[10u].y - _406) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _453) + _406;
    float _463 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _407)) * _453) + _407;
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _478 = _476.x;
    float _480 = _478 - (_478 * _398);
    float _482 = _480 - (_480 * _453);
    float _487 = (((_308.z - _338) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _338;
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _508 = (_501.x * 2.0) + (-1.0);
    float _509 = (_501.y * 2.0) + (-1.0);
    float _510 = dot(vec2(_508, _509), vec2(_508, _509));
    float _3537 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _518 = (_398 * (_501.z - _487)) + _487;
    float _521 = ((cbMtdParam._m0[23u].y - _518) * _453) + _518;
    vec4 _543 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _549 = (_543.x * 2.0) + (-1.0);
    float _550 = (_543.y * 2.0) + (-1.0);
    float _551 = dot(vec2(_549, _550), vec2(_549, _550));
    float _3548 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _568 = (((_508 - _355) + (cbMtdParam._m0[21u].x * _355)) * _398) + _355;
    float _569 = (((_509 - _356) + (cbMtdParam._m0[21u].x * _356)) * _398) + _356;
    float _570 = (_398 * (sqrt(1.0 - (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) - _350)) + _350;
    float _581 = (((_549 - _568) + (_568 * cbMtdParam._m0[22u].z)) * _453) + _568;
    float _582 = (((_550 - _569) + (_569 * cbMtdParam._m0[22u].z)) * _453) + _569;
    float _583 = ((sqrt(1.0 - (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) - _570) * _453) + _570;
    float _585 = cbMtdParam._m0[22u].x + _334.w;
    float _588 = fma(_583, _230 * NORMAL.x, fma(_582, _237 * TANGENT.x, (_223 * _215) * _581));
    float _591 = fma(_583, _230 * NORMAL.y, fma(_582, _237 * TANGENT.y, (_223 * _216) * _581));
    float _594 = fma(_583, _230 * NORMAL.z, fma(_582, _237 * TANGENT.z, (_223 * _217) * _581));
    float _598 = inversesqrt(dot(vec3(_588, _591, _594), vec3(_588, _591, _594)));
    float _599 = _598 * _588;
    float _600 = _598 * _591;
    float _601 = _598 * _594;
    float _3559 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _602 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _3581 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3592 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3603 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3614 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _607 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _621 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _671 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _661);
    float _672 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _661);
    float _673 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _661);
    float _677 = inversesqrt(dot(vec3(_671, _672, _673), vec3(_671, _672, _673)));
    float _678 = _671 * _677;
    float _679 = _672 * _677;
    float _680 = _673 * _677;
    float _686 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _687 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _708 = fma(_601, cbSceneParam._m0[5u].z, fma(_600, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _599));
    float _711 = fma(_601, cbSceneParam._m0[6u].z, fma(_600, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _599));
    float _714 = fma(_601, cbSceneParam._m0[7u].z, fma(_600, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _599));
    uint _728 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _734 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * cbInstanceData._m0[_728].x;
    float _735 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * cbInstanceData._m0[_728].y;
    float _736 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_728].z;
    float _3625 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _3636 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _738 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _3647 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _740 = 1.0 - _607;
    float _741 = _737 * _740;
    float _742 = _738 * _740;
    float _743 = _739 * _740;
    float _748 = (_737 + (-0.039999999105930328369140625)) * _607;
    float _749 = (_738 + (-0.039999999105930328369140625)) * _607;
    float _750 = (_739 + (-0.039999999105930328369140625)) * _607;
    float _751 = _748 + 0.039999999105930328369140625;
    float _753 = _749 + 0.039999999105930328369140625;
    float _754 = _750 + 0.039999999105930328369140625;
    vec4 _763 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _686, cbSceneParam._m0[86u].y * _687));
    float _767 = ((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * TEXCOORD_5.w) * _763.x;
    float _768 = dot(vec3(_599, _600, _601), vec3(_678, _679, _680));
    float _771 = _768 * 2.0;
    float _775 = (_771 * _599) - _678;
    float _776 = (_771 * _600) - _679;
    float _777 = (_771 * _601) - _680;
    float _781 = abs(dot(vec3(_678, _679, _680), vec3(_599, _600, _601)));
    float _3658 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _783 = sqrt(_602);
    float _796 = exp2((_783 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_783 * 3.0));
    float _802 = (1.0 - _796) * ((_783 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _803 = _796 * _783;
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1140;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _865 = fma(_839, cbModelParam._m0[26u].z, fma(_835, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _831));
        float _869 = fma(_839, cbModelParam._m0[27u].z, fma(_835, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _831));
        float _873 = fma(_839, cbModelParam._m0[28u].z, fma(_835, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _831));
        float _898 = _831 + _599;
        float _899 = _835 + _600;
        float _900 = _839 + _601;
        float _910 = fma(_900, cbModelParam._m0[26u].z, fma(_899, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _898)) - _865;
        float _911 = fma(_900, cbModelParam._m0[27u].z, fma(_899, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _898)) - _869;
        float _912 = fma(_900, cbModelParam._m0[28u].z, fma(_899, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _898)) - _873;
        float _916 = inversesqrt(dot(vec3(_910, _911, _912), vec3(_910, _911, _912)));
        float _929 = ((_916 * _910) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_865 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_916 * _911) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_869 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_916 * _912) / cbModelParam._m0[34u].z) + ((((((_873 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        float _968 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_934.x + (-0.5));
        float _970 = _968 * (_934.y + (-0.5));
        float _971 = _968 * (_934.z + (-0.5));
        float _978 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_941.x + (-0.5));
        float _980 = _978 * (_941.y + (-0.5));
        float _981 = _978 * (_941.z + (-0.5));
        float _988 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_948.x + (-0.5));
        float _990 = _988 * (_948.y + (-0.5));
        float _991 = _988 * (_948.z + (-0.5));
        float _998 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_955.x + (-0.5));
        float _1000 = _998 * (_955.y + (-0.5));
        float _1001 = _998 * (_955.z + (-0.5));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = _969 * 0.5;
        float _1006 = _979 * 0.5;
        float _1007 = _989 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1022 = (dot(vec3(_599, _600, _601), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1032 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3706 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1034 + 1.0))) + _1039) * _1002;
        float _1049 = _970 * 0.5;
        float _1050 = _980 * 0.5;
        float _1051 = _990 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1065 = (dot(vec3(_599, _600, _601), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1074 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _3739 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1076 + 1.0))) + _1081) * _1003;
        float _1091 = _971 * 0.5;
        float _1092 = _981 * 0.5;
        float _1093 = _991 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_599, _600, _601), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3772 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1118 + 1.0))) + _1123) * _1004;
        _1140 = _971;
        _1142 = _970;
        _1143 = _969;
        _1144 = _981;
        _1145 = _980;
        _1146 = _979;
        _1147 = _991;
        _1148 = _990;
        _1149 = _989;
        _1150 = _1004;
        _1151 = _1003;
        _1152 = _1002;
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
    }
    else
    {
        _1140 = _1141;
        _1142 = _1141;
        _1143 = _1141;
        _1144 = _1141;
        _1145 = _1141;
        _1146 = _1141;
        _1147 = _1141;
        _1148 = _1141;
        _1149 = _1141;
        _1150 = _1141;
        _1151 = _1141;
        _1152 = _1141;
        _1153 = 0.0;
        _1154 = 0.0;
        _1155 = 0.0;
    }
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1180 = fma(_839, cbModelParam._m0[30u].z, fma(_835, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _831));
        float _1184 = fma(_839, cbModelParam._m0[31u].z, fma(_835, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _831));
        float _1188 = fma(_839, cbModelParam._m0[32u].z, fma(_835, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _831));
        float _1211 = _831 + _599;
        float _1212 = _835 + _600;
        float _1213 = _839 + _601;
        float _1223 = fma(_1213, cbModelParam._m0[30u].z, fma(_1212, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1211)) - _1180;
        float _1224 = fma(_1213, cbModelParam._m0[31u].z, fma(_1212, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1211)) - _1184;
        float _1225 = fma(_1213, cbModelParam._m0[32u].z, fma(_1212, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1211)) - _1188;
        float _1229 = inversesqrt(dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225)));
        float _1242 = ((_1229 * _1223) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1180 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1229 * _1224) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1184 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1229 * _1225) / cbModelParam._m0[35u].z) + ((((((_1188 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        float _1279 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1246.x + (-0.5));
        float _1281 = _1279 * (_1246.y + (-0.5));
        float _1282 = _1279 * (_1246.z + (-0.5));
        float _1289 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1253.x + (-0.5));
        float _1291 = _1289 * (_1253.y + (-0.5));
        float _1292 = _1289 * (_1253.z + (-0.5));
        float _1299 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1260.x + (-0.5));
        float _1301 = _1299 * (_1260.y + (-0.5));
        float _1302 = _1299 * (_1260.z + (-0.5));
        float _1309 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1267.x + (-0.5));
        float _1311 = _1309 * (_1267.y + (-0.5));
        float _1312 = _1309 * (_1267.z + (-0.5));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = _1280 * 0.5;
        float _1317 = _1290 * 0.5;
        float _1318 = _1300 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_599, _600, _601), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3835 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1343 + 1.0))) + _1348) * _1313;
        float _1358 = _1281 * 0.5;
        float _1359 = _1291 * 0.5;
        float _1360 = _1301 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_599, _600, _601), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _3868 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1385 + 1.0))) + _1390) * _1314;
        float _1400 = _1282 * 0.5;
        float _1401 = _1292 * 0.5;
        float _1402 = _1302 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_599, _600, _601), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3901 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1427 + 1.0))) + _1432) * _1315;
        _1449 = _1282;
        _1450 = _1281;
        _1451 = _1280;
        _1452 = _1292;
        _1453 = _1291;
        _1454 = _1290;
        _1455 = _1302;
        _1456 = _1301;
        _1457 = _1300;
        _1458 = _1315;
        _1459 = _1314;
        _1460 = _1313;
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1462 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
    }
    else
    {
        _1449 = _1141;
        _1450 = _1141;
        _1451 = _1141;
        _1452 = _1141;
        _1453 = _1141;
        _1454 = _1141;
        _1455 = _1141;
        _1456 = _1141;
        _1457 = _1141;
        _1458 = _1141;
        _1459 = _1141;
        _1460 = _1141;
        _1461 = 0.0;
        _1462 = 0.0;
        _1463 = 0.0;
    }
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1153)) + _1153;
    float _1474 = (cbModelParam._m0[1u].x * (_1462 - _1154)) + _1154;
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1155)) + _1155;
    float _1496 = fma(_1475, cbSceneParam._m0[89u].z, fma(_1474, cbSceneParam._m0[89u].y, _1473 * cbSceneParam._m0[89u].x));
    float _1499 = fma(_1475, cbSceneParam._m0[90u].z, fma(_1474, cbSceneParam._m0[90u].y, _1473 * cbSceneParam._m0[90u].x));
    float _1502 = fma(_1475, cbSceneParam._m0[91u].z, fma(_1474, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1473));
    float _1517 = _775 * 0.5;
    float _1518 = _776 * 0.5;
    float _1519 = _777 * 0.5;
    float _1520 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1523 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1450, _1453, _1456, _1459));
    float _1526 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1560;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1533 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1140, _1144, _1147, _1150));
        float _1537 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1142, _1145, _1148, _1151));
        float _1541 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1143, _1146, _1149, _1152));
        float _1548 = dot(vec4(cbModelParam._m0[39u]), vec4(_1517, _1518, _1519, 1.0));
        _1560 = dot(vec3(isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1560 = 1.0;
    }
    float _1571;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1562 = dot(vec4(cbModelParam._m0[40u]), vec4(_1517, _1518, _1519, 1.0));
        _1571 = dot(vec3(isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1562) ? 0.0 : (isnan(0.0) ? _1562 : max(0.0, _1562))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1571 = 1.0;
    }
    float _1575 = (_1571 * cbModelParam._m0[1u].x) + (_1560 * (1.0 - cbModelParam._m0[1u].x));
    float _1585 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _602);
    float _1586 = isnan(_1585) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1585 : min(cbModelParam._m0[25u].z, _1585));
    float _1667;
    float _1669;
    float _1671;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1634 = fma(_839, cbModelParam._m0[13u].z, fma(_835, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _831)) + cbModelParam._m0[13u].w;
        float _1638 = fma(_839, cbModelParam._m0[14u].z, fma(_835, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _831)) + cbModelParam._m0[14u].w;
        float _1642 = fma(_839, cbModelParam._m0[15u].z, fma(_835, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _831)) + cbModelParam._m0[15u].w;
        float _1645 = fma(_777, cbModelParam._m0[13u].z, fma(_776, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _775));
        float _1648 = fma(_777, cbModelParam._m0[14u].z, fma(_776, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _775));
        float _1651 = fma(_777, cbModelParam._m0[15u].z, fma(_776, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _775));
        float _1679;
        if (_1645 > 0.0)
        {
            _1679 = abs((1.0 - _1634) / _1645);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1634 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1679 = frontier_phi_14_12_ladder;
        }
        float _1904;
        if (_1648 > 0.0)
        {
            _1904 = abs((1.0 - _1638) / _1648);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1638 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1904 = frontier_phi_23_19_ladder;
        }
        float _2161;
        if (_1651 > 0.0)
        {
            _2161 = abs((1.0 - _1642) / _1651);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1642 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2161 = frontier_phi_35_30_ladder;
        }
        float _2163 = isnan(_1904) ? _1679 : (isnan(_1679) ? _1904 : min(_1679, _1904));
        float _2164 = isnan(_2161) ? _2163 : (isnan(_2163) ? _2161 : min(_2163, _2161));
        float _2168 = (_2164 * _1645) + _1634;
        float _2169 = (_2164 * _1648) + _1638;
        float _2170 = (_2164 * _1651) + _1642;
        float _2171 = _2164 * 9.9999997473787516355514526367188e-05;
        float _2173 = (-1.0) - _2171;
        float _2175 = _2171 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2170 > _2175) || ((_2170 < _2173) || ((_2169 > _2175) || ((_2169 < _2173) || ((_2168 < _2173) || (_2168 > _2175))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2298 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2170, cbModelParam._m0[9u].z, fma(_2169, cbModelParam._m0[9u].y, _2168 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2170, cbModelParam._m0[10u].z, fma(_2169, cbModelParam._m0[10u].y, _2168 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2170, cbModelParam._m0[11u].z, fma(_2169, cbModelParam._m0[11u].y, _2168 * cbModelParam._m0[11u].x))), _1586);
            frontier_phi_13_35_ladder = _2298.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2298.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2298.x * cbModelParam._m0[1u].y;
        }
        _1667 = frontier_phi_13_35_ladder_2;
        _1669 = frontier_phi_13_35_ladder_1;
        _1671 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1655 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_775, _776, _777), _1586);
        _1667 = _1655.x * cbModelParam._m0[1u].y;
        _1669 = _1655.y * cbModelParam._m0[1u].y;
        _1671 = _1655.z * cbModelParam._m0[1u].y;
    }
    float _1675 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _602);
    float _1676 = isnan(_1675) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1675 : min(cbModelParam._m0[25u].w, _1675));
    float _1766;
    float _1768;
    float _1770;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1730 = fma(_839, cbModelParam._m0[21u].z, fma(_835, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _831)) + cbModelParam._m0[21u].w;
        float _1734 = fma(_839, cbModelParam._m0[22u].z, fma(_835, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _831)) + cbModelParam._m0[22u].w;
        float _1738 = fma(_839, cbModelParam._m0[23u].z, fma(_835, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _831)) + cbModelParam._m0[23u].w;
        float _1741 = fma(_777, cbModelParam._m0[21u].z, fma(_776, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _775));
        float _1744 = fma(_777, cbModelParam._m0[22u].z, fma(_776, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _775));
        float _1747 = fma(_777, cbModelParam._m0[23u].z, fma(_776, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _775));
        float _1909;
        if (_1741 > 0.0)
        {
            _1909 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1909 = frontier_phi_25_21_ladder;
        }
        float _2188;
        if (_1744 > 0.0)
        {
            _2188 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2188 = frontier_phi_37_32_ladder;
        }
        float _2401;
        if (_1747 > 0.0)
        {
            _2401 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2401 = frontier_phi_46_43_ladder;
        }
        float _2403 = isnan(_2188) ? _1909 : (isnan(_1909) ? _2188 : min(_1909, _2188));
        float _2404 = isnan(_2401) ? _2403 : (isnan(_2403) ? _2401 : min(_2403, _2401));
        float _2408 = (_2404 * _1741) + _1730;
        float _2409 = (_2404 * _1744) + _1734;
        float _2410 = (_2404 * _1747) + _1738;
        float _2411 = _2404 * 9.9999997473787516355514526367188e-05;
        float _2412 = (-1.0) - _2411;
        float _2414 = _2411 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2410 > _2414) || ((_2410 < _2412) || ((_2409 > _2414) || ((_2409 < _2412) || ((_2408 < _2412) || (_2408 > _2414))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2609 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2410, cbModelParam._m0[17u].z, fma(_2409, cbModelParam._m0[17u].y, _2408 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2410, cbModelParam._m0[18u].z, fma(_2409, cbModelParam._m0[18u].y, _2408 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2410, cbModelParam._m0[19u].z, fma(_2409, cbModelParam._m0[19u].y, _2408 * cbModelParam._m0[19u].x))), _1676);
            frontier_phi_22_46_ladder = _2609.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2609.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2609.x * cbModelParam._m0[1u].z;
        }
        _1766 = frontier_phi_22_46_ladder_2;
        _1768 = frontier_phi_22_46_ladder_1;
        _1770 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1750 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_775, _776, _777), _1676);
        _1766 = _1750.x * cbModelParam._m0[1u].z;
        _1768 = _1750.y * cbModelParam._m0[1u].z;
        _1770 = _1750.z * cbModelParam._m0[1u].z;
    }
    float _1783 = (((_802 * _751) + _803) * _767) * ((cbModelParam._m0[1u].w * (_1766 - _1667)) + _1667);
    float _1785 = (((_802 * _753) + _803) * _767) * ((cbModelParam._m0[1u].w * (_1768 - _1669)) + _1669);
    float _1787 = (((_802 * _754) + _803) * _767) * ((cbModelParam._m0[1u].w * (_1770 - _1671)) + _1671);
    float _1790 = fma(_1787, cbSceneParam._m0[89u].z, fma(_1785, cbSceneParam._m0[89u].y, _1783 * cbSceneParam._m0[89u].x));
    float _1793 = fma(_1787, cbSceneParam._m0[90u].z, fma(_1785, cbSceneParam._m0[90u].y, _1783 * cbSceneParam._m0[90u].x));
    float _1796 = fma(_1787, cbSceneParam._m0[91u].z, fma(_1785, cbSceneParam._m0[91u].y, _1783 * cbSceneParam._m0[91u].x));
    vec4 _1804 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_686, _687));
    float _1806 = _1804.w;
    float _1818 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1806);
    float _1819 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1806);
    float _1820 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1806);
    uvec4 _1824 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1826 = _1824.x * 14u;
    uint _1827 = _1826 + 13u;
    float _1834 = _767 + (-1.0);
    float _1839 = (cbLight._m0[_1827].x * _1834) + 1.0;
    float _1840 = (cbLight._m0[_1827].y * _1834) + 1.0;
    float _1841 = (cbLight._m0[_1827].z * _1834) + 1.0;
    float _1842 = (cbLight._m0[_1827].w * _1834) + 1.0;
    uint _1843 = _1826 + 5u;
    float _1849 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
    uint _1853 = _1826 + 4u;
    float _1863 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
    uint _1867 = _1826 | 1u;
    float _1878 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_599, _600, _601));
    float _1881 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_599, _600, _601));
    float _4037 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _4048 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1886 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.3183098733425140380859375;
    float _1888 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 0.3183098733425140380859375;
    float _1895 = ((cbLight._m0[_1843].x * _1849) * _1888) + (((cbLight._m0[_1853].x * _1818) * _1863) * _1886);
    float _1896 = ((_1849 * cbLight._m0[_1843].y) * _1888) + (((cbLight._m0[_1853].y * _1819) * _1863) * _1886);
    float _1897 = ((_1849 * cbLight._m0[_1843].z) * _1888) + (((cbLight._m0[_1853].z * _1820) * _1863) * _1886);
    uvec4 _1901 = floatBitsToUint(cbLight._m0[_1826 + 12u]);
    bool _1903 = _1901.x == 0u;
    float _1914;
    float _1916;
    float _1918;
    if (_1903)
    {
        _1914 = _1895;
        _1916 = _1896;
        _1918 = _1897;
    }
    else
    {
        uint _1922 = _1826 + 6u;
        float _1938 = (dot(vec3(cbLight._m0[_1826 + 2u].xyz), vec3(_599, _600, _601)) * 0.5) + 0.5;
        float _1939 = _1938 * _1938;
        float _4059 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1940 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1941 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        _1914 = (((cbLight._m0[_1922].x * 0.3183098733425140380859375) * _1940) * _1941) + _1895;
        _1916 = (((cbLight._m0[_1922].y * 0.3183098733425140380859375) * _1940) * _1941) + _1896;
        _1918 = (((cbLight._m0[_1922].z * 0.3183098733425140380859375) * _1940) * _1941) + _1897;
    }
    bool _1921 = _1901.y == 0u;
    float _1959;
    float _1961;
    float _1963;
    if (_1921)
    {
        _1959 = _1914;
        _1961 = _1916;
        _1963 = _1918;
    }
    else
    {
        uint _2132 = _1826 + 7u;
        float _2148 = (dot(vec3(cbLight._m0[_1826 + 3u].xyz), vec3(_599, _600, _601)) * 0.5) + 0.5;
        float _2149 = _2148 * _2148;
        float _4075 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2150 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2151 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _1959 = (((cbLight._m0[_2132].x * 0.3183098733425140380859375) * _2150) * _2151) + _1914;
        _1961 = (((cbLight._m0[_2132].y * 0.3183098733425140380859375) * _2150) * _2151) + _1916;
        _1963 = (((cbLight._m0[_2132].z * 0.3183098733425140380859375) * _2150) * _2151) + _1918;
    }
    uint _1966 = _1826 + 8u;
    float _1979 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1826].w)) * _602) * 0.949999988079071044921875);
    float _1980 = _1979 * _1979;
    float _1981 = cbLight._m0[_1826].x + _678;
    float _1982 = cbLight._m0[_1826].y + _679;
    float _1983 = cbLight._m0[_1826].z + _680;
    float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
    float _1988 = _1987 * _1981;
    float _1989 = _1987 * _1982;
    float _1990 = _1987 * _1983;
    float _1991 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_1826].xyz));
    float _4091 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _1995 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _1996 = dot(vec3(_599, _600, _601), vec3(_1988, _1989, _1990));
    float _4113 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _2000 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_1988, _1989, _1990));
    float _4124 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2004 = _1980 * _1980;
    float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
    float _2016 = exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0);
    float _2017 = 0.959999978542327880859375 - _748;
    float _2019 = 0.959999978542327880859375 - _749;
    float _2020 = 0.959999978542327880859375 - _750;
    float _2027 = 1.0 - _1980;
    float _2038 = (0.5 / (((_1995 * ((_1994 * _2027) + _1980)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2027) + _1980) * _1994))) * _1994;
    float _4135 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2040 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
    uint _2054 = _1826 + 9u;
    float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _602) * 0.949999988079071044921875);
    float _2066 = _2065 * _2065;
    float _2067 = cbLight._m0[_1867].x + _678;
    float _2068 = cbLight._m0[_1867].y + _679;
    float _2069 = cbLight._m0[_1867].z + _680;
    float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
    float _2074 = _2073 * _2067;
    float _2075 = _2073 * _2068;
    float _2076 = _2073 * _2069;
    float _2077 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_1867].xyz));
    float _4146 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2081 = dot(vec3(_599, _600, _601), vec3(_2074, _2075, _2076));
    float _4157 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2085 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_2074, _2075, _2076));
    float _4168 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2089 = _2066 * _2066;
    float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
    float _2100 = exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0);
    float _2107 = 1.0 - _2066;
    float _2117 = (0.5 / (((_1995 * ((_2080 * _2107) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2107) + _2066) * _2080))) * _2080;
    float _4179 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2119 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
    float _2129 = (((((_2100 * _2017) + _751) * cbLight._m0[_2054].x) * _2119) * _1849) + ((((cbLight._m0[_1966].x * _1818) * ((_2016 * _2017) + _751)) * _2040) * _1863);
    float _2130 = (((((_2100 * _2019) + _753) * cbLight._m0[_2054].y) * _2119) * _1849) + ((((cbLight._m0[_1966].y * _1819) * ((_2016 * _2019) + _753)) * _2040) * _1863);
    float _2131 = (((((_2100 * _2020) + _754) * cbLight._m0[_2054].z) * _2119) * _1849) + ((((cbLight._m0[_1966].z * _1820) * ((_2016 * _2020) + _754)) * _2040) * _1863);
    float _2193;
    float _2195;
    float _2197;
    if (_1903)
    {
        _2193 = _2129;
        _2195 = _2130;
        _2197 = _2131;
    }
    else
    {
        uint _2199 = _1826 + 2u;
        uint _2203 = _1826 + 10u;
        float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _602) * 0.949999988079071044921875);
        float _2218 = _2217 * _2217;
        float _2219 = cbLight._m0[_2199].x + _678;
        float _2220 = cbLight._m0[_2199].y + _679;
        float _2221 = cbLight._m0[_2199].z + _680;
        float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
        float _2226 = _2225 * _2219;
        float _2227 = _2225 * _2220;
        float _2228 = _2225 * _2221;
        float _2229 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_2199].xyz));
        float _4190 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2233 = dot(vec3(_599, _600, _601), vec3(_2226, _2227, _2228));
        float _4201 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2237 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2226, _2227, _2228));
        float _4212 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2241 = _2218 * _2218;
        float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
        float _2252 = exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0);
        float _2259 = 1.0 - _2218;
        float _2269 = (0.5 / (((_1995 * ((_2232 * _2259) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2259) + _2218) * _2232))) * _2232;
        float _4223 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2271 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
        float _2272 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        _2193 = (((((_2252 * _2017) + _751) * cbLight._m0[_2203].x) * _2271) * _2272) + _2129;
        _2195 = (((((_2252 * _2019) + _753) * cbLight._m0[_2203].y) * _2271) * _2272) + _2130;
        _2197 = (((((_2252 * _2020) + _754) * cbLight._m0[_2203].z) * _2271) * _2272) + _2131;
    }
    float _2307;
    float _2309;
    float _2311;
    if (_1921)
    {
        _2307 = _2193;
        _2309 = _2195;
        _2311 = _2197;
    }
    else
    {
        uint _2318 = _1826 + 3u;
        uint _2322 = _1826 + 11u;
        float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2318].w)) * _602) * 0.949999988079071044921875);
        float _2337 = _2336 * _2336;
        float _2338 = cbLight._m0[_2318].x + _678;
        float _2339 = cbLight._m0[_2318].y + _679;
        float _2340 = cbLight._m0[_2318].z + _680;
        float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
        float _2345 = _2344 * _2338;
        float _2346 = _2344 * _2339;
        float _2347 = _2344 * _2340;
        float _2348 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_2318].xyz));
        float _4239 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2352 = dot(vec3(_599, _600, _601), vec3(_2345, _2346, _2347));
        float _4250 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2356 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2345, _2346, _2347));
        float _4261 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2360 = _2337 * _2337;
        float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
        float _2371 = exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0);
        float _2378 = 1.0 - _2337;
        float _2388 = (0.5 / (((_1995 * ((_2351 * _2378) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2378) + _2337) * _2351))) * _2351;
        float _4272 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2390 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
        float _2391 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2307 = (((((_2371 * _2017) + _751) * cbLight._m0[_2322].x) * _2390) * _2391) + _2193;
        _2309 = (((((_2371 * _2019) + _753) * cbLight._m0[_2322].y) * _2390) * _2391) + _2195;
        _2311 = (((((_2371 * _2020) + _754) * cbLight._m0[_2322].z) * _2390) * _2391) + _2197;
    }
    float _2526;
    float _2528;
    float _2530;
    float _2532;
    float _2534;
    float _2536;
    if (_1824.y == 0u)
    {
        float _2466 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2467 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2466;
        float _2468 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2466;
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2466;
        uvec4 _2481 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2482 = _2481.x;
        uint _2493 = uint((float(_2481.y) * floor(float(uint(cbSceneParam._m0[85u].y * _687) / _2482))) + floor(float(uint(cbSceneParam._m0[85u].x * _686) / _2482)));
        float _2503 = (log2(_2469 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2504 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        uint _2507 = uint(isnan(14.0) ? _2504 : (isnan(_2504) ? 14.0 : min(_2504, 14.0)));
        uvec4 _2512 = texelFetch(g_lightClusterGridBuffer, int(((_2507 << 2u) + (_2493 << 6u)) >> 2u));
        uint _2513 = _2512.x;
        uint _2514 = _2481.z;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        if (((((1u << ((_2514 >> 4u) & 15u)) + 4294967295u) & _2513) == 0u) || ((_2514 & 240u) == 0u))
        {
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
        }
        else
        {
            float _2615;
            float _2617;
            float _2619;
            float _2621;
            float _2623;
            float _2625;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            uint _2765 = 0u;
            uint _2774;
            bool _2775;
            for (;;)
            {
                _2774 = texelFetch(g_lightClassification, int((((_2507 << 5u) + (_2493 << 9u)) + (_2765 << 2u)) >> 2u)).x;
                _2775 = _2774 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2775)
                {
                    frontier_phi_61_pred = _2759;
                    frontier_phi_61_pred_1 = _2764;
                    frontier_phi_61_pred_2 = _2763;
                    frontier_phi_61_pred_3 = _2762;
                    frontier_phi_61_pred_4 = _2761;
                    frontier_phi_61_pred_5 = _2760;
                }
                else
                {
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    uint _2889;
                    _2883 = _2759;
                    _2884 = _2760;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2774;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    for (;;)
                    {
                        uint _2893 = uint(findLSB(_2889)) + (_2765 << 5u);
                        uint _2890 = (_2889 + 4294967295u) & _2889;
                        uint _2895 = _2893 * 48u;
                        vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 3u)).x));
                        uint _2915 = (_2893 * 48u) + 4u;
                        vec4 _2928 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2915)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 3u)).x));
                        uint _2934 = (_2893 * 48u) + 8u;
                        vec3 _2945 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2934)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 2u)).x));
                        float _2949 = _2909.x - _2467;
                        float _2950 = _2909.y - _2468;
                        float _2951 = _2909.z - _2469;
                        float _2952 = dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951));
                        float _2955 = inversesqrt(_2952);
                        float _2956 = _2955 * _2949;
                        float _2957 = _2955 * _2950;
                        float _2958 = _2955 * _2951;
                        float _2959 = dot(vec3(_708, _711, _714), vec3(_2956, _2957, _2958));
                        float _2964 = 1.0 - (_2952 * _2909.w);
                        float _4298 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2965 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                        float _2966 = sqrt(_2952) * _2928.w;
                        float _2969 = 1.39999997615814208984375 / (_2966 + 1.39999997615814208984375);
                        float _2970 = _2969 * _2969;
                        float _2973 = ((1.0 - _2970) * _2959) + _2970;
                        float _2976 = _2966 * _2966;
                        float _2980 = ((isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))) * _2965) / ((_2976 * 0.699999988079071044921875) + 1.0);
                        float _2984 = (-0.0) - _2467;
                        float _2985 = (-0.0) - _2468;
                        float _2986 = (-0.0) - _2469;
                        float _2990 = inversesqrt(dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986)));
                        float _2991 = _2990 * _2984;
                        float _2992 = _2990 * _2985;
                        float _2993 = _2990 * _2986;
                        float _3001 = exp2(log2(1.0 / ((_2976 * 3.5) + 5.0)) * 0.25);
                        float _3002 = 1.0 - _783;
                        float _3009 = sqrt(1.0 - ((1.0 - (_3002 * _3002)) * (1.0 - (_3001 * _3001))));
                        float _3010 = _3009 * _3009;
                        float _3011 = _3010 * _3010;
                        float _3012 = _2991 + _2956;
                        float _3013 = _2992 + _2957;
                        float _3014 = _2993 + _2958;
                        float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                        float _3022 = dot(vec3(_708, _711, _714), vec3(_2991, _2992, _2993));
                        float _4314 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3025 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _3026 = dot(vec3(_708, _711, _714), vec3(_3018 * _3012, _3018 * _3013, _3018 * _3014));
                        float _4325 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3029 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3033 = ((_3029 * _3029) * (_3011 + (-1.0))) + 1.0;
                        float _3034 = _2969 * _3010;
                        float _3035 = _3034 * _3034;
                        float _3038 = ((1.0 - _3035) * _2959) + _3035;
                        float _4336 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3039 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3040 = 1.0 - _3010;
                        float _3050 = (0.5 / (((_3039 * ((_3025 * _3040) + _3010)) + 9.9999999392252902907785028219223e-09) + (((_3039 * _3040) + _3010) * _3025))) * _3039;
                        float _4347 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3061 = (((_3011 * 3.1415927410125732421875) * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) / ((_3033 * _3033) * ((_2976 * 2.1991131305694580078125) + 3.141590118408203125))) * _2965;
                        _2818 = (_2980 * _2928.x) + _2886;
                        _2819 = (_2980 * _2928.y) + _2887;
                        _2820 = (_2980 * _2928.z) + _2888;
                        _2815 = (_3061 * _2945.x) + _2883;
                        _2816 = (_3061 * _2945.y) + _2884;
                        _2817 = (_3061 * _2945.z) + _2885;
                        if (_2890 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2883 = _2815;
                            _2884 = _2816;
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2890;
                        }
                    }
                    frontier_phi_61_pred = _2815;
                    frontier_phi_61_pred_1 = _2820;
                    frontier_phi_61_pred_2 = _2819;
                    frontier_phi_61_pred_3 = _2818;
                    frontier_phi_61_pred_4 = _2817;
                    frontier_phi_61_pred_5 = _2816;
                }
                _2615 = frontier_phi_61_pred;
                _2625 = frontier_phi_61_pred_1;
                _2623 = frontier_phi_61_pred_2;
                _2621 = frontier_phi_61_pred_3;
                _2619 = frontier_phi_61_pred_4;
                _2617 = frontier_phi_61_pred_5;
                uint _2766 = _2765 + 1u;
                if (_2766 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2759 = _2615;
                    _2760 = _2617;
                    _2761 = _2619;
                    _2762 = _2621;
                    _2763 = _2623;
                    _2764 = _2625;
                    _2765 = _2766;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
        }
        uvec4 _2628 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2629 = _2628.z;
        uint _2631 = (_2629 >> 8u) & 15u;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        if (((4294967295u << _2631) & _2513) == 0u)
        {
            _2727 = _2614;
            _2729 = _2616;
            _2731 = _2618;
            _2733 = _2620;
            _2735 = _2622;
            _2737 = _2624;
        }
        else
        {
            float _2752 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
            float _2753 = _2752 * _2467;
            float _2754 = _2752 * _2468;
            float _2755 = _2752 * _2469;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2631 < ((_2629 >> 12u) & 15u))
            {
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2866 = _2614;
                float _2867 = _2616;
                float _2868 = _2618;
                float _2869 = _2620;
                float _2870 = _2622;
                float _2871 = _2624;
                uint _2872 = _2631;
                uint _2881;
                bool _2882;
                for (;;)
                {
                    _2881 = texelFetch(g_lightClassification, int((((_2507 << 5u) + (_2493 << 9u)) + (_2872 << 2u)) >> 2u)).x;
                    _2882 = _2881 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2882)
                    {
                        frontier_phi_67_pred = _2869;
                        frontier_phi_67_pred_1 = _2870;
                        frontier_phi_67_pred_2 = _2871;
                        frontier_phi_67_pred_3 = _2868;
                        frontier_phi_67_pred_4 = _2867;
                        frontier_phi_67_pred_5 = _2866;
                    }
                    else
                    {
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3079 = _2866;
                        float _3080 = _2867;
                        float _3081 = _2868;
                        float _3082 = _2869;
                        float _3083 = _2870;
                        float _3084 = _2871;
                        uint _3085 = _2881;
                        uint _3086;
                        vec4 _3111;
                        float _3112;
                        vec4 _3127;
                        vec3 _3139;
                        vec4 _3155;
                        vec4 _3170;
                        float _3216;
                        bool _3217;
                        for (;;)
                        {
                            uint _3096 = ((_2872 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3085));
                            _3086 = (_3085 + 4294967295u) & _3085;
                            uint _3098 = _3096 * 40u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            _3112 = _3111.w;
                            uint _3114 = (_3096 * 40u) + 4u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3129 = (_3096 * 40u) + 8u;
                            _3139 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x));
                            uint _3142 = (_3096 * 40u) + 16u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3157 = (_3096 * 40u) + 20u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3172 = (_3096 * 40u) + 24u;
                            vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3191 = (_3096 * 40u) + 28u;
                            vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            _3216 = fma(_2469, _3204.z, fma(_2468, _3204.y, _3204.x * _2467)) + _3204.w;
                            _3217 = !((fma(_2469, _3185.z, fma(_2468, _3185.y, _3185.x * _2467)) + _3185.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3217)
                            {
                                float _3244 = _3111.x - _2467;
                                float _3245 = _3111.y - _2468;
                                float _3246 = _3111.z - _2469;
                                float _3247 = dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246));
                                float _3250 = inversesqrt(_3247);
                                float _3251 = _3250 * _3244;
                                float _3252 = _3250 * _3245;
                                float _3253 = _3250 * _3246;
                                float _3257 = 1.0 - (_3247 / (_3112 * _3112));
                                float _4358 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3262 = sqrt(_3247) * _3127.w;
                                float _3264 = 1.39999997615814208984375 / (_3262 + 1.39999997615814208984375);
                                float _3265 = _3264 * _3264;
                                float _3268 = ((1.0 - _3265) * dot(vec3(_3251, _3252, _3253), vec3(_708, _711, _714))) + _3265;
                                float _3271 = _3262 * _3262;
                                float _3275 = (fma(_2469, _3155.z, fma(_2468, _3155.y, _3155.x * _2467)) + _3155.w) / _3216;
                                float _3276 = (fma(_2469, _3170.z, fma(_2468, _3170.y, _3170.x * _2467)) + _3170.w) / _3216;
                                float _3280 = 1.0 - dot(vec2(_3275, _3276), vec2(_3275, _3276));
                                float _4374 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3282 = _3281 * (((isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0))) * _3258) / ((_3271 * 0.699999988079071044921875) + 1.0));
                                float _3294 = exp2(log2(1.0 / ((_3271 * 3.5) + 5.0)) * 0.25);
                                float _3295 = 1.0 - _783;
                                float _3302 = sqrt(1.0 - ((1.0 - (_3295 * _3295)) * (1.0 - (_3294 * _3294))));
                                float _3303 = _3302 * _3302;
                                float _3304 = _3303 * _3303;
                                float _3305 = _3251 - _2753;
                                float _3306 = _3252 - _2754;
                                float _3307 = _3253 - _2755;
                                float _3311 = inversesqrt(dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307)));
                                float _3315 = dot(vec3(_708, _711, _714), vec3((-0.0) - _2753, (-0.0) - _2754, (-0.0) - _2755));
                                float _4385 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3318 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3319 = dot(vec3(_708, _711, _714), vec3(_3311 * _3305, _3311 * _3306, _3311 * _3307));
                                float _4396 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3322 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3326 = ((_3322 * _3322) * (_3304 + (-1.0))) + 1.0;
                                float _3327 = _3264 * _3303;
                                float _3328 = _3327 * _3327;
                                float _3334 = ((1.0 - _3328) * dot(vec3(_708, _711, _714), vec3(_3251, _3252, _3253))) + _3328;
                                float _4407 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3335 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3336 = 1.0 - _3303;
                                float _3346 = (0.5 / (((_3335 * ((_3318 * _3336) + _3303)) + 9.9999999392252902907785028219223e-09) + (((_3335 * _3336) + _3303) * _3318))) * _3335;
                                float _4418 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3356 = (_3281 * _3258) * (((_3304 * 3.1415927410125732421875) * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) / ((_3326 * _3326) * ((_3271 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3356 * _3139.x;
                                frontier_phi_73_pred_1 = _3356 * _3139.y;
                                frontier_phi_73_pred_2 = _3282 * _3127.z;
                                frontier_phi_73_pred_3 = _3282 * _3127.y;
                                frontier_phi_73_pred_4 = _3282 * _3127.x;
                                frontier_phi_73_pred_5 = _3356 * _3139.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3360 = frontier_phi_73_pred;
                            _3361 = frontier_phi_73_pred_1;
                            _3365 = frontier_phi_73_pred_2;
                            _3364 = frontier_phi_73_pred_3;
                            _3363 = frontier_phi_73_pred_4;
                            _3362 = frontier_phi_73_pred_5;
                            _3069 = _3363 + _3082;
                            _3070 = _3364 + _3083;
                            _3071 = _3365 + _3084;
                            _3066 = _3360 + _3079;
                            _3067 = _3361 + _3080;
                            _3068 = _3362 + _3081;
                            if (_3086 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3086;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3069;
                        frontier_phi_67_pred_1 = _3070;
                        frontier_phi_67_pred_2 = _3071;
                        frontier_phi_67_pred_3 = _3068;
                        frontier_phi_67_pred_4 = _3067;
                        frontier_phi_67_pred_5 = _3066;
                    }
                    _2734 = frontier_phi_67_pred;
                    _2736 = frontier_phi_67_pred_1;
                    _2738 = frontier_phi_67_pred_2;
                    _2732 = frontier_phi_67_pred_3;
                    _2730 = frontier_phi_67_pred_4;
                    _2728 = frontier_phi_67_pred_5;
                    uint _2873 = _2872 + 1u;
                    if (_2873 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2866 = _2728;
                        _2867 = _2730;
                        _2868 = _2732;
                        _2869 = _2734;
                        _2870 = _2736;
                        _2871 = _2738;
                        _2872 = _2873;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2736;
                frontier_phi_55_56_ladder_1 = _2738;
                frontier_phi_55_56_ladder_2 = _2734;
                frontier_phi_55_56_ladder_3 = _2732;
                frontier_phi_55_56_ladder_4 = _2730;
                frontier_phi_55_56_ladder_5 = _2728;
            }
            else
            {
                frontier_phi_55_56_ladder = _2622;
                frontier_phi_55_56_ladder_1 = _2624;
                frontier_phi_55_56_ladder_2 = _2620;
                frontier_phi_55_56_ladder_3 = _2618;
                frontier_phi_55_56_ladder_4 = _2616;
                frontier_phi_55_56_ladder_5 = _2614;
            }
            _2727 = frontier_phi_55_56_ladder_5;
            _2729 = frontier_phi_55_56_ladder_4;
            _2731 = frontier_phi_55_56_ladder_3;
            _2733 = frontier_phi_55_56_ladder_2;
            _2735 = frontier_phi_55_56_ladder;
            _2737 = frontier_phi_55_56_ladder_1;
        }
        float _2742 = isnan(1.0) ? _767 : (isnan(_767) ? 1.0 : min(_767, 1.0));
        _2526 = (_2742 * _2733) + _1959;
        _2528 = (_2742 * _2735) + _1961;
        _2530 = (_2742 * _2737) + _1963;
        _2532 = ((_2727 * _751) * _2742) + _2307;
        _2534 = ((_2729 * _753) * _2742) + _2309;
        _2536 = ((_2731 * _754) * _2742) + _2311;
    }
    else
    {
        _2526 = _1959;
        _2528 = _1961;
        _2530 = _1963;
        _2532 = _2307;
        _2534 = _2309;
        _2536 = _2311;
    }
    float _4434 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4445 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4456 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    uint _2556 = _243 + 6u;
    float _2564 = _686 / cbSceneParam._m0[86u].x;
    float _2565 = _687 / cbSceneParam._m0[86u].y;
    vec4 _2579 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2564, _2565, (log2((isnan(cbSceneParam._m0[77u].w) ? _621 : (isnan(_621) ? cbSceneParam._m0[77u].w : min(_621, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2581 = _2579.x;
    float _2582 = _2579.y;
    float _2583 = _2579.z;
    float _2584 = _2579.w;
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    if (_621 > cbSceneParam._m0[78u].w)
    {
        float _2639 = isnan(_621) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _621 : min(cbSceneParam._m0[80u].w, _621));
        float _2640 = _2639 / _621;
        float _2651 = _2640 * _671;
        float _2652 = _672 * _2640;
        float _2653 = (-0.0) - _2652;
        float _2655 = _2640 * _673;
        float _2657 = (cbSceneParam._m0[77u].w * _2653) / _2639;
        float _2658 = _2657 + cbSceneParam._m0[79u].w;
        float _2659 = cbSceneParam._m0[79u].w - _2652;
        float _2665 = sqrt(((_2651 * _2651) + (_2652 * _2652)) + (_2655 * _2655));
        float _2668 = (1.0 - (cbSceneParam._m0[77u].w / _2639)) * _2665;
        float _2673 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2675 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2828;
        if (abs((_2653 - _2657) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2828 = ((((_2658 > 0.0) ? exp2(_2673 * _2658) : (2.0 - exp2(_2675 * _2658))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2668;
        }
        else
        {
            float _2788 = 1.0 / cbSceneParam._m0[80u].x;
            float _2789 = isnan(_2659) ? _2658 : (isnan(_2658) ? _2659 : max(_2658, _2659));
            float _2790 = isnan(_2659) ? _2658 : (isnan(_2658) ? _2659 : min(_2658, _2659));
            float _2799 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : min(_2789, 0.0));
            float _2800 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : min(_2790, 0.0));
            _2828 = ((abs(_2665 / _2653) * cbSceneParam._m0[80u].y) * ((((_2799 - _2800) * 2.0) - ((exp2(_2673 * (isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0)))) - exp2(_2673 * (isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0))))) * _2788)) - ((exp2(_2675 * _2799) - exp2(_2675 * _2800)) * _2788))) + (_2668 * cbSceneParam._m0[80u].z);
        }
        vec4 _2830 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2564, _2565, 1.0), 0.0);
        float _2839 = exp2((_2828 * (-1.44269502162933349609375)) * (1.0 - _2830.w));
        float _2840 = log2(_2839);
        float _2856 = log2(_2584);
        _2677 = (exp2(_2856 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].x)) * _2830.x) / cbSceneParam._m0[78u].x)) + _2581;
        _2679 = (exp2(_2856 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].y)) * _2830.y) / cbSceneParam._m0[78u].y)) + _2582;
        _2681 = (exp2(_2856 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].z)) * _2830.z) / cbSceneParam._m0[78u].z)) + _2583;
        _2683 = _2839 * _2584;
    }
    else
    {
        _2677 = _2581;
        _2679 = _2582;
        _2681 = _2583;
        _2683 = _2584;
    }
    float _2695 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2696 = _2695 == 3.0;
    float _2697 = log2(_2683);
    float _2704 = exp2(_2697 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2526 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _767))) + ((_2532 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1575)) * cbPerFrame._m0[3u].x));
    float _2705 = exp2(_2697 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2528 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _767))) + ((_2534 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1575)) * cbPerFrame._m0[3u].x));
    float _2706 = exp2(_2697 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2530 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _767))) + ((_2536 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1575)) * cbPerFrame._m0[3u].x));
    float _2715 = (_2695 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2715 * (_2696 ? _2704 : (_2704 + (cbSceneParam._m0[72u].w * _2677)));
    SV_Target.y = _2715 * (_2696 ? _2705 : (_2705 + (cbSceneParam._m0[72u].w * _2679)));
    SV_Target.z = _2715 * (_2696 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2681)));
    SV_Target.w = cbInstanceData._m0[_2556].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2556].w;
}


