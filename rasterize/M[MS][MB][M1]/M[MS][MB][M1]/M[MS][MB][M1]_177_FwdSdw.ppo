#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1351;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _369 = _367.x;
    float _381 = dot(vec4(_369, _367.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _398 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_369 - _381) * cbMtdParam._m0[24u].y) + _381) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3961 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _406 = (_399 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _407 = (_399 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _408 = (_399 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _457 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _471 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_447 - _457) * cbMtdParam._m0[24u].y) + _457) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3972 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _479 = (_472 * ((_425.x * cbMtdParam._m0[13u].x) - _406)) + _406;
    float _480 = (_472 * ((_425.y * cbMtdParam._m0[13u].y) - _407)) + _407;
    float _481 = (_472 * ((_425.z * cbMtdParam._m0[13u].z) - _408)) + _408;
    vec4 _493 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _533 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _535 = _533.x;
    float _536 = _533.y;
    float _537 = _533.z;
    float _544 = ((_516.x - _535) * _399) + _535;
    float _545 = ((_516.y - _536) * _399) + _536;
    float _546 = ((_516.z - _537) * _399) + _537;
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _571 = ((_558.z - _546) * _472) + _546;
    float _574 = ((((_558.x - _544) * _472) + _544) * 2.0) + (-1.0);
    float _575 = ((((_558.y - _545) * _472) + _545) * 2.0) + (-1.0);
    float _576 = dot(vec2(_574, _575), vec2(_574, _575));
    float _3983 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _581 = sqrt(1.0 - (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))));
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _613 = (_574 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_493.x * 2.0) + (-1.0)))) + (((_601.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _614 = (_575 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_493.y * 2.0) + (-1.0)))) + (((_601.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _628 = _626.x;
    float _629 = 1.0 - _628;
    float _657 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_628 - _629) * cbMtdParam._m0[24u].w) + _629) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3994 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _658 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _666 = ((((cbMtdParam._m0[10u].x - _479) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _658) + _479;
    float _667 = ((((cbMtdParam._m0[10u].y - _480) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _658) + _480;
    float _668 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _481)) * _658) + _481;
    vec4 _680 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _694 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _696 = _694.x;
    float _714 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _696) * _399) + _696;
    float _732 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _714) * _472) + _714;
    float _736 = ((_680.x - _732) * cbMtdParam._m0[19u].z) + _732;
    float _738 = _736 - (_736 * _658);
    float _743 = (((_493.z - _571) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _571;
    float _747 = ((_601.z - _743) * cbMtdParam._m0[19u].w) + _743;
    float _751 = ((cbMtdParam._m0[23u].y - _747) * _658) + _747;
    vec4 _770 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _776 = (_770.x * 2.0) + (-1.0);
    float _777 = (_770.y * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _4005 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _794 = (_658 * (((cbMtdParam._m0[22u].z * _613) - _613) + _776)) + _613;
    float _795 = (_658 * (((cbMtdParam._m0[22u].z * _614) - _614) + _777)) + _614;
    float _796 = (_658 * (sqrt(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) - _581)) + _581;
    float _798 = cbMtdParam._m0[22u].x + _601.w;
    float _801 = fma(_796, _248 * NORMAL.x, fma(_795, _255 * TANGENT.x, (_241 * _233) * _794));
    float _804 = fma(_796, _248 * NORMAL.y, fma(_795, _255 * TANGENT.y, (_241 * _234) * _794));
    float _807 = fma(_796, _248 * NORMAL.z, fma(_795, _255 * TANGENT.z, (_241 * _235) * _794));
    float _811 = inversesqrt(dot(vec3(_801, _804, _807), vec3(_801, _804, _807)));
    float _812 = _811 * _801;
    float _813 = _811 * _804;
    float _814 = _811 * _807;
    float _4016 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _815 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4038 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4049 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4060 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4071 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _820 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _834 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _884 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _874);
    float _885 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _874);
    float _886 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _874);
    float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
    float _891 = _884 * _890;
    float _892 = _885 * _890;
    float _893 = _886 * _890;
    float _899 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _900 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _918 = fma(_814, cbSceneParam._m0[5u].z, fma(_813, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _812));
    float _921 = fma(_814, cbSceneParam._m0[6u].z, fma(_813, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _812));
    float _924 = fma(_814, cbSceneParam._m0[7u].z, fma(_813, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _812));
    uint _938 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _944 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * cbInstanceData._m0[_938].x;
    float _945 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_938].y;
    float _946 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * cbInstanceData._m0[_938].z;
    float _4082 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _950 = 1.0 - _820;
    float _951 = _947 * _950;
    float _952 = _948 * _950;
    float _953 = _949 * _950;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _820;
    float _959 = (_948 + (-0.039999999105930328369140625)) * _820;
    float _960 = (_949 + (-0.039999999105930328369140625)) * _820;
    float _961 = _958 + 0.039999999105930328369140625;
    float _963 = _959 + 0.039999999105930328369140625;
    float _964 = _960 + 0.039999999105930328369140625;
    vec4 _973 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _899, cbSceneParam._m0[86u].y * _900));
    float _977 = ((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * TEXCOORD_5.w) * _973.x;
    float _978 = dot(vec3(_812, _813, _814), vec3(_891, _892, _893));
    float _981 = _978 * 2.0;
    float _985 = (_981 * _812) - _891;
    float _986 = (_981 * _813) - _892;
    float _987 = (_981 * _814) - _893;
    float _991 = abs(dot(vec3(_891, _892, _893), vec3(_812, _813, _814)));
    float _4115 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _993 = sqrt(_815);
    float _1006 = exp2((_993 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_993 * 3.0));
    float _1012 = (1.0 - _1006) * ((_993 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1013 = _1006 * _993;
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1350;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1075 = fma(_1049, cbModelParam._m0[26u].z, fma(_1045, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041));
        float _1079 = fma(_1049, cbModelParam._m0[27u].z, fma(_1045, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041));
        float _1083 = fma(_1049, cbModelParam._m0[28u].z, fma(_1045, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041));
        float _1108 = _1041 + _812;
        float _1109 = _1045 + _813;
        float _1110 = _1049 + _814;
        float _1120 = fma(_1110, cbModelParam._m0[26u].z, fma(_1109, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1108)) - _1075;
        float _1121 = fma(_1110, cbModelParam._m0[27u].z, fma(_1109, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1108)) - _1079;
        float _1122 = fma(_1110, cbModelParam._m0[28u].z, fma(_1109, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1108)) - _1083;
        float _1126 = inversesqrt(dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122)));
        float _1139 = ((_1126 * _1120) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1075 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1126 * _1121) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1079 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1126 * _1122) / cbModelParam._m0[34u].z) + ((((((_1083 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        float _1178 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1144.x + (-0.5));
        float _1180 = _1178 * (_1144.y + (-0.5));
        float _1181 = _1178 * (_1144.z + (-0.5));
        float _1188 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1151.x + (-0.5));
        float _1190 = _1188 * (_1151.y + (-0.5));
        float _1191 = _1188 * (_1151.z + (-0.5));
        float _1198 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1158.x + (-0.5));
        float _1200 = _1198 * (_1158.y + (-0.5));
        float _1201 = _1198 * (_1158.z + (-0.5));
        float _1208 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1165.x + (-0.5));
        float _1210 = _1208 * (_1165.y + (-0.5));
        float _1211 = _1208 * (_1165.z + (-0.5));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = _1179 * 0.5;
        float _1216 = _1189 * 0.5;
        float _1217 = _1199 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1232 = (dot(vec3(_812, _813, _814), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1242 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _4163 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1244 + 1.0))) + _1249) * _1212;
        float _1259 = _1180 * 0.5;
        float _1260 = _1190 * 0.5;
        float _1261 = _1200 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_812, _813, _814), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4196 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1286 + 1.0))) + _1291) * _1213;
        float _1301 = _1181 * 0.5;
        float _1302 = _1191 * 0.5;
        float _1303 = _1201 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_812, _813, _814), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4229 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1328 + 1.0))) + _1333) * _1214;
        _1350 = _1181;
        _1352 = _1180;
        _1353 = _1179;
        _1354 = _1191;
        _1355 = _1190;
        _1356 = _1189;
        _1357 = _1201;
        _1358 = _1200;
        _1359 = _1199;
        _1360 = _1214;
        _1361 = _1213;
        _1362 = _1212;
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
    }
    else
    {
        _1350 = _1351;
        _1352 = _1351;
        _1353 = _1351;
        _1354 = _1351;
        _1355 = _1351;
        _1356 = _1351;
        _1357 = _1351;
        _1358 = _1351;
        _1359 = _1351;
        _1360 = _1351;
        _1361 = _1351;
        _1362 = _1351;
        _1363 = 0.0;
        _1364 = 0.0;
        _1365 = 0.0;
    }
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1389 = fma(_1049, cbModelParam._m0[30u].z, fma(_1045, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041));
        float _1393 = fma(_1049, cbModelParam._m0[31u].z, fma(_1045, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041));
        float _1397 = fma(_1049, cbModelParam._m0[32u].z, fma(_1045, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041));
        float _1420 = _1041 + _812;
        float _1421 = _1045 + _813;
        float _1422 = _1049 + _814;
        float _1432 = fma(_1422, cbModelParam._m0[30u].z, fma(_1421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1420)) - _1389;
        float _1433 = fma(_1422, cbModelParam._m0[31u].z, fma(_1421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1420)) - _1393;
        float _1434 = fma(_1422, cbModelParam._m0[32u].z, fma(_1421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1420)) - _1397;
        float _1438 = inversesqrt(dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434)));
        float _1451 = ((_1438 * _1432) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1389 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1438 * _1433) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1393 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1438 * _1434) / cbModelParam._m0[35u].z) + ((((((_1397 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        float _1488 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1455.x + (-0.5));
        float _1490 = _1488 * (_1455.y + (-0.5));
        float _1491 = _1488 * (_1455.z + (-0.5));
        float _1498 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1462.x + (-0.5));
        float _1500 = _1498 * (_1462.y + (-0.5));
        float _1501 = _1498 * (_1462.z + (-0.5));
        float _1508 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1469.x + (-0.5));
        float _1510 = _1508 * (_1469.y + (-0.5));
        float _1511 = _1508 * (_1469.z + (-0.5));
        float _1518 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1476.x + (-0.5));
        float _1520 = _1518 * (_1476.y + (-0.5));
        float _1521 = _1518 * (_1476.z + (-0.5));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = _1489 * 0.5;
        float _1526 = _1499 * 0.5;
        float _1527 = _1509 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_812, _813, _814), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4292 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1552 + 1.0))) + _1557) * _1522;
        float _1567 = _1490 * 0.5;
        float _1568 = _1500 * 0.5;
        float _1569 = _1510 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_812, _813, _814), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4325 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1594 + 1.0))) + _1599) * _1523;
        float _1609 = _1491 * 0.5;
        float _1610 = _1501 * 0.5;
        float _1611 = _1511 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_812, _813, _814), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4358 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1636 + 1.0))) + _1641) * _1524;
        _1658 = _1491;
        _1659 = _1490;
        _1660 = _1489;
        _1661 = _1501;
        _1662 = _1500;
        _1663 = _1499;
        _1664 = _1511;
        _1665 = _1510;
        _1666 = _1509;
        _1667 = _1524;
        _1668 = _1523;
        _1669 = _1522;
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
    }
    else
    {
        _1658 = _1351;
        _1659 = _1351;
        _1660 = _1351;
        _1661 = _1351;
        _1662 = _1351;
        _1663 = _1351;
        _1664 = _1351;
        _1665 = _1351;
        _1666 = _1351;
        _1667 = _1351;
        _1668 = _1351;
        _1669 = _1351;
        _1670 = 0.0;
        _1671 = 0.0;
        _1672 = 0.0;
    }
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1363)) + _1363;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1364)) + _1364;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1365)) + _1365;
    float _1705 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1682));
    float _1726 = _985 * 0.5;
    float _1727 = _986 * 0.5;
    float _1728 = _987 * 0.5;
    float _1729 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1732 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1735 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1769;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1742 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1350, _1354, _1357, _1360));
        float _1746 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1352, _1355, _1358, _1361));
        float _1750 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1757 = dot(vec4(cbModelParam._m0[39u]), vec4(_1726, _1727, _1728, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1780;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1771 = dot(vec4(cbModelParam._m0[40u]), vec4(_1726, _1727, _1728, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1771) ? 0.0 : (isnan(0.0) ? _1771 : max(0.0, _1771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1784 = (_1780 * cbModelParam._m0[1u].x) + (_1769 * (1.0 - cbModelParam._m0[1u].x));
    float _1794 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _815);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1794 : min(cbModelParam._m0[25u].z, _1794));
    float _1877;
    float _1879;
    float _1881;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1844 = fma(_1049, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1041)) + cbModelParam._m0[13u].w;
        float _1848 = fma(_1049, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1041)) + cbModelParam._m0[14u].w;
        float _1852 = fma(_1049, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1041)) + cbModelParam._m0[15u].w;
        float _1855 = fma(_987, cbModelParam._m0[13u].z, fma(_986, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _985));
        float _1858 = fma(_987, cbModelParam._m0[14u].z, fma(_986, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _985));
        float _1861 = fma(_987, cbModelParam._m0[15u].z, fma(_986, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _985));
        float _1889;
        if (_1855 > 0.0)
        {
            _1889 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1889 = frontier_phi_14_12_ladder;
        }
        float _2061;
        if (_1858 > 0.0)
        {
            _2061 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2061 = frontier_phi_23_19_ladder;
        }
        float _2356;
        if (_1861 > 0.0)
        {
            _2356 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2356 = frontier_phi_35_30_ladder;
        }
        float _2358 = isnan(_2061) ? _1889 : (isnan(_1889) ? _2061 : min(_1889, _2061));
        float _2359 = isnan(_2356) ? _2358 : (isnan(_2358) ? _2356 : min(_2358, _2356));
        float _2363 = (_2359 * _1855) + _1844;
        float _2364 = (_2359 * _1858) + _1848;
        float _2365 = (_2359 * _1861) + _1852;
        float _2366 = _2359 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2366;
        float _2370 = _2366 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 > _2370) || ((_2364 < _2368) || ((_2363 < _2368) || (_2363 > _2370))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2510 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2365, cbModelParam._m0[9u].z, fma(_2364, cbModelParam._m0[9u].y, _2363 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2365, cbModelParam._m0[10u].z, fma(_2364, cbModelParam._m0[10u].y, _2363 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2365, cbModelParam._m0[11u].z, fma(_2364, cbModelParam._m0[11u].y, _2363 * cbModelParam._m0[11u].x))), _1795);
            frontier_phi_13_35_ladder = _2510.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2510.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2510.x * cbModelParam._m0[1u].y;
        }
        _1877 = frontier_phi_13_35_ladder_2;
        _1879 = frontier_phi_13_35_ladder_1;
        _1881 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1865 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_985, _986, _987), _1795);
        _1877 = _1865.x * cbModelParam._m0[1u].y;
        _1879 = _1865.y * cbModelParam._m0[1u].y;
        _1881 = _1865.z * cbModelParam._m0[1u].y;
    }
    float _1885 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _815);
    float _1886 = isnan(_1885) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1885 : min(cbModelParam._m0[25u].w, _1885));
    float _1976;
    float _1978;
    float _1980;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1940 = fma(_1049, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1041)) + cbModelParam._m0[21u].w;
        float _1944 = fma(_1049, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1041)) + cbModelParam._m0[22u].w;
        float _1948 = fma(_1049, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1041)) + cbModelParam._m0[23u].w;
        float _1951 = fma(_987, cbModelParam._m0[21u].z, fma(_986, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _985));
        float _1954 = fma(_987, cbModelParam._m0[22u].z, fma(_986, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _985));
        float _1957 = fma(_987, cbModelParam._m0[23u].z, fma(_986, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _985));
        float _2066;
        if (_1951 > 0.0)
        {
            _2066 = abs((1.0 - _1940) / _1951);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1940 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2066 = frontier_phi_25_21_ladder;
        }
        float _2383;
        if (_1954 > 0.0)
        {
            _2383 = abs((1.0 - _1944) / _1954);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1944 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2383 = frontier_phi_37_32_ladder;
        }
        float _2721;
        if (_1957 > 0.0)
        {
            _2721 = abs((1.0 - _1948) / _1957);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1948 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2721 = frontier_phi_47_44_ladder;
        }
        float _2723 = isnan(_2383) ? _2066 : (isnan(_2066) ? _2383 : min(_2066, _2383));
        float _2724 = isnan(_2721) ? _2723 : (isnan(_2723) ? _2721 : min(_2723, _2721));
        float _2728 = (_2724 * _1951) + _1940;
        float _2729 = (_2724 * _1954) + _1944;
        float _2730 = (_2724 * _1957) + _1948;
        float _2731 = _2724 * 9.9999997473787516355514526367188e-05;
        float _2732 = (-1.0) - _2731;
        float _2734 = _2731 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2730 > _2734) || ((_2730 < _2732) || ((_2729 > _2734) || ((_2729 < _2732) || ((_2728 < _2732) || (_2728 > _2734))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2730, cbModelParam._m0[17u].z, fma(_2729, cbModelParam._m0[17u].y, _2728 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2730, cbModelParam._m0[18u].z, fma(_2729, cbModelParam._m0[18u].y, _2728 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2730, cbModelParam._m0[19u].z, fma(_2729, cbModelParam._m0[19u].y, _2728 * cbModelParam._m0[19u].x))), _1886);
            frontier_phi_22_47_ladder = _2852.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2852.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2852.x * cbModelParam._m0[1u].z;
        }
        _1976 = frontier_phi_22_47_ladder_2;
        _1978 = frontier_phi_22_47_ladder_1;
        _1980 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1960 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_985, _986, _987), _1886);
        _1976 = _1960.x * cbModelParam._m0[1u].z;
        _1978 = _1960.y * cbModelParam._m0[1u].z;
        _1980 = _1960.z * cbModelParam._m0[1u].z;
    }
    float _1993 = (((_1012 * _961) + _1013) * _977) * ((cbModelParam._m0[1u].w * (_1976 - _1877)) + _1877);
    float _1995 = (((_1012 * _963) + _1013) * _977) * ((cbModelParam._m0[1u].w * (_1978 - _1879)) + _1879);
    float _1997 = (((_1012 * _964) + _1013) * _977) * ((cbModelParam._m0[1u].w * (_1980 - _1881)) + _1881);
    float _2000 = fma(_1997, cbSceneParam._m0[89u].z, fma(_1995, cbSceneParam._m0[89u].y, _1993 * cbSceneParam._m0[89u].x));
    float _2003 = fma(_1997, cbSceneParam._m0[90u].z, fma(_1995, cbSceneParam._m0[90u].y, _1993 * cbSceneParam._m0[90u].x));
    float _2006 = fma(_1997, cbSceneParam._m0[91u].z, fma(_1995, cbSceneParam._m0[91u].y, _1993 * cbSceneParam._m0[91u].x));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2052 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2053 = _2040 / _2052;
    float _2054 = _2044 / _2052;
    float _2055 = _2048 / _2052;
    float _2202;
    float _2203;
    float _2204;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2082 = ((uint(_2055 > cbSceneParam._m0[59u].y) + uint(_2055 > cbSceneParam._m0[59u].x)) + uint(_2055 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2083 = _2082 + 43u;
        uint _2091 = _2082 + 44u;
        uint _2099 = _2082 + 45u;
        uint _2107 = _2082 + 46u;
        float _2118 = fma(_2052, cbSceneParam._m0[_2083].w, fma(_2048, cbSceneParam._m0[_2083].z, fma(_2044, cbSceneParam._m0[_2083].y, _2040 * cbSceneParam._m0[_2083].x)));
        float _2122 = fma(_2052, cbSceneParam._m0[_2091].w, fma(_2048, cbSceneParam._m0[_2091].z, fma(_2044, cbSceneParam._m0[_2091].y, _2040 * cbSceneParam._m0[_2091].x)));
        float _2130 = fma(_2052, cbSceneParam._m0[_2107].w, fma(_2048, cbSceneParam._m0[_2107].z, fma(_2044, cbSceneParam._m0[_2107].y, _2040 * cbSceneParam._m0[_2107].x)));
        float _2135 = cbSceneParam._m0[33u].z * _2130;
        float _2137 = cbSceneParam._m0[33u].w * _2130;
        float _2140 = fma(_2052, cbSceneParam._m0[_2099].w, fma(_2048, cbSceneParam._m0[_2099].z, fma(_2044, cbSceneParam._m0[_2099].y, _2040 * cbSceneParam._m0[_2099].x))) / _2130;
        float _2188 = (cbSceneParam._m0[33u].x - sqrt(((_2054 * _2054) + (_2053 * _2053)) + (_2055 * _2055))) * cbSceneParam._m0[33u].y;
        float _4484 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2195 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2135 + _2118) / _2130, (_2137 + _2122) / _2130), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2137 + _2118) / _2130, (_2122 - _2135) / _2130), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2118 - _2135) / _2130, (_2122 - _2137) / _2130), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2118 - _2137) / _2130, (_2135 + _2122) / _2130), _2140), 0.0)).x), vec4(0.25)));
        _2202 = 1.0 - (_2195 * cbSceneParam._m0[34u].x);
        _2203 = 1.0 - (_2195 * cbSceneParam._m0[34u].y);
        _2204 = 1.0 - (_2195 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2202 = 1.0;
        _2203 = 1.0;
        _2204 = 1.0;
    }
    float _2268;
    float _2270;
    float _2272;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2256 = fma(_2052, cbSceneParam._m0[63u].w, fma(_2048, cbSceneParam._m0[63u].z, fma(_2044, cbSceneParam._m0[63u].y, _2040 * cbSceneParam._m0[63u].x)));
        float _2257 = fma(_2052, cbSceneParam._m0[60u].w, fma(_2048, cbSceneParam._m0[60u].z, fma(_2044, cbSceneParam._m0[60u].y, _2040 * cbSceneParam._m0[60u].x))) / _2256;
        float _2258 = fma(_2052, cbSceneParam._m0[61u].w, fma(_2048, cbSceneParam._m0[61u].z, fma(_2044, cbSceneParam._m0[61u].y, _2040 * cbSceneParam._m0[61u].x))) / _2256;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2257 >= cbSceneParam._m0[64u].x) && (_2258 >= cbSceneParam._m0[64u].y)) && (_2257 <= cbSceneParam._m0[64u].z)) && (_2258 <= cbSceneParam._m0[64u].w))
        {
            float _2396 = fma(_2052, cbSceneParam._m0[62u].w, fma(_2048, cbSceneParam._m0[62u].z, fma(_2044, cbSceneParam._m0[62u].y, _2040 * cbSceneParam._m0[62u].x))) / _2256;
            float _2400 = isnan(cbSceneParam._m0[41u].w) ? _2396 : (isnan(_2396) ? cbSceneParam._m0[41u].w : max(_2396, cbSceneParam._m0[41u].w));
            float _2443 = (cbSceneParam._m0[33u].x - sqrt(((_2054 * _2054) + (_2053 * _2053)) + (_2055 * _2055))) * cbSceneParam._m0[33u].y;
            float _4500 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
            float _2450 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2257, cbSceneParam._m0[33u].w + _2258), _2400), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2257, _2258 - cbSceneParam._m0[33u].z), _2400), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2257 - cbSceneParam._m0[33u].z, _2258 - cbSceneParam._m0[33u].w), _2400), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2257 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2258), _2400), 0.0)).x), vec4(0.25)));
            float _2454 = 1.0 - (_2450 * cbSceneParam._m0[34u].x);
            float _2455 = 1.0 - (_2450 * cbSceneParam._m0[34u].y);
            float _2456 = 1.0 - (_2450 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2456) ? _2204 : (isnan(_2204) ? _2456 : min(_2204, _2456));
            frontier_phi_34_33_ladder_1 = isnan(_2455) ? _2203 : (isnan(_2203) ? _2455 : min(_2203, _2455));
            frontier_phi_34_33_ladder_2 = isnan(_2454) ? _2202 : (isnan(_2202) ? _2454 : min(_2202, _2454));
        }
        else
        {
            frontier_phi_34_33_ladder = _2204;
            frontier_phi_34_33_ladder_1 = _2203;
            frontier_phi_34_33_ladder_2 = _2202;
        }
        _2268 = frontier_phi_34_33_ladder_2;
        _2270 = frontier_phi_34_33_ladder_1;
        _2272 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2268 = _2202;
        _2270 = _2203;
        _2272 = _2204;
    }
    uvec4 _2277 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2279 = _2277.x * 14u;
    uint _2280 = _2279 + 13u;
    float _2287 = _977 + (-1.0);
    float _2292 = (cbLight._m0[_2280].x * _2287) + 1.0;
    float _2293 = (cbLight._m0[_2280].y * _2287) + 1.0;
    float _2294 = (cbLight._m0[_2280].z * _2287) + 1.0;
    float _2295 = (cbLight._m0[_2280].w * _2287) + 1.0;
    uint _2296 = _2279 + 5u;
    float _2302 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
    uint _2306 = _2279 + 4u;
    float _2315 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
    uint _2319 = _2279 | 1u;
    float _2330 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_812, _813, _814));
    float _2333 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_812, _813, _814));
    float _4536 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _4547 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2338 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * 0.3183098733425140380859375;
    float _2340 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * 0.3183098733425140380859375;
    float _2347 = ((cbLight._m0[_2296].x * _2302) * _2340) + (((cbLight._m0[_2306].x * _2268) * _2315) * _2338);
    float _2348 = ((_2302 * cbLight._m0[_2296].y) * _2340) + (((cbLight._m0[_2306].y * _2270) * _2315) * _2338);
    float _2349 = ((_2302 * cbLight._m0[_2296].z) * _2340) + (((cbLight._m0[_2306].z * _2272) * _2315) * _2338);
    uvec4 _2353 = floatBitsToUint(cbLight._m0[_2279 + 12u]);
    bool _2355 = _2353.x == 0u;
    float _2457;
    float _2459;
    float _2461;
    if (_2355)
    {
        _2457 = _2347;
        _2459 = _2348;
        _2461 = _2349;
    }
    else
    {
        uint _2465 = _2279 + 6u;
        float _2481 = (dot(vec3(cbLight._m0[_2279 + 2u].xyz), vec3(_812, _813, _814)) * 0.5) + 0.5;
        float _2482 = _2481 * _2481;
        float _4558 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2483 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2484 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
        _2457 = (((cbLight._m0[_2465].x * 0.3183098733425140380859375) * _2483) * _2484) + _2347;
        _2459 = (((cbLight._m0[_2465].y * 0.3183098733425140380859375) * _2483) * _2484) + _2348;
        _2461 = (((cbLight._m0[_2465].z * 0.3183098733425140380859375) * _2483) * _2484) + _2349;
    }
    bool _2464 = _2353.y == 0u;
    float _2519;
    float _2521;
    float _2523;
    if (_2464)
    {
        _2519 = _2457;
        _2521 = _2459;
        _2523 = _2461;
    }
    else
    {
        uint _2692 = _2279 + 7u;
        float _2708 = (dot(vec3(cbLight._m0[_2279 + 3u].xyz), vec3(_812, _813, _814)) * 0.5) + 0.5;
        float _2709 = _2708 * _2708;
        float _4574 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2710 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2711 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2519 = (((cbLight._m0[_2692].x * 0.3183098733425140380859375) * _2710) * _2711) + _2457;
        _2521 = (((cbLight._m0[_2692].y * 0.3183098733425140380859375) * _2710) * _2711) + _2459;
        _2523 = (((cbLight._m0[_2692].z * 0.3183098733425140380859375) * _2710) * _2711) + _2461;
    }
    uint _2526 = _2279 + 8u;
    float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _815) * 0.949999988079071044921875);
    float _2540 = _2539 * _2539;
    float _2541 = cbLight._m0[_2279].x + _891;
    float _2542 = cbLight._m0[_2279].y + _892;
    float _2543 = cbLight._m0[_2279].z + _893;
    float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
    float _2548 = _2547 * _2541;
    float _2549 = _2547 * _2542;
    float _2550 = _2547 * _2543;
    float _2551 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2279].xyz));
    float _4590 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2554 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _4601 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _2555 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2556 = dot(vec3(_812, _813, _814), vec3(_2548, _2549, _2550));
    float _4612 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2559 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2560 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2548, _2549, _2550));
    float _4623 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2564 = _2540 * _2540;
    float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
    float _2576 = exp2(log2(1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * 5.0);
    float _2577 = 0.959999978542327880859375 - _958;
    float _2579 = 0.959999978542327880859375 - _959;
    float _2580 = 0.959999978542327880859375 - _960;
    float _2587 = 1.0 - _2540;
    float _2598 = (0.5 / (((_2555 * ((_2554 * _2587) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2587) + _2540) * _2554))) * _2554;
    float _4634 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2600 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
    uint _2614 = _2279 + 9u;
    float _2625 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _815) * 0.949999988079071044921875);
    float _2626 = _2625 * _2625;
    float _2627 = cbLight._m0[_2319].x + _891;
    float _2628 = cbLight._m0[_2319].y + _892;
    float _2629 = cbLight._m0[_2319].z + _893;
    float _2633 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
    float _2634 = _2633 * _2627;
    float _2635 = _2633 * _2628;
    float _2636 = _2633 * _2629;
    float _2637 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2319].xyz));
    float _4645 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _2641 = dot(vec3(_812, _813, _814), vec3(_2634, _2635, _2636));
    float _4656 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2644 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _2645 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2634, _2635, _2636));
    float _4667 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2649 = _2626 * _2626;
    float _2653 = ((_2644 * _2644) * (_2649 + (-1.0))) + 1.0;
    float _2660 = exp2(log2(1.0 - (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) * 5.0);
    float _2667 = 1.0 - _2626;
    float _2677 = (0.5 / (((_2555 * ((_2640 * _2667) + _2626)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2667) + _2626) * _2640))) * _2640;
    float _4678 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2679 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2649 / ((_2653 * _2653) * 3.141590118408203125));
    float _2689 = (((((_2660 * _2577) + _961) * cbLight._m0[_2614].x) * _2679) * _2302) + ((((cbLight._m0[_2526].x * _2268) * ((_2576 * _2577) + _961)) * _2600) * _2315);
    float _2690 = (((((_2660 * _2579) + _963) * cbLight._m0[_2614].y) * _2679) * _2302) + ((((cbLight._m0[_2526].y * _2270) * ((_2576 * _2579) + _963)) * _2600) * _2315);
    float _2691 = (((((_2660 * _2580) + _964) * cbLight._m0[_2614].z) * _2679) * _2302) + ((((cbLight._m0[_2526].z * _2272) * ((_2576 * _2580) + _964)) * _2600) * _2315);
    float _2747;
    float _2749;
    float _2751;
    if (_2355)
    {
        _2747 = _2689;
        _2749 = _2690;
        _2751 = _2691;
    }
    else
    {
        uint _2753 = _2279 + 2u;
        uint _2757 = _2279 + 10u;
        float _2771 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2753].w)) * _815) * 0.949999988079071044921875);
        float _2772 = _2771 * _2771;
        float _2773 = cbLight._m0[_2753].x + _891;
        float _2774 = cbLight._m0[_2753].y + _892;
        float _2775 = cbLight._m0[_2753].z + _893;
        float _2779 = inversesqrt(dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775)));
        float _2780 = _2779 * _2773;
        float _2781 = _2779 * _2774;
        float _2782 = _2779 * _2775;
        float _2783 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2753].xyz));
        float _4689 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2787 = dot(vec3(_812, _813, _814), vec3(_2780, _2781, _2782));
        float _4700 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2791 = dot(vec3(cbLight._m0[_2753].xyz), vec3(_2780, _2781, _2782));
        float _4711 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2795 = _2772 * _2772;
        float _2799 = ((_2790 * _2790) * (_2795 + (-1.0))) + 1.0;
        float _2806 = exp2(log2(1.0 - (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) * 5.0);
        float _2813 = 1.0 - _2772;
        float _2823 = (0.5 / (((_2555 * ((_2786 * _2813) + _2772)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2813) + _2772) * _2786))) * _2786;
        float _4722 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2825 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2795 / ((_2799 * _2799) * 3.141590118408203125));
        float _2826 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
        _2747 = (((((_2806 * _2577) + _961) * cbLight._m0[_2757].x) * _2825) * _2826) + _2689;
        _2749 = (((((_2806 * _2579) + _963) * cbLight._m0[_2757].y) * _2825) * _2826) + _2690;
        _2751 = (((((_2806 * _2580) + _964) * cbLight._m0[_2757].z) * _2825) * _2826) + _2691;
    }
    float _2857;
    float _2859;
    float _2861;
    if (_2464)
    {
        _2857 = _2747;
        _2859 = _2749;
        _2861 = _2751;
    }
    else
    {
        uint _2868 = _2279 + 3u;
        uint _2872 = _2279 + 11u;
        float _2886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2868].w)) * _815) * 0.949999988079071044921875);
        float _2887 = _2886 * _2886;
        float _2888 = cbLight._m0[_2868].x + _891;
        float _2889 = cbLight._m0[_2868].y + _892;
        float _2890 = cbLight._m0[_2868].z + _893;
        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
        float _2895 = _2894 * _2888;
        float _2896 = _2894 * _2889;
        float _2897 = _2894 * _2890;
        float _2898 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2868].xyz));
        float _4738 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2901 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2902 = dot(vec3(_812, _813, _814), vec3(_2895, _2896, _2897));
        float _4749 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2906 = dot(vec3(cbLight._m0[_2868].xyz), vec3(_2895, _2896, _2897));
        float _4760 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2910 = _2887 * _2887;
        float _2914 = ((_2905 * _2905) * (_2910 + (-1.0))) + 1.0;
        float _2921 = exp2(log2(1.0 - (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) * 5.0);
        float _2928 = 1.0 - _2887;
        float _2938 = (0.5 / (((_2555 * ((_2901 * _2928) + _2887)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2928) + _2887) * _2901))) * _2901;
        float _4771 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2940 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2910 / ((_2914 * _2914) * 3.141590118408203125));
        float _2941 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2857 = (((((_2921 * _2577) + _961) * cbLight._m0[_2872].x) * _2940) * _2941) + _2747;
        _2859 = (((((_2921 * _2579) + _963) * cbLight._m0[_2872].y) * _2940) * _2941) + _2749;
        _2861 = (((((_2921 * _2580) + _964) * cbLight._m0[_2872].z) * _2940) * _2941) + _2751;
    }
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    if (_2277.y == 0u)
    {
        uvec4 _2962 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2963 = _2962.x;
        uint _2974 = uint((float(_2962.y) * floor(float(uint(cbSceneParam._m0[85u].y * _900) / _2963))) + floor(float(uint(cbSceneParam._m0[85u].x * _899) / _2963)));
        float _2984 = (log2(_2055 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2985 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        uint _2988 = uint(isnan(14.0) ? _2985 : (isnan(_2985) ? 14.0 : min(_2985, 14.0)));
        uvec4 _2993 = texelFetch(g_lightClusterGridBuffer, int(((_2988 << 2u) + (_2974 << 6u)) >> 2u));
        uint _2994 = _2993.x;
        uint _2995 = _2962.z;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        if (((((1u << ((_2995 >> 4u) & 15u)) + 4294967295u) & _2994) == 0u) || ((_2995 & 240u) == 0u))
        {
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
        }
        else
        {
            float _3075;
            float _3077;
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            uint _3225 = 0u;
            uint _3234;
            bool _3235;
            for (;;)
            {
                _3234 = texelFetch(g_lightClassification, int((((_2988 << 5u) + (_2974 << 9u)) + (_3225 << 2u)) >> 2u)).x;
                _3235 = _3234 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3235)
                {
                    frontier_phi_66_pred = _3224;
                    frontier_phi_66_pred_1 = _3223;
                    frontier_phi_66_pred_2 = _3222;
                    frontier_phi_66_pred_3 = _3221;
                    frontier_phi_66_pred_4 = _3220;
                    frontier_phi_66_pred_5 = _3219;
                }
                else
                {
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    uint _3349;
                    _3343 = _3219;
                    _3344 = _3220;
                    _3345 = _3221;
                    _3346 = _3222;
                    _3347 = _3223;
                    _3348 = _3224;
                    _3349 = _3234;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    for (;;)
                    {
                        uint _3353 = uint(findLSB(_3349)) + (_3225 << 5u);
                        uint _3350 = (_3349 + 4294967295u) & _3349;
                        uint _3355 = _3353 * 48u;
                        vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 3u)).x));
                        uint _3375 = (_3353 * 48u) + 4u;
                        vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 3u)).x));
                        uint _3394 = (_3353 * 48u) + 8u;
                        vec3 _3405 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x));
                        float _3409 = _3369.x - _2053;
                        float _3410 = _3369.y - _2054;
                        float _3411 = _3369.z - _2055;
                        float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                        float _3415 = inversesqrt(_3412);
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3419 = dot(vec3(_918, _921, _924), vec3(_3416, _3417, _3418));
                        float _3424 = 1.0 - (_3412 * _3369.w);
                        float _4797 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3425 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3426 = sqrt(_3412) * _3388.w;
                        float _3429 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3419) + _3430;
                        float _3436 = _3426 * _3426;
                        float _3440 = ((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3425) / ((_3436 * 0.699999988079071044921875) + 1.0);
                        float _3444 = (-0.0) - _2053;
                        float _3445 = (-0.0) - _2054;
                        float _3446 = (-0.0) - _2055;
                        float _3450 = inversesqrt(dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446)));
                        float _3451 = _3450 * _3444;
                        float _3452 = _3450 * _3445;
                        float _3453 = _3450 * _3446;
                        float _3460 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                        float _3461 = 1.0 - _993;
                        float _3468 = sqrt(1.0 - ((1.0 - (_3461 * _3461)) * (1.0 - (_3460 * _3460))));
                        float _3469 = _3468 * _3468;
                        float _3470 = _3469 * _3469;
                        float _3471 = _3451 + _3416;
                        float _3472 = _3452 + _3417;
                        float _3473 = _3453 + _3418;
                        float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                        float _3481 = dot(vec3(_918, _921, _924), vec3(_3451, _3452, _3453));
                        float _4813 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3484 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                        float _3485 = dot(vec3(_918, _921, _924), vec3(_3477 * _3471, _3477 * _3472, _3477 * _3473));
                        float _4824 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3488 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                        float _3492 = ((_3488 * _3488) * (_3470 + (-1.0))) + 1.0;
                        float _3493 = _3429 * _3469;
                        float _3494 = _3493 * _3493;
                        float _3497 = ((1.0 - _3494) * _3419) + _3494;
                        float _4835 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3498 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                        float _3499 = 1.0 - _3469;
                        float _3509 = (0.5 / (((_3498 * ((_3484 * _3499) + _3469)) + 9.9999999392252902907785028219223e-09) + (((_3498 * _3499) + _3469) * _3484))) * _3498;
                        float _4846 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3520 = (((_3470 * 3.1415927410125732421875) * (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) / ((_3492 * _3492) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125))) * _3425;
                        _3278 = (_3440 * _3388.x) + _3346;
                        _3279 = (_3440 * _3388.y) + _3347;
                        _3280 = (_3440 * _3388.z) + _3348;
                        _3275 = (_3520 * _3405.x) + _3343;
                        _3276 = (_3520 * _3405.y) + _3344;
                        _3277 = (_3520 * _3405.z) + _3345;
                        if (_3350 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3343 = _3275;
                            _3344 = _3276;
                            _3345 = _3277;
                            _3346 = _3278;
                            _3347 = _3279;
                            _3348 = _3280;
                            _3349 = _3350;
                        }
                    }
                    frontier_phi_66_pred = _3280;
                    frontier_phi_66_pred_1 = _3279;
                    frontier_phi_66_pred_2 = _3278;
                    frontier_phi_66_pred_3 = _3277;
                    frontier_phi_66_pred_4 = _3276;
                    frontier_phi_66_pred_5 = _3275;
                }
                _3085 = frontier_phi_66_pred;
                _3083 = frontier_phi_66_pred_1;
                _3081 = frontier_phi_66_pred_2;
                _3079 = frontier_phi_66_pred_3;
                _3077 = frontier_phi_66_pred_4;
                _3075 = frontier_phi_66_pred_5;
                uint _3226 = _3225 + 1u;
                if (_3226 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3219 = _3075;
                    _3220 = _3077;
                    _3221 = _3079;
                    _3222 = _3081;
                    _3223 = _3083;
                    _3224 = _3085;
                    _3225 = _3226;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
        }
        uvec4 _3088 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3089 = _3088.z;
        uint _3091 = (_3089 >> 8u) & 15u;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        if (((4294967295u << _3091) & _2994) == 0u)
        {
            _3187 = _3074;
            _3189 = _3076;
            _3191 = _3078;
            _3193 = _3080;
            _3195 = _3082;
            _3197 = _3084;
        }
        else
        {
            float _3212 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
            float _3213 = _3212 * _2053;
            float _3214 = _3212 * _2054;
            float _3215 = _3212 * _2055;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3091 < ((_3089 >> 12u) & 15u))
            {
                float _3188;
                float _3190;
                float _3192;
                float _3194;
                float _3196;
                float _3198;
                float _3326 = _3074;
                float _3327 = _3076;
                float _3328 = _3078;
                float _3329 = _3080;
                float _3330 = _3082;
                float _3331 = _3084;
                uint _3332 = _3091;
                uint _3341;
                bool _3342;
                for (;;)
                {
                    _3341 = texelFetch(g_lightClassification, int((((_2988 << 5u) + (_2974 << 9u)) + (_3332 << 2u)) >> 2u)).x;
                    _3342 = _3341 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3342)
                    {
                        frontier_phi_72_pred = _3331;
                        frontier_phi_72_pred_1 = _3330;
                        frontier_phi_72_pred_2 = _3329;
                        frontier_phi_72_pred_3 = _3328;
                        frontier_phi_72_pred_4 = _3327;
                        frontier_phi_72_pred_5 = _3326;
                    }
                    else
                    {
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3818;
                        float _3819;
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3538 = _3326;
                        float _3539 = _3327;
                        float _3540 = _3328;
                        float _3541 = _3329;
                        float _3542 = _3330;
                        float _3543 = _3331;
                        uint _3544 = _3341;
                        uint _3545;
                        vec4 _3570;
                        float _3571;
                        vec4 _3586;
                        vec3 _3598;
                        vec4 _3613;
                        vec4 _3628;
                        float _3674;
                        bool _3675;
                        for (;;)
                        {
                            uint _3555 = ((_3332 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3544));
                            _3545 = (_3544 + 4294967295u) & _3544;
                            uint _3557 = _3555 * 40u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            _3571 = _3570.w;
                            uint _3573 = (_3555 * 40u) + 4u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3588 = (_3555 * 40u) + 8u;
                            _3598 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x));
                            uint _3600 = (_3555 * 40u) + 16u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3615 = (_3555 * 40u) + 20u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3630 = (_3555 * 40u) + 24u;
                            vec4 _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            uint _3649 = (_3555 * 40u) + 28u;
                            vec4 _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            _3674 = fma(_2055, _3662.z, fma(_2054, _3662.y, _3662.x * _2053)) + _3662.w;
                            _3675 = !((fma(_2055, _3643.z, fma(_2054, _3643.y, _3643.x * _2053)) + _3643.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3675)
                            {
                                float _3702 = _3570.x - _2053;
                                float _3703 = _3570.y - _2054;
                                float _3704 = _3570.z - _2055;
                                float _3705 = dot(vec3(_3702, _3703, _3704), vec3(_3702, _3703, _3704));
                                float _3708 = inversesqrt(_3705);
                                float _3709 = _3708 * _3702;
                                float _3710 = _3708 * _3703;
                                float _3711 = _3708 * _3704;
                                float _3715 = 1.0 - (_3705 / (_3571 * _3571));
                                float _4857 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3716 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3720 = sqrt(_3705) * _3586.w;
                                float _3722 = 1.39999997615814208984375 / (_3720 + 1.39999997615814208984375);
                                float _3723 = _3722 * _3722;
                                float _3726 = ((1.0 - _3723) * dot(vec3(_3709, _3710, _3711), vec3(_918, _921, _924))) + _3723;
                                float _3729 = _3720 * _3720;
                                float _3733 = (fma(_2055, _3613.z, fma(_2054, _3613.y, _3613.x * _2053)) + _3613.w) / _3674;
                                float _3734 = (fma(_2055, _3628.z, fma(_2054, _3628.y, _3628.x * _2053)) + _3628.w) / _3674;
                                float _3738 = 1.0 - dot(vec2(_3733, _3734), vec2(_3733, _3734));
                                float _4873 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3740 = _3739 * (((isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0))) * _3716) / ((_3729 * 0.699999988079071044921875) + 1.0));
                                float _3752 = exp2(log2(1.0 / ((_3729 * 3.5) + 5.0)) * 0.25);
                                float _3753 = 1.0 - _993;
                                float _3760 = sqrt(1.0 - ((1.0 - (_3753 * _3753)) * (1.0 - (_3752 * _3752))));
                                float _3761 = _3760 * _3760;
                                float _3762 = _3761 * _3761;
                                float _3763 = _3709 - _3213;
                                float _3764 = _3710 - _3214;
                                float _3765 = _3711 - _3215;
                                float _3769 = inversesqrt(dot(vec3(_3763, _3764, _3765), vec3(_3763, _3764, _3765)));
                                float _3773 = dot(vec3(_918, _921, _924), vec3((-0.0) - _3213, (-0.0) - _3214, (-0.0) - _3215));
                                float _4884 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3776 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3777 = dot(vec3(_918, _921, _924), vec3(_3769 * _3763, _3769 * _3764, _3769 * _3765));
                                float _4895 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3780 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3784 = ((_3780 * _3780) * (_3762 + (-1.0))) + 1.0;
                                float _3785 = _3722 * _3761;
                                float _3786 = _3785 * _3785;
                                float _3792 = ((1.0 - _3786) * dot(vec3(_918, _921, _924), vec3(_3709, _3710, _3711))) + _3786;
                                float _4906 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3793 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3794 = 1.0 - _3761;
                                float _3804 = (0.5 / (((_3793 * ((_3776 * _3794) + _3761)) + 9.9999999392252902907785028219223e-09) + (((_3793 * _3794) + _3761) * _3776))) * _3793;
                                float _4917 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3814 = (_3739 * _3716) * (((_3762 * 3.1415927410125732421875) * (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) / ((_3784 * _3784) * ((_3729 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3740 * _3586.y;
                                frontier_phi_78_pred_1 = _3740 * _3586.x;
                                frontier_phi_78_pred_2 = _3814 * _3598.z;
                                frontier_phi_78_pred_3 = _3814 * _3598.y;
                                frontier_phi_78_pred_4 = _3814 * _3598.x;
                                frontier_phi_78_pred_5 = _3740 * _3586.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3822 = frontier_phi_78_pred;
                            _3821 = frontier_phi_78_pred_1;
                            _3820 = frontier_phi_78_pred_2;
                            _3819 = frontier_phi_78_pred_3;
                            _3818 = frontier_phi_78_pred_4;
                            _3823 = frontier_phi_78_pred_5;
                            _3528 = _3821 + _3541;
                            _3529 = _3822 + _3542;
                            _3530 = _3823 + _3543;
                            _3525 = _3818 + _3538;
                            _3526 = _3819 + _3539;
                            _3527 = _3820 + _3540;
                            if (_3545 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3538 = _3525;
                                _3539 = _3526;
                                _3540 = _3527;
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3545;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3530;
                        frontier_phi_72_pred_1 = _3529;
                        frontier_phi_72_pred_2 = _3528;
                        frontier_phi_72_pred_3 = _3527;
                        frontier_phi_72_pred_4 = _3526;
                        frontier_phi_72_pred_5 = _3525;
                    }
                    _3198 = frontier_phi_72_pred;
                    _3196 = frontier_phi_72_pred_1;
                    _3194 = frontier_phi_72_pred_2;
                    _3192 = frontier_phi_72_pred_3;
                    _3190 = frontier_phi_72_pred_4;
                    _3188 = frontier_phi_72_pred_5;
                    uint _3333 = _3332 + 1u;
                    if (_3333 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3326 = _3188;
                        _3327 = _3190;
                        _3328 = _3192;
                        _3329 = _3194;
                        _3330 = _3196;
                        _3331 = _3198;
                        _3332 = _3333;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3198;
                frontier_phi_60_61_ladder_1 = _3196;
                frontier_phi_60_61_ladder_2 = _3192;
                frontier_phi_60_61_ladder_3 = _3190;
                frontier_phi_60_61_ladder_4 = _3188;
                frontier_phi_60_61_ladder_5 = _3194;
            }
            else
            {
                frontier_phi_60_61_ladder = _3084;
                frontier_phi_60_61_ladder_1 = _3082;
                frontier_phi_60_61_ladder_2 = _3078;
                frontier_phi_60_61_ladder_3 = _3076;
                frontier_phi_60_61_ladder_4 = _3074;
                frontier_phi_60_61_ladder_5 = _3080;
            }
            _3187 = frontier_phi_60_61_ladder_4;
            _3189 = frontier_phi_60_61_ladder_3;
            _3191 = frontier_phi_60_61_ladder_2;
            _3193 = frontier_phi_60_61_ladder_5;
            _3195 = frontier_phi_60_61_ladder_1;
            _3197 = frontier_phi_60_61_ladder;
        }
        float _3202 = isnan(1.0) ? _977 : (isnan(_977) ? 1.0 : min(_977, 1.0));
        _3007 = (_3202 * _3193) + _2519;
        _3009 = (_3202 * _3195) + _2521;
        _3011 = (_3202 * _3197) + _2523;
        _3013 = ((_3187 * _961) * _3202) + _2857;
        _3015 = ((_3189 * _963) * _3202) + _2859;
        _3017 = ((_3191 * _964) * _3202) + _2861;
    }
    else
    {
        _3007 = _2519;
        _3009 = _2521;
        _3011 = _2523;
        _3013 = _2857;
        _3015 = _2859;
        _3017 = _2861;
    }
    float _4933 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _4944 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _4955 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    uint _3037 = _261 + 6u;
    float _3045 = _899 / cbSceneParam._m0[86u].x;
    float _3046 = _900 / cbSceneParam._m0[86u].y;
    vec4 _3060 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3045, _3046, (log2((isnan(cbSceneParam._m0[77u].w) ? _834 : (isnan(_834) ? cbSceneParam._m0[77u].w : min(_834, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3062 = _3060.x;
    float _3063 = _3060.y;
    float _3064 = _3060.z;
    float _3065 = _3060.w;
    float _3137;
    float _3139;
    float _3141;
    float _3143;
    if (_834 > cbSceneParam._m0[78u].w)
    {
        float _3099 = isnan(_834) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _834 : min(cbSceneParam._m0[80u].w, _834));
        float _3100 = _3099 / _834;
        float _3111 = _3100 * _884;
        float _3112 = _885 * _3100;
        float _3113 = (-0.0) - _3112;
        float _3115 = _3100 * _886;
        float _3117 = (cbSceneParam._m0[77u].w * _3113) / _3099;
        float _3118 = _3117 + cbSceneParam._m0[79u].w;
        float _3119 = cbSceneParam._m0[79u].w - _3112;
        float _3125 = sqrt(((_3111 * _3111) + (_3112 * _3112)) + (_3115 * _3115));
        float _3128 = (1.0 - (cbSceneParam._m0[77u].w / _3099)) * _3125;
        float _3133 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3135 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3288;
        if (abs((_3113 - _3117) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3288 = ((((_3118 > 0.0) ? exp2(_3133 * _3118) : (2.0 - exp2(_3135 * _3118))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3128;
        }
        else
        {
            float _3248 = 1.0 / cbSceneParam._m0[80u].x;
            float _3249 = isnan(_3119) ? _3118 : (isnan(_3118) ? _3119 : max(_3118, _3119));
            float _3250 = isnan(_3119) ? _3118 : (isnan(_3118) ? _3119 : min(_3118, _3119));
            float _3259 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : min(_3249, 0.0));
            float _3260 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : min(_3250, 0.0));
            _3288 = ((abs(_3125 / _3113) * cbSceneParam._m0[80u].y) * ((((_3259 - _3260) * 2.0) - ((exp2(_3133 * (isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0)))) - exp2(_3133 * (isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0))))) * _3248)) - ((exp2(_3135 * _3259) - exp2(_3135 * _3260)) * _3248))) + (_3128 * cbSceneParam._m0[80u].z);
        }
        vec4 _3290 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3045, _3046, 1.0), 0.0);
        float _3299 = exp2((_3288 * (-1.44269502162933349609375)) * (1.0 - _3290.w));
        float _3300 = log2(_3299);
        float _3316 = log2(_3065);
        _3137 = (exp2(_3316 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3300 * cbSceneParam._m0[78u].x)) * _3290.x) / cbSceneParam._m0[78u].x)) + _3062;
        _3139 = (exp2(_3316 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3300 * cbSceneParam._m0[78u].y)) * _3290.y) / cbSceneParam._m0[78u].y)) + _3063;
        _3141 = (exp2(_3316 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3300 * cbSceneParam._m0[78u].z)) * _3290.z) / cbSceneParam._m0[78u].z)) + _3064;
        _3143 = _3299 * _3065;
    }
    else
    {
        _3137 = _3062;
        _3139 = _3063;
        _3141 = _3064;
        _3143 = _3065;
    }
    float _3155 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3156 = _3155 == 3.0;
    float _3157 = log2(_3143);
    float _3164 = exp2(_3157 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_3007 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _977))) + ((_3013 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1784)) * cbPerFrame._m0[3u].x));
    float _3165 = exp2(_3157 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_3009 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _977))) + ((_3015 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1784)) * cbPerFrame._m0[3u].x));
    float _3166 = exp2(_3157 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_3011 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _977))) + ((_3017 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1784)) * cbPerFrame._m0[3u].x));
    float _3175 = (_3155 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3175 * (_3156 ? _3164 : (_3164 + (cbSceneParam._m0[72u].w * _3137)));
    SV_Target.y = _3175 * (_3156 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3139)));
    SV_Target.z = _3175 * (_3156 ? _3166 : (_3166 + (cbSceneParam._m0[72u].w * _3141)));
    SV_Target.w = cbInstanceData._m0[_3037].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3037].w;
}


