#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1380;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3728 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _442 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _486 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _488 = _486.x;
    float _489 = _486.y;
    float _490 = _486.z;
    float _499 = ((_469.z - _490) * _394) + _490;
    float _502 = ((((_469.x - _488) * _394) + _488) * 2.0) + (-1.0);
    float _503 = ((((_469.y - _489) * _394) + _489) * 2.0) + (-1.0);
    float _504 = dot(vec2(_502, _503), vec2(_502, _503));
    float _3739 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _509 = sqrt(1.0 - (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))));
    vec4 _529 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _541 = (_502 + ((((_442.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_529.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _542 = (_503 + ((((_442.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_529.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _545 = fma(_509, _245, fma(_542, _252, _541 * _238));
    float _548 = fma(_509, _246, fma(_542, _253, _541 * _239));
    float _551 = fma(_509, _247, fma(_542, _254, _541 * _240));
    float _555 = inversesqrt(dot(vec3(_545, _548, _551), vec3(_545, _548, _551)));
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _584 = _582.x;
    float _585 = 1.0 - _584;
    float _591 = (cbMtdParam._m0[19u].x + dot(vec4(_555 * _545, _555 * _548, _555 * _551, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_584 - _585) * cbMtdParam._m0[24u].z) + _585) * cbMtdParam._m0[21u].z);
    float _3750 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _594 = (-0.0) - cbMtdParam._m0[24u].x;
    float _596 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _596 : (isnan(_596) ? 1.0 : min(_596, 1.0));
    float _604 = _592 - ((_592 * TEXCOORD_8.x) * _597);
    float _605 = _592 - ((_592 * TEXCOORD_8.y) * _597);
    float _606 = _592 - ((_592 * TEXCOORD_8.z) * _597);
    float _613 = (_604 * ((_422.x * cbMtdParam._m0[18u].x) - _401)) + _401;
    float _614 = (_605 * ((_422.y * cbMtdParam._m0[18u].y) - _402)) + _402;
    float _615 = (_606 * ((_422.z * cbMtdParam._m0[18u].z) - _403)) + _403;
    vec4 _627 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _629 = _627.x;
    float _630 = 1.0 - _629;
    float _658 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_629 - _630) * cbMtdParam._m0[24u].w) + _630) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3771 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _659 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _667 = ((((cbMtdParam._m0[10u].x - _613) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _659) + _613;
    float _668 = ((((cbMtdParam._m0[10u].y - _614) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _659) + _614;
    float _669 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _615)) * _659) + _615;
    vec4 _695 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _697 = _695.x;
    float _715 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _697) * _394) + _697;
    float _719 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _715) * cbMtdParam._m0[19u].z) + _715;
    float _721 = _719 - (_719 * _604);
    float _723 = _721 - (_721 * _659);
    float _728 = (((_442.z - _499) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _499;
    float _732 = ((_529.z - _728) * cbMtdParam._m0[19u].w) + _728;
    vec4 _746 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _753 = (_746.x * 2.0) + (-1.0);
    float _754 = (_746.y * 2.0) + (-1.0);
    float _755 = dot(vec2(_753, _754), vec2(_753, _754));
    float _3782 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _763 = ((_746.z - _732) * _604) + _732;
    float _766 = ((cbMtdParam._m0[23u].y - _763) * _659) + _763;
    vec4 _785 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _791 = (_785.x * 2.0) + (-1.0);
    float _792 = (_785.y * 2.0) + (-1.0);
    float _793 = dot(vec2(_791, _792), vec2(_791, _792));
    float _3793 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _808 = ((sqrt(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) - _509) * _606) + _509;
    float _811 = (((_753 - _541) * _604) + _541) + (cbMtdParam._m0[21u].x * _541);
    float _812 = (((_754 - _542) * _605) + _542) + (cbMtdParam._m0[21u].x * _542);
    float _823 = (((_791 - _811) + (_811 * cbMtdParam._m0[22u].z)) * _659) + _811;
    float _824 = (((_792 - _812) + (_812 * cbMtdParam._m0[22u].z)) * _659) + _812;
    float _825 = (_659 * (sqrt(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) - _808)) + _808;
    float _827 = cbMtdParam._m0[22u].x + _529.w;
    float _830 = fma(_825, _245, fma(_824, _252, _823 * _238));
    float _833 = fma(_825, _246, fma(_824, _253, _823 * _239));
    float _836 = fma(_825, _247, fma(_824, _254, _823 * _240));
    float _840 = inversesqrt(dot(vec3(_830, _833, _836), vec3(_830, _833, _836)));
    float _841 = _840 * _830;
    float _842 = _840 * _833;
    float _843 = _840 * _836;
    float _3804 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _844 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _3826 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3837 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3848 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _3859 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _849 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _863 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _913 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _903);
    float _914 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _903);
    float _915 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _903);
    float _919 = inversesqrt(dot(vec3(_913, _914, _915), vec3(_913, _914, _915)));
    float _920 = _913 * _919;
    float _921 = _914 * _919;
    float _922 = _915 * _919;
    float _928 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _929 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _947 = fma(_843, cbSceneParam._m0[5u].z, fma(_842, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _841));
    float _950 = fma(_843, cbSceneParam._m0[6u].z, fma(_842, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _841));
    float _953 = fma(_843, cbSceneParam._m0[7u].z, fma(_842, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _841));
    uint _967 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _973 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_967].x;
    float _974 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_967].y;
    float _975 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_967].z;
    float _3870 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _979 = 1.0 - _849;
    float _980 = _976 * _979;
    float _981 = _977 * _979;
    float _982 = _978 * _979;
    float _987 = (_976 + (-0.039999999105930328369140625)) * _849;
    float _988 = (_977 + (-0.039999999105930328369140625)) * _849;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _849;
    float _990 = _987 + 0.039999999105930328369140625;
    float _992 = _988 + 0.039999999105930328369140625;
    float _993 = _989 + 0.039999999105930328369140625;
    vec4 _1002 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _928, cbSceneParam._m0[86u].y * _929));
    float _1006 = ((isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * TEXCOORD_5.w) * _1002.x;
    float _1007 = dot(vec3(_841, _842, _843), vec3(_920, _921, _922));
    float _1010 = _1007 * 2.0;
    float _1014 = (_1010 * _841) - _920;
    float _1015 = (_1010 * _842) - _921;
    float _1016 = (_1010 * _843) - _922;
    float _1020 = abs(dot(vec3(_920, _921, _922), vec3(_841, _842, _843)));
    float _3903 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1022 = sqrt(_844);
    float _1035 = exp2((_1022 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1022 * 3.0));
    float _1041 = (1.0 - _1035) * ((_1022 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1042 = _1035 * _1022;
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1379;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1104 = fma(_1078, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1070));
        float _1108 = fma(_1078, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1070));
        float _1112 = fma(_1078, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1070));
        float _1137 = _1070 + _841;
        float _1138 = _1074 + _842;
        float _1139 = _1078 + _843;
        float _1149 = fma(_1139, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137)) - _1104;
        float _1150 = fma(_1139, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137)) - _1108;
        float _1151 = fma(_1139, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137)) - _1112;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1104 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1108 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[34u].z) + ((((((_1112 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1207 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1173.x + (-0.5));
        float _1209 = _1207 * (_1173.y + (-0.5));
        float _1210 = _1207 * (_1173.z + (-0.5));
        float _1217 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1180.x + (-0.5));
        float _1219 = _1217 * (_1180.y + (-0.5));
        float _1220 = _1217 * (_1180.z + (-0.5));
        float _1227 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1187.x + (-0.5));
        float _1229 = _1227 * (_1187.y + (-0.5));
        float _1230 = _1227 * (_1187.z + (-0.5));
        float _1237 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1194.x + (-0.5));
        float _1239 = _1237 * (_1194.y + (-0.5));
        float _1240 = _1237 * (_1194.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1261 = (dot(vec3(_841, _842, _843), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1271 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3951 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1273 + 1.0))) + _1278) * _1241;
        float _1288 = _1209 * 0.5;
        float _1289 = _1219 * 0.5;
        float _1290 = _1229 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_841, _842, _843), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3984 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1315 + 1.0))) + _1320) * _1242;
        float _1330 = _1210 * 0.5;
        float _1331 = _1220 * 0.5;
        float _1332 = _1230 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_841, _842, _843), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4017 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1357 + 1.0))) + _1362) * _1243;
        _1379 = _1210;
        _1381 = _1209;
        _1382 = _1208;
        _1383 = _1220;
        _1384 = _1219;
        _1385 = _1218;
        _1386 = _1230;
        _1387 = _1229;
        _1388 = _1228;
        _1389 = _1243;
        _1390 = _1242;
        _1391 = _1241;
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1380;
        _1381 = _1380;
        _1382 = _1380;
        _1383 = _1380;
        _1384 = _1380;
        _1385 = _1380;
        _1386 = _1380;
        _1387 = _1380;
        _1388 = _1380;
        _1389 = _1380;
        _1390 = _1380;
        _1391 = _1380;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1419 = fma(_1078, cbModelParam._m0[30u].z, fma(_1074, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070));
        float _1423 = fma(_1078, cbModelParam._m0[31u].z, fma(_1074, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070));
        float _1427 = fma(_1078, cbModelParam._m0[32u].z, fma(_1074, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070));
        float _1450 = _1070 + _841;
        float _1451 = _1074 + _842;
        float _1452 = _1078 + _843;
        float _1462 = fma(_1452, cbModelParam._m0[30u].z, fma(_1451, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1450)) - _1419;
        float _1463 = fma(_1452, cbModelParam._m0[31u].z, fma(_1451, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1450)) - _1423;
        float _1464 = fma(_1452, cbModelParam._m0[32u].z, fma(_1451, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1450)) - _1427;
        float _1468 = inversesqrt(dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464)));
        float _1481 = ((_1468 * _1462) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1419 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1468 * _1463) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1423 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1468 * _1464) / cbModelParam._m0[35u].z) + ((((((_1427 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        float _1518 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1485.x + (-0.5));
        float _1520 = _1518 * (_1485.y + (-0.5));
        float _1521 = _1518 * (_1485.z + (-0.5));
        float _1528 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1492.x + (-0.5));
        float _1530 = _1528 * (_1492.y + (-0.5));
        float _1531 = _1528 * (_1492.z + (-0.5));
        float _1538 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1499.x + (-0.5));
        float _1540 = _1538 * (_1499.y + (-0.5));
        float _1541 = _1538 * (_1499.z + (-0.5));
        float _1548 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1506.x + (-0.5));
        float _1550 = _1548 * (_1506.y + (-0.5));
        float _1551 = _1548 * (_1506.z + (-0.5));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = _1519 * 0.5;
        float _1556 = _1529 * 0.5;
        float _1557 = _1539 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_841, _842, _843), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4080 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1582 + 1.0))) + _1587) * _1552;
        float _1597 = _1520 * 0.5;
        float _1598 = _1530 * 0.5;
        float _1599 = _1540 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_841, _842, _843), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4113 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1624 + 1.0))) + _1629) * _1553;
        float _1639 = _1521 * 0.5;
        float _1640 = _1531 * 0.5;
        float _1641 = _1541 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_841, _842, _843), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4146 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1666 + 1.0))) + _1671) * _1554;
        _1688 = _1521;
        _1689 = _1520;
        _1690 = _1519;
        _1691 = _1531;
        _1692 = _1530;
        _1693 = _1529;
        _1694 = _1541;
        _1695 = _1540;
        _1696 = _1539;
        _1697 = _1554;
        _1698 = _1553;
        _1699 = _1552;
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
    }
    else
    {
        _1688 = _1380;
        _1689 = _1380;
        _1690 = _1380;
        _1691 = _1380;
        _1692 = _1380;
        _1693 = _1380;
        _1694 = _1380;
        _1695 = _1380;
        _1696 = _1380;
        _1697 = _1380;
        _1698 = _1380;
        _1699 = _1380;
        _1700 = 0.0;
        _1701 = 0.0;
        _1702 = 0.0;
    }
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1392)) + _1392;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1393)) + _1393;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1394)) + _1394;
    float _1735 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1712));
    float _1756 = _1014 * 0.5;
    float _1757 = _1015 * 0.5;
    float _1758 = _1016 * 0.5;
    float _1759 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1762 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1765 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1799;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1772 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1379, _1383, _1386, _1389));
        float _1776 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1780 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1787 = dot(vec4(cbModelParam._m0[39u]), vec4(_1756, _1757, _1758, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1810;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1801 = dot(vec4(cbModelParam._m0[40u]), vec4(_1756, _1757, _1758, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1814 = (_1810 * cbModelParam._m0[1u].x) + (_1799 * (1.0 - cbModelParam._m0[1u].x));
    float _1824 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _844);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1824 : min(cbModelParam._m0[25u].z, _1824));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1872 = fma(_1078, cbModelParam._m0[13u].z, fma(_1074, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1070)) + cbModelParam._m0[13u].w;
        float _1876 = fma(_1078, cbModelParam._m0[14u].z, fma(_1074, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1070)) + cbModelParam._m0[14u].w;
        float _1880 = fma(_1078, cbModelParam._m0[15u].z, fma(_1074, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1070)) + cbModelParam._m0[15u].w;
        float _1883 = fma(_1016, cbModelParam._m0[13u].z, fma(_1015, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1014));
        float _1886 = fma(_1016, cbModelParam._m0[14u].z, fma(_1015, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1014));
        float _1889 = fma(_1016, cbModelParam._m0[15u].z, fma(_1015, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1014));
        float _1917;
        if (_1883 > 0.0)
        {
            _1917 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1917 = frontier_phi_14_12_ladder;
        }
        float _2140;
        if (_1886 > 0.0)
        {
            _2140 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2140 = frontier_phi_23_19_ladder;
        }
        float _2397;
        if (_1889 > 0.0)
        {
            _2397 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2397 = frontier_phi_35_30_ladder;
        }
        float _2399 = isnan(_2140) ? _1917 : (isnan(_1917) ? _2140 : min(_1917, _2140));
        float _2400 = isnan(_2397) ? _2399 : (isnan(_2399) ? _2397 : min(_2399, _2397));
        float _2404 = (_2400 * _1883) + _1872;
        float _2405 = (_2400 * _1886) + _1876;
        float _2406 = (_2400 * _1889) + _1880;
        float _2407 = _2400 * 9.9999997473787516355514526367188e-05;
        float _2409 = (-1.0) - _2407;
        float _2411 = _2407 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2406 > _2411) || ((_2406 < _2409) || ((_2405 > _2411) || ((_2405 < _2409) || ((_2404 < _2409) || (_2404 > _2411))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2406, cbModelParam._m0[9u].z, fma(_2405, cbModelParam._m0[9u].y, _2404 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2406, cbModelParam._m0[10u].z, fma(_2405, cbModelParam._m0[10u].y, _2404 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2406, cbModelParam._m0[11u].z, fma(_2405, cbModelParam._m0[11u].y, _2404 * cbModelParam._m0[11u].x))), _1825);
            frontier_phi_13_35_ladder = _2534.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2534.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2534.x * cbModelParam._m0[1u].y;
        }
        _1905 = frontier_phi_13_35_ladder_2;
        _1907 = frontier_phi_13_35_ladder_1;
        _1909 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1014, _1015, _1016), _1825);
        _1905 = _1893.x * cbModelParam._m0[1u].y;
        _1907 = _1893.y * cbModelParam._m0[1u].y;
        _1909 = _1893.z * cbModelParam._m0[1u].y;
    }
    float _1913 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _844);
    float _1914 = isnan(_1913) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1913 : min(cbModelParam._m0[25u].w, _1913));
    float _2003;
    float _2005;
    float _2007;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1967 = fma(_1078, cbModelParam._m0[21u].z, fma(_1074, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1070)) + cbModelParam._m0[21u].w;
        float _1971 = fma(_1078, cbModelParam._m0[22u].z, fma(_1074, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1070)) + cbModelParam._m0[22u].w;
        float _1975 = fma(_1078, cbModelParam._m0[23u].z, fma(_1074, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1070)) + cbModelParam._m0[23u].w;
        float _1978 = fma(_1016, cbModelParam._m0[21u].z, fma(_1015, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1014));
        float _1981 = fma(_1016, cbModelParam._m0[22u].z, fma(_1015, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1014));
        float _1984 = fma(_1016, cbModelParam._m0[23u].z, fma(_1015, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1014));
        float _2145;
        if (_1978 > 0.0)
        {
            _2145 = abs((1.0 - _1967) / _1978);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1967 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2145 = frontier_phi_25_21_ladder;
        }
        float _2424;
        if (_1981 > 0.0)
        {
            _2424 = abs((1.0 - _1971) / _1981);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1971 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2424 = frontier_phi_37_32_ladder;
        }
        float _2637;
        if (_1984 > 0.0)
        {
            _2637 = abs((1.0 - _1975) / _1984);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1975 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2637 = frontier_phi_46_43_ladder;
        }
        float _2639 = isnan(_2424) ? _2145 : (isnan(_2145) ? _2424 : min(_2145, _2424));
        float _2640 = isnan(_2637) ? _2639 : (isnan(_2639) ? _2637 : min(_2639, _2637));
        float _2644 = (_2640 * _1978) + _1967;
        float _2645 = (_2640 * _1981) + _1971;
        float _2646 = (_2640 * _1984) + _1975;
        float _2647 = _2640 * 9.9999997473787516355514526367188e-05;
        float _2648 = (-1.0) - _2647;
        float _2650 = _2647 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2646 > _2650) || ((_2646 < _2648) || ((_2645 > _2650) || ((_2645 < _2648) || ((_2644 < _2648) || (_2644 > _2650))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2646, cbModelParam._m0[17u].z, fma(_2645, cbModelParam._m0[17u].y, _2644 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2646, cbModelParam._m0[18u].z, fma(_2645, cbModelParam._m0[18u].y, _2644 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2646, cbModelParam._m0[19u].z, fma(_2645, cbModelParam._m0[19u].y, _2644 * cbModelParam._m0[19u].x))), _1914);
            frontier_phi_22_46_ladder = _2845.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2845.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2845.x * cbModelParam._m0[1u].z;
        }
        _2003 = frontier_phi_22_46_ladder_2;
        _2005 = frontier_phi_22_46_ladder_1;
        _2007 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1987 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1014, _1015, _1016), _1914);
        _2003 = _1987.x * cbModelParam._m0[1u].z;
        _2005 = _1987.y * cbModelParam._m0[1u].z;
        _2007 = _1987.z * cbModelParam._m0[1u].z;
    }
    float _2020 = (((_1041 * _990) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2022 = (((_1041 * _992) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2005 - _1907)) + _1907);
    float _2024 = (((_1041 * _993) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2007 - _1909)) + _1909);
    float _2027 = fma(_2024, cbSceneParam._m0[89u].z, fma(_2022, cbSceneParam._m0[89u].y, _2020 * cbSceneParam._m0[89u].x));
    float _2030 = fma(_2024, cbSceneParam._m0[90u].z, fma(_2022, cbSceneParam._m0[90u].y, _2020 * cbSceneParam._m0[90u].x));
    float _2033 = fma(_2024, cbSceneParam._m0[91u].z, fma(_2022, cbSceneParam._m0[91u].y, _2020 * cbSceneParam._m0[91u].x));
    vec4 _2041 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_928, _929));
    float _2043 = _2041.w;
    float _2055 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2043);
    float _2056 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2043);
    float _2057 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2043);
    uvec4 _2061 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2063 = _2061.x * 14u;
    uint _2064 = _2063 + 13u;
    float _2071 = _1006 + (-1.0);
    float _2076 = (cbLight._m0[_2064].x * _2071) + 1.0;
    float _2077 = (cbLight._m0[_2064].y * _2071) + 1.0;
    float _2078 = (cbLight._m0[_2064].z * _2071) + 1.0;
    float _2079 = (cbLight._m0[_2064].w * _2071) + 1.0;
    uint _2080 = _2063 + 5u;
    float _2086 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
    uint _2090 = _2063 + 4u;
    float _2099 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
    uint _2103 = _2063 | 1u;
    float _2114 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_841, _842, _843));
    float _2117 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_841, _842, _843));
    float _4282 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _4293 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2122 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.3183098733425140380859375;
    float _2124 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * 0.3183098733425140380859375;
    float _2131 = ((cbLight._m0[_2080].x * _2086) * _2124) + (((cbLight._m0[_2090].x * _2055) * _2099) * _2122);
    float _2132 = ((_2086 * cbLight._m0[_2080].y) * _2124) + (((cbLight._m0[_2090].y * _2056) * _2099) * _2122);
    float _2133 = ((_2086 * cbLight._m0[_2080].z) * _2124) + (((cbLight._m0[_2090].z * _2057) * _2099) * _2122);
    uvec4 _2137 = floatBitsToUint(cbLight._m0[_2063 + 12u]);
    bool _2139 = _2137.x == 0u;
    float _2150;
    float _2152;
    float _2154;
    if (_2139)
    {
        _2150 = _2131;
        _2152 = _2132;
        _2154 = _2133;
    }
    else
    {
        uint _2158 = _2063 + 6u;
        float _2174 = (dot(vec3(cbLight._m0[_2063 + 2u].xyz), vec3(_841, _842, _843)) * 0.5) + 0.5;
        float _2175 = _2174 * _2174;
        float _4304 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2176 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2177 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2150 = (((cbLight._m0[_2158].x * 0.3183098733425140380859375) * _2176) * _2177) + _2131;
        _2152 = (((cbLight._m0[_2158].y * 0.3183098733425140380859375) * _2176) * _2177) + _2132;
        _2154 = (((cbLight._m0[_2158].z * 0.3183098733425140380859375) * _2176) * _2177) + _2133;
    }
    bool _2157 = _2137.y == 0u;
    float _2195;
    float _2197;
    float _2199;
    if (_2157)
    {
        _2195 = _2150;
        _2197 = _2152;
        _2199 = _2154;
    }
    else
    {
        uint _2368 = _2063 + 7u;
        float _2384 = (dot(vec3(cbLight._m0[_2063 + 3u].xyz), vec3(_841, _842, _843)) * 0.5) + 0.5;
        float _2385 = _2384 * _2384;
        float _4320 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2386 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2387 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2195 = (((cbLight._m0[_2368].x * 0.3183098733425140380859375) * _2386) * _2387) + _2150;
        _2197 = (((cbLight._m0[_2368].y * 0.3183098733425140380859375) * _2386) * _2387) + _2152;
        _2199 = (((cbLight._m0[_2368].z * 0.3183098733425140380859375) * _2386) * _2387) + _2154;
    }
    uint _2202 = _2063 + 8u;
    float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _844) * 0.949999988079071044921875);
    float _2216 = _2215 * _2215;
    float _2217 = cbLight._m0[_2063].x + _920;
    float _2218 = cbLight._m0[_2063].y + _921;
    float _2219 = cbLight._m0[_2063].z + _922;
    float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
    float _2224 = _2223 * _2217;
    float _2225 = _2223 * _2218;
    float _2226 = _2223 * _2219;
    float _2227 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2063].xyz));
    float _4336 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _4347 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _2231 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2232 = dot(vec3(_841, _842, _843), vec3(_2224, _2225, _2226));
    float _4358 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2236 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2224, _2225, _2226));
    float _4369 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2240 = _2216 * _2216;
    float _2244 = ((_2235 * _2235) * (_2240 + (-1.0))) + 1.0;
    float _2252 = exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0);
    float _2253 = 0.959999978542327880859375 - _987;
    float _2255 = 0.959999978542327880859375 - _988;
    float _2256 = 0.959999978542327880859375 - _989;
    float _2263 = 1.0 - _2216;
    float _2274 = (0.5 / (((_2231 * ((_2230 * _2263) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_2231 * _2263) + _2216) * _2230))) * _2230;
    float _4380 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2276 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2240 / ((_2244 * _2244) * 3.141590118408203125));
    uint _2290 = _2063 + 9u;
    float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _844) * 0.949999988079071044921875);
    float _2302 = _2301 * _2301;
    float _2303 = cbLight._m0[_2103].x + _920;
    float _2304 = cbLight._m0[_2103].y + _921;
    float _2305 = cbLight._m0[_2103].z + _922;
    float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
    float _2310 = _2309 * _2303;
    float _2311 = _2309 * _2304;
    float _2312 = _2309 * _2305;
    float _2313 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2103].xyz));
    float _4391 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2317 = dot(vec3(_841, _842, _843), vec3(_2310, _2311, _2312));
    float _4402 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2321 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2310, _2311, _2312));
    float _4413 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2325 = _2302 * _2302;
    float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
    float _2336 = exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0);
    float _2343 = 1.0 - _2302;
    float _2353 = (0.5 / (((_2231 * ((_2316 * _2343) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2231 * _2343) + _2302) * _2316))) * _2316;
    float _4424 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2355 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
    float _2365 = (((((_2336 * _2253) + _990) * cbLight._m0[_2290].x) * _2355) * _2086) + ((((cbLight._m0[_2202].x * _2055) * ((_2252 * _2253) + _990)) * _2276) * _2099);
    float _2366 = (((((_2336 * _2255) + _992) * cbLight._m0[_2290].y) * _2355) * _2086) + ((((cbLight._m0[_2202].y * _2056) * ((_2252 * _2255) + _992)) * _2276) * _2099);
    float _2367 = (((((_2336 * _2256) + _993) * cbLight._m0[_2290].z) * _2355) * _2086) + ((((cbLight._m0[_2202].z * _2057) * ((_2252 * _2256) + _993)) * _2276) * _2099);
    float _2429;
    float _2431;
    float _2433;
    if (_2139)
    {
        _2429 = _2365;
        _2431 = _2366;
        _2433 = _2367;
    }
    else
    {
        uint _2435 = _2063 + 2u;
        uint _2439 = _2063 + 10u;
        float _2453 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2435].w)) * _844) * 0.949999988079071044921875);
        float _2454 = _2453 * _2453;
        float _2455 = cbLight._m0[_2435].x + _920;
        float _2456 = cbLight._m0[_2435].y + _921;
        float _2457 = cbLight._m0[_2435].z + _922;
        float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
        float _2462 = _2461 * _2455;
        float _2463 = _2461 * _2456;
        float _2464 = _2461 * _2457;
        float _2465 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2435].xyz));
        float _4435 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2468 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2469 = dot(vec3(_841, _842, _843), vec3(_2462, _2463, _2464));
        float _4446 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2473 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_2462, _2463, _2464));
        float _4457 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2477 = _2454 * _2454;
        float _2481 = ((_2472 * _2472) * (_2477 + (-1.0))) + 1.0;
        float _2488 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
        float _2495 = 1.0 - _2454;
        float _2505 = (0.5 / (((_2231 * ((_2468 * _2495) + _2454)) + 9.9999999392252902907785028219223e-09) + (((_2231 * _2495) + _2454) * _2468))) * _2468;
        float _4468 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2507 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2477 / ((_2481 * _2481) * 3.141590118408203125));
        float _2508 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2429 = (((((_2488 * _2253) + _990) * cbLight._m0[_2439].x) * _2507) * _2508) + _2365;
        _2431 = (((((_2488 * _2255) + _992) * cbLight._m0[_2439].y) * _2507) * _2508) + _2366;
        _2433 = (((((_2488 * _2256) + _993) * cbLight._m0[_2439].z) * _2507) * _2508) + _2367;
    }
    float _2543;
    float _2545;
    float _2547;
    if (_2157)
    {
        _2543 = _2429;
        _2545 = _2431;
        _2547 = _2433;
    }
    else
    {
        uint _2554 = _2063 + 3u;
        uint _2558 = _2063 + 11u;
        float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2554].w)) * _844) * 0.949999988079071044921875);
        float _2573 = _2572 * _2572;
        float _2574 = cbLight._m0[_2554].x + _920;
        float _2575 = cbLight._m0[_2554].y + _921;
        float _2576 = cbLight._m0[_2554].z + _922;
        float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
        float _2581 = _2580 * _2574;
        float _2582 = _2580 * _2575;
        float _2583 = _2580 * _2576;
        float _2584 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2554].xyz));
        float _4484 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2588 = dot(vec3(_841, _842, _843), vec3(_2581, _2582, _2583));
        float _4495 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2592 = dot(vec3(cbLight._m0[_2554].xyz), vec3(_2581, _2582, _2583));
        float _4506 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2596 = _2573 * _2573;
        float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
        float _2607 = exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0);
        float _2614 = 1.0 - _2573;
        float _2624 = (0.5 / (((_2231 * ((_2587 * _2614) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2231 * _2614) + _2573) * _2587))) * _2587;
        float _4517 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2626 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
        float _2627 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2543 = (((((_2607 * _2253) + _990) * cbLight._m0[_2558].x) * _2626) * _2627) + _2429;
        _2545 = (((((_2607 * _2255) + _992) * cbLight._m0[_2558].y) * _2626) * _2627) + _2431;
        _2547 = (((((_2607 * _2256) + _993) * cbLight._m0[_2558].z) * _2626) * _2627) + _2433;
    }
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_2061.y == 0u)
    {
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2702;
        float _2704 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2702;
        float _2705 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2702;
        uvec4 _2717 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2718 = _2717.x;
        uint _2729 = uint((float(_2717.y) * floor(float(uint(cbSceneParam._m0[85u].y * _929) / _2718))) + floor(float(uint(cbSceneParam._m0[85u].x * _928) / _2718)));
        float _2739 = (log2(_2705 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2740 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        uint _2743 = uint(isnan(14.0) ? _2740 : (isnan(_2740) ? 14.0 : min(_2740, 14.0)));
        uvec4 _2748 = texelFetch(g_lightClusterGridBuffer, int(((_2743 << 2u) + (_2729 << 6u)) >> 2u));
        uint _2749 = _2748.x;
        uint _2750 = _2717.z;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        if (((((1u << ((_2750 >> 4u) & 15u)) + 4294967295u) & _2749) == 0u) || ((_2750 & 240u) == 0u))
        {
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
        }
        else
        {
            float _2851;
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            uint _3000 = 0u;
            uint _3009;
            bool _3010;
            for (;;)
            {
                _3009 = texelFetch(g_lightClassification, int((((_2743 << 5u) + (_2729 << 9u)) + (_3000 << 2u)) >> 2u)).x;
                _3010 = _3009 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3010)
                {
                    frontier_phi_61_pred = _2994;
                    frontier_phi_61_pred_1 = _2999;
                    frontier_phi_61_pred_2 = _2998;
                    frontier_phi_61_pred_3 = _2997;
                    frontier_phi_61_pred_4 = _2996;
                    frontier_phi_61_pred_5 = _2995;
                }
                else
                {
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    uint _3124;
                    _3118 = _2994;
                    _3119 = _2995;
                    _3120 = _2996;
                    _3121 = _2997;
                    _3122 = _2998;
                    _3123 = _2999;
                    _3124 = _3009;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    for (;;)
                    {
                        uint _3128 = uint(findLSB(_3124)) + (_3000 << 5u);
                        uint _3125 = (_3124 + 4294967295u) & _3124;
                        uint _3130 = _3128 * 48u;
                        vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3130)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 3u)).x));
                        uint _3150 = (_3128 * 48u) + 4u;
                        vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3150)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 3u)).x));
                        uint _3169 = (_3128 * 48u) + 8u;
                        vec3 _3180 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x));
                        float _3184 = _3144.x - _2703;
                        float _3185 = _3144.y - _2704;
                        float _3186 = _3144.z - _2705;
                        float _3187 = dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186));
                        float _3190 = inversesqrt(_3187);
                        float _3191 = _3190 * _3184;
                        float _3192 = _3190 * _3185;
                        float _3193 = _3190 * _3186;
                        float _3194 = dot(vec3(_947, _950, _953), vec3(_3191, _3192, _3193));
                        float _3199 = 1.0 - (_3187 * _3144.w);
                        float _4543 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3200 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3201 = sqrt(_3187) * _3163.w;
                        float _3204 = 1.39999997615814208984375 / (_3201 + 1.39999997615814208984375);
                        float _3205 = _3204 * _3204;
                        float _3208 = ((1.0 - _3205) * _3194) + _3205;
                        float _3211 = _3201 * _3201;
                        float _3215 = ((isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0))) * _3200) / ((_3211 * 0.699999988079071044921875) + 1.0);
                        float _3219 = (-0.0) - _2703;
                        float _3220 = (-0.0) - _2704;
                        float _3221 = (-0.0) - _2705;
                        float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                        float _3226 = _3225 * _3219;
                        float _3227 = _3225 * _3220;
                        float _3228 = _3225 * _3221;
                        float _3236 = exp2(log2(1.0 / ((_3211 * 3.5) + 5.0)) * 0.25);
                        float _3237 = 1.0 - _1022;
                        float _3244 = sqrt(1.0 - ((1.0 - (_3237 * _3237)) * (1.0 - (_3236 * _3236))));
                        float _3245 = _3244 * _3244;
                        float _3246 = _3245 * _3245;
                        float _3247 = _3226 + _3191;
                        float _3248 = _3227 + _3192;
                        float _3249 = _3228 + _3193;
                        float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                        float _3257 = dot(vec3(_947, _950, _953), vec3(_3226, _3227, _3228));
                        float _4559 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3260 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3261 = dot(vec3(_947, _950, _953), vec3(_3253 * _3247, _3253 * _3248, _3253 * _3249));
                        float _4570 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3264 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3268 = ((_3264 * _3264) * (_3246 + (-1.0))) + 1.0;
                        float _3269 = _3204 * _3245;
                        float _3270 = _3269 * _3269;
                        float _3273 = ((1.0 - _3270) * _3194) + _3270;
                        float _4581 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3274 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3275 = 1.0 - _3245;
                        float _3285 = (0.5 / (((_3274 * ((_3260 * _3275) + _3245)) + 9.9999999392252902907785028219223e-09) + (((_3274 * _3275) + _3245) * _3260))) * _3274;
                        float _4592 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3296 = (((_3246 * 3.1415927410125732421875) * (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) / ((_3268 * _3268) * ((_3211 * 2.1991131305694580078125) + 3.141590118408203125))) * _3200;
                        _3053 = (_3215 * _3163.x) + _3121;
                        _3054 = (_3215 * _3163.y) + _3122;
                        _3055 = (_3215 * _3163.z) + _3123;
                        _3050 = (_3296 * _3180.x) + _3118;
                        _3051 = (_3296 * _3180.y) + _3119;
                        _3052 = (_3296 * _3180.z) + _3120;
                        if (_3125 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3118 = _3050;
                            _3119 = _3051;
                            _3120 = _3052;
                            _3121 = _3053;
                            _3122 = _3054;
                            _3123 = _3055;
                            _3124 = _3125;
                        }
                    }
                    frontier_phi_61_pred = _3050;
                    frontier_phi_61_pred_1 = _3055;
                    frontier_phi_61_pred_2 = _3054;
                    frontier_phi_61_pred_3 = _3053;
                    frontier_phi_61_pred_4 = _3052;
                    frontier_phi_61_pred_5 = _3051;
                }
                _2851 = frontier_phi_61_pred;
                _2861 = frontier_phi_61_pred_1;
                _2859 = frontier_phi_61_pred_2;
                _2857 = frontier_phi_61_pred_3;
                _2855 = frontier_phi_61_pred_4;
                _2853 = frontier_phi_61_pred_5;
                uint _3001 = _3000 + 1u;
                if (_3001 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2994 = _2851;
                    _2995 = _2853;
                    _2996 = _2855;
                    _2997 = _2857;
                    _2998 = _2859;
                    _2999 = _2861;
                    _3000 = _3001;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
        }
        uvec4 _2864 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2865 = _2864.z;
        uint _2867 = (_2865 >> 8u) & 15u;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        if (((4294967295u << _2867) & _2749) == 0u)
        {
            _2962 = _2850;
            _2964 = _2852;
            _2966 = _2854;
            _2968 = _2856;
            _2970 = _2858;
            _2972 = _2860;
        }
        else
        {
            float _2987 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
            float _2988 = _2987 * _2703;
            float _2989 = _2987 * _2704;
            float _2990 = _2987 * _2705;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2867 < ((_2865 >> 12u) & 15u))
            {
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _3101 = _2850;
                float _3102 = _2852;
                float _3103 = _2854;
                float _3104 = _2856;
                float _3105 = _2858;
                float _3106 = _2860;
                uint _3107 = _2867;
                uint _3116;
                bool _3117;
                for (;;)
                {
                    _3116 = texelFetch(g_lightClassification, int((((_2743 << 5u) + (_2729 << 9u)) + (_3107 << 2u)) >> 2u)).x;
                    _3117 = _3116 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3117)
                    {
                        frontier_phi_67_pred = _3104;
                        frontier_phi_67_pred_1 = _3105;
                        frontier_phi_67_pred_2 = _3106;
                        frontier_phi_67_pred_3 = _3103;
                        frontier_phi_67_pred_4 = _3102;
                        frontier_phi_67_pred_5 = _3101;
                    }
                    else
                    {
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3314 = _3101;
                        float _3315 = _3102;
                        float _3316 = _3103;
                        float _3317 = _3104;
                        float _3318 = _3105;
                        float _3319 = _3106;
                        uint _3320 = _3116;
                        uint _3321;
                        vec4 _3346;
                        float _3347;
                        vec4 _3362;
                        vec3 _3374;
                        vec4 _3389;
                        vec4 _3404;
                        float _3450;
                        bool _3451;
                        for (;;)
                        {
                            uint _3331 = ((_3107 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3320));
                            _3321 = (_3320 + 4294967295u) & _3320;
                            uint _3333 = _3331 * 40u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            _3347 = _3346.w;
                            uint _3349 = (_3331 * 40u) + 4u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3364 = (_3331 * 40u) + 8u;
                            _3374 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x));
                            uint _3376 = (_3331 * 40u) + 16u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3391 = (_3331 * 40u) + 20u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3331 * 40u) + 24u;
                            vec4 _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3425 = (_3331 * 40u) + 28u;
                            vec4 _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            _3450 = fma(_2705, _3438.z, fma(_2704, _3438.y, _3438.x * _2703)) + _3438.w;
                            _3451 = !((fma(_2705, _3419.z, fma(_2704, _3419.y, _3419.x * _2703)) + _3419.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3451)
                            {
                                float _3478 = _3346.x - _2703;
                                float _3479 = _3346.y - _2704;
                                float _3480 = _3346.z - _2705;
                                float _3481 = dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480));
                                float _3484 = inversesqrt(_3481);
                                float _3485 = _3484 * _3478;
                                float _3486 = _3484 * _3479;
                                float _3487 = _3484 * _3480;
                                float _3491 = 1.0 - (_3481 / (_3347 * _3347));
                                float _4603 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3496 = sqrt(_3481) * _3362.w;
                                float _3498 = 1.39999997615814208984375 / (_3496 + 1.39999997615814208984375);
                                float _3499 = _3498 * _3498;
                                float _3502 = ((1.0 - _3499) * dot(vec3(_3485, _3486, _3487), vec3(_947, _950, _953))) + _3499;
                                float _3505 = _3496 * _3496;
                                float _3509 = (fma(_2705, _3389.z, fma(_2704, _3389.y, _3389.x * _2703)) + _3389.w) / _3450;
                                float _3510 = (fma(_2705, _3404.z, fma(_2704, _3404.y, _3404.x * _2703)) + _3404.w) / _3450;
                                float _3514 = 1.0 - dot(vec2(_3509, _3510), vec2(_3509, _3510));
                                float _4619 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3516 = _3515 * (((isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0))) * _3492) / ((_3505 * 0.699999988079071044921875) + 1.0));
                                float _3528 = exp2(log2(1.0 / ((_3505 * 3.5) + 5.0)) * 0.25);
                                float _3529 = 1.0 - _1022;
                                float _3536 = sqrt(1.0 - ((1.0 - (_3529 * _3529)) * (1.0 - (_3528 * _3528))));
                                float _3537 = _3536 * _3536;
                                float _3538 = _3537 * _3537;
                                float _3539 = _3485 - _2988;
                                float _3540 = _3486 - _2989;
                                float _3541 = _3487 - _2990;
                                float _3545 = inversesqrt(dot(vec3(_3539, _3540, _3541), vec3(_3539, _3540, _3541)));
                                float _3549 = dot(vec3(_947, _950, _953), vec3((-0.0) - _2988, (-0.0) - _2989, (-0.0) - _2990));
                                float _4630 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3552 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3553 = dot(vec3(_947, _950, _953), vec3(_3545 * _3539, _3545 * _3540, _3545 * _3541));
                                float _4641 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3556 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3560 = ((_3556 * _3556) * (_3538 + (-1.0))) + 1.0;
                                float _3561 = _3498 * _3537;
                                float _3562 = _3561 * _3561;
                                float _3568 = ((1.0 - _3562) * dot(vec3(_947, _950, _953), vec3(_3485, _3486, _3487))) + _3562;
                                float _4652 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3570 = 1.0 - _3537;
                                float _3580 = (0.5 / (((_3569 * ((_3552 * _3570) + _3537)) + 9.9999999392252902907785028219223e-09) + (((_3569 * _3570) + _3537) * _3552))) * _3569;
                                float _4663 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3590 = (_3515 * _3492) * (((_3538 * 3.1415927410125732421875) * (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) / ((_3560 * _3560) * ((_3505 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3590 * _3374.x;
                                frontier_phi_73_pred_1 = _3590 * _3374.y;
                                frontier_phi_73_pred_2 = _3516 * _3362.z;
                                frontier_phi_73_pred_3 = _3516 * _3362.y;
                                frontier_phi_73_pred_4 = _3516 * _3362.x;
                                frontier_phi_73_pred_5 = _3590 * _3374.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3594 = frontier_phi_73_pred;
                            _3595 = frontier_phi_73_pred_1;
                            _3599 = frontier_phi_73_pred_2;
                            _3598 = frontier_phi_73_pred_3;
                            _3597 = frontier_phi_73_pred_4;
                            _3596 = frontier_phi_73_pred_5;
                            _3304 = _3597 + _3317;
                            _3305 = _3598 + _3318;
                            _3306 = _3599 + _3319;
                            _3301 = _3594 + _3314;
                            _3302 = _3595 + _3315;
                            _3303 = _3596 + _3316;
                            if (_3321 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3321;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3304;
                        frontier_phi_67_pred_1 = _3305;
                        frontier_phi_67_pred_2 = _3306;
                        frontier_phi_67_pred_3 = _3303;
                        frontier_phi_67_pred_4 = _3302;
                        frontier_phi_67_pred_5 = _3301;
                    }
                    _2969 = frontier_phi_67_pred;
                    _2971 = frontier_phi_67_pred_1;
                    _2973 = frontier_phi_67_pred_2;
                    _2967 = frontier_phi_67_pred_3;
                    _2965 = frontier_phi_67_pred_4;
                    _2963 = frontier_phi_67_pred_5;
                    uint _3108 = _3107 + 1u;
                    if (_3108 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3101 = _2963;
                        _3102 = _2965;
                        _3103 = _2967;
                        _3104 = _2969;
                        _3105 = _2971;
                        _3106 = _2973;
                        _3107 = _3108;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2971;
                frontier_phi_55_56_ladder_1 = _2973;
                frontier_phi_55_56_ladder_2 = _2969;
                frontier_phi_55_56_ladder_3 = _2967;
                frontier_phi_55_56_ladder_4 = _2965;
                frontier_phi_55_56_ladder_5 = _2963;
            }
            else
            {
                frontier_phi_55_56_ladder = _2858;
                frontier_phi_55_56_ladder_1 = _2860;
                frontier_phi_55_56_ladder_2 = _2856;
                frontier_phi_55_56_ladder_3 = _2854;
                frontier_phi_55_56_ladder_4 = _2852;
                frontier_phi_55_56_ladder_5 = _2850;
            }
            _2962 = frontier_phi_55_56_ladder_5;
            _2964 = frontier_phi_55_56_ladder_4;
            _2966 = frontier_phi_55_56_ladder_3;
            _2968 = frontier_phi_55_56_ladder_2;
            _2970 = frontier_phi_55_56_ladder;
            _2972 = frontier_phi_55_56_ladder_1;
        }
        float _2977 = isnan(1.0) ? _1006 : (isnan(_1006) ? 1.0 : min(_1006, 1.0));
        _2762 = (_2977 * _2968) + _2195;
        _2764 = (_2977 * _2970) + _2197;
        _2766 = (_2977 * _2972) + _2199;
        _2768 = ((_2962 * _990) * _2977) + _2543;
        _2770 = ((_2964 * _992) * _2977) + _2545;
        _2772 = ((_2966 * _993) * _2977) + _2547;
    }
    else
    {
        _2762 = _2195;
        _2764 = _2197;
        _2766 = _2199;
        _2768 = _2543;
        _2770 = _2545;
        _2772 = _2547;
    }
    float _4679 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4690 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4701 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    uint _2792 = _257 + 6u;
    float _2800 = _928 / cbSceneParam._m0[86u].x;
    float _2801 = _929 / cbSceneParam._m0[86u].y;
    vec4 _2815 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2800, _2801, (log2((isnan(cbSceneParam._m0[77u].w) ? _863 : (isnan(_863) ? cbSceneParam._m0[77u].w : min(_863, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2817 = _2815.x;
    float _2818 = _2815.y;
    float _2819 = _2815.z;
    float _2820 = _2815.w;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    if (_863 > cbSceneParam._m0[78u].w)
    {
        float _2875 = isnan(_863) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _863 : min(cbSceneParam._m0[80u].w, _863));
        float _2876 = _2875 / _863;
        float _2887 = _2876 * _913;
        float _2888 = _914 * _2876;
        float _2889 = (-0.0) - _2888;
        float _2890 = _2876 * _915;
        float _2892 = (cbSceneParam._m0[77u].w * _2889) / _2875;
        float _2893 = _2892 + cbSceneParam._m0[79u].w;
        float _2894 = cbSceneParam._m0[79u].w - _2888;
        float _2900 = sqrt(((_2887 * _2887) + (_2888 * _2888)) + (_2890 * _2890));
        float _2903 = (1.0 - (cbSceneParam._m0[77u].w / _2875)) * _2900;
        float _2908 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2910 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3063;
        if (abs((_2889 - _2892) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3063 = ((((_2893 > 0.0) ? exp2(_2908 * _2893) : (2.0 - exp2(_2910 * _2893))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2903;
        }
        else
        {
            float _3023 = 1.0 / cbSceneParam._m0[80u].x;
            float _3024 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : max(_2893, _2894));
            float _3025 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : min(_2893, _2894));
            float _3034 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : min(_3024, 0.0));
            float _3035 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : min(_3025, 0.0));
            _3063 = ((abs(_2900 / _2889) * cbSceneParam._m0[80u].y) * ((((_3034 - _3035) * 2.0) - ((exp2(_2908 * (isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0)))) - exp2(_2908 * (isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))))) * _3023)) - ((exp2(_2910 * _3034) - exp2(_2910 * _3035)) * _3023))) + (_2903 * cbSceneParam._m0[80u].z);
        }
        vec4 _3065 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2800, _2801, 1.0), 0.0);
        float _3074 = exp2((_3063 * (-1.44269502162933349609375)) * (1.0 - _3065.w));
        float _3075 = log2(_3074);
        float _3091 = log2(_2820);
        _2912 = (exp2(_3091 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3075 * cbSceneParam._m0[78u].x)) * _3065.x) / cbSceneParam._m0[78u].x)) + _2817;
        _2914 = (exp2(_3091 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3075 * cbSceneParam._m0[78u].y)) * _3065.y) / cbSceneParam._m0[78u].y)) + _2818;
        _2916 = (exp2(_3091 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3075 * cbSceneParam._m0[78u].z)) * _3065.z) / cbSceneParam._m0[78u].z)) + _2819;
        _2918 = _3074 * _2820;
    }
    else
    {
        _2912 = _2817;
        _2914 = _2818;
        _2916 = _2819;
        _2918 = _2820;
    }
    float _2930 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2931 = _2930 == 3.0;
    float _2932 = log2(_2918);
    float _2939 = exp2(_2932 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2762 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1006))) + ((_2768 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1814)) * cbPerFrame._m0[3u].x));
    float _2940 = exp2(_2932 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2764 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1006))) + ((_2770 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1814)) * cbPerFrame._m0[3u].x));
    float _2941 = exp2(_2932 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2766 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1006))) + ((_2772 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1814)) * cbPerFrame._m0[3u].x));
    float _2950 = (_2930 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2950 * (_2931 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2912)));
    SV_Target.y = _2950 * (_2931 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2914)));
    SV_Target.z = _2950 * (_2931 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2916)));
    SV_Target.w = cbInstanceData._m0[_2792].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2792].w;
}


