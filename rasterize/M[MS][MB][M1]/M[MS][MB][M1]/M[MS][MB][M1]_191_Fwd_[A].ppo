#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1493;
float _3873;
float _3874;
float _3875;
float _3876;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _307.x * cbMtdParam._m0[11u].x;
    float _314 = _307.y * cbMtdParam._m0[11u].y;
    float _315 = _307.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _375 = _373.x;
    float _387 = dot(vec4(_375, _373.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _404 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_375 - _387) * cbMtdParam._m0[24u].y) + _387) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3885 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _412 = (_405 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _413 = (_405 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _414 = (_405 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _431 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _451 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _453 = _451.x;
    float _463 = dot(vec4(_453, _451.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _477 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_453 - _463) * cbMtdParam._m0[24u].y) + _463) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3896 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _478 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _485 = (_478 * ((_431.x * cbMtdParam._m0[13u].x) - _412)) + _412;
    float _486 = (_478 * ((_431.y * cbMtdParam._m0[13u].y) - _413)) + _413;
    float _487 = (_478 * ((_431.z * cbMtdParam._m0[13u].z) - _414)) + _414;
    vec4 _504 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _286) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _287) + cbTextureTilingScale._m0[20u].w));
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _546 = _544.x;
    float _547 = _544.y;
    float _548 = _544.z;
    float _555 = ((_527.x - _546) * _405) + _546;
    float _556 = ((_527.y - _547) * _405) + _547;
    float _557 = ((_527.z - _548) * _405) + _548;
    vec4 _569 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _582 = ((_569.z - _557) * _478) + _557;
    float _585 = ((((_569.x - _555) * _478) + _555) * 2.0) + (-1.0);
    float _586 = ((((_569.y - _556) * _478) + _556) * 2.0) + (-1.0);
    float _587 = dot(vec2(_585, _586), vec2(_585, _586));
    float _3907 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _592 = sqrt(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))));
    vec4 _606 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _631 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _633 = _631.x;
    float _634 = 1.0 - _633;
    float _640 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _643 = ((isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : min(_640, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _652 = (_643 - ((((((_633 - _634) * cbMtdParam._m0[24u].z) + _634) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _643))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3928 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _653 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _660 = (_653 * (cbMtdParam._m0[17u].x - _485)) + _485;
    float _661 = (_653 * (cbMtdParam._m0[17u].y - _486)) + _486;
    float _662 = (_653 * (cbMtdParam._m0[17u].z - _487)) + _487;
    vec4 _674 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _676 = _674.x;
    float _677 = 1.0 - _676;
    float _704 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_676 - _677) * cbMtdParam._m0[24u].w) + _677) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3939 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _705 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _713 = ((((cbMtdParam._m0[10u].x - _660) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _705) + _660;
    float _714 = ((((cbMtdParam._m0[10u].y - _661) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _705) + _661;
    float _715 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _662)) * _705) + _662;
    vec4 _741 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _743 = _741.x;
    float _761 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _743) * _405) + _743;
    float _778 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _761) * _478) + _761;
    float _782 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _778) * cbMtdParam._m0[19u].z) + _778;
    float _784 = _782 - (_782 * _653);
    float _786 = _784 - (_784 * _705);
    float _791 = (((_504.z - _582) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _582;
    float _795 = ((_606.z - _791) * cbMtdParam._m0[19u].w) + _791;
    vec4 _809 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _816 = (_809.x * 2.0) + (-1.0);
    float _817 = (_809.y * 2.0) + (-1.0);
    float _818 = dot(vec2(_816, _817), vec2(_816, _817));
    float _3950 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _826 = (_653 * (_809.z - _795)) + _795;
    float _829 = ((cbMtdParam._m0[23u].y - _826) * _705) + _826;
    vec4 _848 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _854 = (_848.x * 2.0) + (-1.0);
    float _855 = (_848.y * 2.0) + (-1.0);
    float _856 = dot(vec2(_854, _855), vec2(_854, _855));
    float _3961 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _870 = (_585 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_504.x * 2.0) + (-1.0)))) + (((_606.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _871 = (_586 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_504.y * 2.0) + (-1.0)))) + (((_606.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _883 = (((_816 - _870) + (cbMtdParam._m0[21u].x * _870)) * _653) + _870;
    float _884 = (((_817 - _871) + (cbMtdParam._m0[21u].x * _871)) * _653) + _871;
    float _885 = (_653 * (sqrt(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) - _592)) + _592;
    float _896 = (((_854 - _883) + (_883 * cbMtdParam._m0[22u].z)) * _705) + _883;
    float _897 = (((_855 - _884) + (_884 * cbMtdParam._m0[22u].z)) * _705) + _884;
    float _898 = ((sqrt(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) - _885) * _705) + _885;
    float _900 = cbMtdParam._m0[22u].x + _606.w;
    float _903 = fma(_898, _254 * NORMAL.x, fma(_897, _261 * TANGENT.x, (_247 * _239) * _896));
    float _906 = fma(_898, _254 * NORMAL.y, fma(_897, _261 * TANGENT.y, (_247 * _240) * _896));
    float _909 = fma(_898, _254 * NORMAL.z, fma(_897, _261 * TANGENT.z, (_247 * _241) * _896));
    float _913 = inversesqrt(dot(vec3(_903, _906, _909), vec3(_903, _906, _909)));
    float _914 = _913 * _903;
    float _915 = _913 * _906;
    float _916 = _913 * _909;
    float _3972 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _917 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _3994 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4005 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4016 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4027 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _922 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _936 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _986 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _976);
    float _987 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _976);
    float _988 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _976);
    float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
    float _993 = _986 * _992;
    float _994 = _987 * _992;
    float _995 = _988 * _992;
    vec4 _1000 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1002 = _1000.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1174 = sqrt(((_986 * _986) + (_987 * _987)) + (_988 * _988));
        float _1180 = (cbMatDynParam._m0[5u].x * _1174) + cbMatDynParam._m0[5u].y;
        float _4038 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1185 = (cbMatDynParam._m0[5u].z * _1174) + cbMatDynParam._m0[5u].w;
        float _4049 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) - _1181)) + _1181) < ((_1002 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1013 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1014 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1032 = fma(_916, cbSceneParam._m0[5u].z, fma(_915, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _914));
    float _1035 = fma(_916, cbSceneParam._m0[6u].z, fma(_915, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _914));
    float _1038 = fma(_916, cbSceneParam._m0[7u].z, fma(_915, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _914));
    uint _1051 = _267 + 9u;
    uint _1052 = _1051 + uint(cbMatDynParam._m0[0u].w);
    float _1058 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * cbInstanceData._m0[_1052].x;
    float _1059 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * cbInstanceData._m0[_1052].y;
    float _1060 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_1052].z;
    float _4060 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1061 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1062 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1063 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _1064 = 1.0 - _922;
    float _1065 = _1061 * _1064;
    float _1066 = _1062 * _1064;
    float _1067 = _1063 * _1064;
    float _1072 = (_1061 + (-0.039999999105930328369140625)) * _922;
    float _1073 = (_1062 + (-0.039999999105930328369140625)) * _922;
    float _1074 = (_1063 + (-0.039999999105930328369140625)) * _922;
    float _1075 = _1072 + 0.039999999105930328369140625;
    float _1077 = _1073 + 0.039999999105930328369140625;
    float _1078 = _1074 + 0.039999999105930328369140625;
    vec4 _1087 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1013, cbSceneParam._m0[86u].y * _1014));
    float _1091 = ((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * TEXCOORD_5.w) * _1087.x;
    float _1092 = dot(vec3(_914, _915, _916), vec3(_993, _994, _995));
    float _1095 = _1092 * 2.0;
    float _1099 = (_1095 * _914) - _993;
    float _1100 = (_1095 * _915) - _994;
    float _1101 = (_1095 * _916) - _995;
    float _1105 = abs(dot(vec3(_993, _994, _995), vec3(_914, _915, _916)));
    float _4093 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1107 = sqrt(_917);
    float _1120 = exp2((_1107 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1107 * 3.0));
    float _1126 = (1.0 - _1120) * ((_1107 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1127 = _1120 * _1107;
    float _1155 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1159 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1492;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1217 = fma(_1163, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1155));
        float _1221 = fma(_1163, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1155));
        float _1225 = fma(_1163, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1155));
        float _1250 = _1155 + _914;
        float _1251 = _1159 + _915;
        float _1252 = _1163 + _916;
        float _1262 = fma(_1252, cbModelParam._m0[26u].z, fma(_1251, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1250)) - _1217;
        float _1263 = fma(_1252, cbModelParam._m0[27u].z, fma(_1251, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1250)) - _1221;
        float _1264 = fma(_1252, cbModelParam._m0[28u].z, fma(_1251, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1250)) - _1225;
        float _1268 = inversesqrt(dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264)));
        float _1281 = ((_1268 * _1262) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1217 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1268 * _1263) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1221 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1268 * _1264) / cbModelParam._m0[34u].z) + ((((((_1225 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        float _1320 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1286.x + (-0.5));
        float _1322 = _1320 * (_1286.y + (-0.5));
        float _1323 = _1320 * (_1286.z + (-0.5));
        float _1330 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1293.x + (-0.5));
        float _1332 = _1330 * (_1293.y + (-0.5));
        float _1333 = _1330 * (_1293.z + (-0.5));
        float _1340 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1300.x + (-0.5));
        float _1342 = _1340 * (_1300.y + (-0.5));
        float _1343 = _1340 * (_1300.z + (-0.5));
        float _1350 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1307.x + (-0.5));
        float _1352 = _1350 * (_1307.y + (-0.5));
        float _1353 = _1350 * (_1307.z + (-0.5));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = _1321 * 0.5;
        float _1358 = _1331 * 0.5;
        float _1359 = _1341 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1374 = (dot(vec3(_914, _915, _916), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1384 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4141 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1386 + 1.0))) + _1391) * _1354;
        float _1401 = _1322 * 0.5;
        float _1402 = _1332 * 0.5;
        float _1403 = _1342 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_914, _915, _916), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4174 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1428 + 1.0))) + _1433) * _1355;
        float _1443 = _1323 * 0.5;
        float _1444 = _1333 * 0.5;
        float _1445 = _1343 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_914, _915, _916), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4207 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1470 + 1.0))) + _1475) * _1356;
        _1492 = _1323;
        _1494 = _1322;
        _1495 = _1321;
        _1496 = _1333;
        _1497 = _1332;
        _1498 = _1331;
        _1499 = _1343;
        _1500 = _1342;
        _1501 = _1341;
        _1502 = _1356;
        _1503 = _1355;
        _1504 = _1354;
        _1505 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1506 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1507 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1493;
        _1494 = _1493;
        _1495 = _1493;
        _1496 = _1493;
        _1497 = _1493;
        _1498 = _1493;
        _1499 = _1493;
        _1500 = _1493;
        _1501 = _1493;
        _1502 = _1493;
        _1503 = _1493;
        _1504 = _1493;
        _1505 = 0.0;
        _1506 = 0.0;
        _1507 = 0.0;
    }
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1534 = fma(_1163, cbModelParam._m0[30u].z, fma(_1159, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1155));
        float _1538 = fma(_1163, cbModelParam._m0[31u].z, fma(_1159, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1155));
        float _1542 = fma(_1163, cbModelParam._m0[32u].z, fma(_1159, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1155));
        float _1565 = _1155 + _914;
        float _1566 = _1159 + _915;
        float _1567 = _1163 + _916;
        float _1577 = fma(_1567, cbModelParam._m0[30u].z, fma(_1566, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1565)) - _1534;
        float _1578 = fma(_1567, cbModelParam._m0[31u].z, fma(_1566, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1565)) - _1538;
        float _1579 = fma(_1567, cbModelParam._m0[32u].z, fma(_1566, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1565)) - _1542;
        float _1583 = inversesqrt(dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579)));
        float _1596 = ((_1583 * _1577) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1534 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1597 = ((_1583 * _1578) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1538 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1598 = ((_1583 * _1579) / cbModelParam._m0[35u].z) + ((((((_1542 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        float _1633 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1600.x + (-0.5));
        float _1635 = _1633 * (_1600.y + (-0.5));
        float _1636 = _1633 * (_1600.z + (-0.5));
        float _1643 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1607.x + (-0.5));
        float _1645 = _1643 * (_1607.y + (-0.5));
        float _1646 = _1643 * (_1607.z + (-0.5));
        float _1653 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1614.x + (-0.5));
        float _1655 = _1653 * (_1614.y + (-0.5));
        float _1656 = _1653 * (_1614.z + (-0.5));
        float _1663 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1621.x + (-0.5));
        float _1665 = _1663 * (_1621.y + (-0.5));
        float _1666 = _1663 * (_1621.z + (-0.5));
        float _1667 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1668 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1669 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1670 = _1634 * 0.5;
        float _1671 = _1644 * 0.5;
        float _1672 = _1654 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_914, _915, _916), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1667 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4270 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1697 + 1.0))) + _1702) * _1667;
        float _1712 = _1635 * 0.5;
        float _1713 = _1645 * 0.5;
        float _1714 = _1655 * 0.5;
        float _1715 = dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714));
        float _1720 = (_1715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1715);
        float _1728 = (dot(vec3(_914, _915, _916), vec3(_1720 * _1712, _1720 * _1713, _1720 * _1714)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1737 = sqrt(((_1713 * _1713) + (_1712 * _1712)) + (_1714 * _1714)) / (_1668 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1739 = _1738 * 2.0;
        float _1743 = (1.0 - _1738) / (_1738 + 1.0);
        float _4303 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1753 = ((((1.0 - _1744) * (_1739 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1739 + 1.0))) + _1744) * _1668;
        float _1754 = _1636 * 0.5;
        float _1755 = _1646 * 0.5;
        float _1756 = _1656 * 0.5;
        float _1757 = dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756));
        float _1762 = (_1757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1757);
        float _1770 = (dot(vec3(_914, _915, _916), vec3(_1762 * _1754, _1762 * _1755, _1762 * _1756)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1779 = sqrt(((_1755 * _1755) + (_1754 * _1754)) + (_1756 * _1756)) / (_1669 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1781 = _1780 * 2.0;
        float _1785 = (1.0 - _1780) / (_1780 + 1.0);
        float _4336 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1795 = ((((1.0 - _1786) * (_1781 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1781 + 1.0))) + _1786) * _1669;
        _1803 = _1636;
        _1804 = _1635;
        _1805 = _1634;
        _1806 = _1646;
        _1807 = _1645;
        _1808 = _1644;
        _1809 = _1656;
        _1810 = _1655;
        _1811 = _1654;
        _1812 = _1669;
        _1813 = _1668;
        _1814 = _1667;
        _1815 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
        _1816 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)));
        _1817 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)));
    }
    else
    {
        _1803 = _1493;
        _1804 = _1493;
        _1805 = _1493;
        _1806 = _1493;
        _1807 = _1493;
        _1808 = _1493;
        _1809 = _1493;
        _1810 = _1493;
        _1811 = _1493;
        _1812 = _1493;
        _1813 = _1493;
        _1814 = _1493;
        _1815 = 0.0;
        _1816 = 0.0;
        _1817 = 0.0;
    }
    float _1827 = (cbModelParam._m0[1u].x * (_1815 - _1505)) + _1505;
    float _1828 = (cbModelParam._m0[1u].x * (_1816 - _1506)) + _1506;
    float _1829 = (cbModelParam._m0[1u].x * (_1817 - _1507)) + _1507;
    float _1850 = fma(_1829, cbSceneParam._m0[89u].z, fma(_1828, cbSceneParam._m0[89u].y, _1827 * cbSceneParam._m0[89u].x));
    float _1853 = fma(_1829, cbSceneParam._m0[90u].z, fma(_1828, cbSceneParam._m0[90u].y, _1827 * cbSceneParam._m0[90u].x));
    float _1856 = fma(_1829, cbSceneParam._m0[91u].z, fma(_1828, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1827));
    float _1871 = _1099 * 0.5;
    float _1872 = _1100 * 0.5;
    float _1873 = _1101 * 0.5;
    float _1874 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1805, _1808, _1811, _1814));
    float _1877 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1804, _1807, _1810, _1813));
    float _1880 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1803, _1806, _1809, _1812));
    float _1914;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1887 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1492, _1496, _1499, _1502));
        float _1891 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1494, _1497, _1500, _1503));
        float _1895 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1495, _1498, _1501, _1504));
        float _1902 = dot(vec4(cbModelParam._m0[39u]), vec4(_1871, _1872, _1873, 1.0));
        _1914 = dot(vec3(isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1902) ? 0.0 : (isnan(0.0) ? _1902 : max(0.0, _1902))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1914 = 1.0;
    }
    float _1925;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1916 = dot(vec4(cbModelParam._m0[40u]), vec4(_1871, _1872, _1873, 1.0));
        _1925 = dot(vec3(isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1916) ? 0.0 : (isnan(0.0) ? _1916 : max(0.0, _1916))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1925 = 1.0;
    }
    float _1929 = (_1925 * cbModelParam._m0[1u].x) + (_1914 * (1.0 - cbModelParam._m0[1u].x));
    float _1939 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _917);
    float _1940 = isnan(_1939) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1939 : min(cbModelParam._m0[25u].z, _1939));
    float _2021;
    float _2023;
    float _2025;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1988 = fma(_1163, cbModelParam._m0[13u].z, fma(_1159, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1155)) + cbModelParam._m0[13u].w;
        float _1992 = fma(_1163, cbModelParam._m0[14u].z, fma(_1159, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1155)) + cbModelParam._m0[14u].w;
        float _1996 = fma(_1163, cbModelParam._m0[15u].z, fma(_1159, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1155)) + cbModelParam._m0[15u].w;
        float _1999 = fma(_1101, cbModelParam._m0[13u].z, fma(_1100, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1099));
        float _2002 = fma(_1101, cbModelParam._m0[14u].z, fma(_1100, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1099));
        float _2005 = fma(_1101, cbModelParam._m0[15u].z, fma(_1100, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1099));
        float _2033;
        if (_1999 > 0.0)
        {
            _2033 = abs((1.0 - _1988) / _1999);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1988 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2033 = frontier_phi_17_15_ladder;
        }
        float _2236;
        if (_2002 > 0.0)
        {
            _2236 = abs((1.0 - _1992) / _2002);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1992 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2236 = frontier_phi_26_22_ladder;
        }
        float _2490;
        if (_2005 > 0.0)
        {
            _2490 = abs((1.0 - _1996) / _2005);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1996 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2490 = frontier_phi_38_33_ladder;
        }
        float _2492 = isnan(_2236) ? _2033 : (isnan(_2033) ? _2236 : min(_2033, _2236));
        float _2493 = isnan(_2490) ? _2492 : (isnan(_2492) ? _2490 : min(_2492, _2490));
        float _2497 = (_2493 * _1999) + _1988;
        float _2498 = (_2493 * _2002) + _1992;
        float _2499 = (_2493 * _2005) + _1996;
        float _2500 = _2493 * 9.9999997473787516355514526367188e-05;
        float _2502 = (-1.0) - _2500;
        float _2504 = _2500 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2499 > _2504) || ((_2499 < _2502) || ((_2498 > _2504) || ((_2498 < _2502) || ((_2497 < _2502) || (_2497 > _2504))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2627 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2499, cbModelParam._m0[9u].z, fma(_2498, cbModelParam._m0[9u].y, _2497 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2499, cbModelParam._m0[10u].z, fma(_2498, cbModelParam._m0[10u].y, _2497 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2499, cbModelParam._m0[11u].z, fma(_2498, cbModelParam._m0[11u].y, _2497 * cbModelParam._m0[11u].x))), _1940);
            frontier_phi_16_38_ladder = _2627.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2627.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2627.x * cbModelParam._m0[1u].y;
        }
        _2021 = frontier_phi_16_38_ladder_2;
        _2023 = frontier_phi_16_38_ladder_1;
        _2025 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2009 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1099, _1100, _1101), _1940);
        _2021 = _2009.x * cbModelParam._m0[1u].y;
        _2023 = _2009.y * cbModelParam._m0[1u].y;
        _2025 = _2009.z * cbModelParam._m0[1u].y;
    }
    float _2029 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _917);
    float _2030 = isnan(_2029) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2029 : min(cbModelParam._m0[25u].w, _2029));
    float _2120;
    float _2122;
    float _2124;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2084 = fma(_1163, cbModelParam._m0[21u].z, fma(_1159, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1155)) + cbModelParam._m0[21u].w;
        float _2088 = fma(_1163, cbModelParam._m0[22u].z, fma(_1159, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1155)) + cbModelParam._m0[22u].w;
        float _2092 = fma(_1163, cbModelParam._m0[23u].z, fma(_1159, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1155)) + cbModelParam._m0[23u].w;
        float _2095 = fma(_1101, cbModelParam._m0[21u].z, fma(_1100, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1099));
        float _2098 = fma(_1101, cbModelParam._m0[22u].z, fma(_1100, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1099));
        float _2101 = fma(_1101, cbModelParam._m0[23u].z, fma(_1100, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1099));
        float _2241;
        if (_2095 > 0.0)
        {
            _2241 = abs((1.0 - _2084) / _2095);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2084 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2241 = frontier_phi_28_24_ladder;
        }
        float _2517;
        if (_2098 > 0.0)
        {
            _2517 = abs((1.0 - _2088) / _2098);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2098 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2088 + 1.0) / _2098);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2517 = frontier_phi_40_35_ladder;
        }
        float _2730;
        if (_2101 > 0.0)
        {
            _2730 = abs((1.0 - _2092) / _2101);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2101 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2092 + 1.0) / _2101);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2730 = frontier_phi_49_46_ladder;
        }
        float _2732 = isnan(_2517) ? _2241 : (isnan(_2241) ? _2517 : min(_2241, _2517));
        float _2733 = isnan(_2730) ? _2732 : (isnan(_2732) ? _2730 : min(_2732, _2730));
        float _2737 = (_2733 * _2095) + _2084;
        float _2738 = (_2733 * _2098) + _2088;
        float _2739 = (_2733 * _2101) + _2092;
        float _2740 = _2733 * 9.9999997473787516355514526367188e-05;
        float _2741 = (-1.0) - _2740;
        float _2743 = _2740 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2739 > _2743) || ((_2739 < _2741) || ((_2738 > _2743) || ((_2738 < _2741) || ((_2737 < _2741) || (_2737 > _2743))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2938 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2739, cbModelParam._m0[17u].z, fma(_2738, cbModelParam._m0[17u].y, _2737 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2739, cbModelParam._m0[18u].z, fma(_2738, cbModelParam._m0[18u].y, _2737 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2739, cbModelParam._m0[19u].z, fma(_2738, cbModelParam._m0[19u].y, _2737 * cbModelParam._m0[19u].x))), _2030);
            frontier_phi_25_49_ladder = _2938.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2938.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2938.x * cbModelParam._m0[1u].z;
        }
        _2120 = frontier_phi_25_49_ladder_2;
        _2122 = frontier_phi_25_49_ladder_1;
        _2124 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2104 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1099, _1100, _1101), _2030);
        _2120 = _2104.x * cbModelParam._m0[1u].z;
        _2122 = _2104.y * cbModelParam._m0[1u].z;
        _2124 = _2104.z * cbModelParam._m0[1u].z;
    }
    float _2137 = (((_1126 * _1075) + _1127) * _1091) * ((cbModelParam._m0[1u].w * (_2120 - _2021)) + _2021);
    float _2139 = (((_1126 * _1077) + _1127) * _1091) * ((cbModelParam._m0[1u].w * (_2122 - _2023)) + _2023);
    float _2141 = (((_1126 * _1078) + _1127) * _1091) * ((cbModelParam._m0[1u].w * (_2124 - _2025)) + _2025);
    float _2144 = fma(_2141, cbSceneParam._m0[89u].z, fma(_2139, cbSceneParam._m0[89u].y, _2137 * cbSceneParam._m0[89u].x));
    float _2147 = fma(_2141, cbSceneParam._m0[90u].z, fma(_2139, cbSceneParam._m0[90u].y, _2137 * cbSceneParam._m0[90u].x));
    float _2150 = fma(_2141, cbSceneParam._m0[91u].z, fma(_2139, cbSceneParam._m0[91u].y, _2137 * cbSceneParam._m0[91u].x));
    uvec4 _2160 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2162 = _2160.x * 14u;
    uint _2163 = _2162 + 13u;
    float _2170 = _1091 + (-1.0);
    float _2175 = (cbLight._m0[_2163].x * _2170) + 1.0;
    float _2176 = (cbLight._m0[_2163].y * _2170) + 1.0;
    float _2177 = (cbLight._m0[_2163].z * _2170) + 1.0;
    float _2178 = (cbLight._m0[_2163].w * _2170) + 1.0;
    uint _2179 = _2162 + 5u;
    float _2185 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
    uint _2189 = _2162 + 4u;
    float _2195 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
    uint _2199 = _2162 | 1u;
    float _2210 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_914, _915, _916));
    float _2213 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_914, _915, _916));
    float _4472 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _4483 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2218 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * 0.3183098733425140380859375;
    float _2220 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * 0.3183098733425140380859375;
    float _2227 = ((cbLight._m0[_2179].x * _2185) * _2220) + ((cbLight._m0[_2189].x * _2195) * _2218);
    float _2228 = ((_2185 * cbLight._m0[_2179].y) * _2220) + ((_2195 * cbLight._m0[_2189].y) * _2218);
    float _2229 = ((_2185 * cbLight._m0[_2179].z) * _2220) + ((_2195 * cbLight._m0[_2189].z) * _2218);
    uvec4 _2233 = floatBitsToUint(cbLight._m0[_2162 + 12u]);
    bool _2235 = _2233.x == 0u;
    float _2246;
    float _2248;
    float _2250;
    if (_2235)
    {
        _2246 = _2227;
        _2248 = _2228;
        _2250 = _2229;
    }
    else
    {
        uint _2254 = _2162 + 6u;
        float _2270 = (dot(vec3(cbLight._m0[_2162 + 2u].xyz), vec3(_914, _915, _916)) * 0.5) + 0.5;
        float _2271 = _2270 * _2270;
        float _4494 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2272 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2273 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2246 = (((cbLight._m0[_2254].x * 0.3183098733425140380859375) * _2272) * _2273) + _2227;
        _2248 = (((cbLight._m0[_2254].y * 0.3183098733425140380859375) * _2272) * _2273) + _2228;
        _2250 = (((cbLight._m0[_2254].z * 0.3183098733425140380859375) * _2272) * _2273) + _2229;
    }
    bool _2253 = _2233.y == 0u;
    float _2291;
    float _2293;
    float _2295;
    if (_2253)
    {
        _2291 = _2246;
        _2293 = _2248;
        _2295 = _2250;
    }
    else
    {
        uint _2461 = _2162 + 7u;
        float _2477 = (dot(vec3(cbLight._m0[_2162 + 3u].xyz), vec3(_914, _915, _916)) * 0.5) + 0.5;
        float _2478 = _2477 * _2477;
        float _4510 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2479 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2480 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2291 = (((cbLight._m0[_2461].x * 0.3183098733425140380859375) * _2479) * _2480) + _2246;
        _2293 = (((cbLight._m0[_2461].y * 0.3183098733425140380859375) * _2479) * _2480) + _2248;
        _2295 = (((cbLight._m0[_2461].z * 0.3183098733425140380859375) * _2479) * _2480) + _2250;
    }
    uint _2298 = _2162 + 8u;
    float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _917) * 0.949999988079071044921875);
    float _2312 = _2311 * _2311;
    float _2313 = cbLight._m0[_2162].x + _993;
    float _2314 = cbLight._m0[_2162].y + _994;
    float _2315 = cbLight._m0[_2162].z + _995;
    float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
    float _2320 = _2319 * _2313;
    float _2321 = _2319 * _2314;
    float _2322 = _2319 * _2315;
    float _2323 = dot(vec3(_914, _915, _916), vec3(cbLight._m0[_2162].xyz));
    float _4526 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2326 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _4537 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _2327 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _2328 = dot(vec3(_914, _915, _916), vec3(_2320, _2321, _2322));
    float _4548 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2332 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2320, _2321, _2322));
    float _4559 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2336 = _2312 * _2312;
    float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
    float _2348 = exp2(log2(1.0 - (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) * 5.0);
    float _2349 = 0.959999978542327880859375 - _1072;
    float _2351 = 0.959999978542327880859375 - _1073;
    float _2352 = 0.959999978542327880859375 - _1074;
    float _2359 = 1.0 - _2312;
    float _2370 = (0.5 / (((_2327 * ((_2326 * _2359) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2359) + _2312) * _2326))) * _2326;
    float _4570 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2372 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
    uint _2383 = _2162 + 9u;
    float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _917) * 0.949999988079071044921875);
    float _2395 = _2394 * _2394;
    float _2396 = cbLight._m0[_2199].x + _993;
    float _2397 = cbLight._m0[_2199].y + _994;
    float _2398 = cbLight._m0[_2199].z + _995;
    float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
    float _2403 = _2402 * _2396;
    float _2404 = _2402 * _2397;
    float _2405 = _2402 * _2398;
    float _2406 = dot(vec3(_914, _915, _916), vec3(cbLight._m0[_2199].xyz));
    float _4581 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2410 = dot(vec3(_914, _915, _916), vec3(_2403, _2404, _2405));
    float _4592 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2414 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2403, _2404, _2405));
    float _4603 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2418 = _2395 * _2395;
    float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
    float _2429 = exp2(log2(1.0 - (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) * 5.0);
    float _2436 = 1.0 - _2395;
    float _2446 = (0.5 / (((_2327 * ((_2409 * _2436) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2436) + _2395) * _2409))) * _2409;
    float _4614 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2448 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
    float _2458 = (((((_2429 * _2349) + _1075) * cbLight._m0[_2383].x) * _2448) * _2185) + (((((_2348 * _2349) + _1075) * cbLight._m0[_2298].x) * _2372) * _2195);
    float _2459 = (((((_2429 * _2351) + _1077) * cbLight._m0[_2383].y) * _2448) * _2185) + (((((_2348 * _2351) + _1077) * cbLight._m0[_2298].y) * _2372) * _2195);
    float _2460 = (((((_2429 * _2352) + _1078) * cbLight._m0[_2383].z) * _2448) * _2185) + (((((_2348 * _2352) + _1078) * cbLight._m0[_2298].z) * _2372) * _2195);
    float _2522;
    float _2524;
    float _2526;
    if (_2235)
    {
        _2522 = _2458;
        _2524 = _2459;
        _2526 = _2460;
    }
    else
    {
        uint _2528 = _2162 + 2u;
        uint _2532 = _2162 + 10u;
        float _2546 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2528].w)) * _917) * 0.949999988079071044921875);
        float _2547 = _2546 * _2546;
        float _2548 = cbLight._m0[_2528].x + _993;
        float _2549 = cbLight._m0[_2528].y + _994;
        float _2550 = cbLight._m0[_2528].z + _995;
        float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
        float _2555 = _2554 * _2548;
        float _2556 = _2554 * _2549;
        float _2557 = _2554 * _2550;
        float _2558 = dot(vec3(_914, _915, _916), vec3(cbLight._m0[_2528].xyz));
        float _4625 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2562 = dot(vec3(_914, _915, _916), vec3(_2555, _2556, _2557));
        float _4636 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2566 = dot(vec3(cbLight._m0[_2528].xyz), vec3(_2555, _2556, _2557));
        float _4647 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2570 = _2547 * _2547;
        float _2574 = ((_2565 * _2565) * (_2570 + (-1.0))) + 1.0;
        float _2581 = exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0);
        float _2588 = 1.0 - _2547;
        float _2598 = (0.5 / (((_2327 * ((_2561 * _2588) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2588) + _2547) * _2561))) * _2561;
        float _4658 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2600 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2570 / ((_2574 * _2574) * 3.141590118408203125));
        float _2601 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2522 = (((((_2581 * _2349) + _1075) * cbLight._m0[_2532].x) * _2600) * _2601) + _2458;
        _2524 = (((((_2581 * _2351) + _1077) * cbLight._m0[_2532].y) * _2600) * _2601) + _2459;
        _2526 = (((((_2581 * _2352) + _1078) * cbLight._m0[_2532].z) * _2600) * _2601) + _2460;
    }
    float _2636;
    float _2638;
    float _2640;
    if (_2253)
    {
        _2636 = _2522;
        _2638 = _2524;
        _2640 = _2526;
    }
    else
    {
        uint _2647 = _2162 + 3u;
        uint _2651 = _2162 + 11u;
        float _2665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2647].w)) * _917) * 0.949999988079071044921875);
        float _2666 = _2665 * _2665;
        float _2667 = cbLight._m0[_2647].x + _993;
        float _2668 = cbLight._m0[_2647].y + _994;
        float _2669 = cbLight._m0[_2647].z + _995;
        float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
        float _2674 = _2673 * _2667;
        float _2675 = _2673 * _2668;
        float _2676 = _2673 * _2669;
        float _2677 = dot(vec3(_914, _915, _916), vec3(cbLight._m0[_2647].xyz));
        float _4674 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2680 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2681 = dot(vec3(_914, _915, _916), vec3(_2674, _2675, _2676));
        float _4685 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2684 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2685 = dot(vec3(cbLight._m0[_2647].xyz), vec3(_2674, _2675, _2676));
        float _4696 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2689 = _2666 * _2666;
        float _2693 = ((_2684 * _2684) * (_2689 + (-1.0))) + 1.0;
        float _2700 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
        float _2707 = 1.0 - _2666;
        float _2717 = (0.5 / (((_2327 * ((_2680 * _2707) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2707) + _2666) * _2680))) * _2680;
        float _4707 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2719 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2689 / ((_2693 * _2693) * 3.141590118408203125));
        float _2720 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2636 = (((((_2700 * _2349) + _1075) * cbLight._m0[_2651].x) * _2719) * _2720) + _2522;
        _2638 = (((((_2700 * _2351) + _1077) * cbLight._m0[_2651].y) * _2719) * _2720) + _2524;
        _2640 = (((((_2700 * _2352) + _1078) * cbLight._m0[_2651].z) * _2719) * _2720) + _2526;
    }
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    if (_2160.y == 0u)
    {
        float _2795 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2796 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2795;
        float _2797 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2795;
        float _2798 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2795;
        uvec4 _2810 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2811 = _2810.x;
        uint _2822 = uint((float(_2810.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1014) / _2811))) + floor(float(uint(cbSceneParam._m0[85u].x * _1013) / _2811)));
        float _2832 = (log2(_2798 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2833 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        uint _2836 = uint(isnan(14.0) ? _2833 : (isnan(_2833) ? 14.0 : min(_2833, 14.0)));
        uvec4 _2841 = texelFetch(g_lightClusterGridBuffer, int(((_2836 << 2u) + (_2822 << 6u)) >> 2u));
        uint _2842 = _2841.x;
        uint _2843 = _2810.z;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        if (((((1u << ((_2843 >> 4u) & 15u)) + 4294967295u) & _2842) == 0u) || ((_2843 & 240u) == 0u))
        {
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
        }
        else
        {
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            uint _3102 = 0u;
            uint _3111;
            bool _3112;
            for (;;)
            {
                _3111 = texelFetch(g_lightClassification, int((((_2836 << 5u) + (_2822 << 9u)) + (_3102 << 2u)) >> 2u)).x;
                _3112 = _3111 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3112)
                {
                    frontier_phi_66_pred = _3096;
                    frontier_phi_66_pred_1 = _3101;
                    frontier_phi_66_pred_2 = _3100;
                    frontier_phi_66_pred_3 = _3099;
                    frontier_phi_66_pred_4 = _3098;
                    frontier_phi_66_pred_5 = _3097;
                }
                else
                {
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    uint _3247;
                    _3241 = _3096;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3111;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    for (;;)
                    {
                        uint _3251 = uint(findLSB(_3247)) + (_3102 << 5u);
                        uint _3248 = (_3247 + 4294967295u) & _3247;
                        uint _3253 = _3251 * 48u;
                        vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3253)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 3u)).x));
                        uint _3273 = (_3251 * 48u) + 4u;
                        vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3273)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 3u)).x));
                        uint _3292 = (_3251 * 48u) + 8u;
                        vec3 _3303 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x));
                        float _3307 = _3267.x - _2796;
                        float _3308 = _3267.y - _2797;
                        float _3309 = _3267.z - _2798;
                        float _3310 = dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309));
                        float _3313 = inversesqrt(_3310);
                        float _3314 = _3313 * _3307;
                        float _3315 = _3313 * _3308;
                        float _3316 = _3313 * _3309;
                        float _3317 = dot(vec3(_1032, _1035, _1038), vec3(_3314, _3315, _3316));
                        float _3322 = 1.0 - (_3310 * _3267.w);
                        float _4733 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3323 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                        float _3324 = sqrt(_3310) * _3286.w;
                        float _3327 = 1.39999997615814208984375 / (_3324 + 1.39999997615814208984375);
                        float _3328 = _3327 * _3327;
                        float _3331 = ((1.0 - _3328) * _3317) + _3328;
                        float _3334 = _3324 * _3324;
                        float _3338 = ((isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0))) * _3323) / ((_3334 * 0.699999988079071044921875) + 1.0);
                        float _3342 = (-0.0) - _2796;
                        float _3343 = (-0.0) - _2797;
                        float _3344 = (-0.0) - _2798;
                        float _3348 = inversesqrt(dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344)));
                        float _3349 = _3348 * _3342;
                        float _3350 = _3348 * _3343;
                        float _3351 = _3348 * _3344;
                        float _3359 = exp2(log2(1.0 / ((_3334 * 3.5) + 5.0)) * 0.25);
                        float _3360 = 1.0 - _1107;
                        float _3367 = sqrt(1.0 - ((1.0 - (_3360 * _3360)) * (1.0 - (_3359 * _3359))));
                        float _3368 = _3367 * _3367;
                        float _3369 = _3368 * _3368;
                        float _3370 = _3349 + _3314;
                        float _3371 = _3350 + _3315;
                        float _3372 = _3351 + _3316;
                        float _3376 = inversesqrt(dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372)));
                        float _3380 = dot(vec3(_1032, _1035, _1038), vec3(_3349, _3350, _3351));
                        float _4749 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3383 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3384 = dot(vec3(_1032, _1035, _1038), vec3(_3376 * _3370, _3376 * _3371, _3376 * _3372));
                        float _4760 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3387 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3391 = ((_3387 * _3387) * (_3369 + (-1.0))) + 1.0;
                        float _3392 = _3327 * _3368;
                        float _3393 = _3392 * _3392;
                        float _3396 = ((1.0 - _3393) * _3317) + _3393;
                        float _4771 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3397 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3398 = 1.0 - _3368;
                        float _3408 = (0.5 / (((_3397 * ((_3383 * _3398) + _3368)) + 9.9999999392252902907785028219223e-09) + (((_3397 * _3398) + _3368) * _3383))) * _3397;
                        float _4782 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3419 = (((_3369 * 3.1415927410125732421875) * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) / ((_3391 * _3391) * ((_3334 * 2.1991131305694580078125) + 3.141590118408203125))) * _3323;
                        _3171 = (_3338 * _3286.x) + _3244;
                        _3172 = (_3338 * _3286.y) + _3245;
                        _3173 = (_3338 * _3286.z) + _3246;
                        _3168 = (_3419 * _3303.x) + _3241;
                        _3169 = (_3419 * _3303.y) + _3242;
                        _3170 = (_3419 * _3303.z) + _3243;
                        if (_3248 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3241 = _3168;
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3248;
                        }
                    }
                    frontier_phi_66_pred = _3168;
                    frontier_phi_66_pred_1 = _3173;
                    frontier_phi_66_pred_2 = _3172;
                    frontier_phi_66_pred_3 = _3171;
                    frontier_phi_66_pred_4 = _3170;
                    frontier_phi_66_pred_5 = _3169;
                }
                _2944 = frontier_phi_66_pred;
                _2954 = frontier_phi_66_pred_1;
                _2952 = frontier_phi_66_pred_2;
                _2950 = frontier_phi_66_pred_3;
                _2948 = frontier_phi_66_pred_4;
                _2946 = frontier_phi_66_pred_5;
                uint _3103 = _3102 + 1u;
                if (_3103 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3096 = _2944;
                    _3097 = _2946;
                    _3098 = _2948;
                    _3099 = _2950;
                    _3100 = _2952;
                    _3101 = _2954;
                    _3102 = _3103;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
        }
        uvec4 _2957 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2958 = _2957.z;
        uint _2960 = (_2958 >> 8u) & 15u;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        if (((4294967295u << _2960) & _2842) == 0u)
        {
            _3064 = _2943;
            _3066 = _2945;
            _3068 = _2947;
            _3070 = _2949;
            _3072 = _2951;
            _3074 = _2953;
        }
        else
        {
            float _3089 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
            float _3090 = _3089 * _2796;
            float _3091 = _3089 * _2797;
            float _3092 = _3089 * _2798;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2960 < ((_2958 >> 12u) & 15u))
            {
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3224 = _2943;
                float _3225 = _2945;
                float _3226 = _2947;
                float _3227 = _2949;
                float _3228 = _2951;
                float _3229 = _2953;
                uint _3230 = _2960;
                uint _3239;
                bool _3240;
                for (;;)
                {
                    _3239 = texelFetch(g_lightClassification, int((((_2836 << 5u) + (_2822 << 9u)) + (_3230 << 2u)) >> 2u)).x;
                    _3240 = _3239 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3240)
                    {
                        frontier_phi_77_pred = _3229;
                        frontier_phi_77_pred_1 = _3228;
                        frontier_phi_77_pred_2 = _3227;
                        frontier_phi_77_pred_3 = _3226;
                        frontier_phi_77_pred_4 = _3225;
                        frontier_phi_77_pred_5 = _3224;
                    }
                    else
                    {
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3446 = _3224;
                        float _3447 = _3225;
                        float _3448 = _3226;
                        float _3449 = _3227;
                        float _3450 = _3228;
                        float _3451 = _3229;
                        uint _3452 = _3239;
                        uint _3453;
                        vec4 _3478;
                        float _3479;
                        vec4 _3494;
                        vec3 _3506;
                        vec4 _3521;
                        vec4 _3536;
                        float _3582;
                        bool _3583;
                        for (;;)
                        {
                            uint _3463 = ((_3230 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3452));
                            _3453 = (_3452 + 4294967295u) & _3452;
                            uint _3465 = _3463 * 40u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            _3479 = _3478.w;
                            uint _3481 = (_3463 * 40u) + 4u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3463 * 40u) + 8u;
                            _3506 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x));
                            uint _3508 = (_3463 * 40u) + 16u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            uint _3523 = (_3463 * 40u) + 20u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3463 * 40u) + 24u;
                            vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3557 = (_3463 * 40u) + 28u;
                            vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            _3582 = fma(_2798, _3570.z, fma(_2797, _3570.y, _3570.x * _2796)) + _3570.w;
                            _3583 = !((fma(_2798, _3551.z, fma(_2797, _3551.y, _3551.x * _2796)) + _3551.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3583)
                            {
                                float _3610 = _3478.x - _2796;
                                float _3611 = _3478.y - _2797;
                                float _3612 = _3478.z - _2798;
                                float _3613 = dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612));
                                float _3616 = inversesqrt(_3613);
                                float _3617 = _3616 * _3610;
                                float _3618 = _3616 * _3611;
                                float _3619 = _3616 * _3612;
                                float _3623 = 1.0 - (_3613 / (_3479 * _3479));
                                float _4793 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3628 = sqrt(_3613) * _3494.w;
                                float _3630 = 1.39999997615814208984375 / (_3628 + 1.39999997615814208984375);
                                float _3631 = _3630 * _3630;
                                float _3634 = ((1.0 - _3631) * dot(vec3(_3617, _3618, _3619), vec3(_1032, _1035, _1038))) + _3631;
                                float _3637 = _3628 * _3628;
                                float _3641 = (fma(_2798, _3521.z, fma(_2797, _3521.y, _3521.x * _2796)) + _3521.w) / _3582;
                                float _3642 = (fma(_2798, _3536.z, fma(_2797, _3536.y, _3536.x * _2796)) + _3536.w) / _3582;
                                float _3646 = 1.0 - dot(vec2(_3641, _3642), vec2(_3641, _3642));
                                float _4809 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3648 = _3647 * (((isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0))) * _3624) / ((_3637 * 0.699999988079071044921875) + 1.0));
                                float _3660 = exp2(log2(1.0 / ((_3637 * 3.5) + 5.0)) * 0.25);
                                float _3661 = 1.0 - _1107;
                                float _3668 = sqrt(1.0 - ((1.0 - (_3661 * _3661)) * (1.0 - (_3660 * _3660))));
                                float _3669 = _3668 * _3668;
                                float _3670 = _3669 * _3669;
                                float _3671 = _3617 - _3090;
                                float _3672 = _3618 - _3091;
                                float _3673 = _3619 - _3092;
                                float _3677 = inversesqrt(dot(vec3(_3671, _3672, _3673), vec3(_3671, _3672, _3673)));
                                float _3681 = dot(vec3(_1032, _1035, _1038), vec3((-0.0) - _3090, (-0.0) - _3091, (-0.0) - _3092));
                                float _4820 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3684 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3685 = dot(vec3(_1032, _1035, _1038), vec3(_3677 * _3671, _3677 * _3672, _3677 * _3673));
                                float _4831 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3688 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3692 = ((_3688 * _3688) * (_3670 + (-1.0))) + 1.0;
                                float _3693 = _3630 * _3669;
                                float _3694 = _3693 * _3693;
                                float _3700 = ((1.0 - _3694) * dot(vec3(_1032, _1035, _1038), vec3(_3617, _3618, _3619))) + _3694;
                                float _4842 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3702 = 1.0 - _3669;
                                float _3712 = (0.5 / (((_3701 * ((_3684 * _3702) + _3669)) + 9.9999999392252902907785028219223e-09) + (((_3701 * _3702) + _3669) * _3684))) * _3701;
                                float _4853 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3722 = (_3647 * _3624) * (((_3670 * 3.1415927410125732421875) * (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) / ((_3692 * _3692) * ((_3637 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3648 * _3494.y;
                                frontier_phi_83_pred_1 = _3648 * _3494.x;
                                frontier_phi_83_pred_2 = _3722 * _3506.z;
                                frontier_phi_83_pred_3 = _3722 * _3506.y;
                                frontier_phi_83_pred_4 = _3722 * _3506.x;
                                frontier_phi_83_pred_5 = _3648 * _3494.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3730 = frontier_phi_83_pred;
                            _3729 = frontier_phi_83_pred_1;
                            _3728 = frontier_phi_83_pred_2;
                            _3727 = frontier_phi_83_pred_3;
                            _3726 = frontier_phi_83_pred_4;
                            _3731 = frontier_phi_83_pred_5;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3438 = _3731 + _3451;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            _3435 = _3728 + _3448;
                            if (_3453 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3453;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3438;
                        frontier_phi_77_pred_1 = _3437;
                        frontier_phi_77_pred_2 = _3436;
                        frontier_phi_77_pred_3 = _3435;
                        frontier_phi_77_pred_4 = _3434;
                        frontier_phi_77_pred_5 = _3433;
                    }
                    _3075 = frontier_phi_77_pred;
                    _3073 = frontier_phi_77_pred_1;
                    _3071 = frontier_phi_77_pred_2;
                    _3069 = frontier_phi_77_pred_3;
                    _3067 = frontier_phi_77_pred_4;
                    _3065 = frontier_phi_77_pred_5;
                    uint _3231 = _3230 + 1u;
                    if (_3231 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3224 = _3065;
                        _3225 = _3067;
                        _3226 = _3069;
                        _3227 = _3071;
                        _3228 = _3073;
                        _3229 = _3075;
                        _3230 = _3231;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3069;
                frontier_phi_58_59_ladder_1 = _3075;
                frontier_phi_58_59_ladder_2 = _3073;
                frontier_phi_58_59_ladder_3 = _3071;
                frontier_phi_58_59_ladder_4 = _3067;
                frontier_phi_58_59_ladder_5 = _3065;
            }
            else
            {
                frontier_phi_58_59_ladder = _2947;
                frontier_phi_58_59_ladder_1 = _2953;
                frontier_phi_58_59_ladder_2 = _2951;
                frontier_phi_58_59_ladder_3 = _2949;
                frontier_phi_58_59_ladder_4 = _2945;
                frontier_phi_58_59_ladder_5 = _2943;
            }
            _3064 = frontier_phi_58_59_ladder_5;
            _3066 = frontier_phi_58_59_ladder_4;
            _3068 = frontier_phi_58_59_ladder;
            _3070 = frontier_phi_58_59_ladder_3;
            _3072 = frontier_phi_58_59_ladder_2;
            _3074 = frontier_phi_58_59_ladder_1;
        }
        float _3079 = isnan(1.0) ? _1091 : (isnan(_1091) ? 1.0 : min(_1091, 1.0));
        _2855 = (_3079 * _3070) + _2291;
        _2857 = (_3079 * _3072) + _2293;
        _2859 = (_3079 * _3074) + _2295;
        _2861 = ((_3064 * _1075) * _3079) + _2636;
        _2863 = ((_3066 * _1077) * _3079) + _2638;
        _2865 = ((_3068 * _1078) * _3079) + _2640;
    }
    else
    {
        _2855 = _2291;
        _2857 = _2293;
        _2859 = _2295;
        _2861 = _2636;
        _2863 = _2638;
        _2865 = _2640;
    }
    float _4869 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _4880 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _4891 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _2882 = ((isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2855 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1091))) + ((_2861 + ((isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0))) * _1929)) * cbPerFrame._m0[3u].x);
    float _2883 = ((isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2857 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1091))) + ((_2863 + ((isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0))) * _1929)) * cbPerFrame._m0[3u].x);
    float _2884 = ((isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2859 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1091))) + ((_2865 + ((isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0))) * _1929)) * cbPerFrame._m0[3u].x);
    uint _2885 = _267 + 6u;
    float _2893 = _1013 / cbSceneParam._m0[86u].x;
    float _2894 = _1014 / cbSceneParam._m0[86u].y;
    vec4 _2908 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2893, _2894, (log2((isnan(cbSceneParam._m0[77u].w) ? _936 : (isnan(_936) ? cbSceneParam._m0[77u].w : min(_936, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2910 = _2908.x;
    float _2911 = _2908.y;
    float _2912 = _2908.z;
    float _2913 = _2908.w;
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    if (_936 > cbSceneParam._m0[78u].w)
    {
        float _2968 = isnan(_936) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _936 : min(cbSceneParam._m0[80u].w, _936));
        float _2969 = _2968 / _936;
        float _2980 = _2969 * _986;
        float _2981 = _987 * _2969;
        float _2982 = (-0.0) - _2981;
        float _2984 = _2969 * _988;
        float _2986 = (cbSceneParam._m0[77u].w * _2982) / _2968;
        float _2987 = _2986 + cbSceneParam._m0[79u].w;
        float _2988 = cbSceneParam._m0[79u].w - _2981;
        float _2994 = sqrt(((_2980 * _2980) + (_2981 * _2981)) + (_2984 * _2984));
        float _2997 = (1.0 - (cbSceneParam._m0[77u].w / _2968)) * _2994;
        float _3002 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3004 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3181;
        if (abs((_2982 - _2986) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3181 = ((((_2987 > 0.0) ? exp2(_3002 * _2987) : (2.0 - exp2(_3004 * _2987))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2997;
        }
        else
        {
            float _3125 = 1.0 / cbSceneParam._m0[80u].x;
            float _3126 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : max(_2987, _2988));
            float _3127 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : min(_2987, _2988));
            float _3136 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : min(_3126, 0.0));
            float _3137 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : min(_3127, 0.0));
            _3181 = ((abs(_2994 / _2982) * cbSceneParam._m0[80u].y) * ((((_3136 - _3137) * 2.0) - ((exp2(_3002 * (isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0)))) - exp2(_3002 * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0))))) * _3125)) - ((exp2(_3004 * _3136) - exp2(_3004 * _3137)) * _3125))) + (_2997 * cbSceneParam._m0[80u].z);
        }
        vec4 _3183 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2893, _2894, 1.0), 0.0);
        float _3192 = exp2((_3181 * (-1.44269502162933349609375)) * (1.0 - _3183.w));
        float _3193 = log2(_3192);
        float _3209 = log2(_2913);
        _3006 = (exp2(_3209 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].x)) * _3183.x) / cbSceneParam._m0[78u].x)) + _2910;
        _3008 = (exp2(_3209 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].y)) * _3183.y) / cbSceneParam._m0[78u].y)) + _2911;
        _3010 = (exp2(_3209 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].z)) * _3183.z) / cbSceneParam._m0[78u].z)) + _2912;
        _3012 = _3192 * _2913;
    }
    else
    {
        _3006 = _2910;
        _3008 = _2911;
        _3010 = _2912;
        _3012 = _2913;
    }
    bool _3219;
    vec4 _3022;
    vec4 _3044;
    float _3046;
    float _3050;
    float _3051;
    float _3052;
    float _3053;
    bool _3063;
    for (;;)
    {
        _3022 = cbMatDynParam._m0[0u];
        float _3024 = roundEven(_3022.y);
        bool _3025 = _3024 == 3.0;
        float _3026 = log2(_3012);
        float _3033 = exp2(_3026 * cbSceneParam._m0[78u].x) * _2882;
        float _3034 = exp2(_3026 * cbSceneParam._m0[78u].y) * _2883;
        float _3035 = exp2(_3026 * cbSceneParam._m0[78u].z) * _2884;
        float _3042 = _1002 + (-0.5);
        _3044 = cbMtdParam._m0[1u];
        _3046 = _3044.y * _3042;
        float _3049 = (_3024 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3050 = _3049 * (_3025 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3006)));
        _3051 = _3049 * (_3025 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3008)));
        _3052 = _3049 * (_3025 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3010)));
        _3053 = _3042 * 0.999000012874603271484375;
        _3063 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3063)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _3053) < 0.5)
            {
                _3219 = true;
                break;
            }
        }
        uint _3160 = _1051 + uint(_3022.w);
        if ((cbInstanceData._m0[_3160].w < 1.0) && ((cbInstanceData._m0[_3160].w + _3053) < 0.5))
        {
            _3219 = true;
            break;
        }
        if ((_3046 + 1.0) < _3044.x)
        {
            _3219 = true;
            break;
        }
        _3219 = false;
        break;
    }
    float _3424;
    if (_3219)
    {
        discard_state = true;
        _3424 = 0.0;
    }
    else
    {
        _3424 = cbInstanceData._m0[_2885].w;
    }
    SV_Target.x = _3050;
    SV_Target.y = _3051;
    SV_Target.z = _3052;
    SV_Target.w = _3424;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2885].w;
    discard_exit();
}


