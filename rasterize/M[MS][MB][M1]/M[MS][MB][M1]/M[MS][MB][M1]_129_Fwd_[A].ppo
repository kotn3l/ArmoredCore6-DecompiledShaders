#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1333;
float _3712;
float _3713;
float _3714;
float _3715;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3724 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3735 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3746 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].y) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3757 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _430 = (_423 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _431 = (_423 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _432 = (_423 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    float _436 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _430;
    float _439 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _431;
    float _442 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _432;
    float _449 = ((_430 - _436) * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) + _436;
    float _450 = ((_431 - _439) * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) + _439;
    float _451 = ((_432 - _442) * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) + _442;
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _534 = _532.x;
    float _535 = _532.y;
    float _536 = _532.z;
    float _545 = ((_515.z - _536) * _423) + _536;
    float _548 = ((((_515.x - _534) * _423) + _534) * 2.0) + (-1.0);
    float _549 = ((((_515.y - _535) * _423) + _535) * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3768 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))));
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _596 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _598 = _596.x;
    float _599 = 1.0 - _598;
    float _612 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_598 - _599) * cbMtdParam._m0[24u].z) + _599) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3779 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _620 = (_613 * ((_470.x * cbMtdParam._m0[18u].x) - _449)) + _449;
    float _621 = (_613 * ((_470.y * cbMtdParam._m0[18u].y) - _450)) + _450;
    float _622 = (_613 * ((_470.z * cbMtdParam._m0[18u].z) - _451)) + _451;
    vec4 _634 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _648 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _650 = _648.x;
    float _668 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _650) * _423) + _650;
    float _672 = ((_634.x - _668) * cbMtdParam._m0[19u].z) + _668;
    float _674 = _672 - (_672 * _613);
    float _679 = (((_490.z - _545) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _545;
    float _683 = ((_571.z - _679) * cbMtdParam._m0[19u].w) + _679;
    vec4 _696 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _703 = (_696.x * 2.0) + (-1.0);
    float _704 = (_696.y * 2.0) + (-1.0);
    float _705 = dot(vec2(_703, _704), vec2(_703, _704));
    float _3790 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _713 = (_613 * (_696.z - _683)) + _683;
    float _722 = (_548 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_490.x * 2.0) + (-1.0)))) + (((_571.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _723 = (_549 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_490.y * 2.0) + (-1.0)))) + (((_571.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _735 = (((_703 - _722) + (cbMtdParam._m0[21u].x * _722)) * _613) + _722;
    float _736 = (((_704 - _723) + (cbMtdParam._m0[21u].x * _723)) * _613) + _723;
    float _737 = (_613 * (sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) - _555)) + _555;
    float _739 = cbMtdParam._m0[22u].x + _571.w;
    float _742 = fma(_737, _238 * NORMAL.x, fma(_736, _245 * TANGENT.x, (_231 * _223) * _735));
    float _745 = fma(_737, _238 * NORMAL.y, fma(_736, _245 * TANGENT.y, (_231 * _224) * _735));
    float _748 = fma(_737, _238 * NORMAL.z, fma(_736, _245 * TANGENT.z, (_231 * _225) * _735));
    float _752 = inversesqrt(dot(vec3(_742, _745, _748), vec3(_742, _745, _748)));
    float _753 = _752 * _742;
    float _754 = _752 * _745;
    float _755 = _752 * _748;
    float _3801 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _756 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3823 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3834 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3845 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3856 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _761 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _775 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _826 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _816);
    float _827 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _816);
    float _828 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _816);
    float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
    float _833 = _826 * _832;
    float _834 = _827 * _832;
    float _835 = _828 * _832;
    vec4 _840 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _842 = _840.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1014 = sqrt(((_826 * _826) + (_827 * _827)) + (_828 * _828));
        float _1020 = (cbMatDynParam._m0[5u].x * _1014) + cbMatDynParam._m0[5u].y;
        float _3867 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1025 = (cbMatDynParam._m0[5u].z * _1014) + cbMatDynParam._m0[5u].w;
        float _3878 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) - _1021)) + _1021) < ((_842 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _853 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _854 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _872 = fma(_755, cbSceneParam._m0[5u].z, fma(_754, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _753));
    float _875 = fma(_755, cbSceneParam._m0[6u].z, fma(_754, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _753));
    float _878 = fma(_755, cbSceneParam._m0[7u].z, fma(_754, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _753));
    uint _891 = _272 + 9u;
    uint _892 = _891 + uint(cbMatDynParam._m0[0u].w);
    float _898 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * cbInstanceData._m0[_892].x;
    float _899 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_892].y;
    float _900 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_892].z;
    float _3889 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _901 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _904 = 1.0 - _761;
    float _905 = _901 * _904;
    float _906 = _902 * _904;
    float _907 = _903 * _904;
    float _912 = (_901 + (-0.039999999105930328369140625)) * _761;
    float _913 = (_902 + (-0.039999999105930328369140625)) * _761;
    float _914 = (_903 + (-0.039999999105930328369140625)) * _761;
    float _915 = _912 + 0.039999999105930328369140625;
    float _917 = _913 + 0.039999999105930328369140625;
    float _918 = _914 + 0.039999999105930328369140625;
    vec4 _927 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _853, cbSceneParam._m0[86u].y * _854));
    float _931 = ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * TEXCOORD_5.w) * _927.x;
    float _932 = dot(vec3(_753, _754, _755), vec3(_833, _834, _835));
    float _935 = _932 * 2.0;
    float _939 = (_935 * _753) - _833;
    float _940 = (_935 * _754) - _834;
    float _941 = (_935 * _755) - _835;
    float _945 = abs(dot(vec3(_833, _834, _835), vec3(_753, _754, _755)));
    float _3922 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _947 = sqrt(_756);
    float _960 = exp2((_947 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_947 * 3.0));
    float _966 = (1.0 - _960) * ((_947 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _967 = _960 * _947;
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1332;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1057 = fma(_1003, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _995));
        float _1061 = fma(_1003, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _995));
        float _1065 = fma(_1003, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _995));
        float _1090 = _995 + _753;
        float _1091 = _999 + _754;
        float _1092 = _1003 + _755;
        float _1102 = fma(_1092, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1090)) - _1057;
        float _1103 = fma(_1092, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1090)) - _1061;
        float _1104 = fma(_1092, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1090)) - _1065;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1057 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1061 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[34u].z) + ((((((_1065 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1160 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1126.x + (-0.5));
        float _1162 = _1160 * (_1126.y + (-0.5));
        float _1163 = _1160 * (_1126.z + (-0.5));
        float _1170 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1133.x + (-0.5));
        float _1172 = _1170 * (_1133.y + (-0.5));
        float _1173 = _1170 * (_1133.z + (-0.5));
        float _1180 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1140.x + (-0.5));
        float _1182 = _1180 * (_1140.y + (-0.5));
        float _1183 = _1180 * (_1140.z + (-0.5));
        float _1190 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1147.x + (-0.5));
        float _1192 = _1190 * (_1147.y + (-0.5));
        float _1193 = _1190 * (_1147.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1214 = (dot(vec3(_753, _754, _755), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1224 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3970 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1226 + 1.0))) + _1231) * _1194;
        float _1241 = _1162 * 0.5;
        float _1242 = _1172 * 0.5;
        float _1243 = _1182 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_753, _754, _755), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4003 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1268 + 1.0))) + _1273) * _1195;
        float _1283 = _1163 * 0.5;
        float _1284 = _1173 * 0.5;
        float _1285 = _1183 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_753, _754, _755), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4036 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1310 + 1.0))) + _1315) * _1196;
        _1332 = _1163;
        _1334 = _1162;
        _1335 = _1161;
        _1336 = _1173;
        _1337 = _1172;
        _1338 = _1171;
        _1339 = _1183;
        _1340 = _1182;
        _1341 = _1181;
        _1342 = _1196;
        _1343 = _1195;
        _1344 = _1194;
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
    }
    else
    {
        _1332 = _1333;
        _1334 = _1333;
        _1335 = _1333;
        _1336 = _1333;
        _1337 = _1333;
        _1338 = _1333;
        _1339 = _1333;
        _1340 = _1333;
        _1341 = _1333;
        _1342 = _1333;
        _1343 = _1333;
        _1344 = _1333;
        _1345 = 0.0;
        _1346 = 0.0;
        _1347 = 0.0;
    }
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1375 = fma(_1003, cbModelParam._m0[30u].z, fma(_999, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _995));
        float _1379 = fma(_1003, cbModelParam._m0[31u].z, fma(_999, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _995));
        float _1383 = fma(_1003, cbModelParam._m0[32u].z, fma(_999, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _995));
        float _1406 = _995 + _753;
        float _1407 = _999 + _754;
        float _1408 = _1003 + _755;
        float _1418 = fma(_1408, cbModelParam._m0[30u].z, fma(_1407, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1406)) - _1375;
        float _1419 = fma(_1408, cbModelParam._m0[31u].z, fma(_1407, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1406)) - _1379;
        float _1420 = fma(_1408, cbModelParam._m0[32u].z, fma(_1407, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1406)) - _1383;
        float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
        float _1437 = ((_1424 * _1418) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1375 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1424 * _1419) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1379 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1424 * _1420) / cbModelParam._m0[35u].z) + ((((((_1383 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        float _1474 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1441.x + (-0.5));
        float _1476 = _1474 * (_1441.y + (-0.5));
        float _1477 = _1474 * (_1441.z + (-0.5));
        float _1484 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1448.x + (-0.5));
        float _1486 = _1484 * (_1448.y + (-0.5));
        float _1487 = _1484 * (_1448.z + (-0.5));
        float _1494 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1455.x + (-0.5));
        float _1496 = _1494 * (_1455.y + (-0.5));
        float _1497 = _1494 * (_1455.z + (-0.5));
        float _1504 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1462.x + (-0.5));
        float _1506 = _1504 * (_1462.y + (-0.5));
        float _1507 = _1504 * (_1462.z + (-0.5));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = _1475 * 0.5;
        float _1512 = _1485 * 0.5;
        float _1513 = _1495 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_753, _754, _755), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4099 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1538 + 1.0))) + _1543) * _1508;
        float _1553 = _1476 * 0.5;
        float _1554 = _1486 * 0.5;
        float _1555 = _1496 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_753, _754, _755), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4132 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1580 + 1.0))) + _1585) * _1509;
        float _1595 = _1477 * 0.5;
        float _1596 = _1487 * 0.5;
        float _1597 = _1497 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_753, _754, _755), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4165 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1622 + 1.0))) + _1627) * _1510;
        _1644 = _1477;
        _1645 = _1476;
        _1646 = _1475;
        _1647 = _1487;
        _1648 = _1486;
        _1649 = _1485;
        _1650 = _1497;
        _1651 = _1496;
        _1652 = _1495;
        _1653 = _1510;
        _1654 = _1509;
        _1655 = _1508;
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
    }
    else
    {
        _1644 = _1333;
        _1645 = _1333;
        _1646 = _1333;
        _1647 = _1333;
        _1648 = _1333;
        _1649 = _1333;
        _1650 = _1333;
        _1651 = _1333;
        _1652 = _1333;
        _1653 = _1333;
        _1654 = _1333;
        _1655 = _1333;
        _1656 = 0.0;
        _1657 = 0.0;
        _1658 = 0.0;
    }
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1345)) + _1345;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1346)) + _1346;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1347)) + _1347;
    float _1691 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1668));
    float _1712 = _939 * 0.5;
    float _1713 = _940 * 0.5;
    float _1714 = _941 * 0.5;
    float _1715 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1718 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1721 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1755;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1728 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1332, _1336, _1339, _1342));
        float _1732 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1736 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1743 = dot(vec4(cbModelParam._m0[39u]), vec4(_1712, _1713, _1714, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1766;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1757 = dot(vec4(cbModelParam._m0[40u]), vec4(_1712, _1713, _1714, 1.0));
        _1766 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1766 = 1.0;
    }
    float _1770 = (_1766 * cbModelParam._m0[1u].x) + (_1755 * (1.0 - cbModelParam._m0[1u].x));
    float _1780 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _756);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1780 : min(cbModelParam._m0[25u].z, _1780));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1828 = fma(_1003, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _995)) + cbModelParam._m0[13u].w;
        float _1832 = fma(_1003, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _995)) + cbModelParam._m0[14u].w;
        float _1836 = fma(_1003, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _995)) + cbModelParam._m0[15u].w;
        float _1839 = fma(_941, cbModelParam._m0[13u].z, fma(_940, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _939));
        float _1842 = fma(_941, cbModelParam._m0[14u].z, fma(_940, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _939));
        float _1845 = fma(_941, cbModelParam._m0[15u].z, fma(_940, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _939));
        float _1873;
        if (_1839 > 0.0)
        {
            _1873 = abs((1.0 - _1828) / _1839);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1828 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1873 = frontier_phi_17_15_ladder;
        }
        float _2075;
        if (_1842 > 0.0)
        {
            _2075 = abs((1.0 - _1832) / _1842);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1832 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2075 = frontier_phi_26_22_ladder;
        }
        float _2329;
        if (_1845 > 0.0)
        {
            _2329 = abs((1.0 - _1836) / _1845);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1836 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2329 = frontier_phi_38_33_ladder;
        }
        float _2331 = isnan(_2075) ? _1873 : (isnan(_1873) ? _2075 : min(_1873, _2075));
        float _2332 = isnan(_2329) ? _2331 : (isnan(_2331) ? _2329 : min(_2331, _2329));
        float _2336 = (_2332 * _1839) + _1828;
        float _2337 = (_2332 * _1842) + _1832;
        float _2338 = (_2332 * _1845) + _1836;
        float _2339 = _2332 * 9.9999997473787516355514526367188e-05;
        float _2341 = (-1.0) - _2339;
        float _2343 = _2339 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2338 > _2343) || ((_2338 < _2341) || ((_2337 > _2343) || ((_2337 < _2341) || ((_2336 < _2341) || (_2336 > _2343))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2338, cbModelParam._m0[9u].z, fma(_2337, cbModelParam._m0[9u].y, _2336 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2338, cbModelParam._m0[10u].z, fma(_2337, cbModelParam._m0[10u].y, _2336 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2338, cbModelParam._m0[11u].z, fma(_2337, cbModelParam._m0[11u].y, _2336 * cbModelParam._m0[11u].x))), _1781);
            frontier_phi_16_38_ladder = _2466.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2466.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2466.x * cbModelParam._m0[1u].y;
        }
        _1861 = frontier_phi_16_38_ladder_2;
        _1863 = frontier_phi_16_38_ladder_1;
        _1865 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_939, _940, _941), _1781);
        _1861 = _1849.x * cbModelParam._m0[1u].y;
        _1863 = _1849.y * cbModelParam._m0[1u].y;
        _1865 = _1849.z * cbModelParam._m0[1u].y;
    }
    float _1869 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _756);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1869 : min(cbModelParam._m0[25u].w, _1869));
    float _1959;
    float _1961;
    float _1963;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1923 = fma(_1003, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _995)) + cbModelParam._m0[21u].w;
        float _1927 = fma(_1003, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _995)) + cbModelParam._m0[22u].w;
        float _1931 = fma(_1003, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _995)) + cbModelParam._m0[23u].w;
        float _1934 = fma(_941, cbModelParam._m0[21u].z, fma(_940, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _939));
        float _1937 = fma(_941, cbModelParam._m0[22u].z, fma(_940, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _939));
        float _1940 = fma(_941, cbModelParam._m0[23u].z, fma(_940, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _939));
        float _2080;
        if (_1934 > 0.0)
        {
            _2080 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2080 = frontier_phi_28_24_ladder;
        }
        float _2356;
        if (_1937 > 0.0)
        {
            _2356 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2356 = frontier_phi_40_35_ladder;
        }
        float _2569;
        if (_1940 > 0.0)
        {
            _2569 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2569 = frontier_phi_49_46_ladder;
        }
        float _2571 = isnan(_2356) ? _2080 : (isnan(_2080) ? _2356 : min(_2080, _2356));
        float _2572 = isnan(_2569) ? _2571 : (isnan(_2571) ? _2569 : min(_2571, _2569));
        float _2576 = (_2572 * _1934) + _1923;
        float _2577 = (_2572 * _1937) + _1927;
        float _2578 = (_2572 * _1940) + _1931;
        float _2579 = _2572 * 9.9999997473787516355514526367188e-05;
        float _2580 = (-1.0) - _2579;
        float _2582 = _2579 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2578 > _2582) || ((_2578 < _2580) || ((_2577 > _2582) || ((_2577 < _2580) || ((_2576 < _2580) || (_2576 > _2582))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2777 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2578, cbModelParam._m0[17u].z, fma(_2577, cbModelParam._m0[17u].y, _2576 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2578, cbModelParam._m0[18u].z, fma(_2577, cbModelParam._m0[18u].y, _2576 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2578, cbModelParam._m0[19u].z, fma(_2577, cbModelParam._m0[19u].y, _2576 * cbModelParam._m0[19u].x))), _1870);
            frontier_phi_25_49_ladder = _2777.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2777.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2777.x * cbModelParam._m0[1u].z;
        }
        _1959 = frontier_phi_25_49_ladder_2;
        _1961 = frontier_phi_25_49_ladder_1;
        _1963 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1943 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_939, _940, _941), _1870);
        _1959 = _1943.x * cbModelParam._m0[1u].z;
        _1961 = _1943.y * cbModelParam._m0[1u].z;
        _1963 = _1943.z * cbModelParam._m0[1u].z;
    }
    float _1976 = (((_966 * _915) + _967) * _931) * ((cbModelParam._m0[1u].w * (_1959 - _1861)) + _1861);
    float _1978 = (((_966 * _917) + _967) * _931) * ((cbModelParam._m0[1u].w * (_1961 - _1863)) + _1863);
    float _1980 = (((_966 * _918) + _967) * _931) * ((cbModelParam._m0[1u].w * (_1963 - _1865)) + _1865);
    float _1983 = fma(_1980, cbSceneParam._m0[89u].z, fma(_1978, cbSceneParam._m0[89u].y, _1976 * cbSceneParam._m0[89u].x));
    float _1986 = fma(_1980, cbSceneParam._m0[90u].z, fma(_1978, cbSceneParam._m0[90u].y, _1976 * cbSceneParam._m0[90u].x));
    float _1989 = fma(_1980, cbSceneParam._m0[91u].z, fma(_1978, cbSceneParam._m0[91u].y, _1976 * cbSceneParam._m0[91u].x));
    uvec4 _1999 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2001 = _1999.x * 14u;
    uint _2002 = _2001 + 13u;
    float _2009 = _931 + (-1.0);
    float _2014 = (cbLight._m0[_2002].x * _2009) + 1.0;
    float _2015 = (cbLight._m0[_2002].y * _2009) + 1.0;
    float _2016 = (cbLight._m0[_2002].z * _2009) + 1.0;
    float _2017 = (cbLight._m0[_2002].w * _2009) + 1.0;
    uint _2018 = _2001 + 5u;
    float _2024 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2028 = _2001 + 4u;
    float _2034 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
    uint _2038 = _2001 | 1u;
    float _2049 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_753, _754, _755));
    float _2052 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_753, _754, _755));
    float _4301 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _4312 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2057 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * 0.3183098733425140380859375;
    float _2059 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * 0.3183098733425140380859375;
    float _2066 = ((cbLight._m0[_2018].x * _2024) * _2059) + ((cbLight._m0[_2028].x * _2034) * _2057);
    float _2067 = ((_2024 * cbLight._m0[_2018].y) * _2059) + ((_2034 * cbLight._m0[_2028].y) * _2057);
    float _2068 = ((_2024 * cbLight._m0[_2018].z) * _2059) + ((_2034 * cbLight._m0[_2028].z) * _2057);
    uvec4 _2072 = floatBitsToUint(cbLight._m0[_2001 + 12u]);
    bool _2074 = _2072.x == 0u;
    float _2085;
    float _2087;
    float _2089;
    if (_2074)
    {
        _2085 = _2066;
        _2087 = _2067;
        _2089 = _2068;
    }
    else
    {
        uint _2093 = _2001 + 6u;
        float _2109 = (dot(vec3(cbLight._m0[_2001 + 2u].xyz), vec3(_753, _754, _755)) * 0.5) + 0.5;
        float _2110 = _2109 * _2109;
        float _4323 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2111 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2112 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2085 = (((cbLight._m0[_2093].x * 0.3183098733425140380859375) * _2111) * _2112) + _2066;
        _2087 = (((cbLight._m0[_2093].y * 0.3183098733425140380859375) * _2111) * _2112) + _2067;
        _2089 = (((cbLight._m0[_2093].z * 0.3183098733425140380859375) * _2111) * _2112) + _2068;
    }
    bool _2092 = _2072.y == 0u;
    float _2130;
    float _2132;
    float _2134;
    if (_2092)
    {
        _2130 = _2085;
        _2132 = _2087;
        _2134 = _2089;
    }
    else
    {
        uint _2300 = _2001 + 7u;
        float _2316 = (dot(vec3(cbLight._m0[_2001 + 3u].xyz), vec3(_753, _754, _755)) * 0.5) + 0.5;
        float _2317 = _2316 * _2316;
        float _4339 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2318 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2319 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2130 = (((cbLight._m0[_2300].x * 0.3183098733425140380859375) * _2318) * _2319) + _2085;
        _2132 = (((cbLight._m0[_2300].y * 0.3183098733425140380859375) * _2318) * _2319) + _2087;
        _2134 = (((cbLight._m0[_2300].z * 0.3183098733425140380859375) * _2318) * _2319) + _2089;
    }
    uint _2137 = _2001 + 8u;
    float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2001].w)) * _756) * 0.949999988079071044921875);
    float _2151 = _2150 * _2150;
    float _2152 = cbLight._m0[_2001].x + _833;
    float _2153 = cbLight._m0[_2001].y + _834;
    float _2154 = cbLight._m0[_2001].z + _835;
    float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
    float _2159 = _2158 * _2152;
    float _2160 = _2158 * _2153;
    float _2161 = _2158 * _2154;
    float _2162 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2001].xyz));
    float _4355 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _4366 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _2166 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2167 = dot(vec3(_753, _754, _755), vec3(_2159, _2160, _2161));
    float _4377 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2171 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_2159, _2160, _2161));
    float _4388 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2175 = _2151 * _2151;
    float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
    float _2187 = exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0);
    float _2188 = 0.959999978542327880859375 - _912;
    float _2190 = 0.959999978542327880859375 - _913;
    float _2191 = 0.959999978542327880859375 - _914;
    float _2198 = 1.0 - _2151;
    float _2209 = (0.5 / (((_2166 * ((_2165 * _2198) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2198) + _2151) * _2165))) * _2165;
    float _4399 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2211 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
    uint _2222 = _2001 + 9u;
    float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _756) * 0.949999988079071044921875);
    float _2234 = _2233 * _2233;
    float _2235 = cbLight._m0[_2038].x + _833;
    float _2236 = cbLight._m0[_2038].y + _834;
    float _2237 = cbLight._m0[_2038].z + _835;
    float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
    float _2242 = _2241 * _2235;
    float _2243 = _2241 * _2236;
    float _2244 = _2241 * _2237;
    float _2245 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2038].xyz));
    float _4410 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2249 = dot(vec3(_753, _754, _755), vec3(_2242, _2243, _2244));
    float _4421 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2253 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2242, _2243, _2244));
    float _4432 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2257 = _2234 * _2234;
    float _2261 = ((_2252 * _2252) * (_2257 + (-1.0))) + 1.0;
    float _2268 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
    float _2275 = 1.0 - _2234;
    float _2285 = (0.5 / (((_2166 * ((_2248 * _2275) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2275) + _2234) * _2248))) * _2248;
    float _4443 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2287 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2257 / ((_2261 * _2261) * 3.141590118408203125));
    float _2297 = (((((_2268 * _2188) + _915) * cbLight._m0[_2222].x) * _2287) * _2024) + (((((_2187 * _2188) + _915) * cbLight._m0[_2137].x) * _2211) * _2034);
    float _2298 = (((((_2268 * _2190) + _917) * cbLight._m0[_2222].y) * _2287) * _2024) + (((((_2187 * _2190) + _917) * cbLight._m0[_2137].y) * _2211) * _2034);
    float _2299 = (((((_2268 * _2191) + _918) * cbLight._m0[_2222].z) * _2287) * _2024) + (((((_2187 * _2191) + _918) * cbLight._m0[_2137].z) * _2211) * _2034);
    float _2361;
    float _2363;
    float _2365;
    if (_2074)
    {
        _2361 = _2297;
        _2363 = _2298;
        _2365 = _2299;
    }
    else
    {
        uint _2367 = _2001 + 2u;
        uint _2371 = _2001 + 10u;
        float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2367].w)) * _756) * 0.949999988079071044921875);
        float _2386 = _2385 * _2385;
        float _2387 = cbLight._m0[_2367].x + _833;
        float _2388 = cbLight._m0[_2367].y + _834;
        float _2389 = cbLight._m0[_2367].z + _835;
        float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
        float _2394 = _2393 * _2387;
        float _2395 = _2393 * _2388;
        float _2396 = _2393 * _2389;
        float _2397 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2367].xyz));
        float _4454 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2401 = dot(vec3(_753, _754, _755), vec3(_2394, _2395, _2396));
        float _4465 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2405 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_2394, _2395, _2396));
        float _4476 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2409 = _2386 * _2386;
        float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
        float _2420 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
        float _2427 = 1.0 - _2386;
        float _2437 = (0.5 / (((_2166 * ((_2400 * _2427) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2427) + _2386) * _2400))) * _2400;
        float _4487 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2439 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
        float _2440 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2361 = (((((_2420 * _2188) + _915) * cbLight._m0[_2371].x) * _2439) * _2440) + _2297;
        _2363 = (((((_2420 * _2190) + _917) * cbLight._m0[_2371].y) * _2439) * _2440) + _2298;
        _2365 = (((((_2420 * _2191) + _918) * cbLight._m0[_2371].z) * _2439) * _2440) + _2299;
    }
    float _2475;
    float _2477;
    float _2479;
    if (_2092)
    {
        _2475 = _2361;
        _2477 = _2363;
        _2479 = _2365;
    }
    else
    {
        uint _2486 = _2001 + 3u;
        uint _2490 = _2001 + 11u;
        float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2486].w)) * _756) * 0.949999988079071044921875);
        float _2505 = _2504 * _2504;
        float _2506 = cbLight._m0[_2486].x + _833;
        float _2507 = cbLight._m0[_2486].y + _834;
        float _2508 = cbLight._m0[_2486].z + _835;
        float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
        float _2513 = _2512 * _2506;
        float _2514 = _2512 * _2507;
        float _2515 = _2512 * _2508;
        float _2516 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2486].xyz));
        float _4503 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2520 = dot(vec3(_753, _754, _755), vec3(_2513, _2514, _2515));
        float _4514 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2524 = dot(vec3(cbLight._m0[_2486].xyz), vec3(_2513, _2514, _2515));
        float _4525 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2528 = _2505 * _2505;
        float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
        float _2539 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
        float _2546 = 1.0 - _2505;
        float _2556 = (0.5 / (((_2166 * ((_2519 * _2546) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2546) + _2505) * _2519))) * _2519;
        float _4536 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2558 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
        float _2559 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2475 = (((((_2539 * _2188) + _915) * cbLight._m0[_2490].x) * _2558) * _2559) + _2361;
        _2477 = (((((_2539 * _2190) + _917) * cbLight._m0[_2490].y) * _2558) * _2559) + _2363;
        _2479 = (((((_2539 * _2191) + _918) * cbLight._m0[_2490].z) * _2558) * _2559) + _2365;
    }
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    if (_1999.y == 0u)
    {
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2635 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2634;
        float _2636 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2634;
        float _2637 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2634;
        uvec4 _2649 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2650 = _2649.x;
        uint _2661 = uint((float(_2649.y) * floor(float(uint(cbSceneParam._m0[85u].y * _854) / _2650))) + floor(float(uint(cbSceneParam._m0[85u].x * _853) / _2650)));
        float _2671 = (log2(_2637 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2672 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        uint _2675 = uint(isnan(14.0) ? _2672 : (isnan(_2672) ? 14.0 : min(_2672, 14.0)));
        uvec4 _2680 = texelFetch(g_lightClusterGridBuffer, int(((_2675 << 2u) + (_2661 << 6u)) >> 2u));
        uint _2681 = _2680.x;
        uint _2682 = _2649.z;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        if (((((1u << ((_2682 >> 4u) & 15u)) + 4294967295u) & _2681) == 0u) || ((_2682 & 240u) == 0u))
        {
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
        }
        else
        {
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            uint _2941 = 0u;
            uint _2950;
            bool _2951;
            for (;;)
            {
                _2950 = texelFetch(g_lightClassification, int((((_2675 << 5u) + (_2661 << 9u)) + (_2941 << 2u)) >> 2u)).x;
                _2951 = _2950 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2951)
                {
                    frontier_phi_66_pred = _2935;
                    frontier_phi_66_pred_1 = _2940;
                    frontier_phi_66_pred_2 = _2939;
                    frontier_phi_66_pred_3 = _2938;
                    frontier_phi_66_pred_4 = _2937;
                    frontier_phi_66_pred_5 = _2936;
                }
                else
                {
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    uint _3086;
                    _3080 = _2935;
                    _3081 = _2936;
                    _3082 = _2937;
                    _3083 = _2938;
                    _3084 = _2939;
                    _3085 = _2940;
                    _3086 = _2950;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    for (;;)
                    {
                        uint _3090 = uint(findLSB(_3086)) + (_2941 << 5u);
                        uint _3087 = (_3086 + 4294967295u) & _3086;
                        uint _3092 = _3090 * 48u;
                        vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3092)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 3u)).x));
                        uint _3112 = (_3090 * 48u) + 4u;
                        vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3112)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 3u)).x));
                        uint _3131 = (_3090 * 48u) + 8u;
                        vec3 _3142 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3131)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 2u)).x));
                        float _3146 = _3106.x - _2635;
                        float _3147 = _3106.y - _2636;
                        float _3148 = _3106.z - _2637;
                        float _3149 = dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148));
                        float _3152 = inversesqrt(_3149);
                        float _3153 = _3152 * _3146;
                        float _3154 = _3152 * _3147;
                        float _3155 = _3152 * _3148;
                        float _3156 = dot(vec3(_872, _875, _878), vec3(_3153, _3154, _3155));
                        float _3161 = 1.0 - (_3149 * _3106.w);
                        float _4562 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3162 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                        float _3163 = sqrt(_3149) * _3125.w;
                        float _3166 = 1.39999997615814208984375 / (_3163 + 1.39999997615814208984375);
                        float _3167 = _3166 * _3166;
                        float _3170 = ((1.0 - _3167) * _3156) + _3167;
                        float _3173 = _3163 * _3163;
                        float _3177 = ((isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0))) * _3162) / ((_3173 * 0.699999988079071044921875) + 1.0);
                        float _3181 = (-0.0) - _2635;
                        float _3182 = (-0.0) - _2636;
                        float _3183 = (-0.0) - _2637;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3188 = _3187 * _3181;
                        float _3189 = _3187 * _3182;
                        float _3190 = _3187 * _3183;
                        float _3198 = exp2(log2(1.0 / ((_3173 * 3.5) + 5.0)) * 0.25);
                        float _3199 = 1.0 - _947;
                        float _3206 = sqrt(1.0 - ((1.0 - (_3199 * _3199)) * (1.0 - (_3198 * _3198))));
                        float _3207 = _3206 * _3206;
                        float _3208 = _3207 * _3207;
                        float _3209 = _3188 + _3153;
                        float _3210 = _3189 + _3154;
                        float _3211 = _3190 + _3155;
                        float _3215 = inversesqrt(dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211)));
                        float _3219 = dot(vec3(_872, _875, _878), vec3(_3188, _3189, _3190));
                        float _4578 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3222 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3223 = dot(vec3(_872, _875, _878), vec3(_3215 * _3209, _3215 * _3210, _3215 * _3211));
                        float _4589 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3226 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                        float _3230 = ((_3226 * _3226) * (_3208 + (-1.0))) + 1.0;
                        float _3231 = _3166 * _3207;
                        float _3232 = _3231 * _3231;
                        float _3235 = ((1.0 - _3232) * _3156) + _3232;
                        float _4600 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3236 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3237 = 1.0 - _3207;
                        float _3247 = (0.5 / (((_3236 * ((_3222 * _3237) + _3207)) + 9.9999999392252902907785028219223e-09) + (((_3236 * _3237) + _3207) * _3222))) * _3236;
                        float _4611 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3258 = (((_3208 * 3.1415927410125732421875) * (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) / ((_3230 * _3230) * ((_3173 * 2.1991131305694580078125) + 3.141590118408203125))) * _3162;
                        _3010 = (_3177 * _3125.x) + _3083;
                        _3011 = (_3177 * _3125.y) + _3084;
                        _3012 = (_3177 * _3125.z) + _3085;
                        _3007 = (_3258 * _3142.x) + _3080;
                        _3008 = (_3258 * _3142.y) + _3081;
                        _3009 = (_3258 * _3142.z) + _3082;
                        if (_3087 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3080 = _3007;
                            _3081 = _3008;
                            _3082 = _3009;
                            _3083 = _3010;
                            _3084 = _3011;
                            _3085 = _3012;
                            _3086 = _3087;
                        }
                    }
                    frontier_phi_66_pred = _3007;
                    frontier_phi_66_pred_1 = _3012;
                    frontier_phi_66_pred_2 = _3011;
                    frontier_phi_66_pred_3 = _3010;
                    frontier_phi_66_pred_4 = _3009;
                    frontier_phi_66_pred_5 = _3008;
                }
                _2783 = frontier_phi_66_pred;
                _2793 = frontier_phi_66_pred_1;
                _2791 = frontier_phi_66_pred_2;
                _2789 = frontier_phi_66_pred_3;
                _2787 = frontier_phi_66_pred_4;
                _2785 = frontier_phi_66_pred_5;
                uint _2942 = _2941 + 1u;
                if (_2942 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2935 = _2783;
                    _2936 = _2785;
                    _2937 = _2787;
                    _2938 = _2789;
                    _2939 = _2791;
                    _2940 = _2793;
                    _2941 = _2942;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
        }
        uvec4 _2796 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2797 = _2796.z;
        uint _2799 = (_2797 >> 8u) & 15u;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        if (((4294967295u << _2799) & _2681) == 0u)
        {
            _2903 = _2782;
            _2905 = _2784;
            _2907 = _2786;
            _2909 = _2788;
            _2911 = _2790;
            _2913 = _2792;
        }
        else
        {
            float _2928 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
            float _2929 = _2928 * _2635;
            float _2930 = _2928 * _2636;
            float _2931 = _2928 * _2637;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2799 < ((_2797 >> 12u) & 15u))
            {
                float _2904;
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _3063 = _2782;
                float _3064 = _2784;
                float _3065 = _2786;
                float _3066 = _2788;
                float _3067 = _2790;
                float _3068 = _2792;
                uint _3069 = _2799;
                uint _3078;
                bool _3079;
                for (;;)
                {
                    _3078 = texelFetch(g_lightClassification, int((((_2675 << 5u) + (_2661 << 9u)) + (_3069 << 2u)) >> 2u)).x;
                    _3079 = _3078 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3079)
                    {
                        frontier_phi_77_pred = _3068;
                        frontier_phi_77_pred_1 = _3067;
                        frontier_phi_77_pred_2 = _3066;
                        frontier_phi_77_pred_3 = _3065;
                        frontier_phi_77_pred_4 = _3064;
                        frontier_phi_77_pred_5 = _3063;
                    }
                    else
                    {
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3285 = _3063;
                        float _3286 = _3064;
                        float _3287 = _3065;
                        float _3288 = _3066;
                        float _3289 = _3067;
                        float _3290 = _3068;
                        uint _3291 = _3078;
                        uint _3292;
                        vec4 _3317;
                        float _3318;
                        vec4 _3333;
                        vec3 _3345;
                        vec4 _3360;
                        vec4 _3375;
                        float _3421;
                        bool _3422;
                        for (;;)
                        {
                            uint _3302 = ((_3069 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3291));
                            _3292 = (_3291 + 4294967295u) & _3291;
                            uint _3304 = _3302 * 40u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3318 = _3317.w;
                            uint _3320 = (_3302 * 40u) + 4u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3335 = (_3302 * 40u) + 8u;
                            _3345 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x));
                            uint _3347 = (_3302 * 40u) + 16u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3302 * 40u) + 20u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3302 * 40u) + 24u;
                            vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3396 = (_3302 * 40u) + 28u;
                            vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            _3421 = fma(_2637, _3409.z, fma(_2636, _3409.y, _3409.x * _2635)) + _3409.w;
                            _3422 = !((fma(_2637, _3390.z, fma(_2636, _3390.y, _3390.x * _2635)) + _3390.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3422)
                            {
                                float _3449 = _3317.x - _2635;
                                float _3450 = _3317.y - _2636;
                                float _3451 = _3317.z - _2637;
                                float _3452 = dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451));
                                float _3455 = inversesqrt(_3452);
                                float _3456 = _3455 * _3449;
                                float _3457 = _3455 * _3450;
                                float _3458 = _3455 * _3451;
                                float _3462 = 1.0 - (_3452 / (_3318 * _3318));
                                float _4622 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3467 = sqrt(_3452) * _3333.w;
                                float _3469 = 1.39999997615814208984375 / (_3467 + 1.39999997615814208984375);
                                float _3470 = _3469 * _3469;
                                float _3473 = ((1.0 - _3470) * dot(vec3(_3456, _3457, _3458), vec3(_872, _875, _878))) + _3470;
                                float _3476 = _3467 * _3467;
                                float _3480 = (fma(_2637, _3360.z, fma(_2636, _3360.y, _3360.x * _2635)) + _3360.w) / _3421;
                                float _3481 = (fma(_2637, _3375.z, fma(_2636, _3375.y, _3375.x * _2635)) + _3375.w) / _3421;
                                float _3485 = 1.0 - dot(vec2(_3480, _3481), vec2(_3480, _3481));
                                float _4638 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3487 = _3486 * (((isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0))) * _3463) / ((_3476 * 0.699999988079071044921875) + 1.0));
                                float _3499 = exp2(log2(1.0 / ((_3476 * 3.5) + 5.0)) * 0.25);
                                float _3500 = 1.0 - _947;
                                float _3507 = sqrt(1.0 - ((1.0 - (_3500 * _3500)) * (1.0 - (_3499 * _3499))));
                                float _3508 = _3507 * _3507;
                                float _3509 = _3508 * _3508;
                                float _3510 = _3456 - _2929;
                                float _3511 = _3457 - _2930;
                                float _3512 = _3458 - _2931;
                                float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                                float _3520 = dot(vec3(_872, _875, _878), vec3((-0.0) - _2929, (-0.0) - _2930, (-0.0) - _2931));
                                float _4649 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3524 = dot(vec3(_872, _875, _878), vec3(_3516 * _3510, _3516 * _3511, _3516 * _3512));
                                float _4660 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3527 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3531 = ((_3527 * _3527) * (_3509 + (-1.0))) + 1.0;
                                float _3532 = _3469 * _3508;
                                float _3533 = _3532 * _3532;
                                float _3539 = ((1.0 - _3533) * dot(vec3(_872, _875, _878), vec3(_3456, _3457, _3458))) + _3533;
                                float _4671 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3541 = 1.0 - _3508;
                                float _3551 = (0.5 / (((_3540 * ((_3523 * _3541) + _3508)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3508) * _3523))) * _3540;
                                float _4682 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3561 = (_3486 * _3463) * (((_3509 * 3.1415927410125732421875) * (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) / ((_3531 * _3531) * ((_3476 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3487 * _3333.y;
                                frontier_phi_83_pred_1 = _3487 * _3333.x;
                                frontier_phi_83_pred_2 = _3561 * _3345.z;
                                frontier_phi_83_pred_3 = _3561 * _3345.y;
                                frontier_phi_83_pred_4 = _3561 * _3345.x;
                                frontier_phi_83_pred_5 = _3487 * _3333.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3569 = frontier_phi_83_pred;
                            _3568 = frontier_phi_83_pred_1;
                            _3567 = frontier_phi_83_pred_2;
                            _3566 = frontier_phi_83_pred_3;
                            _3565 = frontier_phi_83_pred_4;
                            _3570 = frontier_phi_83_pred_5;
                            _3275 = _3568 + _3288;
                            _3276 = _3569 + _3289;
                            _3277 = _3570 + _3290;
                            _3272 = _3565 + _3285;
                            _3273 = _3566 + _3286;
                            _3274 = _3567 + _3287;
                            if (_3292 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3292;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3277;
                        frontier_phi_77_pred_1 = _3276;
                        frontier_phi_77_pred_2 = _3275;
                        frontier_phi_77_pred_3 = _3274;
                        frontier_phi_77_pred_4 = _3273;
                        frontier_phi_77_pred_5 = _3272;
                    }
                    _2914 = frontier_phi_77_pred;
                    _2912 = frontier_phi_77_pred_1;
                    _2910 = frontier_phi_77_pred_2;
                    _2908 = frontier_phi_77_pred_3;
                    _2906 = frontier_phi_77_pred_4;
                    _2904 = frontier_phi_77_pred_5;
                    uint _3070 = _3069 + 1u;
                    if (_3070 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3063 = _2904;
                        _3064 = _2906;
                        _3065 = _2908;
                        _3066 = _2910;
                        _3067 = _2912;
                        _3068 = _2914;
                        _3069 = _3070;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2908;
                frontier_phi_58_59_ladder_1 = _2914;
                frontier_phi_58_59_ladder_2 = _2912;
                frontier_phi_58_59_ladder_3 = _2910;
                frontier_phi_58_59_ladder_4 = _2906;
                frontier_phi_58_59_ladder_5 = _2904;
            }
            else
            {
                frontier_phi_58_59_ladder = _2786;
                frontier_phi_58_59_ladder_1 = _2792;
                frontier_phi_58_59_ladder_2 = _2790;
                frontier_phi_58_59_ladder_3 = _2788;
                frontier_phi_58_59_ladder_4 = _2784;
                frontier_phi_58_59_ladder_5 = _2782;
            }
            _2903 = frontier_phi_58_59_ladder_5;
            _2905 = frontier_phi_58_59_ladder_4;
            _2907 = frontier_phi_58_59_ladder;
            _2909 = frontier_phi_58_59_ladder_3;
            _2911 = frontier_phi_58_59_ladder_2;
            _2913 = frontier_phi_58_59_ladder_1;
        }
        float _2918 = isnan(1.0) ? _931 : (isnan(_931) ? 1.0 : min(_931, 1.0));
        _2694 = (_2918 * _2909) + _2130;
        _2696 = (_2918 * _2911) + _2132;
        _2698 = (_2918 * _2913) + _2134;
        _2700 = ((_2903 * _915) * _2918) + _2475;
        _2702 = ((_2905 * _917) * _2918) + _2477;
        _2704 = ((_2907 * _918) * _2918) + _2479;
    }
    else
    {
        _2694 = _2130;
        _2696 = _2132;
        _2698 = _2134;
        _2700 = _2475;
        _2702 = _2477;
        _2704 = _2479;
    }
    float _4698 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4709 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4720 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _2721 = ((isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2694 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _931))) + ((_2700 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    float _2722 = ((isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2696 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _931))) + ((_2702 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    float _2723 = ((isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2698 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _931))) + ((_2704 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    uint _2724 = _272 + 6u;
    float _2732 = _853 / cbSceneParam._m0[86u].x;
    float _2733 = _854 / cbSceneParam._m0[86u].y;
    vec4 _2747 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2732, _2733, (log2((isnan(cbSceneParam._m0[77u].w) ? _775 : (isnan(_775) ? cbSceneParam._m0[77u].w : min(_775, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2749 = _2747.x;
    float _2750 = _2747.y;
    float _2751 = _2747.z;
    float _2752 = _2747.w;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    if (_775 > cbSceneParam._m0[78u].w)
    {
        float _2807 = isnan(_775) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _775 : min(cbSceneParam._m0[80u].w, _775));
        float _2808 = _2807 / _775;
        float _2819 = _2808 * _826;
        float _2820 = _827 * _2808;
        float _2821 = (-0.0) - _2820;
        float _2823 = _2808 * _828;
        float _2825 = (cbSceneParam._m0[77u].w * _2821) / _2807;
        float _2826 = _2825 + cbSceneParam._m0[79u].w;
        float _2827 = cbSceneParam._m0[79u].w - _2820;
        float _2833 = sqrt(((_2819 * _2819) + (_2820 * _2820)) + (_2823 * _2823));
        float _2836 = (1.0 - (cbSceneParam._m0[77u].w / _2807)) * _2833;
        float _2841 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2843 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3020;
        if (abs((_2821 - _2825) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3020 = ((((_2826 > 0.0) ? exp2(_2841 * _2826) : (2.0 - exp2(_2843 * _2826))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2836;
        }
        else
        {
            float _2964 = 1.0 / cbSceneParam._m0[80u].x;
            float _2965 = isnan(_2827) ? _2826 : (isnan(_2826) ? _2827 : max(_2826, _2827));
            float _2966 = isnan(_2827) ? _2826 : (isnan(_2826) ? _2827 : min(_2826, _2827));
            float _2975 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : min(_2965, 0.0));
            float _2976 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : min(_2966, 0.0));
            _3020 = ((abs(_2833 / _2821) * cbSceneParam._m0[80u].y) * ((((_2975 - _2976) * 2.0) - ((exp2(_2841 * (isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0)))) - exp2(_2841 * (isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))))) * _2964)) - ((exp2(_2843 * _2975) - exp2(_2843 * _2976)) * _2964))) + (_2836 * cbSceneParam._m0[80u].z);
        }
        vec4 _3022 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2732, _2733, 1.0), 0.0);
        float _3031 = exp2((_3020 * (-1.44269502162933349609375)) * (1.0 - _3022.w));
        float _3032 = log2(_3031);
        float _3048 = log2(_2752);
        _2845 = (exp2(_3048 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].x)) * _3022.x) / cbSceneParam._m0[78u].x)) + _2749;
        _2847 = (exp2(_3048 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].y)) * _3022.y) / cbSceneParam._m0[78u].y)) + _2750;
        _2849 = (exp2(_3048 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].z)) * _3022.z) / cbSceneParam._m0[78u].z)) + _2751;
        _2851 = _3031 * _2752;
    }
    else
    {
        _2845 = _2749;
        _2847 = _2750;
        _2849 = _2751;
        _2851 = _2752;
    }
    bool _3058;
    vec4 _2861;
    vec4 _2883;
    float _2885;
    float _2889;
    float _2890;
    float _2891;
    float _2892;
    bool _2902;
    for (;;)
    {
        _2861 = cbMatDynParam._m0[0u];
        float _2863 = roundEven(_2861.y);
        bool _2864 = _2863 == 3.0;
        float _2865 = log2(_2851);
        float _2872 = exp2(_2865 * cbSceneParam._m0[78u].x) * _2721;
        float _2873 = exp2(_2865 * cbSceneParam._m0[78u].y) * _2722;
        float _2874 = exp2(_2865 * cbSceneParam._m0[78u].z) * _2723;
        float _2881 = _842 + (-0.5);
        _2883 = cbMtdParam._m0[1u];
        _2885 = _2883.y * _2881;
        float _2888 = (_2863 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2889 = _2888 * (_2864 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2845)));
        _2890 = _2888 * (_2864 ? _2873 : (_2873 + (cbSceneParam._m0[72u].w * _2847)));
        _2891 = _2888 * (_2864 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2849)));
        _2892 = _2881 * 0.999000012874603271484375;
        _2902 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2902)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _2892) < 0.5)
            {
                _3058 = true;
                break;
            }
        }
        uint _2999 = _891 + uint(_2861.w);
        if ((cbInstanceData._m0[_2999].w < 1.0) && ((cbInstanceData._m0[_2999].w + _2892) < 0.5))
        {
            _3058 = true;
            break;
        }
        if ((_2885 + 1.0) < _2883.x)
        {
            _3058 = true;
            break;
        }
        _3058 = false;
        break;
    }
    float _3263;
    if (_3058)
    {
        discard_state = true;
        _3263 = 0.0;
    }
    else
    {
        _3263 = cbInstanceData._m0[_2724].w;
    }
    SV_Target.x = _2889;
    SV_Target.y = _2890;
    SV_Target.z = _2891;
    SV_Target.w = _3263;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2724].w;
    discard_exit();
}


