#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1441;
float _3845;
float _3846;
float _3847;
float _3848;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _371 = _369.x;
    float _383 = dot(vec4(_371, _369.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _400 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_371 - _383) * cbMtdParam._m0[24u].y) + _383) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3857 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _408 = (_401 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _409 = (_401 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _410 = (_401 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _427 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _459 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _473 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_449 - _459) * cbMtdParam._m0[24u].y) + _459) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3868 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _481 = (_474 * ((_427.x * cbMtdParam._m0[13u].x) - _408)) + _408;
    float _482 = (_474 * ((_427.y * cbMtdParam._m0[13u].y) - _409)) + _409;
    float _483 = (_474 * ((_427.z * cbMtdParam._m0[13u].z) - _410)) + _410;
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _518 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _520 = _518.x;
    float _521 = _518.y;
    float _522 = _518.z;
    float _529 = ((_501.x - _520) * _401) + _520;
    float _530 = ((_501.y - _521) * _401) + _521;
    float _531 = ((_501.z - _522) * _401) + _522;
    vec4 _543 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _556 = ((_543.z - _531) * _474) + _531;
    float _559 = ((((_543.x - _529) * _474) + _529) * 2.0) + (-1.0);
    float _561 = ((((_543.y - _530) * _474) + _530) * 2.0) + (-1.0);
    float _562 = dot(vec2(_559, _561), vec2(_559, _561));
    float _3879 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _567 = sqrt(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))));
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _598 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _600 = _598.x;
    float _601 = 1.0 - _600;
    float _607 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _610 = ((isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : min(_607, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _619 = (_610 - ((((((_600 - _601) * cbMtdParam._m0[24u].z) + _601) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _610))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3900 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _627 = (_620 * (cbMtdParam._m0[17u].x - _481)) + _481;
    float _628 = (_620 * (cbMtdParam._m0[17u].y - _482)) + _482;
    float _629 = (_620 * (cbMtdParam._m0[17u].z - _483)) + _483;
    vec4 _641 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _643 = _641.x;
    float _644 = 1.0 - _643;
    float _671 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_643 - _644) * cbMtdParam._m0[24u].w) + _644) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3911 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _672 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _680 = ((((cbMtdParam._m0[10u].x - _627) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _672) + _627;
    float _681 = ((((cbMtdParam._m0[10u].y - _628) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _672) + _628;
    float _682 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _629)) * _672) + _629;
    vec4 _708 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _710 = _708.x;
    float _728 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _710) * _401) + _710;
    float _745 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _728) * _474) + _728;
    float _749 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _745) * cbMtdParam._m0[19u].z) + _745;
    float _751 = _749 - (_749 * _620);
    float _753 = _751 - (_751 * _672);
    vec4 _767 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _774 = (_767.x * 2.0) + (-1.0);
    float _775 = (_767.y * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _3922 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _784 = (_620 * (_767.z - _556)) + _556;
    float _787 = ((cbMtdParam._m0[23u].y - _784) * _672) + _784;
    vec4 _806 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _812 = (_806.x * 2.0) + (-1.0);
    float _813 = (_806.y * 2.0) + (-1.0);
    float _814 = dot(vec2(_812, _813), vec2(_812, _813));
    float _3933 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _831 = (((_774 - _559) + (cbMtdParam._m0[21u].x * _559)) * _620) + _559;
    float _832 = (((_775 - _561) + (cbMtdParam._m0[21u].x * _561)) * _620) + _561;
    float _833 = (_620 * (sqrt(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) - _567)) + _567;
    float _844 = (((_812 - _831) + (_831 * cbMtdParam._m0[22u].z)) * _672) + _831;
    float _845 = (((_813 - _832) + (_832 * cbMtdParam._m0[22u].z)) * _672) + _832;
    float _846 = ((sqrt(1.0 - (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) - _833) * _672) + _833;
    float _848 = cbMtdParam._m0[22u].x + _580.w;
    float _851 = fma(_846, _250 * NORMAL.x, fma(_845, _257 * TANGENT.x, (_243 * _235) * _844));
    float _854 = fma(_846, _250 * NORMAL.y, fma(_845, _257 * TANGENT.y, (_243 * _236) * _844));
    float _857 = fma(_846, _250 * NORMAL.z, fma(_845, _257 * TANGENT.z, (_243 * _237) * _844));
    float _861 = inversesqrt(dot(vec3(_851, _854, _857), vec3(_851, _854, _857)));
    float _862 = _861 * _851;
    float _863 = _861 * _854;
    float _864 = _861 * _857;
    float _3944 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _865 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _3966 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _3977 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _3988 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _3999 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _870 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _884 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _934 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _924);
    float _935 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _924);
    float _936 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _924);
    float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
    float _941 = _934 * _940;
    float _942 = _935 * _940;
    float _943 = _936 * _940;
    vec4 _948 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _950 = _948.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1122 = sqrt(((_934 * _934) + (_935 * _935)) + (_936 * _936));
        float _1128 = (cbMatDynParam._m0[5u].x * _1122) + cbMatDynParam._m0[5u].y;
        float _4010 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1133 = (cbMatDynParam._m0[5u].z * _1122) + cbMatDynParam._m0[5u].w;
        float _4021 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) - _1129)) + _1129) < ((_950 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _961 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _962 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _980 = fma(_864, cbSceneParam._m0[5u].z, fma(_863, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _862));
    float _983 = fma(_864, cbSceneParam._m0[6u].z, fma(_863, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _862));
    float _986 = fma(_864, cbSceneParam._m0[7u].z, fma(_863, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _862));
    uint _999 = _263 + 9u;
    uint _1000 = _999 + uint(cbMatDynParam._m0[0u].w);
    float _1006 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * cbInstanceData._m0[_1000].x;
    float _1007 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * cbInstanceData._m0[_1000].y;
    float _1008 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * cbInstanceData._m0[_1000].z;
    float _4032 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _4054 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _1012 = 1.0 - _870;
    float _1013 = _1009 * _1012;
    float _1014 = _1010 * _1012;
    float _1015 = _1011 * _1012;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _870;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _870;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _870;
    float _1023 = _1020 + 0.039999999105930328369140625;
    float _1025 = _1021 + 0.039999999105930328369140625;
    float _1026 = _1022 + 0.039999999105930328369140625;
    vec4 _1035 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _961, cbSceneParam._m0[86u].y * _962));
    float _1039 = ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * TEXCOORD_5.w) * _1035.x;
    float _1040 = dot(vec3(_862, _863, _864), vec3(_941, _942, _943));
    float _1043 = _1040 * 2.0;
    float _1047 = (_1043 * _862) - _941;
    float _1048 = (_1043 * _863) - _942;
    float _1049 = (_1043 * _864) - _943;
    float _1053 = abs(dot(vec3(_941, _942, _943), vec3(_862, _863, _864)));
    float _4065 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1055 = sqrt(_865);
    float _1068 = exp2((_1055 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1055 * 3.0));
    float _1074 = (1.0 - _1068) * ((_1055 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1075 = _1068 * _1055;
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1111 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1440;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1165 = fma(_1111, cbModelParam._m0[26u].z, fma(_1107, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1103));
        float _1169 = fma(_1111, cbModelParam._m0[27u].z, fma(_1107, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1103));
        float _1173 = fma(_1111, cbModelParam._m0[28u].z, fma(_1107, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1103));
        float _1198 = _1103 + _862;
        float _1199 = _1107 + _863;
        float _1200 = _1111 + _864;
        float _1210 = fma(_1200, cbModelParam._m0[26u].z, fma(_1199, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1198)) - _1165;
        float _1211 = fma(_1200, cbModelParam._m0[27u].z, fma(_1199, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1198)) - _1169;
        float _1212 = fma(_1200, cbModelParam._m0[28u].z, fma(_1199, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1198)) - _1173;
        float _1216 = inversesqrt(dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212)));
        float _1229 = ((_1216 * _1210) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1165 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1216 * _1211) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1169 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1216 * _1212) / cbModelParam._m0[34u].z) + ((((((_1173 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        float _1268 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1234.x + (-0.5));
        float _1270 = _1268 * (_1234.y + (-0.5));
        float _1271 = _1268 * (_1234.z + (-0.5));
        float _1278 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1241.x + (-0.5));
        float _1280 = _1278 * (_1241.y + (-0.5));
        float _1281 = _1278 * (_1241.z + (-0.5));
        float _1288 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1248.x + (-0.5));
        float _1290 = _1288 * (_1248.y + (-0.5));
        float _1291 = _1288 * (_1248.z + (-0.5));
        float _1298 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1255.x + (-0.5));
        float _1300 = _1298 * (_1255.y + (-0.5));
        float _1301 = _1298 * (_1255.z + (-0.5));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = _1269 * 0.5;
        float _1306 = _1279 * 0.5;
        float _1307 = _1289 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1322 = (dot(vec3(_862, _863, _864), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1332 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4113 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1334 + 1.0))) + _1339) * _1302;
        float _1349 = _1270 * 0.5;
        float _1350 = _1280 * 0.5;
        float _1351 = _1290 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_862, _863, _864), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4146 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1376 + 1.0))) + _1381) * _1303;
        float _1391 = _1271 * 0.5;
        float _1392 = _1281 * 0.5;
        float _1393 = _1291 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_862, _863, _864), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4179 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1418 + 1.0))) + _1423) * _1304;
        _1440 = _1271;
        _1442 = _1270;
        _1443 = _1269;
        _1444 = _1281;
        _1445 = _1280;
        _1446 = _1279;
        _1447 = _1291;
        _1448 = _1290;
        _1449 = _1289;
        _1450 = _1304;
        _1451 = _1303;
        _1452 = _1302;
        _1453 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1454 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1455 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
    }
    else
    {
        _1440 = _1441;
        _1442 = _1441;
        _1443 = _1441;
        _1444 = _1441;
        _1445 = _1441;
        _1446 = _1441;
        _1447 = _1441;
        _1448 = _1441;
        _1449 = _1441;
        _1450 = _1441;
        _1451 = _1441;
        _1452 = _1441;
        _1453 = 0.0;
        _1454 = 0.0;
        _1455 = 0.0;
    }
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1482 = fma(_1111, cbModelParam._m0[30u].z, fma(_1107, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1103));
        float _1486 = fma(_1111, cbModelParam._m0[31u].z, fma(_1107, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1103));
        float _1490 = fma(_1111, cbModelParam._m0[32u].z, fma(_1107, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1103));
        float _1513 = _1103 + _862;
        float _1514 = _1107 + _863;
        float _1515 = _1111 + _864;
        float _1525 = fma(_1515, cbModelParam._m0[30u].z, fma(_1514, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1513)) - _1482;
        float _1526 = fma(_1515, cbModelParam._m0[31u].z, fma(_1514, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1513)) - _1486;
        float _1527 = fma(_1515, cbModelParam._m0[32u].z, fma(_1514, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1513)) - _1490;
        float _1531 = inversesqrt(dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527)));
        float _1544 = ((_1531 * _1525) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1482 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1545 = ((_1531 * _1526) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1486 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1546 = ((_1531 * _1527) / cbModelParam._m0[35u].z) + ((((((_1490 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        float _1581 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1548.x + (-0.5));
        float _1583 = _1581 * (_1548.y + (-0.5));
        float _1584 = _1581 * (_1548.z + (-0.5));
        float _1591 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1555.x + (-0.5));
        float _1593 = _1591 * (_1555.y + (-0.5));
        float _1594 = _1591 * (_1555.z + (-0.5));
        float _1601 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1562.x + (-0.5));
        float _1603 = _1601 * (_1562.y + (-0.5));
        float _1604 = _1601 * (_1562.z + (-0.5));
        float _1611 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1569.x + (-0.5));
        float _1613 = _1611 * (_1569.y + (-0.5));
        float _1614 = _1611 * (_1569.z + (-0.5));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = _1582 * 0.5;
        float _1619 = _1592 * 0.5;
        float _1620 = _1602 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_862, _863, _864), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4242 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1645 + 1.0))) + _1650) * _1615;
        float _1660 = _1583 * 0.5;
        float _1661 = _1593 * 0.5;
        float _1662 = _1603 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_862, _863, _864), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4275 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1687 + 1.0))) + _1692) * _1616;
        float _1702 = _1584 * 0.5;
        float _1703 = _1594 * 0.5;
        float _1704 = _1604 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_862, _863, _864), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4308 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1729 + 1.0))) + _1734) * _1617;
        _1751 = _1584;
        _1752 = _1583;
        _1753 = _1582;
        _1754 = _1594;
        _1755 = _1593;
        _1756 = _1592;
        _1757 = _1604;
        _1758 = _1603;
        _1759 = _1602;
        _1760 = _1617;
        _1761 = _1616;
        _1762 = _1615;
        _1763 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1764 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
        _1765 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
    }
    else
    {
        _1751 = _1441;
        _1752 = _1441;
        _1753 = _1441;
        _1754 = _1441;
        _1755 = _1441;
        _1756 = _1441;
        _1757 = _1441;
        _1758 = _1441;
        _1759 = _1441;
        _1760 = _1441;
        _1761 = _1441;
        _1762 = _1441;
        _1763 = 0.0;
        _1764 = 0.0;
        _1765 = 0.0;
    }
    float _1775 = (cbModelParam._m0[1u].x * (_1763 - _1453)) + _1453;
    float _1776 = (cbModelParam._m0[1u].x * (_1764 - _1454)) + _1454;
    float _1777 = (cbModelParam._m0[1u].x * (_1765 - _1455)) + _1455;
    float _1798 = fma(_1777, cbSceneParam._m0[89u].z, fma(_1776, cbSceneParam._m0[89u].y, _1775 * cbSceneParam._m0[89u].x));
    float _1801 = fma(_1777, cbSceneParam._m0[90u].z, fma(_1776, cbSceneParam._m0[90u].y, _1775 * cbSceneParam._m0[90u].x));
    float _1804 = fma(_1777, cbSceneParam._m0[91u].z, fma(_1776, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1775));
    float _1819 = _1047 * 0.5;
    float _1820 = _1048 * 0.5;
    float _1821 = _1049 * 0.5;
    float _1822 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1753, _1756, _1759, _1762));
    float _1825 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1752, _1755, _1758, _1761));
    float _1828 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1751, _1754, _1757, _1760));
    float _1862;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1835 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1440, _1444, _1447, _1450));
        float _1839 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1442, _1445, _1448, _1451));
        float _1843 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1443, _1446, _1449, _1452));
        float _1850 = dot(vec4(cbModelParam._m0[39u]), vec4(_1819, _1820, _1821, 1.0));
        _1862 = dot(vec3(isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1850) ? 0.0 : (isnan(0.0) ? _1850 : max(0.0, _1850))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1862 = 1.0;
    }
    float _1873;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1864 = dot(vec4(cbModelParam._m0[40u]), vec4(_1819, _1820, _1821, 1.0));
        _1873 = dot(vec3(isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1864) ? 0.0 : (isnan(0.0) ? _1864 : max(0.0, _1864))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1873 = 1.0;
    }
    float _1877 = (_1873 * cbModelParam._m0[1u].x) + (_1862 * (1.0 - cbModelParam._m0[1u].x));
    float _1887 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _865);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1887 : min(cbModelParam._m0[25u].z, _1887));
    float _1969;
    float _1971;
    float _1973;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1936 = fma(_1111, cbModelParam._m0[13u].z, fma(_1107, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1103)) + cbModelParam._m0[13u].w;
        float _1940 = fma(_1111, cbModelParam._m0[14u].z, fma(_1107, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1103)) + cbModelParam._m0[14u].w;
        float _1944 = fma(_1111, cbModelParam._m0[15u].z, fma(_1107, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1103)) + cbModelParam._m0[15u].w;
        float _1947 = fma(_1049, cbModelParam._m0[13u].z, fma(_1048, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047));
        float _1950 = fma(_1049, cbModelParam._m0[14u].z, fma(_1048, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047));
        float _1953 = fma(_1049, cbModelParam._m0[15u].z, fma(_1048, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047));
        float _1981;
        if (_1947 > 0.0)
        {
            _1981 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1981 = frontier_phi_17_15_ladder;
        }
        float _2205;
        if (_1950 > 0.0)
        {
            _2205 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2205 = frontier_phi_26_22_ladder;
        }
        float _2462;
        if (_1953 > 0.0)
        {
            _2462 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2462 = frontier_phi_38_33_ladder;
        }
        float _2464 = isnan(_2205) ? _1981 : (isnan(_1981) ? _2205 : min(_1981, _2205));
        float _2465 = isnan(_2462) ? _2464 : (isnan(_2464) ? _2462 : min(_2464, _2462));
        float _2469 = (_2465 * _1947) + _1936;
        float _2470 = (_2465 * _1950) + _1940;
        float _2471 = (_2465 * _1953) + _1944;
        float _2472 = _2465 * 9.9999997473787516355514526367188e-05;
        float _2474 = (-1.0) - _2472;
        float _2476 = _2472 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2471 > _2476) || ((_2471 < _2474) || ((_2470 > _2476) || ((_2470 < _2474) || ((_2469 < _2474) || (_2469 > _2476))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2471, cbModelParam._m0[9u].z, fma(_2470, cbModelParam._m0[9u].y, _2469 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2471, cbModelParam._m0[10u].z, fma(_2470, cbModelParam._m0[10u].y, _2469 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2471, cbModelParam._m0[11u].z, fma(_2470, cbModelParam._m0[11u].y, _2469 * cbModelParam._m0[11u].x))), _1888);
            frontier_phi_16_38_ladder = _2599.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2599.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2599.x * cbModelParam._m0[1u].y;
        }
        _1969 = frontier_phi_16_38_ladder_2;
        _1971 = frontier_phi_16_38_ladder_1;
        _1973 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1047, _1048, _1049), _1888);
        _1969 = _1957.x * cbModelParam._m0[1u].y;
        _1971 = _1957.y * cbModelParam._m0[1u].y;
        _1973 = _1957.z * cbModelParam._m0[1u].y;
    }
    float _1977 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _865);
    float _1978 = isnan(_1977) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1977 : min(cbModelParam._m0[25u].w, _1977));
    float _2068;
    float _2070;
    float _2072;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2032 = fma(_1111, cbModelParam._m0[21u].z, fma(_1107, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1103)) + cbModelParam._m0[21u].w;
        float _2036 = fma(_1111, cbModelParam._m0[22u].z, fma(_1107, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1103)) + cbModelParam._m0[22u].w;
        float _2040 = fma(_1111, cbModelParam._m0[23u].z, fma(_1107, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1103)) + cbModelParam._m0[23u].w;
        float _2043 = fma(_1049, cbModelParam._m0[21u].z, fma(_1048, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047));
        float _2046 = fma(_1049, cbModelParam._m0[22u].z, fma(_1048, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047));
        float _2049 = fma(_1049, cbModelParam._m0[23u].z, fma(_1048, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047));
        float _2210;
        if (_2043 > 0.0)
        {
            _2210 = abs((1.0 - _2032) / _2043);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2032 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2210 = frontier_phi_28_24_ladder;
        }
        float _2489;
        if (_2046 > 0.0)
        {
            _2489 = abs((1.0 - _2036) / _2046);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2036 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2489 = frontier_phi_40_35_ladder;
        }
        float _2702;
        if (_2049 > 0.0)
        {
            _2702 = abs((1.0 - _2040) / _2049);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2040 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2702 = frontier_phi_49_46_ladder;
        }
        float _2704 = isnan(_2489) ? _2210 : (isnan(_2210) ? _2489 : min(_2210, _2489));
        float _2705 = isnan(_2702) ? _2704 : (isnan(_2704) ? _2702 : min(_2704, _2702));
        float _2709 = (_2705 * _2043) + _2032;
        float _2710 = (_2705 * _2046) + _2036;
        float _2711 = (_2705 * _2049) + _2040;
        float _2712 = _2705 * 9.9999997473787516355514526367188e-05;
        float _2713 = (-1.0) - _2712;
        float _2715 = _2712 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2711 > _2715) || ((_2711 < _2713) || ((_2710 > _2715) || ((_2710 < _2713) || ((_2709 < _2713) || (_2709 > _2715))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2711, cbModelParam._m0[17u].z, fma(_2710, cbModelParam._m0[17u].y, _2709 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2711, cbModelParam._m0[18u].z, fma(_2710, cbModelParam._m0[18u].y, _2709 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2711, cbModelParam._m0[19u].z, fma(_2710, cbModelParam._m0[19u].y, _2709 * cbModelParam._m0[19u].x))), _1978);
            frontier_phi_25_49_ladder = _2910.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2910.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2910.x * cbModelParam._m0[1u].z;
        }
        _2068 = frontier_phi_25_49_ladder_2;
        _2070 = frontier_phi_25_49_ladder_1;
        _2072 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2052 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1047, _1048, _1049), _1978);
        _2068 = _2052.x * cbModelParam._m0[1u].z;
        _2070 = _2052.y * cbModelParam._m0[1u].z;
        _2072 = _2052.z * cbModelParam._m0[1u].z;
    }
    float _2085 = (((_1074 * _1023) + _1075) * _1039) * ((cbModelParam._m0[1u].w * (_2068 - _1969)) + _1969);
    float _2087 = (((_1074 * _1025) + _1075) * _1039) * ((cbModelParam._m0[1u].w * (_2070 - _1971)) + _1971);
    float _2089 = (((_1074 * _1026) + _1075) * _1039) * ((cbModelParam._m0[1u].w * (_2072 - _1973)) + _1973);
    float _2092 = fma(_2089, cbSceneParam._m0[89u].z, fma(_2087, cbSceneParam._m0[89u].y, _2085 * cbSceneParam._m0[89u].x));
    float _2095 = fma(_2089, cbSceneParam._m0[90u].z, fma(_2087, cbSceneParam._m0[90u].y, _2085 * cbSceneParam._m0[90u].x));
    float _2098 = fma(_2089, cbSceneParam._m0[91u].z, fma(_2087, cbSceneParam._m0[91u].y, _2085 * cbSceneParam._m0[91u].x));
    vec4 _2106 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_961, _962));
    float _2108 = _2106.w;
    float _2120 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2108);
    float _2121 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2108);
    float _2122 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2108);
    uvec4 _2126 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2128 = _2126.x * 14u;
    uint _2129 = _2128 + 13u;
    float _2136 = _1039 + (-1.0);
    float _2141 = (cbLight._m0[_2129].x * _2136) + 1.0;
    float _2142 = (cbLight._m0[_2129].y * _2136) + 1.0;
    float _2143 = (cbLight._m0[_2129].z * _2136) + 1.0;
    float _2144 = (cbLight._m0[_2129].w * _2136) + 1.0;
    uint _2145 = _2128 + 5u;
    float _2151 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
    uint _2155 = _2128 + 4u;
    float _2164 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2168 = _2128 | 1u;
    float _2179 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_862, _863, _864));
    float _2182 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_862, _863, _864));
    float _4444 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _4455 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2187 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * 0.3183098733425140380859375;
    float _2189 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * 0.3183098733425140380859375;
    float _2196 = ((cbLight._m0[_2145].x * _2151) * _2189) + (((cbLight._m0[_2155].x * _2120) * _2164) * _2187);
    float _2197 = ((_2151 * cbLight._m0[_2145].y) * _2189) + (((cbLight._m0[_2155].y * _2121) * _2164) * _2187);
    float _2198 = ((_2151 * cbLight._m0[_2145].z) * _2189) + (((cbLight._m0[_2155].z * _2122) * _2164) * _2187);
    uvec4 _2202 = floatBitsToUint(cbLight._m0[_2128 + 12u]);
    bool _2204 = _2202.x == 0u;
    float _2215;
    float _2217;
    float _2219;
    if (_2204)
    {
        _2215 = _2196;
        _2217 = _2197;
        _2219 = _2198;
    }
    else
    {
        uint _2223 = _2128 + 6u;
        float _2239 = (dot(vec3(cbLight._m0[_2128 + 2u].xyz), vec3(_862, _863, _864)) * 0.5) + 0.5;
        float _2240 = _2239 * _2239;
        float _4466 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2241 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2242 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2215 = (((cbLight._m0[_2223].x * 0.3183098733425140380859375) * _2241) * _2242) + _2196;
        _2217 = (((cbLight._m0[_2223].y * 0.3183098733425140380859375) * _2241) * _2242) + _2197;
        _2219 = (((cbLight._m0[_2223].z * 0.3183098733425140380859375) * _2241) * _2242) + _2198;
    }
    bool _2222 = _2202.y == 0u;
    float _2260;
    float _2262;
    float _2264;
    if (_2222)
    {
        _2260 = _2215;
        _2262 = _2217;
        _2264 = _2219;
    }
    else
    {
        uint _2433 = _2128 + 7u;
        float _2449 = (dot(vec3(cbLight._m0[_2128 + 3u].xyz), vec3(_862, _863, _864)) * 0.5) + 0.5;
        float _2450 = _2449 * _2449;
        float _4482 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2451 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2452 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2260 = (((cbLight._m0[_2433].x * 0.3183098733425140380859375) * _2451) * _2452) + _2215;
        _2262 = (((cbLight._m0[_2433].y * 0.3183098733425140380859375) * _2451) * _2452) + _2217;
        _2264 = (((cbLight._m0[_2433].z * 0.3183098733425140380859375) * _2451) * _2452) + _2219;
    }
    uint _2267 = _2128 + 8u;
    float _2280 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _865) * 0.949999988079071044921875);
    float _2281 = _2280 * _2280;
    float _2282 = cbLight._m0[_2128].x + _941;
    float _2283 = cbLight._m0[_2128].y + _942;
    float _2284 = cbLight._m0[_2128].z + _943;
    float _2288 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
    float _2289 = _2288 * _2282;
    float _2290 = _2288 * _2283;
    float _2291 = _2288 * _2284;
    float _2292 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2128].xyz));
    float _4498 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _4509 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _2296 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2297 = dot(vec3(_862, _863, _864), vec3(_2289, _2290, _2291));
    float _4520 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2301 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2289, _2290, _2291));
    float _4531 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2305 = _2281 * _2281;
    float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
    float _2317 = exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0);
    float _2318 = 0.959999978542327880859375 - _1020;
    float _2320 = 0.959999978542327880859375 - _1021;
    float _2321 = 0.959999978542327880859375 - _1022;
    float _2328 = 1.0 - _2281;
    float _2339 = (0.5 / (((_2296 * ((_2295 * _2328) + _2281)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2328) + _2281) * _2295))) * _2295;
    float _4542 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2341 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
    uint _2355 = _2128 + 9u;
    float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _865) * 0.949999988079071044921875);
    float _2367 = _2366 * _2366;
    float _2368 = cbLight._m0[_2168].x + _941;
    float _2369 = cbLight._m0[_2168].y + _942;
    float _2370 = cbLight._m0[_2168].z + _943;
    float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
    float _2375 = _2374 * _2368;
    float _2376 = _2374 * _2369;
    float _2377 = _2374 * _2370;
    float _2378 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2168].xyz));
    float _4553 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2382 = dot(vec3(_862, _863, _864), vec3(_2375, _2376, _2377));
    float _4564 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2386 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2375, _2376, _2377));
    float _4575 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2390 = _2367 * _2367;
    float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
    float _2401 = exp2(log2(1.0 - (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) * 5.0);
    float _2408 = 1.0 - _2367;
    float _2418 = (0.5 / (((_2296 * ((_2381 * _2408) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2408) + _2367) * _2381))) * _2381;
    float _4586 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2420 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
    float _2430 = (((((_2401 * _2318) + _1023) * cbLight._m0[_2355].x) * _2420) * _2151) + ((((cbLight._m0[_2267].x * _2120) * ((_2317 * _2318) + _1023)) * _2341) * _2164);
    float _2431 = (((((_2401 * _2320) + _1025) * cbLight._m0[_2355].y) * _2420) * _2151) + ((((cbLight._m0[_2267].y * _2121) * ((_2317 * _2320) + _1025)) * _2341) * _2164);
    float _2432 = (((((_2401 * _2321) + _1026) * cbLight._m0[_2355].z) * _2420) * _2151) + ((((cbLight._m0[_2267].z * _2122) * ((_2317 * _2321) + _1026)) * _2341) * _2164);
    float _2494;
    float _2496;
    float _2498;
    if (_2204)
    {
        _2494 = _2430;
        _2496 = _2431;
        _2498 = _2432;
    }
    else
    {
        uint _2500 = _2128 + 2u;
        uint _2504 = _2128 + 10u;
        float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2500].w)) * _865) * 0.949999988079071044921875);
        float _2519 = _2518 * _2518;
        float _2520 = cbLight._m0[_2500].x + _941;
        float _2521 = cbLight._m0[_2500].y + _942;
        float _2522 = cbLight._m0[_2500].z + _943;
        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
        float _2527 = _2526 * _2520;
        float _2528 = _2526 * _2521;
        float _2529 = _2526 * _2522;
        float _2530 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2500].xyz));
        float _4597 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2534 = dot(vec3(_862, _863, _864), vec3(_2527, _2528, _2529));
        float _4608 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2538 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_2527, _2528, _2529));
        float _4619 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2542 = _2519 * _2519;
        float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
        float _2553 = exp2(log2(1.0 - (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * 5.0);
        float _2560 = 1.0 - _2519;
        float _2570 = (0.5 / (((_2296 * ((_2533 * _2560) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2560) + _2519) * _2533))) * _2533;
        float _4630 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2572 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
        float _2573 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2494 = (((((_2553 * _2318) + _1023) * cbLight._m0[_2504].x) * _2572) * _2573) + _2430;
        _2496 = (((((_2553 * _2320) + _1025) * cbLight._m0[_2504].y) * _2572) * _2573) + _2431;
        _2498 = (((((_2553 * _2321) + _1026) * cbLight._m0[_2504].z) * _2572) * _2573) + _2432;
    }
    float _2608;
    float _2610;
    float _2612;
    if (_2222)
    {
        _2608 = _2494;
        _2610 = _2496;
        _2612 = _2498;
    }
    else
    {
        uint _2619 = _2128 + 3u;
        uint _2623 = _2128 + 11u;
        float _2637 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2619].w)) * _865) * 0.949999988079071044921875);
        float _2638 = _2637 * _2637;
        float _2639 = cbLight._m0[_2619].x + _941;
        float _2640 = cbLight._m0[_2619].y + _942;
        float _2641 = cbLight._m0[_2619].z + _943;
        float _2645 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
        float _2646 = _2645 * _2639;
        float _2647 = _2645 * _2640;
        float _2648 = _2645 * _2641;
        float _2649 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2619].xyz));
        float _4646 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2653 = dot(vec3(_862, _863, _864), vec3(_2646, _2647, _2648));
        float _4657 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2656 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2657 = dot(vec3(cbLight._m0[_2619].xyz), vec3(_2646, _2647, _2648));
        float _4668 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2661 = _2638 * _2638;
        float _2665 = ((_2656 * _2656) * (_2661 + (-1.0))) + 1.0;
        float _2672 = exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0);
        float _2679 = 1.0 - _2638;
        float _2689 = (0.5 / (((_2296 * ((_2652 * _2679) + _2638)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2679) + _2638) * _2652))) * _2652;
        float _4679 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2691 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2661 / ((_2665 * _2665) * 3.141590118408203125));
        float _2692 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2608 = (((((_2672 * _2318) + _1023) * cbLight._m0[_2623].x) * _2691) * _2692) + _2494;
        _2610 = (((((_2672 * _2320) + _1025) * cbLight._m0[_2623].y) * _2691) * _2692) + _2496;
        _2612 = (((((_2672 * _2321) + _1026) * cbLight._m0[_2623].z) * _2691) * _2692) + _2498;
    }
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    if (_2126.y == 0u)
    {
        float _2767 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2768 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2767;
        float _2769 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2767;
        float _2770 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2767;
        uvec4 _2782 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2783 = _2782.x;
        uint _2794 = uint((float(_2782.y) * floor(float(uint(cbSceneParam._m0[85u].y * _962) / _2783))) + floor(float(uint(cbSceneParam._m0[85u].x * _961) / _2783)));
        float _2804 = (log2(_2770 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2805 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        uint _2808 = uint(isnan(14.0) ? _2805 : (isnan(_2805) ? 14.0 : min(_2805, 14.0)));
        uvec4 _2813 = texelFetch(g_lightClusterGridBuffer, int(((_2808 << 2u) + (_2794 << 6u)) >> 2u));
        uint _2814 = _2813.x;
        uint _2815 = _2782.z;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((((1u << ((_2815 >> 4u) & 15u)) + 4294967295u) & _2814) == 0u) || ((_2815 & 240u) == 0u))
        {
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
        }
        else
        {
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            uint _3074 = 0u;
            uint _3083;
            bool _3084;
            for (;;)
            {
                _3083 = texelFetch(g_lightClassification, int((((_2808 << 5u) + (_2794 << 9u)) + (_3074 << 2u)) >> 2u)).x;
                _3084 = _3083 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3084)
                {
                    frontier_phi_66_pred = _3068;
                    frontier_phi_66_pred_1 = _3073;
                    frontier_phi_66_pred_2 = _3072;
                    frontier_phi_66_pred_3 = _3071;
                    frontier_phi_66_pred_4 = _3070;
                    frontier_phi_66_pred_5 = _3069;
                }
                else
                {
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    uint _3219;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3070;
                    _3216 = _3071;
                    _3217 = _3072;
                    _3218 = _3073;
                    _3219 = _3083;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    for (;;)
                    {
                        uint _3223 = uint(findLSB(_3219)) + (_3074 << 5u);
                        uint _3220 = (_3219 + 4294967295u) & _3219;
                        uint _3225 = _3223 * 48u;
                        vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3225)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 3u)).x));
                        uint _3245 = (_3223 * 48u) + 4u;
                        vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 3u)).x));
                        uint _3264 = (_3223 * 48u) + 8u;
                        vec3 _3275 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3264)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 2u)).x));
                        float _3279 = _3239.x - _2768;
                        float _3280 = _3239.y - _2769;
                        float _3281 = _3239.z - _2770;
                        float _3282 = dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281));
                        float _3285 = inversesqrt(_3282);
                        float _3286 = _3285 * _3279;
                        float _3287 = _3285 * _3280;
                        float _3288 = _3285 * _3281;
                        float _3289 = dot(vec3(_980, _983, _986), vec3(_3286, _3287, _3288));
                        float _3294 = 1.0 - (_3282 * _3239.w);
                        float _4705 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3295 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                        float _3296 = sqrt(_3282) * _3258.w;
                        float _3299 = 1.39999997615814208984375 / (_3296 + 1.39999997615814208984375);
                        float _3300 = _3299 * _3299;
                        float _3303 = ((1.0 - _3300) * _3289) + _3300;
                        float _3306 = _3296 * _3296;
                        float _3310 = ((isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0))) * _3295) / ((_3306 * 0.699999988079071044921875) + 1.0);
                        float _3314 = (-0.0) - _2768;
                        float _3315 = (-0.0) - _2769;
                        float _3316 = (-0.0) - _2770;
                        float _3320 = inversesqrt(dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316)));
                        float _3321 = _3320 * _3314;
                        float _3322 = _3320 * _3315;
                        float _3323 = _3320 * _3316;
                        float _3331 = exp2(log2(1.0 / ((_3306 * 3.5) + 5.0)) * 0.25);
                        float _3332 = 1.0 - _1055;
                        float _3339 = sqrt(1.0 - ((1.0 - (_3332 * _3332)) * (1.0 - (_3331 * _3331))));
                        float _3340 = _3339 * _3339;
                        float _3341 = _3340 * _3340;
                        float _3342 = _3321 + _3286;
                        float _3343 = _3322 + _3287;
                        float _3344 = _3323 + _3288;
                        float _3348 = inversesqrt(dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344)));
                        float _3352 = dot(vec3(_980, _983, _986), vec3(_3321, _3322, _3323));
                        float _4721 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3355 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3356 = dot(vec3(_980, _983, _986), vec3(_3348 * _3342, _3348 * _3343, _3348 * _3344));
                        float _4732 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3359 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3363 = ((_3359 * _3359) * (_3341 + (-1.0))) + 1.0;
                        float _3364 = _3299 * _3340;
                        float _3365 = _3364 * _3364;
                        float _3368 = ((1.0 - _3365) * _3289) + _3365;
                        float _4743 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3369 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3370 = 1.0 - _3340;
                        float _3380 = (0.5 / (((_3369 * ((_3355 * _3370) + _3340)) + 9.9999999392252902907785028219223e-09) + (((_3369 * _3370) + _3340) * _3355))) * _3369;
                        float _4754 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3391 = (((_3341 * 3.1415927410125732421875) * (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) / ((_3363 * _3363) * ((_3306 * 2.1991131305694580078125) + 3.141590118408203125))) * _3295;
                        _3143 = (_3310 * _3258.x) + _3216;
                        _3144 = (_3310 * _3258.y) + _3217;
                        _3145 = (_3310 * _3258.z) + _3218;
                        _3140 = (_3391 * _3275.x) + _3213;
                        _3141 = (_3391 * _3275.y) + _3214;
                        _3142 = (_3391 * _3275.z) + _3215;
                        if (_3220 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3142;
                            _3216 = _3143;
                            _3217 = _3144;
                            _3218 = _3145;
                            _3219 = _3220;
                        }
                    }
                    frontier_phi_66_pred = _3140;
                    frontier_phi_66_pred_1 = _3145;
                    frontier_phi_66_pred_2 = _3144;
                    frontier_phi_66_pred_3 = _3143;
                    frontier_phi_66_pred_4 = _3142;
                    frontier_phi_66_pred_5 = _3141;
                }
                _2916 = frontier_phi_66_pred;
                _2926 = frontier_phi_66_pred_1;
                _2924 = frontier_phi_66_pred_2;
                _2922 = frontier_phi_66_pred_3;
                _2920 = frontier_phi_66_pred_4;
                _2918 = frontier_phi_66_pred_5;
                uint _3075 = _3074 + 1u;
                if (_3075 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3068 = _2916;
                    _3069 = _2918;
                    _3070 = _2920;
                    _3071 = _2922;
                    _3072 = _2924;
                    _3073 = _2926;
                    _3074 = _3075;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
        }
        uvec4 _2929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2930 = _2929.z;
        uint _2932 = (_2930 >> 8u) & 15u;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        if (((4294967295u << _2932) & _2814) == 0u)
        {
            _3036 = _2915;
            _3038 = _2917;
            _3040 = _2919;
            _3042 = _2921;
            _3044 = _2923;
            _3046 = _2925;
        }
        else
        {
            float _3061 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
            float _3062 = _3061 * _2768;
            float _3063 = _3061 * _2769;
            float _3064 = _3061 * _2770;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2932 < ((_2930 >> 12u) & 15u))
            {
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3045;
                float _3047;
                float _3196 = _2915;
                float _3197 = _2917;
                float _3198 = _2919;
                float _3199 = _2921;
                float _3200 = _2923;
                float _3201 = _2925;
                uint _3202 = _2932;
                uint _3211;
                bool _3212;
                for (;;)
                {
                    _3211 = texelFetch(g_lightClassification, int((((_2808 << 5u) + (_2794 << 9u)) + (_3202 << 2u)) >> 2u)).x;
                    _3212 = _3211 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3212)
                    {
                        frontier_phi_77_pred = _3201;
                        frontier_phi_77_pred_1 = _3200;
                        frontier_phi_77_pred_2 = _3199;
                        frontier_phi_77_pred_3 = _3198;
                        frontier_phi_77_pred_4 = _3197;
                        frontier_phi_77_pred_5 = _3196;
                    }
                    else
                    {
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3418 = _3196;
                        float _3419 = _3197;
                        float _3420 = _3198;
                        float _3421 = _3199;
                        float _3422 = _3200;
                        float _3423 = _3201;
                        uint _3424 = _3211;
                        uint _3425;
                        vec4 _3450;
                        float _3451;
                        vec4 _3466;
                        vec3 _3478;
                        vec4 _3493;
                        vec4 _3508;
                        float _3554;
                        bool _3555;
                        for (;;)
                        {
                            uint _3435 = ((_3202 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3424));
                            _3425 = (_3424 + 4294967295u) & _3424;
                            uint _3437 = _3435 * 40u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            _3451 = _3450.w;
                            uint _3453 = (_3435 * 40u) + 4u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3435 * 40u) + 8u;
                            _3478 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x));
                            uint _3480 = (_3435 * 40u) + 16u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3495 = (_3435 * 40u) + 20u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3435 * 40u) + 24u;
                            vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3529 = (_3435 * 40u) + 28u;
                            vec4 _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            _3554 = fma(_2770, _3542.z, fma(_2769, _3542.y, _3542.x * _2768)) + _3542.w;
                            _3555 = !((fma(_2770, _3523.z, fma(_2769, _3523.y, _3523.x * _2768)) + _3523.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3555)
                            {
                                float _3582 = _3450.x - _2768;
                                float _3583 = _3450.y - _2769;
                                float _3584 = _3450.z - _2770;
                                float _3585 = dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584));
                                float _3588 = inversesqrt(_3585);
                                float _3589 = _3588 * _3582;
                                float _3590 = _3588 * _3583;
                                float _3591 = _3588 * _3584;
                                float _3595 = 1.0 - (_3585 / (_3451 * _3451));
                                float _4765 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3600 = sqrt(_3585) * _3466.w;
                                float _3602 = 1.39999997615814208984375 / (_3600 + 1.39999997615814208984375);
                                float _3603 = _3602 * _3602;
                                float _3606 = ((1.0 - _3603) * dot(vec3(_3589, _3590, _3591), vec3(_980, _983, _986))) + _3603;
                                float _3609 = _3600 * _3600;
                                float _3613 = (fma(_2770, _3493.z, fma(_2769, _3493.y, _3493.x * _2768)) + _3493.w) / _3554;
                                float _3614 = (fma(_2770, _3508.z, fma(_2769, _3508.y, _3508.x * _2768)) + _3508.w) / _3554;
                                float _3618 = 1.0 - dot(vec2(_3613, _3614), vec2(_3613, _3614));
                                float _4781 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3620 = _3619 * (((isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0))) * _3596) / ((_3609 * 0.699999988079071044921875) + 1.0));
                                float _3632 = exp2(log2(1.0 / ((_3609 * 3.5) + 5.0)) * 0.25);
                                float _3633 = 1.0 - _1055;
                                float _3640 = sqrt(1.0 - ((1.0 - (_3633 * _3633)) * (1.0 - (_3632 * _3632))));
                                float _3641 = _3640 * _3640;
                                float _3642 = _3641 * _3641;
                                float _3643 = _3589 - _3062;
                                float _3644 = _3590 - _3063;
                                float _3645 = _3591 - _3064;
                                float _3649 = inversesqrt(dot(vec3(_3643, _3644, _3645), vec3(_3643, _3644, _3645)));
                                float _3653 = dot(vec3(_980, _983, _986), vec3((-0.0) - _3062, (-0.0) - _3063, (-0.0) - _3064));
                                float _4792 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3656 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3657 = dot(vec3(_980, _983, _986), vec3(_3649 * _3643, _3649 * _3644, _3649 * _3645));
                                float _4803 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3660 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3664 = ((_3660 * _3660) * (_3642 + (-1.0))) + 1.0;
                                float _3665 = _3602 * _3641;
                                float _3666 = _3665 * _3665;
                                float _3672 = ((1.0 - _3666) * dot(vec3(_980, _983, _986), vec3(_3589, _3590, _3591))) + _3666;
                                float _4814 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3673 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3674 = 1.0 - _3641;
                                float _3684 = (0.5 / (((_3673 * ((_3656 * _3674) + _3641)) + 9.9999999392252902907785028219223e-09) + (((_3673 * _3674) + _3641) * _3656))) * _3673;
                                float _4825 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3694 = (_3619 * _3596) * (((_3642 * 3.1415927410125732421875) * (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) / ((_3664 * _3664) * ((_3609 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3620 * _3466.y;
                                frontier_phi_83_pred_1 = _3620 * _3466.x;
                                frontier_phi_83_pred_2 = _3694 * _3478.z;
                                frontier_phi_83_pred_3 = _3694 * _3478.y;
                                frontier_phi_83_pred_4 = _3694 * _3478.x;
                                frontier_phi_83_pred_5 = _3620 * _3466.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3702 = frontier_phi_83_pred;
                            _3701 = frontier_phi_83_pred_1;
                            _3700 = frontier_phi_83_pred_2;
                            _3699 = frontier_phi_83_pred_3;
                            _3698 = frontier_phi_83_pred_4;
                            _3703 = frontier_phi_83_pred_5;
                            _3408 = _3701 + _3421;
                            _3409 = _3702 + _3422;
                            _3410 = _3703 + _3423;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            _3407 = _3700 + _3420;
                            if (_3425 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3425;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3410;
                        frontier_phi_77_pred_1 = _3409;
                        frontier_phi_77_pred_2 = _3408;
                        frontier_phi_77_pred_3 = _3407;
                        frontier_phi_77_pred_4 = _3406;
                        frontier_phi_77_pred_5 = _3405;
                    }
                    _3047 = frontier_phi_77_pred;
                    _3045 = frontier_phi_77_pred_1;
                    _3043 = frontier_phi_77_pred_2;
                    _3041 = frontier_phi_77_pred_3;
                    _3039 = frontier_phi_77_pred_4;
                    _3037 = frontier_phi_77_pred_5;
                    uint _3203 = _3202 + 1u;
                    if (_3203 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3196 = _3037;
                        _3197 = _3039;
                        _3198 = _3041;
                        _3199 = _3043;
                        _3200 = _3045;
                        _3201 = _3047;
                        _3202 = _3203;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3041;
                frontier_phi_58_59_ladder_1 = _3047;
                frontier_phi_58_59_ladder_2 = _3045;
                frontier_phi_58_59_ladder_3 = _3043;
                frontier_phi_58_59_ladder_4 = _3039;
                frontier_phi_58_59_ladder_5 = _3037;
            }
            else
            {
                frontier_phi_58_59_ladder = _2919;
                frontier_phi_58_59_ladder_1 = _2925;
                frontier_phi_58_59_ladder_2 = _2923;
                frontier_phi_58_59_ladder_3 = _2921;
                frontier_phi_58_59_ladder_4 = _2917;
                frontier_phi_58_59_ladder_5 = _2915;
            }
            _3036 = frontier_phi_58_59_ladder_5;
            _3038 = frontier_phi_58_59_ladder_4;
            _3040 = frontier_phi_58_59_ladder;
            _3042 = frontier_phi_58_59_ladder_3;
            _3044 = frontier_phi_58_59_ladder_2;
            _3046 = frontier_phi_58_59_ladder_1;
        }
        float _3051 = isnan(1.0) ? _1039 : (isnan(_1039) ? 1.0 : min(_1039, 1.0));
        _2827 = (_3051 * _3042) + _2260;
        _2829 = (_3051 * _3044) + _2262;
        _2831 = (_3051 * _3046) + _2264;
        _2833 = ((_3036 * _1023) * _3051) + _2608;
        _2835 = ((_3038 * _1025) * _3051) + _2610;
        _2837 = ((_3040 * _1026) * _3051) + _2612;
    }
    else
    {
        _2827 = _2260;
        _2829 = _2262;
        _2831 = _2264;
        _2833 = _2608;
        _2835 = _2610;
        _2837 = _2612;
    }
    float _4841 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _4852 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _4863 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _2854 = ((isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2827 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1039))) + ((_2833 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1877)) * cbPerFrame._m0[3u].x);
    float _2855 = ((isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2829 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1039))) + ((_2835 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1877)) * cbPerFrame._m0[3u].x);
    float _2856 = ((isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2831 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1039))) + ((_2837 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1877)) * cbPerFrame._m0[3u].x);
    uint _2857 = _263 + 6u;
    float _2865 = _961 / cbSceneParam._m0[86u].x;
    float _2866 = _962 / cbSceneParam._m0[86u].y;
    vec4 _2880 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, (log2((isnan(cbSceneParam._m0[77u].w) ? _884 : (isnan(_884) ? cbSceneParam._m0[77u].w : min(_884, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2882 = _2880.x;
    float _2883 = _2880.y;
    float _2884 = _2880.z;
    float _2885 = _2880.w;
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    if (_884 > cbSceneParam._m0[78u].w)
    {
        float _2940 = isnan(_884) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _884 : min(cbSceneParam._m0[80u].w, _884));
        float _2941 = _2940 / _884;
        float _2952 = _2941 * _934;
        float _2953 = _935 * _2941;
        float _2954 = (-0.0) - _2953;
        float _2956 = _2941 * _936;
        float _2958 = (cbSceneParam._m0[77u].w * _2954) / _2940;
        float _2959 = _2958 + cbSceneParam._m0[79u].w;
        float _2960 = cbSceneParam._m0[79u].w - _2953;
        float _2966 = sqrt(((_2952 * _2952) + (_2953 * _2953)) + (_2956 * _2956));
        float _2969 = (1.0 - (cbSceneParam._m0[77u].w / _2940)) * _2966;
        float _2974 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2976 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3153;
        if (abs((_2954 - _2958) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3153 = ((((_2959 > 0.0) ? exp2(_2974 * _2959) : (2.0 - exp2(_2976 * _2959))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2969;
        }
        else
        {
            float _3097 = 1.0 / cbSceneParam._m0[80u].x;
            float _3098 = isnan(_2960) ? _2959 : (isnan(_2959) ? _2960 : max(_2959, _2960));
            float _3099 = isnan(_2960) ? _2959 : (isnan(_2959) ? _2960 : min(_2959, _2960));
            float _3108 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : min(_3098, 0.0));
            float _3109 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : min(_3099, 0.0));
            _3153 = ((abs(_2966 / _2954) * cbSceneParam._m0[80u].y) * ((((_3108 - _3109) * 2.0) - ((exp2(_2974 * (isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0)))) - exp2(_2974 * (isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))))) * _3097)) - ((exp2(_2976 * _3108) - exp2(_2976 * _3109)) * _3097))) + (_2969 * cbSceneParam._m0[80u].z);
        }
        vec4 _3155 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, 1.0), 0.0);
        float _3164 = exp2((_3153 * (-1.44269502162933349609375)) * (1.0 - _3155.w));
        float _3165 = log2(_3164);
        float _3181 = log2(_2885);
        _2978 = (exp2(_3181 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].x)) * _3155.x) / cbSceneParam._m0[78u].x)) + _2882;
        _2980 = (exp2(_3181 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].y)) * _3155.y) / cbSceneParam._m0[78u].y)) + _2883;
        _2982 = (exp2(_3181 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].z)) * _3155.z) / cbSceneParam._m0[78u].z)) + _2884;
        _2984 = _3164 * _2885;
    }
    else
    {
        _2978 = _2882;
        _2980 = _2883;
        _2982 = _2884;
        _2984 = _2885;
    }
    bool _3191;
    vec4 _2994;
    vec4 _3016;
    float _3018;
    float _3022;
    float _3023;
    float _3024;
    float _3025;
    bool _3035;
    for (;;)
    {
        _2994 = cbMatDynParam._m0[0u];
        float _2996 = roundEven(_2994.y);
        bool _2997 = _2996 == 3.0;
        float _2998 = log2(_2984);
        float _3005 = exp2(_2998 * cbSceneParam._m0[78u].x) * _2854;
        float _3006 = exp2(_2998 * cbSceneParam._m0[78u].y) * _2855;
        float _3007 = exp2(_2998 * cbSceneParam._m0[78u].z) * _2856;
        float _3014 = _950 + (-0.5);
        _3016 = cbMtdParam._m0[1u];
        _3018 = _3016.y * _3014;
        float _3021 = (_2996 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3022 = _3021 * (_2997 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2978)));
        _3023 = _3021 * (_2997 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2980)));
        _3024 = _3021 * (_2997 ? _3007 : (_3007 + (cbSceneParam._m0[72u].w * _2982)));
        _3025 = _3014 * 0.999000012874603271484375;
        _3035 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3035)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3025) < 0.5)
            {
                _3191 = true;
                break;
            }
        }
        uint _3132 = _999 + uint(_2994.w);
        if ((cbInstanceData._m0[_3132].w < 1.0) && ((cbInstanceData._m0[_3132].w + _3025) < 0.5))
        {
            _3191 = true;
            break;
        }
        if ((_3018 + 1.0) < _3016.x)
        {
            _3191 = true;
            break;
        }
        _3191 = false;
        break;
    }
    float _3396;
    if (_3191)
    {
        discard_state = true;
        _3396 = 0.0;
    }
    else
    {
        _3396 = cbInstanceData._m0[_2857].w;
    }
    SV_Target.x = _3022;
    SV_Target.y = _3023;
    SV_Target.z = _3024;
    SV_Target.w = _3396;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2857].w;
    discard_exit();
}


