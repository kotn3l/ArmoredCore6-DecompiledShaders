#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1183;
float _3566;
float _3567;
float _3568;
float _3569;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _284.x * cbMtdParam._m0[9u].x;
    float _291 = _284.y * cbMtdParam._m0[9u].y;
    float _292 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _340 = _336.z;
    float _344 = (_336.x * 2.0) + (-1.0);
    float _345 = (_336.y * 2.0) + (-1.0);
    float _346 = dot(vec2(_344, _345), vec2(_344, _345));
    float _3578 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _352 = sqrt(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))));
    float _357 = _344 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_310.x * 2.0) + (-1.0)));
    float _358 = _345 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_310.y * 2.0) + (-1.0)));
    vec4 _375 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _377 = _375.x;
    float _378 = 1.0 - _377;
    float _387 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _390 = ((isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : min(_387, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _399 = (_390 - ((((((_377 - _378) * cbMtdParam._m0[24u].z) + _378) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _390))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3599 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _407 = (_400 * (cbMtdParam._m0[17u].x - _290)) + _290;
    float _408 = (_400 * (cbMtdParam._m0[17u].y - _291)) + _291;
    float _409 = (_400 * (cbMtdParam._m0[17u].z - _292)) + _292;
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _424 = _422.x;
    float _425 = 1.0 - _424;
    float _454 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_424 - _425) * cbMtdParam._m0[24u].w) + _425) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3610 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _463 = ((((cbMtdParam._m0[10u].x - _407) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _455) + _407;
    float _464 = ((((cbMtdParam._m0[10u].y - _408) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _455) + _408;
    float _465 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _409)) * _455) + _409;
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _480 = _478.x;
    float _482 = _480 - (_480 * _400);
    float _484 = _482 - (_482 * _455);
    float _489 = (((_310.z - _340) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _340;
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _510 = (_503.x * 2.0) + (-1.0);
    float _511 = (_503.y * 2.0) + (-1.0);
    float _512 = dot(vec2(_510, _511), vec2(_510, _511));
    float _3621 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _520 = (_400 * (_503.z - _489)) + _489;
    float _523 = ((cbMtdParam._m0[23u].y - _520) * _455) + _520;
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _551 = (_545.x * 2.0) + (-1.0);
    float _552 = (_545.y * 2.0) + (-1.0);
    float _553 = dot(vec2(_551, _552), vec2(_551, _552));
    float _3632 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _570 = (((_510 - _357) + (cbMtdParam._m0[21u].x * _357)) * _400) + _357;
    float _571 = (((_511 - _358) + (cbMtdParam._m0[21u].x * _358)) * _400) + _358;
    float _572 = (_400 * (sqrt(1.0 - (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) - _352)) + _352;
    float _583 = (((_551 - _570) + (_570 * cbMtdParam._m0[22u].z)) * _455) + _570;
    float _584 = (((_552 - _571) + (_571 * cbMtdParam._m0[22u].z)) * _455) + _571;
    float _585 = ((sqrt(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) - _572) * _455) + _572;
    float _587 = cbMtdParam._m0[22u].x + _336.w;
    float _590 = fma(_585, _232 * NORMAL.x, fma(_584, _239 * TANGENT.x, (_225 * _217) * _583));
    float _593 = fma(_585, _232 * NORMAL.y, fma(_584, _239 * TANGENT.y, (_225 * _218) * _583));
    float _596 = fma(_585, _232 * NORMAL.z, fma(_584, _239 * TANGENT.z, (_225 * _219) * _583));
    float _600 = inversesqrt(dot(vec3(_590, _593, _596), vec3(_590, _593, _596)));
    float _601 = _600 * _590;
    float _602 = _600 * _593;
    float _603 = _600 * _596;
    float _3643 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _604 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3665 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3676 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3687 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3698 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _609 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _623 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _673 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _663);
    float _674 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _663);
    float _675 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _663);
    float _679 = inversesqrt(dot(vec3(_673, _674, _675), vec3(_673, _674, _675)));
    float _680 = _673 * _679;
    float _681 = _674 * _679;
    float _682 = _675 * _679;
    vec4 _687 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _689 = _687.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _864 = sqrt(((_673 * _673) + (_674 * _674)) + (_675 * _675));
        float _870 = (cbMatDynParam._m0[5u].x * _864) + cbMatDynParam._m0[5u].y;
        float _3709 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _875 = (cbMatDynParam._m0[5u].z * _864) + cbMatDynParam._m0[5u].w;
        float _3720 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) - _871)) + _871) < ((_689 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _701 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _702 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _722 = fma(_603, cbSceneParam._m0[5u].z, fma(_602, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _601));
    float _725 = fma(_603, cbSceneParam._m0[6u].z, fma(_602, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _601));
    float _728 = fma(_603, cbSceneParam._m0[7u].z, fma(_602, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _601));
    uint _741 = _245 + 9u;
    uint _742 = _741 + uint(cbMatDynParam._m0[0u].w);
    float _748 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * cbInstanceData._m0[_742].x;
    float _749 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * cbInstanceData._m0[_742].y;
    float _750 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_742].z;
    float _3731 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _754 = 1.0 - _609;
    float _755 = _751 * _754;
    float _756 = _752 * _754;
    float _757 = _753 * _754;
    float _762 = (_751 + (-0.039999999105930328369140625)) * _609;
    float _763 = (_752 + (-0.039999999105930328369140625)) * _609;
    float _764 = (_753 + (-0.039999999105930328369140625)) * _609;
    float _765 = _762 + 0.039999999105930328369140625;
    float _767 = _763 + 0.039999999105930328369140625;
    float _768 = _764 + 0.039999999105930328369140625;
    vec4 _777 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _701, cbSceneParam._m0[86u].y * _702));
    float _781 = ((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * TEXCOORD_5.w) * _777.x;
    float _782 = dot(vec3(_601, _602, _603), vec3(_680, _681, _682));
    float _785 = _782 * 2.0;
    float _789 = (_785 * _601) - _680;
    float _790 = (_785 * _602) - _681;
    float _791 = (_785 * _603) - _682;
    float _795 = abs(dot(vec3(_680, _681, _682), vec3(_601, _602, _603)));
    float _3764 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _797 = sqrt(_604);
    float _810 = exp2((_797 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_797 * 3.0));
    float _816 = (1.0 - _810) * ((_797 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _817 = _810 * _797;
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1182;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _907 = fma(_853, cbModelParam._m0[26u].z, fma(_849, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _845));
        float _911 = fma(_853, cbModelParam._m0[27u].z, fma(_849, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _845));
        float _915 = fma(_853, cbModelParam._m0[28u].z, fma(_849, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _845));
        float _940 = _845 + _601;
        float _941 = _849 + _602;
        float _942 = _853 + _603;
        float _952 = fma(_942, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _940)) - _907;
        float _953 = fma(_942, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _940)) - _911;
        float _954 = fma(_942, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _940)) - _915;
        float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
        float _971 = ((_958 * _952) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_907 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_958 * _953) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_911 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_958 * _954) / cbModelParam._m0[34u].z) + ((((((_915 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        float _1010 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_976.x + (-0.5));
        float _1012 = _1010 * (_976.y + (-0.5));
        float _1013 = _1010 * (_976.z + (-0.5));
        float _1020 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_983.x + (-0.5));
        float _1022 = _1020 * (_983.y + (-0.5));
        float _1023 = _1020 * (_983.z + (-0.5));
        float _1030 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_990.x + (-0.5));
        float _1032 = _1030 * (_990.y + (-0.5));
        float _1033 = _1030 * (_990.z + (-0.5));
        float _1040 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_997.x + (-0.5));
        float _1042 = _1040 * (_997.y + (-0.5));
        float _1043 = _1040 * (_997.z + (-0.5));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = _1011 * 0.5;
        float _1048 = _1021 * 0.5;
        float _1049 = _1031 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1064 = (dot(vec3(_601, _602, _603), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1074 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _3812 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1076 + 1.0))) + _1081) * _1044;
        float _1091 = _1012 * 0.5;
        float _1092 = _1022 * 0.5;
        float _1093 = _1032 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_601, _602, _603), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3845 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1118 + 1.0))) + _1123) * _1045;
        float _1133 = _1013 * 0.5;
        float _1134 = _1023 * 0.5;
        float _1135 = _1033 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_601, _602, _603), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3878 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1160 + 1.0))) + _1165) * _1046;
        _1182 = _1013;
        _1184 = _1012;
        _1185 = _1011;
        _1186 = _1023;
        _1187 = _1022;
        _1188 = _1021;
        _1189 = _1033;
        _1190 = _1032;
        _1191 = _1031;
        _1192 = _1046;
        _1193 = _1045;
        _1194 = _1044;
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
    }
    else
    {
        _1182 = _1183;
        _1184 = _1183;
        _1185 = _1183;
        _1186 = _1183;
        _1187 = _1183;
        _1188 = _1183;
        _1189 = _1183;
        _1190 = _1183;
        _1191 = _1183;
        _1192 = _1183;
        _1193 = _1183;
        _1194 = _1183;
        _1195 = 0.0;
        _1196 = 0.0;
        _1197 = 0.0;
    }
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1225 = fma(_853, cbModelParam._m0[30u].z, fma(_849, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _845));
        float _1229 = fma(_853, cbModelParam._m0[31u].z, fma(_849, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _845));
        float _1233 = fma(_853, cbModelParam._m0[32u].z, fma(_849, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _845));
        float _1256 = _845 + _601;
        float _1257 = _849 + _602;
        float _1258 = _853 + _603;
        float _1268 = fma(_1258, cbModelParam._m0[30u].z, fma(_1257, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1256)) - _1225;
        float _1269 = fma(_1258, cbModelParam._m0[31u].z, fma(_1257, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1256)) - _1229;
        float _1270 = fma(_1258, cbModelParam._m0[32u].z, fma(_1257, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1256)) - _1233;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1225 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1229 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[35u].z) + ((((((_1233 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1324 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1291.x + (-0.5));
        float _1326 = _1324 * (_1291.y + (-0.5));
        float _1327 = _1324 * (_1291.z + (-0.5));
        float _1334 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1298.x + (-0.5));
        float _1336 = _1334 * (_1298.y + (-0.5));
        float _1337 = _1334 * (_1298.z + (-0.5));
        float _1344 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1305.x + (-0.5));
        float _1346 = _1344 * (_1305.y + (-0.5));
        float _1347 = _1344 * (_1305.z + (-0.5));
        float _1354 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1312.x + (-0.5));
        float _1356 = _1354 * (_1312.y + (-0.5));
        float _1357 = _1354 * (_1312.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_601, _602, _603), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3941 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1388 + 1.0))) + _1393) * _1358;
        float _1403 = _1326 * 0.5;
        float _1404 = _1336 * 0.5;
        float _1405 = _1346 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_601, _602, _603), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3974 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1430 + 1.0))) + _1435) * _1359;
        float _1445 = _1327 * 0.5;
        float _1446 = _1337 * 0.5;
        float _1447 = _1347 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_601, _602, _603), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4007 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1472 + 1.0))) + _1477) * _1360;
        _1494 = _1327;
        _1495 = _1326;
        _1496 = _1325;
        _1497 = _1337;
        _1498 = _1336;
        _1499 = _1335;
        _1500 = _1347;
        _1501 = _1346;
        _1502 = _1345;
        _1503 = _1360;
        _1504 = _1359;
        _1505 = _1358;
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
    }
    else
    {
        _1494 = _1183;
        _1495 = _1183;
        _1496 = _1183;
        _1497 = _1183;
        _1498 = _1183;
        _1499 = _1183;
        _1500 = _1183;
        _1501 = _1183;
        _1502 = _1183;
        _1503 = _1183;
        _1504 = _1183;
        _1505 = _1183;
        _1506 = 0.0;
        _1507 = 0.0;
        _1508 = 0.0;
    }
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1195)) + _1195;
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1196)) + _1196;
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1197)) + _1197;
    float _1541 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1519, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1544 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1519, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1547 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1519, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1518));
    float _1562 = _789 * 0.5;
    float _1563 = _790 * 0.5;
    float _1564 = _791 * 0.5;
    float _1565 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1568 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1571 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1605;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1578 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1182, _1186, _1189, _1192));
        float _1582 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1586 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1185, _1188, _1191, _1194));
        float _1593 = dot(vec4(cbModelParam._m0[39u]), vec4(_1562, _1563, _1564, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1616;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1607 = dot(vec4(cbModelParam._m0[40u]), vec4(_1562, _1563, _1564, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1607) ? 0.0 : (isnan(0.0) ? _1607 : max(0.0, _1607))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1620 = (_1616 * cbModelParam._m0[1u].x) + (_1605 * (1.0 - cbModelParam._m0[1u].x));
    float _1630 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _604);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1630 : min(cbModelParam._m0[25u].z, _1630));
    float _1712;
    float _1714;
    float _1716;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1679 = fma(_853, cbModelParam._m0[13u].z, fma(_849, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845)) + cbModelParam._m0[13u].w;
        float _1683 = fma(_853, cbModelParam._m0[14u].z, fma(_849, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845)) + cbModelParam._m0[14u].w;
        float _1687 = fma(_853, cbModelParam._m0[15u].z, fma(_849, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845)) + cbModelParam._m0[15u].w;
        float _1690 = fma(_791, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789));
        float _1693 = fma(_791, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789));
        float _1696 = fma(_791, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789));
        float _1724;
        if (_1690 > 0.0)
        {
            _1724 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1724 = frontier_phi_17_15_ladder;
        }
        float _1928;
        if (_1693 > 0.0)
        {
            _1928 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1928 = frontier_phi_26_22_ladder;
        }
        float _2182;
        if (_1696 > 0.0)
        {
            _2182 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2182 = frontier_phi_38_33_ladder;
        }
        float _2184 = isnan(_1928) ? _1724 : (isnan(_1724) ? _1928 : min(_1724, _1928));
        float _2185 = isnan(_2182) ? _2184 : (isnan(_2184) ? _2182 : min(_2184, _2182));
        float _2189 = (_2185 * _1690) + _1679;
        float _2190 = (_2185 * _1693) + _1683;
        float _2191 = (_2185 * _1696) + _1687;
        float _2192 = _2185 * 9.9999997473787516355514526367188e-05;
        float _2194 = (-1.0) - _2192;
        float _2196 = _2192 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2191 > _2196) || ((_2191 < _2194) || ((_2190 > _2196) || ((_2190 < _2194) || ((_2189 < _2194) || (_2189 > _2196))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2319 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2191, cbModelParam._m0[9u].z, fma(_2190, cbModelParam._m0[9u].y, _2189 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2191, cbModelParam._m0[10u].z, fma(_2190, cbModelParam._m0[10u].y, _2189 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2191, cbModelParam._m0[11u].z, fma(_2190, cbModelParam._m0[11u].y, _2189 * cbModelParam._m0[11u].x))), _1631);
            frontier_phi_16_38_ladder = _2319.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2319.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2319.x * cbModelParam._m0[1u].y;
        }
        _1712 = frontier_phi_16_38_ladder_2;
        _1714 = frontier_phi_16_38_ladder_1;
        _1716 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1700 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_789, _790, _791), _1631);
        _1712 = _1700.x * cbModelParam._m0[1u].y;
        _1714 = _1700.y * cbModelParam._m0[1u].y;
        _1716 = _1700.z * cbModelParam._m0[1u].y;
    }
    float _1720 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _604);
    float _1721 = isnan(_1720) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1720 : min(cbModelParam._m0[25u].w, _1720));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1775 = fma(_853, cbModelParam._m0[21u].z, fma(_849, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845)) + cbModelParam._m0[21u].w;
        float _1779 = fma(_853, cbModelParam._m0[22u].z, fma(_849, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845)) + cbModelParam._m0[22u].w;
        float _1783 = fma(_853, cbModelParam._m0[23u].z, fma(_849, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845)) + cbModelParam._m0[23u].w;
        float _1786 = fma(_791, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789));
        float _1789 = fma(_791, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789));
        float _1792 = fma(_791, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789));
        float _1933;
        if (_1786 > 0.0)
        {
            _1933 = abs((1.0 - _1775) / _1786);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1775 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1933 = frontier_phi_28_24_ladder;
        }
        float _2209;
        if (_1789 > 0.0)
        {
            _2209 = abs((1.0 - _1779) / _1789);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1779 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2209 = frontier_phi_40_35_ladder;
        }
        float _2422;
        if (_1792 > 0.0)
        {
            _2422 = abs((1.0 - _1783) / _1792);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1783 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2422 = frontier_phi_49_46_ladder;
        }
        float _2424 = isnan(_2209) ? _1933 : (isnan(_1933) ? _2209 : min(_1933, _2209));
        float _2425 = isnan(_2422) ? _2424 : (isnan(_2424) ? _2422 : min(_2424, _2422));
        float _2429 = (_2425 * _1786) + _1775;
        float _2430 = (_2425 * _1789) + _1779;
        float _2431 = (_2425 * _1792) + _1783;
        float _2432 = _2425 * 9.9999997473787516355514526367188e-05;
        float _2433 = (-1.0) - _2432;
        float _2435 = _2432 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2431 > _2435) || ((_2431 < _2433) || ((_2430 > _2435) || ((_2430 < _2433) || ((_2429 < _2433) || (_2429 > _2435))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2630 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2431, cbModelParam._m0[17u].z, fma(_2430, cbModelParam._m0[17u].y, _2429 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2431, cbModelParam._m0[18u].z, fma(_2430, cbModelParam._m0[18u].y, _2429 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2431, cbModelParam._m0[19u].z, fma(_2430, cbModelParam._m0[19u].y, _2429 * cbModelParam._m0[19u].x))), _1721);
            frontier_phi_25_49_ladder = _2630.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2630.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2630.x * cbModelParam._m0[1u].z;
        }
        _1811 = frontier_phi_25_49_ladder_2;
        _1813 = frontier_phi_25_49_ladder_1;
        _1815 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1795 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_789, _790, _791), _1721);
        _1811 = _1795.x * cbModelParam._m0[1u].z;
        _1813 = _1795.y * cbModelParam._m0[1u].z;
        _1815 = _1795.z * cbModelParam._m0[1u].z;
    }
    float _1828 = (((_816 * _765) + _817) * _781) * ((cbModelParam._m0[1u].w * (_1811 - _1712)) + _1712);
    float _1830 = (((_816 * _767) + _817) * _781) * ((cbModelParam._m0[1u].w * (_1813 - _1714)) + _1714);
    float _1832 = (((_816 * _768) + _817) * _781) * ((cbModelParam._m0[1u].w * (_1815 - _1716)) + _1716);
    float _1835 = fma(_1832, cbSceneParam._m0[89u].z, fma(_1830, cbSceneParam._m0[89u].y, _1828 * cbSceneParam._m0[89u].x));
    float _1838 = fma(_1832, cbSceneParam._m0[90u].z, fma(_1830, cbSceneParam._m0[90u].y, _1828 * cbSceneParam._m0[90u].x));
    float _1841 = fma(_1832, cbSceneParam._m0[91u].z, fma(_1830, cbSceneParam._m0[91u].y, _1828 * cbSceneParam._m0[91u].x));
    uvec4 _1851 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1853 = _1851.x * 14u;
    uint _1854 = _1853 + 13u;
    float _1861 = _781 + (-1.0);
    float _1866 = (cbLight._m0[_1854].x * _1861) + 1.0;
    float _1867 = (cbLight._m0[_1854].y * _1861) + 1.0;
    float _1868 = (cbLight._m0[_1854].z * _1861) + 1.0;
    float _1869 = (cbLight._m0[_1854].w * _1861) + 1.0;
    uint _1870 = _1853 + 5u;
    float _1876 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
    uint _1880 = _1853 + 4u;
    float _1887 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
    uint _1891 = _1853 | 1u;
    float _1902 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_601, _602, _603));
    float _1905 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_601, _602, _603));
    float _4143 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _4154 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1910 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * 0.3183098733425140380859375;
    float _1912 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * 0.3183098733425140380859375;
    float _1919 = ((cbLight._m0[_1870].x * _1876) * _1912) + ((cbLight._m0[_1880].x * _1887) * _1910);
    float _1920 = ((_1876 * cbLight._m0[_1870].y) * _1912) + ((_1887 * cbLight._m0[_1880].y) * _1910);
    float _1921 = ((_1876 * cbLight._m0[_1870].z) * _1912) + ((_1887 * cbLight._m0[_1880].z) * _1910);
    uvec4 _1925 = floatBitsToUint(cbLight._m0[_1853 + 12u]);
    bool _1927 = _1925.x == 0u;
    float _1938;
    float _1940;
    float _1942;
    if (_1927)
    {
        _1938 = _1919;
        _1940 = _1920;
        _1942 = _1921;
    }
    else
    {
        uint _1946 = _1853 + 6u;
        float _1962 = (dot(vec3(cbLight._m0[_1853 + 2u].xyz), vec3(_601, _602, _603)) * 0.5) + 0.5;
        float _1963 = _1962 * _1962;
        float _4165 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1964 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1965 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _1938 = (((cbLight._m0[_1946].x * 0.3183098733425140380859375) * _1964) * _1965) + _1919;
        _1940 = (((cbLight._m0[_1946].y * 0.3183098733425140380859375) * _1964) * _1965) + _1920;
        _1942 = (((cbLight._m0[_1946].z * 0.3183098733425140380859375) * _1964) * _1965) + _1921;
    }
    bool _1945 = _1925.y == 0u;
    float _1983;
    float _1985;
    float _1987;
    if (_1945)
    {
        _1983 = _1938;
        _1985 = _1940;
        _1987 = _1942;
    }
    else
    {
        uint _2153 = _1853 + 7u;
        float _2169 = (dot(vec3(cbLight._m0[_1853 + 3u].xyz), vec3(_601, _602, _603)) * 0.5) + 0.5;
        float _2170 = _2169 * _2169;
        float _4181 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2171 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2172 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _1983 = (((cbLight._m0[_2153].x * 0.3183098733425140380859375) * _2171) * _2172) + _1938;
        _1985 = (((cbLight._m0[_2153].y * 0.3183098733425140380859375) * _2171) * _2172) + _1940;
        _1987 = (((cbLight._m0[_2153].z * 0.3183098733425140380859375) * _2171) * _2172) + _1942;
    }
    uint _1990 = _1853 + 8u;
    float _2003 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _604) * 0.949999988079071044921875);
    float _2004 = _2003 * _2003;
    float _2005 = cbLight._m0[_1853].x + _680;
    float _2006 = cbLight._m0[_1853].y + _681;
    float _2007 = cbLight._m0[_1853].z + _682;
    float _2011 = inversesqrt(dot(vec3(_2005, _2006, _2007), vec3(_2005, _2006, _2007)));
    float _2012 = _2011 * _2005;
    float _2013 = _2011 * _2006;
    float _2014 = _2011 * _2007;
    float _2015 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_1853].xyz));
    float _4197 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _4208 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _2019 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2020 = dot(vec3(_601, _602, _603), vec3(_2012, _2013, _2014));
    float _4219 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2024 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2012, _2013, _2014));
    float _4230 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2028 = _2004 * _2004;
    float _2032 = ((_2023 * _2023) * (_2028 + (-1.0))) + 1.0;
    float _2040 = exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0);
    float _2041 = 0.959999978542327880859375 - _762;
    float _2043 = 0.959999978542327880859375 - _763;
    float _2044 = 0.959999978542327880859375 - _764;
    float _2051 = 1.0 - _2004;
    float _2062 = (0.5 / (((_2019 * ((_2018 * _2051) + _2004)) + 9.9999999392252902907785028219223e-09) + (((_2019 * _2051) + _2004) * _2018))) * _2018;
    float _4241 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2028 / ((_2032 * _2032) * 3.141590118408203125));
    uint _2075 = _1853 + 9u;
    float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _604) * 0.949999988079071044921875);
    float _2087 = _2086 * _2086;
    float _2088 = cbLight._m0[_1891].x + _680;
    float _2089 = cbLight._m0[_1891].y + _681;
    float _2090 = cbLight._m0[_1891].z + _682;
    float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
    float _2095 = _2094 * _2088;
    float _2096 = _2094 * _2089;
    float _2097 = _2094 * _2090;
    float _2098 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_1891].xyz));
    float _4252 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2102 = dot(vec3(_601, _602, _603), vec3(_2095, _2096, _2097));
    float _4263 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2106 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_2095, _2096, _2097));
    float _4274 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2110 = _2087 * _2087;
    float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
    float _2121 = exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0);
    float _2128 = 1.0 - _2087;
    float _2138 = (0.5 / (((_2019 * ((_2101 * _2128) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_2019 * _2128) + _2087) * _2101))) * _2101;
    float _4285 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2140 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
    float _2150 = (((((_2121 * _2041) + _765) * cbLight._m0[_2075].x) * _2140) * _1876) + (((((_2040 * _2041) + _765) * cbLight._m0[_1990].x) * _2064) * _1887);
    float _2151 = (((((_2121 * _2043) + _767) * cbLight._m0[_2075].y) * _2140) * _1876) + (((((_2040 * _2043) + _767) * cbLight._m0[_1990].y) * _2064) * _1887);
    float _2152 = (((((_2121 * _2044) + _768) * cbLight._m0[_2075].z) * _2140) * _1876) + (((((_2040 * _2044) + _768) * cbLight._m0[_1990].z) * _2064) * _1887);
    float _2214;
    float _2216;
    float _2218;
    if (_1927)
    {
        _2214 = _2150;
        _2216 = _2151;
        _2218 = _2152;
    }
    else
    {
        uint _2220 = _1853 + 2u;
        uint _2224 = _1853 + 10u;
        float _2238 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2220].w)) * _604) * 0.949999988079071044921875);
        float _2239 = _2238 * _2238;
        float _2240 = cbLight._m0[_2220].x + _680;
        float _2241 = cbLight._m0[_2220].y + _681;
        float _2242 = cbLight._m0[_2220].z + _682;
        float _2246 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
        float _2247 = _2246 * _2240;
        float _2248 = _2246 * _2241;
        float _2249 = _2246 * _2242;
        float _2250 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2220].xyz));
        float _4296 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2254 = dot(vec3(_601, _602, _603), vec3(_2247, _2248, _2249));
        float _4307 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2257 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2258 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_2247, _2248, _2249));
        float _4318 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2262 = _2239 * _2239;
        float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
        float _2273 = exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0);
        float _2280 = 1.0 - _2239;
        float _2290 = (0.5 / (((_2019 * ((_2253 * _2280) + _2239)) + 9.9999999392252902907785028219223e-09) + (((_2019 * _2280) + _2239) * _2253))) * _2253;
        float _4329 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2292 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
        float _2293 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _2214 = (((((_2273 * _2041) + _765) * cbLight._m0[_2224].x) * _2292) * _2293) + _2150;
        _2216 = (((((_2273 * _2043) + _767) * cbLight._m0[_2224].y) * _2292) * _2293) + _2151;
        _2218 = (((((_2273 * _2044) + _768) * cbLight._m0[_2224].z) * _2292) * _2293) + _2152;
    }
    float _2328;
    float _2330;
    float _2332;
    if (_1945)
    {
        _2328 = _2214;
        _2330 = _2216;
        _2332 = _2218;
    }
    else
    {
        uint _2339 = _1853 + 3u;
        uint _2343 = _1853 + 11u;
        float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _604) * 0.949999988079071044921875);
        float _2358 = _2357 * _2357;
        float _2359 = cbLight._m0[_2339].x + _680;
        float _2360 = cbLight._m0[_2339].y + _681;
        float _2361 = cbLight._m0[_2339].z + _682;
        float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
        float _2366 = _2365 * _2359;
        float _2367 = _2365 * _2360;
        float _2368 = _2365 * _2361;
        float _2369 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2339].xyz));
        float _4345 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2373 = dot(vec3(_601, _602, _603), vec3(_2366, _2367, _2368));
        float _4356 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2377 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2366, _2367, _2368));
        float _4367 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2381 = _2358 * _2358;
        float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
        float _2392 = exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0);
        float _2399 = 1.0 - _2358;
        float _2409 = (0.5 / (((_2019 * ((_2372 * _2399) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2019 * _2399) + _2358) * _2372))) * _2372;
        float _4378 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2411 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
        float _2412 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _2328 = (((((_2392 * _2041) + _765) * cbLight._m0[_2343].x) * _2411) * _2412) + _2214;
        _2330 = (((((_2392 * _2043) + _767) * cbLight._m0[_2343].y) * _2411) * _2412) + _2216;
        _2332 = (((((_2392 * _2044) + _768) * cbLight._m0[_2343].z) * _2411) * _2412) + _2218;
    }
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    if (_1851.y == 0u)
    {
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2488 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2487;
        float _2489 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2487;
        float _2490 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2487;
        uvec4 _2502 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2503 = _2502.x;
        uint _2514 = uint((float(_2502.y) * floor(float(uint(cbSceneParam._m0[85u].y * _702) / _2503))) + floor(float(uint(cbSceneParam._m0[85u].x * _701) / _2503)));
        float _2524 = (log2(_2490 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2525 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        uint _2528 = uint(isnan(14.0) ? _2525 : (isnan(_2525) ? 14.0 : min(_2525, 14.0)));
        uvec4 _2533 = texelFetch(g_lightClusterGridBuffer, int(((_2528 << 2u) + (_2514 << 6u)) >> 2u));
        uint _2534 = _2533.x;
        uint _2535 = _2502.z;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        if (((((1u << ((_2535 >> 4u) & 15u)) + 4294967295u) & _2534) == 0u) || ((_2535 & 240u) == 0u))
        {
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
        }
        else
        {
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            uint _2794 = 0u;
            uint _2803;
            bool _2804;
            for (;;)
            {
                _2803 = texelFetch(g_lightClassification, int((((_2528 << 5u) + (_2514 << 9u)) + (_2794 << 2u)) >> 2u)).x;
                _2804 = _2803 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2804)
                {
                    frontier_phi_66_pred = _2788;
                    frontier_phi_66_pred_1 = _2793;
                    frontier_phi_66_pred_2 = _2792;
                    frontier_phi_66_pred_3 = _2791;
                    frontier_phi_66_pred_4 = _2790;
                    frontier_phi_66_pred_5 = _2789;
                }
                else
                {
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    uint _2939;
                    _2933 = _2788;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2791;
                    _2937 = _2792;
                    _2938 = _2793;
                    _2939 = _2803;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    for (;;)
                    {
                        uint _2943 = uint(findLSB(_2939)) + (_2794 << 5u);
                        uint _2940 = (_2939 + 4294967295u) & _2939;
                        uint _2945 = _2943 * 48u;
                        vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2965 = (_2943 * 48u) + 4u;
                        vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 3u)).x));
                        uint _2984 = (_2943 * 48u) + 8u;
                        vec3 _2995 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x));
                        float _2999 = _2959.x - _2488;
                        float _3000 = _2959.y - _2489;
                        float _3001 = _2959.z - _2490;
                        float _3002 = dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001));
                        float _3005 = inversesqrt(_3002);
                        float _3006 = _3005 * _2999;
                        float _3007 = _3005 * _3000;
                        float _3008 = _3005 * _3001;
                        float _3009 = dot(vec3(_722, _725, _728), vec3(_3006, _3007, _3008));
                        float _3014 = 1.0 - (_3002 * _2959.w);
                        float _4404 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3015 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3016 = sqrt(_3002) * _2978.w;
                        float _3019 = 1.39999997615814208984375 / (_3016 + 1.39999997615814208984375);
                        float _3020 = _3019 * _3019;
                        float _3023 = ((1.0 - _3020) * _3009) + _3020;
                        float _3026 = _3016 * _3016;
                        float _3030 = ((isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))) * _3015) / ((_3026 * 0.699999988079071044921875) + 1.0);
                        float _3034 = (-0.0) - _2488;
                        float _3035 = (-0.0) - _2489;
                        float _3036 = (-0.0) - _2490;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3041 = _3040 * _3034;
                        float _3042 = _3040 * _3035;
                        float _3043 = _3040 * _3036;
                        float _3051 = exp2(log2(1.0 / ((_3026 * 3.5) + 5.0)) * 0.25);
                        float _3052 = 1.0 - _797;
                        float _3059 = sqrt(1.0 - ((1.0 - (_3052 * _3052)) * (1.0 - (_3051 * _3051))));
                        float _3060 = _3059 * _3059;
                        float _3061 = _3060 * _3060;
                        float _3062 = _3041 + _3006;
                        float _3063 = _3042 + _3007;
                        float _3064 = _3043 + _3008;
                        float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                        float _3072 = dot(vec3(_722, _725, _728), vec3(_3041, _3042, _3043));
                        float _4420 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3075 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                        float _3076 = dot(vec3(_722, _725, _728), vec3(_3068 * _3062, _3068 * _3063, _3068 * _3064));
                        float _4431 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3079 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3083 = ((_3079 * _3079) * (_3061 + (-1.0))) + 1.0;
                        float _3084 = _3019 * _3060;
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3009) + _3085;
                        float _4442 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3089 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3090 = 1.0 - _3060;
                        float _3100 = (0.5 / (((_3089 * ((_3075 * _3090) + _3060)) + 9.9999999392252902907785028219223e-09) + (((_3089 * _3090) + _3060) * _3075))) * _3089;
                        float _4453 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3111 = (((_3061 * 3.1415927410125732421875) * (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) / ((_3083 * _3083) * ((_3026 * 2.1991131305694580078125) + 3.141590118408203125))) * _3015;
                        _2863 = (_3030 * _2978.x) + _2936;
                        _2864 = (_3030 * _2978.y) + _2937;
                        _2865 = (_3030 * _2978.z) + _2938;
                        _2860 = (_3111 * _2995.x) + _2933;
                        _2861 = (_3111 * _2995.y) + _2934;
                        _2862 = (_3111 * _2995.z) + _2935;
                        if (_2940 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2933 = _2860;
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2940;
                        }
                    }
                    frontier_phi_66_pred = _2860;
                    frontier_phi_66_pred_1 = _2865;
                    frontier_phi_66_pred_2 = _2864;
                    frontier_phi_66_pred_3 = _2863;
                    frontier_phi_66_pred_4 = _2862;
                    frontier_phi_66_pred_5 = _2861;
                }
                _2636 = frontier_phi_66_pred;
                _2646 = frontier_phi_66_pred_1;
                _2644 = frontier_phi_66_pred_2;
                _2642 = frontier_phi_66_pred_3;
                _2640 = frontier_phi_66_pred_4;
                _2638 = frontier_phi_66_pred_5;
                uint _2795 = _2794 + 1u;
                if (_2795 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2788 = _2636;
                    _2789 = _2638;
                    _2790 = _2640;
                    _2791 = _2642;
                    _2792 = _2644;
                    _2793 = _2646;
                    _2794 = _2795;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
        }
        uvec4 _2649 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2650 = _2649.z;
        uint _2652 = (_2650 >> 8u) & 15u;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        if (((4294967295u << _2652) & _2534) == 0u)
        {
            _2756 = _2635;
            _2758 = _2637;
            _2760 = _2639;
            _2762 = _2641;
            _2764 = _2643;
            _2766 = _2645;
        }
        else
        {
            float _2781 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
            float _2782 = _2781 * _2488;
            float _2783 = _2781 * _2489;
            float _2784 = _2781 * _2490;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2652 < ((_2650 >> 12u) & 15u))
            {
                float _2757;
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2916 = _2635;
                float _2917 = _2637;
                float _2918 = _2639;
                float _2919 = _2641;
                float _2920 = _2643;
                float _2921 = _2645;
                uint _2922 = _2652;
                uint _2931;
                bool _2932;
                for (;;)
                {
                    _2931 = texelFetch(g_lightClassification, int((((_2528 << 5u) + (_2514 << 9u)) + (_2922 << 2u)) >> 2u)).x;
                    _2932 = _2931 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2932)
                    {
                        frontier_phi_77_pred = _2921;
                        frontier_phi_77_pred_1 = _2920;
                        frontier_phi_77_pred_2 = _2919;
                        frontier_phi_77_pred_3 = _2918;
                        frontier_phi_77_pred_4 = _2917;
                        frontier_phi_77_pred_5 = _2916;
                    }
                    else
                    {
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3138 = _2916;
                        float _3139 = _2917;
                        float _3140 = _2918;
                        float _3141 = _2919;
                        float _3142 = _2920;
                        float _3143 = _2921;
                        uint _3144 = _2931;
                        uint _3145;
                        vec4 _3170;
                        float _3171;
                        vec4 _3186;
                        vec3 _3198;
                        vec4 _3214;
                        vec4 _3229;
                        float _3275;
                        bool _3276;
                        for (;;)
                        {
                            uint _3155 = ((_2922 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3144));
                            _3145 = (_3144 + 4294967295u) & _3144;
                            uint _3157 = _3155 * 40u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            _3171 = _3170.w;
                            uint _3173 = (_3155 * 40u) + 4u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3188 = (_3155 * 40u) + 8u;
                            _3198 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x));
                            uint _3201 = (_3155 * 40u) + 16u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3216 = (_3155 * 40u) + 20u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3231 = (_3155 * 40u) + 24u;
                            vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3250 = (_3155 * 40u) + 28u;
                            vec4 _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            _3275 = fma(_2490, _3263.z, fma(_2489, _3263.y, _3263.x * _2488)) + _3263.w;
                            _3276 = !((fma(_2490, _3244.z, fma(_2489, _3244.y, _3244.x * _2488)) + _3244.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3276)
                            {
                                float _3303 = _3170.x - _2488;
                                float _3304 = _3170.y - _2489;
                                float _3305 = _3170.z - _2490;
                                float _3306 = dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305));
                                float _3309 = inversesqrt(_3306);
                                float _3310 = _3309 * _3303;
                                float _3311 = _3309 * _3304;
                                float _3312 = _3309 * _3305;
                                float _3316 = 1.0 - (_3306 / (_3171 * _3171));
                                float _4464 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3321 = sqrt(_3306) * _3186.w;
                                float _3323 = 1.39999997615814208984375 / (_3321 + 1.39999997615814208984375);
                                float _3324 = _3323 * _3323;
                                float _3327 = ((1.0 - _3324) * dot(vec3(_3310, _3311, _3312), vec3(_722, _725, _728))) + _3324;
                                float _3330 = _3321 * _3321;
                                float _3334 = (fma(_2490, _3214.z, fma(_2489, _3214.y, _3214.x * _2488)) + _3214.w) / _3275;
                                float _3335 = (fma(_2490, _3229.z, fma(_2489, _3229.y, _3229.x * _2488)) + _3229.w) / _3275;
                                float _3339 = 1.0 - dot(vec2(_3334, _3335), vec2(_3334, _3335));
                                float _4480 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3341 = _3340 * (((isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0))) * _3317) / ((_3330 * 0.699999988079071044921875) + 1.0));
                                float _3353 = exp2(log2(1.0 / ((_3330 * 3.5) + 5.0)) * 0.25);
                                float _3354 = 1.0 - _797;
                                float _3361 = sqrt(1.0 - ((1.0 - (_3354 * _3354)) * (1.0 - (_3353 * _3353))));
                                float _3362 = _3361 * _3361;
                                float _3363 = _3362 * _3362;
                                float _3364 = _3310 - _2782;
                                float _3365 = _3311 - _2783;
                                float _3366 = _3312 - _2784;
                                float _3370 = inversesqrt(dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366)));
                                float _3374 = dot(vec3(_722, _725, _728), vec3((-0.0) - _2782, (-0.0) - _2783, (-0.0) - _2784));
                                float _4491 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3377 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3378 = dot(vec3(_722, _725, _728), vec3(_3370 * _3364, _3370 * _3365, _3370 * _3366));
                                float _4502 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3381 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3385 = ((_3381 * _3381) * (_3363 + (-1.0))) + 1.0;
                                float _3386 = _3323 * _3362;
                                float _3387 = _3386 * _3386;
                                float _3393 = ((1.0 - _3387) * dot(vec3(_722, _725, _728), vec3(_3310, _3311, _3312))) + _3387;
                                float _4513 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3395 = 1.0 - _3362;
                                float _3405 = (0.5 / (((_3394 * ((_3377 * _3395) + _3362)) + 9.9999999392252902907785028219223e-09) + (((_3394 * _3395) + _3362) * _3377))) * _3394;
                                float _4524 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3415 = (_3340 * _3317) * (((_3363 * 3.1415927410125732421875) * (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) / ((_3385 * _3385) * ((_3330 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3341 * _3186.y;
                                frontier_phi_83_pred_1 = _3341 * _3186.x;
                                frontier_phi_83_pred_2 = _3415 * _3198.z;
                                frontier_phi_83_pred_3 = _3415 * _3198.y;
                                frontier_phi_83_pred_4 = _3415 * _3198.x;
                                frontier_phi_83_pred_5 = _3341 * _3186.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3423 = frontier_phi_83_pred;
                            _3422 = frontier_phi_83_pred_1;
                            _3421 = frontier_phi_83_pred_2;
                            _3420 = frontier_phi_83_pred_3;
                            _3419 = frontier_phi_83_pred_4;
                            _3424 = frontier_phi_83_pred_5;
                            _3128 = _3422 + _3141;
                            _3129 = _3423 + _3142;
                            _3130 = _3424 + _3143;
                            _3125 = _3419 + _3138;
                            _3126 = _3420 + _3139;
                            _3127 = _3421 + _3140;
                            if (_3145 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3145;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3130;
                        frontier_phi_77_pred_1 = _3129;
                        frontier_phi_77_pred_2 = _3128;
                        frontier_phi_77_pred_3 = _3127;
                        frontier_phi_77_pred_4 = _3126;
                        frontier_phi_77_pred_5 = _3125;
                    }
                    _2767 = frontier_phi_77_pred;
                    _2765 = frontier_phi_77_pred_1;
                    _2763 = frontier_phi_77_pred_2;
                    _2761 = frontier_phi_77_pred_3;
                    _2759 = frontier_phi_77_pred_4;
                    _2757 = frontier_phi_77_pred_5;
                    uint _2923 = _2922 + 1u;
                    if (_2923 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2916 = _2757;
                        _2917 = _2759;
                        _2918 = _2761;
                        _2919 = _2763;
                        _2920 = _2765;
                        _2921 = _2767;
                        _2922 = _2923;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2761;
                frontier_phi_58_59_ladder_1 = _2767;
                frontier_phi_58_59_ladder_2 = _2765;
                frontier_phi_58_59_ladder_3 = _2763;
                frontier_phi_58_59_ladder_4 = _2759;
                frontier_phi_58_59_ladder_5 = _2757;
            }
            else
            {
                frontier_phi_58_59_ladder = _2639;
                frontier_phi_58_59_ladder_1 = _2645;
                frontier_phi_58_59_ladder_2 = _2643;
                frontier_phi_58_59_ladder_3 = _2641;
                frontier_phi_58_59_ladder_4 = _2637;
                frontier_phi_58_59_ladder_5 = _2635;
            }
            _2756 = frontier_phi_58_59_ladder_5;
            _2758 = frontier_phi_58_59_ladder_4;
            _2760 = frontier_phi_58_59_ladder;
            _2762 = frontier_phi_58_59_ladder_3;
            _2764 = frontier_phi_58_59_ladder_2;
            _2766 = frontier_phi_58_59_ladder_1;
        }
        float _2771 = isnan(1.0) ? _781 : (isnan(_781) ? 1.0 : min(_781, 1.0));
        _2547 = (_2771 * _2762) + _1983;
        _2549 = (_2771 * _2764) + _1985;
        _2551 = (_2771 * _2766) + _1987;
        _2553 = ((_2756 * _765) * _2771) + _2328;
        _2555 = ((_2758 * _767) * _2771) + _2330;
        _2557 = ((_2760 * _768) * _2771) + _2332;
    }
    else
    {
        _2547 = _1983;
        _2549 = _1985;
        _2551 = _1987;
        _2553 = _2328;
        _2555 = _2330;
        _2557 = _2332;
    }
    float _4540 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4551 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4562 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _2574 = ((isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2547 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _781))) + ((_2553 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1620)) * cbPerFrame._m0[3u].x);
    float _2575 = ((isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2549 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _781))) + ((_2555 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1620)) * cbPerFrame._m0[3u].x);
    float _2576 = ((isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2551 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _781))) + ((_2557 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1620)) * cbPerFrame._m0[3u].x);
    uint _2577 = _245 + 6u;
    float _2585 = _701 / cbSceneParam._m0[86u].x;
    float _2586 = _702 / cbSceneParam._m0[86u].y;
    vec4 _2600 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2585, _2586, (log2((isnan(cbSceneParam._m0[77u].w) ? _623 : (isnan(_623) ? cbSceneParam._m0[77u].w : min(_623, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2602 = _2600.x;
    float _2603 = _2600.y;
    float _2604 = _2600.z;
    float _2605 = _2600.w;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    if (_623 > cbSceneParam._m0[78u].w)
    {
        float _2660 = isnan(_623) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _623 : min(cbSceneParam._m0[80u].w, _623));
        float _2661 = _2660 / _623;
        float _2672 = _2661 * _673;
        float _2673 = _674 * _2661;
        float _2674 = (-0.0) - _2673;
        float _2676 = _2661 * _675;
        float _2678 = (cbSceneParam._m0[77u].w * _2674) / _2660;
        float _2679 = _2678 + cbSceneParam._m0[79u].w;
        float _2680 = cbSceneParam._m0[79u].w - _2673;
        float _2686 = sqrt(((_2672 * _2672) + (_2673 * _2673)) + (_2676 * _2676));
        float _2689 = (1.0 - (cbSceneParam._m0[77u].w / _2660)) * _2686;
        float _2694 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2696 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2873;
        if (abs((_2674 - _2678) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2873 = ((((_2679 > 0.0) ? exp2(_2694 * _2679) : (2.0 - exp2(_2696 * _2679))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2689;
        }
        else
        {
            float _2817 = 1.0 / cbSceneParam._m0[80u].x;
            float _2818 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : max(_2679, _2680));
            float _2819 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : min(_2679, _2680));
            float _2828 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : min(_2818, 0.0));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            _2873 = ((abs(_2686 / _2674) * cbSceneParam._m0[80u].y) * ((((_2828 - _2829) * 2.0) - ((exp2(_2694 * (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0)))) - exp2(_2694 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0))))) * _2817)) - ((exp2(_2696 * _2828) - exp2(_2696 * _2829)) * _2817))) + (_2689 * cbSceneParam._m0[80u].z);
        }
        vec4 _2875 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2585, _2586, 1.0), 0.0);
        float _2884 = exp2((_2873 * (-1.44269502162933349609375)) * (1.0 - _2875.w));
        float _2885 = log2(_2884);
        float _2901 = log2(_2605);
        _2698 = (exp2(_2901 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].x)) * _2875.x) / cbSceneParam._m0[78u].x)) + _2602;
        _2700 = (exp2(_2901 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].y)) * _2875.y) / cbSceneParam._m0[78u].y)) + _2603;
        _2702 = (exp2(_2901 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].z)) * _2875.z) / cbSceneParam._m0[78u].z)) + _2604;
        _2704 = _2884 * _2605;
    }
    else
    {
        _2698 = _2602;
        _2700 = _2603;
        _2702 = _2604;
        _2704 = _2605;
    }
    bool _2911;
    vec4 _2714;
    vec4 _2736;
    float _2738;
    float _2742;
    float _2743;
    float _2744;
    float _2745;
    bool _2755;
    for (;;)
    {
        _2714 = cbMatDynParam._m0[0u];
        float _2716 = roundEven(_2714.y);
        bool _2717 = _2716 == 3.0;
        float _2718 = log2(_2704);
        float _2725 = exp2(_2718 * cbSceneParam._m0[78u].x) * _2574;
        float _2726 = exp2(_2718 * cbSceneParam._m0[78u].y) * _2575;
        float _2727 = exp2(_2718 * cbSceneParam._m0[78u].z) * _2576;
        float _2734 = _689 + (-0.5);
        _2736 = cbMtdParam._m0[1u];
        _2738 = _2736.y * _2734;
        float _2741 = (_2716 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2742 = _2741 * (_2717 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2698)));
        _2743 = _2741 * (_2717 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2700)));
        _2744 = _2741 * (_2717 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2702)));
        _2745 = _2734 * 0.999000012874603271484375;
        _2755 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2755)
        {
            if ((cbInstanceData._m0[_245 + 7u].x + _2745) < 0.5)
            {
                _2911 = true;
                break;
            }
        }
        uint _2852 = _741 + uint(_2714.w);
        if ((cbInstanceData._m0[_2852].w < 1.0) && ((cbInstanceData._m0[_2852].w + _2745) < 0.5))
        {
            _2911 = true;
            break;
        }
        if ((_2738 + 1.0) < _2736.x)
        {
            _2911 = true;
            break;
        }
        _2911 = false;
        break;
    }
    float _3116;
    if (_2911)
    {
        discard_state = true;
        _3116 = 0.0;
    }
    else
    {
        _3116 = cbInstanceData._m0[_2577].w;
    }
    SV_Target.x = _2742;
    SV_Target.y = _2743;
    SV_Target.z = _2744;
    SV_Target.w = _3116;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2577].w;
    discard_exit();
}


