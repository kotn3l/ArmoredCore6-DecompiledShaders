#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1340;
float _4003;
float _4004;
float _4005;
float _4006;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _359 = _357.x;
    float _371 = dot(vec4(_359, _357.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _388 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_359 - _371) * cbMtdParam._m0[24u].y) + _371) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4015 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _396 = (_389 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _397 = (_389 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _398 = (_389 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _415 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _437 = _435.x;
    float _447 = dot(vec4(_437, _435.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _461 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_437 - _447) * cbMtdParam._m0[24u].y) + _447) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4026 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _469 = (_462 * ((_415.x * cbMtdParam._m0[13u].x) - _396)) + _396;
    float _470 = (_462 * ((_415.y * cbMtdParam._m0[13u].y) - _397)) + _397;
    float _471 = (_462 * ((_415.z * cbMtdParam._m0[13u].z) - _398)) + _398;
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _506 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _508 = _506.x;
    float _509 = _506.y;
    float _510 = _506.z;
    float _517 = ((_489.x - _508) * _389) + _508;
    float _518 = ((_489.y - _509) * _389) + _509;
    float _519 = ((_489.z - _510) * _389) + _510;
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _544 = ((_531.z - _519) * _462) + _519;
    float _547 = ((((_531.x - _517) * _462) + _517) * 2.0) + (-1.0);
    float _549 = ((((_531.y - _518) * _462) + _518) * 2.0) + (-1.0);
    float _550 = dot(vec2(_547, _549), vec2(_547, _549));
    float _4037 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))));
    vec4 _569 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _594 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _596 = _594.x;
    float _597 = 1.0 - _596;
    float _610 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_596 - _597) * cbMtdParam._m0[24u].z) + _597) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4048 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _618 = (_611 * (cbMtdParam._m0[17u].x - _469)) + _469;
    float _619 = (_611 * (cbMtdParam._m0[17u].y - _470)) + _470;
    float _620 = (_611 * (cbMtdParam._m0[17u].z - _471)) + _471;
    vec4 _632 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _646 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _648 = _646.x;
    float _666 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _648) * _389) + _648;
    float _683 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _666) * _462) + _666;
    float _687 = ((_632.x - _683) * cbMtdParam._m0[19u].z) + _683;
    float _689 = _687 - (_687 * _611);
    float _693 = (cbMtdParam._m0[19u].w * (_569.z - _544)) + _544;
    vec4 _706 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _713 = (_706.x * 2.0) + (-1.0);
    float _714 = (_706.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _4059 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _723 = (_611 * (_706.z - _693)) + _693;
    float _726 = (((_569.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _547;
    float _727 = (((_569.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _549;
    float _739 = (((_713 - _726) + (cbMtdParam._m0[21u].x * _726)) * _611) + _726;
    float _740 = (((_714 - _727) + (cbMtdParam._m0[21u].x * _727)) * _611) + _727;
    float _741 = (_611 * (sqrt(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) - _555)) + _555;
    float _746 = cbMtdParam._m0[22u].x + _569.w;
    float _749 = fma(_741, _237 * NORMAL.x, fma(_740, _244 * TANGENT.x, (_230 * _222) * _739));
    float _752 = fma(_741, _237 * NORMAL.y, fma(_740, _244 * TANGENT.y, (_230 * _223) * _739));
    float _755 = fma(_741, _237 * NORMAL.z, fma(_740, _244 * TANGENT.z, (_230 * _224) * _739));
    float _759 = inversesqrt(dot(vec3(_749, _752, _755), vec3(_749, _752, _755)));
    float _760 = _759 * _749;
    float _761 = _759 * _752;
    float _762 = _759 * _755;
    float _4070 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _763 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4092 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _4103 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4114 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4125 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _768 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _782 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _833 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _823);
    float _834 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _823);
    float _835 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _823);
    float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
    float _840 = _833 * _839;
    float _841 = _834 * _839;
    float _842 = _835 * _839;
    vec4 _847 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _849 = _847.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1021 = sqrt(((_833 * _833) + (_834 * _834)) + (_835 * _835));
        float _1027 = (cbMatDynParam._m0[5u].x * _1021) + cbMatDynParam._m0[5u].y;
        float _4136 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1032 = (cbMatDynParam._m0[5u].z * _1021) + cbMatDynParam._m0[5u].w;
        float _4147 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) - _1028)) + _1028) < ((_849 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _860 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _861 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _879 = fma(_762, cbSceneParam._m0[5u].z, fma(_761, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _760));
    float _882 = fma(_762, cbSceneParam._m0[6u].z, fma(_761, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _760));
    float _885 = fma(_762, cbSceneParam._m0[7u].z, fma(_761, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _760));
    uint _898 = _250 + 9u;
    uint _899 = _898 + uint(cbMatDynParam._m0[0u].w);
    float _905 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * cbInstanceData._m0[_899].x;
    float _906 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * cbInstanceData._m0[_899].y;
    float _907 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * cbInstanceData._m0[_899].z;
    float _4158 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _4180 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _911 = 1.0 - _768;
    float _912 = _908 * _911;
    float _913 = _909 * _911;
    float _914 = _910 * _911;
    float _919 = (_908 + (-0.039999999105930328369140625)) * _768;
    float _920 = (_909 + (-0.039999999105930328369140625)) * _768;
    float _921 = (_910 + (-0.039999999105930328369140625)) * _768;
    float _922 = _919 + 0.039999999105930328369140625;
    float _924 = _920 + 0.039999999105930328369140625;
    float _925 = _921 + 0.039999999105930328369140625;
    vec4 _934 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _860, cbSceneParam._m0[86u].y * _861));
    float _938 = ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * TEXCOORD_5.w) * _934.x;
    float _939 = dot(vec3(_760, _761, _762), vec3(_840, _841, _842));
    float _942 = _939 * 2.0;
    float _946 = (_942 * _760) - _840;
    float _947 = (_942 * _761) - _841;
    float _948 = (_942 * _762) - _842;
    float _952 = abs(dot(vec3(_840, _841, _842), vec3(_760, _761, _762)));
    float _4191 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _954 = sqrt(_763);
    float _967 = exp2((_954 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_954 * 3.0));
    float _973 = (1.0 - _967) * ((_954 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _974 = _967 * _954;
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1339;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1064 = fma(_1010, cbModelParam._m0[26u].z, fma(_1006, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1002));
        float _1068 = fma(_1010, cbModelParam._m0[27u].z, fma(_1006, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1002));
        float _1072 = fma(_1010, cbModelParam._m0[28u].z, fma(_1006, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1002));
        float _1097 = _1002 + _760;
        float _1098 = _1006 + _761;
        float _1099 = _1010 + _762;
        float _1109 = fma(_1099, cbModelParam._m0[26u].z, fma(_1098, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1097)) - _1064;
        float _1110 = fma(_1099, cbModelParam._m0[27u].z, fma(_1098, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1097)) - _1068;
        float _1111 = fma(_1099, cbModelParam._m0[28u].z, fma(_1098, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1097)) - _1072;
        float _1115 = inversesqrt(dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111)));
        float _1128 = ((_1115 * _1109) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1064 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1115 * _1110) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1068 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1115 * _1111) / cbModelParam._m0[34u].z) + ((((((_1072 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        float _1167 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1133.x + (-0.5));
        float _1169 = _1167 * (_1133.y + (-0.5));
        float _1170 = _1167 * (_1133.z + (-0.5));
        float _1177 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1140.x + (-0.5));
        float _1179 = _1177 * (_1140.y + (-0.5));
        float _1180 = _1177 * (_1140.z + (-0.5));
        float _1187 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1147.x + (-0.5));
        float _1189 = _1187 * (_1147.y + (-0.5));
        float _1190 = _1187 * (_1147.z + (-0.5));
        float _1197 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1154.x + (-0.5));
        float _1199 = _1197 * (_1154.y + (-0.5));
        float _1200 = _1197 * (_1154.z + (-0.5));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = _1168 * 0.5;
        float _1205 = _1178 * 0.5;
        float _1206 = _1188 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1221 = (dot(vec3(_760, _761, _762), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1231 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _4239 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1233 + 1.0))) + _1238) * _1201;
        float _1248 = _1169 * 0.5;
        float _1249 = _1179 * 0.5;
        float _1250 = _1189 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_760, _761, _762), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4272 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1275 + 1.0))) + _1280) * _1202;
        float _1290 = _1170 * 0.5;
        float _1291 = _1180 * 0.5;
        float _1292 = _1190 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_760, _761, _762), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4305 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1317 + 1.0))) + _1322) * _1203;
        _1339 = _1170;
        _1341 = _1169;
        _1342 = _1168;
        _1343 = _1180;
        _1344 = _1179;
        _1345 = _1178;
        _1346 = _1190;
        _1347 = _1189;
        _1348 = _1188;
        _1349 = _1203;
        _1350 = _1202;
        _1351 = _1201;
        _1352 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
    }
    else
    {
        _1339 = _1340;
        _1341 = _1340;
        _1342 = _1340;
        _1343 = _1340;
        _1344 = _1340;
        _1345 = _1340;
        _1346 = _1340;
        _1347 = _1340;
        _1348 = _1340;
        _1349 = _1340;
        _1350 = _1340;
        _1351 = _1340;
        _1352 = 0.0;
        _1353 = 0.0;
        _1354 = 0.0;
    }
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1381 = fma(_1010, cbModelParam._m0[30u].z, fma(_1006, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1002));
        float _1385 = fma(_1010, cbModelParam._m0[31u].z, fma(_1006, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1002));
        float _1389 = fma(_1010, cbModelParam._m0[32u].z, fma(_1006, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1002));
        float _1412 = _1002 + _760;
        float _1413 = _1006 + _761;
        float _1414 = _1010 + _762;
        float _1424 = fma(_1414, cbModelParam._m0[30u].z, fma(_1413, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1412)) - _1381;
        float _1425 = fma(_1414, cbModelParam._m0[31u].z, fma(_1413, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1412)) - _1385;
        float _1426 = fma(_1414, cbModelParam._m0[32u].z, fma(_1413, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1412)) - _1389;
        float _1430 = inversesqrt(dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426)));
        float _1443 = ((_1430 * _1424) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1381 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1444 = ((_1430 * _1425) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1385 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1445 = ((_1430 * _1426) / cbModelParam._m0[35u].z) + ((((((_1389 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        float _1480 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1447.x + (-0.5));
        float _1482 = _1480 * (_1447.y + (-0.5));
        float _1483 = _1480 * (_1447.z + (-0.5));
        float _1490 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1454.x + (-0.5));
        float _1492 = _1490 * (_1454.y + (-0.5));
        float _1493 = _1490 * (_1454.z + (-0.5));
        float _1500 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1461.x + (-0.5));
        float _1502 = _1500 * (_1461.y + (-0.5));
        float _1503 = _1500 * (_1461.z + (-0.5));
        float _1510 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1468.x + (-0.5));
        float _1512 = _1510 * (_1468.y + (-0.5));
        float _1513 = _1510 * (_1468.z + (-0.5));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = _1481 * 0.5;
        float _1518 = _1491 * 0.5;
        float _1519 = _1501 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_760, _761, _762), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4368 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1544 + 1.0))) + _1549) * _1514;
        float _1559 = _1482 * 0.5;
        float _1560 = _1492 * 0.5;
        float _1561 = _1502 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_760, _761, _762), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4379 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4390 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4401 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_1586 + 1.0))) + _1591) * _1515;
        float _1601 = _1483 * 0.5;
        float _1602 = _1493 * 0.5;
        float _1603 = _1503 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_760, _761, _762), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4434 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1628 + 1.0))) + _1633) * _1516;
        _1650 = _1483;
        _1651 = _1482;
        _1652 = _1481;
        _1653 = _1493;
        _1654 = _1492;
        _1655 = _1491;
        _1656 = _1503;
        _1657 = _1502;
        _1658 = _1501;
        _1659 = _1516;
        _1660 = _1515;
        _1661 = _1514;
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1663 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1664 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
    }
    else
    {
        _1650 = _1340;
        _1651 = _1340;
        _1652 = _1340;
        _1653 = _1340;
        _1654 = _1340;
        _1655 = _1340;
        _1656 = _1340;
        _1657 = _1340;
        _1658 = _1340;
        _1659 = _1340;
        _1660 = _1340;
        _1661 = _1340;
        _1662 = 0.0;
        _1663 = 0.0;
        _1664 = 0.0;
    }
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1352)) + _1352;
    float _1675 = (cbModelParam._m0[1u].x * (_1663 - _1353)) + _1353;
    float _1676 = (cbModelParam._m0[1u].x * (_1664 - _1354)) + _1354;
    float _1697 = fma(_1676, cbSceneParam._m0[89u].z, fma(_1675, cbSceneParam._m0[89u].y, _1674 * cbSceneParam._m0[89u].x));
    float _1700 = fma(_1676, cbSceneParam._m0[90u].z, fma(_1675, cbSceneParam._m0[90u].y, _1674 * cbSceneParam._m0[90u].x));
    float _1703 = fma(_1676, cbSceneParam._m0[91u].z, fma(_1675, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1674));
    float _1718 = _946 * 0.5;
    float _1719 = _947 * 0.5;
    float _1720 = _948 * 0.5;
    float _1721 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1652, _1655, _1658, _1661));
    float _1724 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1651, _1654, _1657, _1660));
    float _1727 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1761;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1734 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1339, _1343, _1346, _1349));
        float _1738 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1341, _1344, _1347, _1350));
        float _1742 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1342, _1345, _1348, _1351));
        float _1749 = dot(vec4(cbModelParam._m0[39u]), vec4(_1718, _1719, _1720, 1.0));
        _1761 = dot(vec3(isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1749) ? 0.0 : (isnan(0.0) ? _1749 : max(0.0, _1749))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1761 = 1.0;
    }
    float _1772;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1763 = dot(vec4(cbModelParam._m0[40u]), vec4(_1718, _1719, _1720, 1.0));
        _1772 = dot(vec3(isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1763) ? 0.0 : (isnan(0.0) ? _1763 : max(0.0, _1763))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1772 = 1.0;
    }
    float _1776 = (_1772 * cbModelParam._m0[1u].x) + (_1761 * (1.0 - cbModelParam._m0[1u].x));
    float _1786 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _763);
    float _1787 = isnan(_1786) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1786 : min(cbModelParam._m0[25u].z, _1786));
    float _1868;
    float _1870;
    float _1872;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1835 = fma(_1010, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1002)) + cbModelParam._m0[13u].w;
        float _1839 = fma(_1010, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1002)) + cbModelParam._m0[14u].w;
        float _1843 = fma(_1010, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1002)) + cbModelParam._m0[15u].w;
        float _1846 = fma(_948, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _946));
        float _1849 = fma(_948, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _946));
        float _1852 = fma(_948, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _946));
        float _1880;
        if (_1846 > 0.0)
        {
            _1880 = abs((1.0 - _1835) / _1846);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1835 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1880 = frontier_phi_17_15_ladder;
        }
        float _2052;
        if (_1849 > 0.0)
        {
            _2052 = abs((1.0 - _1839) / _1849);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1839 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2052 = frontier_phi_26_22_ladder;
        }
        float _2347;
        if (_1852 > 0.0)
        {
            _2347 = abs((1.0 - _1843) / _1852);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1843 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2347 = frontier_phi_38_33_ladder;
        }
        float _2349 = isnan(_2052) ? _1880 : (isnan(_1880) ? _2052 : min(_1880, _2052));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1846) + _1835;
        float _2355 = (_2350 * _1849) + _1839;
        float _2356 = (_2350 * _1852) + _1843;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2359 = (-1.0) - _2357;
        float _2361 = _2357 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2356 > _2361) || ((_2356 < _2359) || ((_2355 > _2361) || ((_2355 < _2359) || ((_2354 < _2359) || (_2354 > _2361))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2501 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2356, cbModelParam._m0[9u].z, fma(_2355, cbModelParam._m0[9u].y, _2354 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2356, cbModelParam._m0[10u].z, fma(_2355, cbModelParam._m0[10u].y, _2354 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2356, cbModelParam._m0[11u].z, fma(_2355, cbModelParam._m0[11u].y, _2354 * cbModelParam._m0[11u].x))), _1787);
            frontier_phi_16_38_ladder = _2501.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2501.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2501.x * cbModelParam._m0[1u].y;
        }
        _1868 = frontier_phi_16_38_ladder_2;
        _1870 = frontier_phi_16_38_ladder_1;
        _1872 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1856 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_946, _947, _948), _1787);
        _1868 = _1856.x * cbModelParam._m0[1u].y;
        _1870 = _1856.y * cbModelParam._m0[1u].y;
        _1872 = _1856.z * cbModelParam._m0[1u].y;
    }
    float _1876 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _763);
    float _1877 = isnan(_1876) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1876 : min(cbModelParam._m0[25u].w, _1876));
    float _1967;
    float _1969;
    float _1971;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1931 = fma(_1010, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1002)) + cbModelParam._m0[21u].w;
        float _1935 = fma(_1010, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1002)) + cbModelParam._m0[22u].w;
        float _1939 = fma(_1010, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1002)) + cbModelParam._m0[23u].w;
        float _1942 = fma(_948, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _946));
        float _1945 = fma(_948, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _946));
        float _1948 = fma(_948, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _946));
        float _2057;
        if (_1942 > 0.0)
        {
            _2057 = abs((1.0 - _1931) / _1942);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1931 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2057 = frontier_phi_28_24_ladder;
        }
        float _2374;
        if (_1945 > 0.0)
        {
            _2374 = abs((1.0 - _1935) / _1945);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1935 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2374 = frontier_phi_40_35_ladder;
        }
        float _2712;
        if (_1948 > 0.0)
        {
            _2712 = abs((1.0 - _1939) / _1948);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1939 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2712 = frontier_phi_50_47_ladder;
        }
        float _2714 = isnan(_2374) ? _2057 : (isnan(_2057) ? _2374 : min(_2057, _2374));
        float _2715 = isnan(_2712) ? _2714 : (isnan(_2714) ? _2712 : min(_2714, _2712));
        float _2719 = (_2715 * _1942) + _1931;
        float _2720 = (_2715 * _1945) + _1935;
        float _2721 = (_2715 * _1948) + _1939;
        float _2722 = _2715 * 9.9999997473787516355514526367188e-05;
        float _2723 = (-1.0) - _2722;
        float _2725 = _2722 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2721 > _2725) || ((_2721 < _2723) || ((_2720 > _2725) || ((_2720 < _2723) || ((_2719 < _2723) || (_2719 > _2725))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2843 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2721, cbModelParam._m0[17u].z, fma(_2720, cbModelParam._m0[17u].y, _2719 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2721, cbModelParam._m0[18u].z, fma(_2720, cbModelParam._m0[18u].y, _2719 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2721, cbModelParam._m0[19u].z, fma(_2720, cbModelParam._m0[19u].y, _2719 * cbModelParam._m0[19u].x))), _1877);
            frontier_phi_25_50_ladder = _2843.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2843.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2843.x * cbModelParam._m0[1u].z;
        }
        _1967 = frontier_phi_25_50_ladder_2;
        _1969 = frontier_phi_25_50_ladder_1;
        _1971 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1951 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_946, _947, _948), _1877);
        _1967 = _1951.x * cbModelParam._m0[1u].z;
        _1969 = _1951.y * cbModelParam._m0[1u].z;
        _1971 = _1951.z * cbModelParam._m0[1u].z;
    }
    float _1984 = (((_973 * _922) + _974) * _938) * ((cbModelParam._m0[1u].w * (_1967 - _1868)) + _1868);
    float _1986 = (((_973 * _924) + _974) * _938) * ((cbModelParam._m0[1u].w * (_1969 - _1870)) + _1870);
    float _1988 = (((_973 * _925) + _974) * _938) * ((cbModelParam._m0[1u].w * (_1971 - _1872)) + _1872);
    float _1991 = fma(_1988, cbSceneParam._m0[89u].z, fma(_1986, cbSceneParam._m0[89u].y, _1984 * cbSceneParam._m0[89u].x));
    float _1994 = fma(_1988, cbSceneParam._m0[90u].z, fma(_1986, cbSceneParam._m0[90u].y, _1984 * cbSceneParam._m0[90u].x));
    float _1997 = fma(_1988, cbSceneParam._m0[91u].z, fma(_1986, cbSceneParam._m0[91u].y, _1984 * cbSceneParam._m0[91u].x));
    float _2031 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2035 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2039 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2043 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2044 = _2031 / _2043;
    float _2045 = _2035 / _2043;
    float _2046 = _2039 / _2043;
    float _2193;
    float _2194;
    float _2195;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2073 = ((uint(_2046 > cbSceneParam._m0[59u].y) + uint(_2046 > cbSceneParam._m0[59u].x)) + uint(_2046 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2074 = _2073 + 43u;
        uint _2082 = _2073 + 44u;
        uint _2090 = _2073 + 45u;
        uint _2098 = _2073 + 46u;
        float _2109 = fma(_2043, cbSceneParam._m0[_2074].w, fma(_2039, cbSceneParam._m0[_2074].z, fma(_2035, cbSceneParam._m0[_2074].y, _2031 * cbSceneParam._m0[_2074].x)));
        float _2113 = fma(_2043, cbSceneParam._m0[_2082].w, fma(_2039, cbSceneParam._m0[_2082].z, fma(_2035, cbSceneParam._m0[_2082].y, _2031 * cbSceneParam._m0[_2082].x)));
        float _2121 = fma(_2043, cbSceneParam._m0[_2098].w, fma(_2039, cbSceneParam._m0[_2098].z, fma(_2035, cbSceneParam._m0[_2098].y, _2031 * cbSceneParam._m0[_2098].x)));
        float _2126 = cbSceneParam._m0[33u].z * _2121;
        float _2128 = cbSceneParam._m0[33u].w * _2121;
        float _2131 = fma(_2043, cbSceneParam._m0[_2090].w, fma(_2039, cbSceneParam._m0[_2090].z, fma(_2035, cbSceneParam._m0[_2090].y, _2031 * cbSceneParam._m0[_2090].x))) / _2121;
        float _2179 = (cbSceneParam._m0[33u].x - sqrt(((_2045 * _2045) + (_2044 * _2044)) + (_2046 * _2046))) * cbSceneParam._m0[33u].y;
        float _4560 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2186 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2126 + _2109) / _2121, (_2128 + _2113) / _2121), _2131), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 + _2109) / _2121, (_2113 - _2126) / _2121), _2131), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2109 - _2126) / _2121, (_2113 - _2128) / _2121), _2131), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2109 - _2128) / _2121, (_2126 + _2113) / _2121), _2131), 0.0)).x), vec4(0.25)));
        _2193 = 1.0 - (_2186 * cbSceneParam._m0[34u].x);
        _2194 = 1.0 - (_2186 * cbSceneParam._m0[34u].y);
        _2195 = 1.0 - (_2186 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2193 = 1.0;
        _2194 = 1.0;
        _2195 = 1.0;
    }
    float _2259;
    float _2261;
    float _2263;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2247 = fma(_2043, cbSceneParam._m0[63u].w, fma(_2039, cbSceneParam._m0[63u].z, fma(_2035, cbSceneParam._m0[63u].y, _2031 * cbSceneParam._m0[63u].x)));
        float _2248 = fma(_2043, cbSceneParam._m0[60u].w, fma(_2039, cbSceneParam._m0[60u].z, fma(_2035, cbSceneParam._m0[60u].y, _2031 * cbSceneParam._m0[60u].x))) / _2247;
        float _2249 = fma(_2043, cbSceneParam._m0[61u].w, fma(_2039, cbSceneParam._m0[61u].z, fma(_2035, cbSceneParam._m0[61u].y, _2031 * cbSceneParam._m0[61u].x))) / _2247;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2248 >= cbSceneParam._m0[64u].x) && (_2249 >= cbSceneParam._m0[64u].y)) && (_2248 <= cbSceneParam._m0[64u].z)) && (_2249 <= cbSceneParam._m0[64u].w))
        {
            float _2387 = fma(_2043, cbSceneParam._m0[62u].w, fma(_2039, cbSceneParam._m0[62u].z, fma(_2035, cbSceneParam._m0[62u].y, _2031 * cbSceneParam._m0[62u].x))) / _2247;
            float _2391 = isnan(cbSceneParam._m0[41u].w) ? _2387 : (isnan(_2387) ? cbSceneParam._m0[41u].w : max(_2387, cbSceneParam._m0[41u].w));
            float _2434 = (cbSceneParam._m0[33u].x - sqrt(((_2045 * _2045) + (_2044 * _2044)) + (_2046 * _2046))) * cbSceneParam._m0[33u].y;
            float _4576 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
            float _2441 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2248, cbSceneParam._m0[33u].w + _2249), _2391), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2248, _2249 - cbSceneParam._m0[33u].z), _2391), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2248 - cbSceneParam._m0[33u].z, _2249 - cbSceneParam._m0[33u].w), _2391), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2248 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2249), _2391), 0.0)).x), vec4(0.25)));
            float _2445 = 1.0 - (_2441 * cbSceneParam._m0[34u].x);
            float _2446 = 1.0 - (_2441 * cbSceneParam._m0[34u].y);
            float _2447 = 1.0 - (_2441 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2447) ? _2195 : (isnan(_2195) ? _2447 : min(_2195, _2447));
            frontier_phi_37_36_ladder_1 = isnan(_2446) ? _2194 : (isnan(_2194) ? _2446 : min(_2194, _2446));
            frontier_phi_37_36_ladder_2 = isnan(_2445) ? _2193 : (isnan(_2193) ? _2445 : min(_2193, _2445));
        }
        else
        {
            frontier_phi_37_36_ladder = _2195;
            frontier_phi_37_36_ladder_1 = _2194;
            frontier_phi_37_36_ladder_2 = _2193;
        }
        _2259 = frontier_phi_37_36_ladder_2;
        _2261 = frontier_phi_37_36_ladder_1;
        _2263 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2259 = _2193;
        _2261 = _2194;
        _2263 = _2195;
    }
    uvec4 _2268 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2270 = _2268.x * 14u;
    uint _2271 = _2270 + 13u;
    float _2278 = _938 + (-1.0);
    float _2283 = (cbLight._m0[_2271].x * _2278) + 1.0;
    float _2284 = (cbLight._m0[_2271].y * _2278) + 1.0;
    float _2285 = (cbLight._m0[_2271].z * _2278) + 1.0;
    float _2286 = (cbLight._m0[_2271].w * _2278) + 1.0;
    uint _2287 = _2270 + 5u;
    float _2293 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
    uint _2297 = _2270 + 4u;
    float _2306 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
    uint _2310 = _2270 | 1u;
    float _2321 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_760, _761, _762));
    float _2324 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_760, _761, _762));
    float _4612 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _4623 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2329 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * 0.3183098733425140380859375;
    float _2331 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * 0.3183098733425140380859375;
    float _2338 = ((cbLight._m0[_2287].x * _2293) * _2331) + (((cbLight._m0[_2297].x * _2259) * _2306) * _2329);
    float _2339 = ((_2293 * cbLight._m0[_2287].y) * _2331) + (((cbLight._m0[_2297].y * _2261) * _2306) * _2329);
    float _2340 = ((_2293 * cbLight._m0[_2287].z) * _2331) + (((cbLight._m0[_2297].z * _2263) * _2306) * _2329);
    uvec4 _2344 = floatBitsToUint(cbLight._m0[_2270 + 12u]);
    bool _2346 = _2344.x == 0u;
    float _2448;
    float _2450;
    float _2452;
    if (_2346)
    {
        _2448 = _2338;
        _2450 = _2339;
        _2452 = _2340;
    }
    else
    {
        uint _2456 = _2270 + 6u;
        float _2472 = (dot(vec3(cbLight._m0[_2270 + 2u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2473 = _2472 * _2472;
        float _4634 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2474 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2475 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        _2448 = (((cbLight._m0[_2456].x * 0.3183098733425140380859375) * _2474) * _2475) + _2338;
        _2450 = (((cbLight._m0[_2456].y * 0.3183098733425140380859375) * _2474) * _2475) + _2339;
        _2452 = (((cbLight._m0[_2456].z * 0.3183098733425140380859375) * _2474) * _2475) + _2340;
    }
    bool _2455 = _2344.y == 0u;
    float _2510;
    float _2512;
    float _2514;
    if (_2455)
    {
        _2510 = _2448;
        _2512 = _2450;
        _2514 = _2452;
    }
    else
    {
        uint _2683 = _2270 + 7u;
        float _2699 = (dot(vec3(cbLight._m0[_2270 + 3u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2700 = _2699 * _2699;
        float _4650 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2701 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2702 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2510 = (((cbLight._m0[_2683].x * 0.3183098733425140380859375) * _2701) * _2702) + _2448;
        _2512 = (((cbLight._m0[_2683].y * 0.3183098733425140380859375) * _2701) * _2702) + _2450;
        _2514 = (((cbLight._m0[_2683].z * 0.3183098733425140380859375) * _2701) * _2702) + _2452;
    }
    uint _2517 = _2270 + 8u;
    float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _763) * 0.949999988079071044921875);
    float _2531 = _2530 * _2530;
    float _2532 = cbLight._m0[_2270].x + _840;
    float _2533 = cbLight._m0[_2270].y + _841;
    float _2534 = cbLight._m0[_2270].z + _842;
    float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
    float _2539 = _2538 * _2532;
    float _2540 = _2538 * _2533;
    float _2541 = _2538 * _2534;
    float _2542 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2270].xyz));
    float _4666 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2545 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _4677 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _2546 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _2547 = dot(vec3(_760, _761, _762), vec3(_2539, _2540, _2541));
    float _4688 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2550 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _2551 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2539, _2540, _2541));
    float _4699 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2555 = _2531 * _2531;
    float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
    float _2567 = exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0);
    float _2568 = 0.959999978542327880859375 - _919;
    float _2570 = 0.959999978542327880859375 - _920;
    float _2571 = 0.959999978542327880859375 - _921;
    float _2578 = 1.0 - _2531;
    float _2589 = (0.5 / (((_2546 * ((_2545 * _2578) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2546 * _2578) + _2531) * _2545))) * _2545;
    float _4710 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2591 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
    uint _2605 = _2270 + 9u;
    float _2616 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _763) * 0.949999988079071044921875);
    float _2617 = _2616 * _2616;
    float _2618 = cbLight._m0[_2310].x + _840;
    float _2619 = cbLight._m0[_2310].y + _841;
    float _2620 = cbLight._m0[_2310].z + _842;
    float _2624 = inversesqrt(dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620)));
    float _2625 = _2624 * _2618;
    float _2626 = _2624 * _2619;
    float _2627 = _2624 * _2620;
    float _2628 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2310].xyz));
    float _4721 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2631 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2632 = dot(vec3(_760, _761, _762), vec3(_2625, _2626, _2627));
    float _4732 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2635 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2636 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2625, _2626, _2627));
    float _4743 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2640 = _2617 * _2617;
    float _2644 = ((_2635 * _2635) * (_2640 + (-1.0))) + 1.0;
    float _2651 = exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0);
    float _2658 = 1.0 - _2617;
    float _2668 = (0.5 / (((_2546 * ((_2631 * _2658) + _2617)) + 9.9999999392252902907785028219223e-09) + (((_2546 * _2658) + _2617) * _2631))) * _2631;
    float _4754 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2670 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2640 / ((_2644 * _2644) * 3.141590118408203125));
    float _2680 = (((((_2651 * _2568) + _922) * cbLight._m0[_2605].x) * _2670) * _2293) + ((((cbLight._m0[_2517].x * _2259) * ((_2567 * _2568) + _922)) * _2591) * _2306);
    float _2681 = (((((_2651 * _2570) + _924) * cbLight._m0[_2605].y) * _2670) * _2293) + ((((cbLight._m0[_2517].y * _2261) * ((_2567 * _2570) + _924)) * _2591) * _2306);
    float _2682 = (((((_2651 * _2571) + _925) * cbLight._m0[_2605].z) * _2670) * _2293) + ((((cbLight._m0[_2517].z * _2263) * ((_2567 * _2571) + _925)) * _2591) * _2306);
    float _2738;
    float _2740;
    float _2742;
    if (_2346)
    {
        _2738 = _2680;
        _2740 = _2681;
        _2742 = _2682;
    }
    else
    {
        uint _2744 = _2270 + 2u;
        uint _2748 = _2270 + 10u;
        float _2762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2744].w)) * _763) * 0.949999988079071044921875);
        float _2763 = _2762 * _2762;
        float _2764 = cbLight._m0[_2744].x + _840;
        float _2765 = cbLight._m0[_2744].y + _841;
        float _2766 = cbLight._m0[_2744].z + _842;
        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
        float _2771 = _2770 * _2764;
        float _2772 = _2770 * _2765;
        float _2773 = _2770 * _2766;
        float _2774 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2744].xyz));
        float _4765 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2777 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _2778 = dot(vec3(_760, _761, _762), vec3(_2771, _2772, _2773));
        float _4776 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2781 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
        float _2782 = dot(vec3(cbLight._m0[_2744].xyz), vec3(_2771, _2772, _2773));
        float _4787 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2786 = _2763 * _2763;
        float _2790 = ((_2781 * _2781) * (_2786 + (-1.0))) + 1.0;
        float _2797 = exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0);
        float _2804 = 1.0 - _2763;
        float _2814 = (0.5 / (((_2546 * ((_2777 * _2804) + _2763)) + 9.9999999392252902907785028219223e-09) + (((_2546 * _2804) + _2763) * _2777))) * _2777;
        float _4798 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2816 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2786 / ((_2790 * _2790) * 3.141590118408203125));
        float _2817 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        _2738 = (((((_2797 * _2568) + _922) * cbLight._m0[_2748].x) * _2816) * _2817) + _2680;
        _2740 = (((((_2797 * _2570) + _924) * cbLight._m0[_2748].y) * _2816) * _2817) + _2681;
        _2742 = (((((_2797 * _2571) + _925) * cbLight._m0[_2748].z) * _2816) * _2817) + _2682;
    }
    float _2848;
    float _2850;
    float _2852;
    if (_2455)
    {
        _2848 = _2738;
        _2850 = _2740;
        _2852 = _2742;
    }
    else
    {
        uint _2859 = _2270 + 3u;
        uint _2863 = _2270 + 11u;
        float _2877 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2859].w)) * _763) * 0.949999988079071044921875);
        float _2878 = _2877 * _2877;
        float _2879 = cbLight._m0[_2859].x + _840;
        float _2880 = cbLight._m0[_2859].y + _841;
        float _2881 = cbLight._m0[_2859].z + _842;
        float _2885 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
        float _2886 = _2885 * _2879;
        float _2887 = _2885 * _2880;
        float _2888 = _2885 * _2881;
        float _2889 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2859].xyz));
        float _4814 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2892 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2893 = dot(vec3(_760, _761, _762), vec3(_2886, _2887, _2888));
        float _4825 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        float _2896 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2897 = dot(vec3(cbLight._m0[_2859].xyz), vec3(_2886, _2887, _2888));
        float _4836 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2901 = _2878 * _2878;
        float _2905 = ((_2896 * _2896) * (_2901 + (-1.0))) + 1.0;
        float _2912 = exp2(log2(1.0 - (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) * 5.0);
        float _2919 = 1.0 - _2878;
        float _2929 = (0.5 / (((_2546 * ((_2892 * _2919) + _2878)) + 9.9999999392252902907785028219223e-09) + (((_2546 * _2919) + _2878) * _2892))) * _2892;
        float _4847 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2931 = (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2901 / ((_2905 * _2905) * 3.141590118408203125));
        float _2932 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2848 = (((((_2912 * _2568) + _922) * cbLight._m0[_2863].x) * _2931) * _2932) + _2738;
        _2850 = (((((_2912 * _2570) + _924) * cbLight._m0[_2863].y) * _2931) * _2932) + _2740;
        _2852 = (((((_2912 * _2571) + _925) * cbLight._m0[_2863].z) * _2931) * _2932) + _2742;
    }
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    if (_2268.y == 0u)
    {
        uvec4 _2953 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2954 = _2953.x;
        uint _2965 = uint((float(_2953.y) * floor(float(uint(cbSceneParam._m0[85u].y * _861) / _2954))) + floor(float(uint(cbSceneParam._m0[85u].x * _860) / _2954)));
        float _2975 = (log2(_2046 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2976 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        uint _2979 = uint(isnan(14.0) ? _2976 : (isnan(_2976) ? 14.0 : min(_2976, 14.0)));
        uvec4 _2984 = texelFetch(g_lightClusterGridBuffer, int(((_2979 << 2u) + (_2965 << 6u)) >> 2u));
        uint _2985 = _2984.x;
        uint _2986 = _2953.z;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        if (((((1u << ((_2986 >> 4u) & 15u)) + 4294967295u) & _2985) == 0u) || ((_2986 & 240u) == 0u))
        {
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
        }
        else
        {
            float _3066;
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            uint _3224 = 0u;
            uint _3233;
            bool _3234;
            for (;;)
            {
                _3233 = texelFetch(g_lightClassification, int((((_2979 << 5u) + (_2965 << 9u)) + (_3224 << 2u)) >> 2u)).x;
                _3234 = _3233 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3234)
                {
                    frontier_phi_71_pred = _3223;
                    frontier_phi_71_pred_1 = _3222;
                    frontier_phi_71_pred_2 = _3221;
                    frontier_phi_71_pred_3 = _3220;
                    frontier_phi_71_pred_4 = _3219;
                    frontier_phi_71_pred_5 = _3218;
                }
                else
                {
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    uint _3369;
                    _3363 = _3218;
                    _3364 = _3219;
                    _3365 = _3220;
                    _3366 = _3221;
                    _3367 = _3222;
                    _3368 = _3223;
                    _3369 = _3233;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    for (;;)
                    {
                        uint _3373 = uint(findLSB(_3369)) + (_3224 << 5u);
                        uint _3370 = (_3369 + 4294967295u) & _3369;
                        uint _3375 = _3373 * 48u;
                        vec4 _3389 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 3u)).x));
                        uint _3395 = (_3373 * 48u) + 4u;
                        vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3395)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 3u)).x));
                        uint _3414 = (_3373 * 48u) + 8u;
                        vec3 _3425 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3414)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 2u)).x));
                        float _3429 = _3389.x - _2044;
                        float _3430 = _3389.y - _2045;
                        float _3431 = _3389.z - _2046;
                        float _3432 = dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431));
                        float _3435 = inversesqrt(_3432);
                        float _3436 = _3435 * _3429;
                        float _3437 = _3435 * _3430;
                        float _3438 = _3435 * _3431;
                        float _3439 = dot(vec3(_879, _882, _885), vec3(_3436, _3437, _3438));
                        float _3444 = 1.0 - (_3432 * _3389.w);
                        float _4873 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3445 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                        float _3446 = sqrt(_3432) * _3408.w;
                        float _3449 = 1.39999997615814208984375 / (_3446 + 1.39999997615814208984375);
                        float _3450 = _3449 * _3449;
                        float _3453 = ((1.0 - _3450) * _3439) + _3450;
                        float _3456 = _3446 * _3446;
                        float _3460 = ((isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0))) * _3445) / ((_3456 * 0.699999988079071044921875) + 1.0);
                        float _3464 = (-0.0) - _2044;
                        float _3465 = (-0.0) - _2045;
                        float _3466 = (-0.0) - _2046;
                        float _3470 = inversesqrt(dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466)));
                        float _3471 = _3470 * _3464;
                        float _3472 = _3470 * _3465;
                        float _3473 = _3470 * _3466;
                        float _3480 = exp2(log2(1.0 / ((_3456 * 3.5) + 5.0)) * 0.25);
                        float _3481 = 1.0 - _954;
                        float _3488 = sqrt(1.0 - ((1.0 - (_3481 * _3481)) * (1.0 - (_3480 * _3480))));
                        float _3489 = _3488 * _3488;
                        float _3490 = _3489 * _3489;
                        float _3491 = _3471 + _3436;
                        float _3492 = _3472 + _3437;
                        float _3493 = _3473 + _3438;
                        float _3497 = inversesqrt(dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493)));
                        float _3501 = dot(vec3(_879, _882, _885), vec3(_3471, _3472, _3473));
                        float _4889 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3504 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3505 = dot(vec3(_879, _882, _885), vec3(_3497 * _3491, _3497 * _3492, _3497 * _3493));
                        float _4900 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3508 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                        float _3512 = ((_3508 * _3508) * (_3490 + (-1.0))) + 1.0;
                        float _3513 = _3449 * _3489;
                        float _3514 = _3513 * _3513;
                        float _3517 = ((1.0 - _3514) * _3439) + _3514;
                        float _4911 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                        float _3518 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                        float _3519 = 1.0 - _3489;
                        float _3529 = (0.5 / (((_3518 * ((_3504 * _3519) + _3489)) + 9.9999999392252902907785028219223e-09) + (((_3518 * _3519) + _3489) * _3504))) * _3518;
                        float _4922 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3540 = (((_3490 * 3.1415927410125732421875) * (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) / ((_3512 * _3512) * ((_3456 * 2.1991131305694580078125) + 3.141590118408203125))) * _3445;
                        _3293 = (_3460 * _3408.x) + _3366;
                        _3294 = (_3460 * _3408.y) + _3367;
                        _3295 = (_3460 * _3408.z) + _3368;
                        _3290 = (_3540 * _3425.x) + _3363;
                        _3291 = (_3540 * _3425.y) + _3364;
                        _3292 = (_3540 * _3425.z) + _3365;
                        if (_3370 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3363 = _3290;
                            _3364 = _3291;
                            _3365 = _3292;
                            _3366 = _3293;
                            _3367 = _3294;
                            _3368 = _3295;
                            _3369 = _3370;
                        }
                    }
                    frontier_phi_71_pred = _3295;
                    frontier_phi_71_pred_1 = _3294;
                    frontier_phi_71_pred_2 = _3293;
                    frontier_phi_71_pred_3 = _3292;
                    frontier_phi_71_pred_4 = _3291;
                    frontier_phi_71_pred_5 = _3290;
                }
                _3076 = frontier_phi_71_pred;
                _3074 = frontier_phi_71_pred_1;
                _3072 = frontier_phi_71_pred_2;
                _3070 = frontier_phi_71_pred_3;
                _3068 = frontier_phi_71_pred_4;
                _3066 = frontier_phi_71_pred_5;
                uint _3225 = _3224 + 1u;
                if (_3225 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3218 = _3066;
                    _3219 = _3068;
                    _3220 = _3070;
                    _3221 = _3072;
                    _3222 = _3074;
                    _3223 = _3076;
                    _3224 = _3225;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
        }
        uvec4 _3079 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3080 = _3079.z;
        uint _3082 = (_3080 >> 8u) & 15u;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        if (((4294967295u << _3082) & _2985) == 0u)
        {
            _3186 = _3065;
            _3188 = _3067;
            _3190 = _3069;
            _3192 = _3071;
            _3194 = _3073;
            _3196 = _3075;
        }
        else
        {
            float _3211 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
            float _3212 = _3211 * _2044;
            float _3213 = _3211 * _2045;
            float _3214 = _3211 * _2046;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3082 < ((_3080 >> 12u) & 15u))
            {
                float _3187;
                float _3189;
                float _3191;
                float _3193;
                float _3195;
                float _3197;
                float _3346 = _3065;
                float _3347 = _3067;
                float _3348 = _3069;
                float _3349 = _3071;
                float _3350 = _3073;
                float _3351 = _3075;
                uint _3352 = _3082;
                uint _3361;
                bool _3362;
                for (;;)
                {
                    _3361 = texelFetch(g_lightClassification, int((((_2979 << 5u) + (_2965 << 9u)) + (_3352 << 2u)) >> 2u)).x;
                    _3362 = _3361 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3362)
                    {
                        frontier_phi_82_pred = _3351;
                        frontier_phi_82_pred_1 = _3350;
                        frontier_phi_82_pred_2 = _3349;
                        frontier_phi_82_pred_3 = _3348;
                        frontier_phi_82_pred_4 = _3347;
                        frontier_phi_82_pred_5 = _3346;
                    }
                    else
                    {
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3567 = _3346;
                        float _3568 = _3347;
                        float _3569 = _3348;
                        float _3570 = _3349;
                        float _3571 = _3350;
                        float _3572 = _3351;
                        uint _3573 = _3361;
                        uint _3574;
                        vec4 _3599;
                        float _3600;
                        vec4 _3615;
                        vec3 _3627;
                        vec4 _3642;
                        vec4 _3657;
                        float _3703;
                        bool _3704;
                        for (;;)
                        {
                            uint _3584 = ((_3352 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3573));
                            _3574 = (_3573 + 4294967295u) & _3573;
                            uint _3586 = _3584 * 40u;
                            _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            _3600 = _3599.w;
                            uint _3602 = (_3584 * 40u) + 4u;
                            _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3617 = (_3584 * 40u) + 8u;
                            _3627 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x));
                            uint _3629 = (_3584 * 40u) + 16u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3644 = (_3584 * 40u) + 20u;
                            _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            uint _3659 = (_3584 * 40u) + 24u;
                            vec4 _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3678 = (_3584 * 40u) + 28u;
                            vec4 _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            _3703 = fma(_2046, _3691.z, fma(_2045, _3691.y, _3691.x * _2044)) + _3691.w;
                            _3704 = !((fma(_2046, _3672.z, fma(_2045, _3672.y, _3672.x * _2044)) + _3672.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3704)
                            {
                                float _3731 = _3599.x - _2044;
                                float _3732 = _3599.y - _2045;
                                float _3733 = _3599.z - _2046;
                                float _3734 = dot(vec3(_3731, _3732, _3733), vec3(_3731, _3732, _3733));
                                float _3737 = inversesqrt(_3734);
                                float _3738 = _3737 * _3731;
                                float _3739 = _3737 * _3732;
                                float _3740 = _3737 * _3733;
                                float _3744 = 1.0 - (_3734 / (_3600 * _3600));
                                float _4933 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3745 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                                float _3749 = sqrt(_3734) * _3615.w;
                                float _3751 = 1.39999997615814208984375 / (_3749 + 1.39999997615814208984375);
                                float _3752 = _3751 * _3751;
                                float _3755 = ((1.0 - _3752) * dot(vec3(_3738, _3739, _3740), vec3(_879, _882, _885))) + _3752;
                                float _3758 = _3749 * _3749;
                                float _3762 = (fma(_2046, _3642.z, fma(_2045, _3642.y, _3642.x * _2044)) + _3642.w) / _3703;
                                float _3763 = (fma(_2046, _3657.z, fma(_2045, _3657.y, _3657.x * _2044)) + _3657.w) / _3703;
                                float _3767 = 1.0 - dot(vec2(_3762, _3763), vec2(_3762, _3763));
                                float _4949 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3768 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3769 = _3768 * (((isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0))) * _3745) / ((_3758 * 0.699999988079071044921875) + 1.0));
                                float _3781 = exp2(log2(1.0 / ((_3758 * 3.5) + 5.0)) * 0.25);
                                float _3782 = 1.0 - _954;
                                float _3789 = sqrt(1.0 - ((1.0 - (_3782 * _3782)) * (1.0 - (_3781 * _3781))));
                                float _3790 = _3789 * _3789;
                                float _3791 = _3790 * _3790;
                                float _3792 = _3738 - _3212;
                                float _3793 = _3739 - _3213;
                                float _3794 = _3740 - _3214;
                                float _3798 = inversesqrt(dot(vec3(_3792, _3793, _3794), vec3(_3792, _3793, _3794)));
                                float _3802 = dot(vec3(_879, _882, _885), vec3((-0.0) - _3212, (-0.0) - _3213, (-0.0) - _3214));
                                float _4960 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3805 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3806 = dot(vec3(_879, _882, _885), vec3(_3798 * _3792, _3798 * _3793, _3798 * _3794));
                                float _4971 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3809 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3813 = ((_3809 * _3809) * (_3791 + (-1.0))) + 1.0;
                                float _3814 = _3751 * _3790;
                                float _3815 = _3814 * _3814;
                                float _3821 = ((1.0 - _3815) * dot(vec3(_879, _882, _885), vec3(_3738, _3739, _3740))) + _3815;
                                float _4982 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3822 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                                float _3823 = 1.0 - _3790;
                                float _3833 = (0.5 / (((_3822 * ((_3805 * _3823) + _3790)) + 9.9999999392252902907785028219223e-09) + (((_3822 * _3823) + _3790) * _3805))) * _3822;
                                float _4993 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3843 = (_3768 * _3745) * (((_3791 * 3.1415927410125732421875) * (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0)))) / ((_3813 * _3813) * ((_3758 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3769 * _3615.z;
                                frontier_phi_88_pred_1 = _3769 * _3615.y;
                                frontier_phi_88_pred_2 = _3769 * _3615.x;
                                frontier_phi_88_pred_3 = _3843 * _3627.z;
                                frontier_phi_88_pred_4 = _3843 * _3627.y;
                                frontier_phi_88_pred_5 = _3843 * _3627.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3852 = frontier_phi_88_pred;
                            _3851 = frontier_phi_88_pred_1;
                            _3850 = frontier_phi_88_pred_2;
                            _3849 = frontier_phi_88_pred_3;
                            _3848 = frontier_phi_88_pred_4;
                            _3847 = frontier_phi_88_pred_5;
                            _3557 = _3850 + _3570;
                            _3558 = _3851 + _3571;
                            _3559 = _3852 + _3572;
                            _3554 = _3847 + _3567;
                            _3555 = _3848 + _3568;
                            _3556 = _3849 + _3569;
                            if (_3574 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3574;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3559;
                        frontier_phi_82_pred_1 = _3558;
                        frontier_phi_82_pred_2 = _3557;
                        frontier_phi_82_pred_3 = _3556;
                        frontier_phi_82_pred_4 = _3555;
                        frontier_phi_82_pred_5 = _3554;
                    }
                    _3197 = frontier_phi_82_pred;
                    _3195 = frontier_phi_82_pred_1;
                    _3193 = frontier_phi_82_pred_2;
                    _3191 = frontier_phi_82_pred_3;
                    _3189 = frontier_phi_82_pred_4;
                    _3187 = frontier_phi_82_pred_5;
                    uint _3353 = _3352 + 1u;
                    if (_3353 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3346 = _3187;
                        _3347 = _3189;
                        _3348 = _3191;
                        _3349 = _3193;
                        _3350 = _3195;
                        _3351 = _3197;
                        _3352 = _3353;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3193;
                frontier_phi_63_64_ladder_1 = _3197;
                frontier_phi_63_64_ladder_2 = _3195;
                frontier_phi_63_64_ladder_3 = _3191;
                frontier_phi_63_64_ladder_4 = _3189;
                frontier_phi_63_64_ladder_5 = _3187;
            }
            else
            {
                frontier_phi_63_64_ladder = _3071;
                frontier_phi_63_64_ladder_1 = _3075;
                frontier_phi_63_64_ladder_2 = _3073;
                frontier_phi_63_64_ladder_3 = _3069;
                frontier_phi_63_64_ladder_4 = _3067;
                frontier_phi_63_64_ladder_5 = _3065;
            }
            _3186 = frontier_phi_63_64_ladder_5;
            _3188 = frontier_phi_63_64_ladder_4;
            _3190 = frontier_phi_63_64_ladder_3;
            _3192 = frontier_phi_63_64_ladder;
            _3194 = frontier_phi_63_64_ladder_2;
            _3196 = frontier_phi_63_64_ladder_1;
        }
        float _3201 = isnan(1.0) ? _938 : (isnan(_938) ? 1.0 : min(_938, 1.0));
        _2998 = (_3201 * _3192) + _2510;
        _3000 = (_3201 * _3194) + _2512;
        _3002 = (_3201 * _3196) + _2514;
        _3004 = ((_3186 * _922) * _3201) + _2848;
        _3006 = ((_3188 * _924) * _3201) + _2850;
        _3008 = ((_3190 * _925) * _3201) + _2852;
    }
    else
    {
        _2998 = _2510;
        _3000 = _2512;
        _3002 = _2514;
        _3004 = _2848;
        _3006 = _2850;
        _3008 = _2852;
    }
    float _5009 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _5020 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _5031 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _3025 = ((isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_2998 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _938))) + ((_3004 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1776)) * cbPerFrame._m0[3u].x);
    float _3026 = ((isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_3000 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _938))) + ((_3006 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1776)) * cbPerFrame._m0[3u].x);
    float _3027 = ((isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0))) * (_3002 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _938))) + ((_3008 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1776)) * cbPerFrame._m0[3u].x);
    uint _3028 = _250 + 6u;
    float _3036 = _860 / cbSceneParam._m0[86u].x;
    float _3037 = _861 / cbSceneParam._m0[86u].y;
    vec4 _3051 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3036, _3037, (log2((isnan(cbSceneParam._m0[77u].w) ? _782 : (isnan(_782) ? cbSceneParam._m0[77u].w : min(_782, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3053 = _3051.x;
    float _3054 = _3051.y;
    float _3055 = _3051.z;
    float _3056 = _3051.w;
    float _3128;
    float _3130;
    float _3132;
    float _3134;
    if (_782 > cbSceneParam._m0[78u].w)
    {
        float _3090 = isnan(_782) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _782 : min(cbSceneParam._m0[80u].w, _782));
        float _3091 = _3090 / _782;
        float _3102 = _3091 * _833;
        float _3103 = _834 * _3091;
        float _3104 = (-0.0) - _3103;
        float _3106 = _3091 * _835;
        float _3108 = (cbSceneParam._m0[77u].w * _3104) / _3090;
        float _3109 = _3108 + cbSceneParam._m0[79u].w;
        float _3110 = cbSceneParam._m0[79u].w - _3103;
        float _3116 = sqrt(((_3102 * _3102) + (_3103 * _3103)) + (_3106 * _3106));
        float _3119 = (1.0 - (cbSceneParam._m0[77u].w / _3090)) * _3116;
        float _3124 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3126 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3303;
        if (abs((_3104 - _3108) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3303 = ((((_3109 > 0.0) ? exp2(_3124 * _3109) : (2.0 - exp2(_3126 * _3109))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3119;
        }
        else
        {
            float _3247 = 1.0 / cbSceneParam._m0[80u].x;
            float _3248 = isnan(_3110) ? _3109 : (isnan(_3109) ? _3110 : max(_3109, _3110));
            float _3249 = isnan(_3110) ? _3109 : (isnan(_3109) ? _3110 : min(_3109, _3110));
            float _3258 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : min(_3248, 0.0));
            float _3259 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : min(_3249, 0.0));
            _3303 = ((abs(_3116 / _3104) * cbSceneParam._m0[80u].y) * ((((_3258 - _3259) * 2.0) - ((exp2(_3124 * (isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0)))) - exp2(_3124 * (isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0))))) * _3247)) - ((exp2(_3126 * _3258) - exp2(_3126 * _3259)) * _3247))) + (_3119 * cbSceneParam._m0[80u].z);
        }
        vec4 _3305 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3036, _3037, 1.0), 0.0);
        float _3314 = exp2((_3303 * (-1.44269502162933349609375)) * (1.0 - _3305.w));
        float _3315 = log2(_3314);
        float _3331 = log2(_3056);
        _3128 = (exp2(_3331 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3315 * cbSceneParam._m0[78u].x)) * _3305.x) / cbSceneParam._m0[78u].x)) + _3053;
        _3130 = (exp2(_3331 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3315 * cbSceneParam._m0[78u].y)) * _3305.y) / cbSceneParam._m0[78u].y)) + _3054;
        _3132 = (exp2(_3331 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3315 * cbSceneParam._m0[78u].z)) * _3305.z) / cbSceneParam._m0[78u].z)) + _3055;
        _3134 = _3314 * _3056;
    }
    else
    {
        _3128 = _3053;
        _3130 = _3054;
        _3132 = _3055;
        _3134 = _3056;
    }
    bool _3341;
    vec4 _3144;
    vec4 _3166;
    float _3168;
    float _3172;
    float _3173;
    float _3174;
    float _3175;
    bool _3185;
    for (;;)
    {
        _3144 = cbMatDynParam._m0[0u];
        float _3146 = roundEven(_3144.y);
        bool _3147 = _3146 == 3.0;
        float _3148 = log2(_3134);
        float _3155 = exp2(_3148 * cbSceneParam._m0[78u].x) * _3025;
        float _3156 = exp2(_3148 * cbSceneParam._m0[78u].y) * _3026;
        float _3157 = exp2(_3148 * cbSceneParam._m0[78u].z) * _3027;
        float _3164 = _849 + (-0.5);
        _3166 = cbMtdParam._m0[1u];
        _3168 = _3166.y * _3164;
        float _3171 = (_3146 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3172 = _3171 * (_3147 ? _3155 : (_3155 + (cbSceneParam._m0[72u].w * _3128)));
        _3173 = _3171 * (_3147 ? _3156 : (_3156 + (cbSceneParam._m0[72u].w * _3130)));
        _3174 = _3171 * (_3147 ? _3157 : (_3157 + (cbSceneParam._m0[72u].w * _3132)));
        _3175 = _3164 * 0.999000012874603271484375;
        _3185 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3185)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _3175) < 0.5)
            {
                _3341 = true;
                break;
            }
        }
        uint _3282 = _898 + uint(_3144.w);
        if ((cbInstanceData._m0[_3282].w < 1.0) && ((cbInstanceData._m0[_3282].w + _3175) < 0.5))
        {
            _3341 = true;
            break;
        }
        if ((_3168 + 1.0) < _3166.x)
        {
            _3341 = true;
            break;
        }
        _3341 = false;
        break;
    }
    float _3545;
    if (_3341)
    {
        discard_state = true;
        _3545 = 0.0;
    }
    else
    {
        _3545 = cbInstanceData._m0[_3028].w;
    }
    SV_Target.x = _3172;
    SV_Target.y = _3173;
    SV_Target.z = _3174;
    SV_Target.w = _3545;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3028].w;
    discard_exit();
}


