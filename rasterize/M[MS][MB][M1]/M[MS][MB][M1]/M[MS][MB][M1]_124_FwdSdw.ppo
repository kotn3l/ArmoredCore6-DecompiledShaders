#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1179;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _360 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _360) * cbMtdParam._m0[24u].y) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3788 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _385 = (_378 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _386 = (_378 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _387 = (_378 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    float _456 = ((_426.z - _447) * _378) + _447;
    float _459 = ((((_426.x - _445) * _378) + _445) * 2.0) + (-1.0);
    float _461 = ((((_426.y - _446) * _378) + _446) * 2.0) + (-1.0);
    float _462 = dot(vec2(_459, _461), vec2(_459, _461));
    float _3799 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = sqrt(1.0 - (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))));
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _500 = _498.x;
    float _501 = 1.0 - _500;
    float _514 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_500 - _501) * cbMtdParam._m0[24u].z) + _501) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3810 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _522 = (_515 * ((_406.x * cbMtdParam._m0[18u].x) - _385)) + _385;
    float _523 = (_515 * ((_406.y * cbMtdParam._m0[18u].y) - _386)) + _386;
    float _524 = (_515 * ((_406.z * cbMtdParam._m0[18u].z) - _387)) + _387;
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _550 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _552 = _550.x;
    float _570 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _552) * _378) + _552;
    float _574 = ((_536.x - _570) * cbMtdParam._m0[19u].z) + _570;
    float _576 = _574 - (_574 * _515);
    vec4 _589 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _596 = (_589.x * 2.0) + (-1.0);
    float _597 = (_589.y * 2.0) + (-1.0);
    float _598 = dot(vec2(_596, _597), vec2(_596, _597));
    float _3821 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _606 = (_515 * (_589.z - _456)) + _456;
    float _618 = (((_596 - _459) + (cbMtdParam._m0[21u].x * _459)) * _515) + _459;
    float _619 = (((_597 - _461) + (cbMtdParam._m0[21u].x * _461)) * _515) + _461;
    float _620 = (_515 * (sqrt(1.0 - (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) - _467)) + _467;
    float _625 = cbMtdParam._m0[22u].x + _480.w;
    float _628 = fma(_620, _227 * NORMAL.x, fma(_619, _234 * TANGENT.x, (_220 * _212) * _618));
    float _631 = fma(_620, _227 * NORMAL.y, fma(_619, _234 * TANGENT.y, (_220 * _213) * _618));
    float _634 = fma(_620, _227 * NORMAL.z, fma(_619, _234 * TANGENT.z, (_220 * _214) * _618));
    float _638 = inversesqrt(dot(vec3(_628, _631, _634), vec3(_628, _631, _634)));
    float _639 = _638 * _628;
    float _640 = _638 * _631;
    float _641 = _638 * _634;
    float _3832 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _642 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3854 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3865 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3876 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _3887 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _647 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _661 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _712 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _702);
    float _713 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _702);
    float _714 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _702);
    float _718 = inversesqrt(dot(vec3(_712, _713, _714), vec3(_712, _713, _714)));
    float _719 = _712 * _718;
    float _720 = _713 * _718;
    float _721 = _714 * _718;
    float _727 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _728 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _746 = fma(_641, cbSceneParam._m0[5u].z, fma(_640, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _639));
    float _749 = fma(_641, cbSceneParam._m0[6u].z, fma(_640, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _639));
    float _752 = fma(_641, cbSceneParam._m0[7u].z, fma(_640, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _639));
    uint _766 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _772 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * cbInstanceData._m0[_766].x;
    float _773 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * cbInstanceData._m0[_766].y;
    float _774 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * cbInstanceData._m0[_766].z;
    float _3898 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _778 = 1.0 - _647;
    float _779 = _775 * _778;
    float _780 = _776 * _778;
    float _781 = _777 * _778;
    float _786 = (_775 + (-0.039999999105930328369140625)) * _647;
    float _787 = (_776 + (-0.039999999105930328369140625)) * _647;
    float _788 = (_777 + (-0.039999999105930328369140625)) * _647;
    float _789 = _786 + 0.039999999105930328369140625;
    float _791 = _787 + 0.039999999105930328369140625;
    float _792 = _788 + 0.039999999105930328369140625;
    vec4 _801 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _727, cbSceneParam._m0[86u].y * _728));
    float _805 = ((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * TEXCOORD_5.w) * _801.x;
    float _806 = dot(vec3(_639, _640, _641), vec3(_719, _720, _721));
    float _809 = _806 * 2.0;
    float _813 = (_809 * _639) - _719;
    float _814 = (_809 * _640) - _720;
    float _815 = (_809 * _641) - _721;
    float _819 = abs(dot(vec3(_719, _720, _721), vec3(_639, _640, _641)));
    float _3931 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _821 = sqrt(_642);
    float _834 = exp2((_821 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_821 * 3.0));
    float _840 = (1.0 - _834) * ((_821 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _841 = _834 * _821;
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1178;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _903 = fma(_877, cbModelParam._m0[26u].z, fma(_873, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _869));
        float _907 = fma(_877, cbModelParam._m0[27u].z, fma(_873, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _869));
        float _911 = fma(_877, cbModelParam._m0[28u].z, fma(_873, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _869));
        float _936 = _869 + _639;
        float _937 = _873 + _640;
        float _938 = _877 + _641;
        float _948 = fma(_938, cbModelParam._m0[26u].z, fma(_937, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _936)) - _903;
        float _949 = fma(_938, cbModelParam._m0[27u].z, fma(_937, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _936)) - _907;
        float _950 = fma(_938, cbModelParam._m0[28u].z, fma(_937, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _936)) - _911;
        float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
        float _967 = ((_954 * _948) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_903 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_954 * _949) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_907 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_954 * _950) / cbModelParam._m0[34u].z) + ((((((_911 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        float _1006 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_972.x + (-0.5));
        float _1008 = _1006 * (_972.y + (-0.5));
        float _1009 = _1006 * (_972.z + (-0.5));
        float _1016 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_979.x + (-0.5));
        float _1018 = _1016 * (_979.y + (-0.5));
        float _1019 = _1016 * (_979.z + (-0.5));
        float _1026 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_986.x + (-0.5));
        float _1028 = _1026 * (_986.y + (-0.5));
        float _1029 = _1026 * (_986.z + (-0.5));
        float _1036 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_993.x + (-0.5));
        float _1038 = _1036 * (_993.y + (-0.5));
        float _1039 = _1036 * (_993.z + (-0.5));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = _1007 * 0.5;
        float _1044 = _1017 * 0.5;
        float _1045 = _1027 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1060 = (dot(vec3(_639, _640, _641), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1070 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3979 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1072 + 1.0))) + _1077) * _1040;
        float _1087 = _1008 * 0.5;
        float _1088 = _1018 * 0.5;
        float _1089 = _1028 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_639, _640, _641), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _4012 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1114 + 1.0))) + _1119) * _1041;
        float _1129 = _1009 * 0.5;
        float _1130 = _1019 * 0.5;
        float _1131 = _1029 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_639, _640, _641), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _4045 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1156 + 1.0))) + _1161) * _1042;
        _1178 = _1009;
        _1180 = _1008;
        _1181 = _1007;
        _1182 = _1019;
        _1183 = _1018;
        _1184 = _1017;
        _1185 = _1029;
        _1186 = _1028;
        _1187 = _1027;
        _1188 = _1042;
        _1189 = _1041;
        _1190 = _1040;
        _1191 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
    }
    else
    {
        _1178 = _1179;
        _1180 = _1179;
        _1181 = _1179;
        _1182 = _1179;
        _1183 = _1179;
        _1184 = _1179;
        _1185 = _1179;
        _1186 = _1179;
        _1187 = _1179;
        _1188 = _1179;
        _1189 = _1179;
        _1190 = _1179;
        _1191 = 0.0;
        _1192 = 0.0;
        _1193 = 0.0;
    }
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1218 = fma(_877, cbModelParam._m0[30u].z, fma(_873, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _869));
        float _1222 = fma(_877, cbModelParam._m0[31u].z, fma(_873, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _869));
        float _1226 = fma(_877, cbModelParam._m0[32u].z, fma(_873, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _869));
        float _1249 = _869 + _639;
        float _1250 = _873 + _640;
        float _1251 = _877 + _641;
        float _1261 = fma(_1251, cbModelParam._m0[30u].z, fma(_1250, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1249)) - _1218;
        float _1262 = fma(_1251, cbModelParam._m0[31u].z, fma(_1250, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1249)) - _1222;
        float _1263 = fma(_1251, cbModelParam._m0[32u].z, fma(_1250, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1249)) - _1226;
        float _1267 = inversesqrt(dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263)));
        float _1280 = ((_1267 * _1261) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1218 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1267 * _1262) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1222 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1267 * _1263) / cbModelParam._m0[35u].z) + ((((((_1226 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        float _1317 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1284.x + (-0.5));
        float _1319 = _1317 * (_1284.y + (-0.5));
        float _1320 = _1317 * (_1284.z + (-0.5));
        float _1327 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1291.x + (-0.5));
        float _1329 = _1327 * (_1291.y + (-0.5));
        float _1330 = _1327 * (_1291.z + (-0.5));
        float _1337 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1298.x + (-0.5));
        float _1339 = _1337 * (_1298.y + (-0.5));
        float _1340 = _1337 * (_1298.z + (-0.5));
        float _1347 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1305.x + (-0.5));
        float _1349 = _1347 * (_1305.y + (-0.5));
        float _1350 = _1347 * (_1305.z + (-0.5));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = _1318 * 0.5;
        float _1355 = _1328 * 0.5;
        float _1356 = _1338 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_639, _640, _641), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4108 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1381 + 1.0))) + _1386) * _1351;
        float _1396 = _1319 * 0.5;
        float _1397 = _1329 * 0.5;
        float _1398 = _1339 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_639, _640, _641), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4141 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1423 + 1.0))) + _1428) * _1352;
        float _1438 = _1320 * 0.5;
        float _1439 = _1330 * 0.5;
        float _1440 = _1340 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_639, _640, _641), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4174 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1465 + 1.0))) + _1470) * _1353;
        _1487 = _1320;
        _1488 = _1319;
        _1489 = _1318;
        _1490 = _1330;
        _1491 = _1329;
        _1492 = _1328;
        _1493 = _1340;
        _1494 = _1339;
        _1495 = _1338;
        _1496 = _1353;
        _1497 = _1352;
        _1498 = _1351;
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
    }
    else
    {
        _1487 = _1179;
        _1488 = _1179;
        _1489 = _1179;
        _1490 = _1179;
        _1491 = _1179;
        _1492 = _1179;
        _1493 = _1179;
        _1494 = _1179;
        _1495 = _1179;
        _1496 = _1179;
        _1497 = _1179;
        _1498 = _1179;
        _1499 = 0.0;
        _1500 = 0.0;
        _1501 = 0.0;
    }
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1191)) + _1191;
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1192)) + _1192;
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1193)) + _1193;
    float _1534 = fma(_1513, cbSceneParam._m0[89u].z, fma(_1512, cbSceneParam._m0[89u].y, _1511 * cbSceneParam._m0[89u].x));
    float _1537 = fma(_1513, cbSceneParam._m0[90u].z, fma(_1512, cbSceneParam._m0[90u].y, _1511 * cbSceneParam._m0[90u].x));
    float _1540 = fma(_1513, cbSceneParam._m0[91u].z, fma(_1512, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1511));
    float _1555 = _813 * 0.5;
    float _1556 = _814 * 0.5;
    float _1557 = _815 * 0.5;
    float _1558 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1561 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1564 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1598;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1571 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1178, _1182, _1185, _1188));
        float _1575 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1180, _1183, _1186, _1189));
        float _1579 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1181, _1184, _1187, _1190));
        float _1586 = dot(vec4(cbModelParam._m0[39u]), vec4(_1555, _1556, _1557, 1.0));
        _1598 = dot(vec3(isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1586) ? 0.0 : (isnan(0.0) ? _1586 : max(0.0, _1586))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1598 = 1.0;
    }
    float _1609;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1600 = dot(vec4(cbModelParam._m0[40u]), vec4(_1555, _1556, _1557, 1.0));
        _1609 = dot(vec3(isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1600) ? 0.0 : (isnan(0.0) ? _1600 : max(0.0, _1600))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1609 = 1.0;
    }
    float _1613 = (_1609 * cbModelParam._m0[1u].x) + (_1598 * (1.0 - cbModelParam._m0[1u].x));
    float _1623 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _642);
    float _1624 = isnan(_1623) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1623 : min(cbModelParam._m0[25u].z, _1623));
    float _1704;
    float _1706;
    float _1708;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1671 = fma(_877, cbModelParam._m0[13u].z, fma(_873, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _869)) + cbModelParam._m0[13u].w;
        float _1675 = fma(_877, cbModelParam._m0[14u].z, fma(_873, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _869)) + cbModelParam._m0[14u].w;
        float _1679 = fma(_877, cbModelParam._m0[15u].z, fma(_873, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _869)) + cbModelParam._m0[15u].w;
        float _1682 = fma(_815, cbModelParam._m0[13u].z, fma(_814, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _813));
        float _1685 = fma(_815, cbModelParam._m0[14u].z, fma(_814, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _813));
        float _1688 = fma(_815, cbModelParam._m0[15u].z, fma(_814, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _813));
        float _1716;
        if (_1682 > 0.0)
        {
            _1716 = abs((1.0 - _1671) / _1682);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1671 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1716 = frontier_phi_14_12_ladder;
        }
        float _1887;
        if (_1685 > 0.0)
        {
            _1887 = abs((1.0 - _1675) / _1685);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1675 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1887 = frontier_phi_23_19_ladder;
        }
        float _2182;
        if (_1688 > 0.0)
        {
            _2182 = abs((1.0 - _1679) / _1688);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1679 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2182 = frontier_phi_35_30_ladder;
        }
        float _2184 = isnan(_1887) ? _1716 : (isnan(_1716) ? _1887 : min(_1716, _1887));
        float _2185 = isnan(_2182) ? _2184 : (isnan(_2184) ? _2182 : min(_2184, _2182));
        float _2189 = (_2185 * _1682) + _1671;
        float _2190 = (_2185 * _1685) + _1675;
        float _2191 = (_2185 * _1688) + _1679;
        float _2192 = _2185 * 9.9999997473787516355514526367188e-05;
        float _2194 = (-1.0) - _2192;
        float _2196 = _2192 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2191 > _2196) || ((_2191 < _2194) || ((_2190 > _2196) || ((_2190 < _2194) || ((_2189 < _2194) || (_2189 > _2196))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2336 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2191, cbModelParam._m0[9u].z, fma(_2190, cbModelParam._m0[9u].y, _2189 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2191, cbModelParam._m0[10u].z, fma(_2190, cbModelParam._m0[10u].y, _2189 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2191, cbModelParam._m0[11u].z, fma(_2190, cbModelParam._m0[11u].y, _2189 * cbModelParam._m0[11u].x))), _1624);
            frontier_phi_13_35_ladder = _2336.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2336.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2336.x * cbModelParam._m0[1u].y;
        }
        _1704 = frontier_phi_13_35_ladder_2;
        _1706 = frontier_phi_13_35_ladder_1;
        _1708 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1692 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_813, _814, _815), _1624);
        _1704 = _1692.x * cbModelParam._m0[1u].y;
        _1706 = _1692.y * cbModelParam._m0[1u].y;
        _1708 = _1692.z * cbModelParam._m0[1u].y;
    }
    float _1712 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _642);
    float _1713 = isnan(_1712) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1712 : min(cbModelParam._m0[25u].w, _1712));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1766 = fma(_877, cbModelParam._m0[21u].z, fma(_873, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _869)) + cbModelParam._m0[21u].w;
        float _1770 = fma(_877, cbModelParam._m0[22u].z, fma(_873, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _869)) + cbModelParam._m0[22u].w;
        float _1774 = fma(_877, cbModelParam._m0[23u].z, fma(_873, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _869)) + cbModelParam._m0[23u].w;
        float _1777 = fma(_815, cbModelParam._m0[21u].z, fma(_814, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _813));
        float _1780 = fma(_815, cbModelParam._m0[22u].z, fma(_814, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _813));
        float _1783 = fma(_815, cbModelParam._m0[23u].z, fma(_814, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _813));
        float _1892;
        if (_1777 > 0.0)
        {
            _1892 = abs((1.0 - _1766) / _1777);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1766 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1892 = frontier_phi_25_21_ladder;
        }
        float _2209;
        if (_1780 > 0.0)
        {
            _2209 = abs((1.0 - _1770) / _1780);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1770 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2209 = frontier_phi_37_32_ladder;
        }
        float _2547;
        if (_1783 > 0.0)
        {
            _2547 = abs((1.0 - _1774) / _1783);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1774 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2547 = frontier_phi_47_44_ladder;
        }
        float _2549 = isnan(_2209) ? _1892 : (isnan(_1892) ? _2209 : min(_1892, _2209));
        float _2550 = isnan(_2547) ? _2549 : (isnan(_2549) ? _2547 : min(_2549, _2547));
        float _2554 = (_2550 * _1777) + _1766;
        float _2555 = (_2550 * _1780) + _1770;
        float _2556 = (_2550 * _1783) + _1774;
        float _2557 = _2550 * 9.9999997473787516355514526367188e-05;
        float _2558 = (-1.0) - _2557;
        float _2560 = _2557 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2556 > _2560) || ((_2556 < _2558) || ((_2555 > _2560) || ((_2555 < _2558) || ((_2554 < _2558) || (_2554 > _2560))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2556, cbModelParam._m0[17u].z, fma(_2555, cbModelParam._m0[17u].y, _2554 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2556, cbModelParam._m0[18u].z, fma(_2555, cbModelParam._m0[18u].y, _2554 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2556, cbModelParam._m0[19u].z, fma(_2555, cbModelParam._m0[19u].y, _2554 * cbModelParam._m0[19u].x))), _1713);
            frontier_phi_22_47_ladder = _2678.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2678.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2678.x * cbModelParam._m0[1u].z;
        }
        _1802 = frontier_phi_22_47_ladder_2;
        _1804 = frontier_phi_22_47_ladder_1;
        _1806 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_813, _814, _815), _1713);
        _1802 = _1786.x * cbModelParam._m0[1u].z;
        _1804 = _1786.y * cbModelParam._m0[1u].z;
        _1806 = _1786.z * cbModelParam._m0[1u].z;
    }
    float _1819 = (((_840 * _789) + _841) * _805) * ((cbModelParam._m0[1u].w * (_1802 - _1704)) + _1704);
    float _1821 = (((_840 * _791) + _841) * _805) * ((cbModelParam._m0[1u].w * (_1804 - _1706)) + _1706);
    float _1823 = (((_840 * _792) + _841) * _805) * ((cbModelParam._m0[1u].w * (_1806 - _1708)) + _1708);
    float _1826 = fma(_1823, cbSceneParam._m0[89u].z, fma(_1821, cbSceneParam._m0[89u].y, _1819 * cbSceneParam._m0[89u].x));
    float _1829 = fma(_1823, cbSceneParam._m0[90u].z, fma(_1821, cbSceneParam._m0[90u].y, _1819 * cbSceneParam._m0[90u].x));
    float _1832 = fma(_1823, cbSceneParam._m0[91u].z, fma(_1821, cbSceneParam._m0[91u].y, _1819 * cbSceneParam._m0[91u].x));
    float _1866 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1870 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1874 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1878 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1879 = _1866 / _1878;
    float _1880 = _1870 / _1878;
    float _1881 = _1874 / _1878;
    float _2028;
    float _2029;
    float _2030;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1908 = ((uint(_1881 > cbSceneParam._m0[59u].y) + uint(_1881 > cbSceneParam._m0[59u].x)) + uint(_1881 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1909 = _1908 + 43u;
        uint _1917 = _1908 + 44u;
        uint _1925 = _1908 + 45u;
        uint _1933 = _1908 + 46u;
        float _1944 = fma(_1878, cbSceneParam._m0[_1909].w, fma(_1874, cbSceneParam._m0[_1909].z, fma(_1870, cbSceneParam._m0[_1909].y, _1866 * cbSceneParam._m0[_1909].x)));
        float _1948 = fma(_1878, cbSceneParam._m0[_1917].w, fma(_1874, cbSceneParam._m0[_1917].z, fma(_1870, cbSceneParam._m0[_1917].y, _1866 * cbSceneParam._m0[_1917].x)));
        float _1956 = fma(_1878, cbSceneParam._m0[_1933].w, fma(_1874, cbSceneParam._m0[_1933].z, fma(_1870, cbSceneParam._m0[_1933].y, _1866 * cbSceneParam._m0[_1933].x)));
        float _1961 = cbSceneParam._m0[33u].z * _1956;
        float _1963 = cbSceneParam._m0[33u].w * _1956;
        float _1966 = fma(_1878, cbSceneParam._m0[_1925].w, fma(_1874, cbSceneParam._m0[_1925].z, fma(_1870, cbSceneParam._m0[_1925].y, _1866 * cbSceneParam._m0[_1925].x))) / _1956;
        float _2014 = (cbSceneParam._m0[33u].x - sqrt(((_1880 * _1880) + (_1879 * _1879)) + (_1881 * _1881))) * cbSceneParam._m0[33u].y;
        float _4300 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2021 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1961 + _1944) / _1956, (_1963 + _1948) / _1956), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1963 + _1944) / _1956, (_1948 - _1961) / _1956), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1944 - _1961) / _1956, (_1948 - _1963) / _1956), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1944 - _1963) / _1956, (_1961 + _1948) / _1956), _1966), 0.0)).x), vec4(0.25)));
        _2028 = 1.0 - (_2021 * cbSceneParam._m0[34u].x);
        _2029 = 1.0 - (_2021 * cbSceneParam._m0[34u].y);
        _2030 = 1.0 - (_2021 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2028 = 1.0;
        _2029 = 1.0;
        _2030 = 1.0;
    }
    float _2094;
    float _2096;
    float _2098;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2082 = fma(_1878, cbSceneParam._m0[63u].w, fma(_1874, cbSceneParam._m0[63u].z, fma(_1870, cbSceneParam._m0[63u].y, _1866 * cbSceneParam._m0[63u].x)));
        float _2083 = fma(_1878, cbSceneParam._m0[60u].w, fma(_1874, cbSceneParam._m0[60u].z, fma(_1870, cbSceneParam._m0[60u].y, _1866 * cbSceneParam._m0[60u].x))) / _2082;
        float _2084 = fma(_1878, cbSceneParam._m0[61u].w, fma(_1874, cbSceneParam._m0[61u].z, fma(_1870, cbSceneParam._m0[61u].y, _1866 * cbSceneParam._m0[61u].x))) / _2082;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2083 >= cbSceneParam._m0[64u].x) && (_2084 >= cbSceneParam._m0[64u].y)) && (_2083 <= cbSceneParam._m0[64u].z)) && (_2084 <= cbSceneParam._m0[64u].w))
        {
            float _2222 = fma(_1878, cbSceneParam._m0[62u].w, fma(_1874, cbSceneParam._m0[62u].z, fma(_1870, cbSceneParam._m0[62u].y, _1866 * cbSceneParam._m0[62u].x))) / _2082;
            float _2226 = isnan(cbSceneParam._m0[41u].w) ? _2222 : (isnan(_2222) ? cbSceneParam._m0[41u].w : max(_2222, cbSceneParam._m0[41u].w));
            float _2269 = (cbSceneParam._m0[33u].x - sqrt(((_1880 * _1880) + (_1879 * _1879)) + (_1881 * _1881))) * cbSceneParam._m0[33u].y;
            float _4316 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
            float _2276 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2083, cbSceneParam._m0[33u].w + _2084), _2226), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2083, _2084 - cbSceneParam._m0[33u].z), _2226), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2083 - cbSceneParam._m0[33u].z, _2084 - cbSceneParam._m0[33u].w), _2226), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2083 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2084), _2226), 0.0)).x), vec4(0.25)));
            float _2280 = 1.0 - (_2276 * cbSceneParam._m0[34u].x);
            float _2281 = 1.0 - (_2276 * cbSceneParam._m0[34u].y);
            float _2282 = 1.0 - (_2276 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2282) ? _2030 : (isnan(_2030) ? _2282 : min(_2030, _2282));
            frontier_phi_34_33_ladder_1 = isnan(_2281) ? _2029 : (isnan(_2029) ? _2281 : min(_2029, _2281));
            frontier_phi_34_33_ladder_2 = isnan(_2280) ? _2028 : (isnan(_2028) ? _2280 : min(_2028, _2280));
        }
        else
        {
            frontier_phi_34_33_ladder = _2030;
            frontier_phi_34_33_ladder_1 = _2029;
            frontier_phi_34_33_ladder_2 = _2028;
        }
        _2094 = frontier_phi_34_33_ladder_2;
        _2096 = frontier_phi_34_33_ladder_1;
        _2098 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2094 = _2028;
        _2096 = _2029;
        _2098 = _2030;
    }
    uvec4 _2103 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2105 = _2103.x * 14u;
    uint _2106 = _2105 + 13u;
    float _2113 = _805 + (-1.0);
    float _2118 = (cbLight._m0[_2106].x * _2113) + 1.0;
    float _2119 = (cbLight._m0[_2106].y * _2113) + 1.0;
    float _2120 = (cbLight._m0[_2106].z * _2113) + 1.0;
    float _2121 = (cbLight._m0[_2106].w * _2113) + 1.0;
    uint _2122 = _2105 + 5u;
    float _2128 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
    uint _2132 = _2105 + 4u;
    float _2141 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
    uint _2145 = _2105 | 1u;
    float _2156 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_639, _640, _641));
    float _2159 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_639, _640, _641));
    float _4352 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _4363 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2164 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * 0.3183098733425140380859375;
    float _2166 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * 0.3183098733425140380859375;
    float _2173 = ((cbLight._m0[_2122].x * _2128) * _2166) + (((cbLight._m0[_2132].x * _2094) * _2141) * _2164);
    float _2174 = ((_2128 * cbLight._m0[_2122].y) * _2166) + (((cbLight._m0[_2132].y * _2096) * _2141) * _2164);
    float _2175 = ((_2128 * cbLight._m0[_2122].z) * _2166) + (((cbLight._m0[_2132].z * _2098) * _2141) * _2164);
    uvec4 _2179 = floatBitsToUint(cbLight._m0[_2105 + 12u]);
    bool _2181 = _2179.x == 0u;
    float _2283;
    float _2285;
    float _2287;
    if (_2181)
    {
        _2283 = _2173;
        _2285 = _2174;
        _2287 = _2175;
    }
    else
    {
        uint _2291 = _2105 + 6u;
        float _2307 = (dot(vec3(cbLight._m0[_2105 + 2u].xyz), vec3(_639, _640, _641)) * 0.5) + 0.5;
        float _2308 = _2307 * _2307;
        float _4374 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2309 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2310 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2283 = (((cbLight._m0[_2291].x * 0.3183098733425140380859375) * _2309) * _2310) + _2173;
        _2285 = (((cbLight._m0[_2291].y * 0.3183098733425140380859375) * _2309) * _2310) + _2174;
        _2287 = (((cbLight._m0[_2291].z * 0.3183098733425140380859375) * _2309) * _2310) + _2175;
    }
    bool _2290 = _2179.y == 0u;
    float _2345;
    float _2347;
    float _2349;
    if (_2290)
    {
        _2345 = _2283;
        _2347 = _2285;
        _2349 = _2287;
    }
    else
    {
        uint _2518 = _2105 + 7u;
        float _2534 = (dot(vec3(cbLight._m0[_2105 + 3u].xyz), vec3(_639, _640, _641)) * 0.5) + 0.5;
        float _2535 = _2534 * _2534;
        float _4390 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2536 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2537 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2345 = (((cbLight._m0[_2518].x * 0.3183098733425140380859375) * _2536) * _2537) + _2283;
        _2347 = (((cbLight._m0[_2518].y * 0.3183098733425140380859375) * _2536) * _2537) + _2285;
        _2349 = (((cbLight._m0[_2518].z * 0.3183098733425140380859375) * _2536) * _2537) + _2287;
    }
    uint _2352 = _2105 + 8u;
    float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2105].w)) * _642) * 0.949999988079071044921875);
    float _2366 = _2365 * _2365;
    float _2367 = cbLight._m0[_2105].x + _719;
    float _2368 = cbLight._m0[_2105].y + _720;
    float _2369 = cbLight._m0[_2105].z + _721;
    float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
    float _2374 = _2373 * _2367;
    float _2375 = _2373 * _2368;
    float _2376 = _2373 * _2369;
    float _2377 = dot(vec3(_639, _640, _641), vec3(cbLight._m0[_2105].xyz));
    float _4406 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _4417 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _2381 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2382 = dot(vec3(_639, _640, _641), vec3(_2374, _2375, _2376));
    float _4428 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2386 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_2374, _2375, _2376));
    float _4439 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2390 = _2366 * _2366;
    float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
    float _2402 = exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0);
    float _2403 = 0.959999978542327880859375 - _786;
    float _2405 = 0.959999978542327880859375 - _787;
    float _2406 = 0.959999978542327880859375 - _788;
    float _2413 = 1.0 - _2366;
    float _2424 = (0.5 / (((_2381 * ((_2380 * _2413) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2413) + _2366) * _2380))) * _2380;
    float _4450 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2426 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
    uint _2440 = _2105 + 9u;
    float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _642) * 0.949999988079071044921875);
    float _2452 = _2451 * _2451;
    float _2453 = cbLight._m0[_2145].x + _719;
    float _2454 = cbLight._m0[_2145].y + _720;
    float _2455 = cbLight._m0[_2145].z + _721;
    float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
    float _2460 = _2459 * _2453;
    float _2461 = _2459 * _2454;
    float _2462 = _2459 * _2455;
    float _2463 = dot(vec3(_639, _640, _641), vec3(cbLight._m0[_2145].xyz));
    float _4461 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2466 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2467 = dot(vec3(_639, _640, _641), vec3(_2460, _2461, _2462));
    float _4472 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2470 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2471 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2460, _2461, _2462));
    float _4483 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2475 = _2452 * _2452;
    float _2479 = ((_2470 * _2470) * (_2475 + (-1.0))) + 1.0;
    float _2486 = exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0);
    float _2493 = 1.0 - _2452;
    float _2503 = (0.5 / (((_2381 * ((_2466 * _2493) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2493) + _2452) * _2466))) * _2466;
    float _4494 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2505 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2475 / ((_2479 * _2479) * 3.141590118408203125));
    float _2515 = (((((_2486 * _2403) + _789) * cbLight._m0[_2440].x) * _2505) * _2128) + ((((cbLight._m0[_2352].x * _2094) * ((_2402 * _2403) + _789)) * _2426) * _2141);
    float _2516 = (((((_2486 * _2405) + _791) * cbLight._m0[_2440].y) * _2505) * _2128) + ((((cbLight._m0[_2352].y * _2096) * ((_2402 * _2405) + _791)) * _2426) * _2141);
    float _2517 = (((((_2486 * _2406) + _792) * cbLight._m0[_2440].z) * _2505) * _2128) + ((((cbLight._m0[_2352].z * _2098) * ((_2402 * _2406) + _792)) * _2426) * _2141);
    float _2573;
    float _2575;
    float _2577;
    if (_2181)
    {
        _2573 = _2515;
        _2575 = _2516;
        _2577 = _2517;
    }
    else
    {
        uint _2579 = _2105 + 2u;
        uint _2583 = _2105 + 10u;
        float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2579].w)) * _642) * 0.949999988079071044921875);
        float _2598 = _2597 * _2597;
        float _2599 = cbLight._m0[_2579].x + _719;
        float _2600 = cbLight._m0[_2579].y + _720;
        float _2601 = cbLight._m0[_2579].z + _721;
        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
        float _2606 = _2605 * _2599;
        float _2607 = _2605 * _2600;
        float _2608 = _2605 * _2601;
        float _2609 = dot(vec3(_639, _640, _641), vec3(cbLight._m0[_2579].xyz));
        float _4505 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2613 = dot(vec3(_639, _640, _641), vec3(_2606, _2607, _2608));
        float _4516 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2617 = dot(vec3(cbLight._m0[_2579].xyz), vec3(_2606, _2607, _2608));
        float _4527 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2621 = _2598 * _2598;
        float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
        float _2632 = exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0);
        float _2639 = 1.0 - _2598;
        float _2649 = (0.5 / (((_2381 * ((_2612 * _2639) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2639) + _2598) * _2612))) * _2612;
        float _4538 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2651 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
        float _2652 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2573 = (((((_2632 * _2403) + _789) * cbLight._m0[_2583].x) * _2651) * _2652) + _2515;
        _2575 = (((((_2632 * _2405) + _791) * cbLight._m0[_2583].y) * _2651) * _2652) + _2516;
        _2577 = (((((_2632 * _2406) + _792) * cbLight._m0[_2583].z) * _2651) * _2652) + _2517;
    }
    float _2683;
    float _2685;
    float _2687;
    if (_2290)
    {
        _2683 = _2573;
        _2685 = _2575;
        _2687 = _2577;
    }
    else
    {
        uint _2694 = _2105 + 3u;
        uint _2698 = _2105 + 11u;
        float _2712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2694].w)) * _642) * 0.949999988079071044921875);
        float _2713 = _2712 * _2712;
        float _2714 = cbLight._m0[_2694].x + _719;
        float _2715 = cbLight._m0[_2694].y + _720;
        float _2716 = cbLight._m0[_2694].z + _721;
        float _2720 = inversesqrt(dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716)));
        float _2721 = _2720 * _2714;
        float _2722 = _2720 * _2715;
        float _2723 = _2720 * _2716;
        float _2724 = dot(vec3(_639, _640, _641), vec3(cbLight._m0[_2694].xyz));
        float _4554 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2727 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2728 = dot(vec3(_639, _640, _641), vec3(_2721, _2722, _2723));
        float _4565 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2731 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2732 = dot(vec3(cbLight._m0[_2694].xyz), vec3(_2721, _2722, _2723));
        float _4576 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2736 = _2713 * _2713;
        float _2740 = ((_2731 * _2731) * (_2736 + (-1.0))) + 1.0;
        float _2747 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
        float _2754 = 1.0 - _2713;
        float _2764 = (0.5 / (((_2381 * ((_2727 * _2754) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2754) + _2713) * _2727))) * _2727;
        float _4587 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2766 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2736 / ((_2740 * _2740) * 3.141590118408203125));
        float _2767 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2683 = (((((_2747 * _2403) + _789) * cbLight._m0[_2698].x) * _2766) * _2767) + _2573;
        _2685 = (((((_2747 * _2405) + _791) * cbLight._m0[_2698].y) * _2766) * _2767) + _2575;
        _2687 = (((((_2747 * _2406) + _792) * cbLight._m0[_2698].z) * _2766) * _2767) + _2577;
    }
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    if (_2103.y == 0u)
    {
        uvec4 _2788 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2789 = _2788.x;
        uint _2800 = uint((float(_2788.y) * floor(float(uint(cbSceneParam._m0[85u].y * _728) / _2789))) + floor(float(uint(cbSceneParam._m0[85u].x * _727) / _2789)));
        float _2810 = (log2(_1881 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2811 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        uint _2814 = uint(isnan(14.0) ? _2811 : (isnan(_2811) ? 14.0 : min(_2811, 14.0)));
        uvec4 _2819 = texelFetch(g_lightClusterGridBuffer, int(((_2814 << 2u) + (_2800 << 6u)) >> 2u));
        uint _2820 = _2819.x;
        uint _2821 = _2788.z;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((((1u << ((_2821 >> 4u) & 15u)) + 4294967295u) & _2820) == 0u) || ((_2821 & 240u) == 0u))
        {
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
        }
        else
        {
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            uint _3051 = 0u;
            uint _3060;
            bool _3061;
            for (;;)
            {
                _3060 = texelFetch(g_lightClassification, int((((_2814 << 5u) + (_2800 << 9u)) + (_3051 << 2u)) >> 2u)).x;
                _3061 = _3060 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3061)
                {
                    frontier_phi_66_pred = _3050;
                    frontier_phi_66_pred_1 = _3049;
                    frontier_phi_66_pred_2 = _3048;
                    frontier_phi_66_pred_3 = _3047;
                    frontier_phi_66_pred_4 = _3046;
                    frontier_phi_66_pred_5 = _3045;
                }
                else
                {
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    uint _3175;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3050;
                    _3175 = _3060;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    for (;;)
                    {
                        uint _3179 = uint(findLSB(_3175)) + (_3051 << 5u);
                        uint _3176 = (_3175 + 4294967295u) & _3175;
                        uint _3181 = _3179 * 48u;
                        vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3201 = (_3179 * 48u) + 4u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 3u)).x));
                        uint _3220 = (_3179 * 48u) + 8u;
                        vec3 _3231 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x));
                        float _3235 = _3195.x - _1879;
                        float _3236 = _3195.y - _1880;
                        float _3237 = _3195.z - _1881;
                        float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                        float _3241 = inversesqrt(_3238);
                        float _3242 = _3241 * _3235;
                        float _3243 = _3241 * _3236;
                        float _3244 = _3241 * _3237;
                        float _3245 = dot(vec3(_746, _749, _752), vec3(_3242, _3243, _3244));
                        float _3250 = 1.0 - (_3238 * _3195.w);
                        float _4613 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3251 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                        float _3252 = sqrt(_3238) * _3214.w;
                        float _3255 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                        float _3256 = _3255 * _3255;
                        float _3259 = ((1.0 - _3256) * _3245) + _3256;
                        float _3262 = _3252 * _3252;
                        float _3266 = ((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3251) / ((_3262 * 0.699999988079071044921875) + 1.0);
                        float _3270 = (-0.0) - _1879;
                        float _3271 = (-0.0) - _1880;
                        float _3272 = (-0.0) - _1881;
                        float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                        float _3277 = _3276 * _3270;
                        float _3278 = _3276 * _3271;
                        float _3279 = _3276 * _3272;
                        float _3286 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                        float _3287 = 1.0 - _821;
                        float _3294 = sqrt(1.0 - ((1.0 - (_3287 * _3287)) * (1.0 - (_3286 * _3286))));
                        float _3295 = _3294 * _3294;
                        float _3296 = _3295 * _3295;
                        float _3297 = _3277 + _3242;
                        float _3298 = _3278 + _3243;
                        float _3299 = _3279 + _3244;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3307 = dot(vec3(_746, _749, _752), vec3(_3277, _3278, _3279));
                        float _4629 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3310 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3311 = dot(vec3(_746, _749, _752), vec3(_3303 * _3297, _3303 * _3298, _3303 * _3299));
                        float _4640 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3318 = ((_3314 * _3314) * (_3296 + (-1.0))) + 1.0;
                        float _3319 = _3255 * _3295;
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3245) + _3320;
                        float _4651 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3325 = 1.0 - _3295;
                        float _3335 = (0.5 / (((_3324 * ((_3310 * _3325) + _3295)) + 9.9999999392252902907785028219223e-09) + (((_3324 * _3325) + _3295) * _3310))) * _3324;
                        float _4662 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3346 = (((_3296 * 3.1415927410125732421875) * (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) / ((_3318 * _3318) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125))) * _3251;
                        _3104 = (_3266 * _3214.x) + _3172;
                        _3105 = (_3266 * _3214.y) + _3173;
                        _3106 = (_3266 * _3214.z) + _3174;
                        _3101 = (_3346 * _3231.x) + _3169;
                        _3102 = (_3346 * _3231.y) + _3170;
                        _3103 = (_3346 * _3231.z) + _3171;
                        if (_3176 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3106;
                            _3175 = _3176;
                        }
                    }
                    frontier_phi_66_pred = _3106;
                    frontier_phi_66_pred_1 = _3105;
                    frontier_phi_66_pred_2 = _3104;
                    frontier_phi_66_pred_3 = _3103;
                    frontier_phi_66_pred_4 = _3102;
                    frontier_phi_66_pred_5 = _3101;
                }
                _2911 = frontier_phi_66_pred;
                _2909 = frontier_phi_66_pred_1;
                _2907 = frontier_phi_66_pred_2;
                _2905 = frontier_phi_66_pred_3;
                _2903 = frontier_phi_66_pred_4;
                _2901 = frontier_phi_66_pred_5;
                uint _3052 = _3051 + 1u;
                if (_3052 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3045 = _2901;
                    _3046 = _2903;
                    _3047 = _2905;
                    _3048 = _2907;
                    _3049 = _2909;
                    _3050 = _2911;
                    _3051 = _3052;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
        }
        uvec4 _2914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2915 = _2914.z;
        uint _2917 = (_2915 >> 8u) & 15u;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        if (((4294967295u << _2917) & _2820) == 0u)
        {
            _3013 = _2900;
            _3015 = _2902;
            _3017 = _2904;
            _3019 = _2906;
            _3021 = _2908;
            _3023 = _2910;
        }
        else
        {
            float _3038 = inversesqrt(dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881)));
            float _3039 = _3038 * _1879;
            float _3040 = _3038 * _1880;
            float _3041 = _3038 * _1881;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2917 < ((_2915 >> 12u) & 15u))
            {
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3152 = _2900;
                float _3153 = _2902;
                float _3154 = _2904;
                float _3155 = _2906;
                float _3156 = _2908;
                float _3157 = _2910;
                uint _3158 = _2917;
                uint _3167;
                bool _3168;
                for (;;)
                {
                    _3167 = texelFetch(g_lightClassification, int((((_2814 << 5u) + (_2800 << 9u)) + (_3158 << 2u)) >> 2u)).x;
                    _3168 = _3167 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3168)
                    {
                        frontier_phi_72_pred = _3157;
                        frontier_phi_72_pred_1 = _3156;
                        frontier_phi_72_pred_2 = _3155;
                        frontier_phi_72_pred_3 = _3154;
                        frontier_phi_72_pred_4 = _3153;
                        frontier_phi_72_pred_5 = _3152;
                    }
                    else
                    {
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3364 = _3152;
                        float _3365 = _3153;
                        float _3366 = _3154;
                        float _3367 = _3155;
                        float _3368 = _3156;
                        float _3369 = _3157;
                        uint _3370 = _3167;
                        uint _3371;
                        vec4 _3396;
                        float _3397;
                        vec4 _3412;
                        vec3 _3424;
                        vec4 _3439;
                        vec4 _3455;
                        float _3501;
                        bool _3502;
                        for (;;)
                        {
                            uint _3381 = ((_3158 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3370));
                            _3371 = (_3370 + 4294967295u) & _3370;
                            uint _3383 = _3381 * 40u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3397 = _3396.w;
                            uint _3399 = (_3381 * 40u) + 4u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3414 = (_3381 * 40u) + 8u;
                            _3424 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x));
                            uint _3426 = (_3381 * 40u) + 16u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3442 = (_3381 * 40u) + 20u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3457 = (_3381 * 40u) + 24u;
                            vec4 _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3476 = (_3381 * 40u) + 28u;
                            vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            _3501 = fma(_1881, _3489.z, fma(_1880, _3489.y, _3489.x * _1879)) + _3489.w;
                            _3502 = !((fma(_1881, _3470.z, fma(_1880, _3470.y, _3470.x * _1879)) + _3470.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3502)
                            {
                                float _3529 = _3396.x - _1879;
                                float _3530 = _3396.y - _1880;
                                float _3531 = _3396.z - _1881;
                                float _3532 = dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531));
                                float _3535 = inversesqrt(_3532);
                                float _3536 = _3535 * _3529;
                                float _3537 = _3535 * _3530;
                                float _3538 = _3535 * _3531;
                                float _3542 = 1.0 - (_3532 / (_3397 * _3397));
                                float _4673 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3543 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3547 = sqrt(_3532) * _3412.w;
                                float _3549 = 1.39999997615814208984375 / (_3547 + 1.39999997615814208984375);
                                float _3550 = _3549 * _3549;
                                float _3553 = ((1.0 - _3550) * dot(vec3(_3536, _3537, _3538), vec3(_746, _749, _752))) + _3550;
                                float _3556 = _3547 * _3547;
                                float _3560 = (fma(_1881, _3439.z, fma(_1880, _3439.y, _3439.x * _1879)) + _3439.w) / _3501;
                                float _3561 = (fma(_1881, _3455.z, fma(_1880, _3455.y, _3455.x * _1879)) + _3455.w) / _3501;
                                float _3565 = 1.0 - dot(vec2(_3560, _3561), vec2(_3560, _3561));
                                float _4689 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3567 = _3566 * (((isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0))) * _3543) / ((_3556 * 0.699999988079071044921875) + 1.0));
                                float _3579 = exp2(log2(1.0 / ((_3556 * 3.5) + 5.0)) * 0.25);
                                float _3580 = 1.0 - _821;
                                float _3587 = sqrt(1.0 - ((1.0 - (_3580 * _3580)) * (1.0 - (_3579 * _3579))));
                                float _3588 = _3587 * _3587;
                                float _3589 = _3588 * _3588;
                                float _3590 = _3536 - _3039;
                                float _3591 = _3537 - _3040;
                                float _3592 = _3538 - _3041;
                                float _3596 = inversesqrt(dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592)));
                                float _3600 = dot(vec3(_746, _749, _752), vec3((-0.0) - _3039, (-0.0) - _3040, (-0.0) - _3041));
                                float _4700 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3603 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3604 = dot(vec3(_746, _749, _752), vec3(_3596 * _3590, _3596 * _3591, _3596 * _3592));
                                float _4711 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3607 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3611 = ((_3607 * _3607) * (_3589 + (-1.0))) + 1.0;
                                float _3612 = _3549 * _3588;
                                float _3613 = _3612 * _3612;
                                float _3619 = ((1.0 - _3613) * dot(vec3(_746, _749, _752), vec3(_3536, _3537, _3538))) + _3613;
                                float _4722 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3620 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3621 = 1.0 - _3588;
                                float _3631 = (0.5 / (((_3620 * ((_3603 * _3621) + _3588)) + 9.9999999392252902907785028219223e-09) + (((_3620 * _3621) + _3588) * _3603))) * _3620;
                                float _4733 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3641 = (_3566 * _3543) * (((_3589 * 3.1415927410125732421875) * (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) / ((_3611 * _3611) * ((_3556 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3567 * _3412.y;
                                frontier_phi_78_pred_1 = _3567 * _3412.x;
                                frontier_phi_78_pred_2 = _3641 * _3424.z;
                                frontier_phi_78_pred_3 = _3641 * _3424.y;
                                frontier_phi_78_pred_4 = _3641 * _3424.x;
                                frontier_phi_78_pred_5 = _3567 * _3412.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3649 = frontier_phi_78_pred;
                            _3648 = frontier_phi_78_pred_1;
                            _3647 = frontier_phi_78_pred_2;
                            _3646 = frontier_phi_78_pred_3;
                            _3645 = frontier_phi_78_pred_4;
                            _3650 = frontier_phi_78_pred_5;
                            _3354 = _3648 + _3367;
                            _3355 = _3649 + _3368;
                            _3356 = _3650 + _3369;
                            _3351 = _3645 + _3364;
                            _3352 = _3646 + _3365;
                            _3353 = _3647 + _3366;
                            if (_3371 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3371;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3356;
                        frontier_phi_72_pred_1 = _3355;
                        frontier_phi_72_pred_2 = _3354;
                        frontier_phi_72_pred_3 = _3353;
                        frontier_phi_72_pred_4 = _3352;
                        frontier_phi_72_pred_5 = _3351;
                    }
                    _3024 = frontier_phi_72_pred;
                    _3022 = frontier_phi_72_pred_1;
                    _3020 = frontier_phi_72_pred_2;
                    _3018 = frontier_phi_72_pred_3;
                    _3016 = frontier_phi_72_pred_4;
                    _3014 = frontier_phi_72_pred_5;
                    uint _3159 = _3158 + 1u;
                    if (_3159 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3152 = _3014;
                        _3153 = _3016;
                        _3154 = _3018;
                        _3155 = _3020;
                        _3156 = _3022;
                        _3157 = _3024;
                        _3158 = _3159;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3024;
                frontier_phi_60_61_ladder_1 = _3022;
                frontier_phi_60_61_ladder_2 = _3018;
                frontier_phi_60_61_ladder_3 = _3016;
                frontier_phi_60_61_ladder_4 = _3014;
                frontier_phi_60_61_ladder_5 = _3020;
            }
            else
            {
                frontier_phi_60_61_ladder = _2910;
                frontier_phi_60_61_ladder_1 = _2908;
                frontier_phi_60_61_ladder_2 = _2904;
                frontier_phi_60_61_ladder_3 = _2902;
                frontier_phi_60_61_ladder_4 = _2900;
                frontier_phi_60_61_ladder_5 = _2906;
            }
            _3013 = frontier_phi_60_61_ladder_4;
            _3015 = frontier_phi_60_61_ladder_3;
            _3017 = frontier_phi_60_61_ladder_2;
            _3019 = frontier_phi_60_61_ladder_5;
            _3021 = frontier_phi_60_61_ladder_1;
            _3023 = frontier_phi_60_61_ladder;
        }
        float _3028 = isnan(1.0) ? _805 : (isnan(_805) ? 1.0 : min(_805, 1.0));
        _2833 = (_3028 * _3019) + _2345;
        _2835 = (_3028 * _3021) + _2347;
        _2837 = (_3028 * _3023) + _2349;
        _2839 = ((_3013 * _789) * _3028) + _2683;
        _2841 = ((_3015 * _791) * _3028) + _2685;
        _2843 = ((_3017 * _792) * _3028) + _2687;
    }
    else
    {
        _2833 = _2345;
        _2835 = _2347;
        _2837 = _2349;
        _2839 = _2683;
        _2841 = _2685;
        _2843 = _2687;
    }
    float _4749 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4760 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4771 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    uint _2863 = _240 + 6u;
    float _2871 = _727 / cbSceneParam._m0[86u].x;
    float _2872 = _728 / cbSceneParam._m0[86u].y;
    vec4 _2886 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2871, _2872, (log2((isnan(cbSceneParam._m0[77u].w) ? _661 : (isnan(_661) ? cbSceneParam._m0[77u].w : min(_661, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2888 = _2886.x;
    float _2889 = _2886.y;
    float _2890 = _2886.z;
    float _2891 = _2886.w;
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    if (_661 > cbSceneParam._m0[78u].w)
    {
        float _2925 = isnan(_661) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _661 : min(cbSceneParam._m0[80u].w, _661));
        float _2926 = _2925 / _661;
        float _2937 = _2926 * _712;
        float _2938 = _713 * _2926;
        float _2939 = (-0.0) - _2938;
        float _2941 = _2926 * _714;
        float _2943 = (cbSceneParam._m0[77u].w * _2939) / _2925;
        float _2944 = _2943 + cbSceneParam._m0[79u].w;
        float _2945 = cbSceneParam._m0[79u].w - _2938;
        float _2951 = sqrt(((_2937 * _2937) + (_2938 * _2938)) + (_2941 * _2941));
        float _2954 = (1.0 - (cbSceneParam._m0[77u].w / _2925)) * _2951;
        float _2959 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2961 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3114;
        if (abs((_2939 - _2943) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3114 = ((((_2944 > 0.0) ? exp2(_2959 * _2944) : (2.0 - exp2(_2961 * _2944))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2954;
        }
        else
        {
            float _3074 = 1.0 / cbSceneParam._m0[80u].x;
            float _3075 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : max(_2944, _2945));
            float _3076 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : min(_2944, _2945));
            float _3085 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : min(_3075, 0.0));
            float _3086 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : min(_3076, 0.0));
            _3114 = ((abs(_2951 / _2939) * cbSceneParam._m0[80u].y) * ((((_3085 - _3086) * 2.0) - ((exp2(_2959 * (isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0)))) - exp2(_2959 * (isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))))) * _3074)) - ((exp2(_2961 * _3085) - exp2(_2961 * _3086)) * _3074))) + (_2954 * cbSceneParam._m0[80u].z);
        }
        vec4 _3116 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2871, _2872, 1.0), 0.0);
        float _3125 = exp2((_3114 * (-1.44269502162933349609375)) * (1.0 - _3116.w));
        float _3126 = log2(_3125);
        float _3142 = log2(_2891);
        _2963 = (exp2(_3142 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].x)) * _3116.x) / cbSceneParam._m0[78u].x)) + _2888;
        _2965 = (exp2(_3142 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].y)) * _3116.y) / cbSceneParam._m0[78u].y)) + _2889;
        _2967 = (exp2(_3142 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].z)) * _3116.z) / cbSceneParam._m0[78u].z)) + _2890;
        _2969 = _3125 * _2891;
    }
    else
    {
        _2963 = _2888;
        _2965 = _2889;
        _2967 = _2890;
        _2969 = _2891;
    }
    float _2981 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2982 = _2981 == 3.0;
    float _2983 = log2(_2969);
    float _2990 = exp2(_2983 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2833 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _805))) + ((_2839 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1613)) * cbPerFrame._m0[3u].x));
    float _2991 = exp2(_2983 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2835 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _805))) + ((_2841 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1613)) * cbPerFrame._m0[3u].x));
    float _2992 = exp2(_2983 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2837 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _805))) + ((_2843 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1613)) * cbPerFrame._m0[3u].x));
    float _3001 = (_2981 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3001 * (_2982 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2963)));
    SV_Target.y = _3001 * (_2982 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2965)));
    SV_Target.z = _3001 * (_2982 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2967)));
    SV_Target.w = cbInstanceData._m0[_2863].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2863].w;
}


