#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1415;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _369 = _367.x;
    float _381 = dot(vec4(_369, _367.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _398 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_369 - _381) * cbMtdParam._m0[24u].y) + _381) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4024 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _406 = (_399 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _407 = (_399 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _408 = (_399 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _457 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _471 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_447 - _457) * cbMtdParam._m0[24u].y) + _457) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4035 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _479 = (_472 * ((_425.x * cbMtdParam._m0[13u].x) - _406)) + _406;
    float _480 = (_472 * ((_425.y * cbMtdParam._m0[13u].y) - _407)) + _407;
    float _481 = (_472 * ((_425.z * cbMtdParam._m0[13u].z) - _408)) + _408;
    vec4 _499 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _527 = ((_499.x - _518) * _399) + _518;
    float _528 = ((_499.y - _519) * _399) + _519;
    float _529 = ((_499.z - _520) * _399) + _520;
    vec4 _541 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _554 = ((_541.z - _529) * _472) + _529;
    float _557 = ((((_541.x - _527) * _472) + _527) * 2.0) + (-1.0);
    float _559 = ((((_541.y - _528) * _472) + _528) * 2.0) + (-1.0);
    float _560 = dot(vec2(_557, _559), vec2(_557, _559));
    float _4046 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _565 = sqrt(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))));
    vec4 _579 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _604 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _606 = _604.x;
    float _607 = 1.0 - _606;
    float _613 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _616 = ((isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : min(_613, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _625 = (_616 - ((((((_606 - _607) * cbMtdParam._m0[24u].z) + _607) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _616))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4067 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _633 = (_626 * (cbMtdParam._m0[17u].x - _479)) + _479;
    float _634 = (_626 * (cbMtdParam._m0[17u].y - _480)) + _480;
    float _635 = (_626 * (cbMtdParam._m0[17u].z - _481)) + _481;
    vec4 _647 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _649 = _647.x;
    float _650 = 1.0 - _649;
    float _677 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_649 - _650) * cbMtdParam._m0[24u].w) + _650) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4078 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _678 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _686 = ((((cbMtdParam._m0[10u].x - _633) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _678) + _633;
    float _687 = ((((cbMtdParam._m0[10u].y - _634) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _678) + _634;
    float _688 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _635)) * _678) + _635;
    vec4 _714 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _716 = _714.x;
    float _734 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _716) * _399) + _716;
    float _751 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _734) * _472) + _734;
    float _755 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _751) * cbMtdParam._m0[19u].z) + _751;
    float _757 = _755 - (_755 * _626);
    float _759 = _757 - (_757 * _678);
    float _763 = (cbMtdParam._m0[19u].w * (_579.z - _554)) + _554;
    vec4 _777 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _784 = (_777.x * 2.0) + (-1.0);
    float _785 = (_777.y * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _4089 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _794 = (_626 * (_777.z - _763)) + _763;
    float _797 = ((cbMtdParam._m0[23u].y - _794) * _678) + _794;
    vec4 _816 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _822 = (_816.x * 2.0) + (-1.0);
    float _823 = (_816.y * 2.0) + (-1.0);
    float _824 = dot(vec2(_822, _823), vec2(_822, _823));
    float _4100 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _832 = (((_579.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _557;
    float _833 = (((_579.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _559;
    float _845 = (((_784 - _832) + (cbMtdParam._m0[21u].x * _832)) * _626) + _832;
    float _846 = (((_785 - _833) + (cbMtdParam._m0[21u].x * _833)) * _626) + _833;
    float _847 = (_626 * (sqrt(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) - _565)) + _565;
    float _858 = (((_822 - _845) + (_845 * cbMtdParam._m0[22u].z)) * _678) + _845;
    float _859 = (((_823 - _846) + (_846 * cbMtdParam._m0[22u].z)) * _678) + _846;
    float _860 = ((sqrt(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) - _847) * _678) + _847;
    float _862 = cbMtdParam._m0[22u].x + _579.w;
    float _865 = fma(_860, _248 * NORMAL.x, fma(_859, _255 * TANGENT.x, (_241 * _233) * _858));
    float _868 = fma(_860, _248 * NORMAL.y, fma(_859, _255 * TANGENT.y, (_241 * _234) * _858));
    float _871 = fma(_860, _248 * NORMAL.z, fma(_859, _255 * TANGENT.z, (_241 * _235) * _858));
    float _875 = inversesqrt(dot(vec3(_865, _868, _871), vec3(_865, _868, _871)));
    float _876 = _875 * _865;
    float _877 = _875 * _868;
    float _878 = _875 * _871;
    float _4111 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _879 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4133 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _4144 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4155 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4166 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _884 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _898 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _948 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _938);
    float _949 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _938);
    float _950 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _938);
    float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
    float _955 = _948 * _954;
    float _956 = _949 * _954;
    float _957 = _950 * _954;
    float _963 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _964 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _982 = fma(_878, cbSceneParam._m0[5u].z, fma(_877, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _876));
    float _985 = fma(_878, cbSceneParam._m0[6u].z, fma(_877, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _876));
    float _988 = fma(_878, cbSceneParam._m0[7u].z, fma(_877, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _876));
    uint _1002 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1008 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * cbInstanceData._m0[_1002].x;
    float _1009 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_1002].y;
    float _1010 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_1002].z;
    float _4177 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _4188 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _4199 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1013 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _1014 = 1.0 - _884;
    float _1015 = _1011 * _1014;
    float _1016 = _1012 * _1014;
    float _1017 = _1013 * _1014;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _884;
    float _1023 = (_1012 + (-0.039999999105930328369140625)) * _884;
    float _1024 = (_1013 + (-0.039999999105930328369140625)) * _884;
    float _1025 = _1022 + 0.039999999105930328369140625;
    float _1027 = _1023 + 0.039999999105930328369140625;
    float _1028 = _1024 + 0.039999999105930328369140625;
    vec4 _1037 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _963, cbSceneParam._m0[86u].y * _964));
    float _1041 = ((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * TEXCOORD_5.w) * _1037.x;
    float _1042 = dot(vec3(_876, _877, _878), vec3(_955, _956, _957));
    float _1045 = _1042 * 2.0;
    float _1049 = (_1045 * _876) - _955;
    float _1050 = (_1045 * _877) - _956;
    float _1051 = (_1045 * _878) - _957;
    float _1055 = abs(dot(vec3(_955, _956, _957), vec3(_876, _877, _878)));
    float _4210 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1057 = sqrt(_879);
    float _1070 = exp2((_1057 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1057 * 3.0));
    float _1076 = (1.0 - _1070) * ((_1057 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1077 = _1070 * _1057;
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1113 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1414;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1139 = fma(_1113, cbModelParam._m0[26u].z, fma(_1109, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1105));
        float _1143 = fma(_1113, cbModelParam._m0[27u].z, fma(_1109, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1105));
        float _1147 = fma(_1113, cbModelParam._m0[28u].z, fma(_1109, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1105));
        float _1172 = _1105 + _876;
        float _1173 = _1109 + _877;
        float _1174 = _1113 + _878;
        float _1184 = fma(_1174, cbModelParam._m0[26u].z, fma(_1173, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1172)) - _1139;
        float _1185 = fma(_1174, cbModelParam._m0[27u].z, fma(_1173, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1172)) - _1143;
        float _1186 = fma(_1174, cbModelParam._m0[28u].z, fma(_1173, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1172)) - _1147;
        float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
        float _1203 = ((_1190 * _1184) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1139 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1190 * _1185) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1143 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1190 * _1186) / cbModelParam._m0[34u].z) + ((((((_1147 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        float _1242 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1208.x + (-0.5));
        float _1244 = _1242 * (_1208.y + (-0.5));
        float _1245 = _1242 * (_1208.z + (-0.5));
        float _1252 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1215.x + (-0.5));
        float _1254 = _1252 * (_1215.y + (-0.5));
        float _1255 = _1252 * (_1215.z + (-0.5));
        float _1262 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1222.x + (-0.5));
        float _1264 = _1262 * (_1222.y + (-0.5));
        float _1265 = _1262 * (_1222.z + (-0.5));
        float _1272 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1229.x + (-0.5));
        float _1274 = _1272 * (_1229.y + (-0.5));
        float _1275 = _1272 * (_1229.z + (-0.5));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = _1243 * 0.5;
        float _1280 = _1253 * 0.5;
        float _1281 = _1263 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1296 = (dot(vec3(_876, _877, _878), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1306 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4258 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1308 + 1.0))) + _1313) * _1276;
        float _1323 = _1244 * 0.5;
        float _1324 = _1254 * 0.5;
        float _1325 = _1264 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_876, _877, _878), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4291 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1350 + 1.0))) + _1355) * _1277;
        float _1365 = _1245 * 0.5;
        float _1366 = _1255 * 0.5;
        float _1367 = _1265 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_876, _877, _878), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4324 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1392 + 1.0))) + _1397) * _1278;
        _1414 = _1245;
        _1416 = _1244;
        _1417 = _1243;
        _1418 = _1255;
        _1419 = _1254;
        _1420 = _1253;
        _1421 = _1265;
        _1422 = _1264;
        _1423 = _1263;
        _1424 = _1278;
        _1425 = _1277;
        _1426 = _1276;
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1429 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
    }
    else
    {
        _1414 = _1415;
        _1416 = _1415;
        _1417 = _1415;
        _1418 = _1415;
        _1419 = _1415;
        _1420 = _1415;
        _1421 = _1415;
        _1422 = _1415;
        _1423 = _1415;
        _1424 = _1415;
        _1425 = _1415;
        _1426 = _1415;
        _1427 = 0.0;
        _1428 = 0.0;
        _1429 = 0.0;
    }
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1453 = fma(_1113, cbModelParam._m0[30u].z, fma(_1109, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1105));
        float _1457 = fma(_1113, cbModelParam._m0[31u].z, fma(_1109, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1105));
        float _1461 = fma(_1113, cbModelParam._m0[32u].z, fma(_1109, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1105));
        float _1484 = _1105 + _876;
        float _1485 = _1109 + _877;
        float _1486 = _1113 + _878;
        float _1496 = fma(_1486, cbModelParam._m0[30u].z, fma(_1485, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1484)) - _1453;
        float _1497 = fma(_1486, cbModelParam._m0[31u].z, fma(_1485, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1484)) - _1457;
        float _1498 = fma(_1486, cbModelParam._m0[32u].z, fma(_1485, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1484)) - _1461;
        float _1502 = inversesqrt(dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498)));
        float _1515 = ((_1502 * _1496) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1453 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1502 * _1497) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1457 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1502 * _1498) / cbModelParam._m0[35u].z) + ((((((_1461 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        float _1552 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1519.x + (-0.5));
        float _1554 = _1552 * (_1519.y + (-0.5));
        float _1555 = _1552 * (_1519.z + (-0.5));
        float _1562 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1526.x + (-0.5));
        float _1564 = _1562 * (_1526.y + (-0.5));
        float _1565 = _1562 * (_1526.z + (-0.5));
        float _1572 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1533.x + (-0.5));
        float _1574 = _1572 * (_1533.y + (-0.5));
        float _1575 = _1572 * (_1533.z + (-0.5));
        float _1582 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1540.x + (-0.5));
        float _1584 = _1582 * (_1540.y + (-0.5));
        float _1585 = _1582 * (_1540.z + (-0.5));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = _1553 * 0.5;
        float _1590 = _1563 * 0.5;
        float _1591 = _1573 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_876, _877, _878), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4387 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1616 + 1.0))) + _1621) * _1586;
        float _1631 = _1554 * 0.5;
        float _1632 = _1564 * 0.5;
        float _1633 = _1574 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_876, _877, _878), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4420 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1658 + 1.0))) + _1663) * _1587;
        float _1673 = _1555 * 0.5;
        float _1674 = _1565 * 0.5;
        float _1675 = _1575 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_876, _877, _878), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4453 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1700 + 1.0))) + _1705) * _1588;
        _1722 = _1555;
        _1723 = _1554;
        _1724 = _1553;
        _1725 = _1565;
        _1726 = _1564;
        _1727 = _1563;
        _1728 = _1575;
        _1729 = _1574;
        _1730 = _1573;
        _1731 = _1588;
        _1732 = _1587;
        _1733 = _1586;
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
    }
    else
    {
        _1722 = _1415;
        _1723 = _1415;
        _1724 = _1415;
        _1725 = _1415;
        _1726 = _1415;
        _1727 = _1415;
        _1728 = _1415;
        _1729 = _1415;
        _1730 = _1415;
        _1731 = _1415;
        _1732 = _1415;
        _1733 = _1415;
        _1734 = 0.0;
        _1735 = 0.0;
        _1736 = 0.0;
    }
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1427)) + _1427;
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1428)) + _1428;
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1429)) + _1429;
    float _1769 = fma(_1748, cbSceneParam._m0[89u].z, fma(_1747, cbSceneParam._m0[89u].y, _1746 * cbSceneParam._m0[89u].x));
    float _1772 = fma(_1748, cbSceneParam._m0[90u].z, fma(_1747, cbSceneParam._m0[90u].y, _1746 * cbSceneParam._m0[90u].x));
    float _1775 = fma(_1748, cbSceneParam._m0[91u].z, fma(_1747, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1746));
    float _1790 = _1049 * 0.5;
    float _1791 = _1050 * 0.5;
    float _1792 = _1051 * 0.5;
    float _1793 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1796 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1799 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1833;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1806 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1414, _1418, _1421, _1424));
        float _1810 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1416, _1419, _1422, _1425));
        float _1814 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1417, _1420, _1423, _1426));
        float _1821 = dot(vec4(cbModelParam._m0[39u]), vec4(_1790, _1791, _1792, 1.0));
        _1833 = dot(vec3(isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1821) ? 0.0 : (isnan(0.0) ? _1821 : max(0.0, _1821))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1833 = 1.0;
    }
    float _1844;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1835 = dot(vec4(cbModelParam._m0[40u]), vec4(_1790, _1791, _1792, 1.0));
        _1844 = dot(vec3(isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1835) ? 0.0 : (isnan(0.0) ? _1835 : max(0.0, _1835))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1844 = 1.0;
    }
    float _1848 = (_1844 * cbModelParam._m0[1u].x) + (_1833 * (1.0 - cbModelParam._m0[1u].x));
    float _1858 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _879);
    float _1859 = isnan(_1858) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1858 : min(cbModelParam._m0[25u].z, _1858));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1907 = fma(_1113, cbModelParam._m0[13u].z, fma(_1109, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1105)) + cbModelParam._m0[13u].w;
        float _1911 = fma(_1113, cbModelParam._m0[14u].z, fma(_1109, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1105)) + cbModelParam._m0[14u].w;
        float _1915 = fma(_1113, cbModelParam._m0[15u].z, fma(_1109, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1105)) + cbModelParam._m0[15u].w;
        float _1918 = fma(_1051, cbModelParam._m0[13u].z, fma(_1050, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1049));
        float _1921 = fma(_1051, cbModelParam._m0[14u].z, fma(_1050, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1049));
        float _1924 = fma(_1051, cbModelParam._m0[15u].z, fma(_1050, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1049));
        float _1952;
        if (_1918 > 0.0)
        {
            _1952 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1952 = frontier_phi_14_12_ladder;
        }
        float _2124;
        if (_1921 > 0.0)
        {
            _2124 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2124 = frontier_phi_23_19_ladder;
        }
        float _2419;
        if (_1924 > 0.0)
        {
            _2419 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2419 = frontier_phi_35_30_ladder;
        }
        float _2421 = isnan(_2124) ? _1952 : (isnan(_1952) ? _2124 : min(_1952, _2124));
        float _2422 = isnan(_2419) ? _2421 : (isnan(_2421) ? _2419 : min(_2421, _2419));
        float _2426 = (_2422 * _1918) + _1907;
        float _2427 = (_2422 * _1921) + _1911;
        float _2428 = (_2422 * _1924) + _1915;
        float _2429 = _2422 * 9.9999997473787516355514526367188e-05;
        float _2431 = (-1.0) - _2429;
        float _2433 = _2429 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2428 > _2433) || ((_2428 < _2431) || ((_2427 > _2433) || ((_2427 < _2431) || ((_2426 < _2431) || (_2426 > _2433))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2428, cbModelParam._m0[9u].z, fma(_2427, cbModelParam._m0[9u].y, _2426 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2428, cbModelParam._m0[10u].z, fma(_2427, cbModelParam._m0[10u].y, _2426 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2428, cbModelParam._m0[11u].z, fma(_2427, cbModelParam._m0[11u].y, _2426 * cbModelParam._m0[11u].x))), _1859);
            frontier_phi_13_35_ladder = _2573.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2573.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2573.x * cbModelParam._m0[1u].y;
        }
        _1940 = frontier_phi_13_35_ladder_2;
        _1942 = frontier_phi_13_35_ladder_1;
        _1944 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1049, _1050, _1051), _1859);
        _1940 = _1928.x * cbModelParam._m0[1u].y;
        _1942 = _1928.y * cbModelParam._m0[1u].y;
        _1944 = _1928.z * cbModelParam._m0[1u].y;
    }
    float _1948 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _879);
    float _1949 = isnan(_1948) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1948 : min(cbModelParam._m0[25u].w, _1948));
    float _2039;
    float _2041;
    float _2043;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2003 = fma(_1113, cbModelParam._m0[21u].z, fma(_1109, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1105)) + cbModelParam._m0[21u].w;
        float _2007 = fma(_1113, cbModelParam._m0[22u].z, fma(_1109, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1105)) + cbModelParam._m0[22u].w;
        float _2011 = fma(_1113, cbModelParam._m0[23u].z, fma(_1109, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1105)) + cbModelParam._m0[23u].w;
        float _2014 = fma(_1051, cbModelParam._m0[21u].z, fma(_1050, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1049));
        float _2017 = fma(_1051, cbModelParam._m0[22u].z, fma(_1050, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1049));
        float _2020 = fma(_1051, cbModelParam._m0[23u].z, fma(_1050, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1049));
        float _2129;
        if (_2014 > 0.0)
        {
            _2129 = abs((1.0 - _2003) / _2014);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2003 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2129 = frontier_phi_25_21_ladder;
        }
        float _2446;
        if (_2017 > 0.0)
        {
            _2446 = abs((1.0 - _2007) / _2017);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2007 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2446 = frontier_phi_37_32_ladder;
        }
        float _2784;
        if (_2020 > 0.0)
        {
            _2784 = abs((1.0 - _2011) / _2020);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2011 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2784 = frontier_phi_47_44_ladder;
        }
        float _2786 = isnan(_2446) ? _2129 : (isnan(_2129) ? _2446 : min(_2129, _2446));
        float _2787 = isnan(_2784) ? _2786 : (isnan(_2786) ? _2784 : min(_2786, _2784));
        float _2791 = (_2787 * _2014) + _2003;
        float _2792 = (_2787 * _2017) + _2007;
        float _2793 = (_2787 * _2020) + _2011;
        float _2794 = _2787 * 9.9999997473787516355514526367188e-05;
        float _2795 = (-1.0) - _2794;
        float _2797 = _2794 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2793 > _2797) || ((_2793 < _2795) || ((_2792 > _2797) || ((_2792 < _2795) || ((_2791 < _2795) || (_2791 > _2797))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2915 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2793, cbModelParam._m0[17u].z, fma(_2792, cbModelParam._m0[17u].y, _2791 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2793, cbModelParam._m0[18u].z, fma(_2792, cbModelParam._m0[18u].y, _2791 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2793, cbModelParam._m0[19u].z, fma(_2792, cbModelParam._m0[19u].y, _2791 * cbModelParam._m0[19u].x))), _1949);
            frontier_phi_22_47_ladder = _2915.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2915.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2915.x * cbModelParam._m0[1u].z;
        }
        _2039 = frontier_phi_22_47_ladder_2;
        _2041 = frontier_phi_22_47_ladder_1;
        _2043 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1049, _1050, _1051), _1949);
        _2039 = _2023.x * cbModelParam._m0[1u].z;
        _2041 = _2023.y * cbModelParam._m0[1u].z;
        _2043 = _2023.z * cbModelParam._m0[1u].z;
    }
    float _2056 = (((_1076 * _1025) + _1077) * _1041) * ((cbModelParam._m0[1u].w * (_2039 - _1940)) + _1940);
    float _2058 = (((_1076 * _1027) + _1077) * _1041) * ((cbModelParam._m0[1u].w * (_2041 - _1942)) + _1942);
    float _2060 = (((_1076 * _1028) + _1077) * _1041) * ((cbModelParam._m0[1u].w * (_2043 - _1944)) + _1944);
    float _2063 = fma(_2060, cbSceneParam._m0[89u].z, fma(_2058, cbSceneParam._m0[89u].y, _2056 * cbSceneParam._m0[89u].x));
    float _2066 = fma(_2060, cbSceneParam._m0[90u].z, fma(_2058, cbSceneParam._m0[90u].y, _2056 * cbSceneParam._m0[90u].x));
    float _2069 = fma(_2060, cbSceneParam._m0[91u].z, fma(_2058, cbSceneParam._m0[91u].y, _2056 * cbSceneParam._m0[91u].x));
    float _2103 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2107 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2111 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2115 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2116 = _2103 / _2115;
    float _2117 = _2107 / _2115;
    float _2118 = _2111 / _2115;
    float _2265;
    float _2266;
    float _2267;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2145 = ((uint(_2118 > cbSceneParam._m0[59u].y) + uint(_2118 > cbSceneParam._m0[59u].x)) + uint(_2118 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2146 = _2145 + 43u;
        uint _2154 = _2145 + 44u;
        uint _2162 = _2145 + 45u;
        uint _2170 = _2145 + 46u;
        float _2181 = fma(_2115, cbSceneParam._m0[_2146].w, fma(_2111, cbSceneParam._m0[_2146].z, fma(_2107, cbSceneParam._m0[_2146].y, _2103 * cbSceneParam._m0[_2146].x)));
        float _2185 = fma(_2115, cbSceneParam._m0[_2154].w, fma(_2111, cbSceneParam._m0[_2154].z, fma(_2107, cbSceneParam._m0[_2154].y, _2103 * cbSceneParam._m0[_2154].x)));
        float _2193 = fma(_2115, cbSceneParam._m0[_2170].w, fma(_2111, cbSceneParam._m0[_2170].z, fma(_2107, cbSceneParam._m0[_2170].y, _2103 * cbSceneParam._m0[_2170].x)));
        float _2198 = cbSceneParam._m0[33u].z * _2193;
        float _2200 = cbSceneParam._m0[33u].w * _2193;
        float _2203 = fma(_2115, cbSceneParam._m0[_2162].w, fma(_2111, cbSceneParam._m0[_2162].z, fma(_2107, cbSceneParam._m0[_2162].y, _2103 * cbSceneParam._m0[_2162].x))) / _2193;
        float _2251 = (cbSceneParam._m0[33u].x - sqrt(((_2117 * _2117) + (_2116 * _2116)) + (_2118 * _2118))) * cbSceneParam._m0[33u].y;
        float _4579 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2258 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2198 + _2181) / _2193, (_2200 + _2185) / _2193), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2200 + _2181) / _2193, (_2185 - _2198) / _2193), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2181 - _2198) / _2193, (_2185 - _2200) / _2193), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2181 - _2200) / _2193, (_2198 + _2185) / _2193), _2203), 0.0)).x), vec4(0.25)));
        _2265 = 1.0 - (_2258 * cbSceneParam._m0[34u].x);
        _2266 = 1.0 - (_2258 * cbSceneParam._m0[34u].y);
        _2267 = 1.0 - (_2258 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2265 = 1.0;
        _2266 = 1.0;
        _2267 = 1.0;
    }
    float _2331;
    float _2333;
    float _2335;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2319 = fma(_2115, cbSceneParam._m0[63u].w, fma(_2111, cbSceneParam._m0[63u].z, fma(_2107, cbSceneParam._m0[63u].y, _2103 * cbSceneParam._m0[63u].x)));
        float _2320 = fma(_2115, cbSceneParam._m0[60u].w, fma(_2111, cbSceneParam._m0[60u].z, fma(_2107, cbSceneParam._m0[60u].y, _2103 * cbSceneParam._m0[60u].x))) / _2319;
        float _2321 = fma(_2115, cbSceneParam._m0[61u].w, fma(_2111, cbSceneParam._m0[61u].z, fma(_2107, cbSceneParam._m0[61u].y, _2103 * cbSceneParam._m0[61u].x))) / _2319;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2320 >= cbSceneParam._m0[64u].x) && (_2321 >= cbSceneParam._m0[64u].y)) && (_2320 <= cbSceneParam._m0[64u].z)) && (_2321 <= cbSceneParam._m0[64u].w))
        {
            float _2459 = fma(_2115, cbSceneParam._m0[62u].w, fma(_2111, cbSceneParam._m0[62u].z, fma(_2107, cbSceneParam._m0[62u].y, _2103 * cbSceneParam._m0[62u].x))) / _2319;
            float _2463 = isnan(cbSceneParam._m0[41u].w) ? _2459 : (isnan(_2459) ? cbSceneParam._m0[41u].w : max(_2459, cbSceneParam._m0[41u].w));
            float _2506 = (cbSceneParam._m0[33u].x - sqrt(((_2117 * _2117) + (_2116 * _2116)) + (_2118 * _2118))) * cbSceneParam._m0[33u].y;
            float _4595 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
            float _2513 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2320, cbSceneParam._m0[33u].w + _2321), _2463), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2320, _2321 - cbSceneParam._m0[33u].z), _2463), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2320 - cbSceneParam._m0[33u].z, _2321 - cbSceneParam._m0[33u].w), _2463), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2320 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2321), _2463), 0.0)).x), vec4(0.25)));
            float _2517 = 1.0 - (_2513 * cbSceneParam._m0[34u].x);
            float _2518 = 1.0 - (_2513 * cbSceneParam._m0[34u].y);
            float _2519 = 1.0 - (_2513 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2519) ? _2267 : (isnan(_2267) ? _2519 : min(_2267, _2519));
            frontier_phi_34_33_ladder_1 = isnan(_2518) ? _2266 : (isnan(_2266) ? _2518 : min(_2266, _2518));
            frontier_phi_34_33_ladder_2 = isnan(_2517) ? _2265 : (isnan(_2265) ? _2517 : min(_2265, _2517));
        }
        else
        {
            frontier_phi_34_33_ladder = _2267;
            frontier_phi_34_33_ladder_1 = _2266;
            frontier_phi_34_33_ladder_2 = _2265;
        }
        _2331 = frontier_phi_34_33_ladder_2;
        _2333 = frontier_phi_34_33_ladder_1;
        _2335 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2331 = _2265;
        _2333 = _2266;
        _2335 = _2267;
    }
    uvec4 _2340 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2342 = _2340.x * 14u;
    uint _2343 = _2342 + 13u;
    float _2350 = _1041 + (-1.0);
    float _2355 = (cbLight._m0[_2343].x * _2350) + 1.0;
    float _2356 = (cbLight._m0[_2343].y * _2350) + 1.0;
    float _2357 = (cbLight._m0[_2343].z * _2350) + 1.0;
    float _2358 = (cbLight._m0[_2343].w * _2350) + 1.0;
    uint _2359 = _2342 + 5u;
    float _2365 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
    uint _2369 = _2342 + 4u;
    float _2378 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
    uint _2382 = _2342 | 1u;
    float _2393 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_876, _877, _878));
    float _2396 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_876, _877, _878));
    float _4631 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _4642 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2401 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * 0.3183098733425140380859375;
    float _2403 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * 0.3183098733425140380859375;
    float _2410 = ((cbLight._m0[_2359].x * _2365) * _2403) + (((cbLight._m0[_2369].x * _2331) * _2378) * _2401);
    float _2411 = ((_2365 * cbLight._m0[_2359].y) * _2403) + (((cbLight._m0[_2369].y * _2333) * _2378) * _2401);
    float _2412 = ((_2365 * cbLight._m0[_2359].z) * _2403) + (((cbLight._m0[_2369].z * _2335) * _2378) * _2401);
    uvec4 _2416 = floatBitsToUint(cbLight._m0[_2342 + 12u]);
    bool _2418 = _2416.x == 0u;
    float _2520;
    float _2522;
    float _2524;
    if (_2418)
    {
        _2520 = _2410;
        _2522 = _2411;
        _2524 = _2412;
    }
    else
    {
        uint _2528 = _2342 + 6u;
        float _2544 = (dot(vec3(cbLight._m0[_2342 + 2u].xyz), vec3(_876, _877, _878)) * 0.5) + 0.5;
        float _2545 = _2544 * _2544;
        float _4653 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2546 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2547 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
        _2520 = (((cbLight._m0[_2528].x * 0.3183098733425140380859375) * _2546) * _2547) + _2410;
        _2522 = (((cbLight._m0[_2528].y * 0.3183098733425140380859375) * _2546) * _2547) + _2411;
        _2524 = (((cbLight._m0[_2528].z * 0.3183098733425140380859375) * _2546) * _2547) + _2412;
    }
    bool _2527 = _2416.y == 0u;
    float _2582;
    float _2584;
    float _2586;
    if (_2527)
    {
        _2582 = _2520;
        _2584 = _2522;
        _2586 = _2524;
    }
    else
    {
        uint _2755 = _2342 + 7u;
        float _2771 = (dot(vec3(cbLight._m0[_2342 + 3u].xyz), vec3(_876, _877, _878)) * 0.5) + 0.5;
        float _2772 = _2771 * _2771;
        float _4669 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2773 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2774 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
        _2582 = (((cbLight._m0[_2755].x * 0.3183098733425140380859375) * _2773) * _2774) + _2520;
        _2584 = (((cbLight._m0[_2755].y * 0.3183098733425140380859375) * _2773) * _2774) + _2522;
        _2586 = (((cbLight._m0[_2755].z * 0.3183098733425140380859375) * _2773) * _2774) + _2524;
    }
    uint _2589 = _2342 + 8u;
    float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _879) * 0.949999988079071044921875);
    float _2603 = _2602 * _2602;
    float _2604 = cbLight._m0[_2342].x + _955;
    float _2605 = cbLight._m0[_2342].y + _956;
    float _2606 = cbLight._m0[_2342].z + _957;
    float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
    float _2611 = _2610 * _2604;
    float _2612 = _2610 * _2605;
    float _2613 = _2610 * _2606;
    float _2614 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2342].xyz));
    float _4685 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _4696 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _2618 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _2619 = dot(vec3(_876, _877, _878), vec3(_2611, _2612, _2613));
    float _4707 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2622 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2623 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2611, _2612, _2613));
    float _4718 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2627 = _2603 * _2603;
    float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
    float _2639 = exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0);
    float _2640 = 0.959999978542327880859375 - _1022;
    float _2642 = 0.959999978542327880859375 - _1023;
    float _2643 = 0.959999978542327880859375 - _1024;
    float _2650 = 1.0 - _2603;
    float _2661 = (0.5 / (((_2618 * ((_2617 * _2650) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2618 * _2650) + _2603) * _2617))) * _2617;
    float _4729 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2663 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
    uint _2677 = _2342 + 9u;
    float _2688 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _879) * 0.949999988079071044921875);
    float _2689 = _2688 * _2688;
    float _2690 = cbLight._m0[_2382].x + _955;
    float _2691 = cbLight._m0[_2382].y + _956;
    float _2692 = cbLight._m0[_2382].z + _957;
    float _2696 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
    float _2697 = _2696 * _2690;
    float _2698 = _2696 * _2691;
    float _2699 = _2696 * _2692;
    float _2700 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2382].xyz));
    float _4740 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2703 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _2704 = dot(vec3(_876, _877, _878), vec3(_2697, _2698, _2699));
    float _4751 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2707 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2708 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2697, _2698, _2699));
    float _4762 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2712 = _2689 * _2689;
    float _2716 = ((_2707 * _2707) * (_2712 + (-1.0))) + 1.0;
    float _2723 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
    float _2730 = 1.0 - _2689;
    float _2740 = (0.5 / (((_2618 * ((_2703 * _2730) + _2689)) + 9.9999999392252902907785028219223e-09) + (((_2618 * _2730) + _2689) * _2703))) * _2703;
    float _4773 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
    float _2742 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2712 / ((_2716 * _2716) * 3.141590118408203125));
    float _2752 = (((((_2723 * _2640) + _1025) * cbLight._m0[_2677].x) * _2742) * _2365) + ((((cbLight._m0[_2589].x * _2331) * ((_2639 * _2640) + _1025)) * _2663) * _2378);
    float _2753 = (((((_2723 * _2642) + _1027) * cbLight._m0[_2677].y) * _2742) * _2365) + ((((cbLight._m0[_2589].y * _2333) * ((_2639 * _2642) + _1027)) * _2663) * _2378);
    float _2754 = (((((_2723 * _2643) + _1028) * cbLight._m0[_2677].z) * _2742) * _2365) + ((((cbLight._m0[_2589].z * _2335) * ((_2639 * _2643) + _1028)) * _2663) * _2378);
    float _2810;
    float _2812;
    float _2814;
    if (_2418)
    {
        _2810 = _2752;
        _2812 = _2753;
        _2814 = _2754;
    }
    else
    {
        uint _2816 = _2342 + 2u;
        uint _2820 = _2342 + 10u;
        float _2834 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2816].w)) * _879) * 0.949999988079071044921875);
        float _2835 = _2834 * _2834;
        float _2836 = cbLight._m0[_2816].x + _955;
        float _2837 = cbLight._m0[_2816].y + _956;
        float _2838 = cbLight._m0[_2816].z + _957;
        float _2842 = inversesqrt(dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838)));
        float _2843 = _2842 * _2836;
        float _2844 = _2842 * _2837;
        float _2845 = _2842 * _2838;
        float _2846 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2816].xyz));
        float _4784 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2849 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2850 = dot(vec3(_876, _877, _878), vec3(_2843, _2844, _2845));
        float _4795 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2853 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2854 = dot(vec3(cbLight._m0[_2816].xyz), vec3(_2843, _2844, _2845));
        float _4806 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2858 = _2835 * _2835;
        float _2862 = ((_2853 * _2853) * (_2858 + (-1.0))) + 1.0;
        float _2869 = exp2(log2(1.0 - (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) * 5.0);
        float _2876 = 1.0 - _2835;
        float _2886 = (0.5 / (((_2618 * ((_2849 * _2876) + _2835)) + 9.9999999392252902907785028219223e-09) + (((_2618 * _2876) + _2835) * _2849))) * _2849;
        float _4817 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2888 = (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2858 / ((_2862 * _2862) * 3.141590118408203125));
        float _2889 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
        _2810 = (((((_2869 * _2640) + _1025) * cbLight._m0[_2820].x) * _2888) * _2889) + _2752;
        _2812 = (((((_2869 * _2642) + _1027) * cbLight._m0[_2820].y) * _2888) * _2889) + _2753;
        _2814 = (((((_2869 * _2643) + _1028) * cbLight._m0[_2820].z) * _2888) * _2889) + _2754;
    }
    float _2920;
    float _2922;
    float _2924;
    if (_2527)
    {
        _2920 = _2810;
        _2922 = _2812;
        _2924 = _2814;
    }
    else
    {
        uint _2931 = _2342 + 3u;
        uint _2935 = _2342 + 11u;
        float _2949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2931].w)) * _879) * 0.949999988079071044921875);
        float _2950 = _2949 * _2949;
        float _2951 = cbLight._m0[_2931].x + _955;
        float _2952 = cbLight._m0[_2931].y + _956;
        float _2953 = cbLight._m0[_2931].z + _957;
        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
        float _2958 = _2957 * _2951;
        float _2959 = _2957 * _2952;
        float _2960 = _2957 * _2953;
        float _2961 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2931].xyz));
        float _4833 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2964 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2965 = dot(vec3(_876, _877, _878), vec3(_2958, _2959, _2960));
        float _4844 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2968 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2969 = dot(vec3(cbLight._m0[_2931].xyz), vec3(_2958, _2959, _2960));
        float _4855 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        float _2973 = _2950 * _2950;
        float _2977 = ((_2968 * _2968) * (_2973 + (-1.0))) + 1.0;
        float _2984 = exp2(log2(1.0 - (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) * 5.0);
        float _2991 = 1.0 - _2950;
        float _3001 = (0.5 / (((_2618 * ((_2964 * _2991) + _2950)) + 9.9999999392252902907785028219223e-09) + (((_2618 * _2991) + _2950) * _2964))) * _2964;
        float _4866 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        float _3003 = (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2973 / ((_2977 * _2977) * 3.141590118408203125));
        float _3004 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
        _2920 = (((((_2984 * _2640) + _1025) * cbLight._m0[_2935].x) * _3003) * _3004) + _2810;
        _2922 = (((((_2984 * _2642) + _1027) * cbLight._m0[_2935].y) * _3003) * _3004) + _2812;
        _2924 = (((((_2984 * _2643) + _1028) * cbLight._m0[_2935].z) * _3003) * _3004) + _2814;
    }
    float _3070;
    float _3072;
    float _3074;
    float _3076;
    float _3078;
    float _3080;
    if (_2340.y == 0u)
    {
        uvec4 _3025 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3026 = _3025.x;
        uint _3037 = uint((float(_3025.y) * floor(float(uint(cbSceneParam._m0[85u].y * _964) / _3026))) + floor(float(uint(cbSceneParam._m0[85u].x * _963) / _3026)));
        float _3047 = (log2(_2118 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3048 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
        uint _3051 = uint(isnan(14.0) ? _3048 : (isnan(_3048) ? 14.0 : min(_3048, 14.0)));
        uvec4 _3056 = texelFetch(g_lightClusterGridBuffer, int(((_3051 << 2u) + (_3037 << 6u)) >> 2u));
        uint _3057 = _3056.x;
        uint _3058 = _3025.z;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        if (((((1u << ((_3058 >> 4u) & 15u)) + 4294967295u) & _3057) == 0u) || ((_3058 & 240u) == 0u))
        {
            _3137 = 0.0;
            _3139 = 0.0;
            _3141 = 0.0;
            _3143 = 0.0;
            _3145 = 0.0;
            _3147 = 0.0;
        }
        else
        {
            float _3138;
            float _3140;
            float _3142;
            float _3144;
            float _3146;
            float _3148;
            float _3282 = 0.0;
            float _3283 = 0.0;
            float _3284 = 0.0;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            uint _3288 = 0u;
            uint _3297;
            bool _3298;
            for (;;)
            {
                _3297 = texelFetch(g_lightClassification, int((((_3051 << 5u) + (_3037 << 9u)) + (_3288 << 2u)) >> 2u)).x;
                _3298 = _3297 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3298)
                {
                    frontier_phi_66_pred = _3287;
                    frontier_phi_66_pred_1 = _3286;
                    frontier_phi_66_pred_2 = _3285;
                    frontier_phi_66_pred_3 = _3284;
                    frontier_phi_66_pred_4 = _3283;
                    frontier_phi_66_pred_5 = _3282;
                }
                else
                {
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    uint _3412;
                    _3406 = _3282;
                    _3407 = _3283;
                    _3408 = _3284;
                    _3409 = _3285;
                    _3410 = _3286;
                    _3411 = _3287;
                    _3412 = _3297;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    for (;;)
                    {
                        uint _3416 = uint(findLSB(_3412)) + (_3288 << 5u);
                        uint _3413 = (_3412 + 4294967295u) & _3412;
                        uint _3418 = _3416 * 48u;
                        vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 3u)).x));
                        uint _3438 = (_3416 * 48u) + 4u;
                        vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3438)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 3u)).x));
                        uint _3457 = (_3416 * 48u) + 8u;
                        vec3 _3468 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3457)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 2u)).x));
                        float _3472 = _3432.x - _2116;
                        float _3473 = _3432.y - _2117;
                        float _3474 = _3432.z - _2118;
                        float _3475 = dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474));
                        float _3478 = inversesqrt(_3475);
                        float _3479 = _3478 * _3472;
                        float _3480 = _3478 * _3473;
                        float _3481 = _3478 * _3474;
                        float _3482 = dot(vec3(_982, _985, _988), vec3(_3479, _3480, _3481));
                        float _3487 = 1.0 - (_3475 * _3432.w);
                        float _4892 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3488 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                        float _3489 = sqrt(_3475) * _3451.w;
                        float _3492 = 1.39999997615814208984375 / (_3489 + 1.39999997615814208984375);
                        float _3493 = _3492 * _3492;
                        float _3496 = ((1.0 - _3493) * _3482) + _3493;
                        float _3499 = _3489 * _3489;
                        float _3503 = ((isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0))) * _3488) / ((_3499 * 0.699999988079071044921875) + 1.0);
                        float _3507 = (-0.0) - _2116;
                        float _3508 = (-0.0) - _2117;
                        float _3509 = (-0.0) - _2118;
                        float _3513 = inversesqrt(dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509)));
                        float _3514 = _3513 * _3507;
                        float _3515 = _3513 * _3508;
                        float _3516 = _3513 * _3509;
                        float _3523 = exp2(log2(1.0 / ((_3499 * 3.5) + 5.0)) * 0.25);
                        float _3524 = 1.0 - _1057;
                        float _3531 = sqrt(1.0 - ((1.0 - (_3524 * _3524)) * (1.0 - (_3523 * _3523))));
                        float _3532 = _3531 * _3531;
                        float _3533 = _3532 * _3532;
                        float _3534 = _3514 + _3479;
                        float _3535 = _3515 + _3480;
                        float _3536 = _3516 + _3481;
                        float _3540 = inversesqrt(dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536)));
                        float _3544 = dot(vec3(_982, _985, _988), vec3(_3514, _3515, _3516));
                        float _4908 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3547 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3548 = dot(vec3(_982, _985, _988), vec3(_3540 * _3534, _3540 * _3535, _3540 * _3536));
                        float _4919 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3551 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                        float _3555 = ((_3551 * _3551) * (_3533 + (-1.0))) + 1.0;
                        float _3556 = _3492 * _3532;
                        float _3557 = _3556 * _3556;
                        float _3560 = ((1.0 - _3557) * _3482) + _3557;
                        float _4930 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3561 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3562 = 1.0 - _3532;
                        float _3572 = (0.5 / (((_3561 * ((_3547 * _3562) + _3532)) + 9.9999999392252902907785028219223e-09) + (((_3561 * _3562) + _3532) * _3547))) * _3561;
                        float _4941 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3583 = (((_3533 * 3.1415927410125732421875) * (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0)))) / ((_3555 * _3555) * ((_3499 * 2.1991131305694580078125) + 3.141590118408203125))) * _3488;
                        _3341 = (_3503 * _3451.x) + _3409;
                        _3342 = (_3503 * _3451.y) + _3410;
                        _3343 = (_3503 * _3451.z) + _3411;
                        _3338 = (_3583 * _3468.x) + _3406;
                        _3339 = (_3583 * _3468.y) + _3407;
                        _3340 = (_3583 * _3468.z) + _3408;
                        if (_3413 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3406 = _3338;
                            _3407 = _3339;
                            _3408 = _3340;
                            _3409 = _3341;
                            _3410 = _3342;
                            _3411 = _3343;
                            _3412 = _3413;
                        }
                    }
                    frontier_phi_66_pred = _3343;
                    frontier_phi_66_pred_1 = _3342;
                    frontier_phi_66_pred_2 = _3341;
                    frontier_phi_66_pred_3 = _3340;
                    frontier_phi_66_pred_4 = _3339;
                    frontier_phi_66_pred_5 = _3338;
                }
                _3148 = frontier_phi_66_pred;
                _3146 = frontier_phi_66_pred_1;
                _3144 = frontier_phi_66_pred_2;
                _3142 = frontier_phi_66_pred_3;
                _3140 = frontier_phi_66_pred_4;
                _3138 = frontier_phi_66_pred_5;
                uint _3289 = _3288 + 1u;
                if (_3289 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3282 = _3138;
                    _3283 = _3140;
                    _3284 = _3142;
                    _3285 = _3144;
                    _3286 = _3146;
                    _3287 = _3148;
                    _3288 = _3289;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3137 = _3138;
            _3139 = _3140;
            _3141 = _3142;
            _3143 = _3144;
            _3145 = _3146;
            _3147 = _3148;
        }
        uvec4 _3151 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3152 = _3151.z;
        uint _3154 = (_3152 >> 8u) & 15u;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        float _3258;
        float _3260;
        if (((4294967295u << _3154) & _3057) == 0u)
        {
            _3250 = _3137;
            _3252 = _3139;
            _3254 = _3141;
            _3256 = _3143;
            _3258 = _3145;
            _3260 = _3147;
        }
        else
        {
            float _3275 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
            float _3276 = _3275 * _2116;
            float _3277 = _3275 * _2117;
            float _3278 = _3275 * _2118;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3154 < ((_3152 >> 12u) & 15u))
            {
                float _3251;
                float _3253;
                float _3255;
                float _3257;
                float _3259;
                float _3261;
                float _3389 = _3137;
                float _3390 = _3139;
                float _3391 = _3141;
                float _3392 = _3143;
                float _3393 = _3145;
                float _3394 = _3147;
                uint _3395 = _3154;
                uint _3404;
                bool _3405;
                for (;;)
                {
                    _3404 = texelFetch(g_lightClassification, int((((_3051 << 5u) + (_3037 << 9u)) + (_3395 << 2u)) >> 2u)).x;
                    _3405 = _3404 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3405)
                    {
                        frontier_phi_72_pred = _3394;
                        frontier_phi_72_pred_1 = _3393;
                        frontier_phi_72_pred_2 = _3392;
                        frontier_phi_72_pred_3 = _3391;
                        frontier_phi_72_pred_4 = _3390;
                        frontier_phi_72_pred_5 = _3389;
                    }
                    else
                    {
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3881;
                        float _3882;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3601 = _3389;
                        float _3602 = _3390;
                        float _3603 = _3391;
                        float _3604 = _3392;
                        float _3605 = _3393;
                        float _3606 = _3394;
                        uint _3607 = _3404;
                        uint _3608;
                        vec4 _3633;
                        float _3634;
                        vec4 _3649;
                        vec3 _3661;
                        vec4 _3676;
                        vec4 _3691;
                        float _3737;
                        bool _3738;
                        for (;;)
                        {
                            uint _3618 = ((_3395 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3607));
                            _3608 = (_3607 + 4294967295u) & _3607;
                            uint _3620 = _3618 * 40u;
                            _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            _3634 = _3633.w;
                            uint _3636 = (_3618 * 40u) + 4u;
                            _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            uint _3651 = (_3618 * 40u) + 8u;
                            _3661 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x));
                            uint _3663 = (_3618 * 40u) + 16u;
                            _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3678 = (_3618 * 40u) + 20u;
                            _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            uint _3693 = (_3618 * 40u) + 24u;
                            vec4 _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            uint _3712 = (_3618 * 40u) + 28u;
                            vec4 _3725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 3u)).x));
                            _3737 = fma(_2118, _3725.z, fma(_2117, _3725.y, _3725.x * _2116)) + _3725.w;
                            _3738 = !((fma(_2118, _3706.z, fma(_2117, _3706.y, _3706.x * _2116)) + _3706.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3738)
                            {
                                float _3765 = _3633.x - _2116;
                                float _3766 = _3633.y - _2117;
                                float _3767 = _3633.z - _2118;
                                float _3768 = dot(vec3(_3765, _3766, _3767), vec3(_3765, _3766, _3767));
                                float _3771 = inversesqrt(_3768);
                                float _3772 = _3771 * _3765;
                                float _3773 = _3771 * _3766;
                                float _3774 = _3771 * _3767;
                                float _3778 = 1.0 - (_3768 / (_3634 * _3634));
                                float _4952 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3779 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3783 = sqrt(_3768) * _3649.w;
                                float _3785 = 1.39999997615814208984375 / (_3783 + 1.39999997615814208984375);
                                float _3786 = _3785 * _3785;
                                float _3789 = ((1.0 - _3786) * dot(vec3(_3772, _3773, _3774), vec3(_982, _985, _988))) + _3786;
                                float _3792 = _3783 * _3783;
                                float _3796 = (fma(_2118, _3676.z, fma(_2117, _3676.y, _3676.x * _2116)) + _3676.w) / _3737;
                                float _3797 = (fma(_2118, _3691.z, fma(_2117, _3691.y, _3691.x * _2116)) + _3691.w) / _3737;
                                float _3801 = 1.0 - dot(vec2(_3796, _3797), vec2(_3796, _3797));
                                float _4968 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3802 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3803 = _3802 * (((isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0))) * _3779) / ((_3792 * 0.699999988079071044921875) + 1.0));
                                float _3815 = exp2(log2(1.0 / ((_3792 * 3.5) + 5.0)) * 0.25);
                                float _3816 = 1.0 - _1057;
                                float _3823 = sqrt(1.0 - ((1.0 - (_3816 * _3816)) * (1.0 - (_3815 * _3815))));
                                float _3824 = _3823 * _3823;
                                float _3825 = _3824 * _3824;
                                float _3826 = _3772 - _3276;
                                float _3827 = _3773 - _3277;
                                float _3828 = _3774 - _3278;
                                float _3832 = inversesqrt(dot(vec3(_3826, _3827, _3828), vec3(_3826, _3827, _3828)));
                                float _3836 = dot(vec3(_982, _985, _988), vec3((-0.0) - _3276, (-0.0) - _3277, (-0.0) - _3278));
                                float _4979 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3839 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3840 = dot(vec3(_982, _985, _988), vec3(_3832 * _3826, _3832 * _3827, _3832 * _3828));
                                float _4990 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3843 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3847 = ((_3843 * _3843) * (_3825 + (-1.0))) + 1.0;
                                float _3848 = _3785 * _3824;
                                float _3849 = _3848 * _3848;
                                float _3855 = ((1.0 - _3849) * dot(vec3(_982, _985, _988), vec3(_3772, _3773, _3774))) + _3849;
                                float _5001 = isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0));
                                float _3856 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3857 = 1.0 - _3824;
                                float _3867 = (0.5 / (((_3856 * ((_3839 * _3857) + _3824)) + 9.9999999392252902907785028219223e-09) + (((_3856 * _3857) + _3824) * _3839))) * _3856;
                                float _5012 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3877 = (_3802 * _3779) * (((_3825 * 3.1415927410125732421875) * (isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0)))) / ((_3847 * _3847) * ((_3792 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3803 * _3649.y;
                                frontier_phi_78_pred_1 = _3803 * _3649.x;
                                frontier_phi_78_pred_2 = _3877 * _3661.z;
                                frontier_phi_78_pred_3 = _3877 * _3661.y;
                                frontier_phi_78_pred_4 = _3877 * _3661.x;
                                frontier_phi_78_pred_5 = _3803 * _3649.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3885 = frontier_phi_78_pred;
                            _3884 = frontier_phi_78_pred_1;
                            _3883 = frontier_phi_78_pred_2;
                            _3882 = frontier_phi_78_pred_3;
                            _3881 = frontier_phi_78_pred_4;
                            _3886 = frontier_phi_78_pred_5;
                            _3591 = _3884 + _3604;
                            _3592 = _3885 + _3605;
                            _3593 = _3886 + _3606;
                            _3588 = _3881 + _3601;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            if (_3608 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3608;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3593;
                        frontier_phi_72_pred_1 = _3592;
                        frontier_phi_72_pred_2 = _3591;
                        frontier_phi_72_pred_3 = _3590;
                        frontier_phi_72_pred_4 = _3589;
                        frontier_phi_72_pred_5 = _3588;
                    }
                    _3261 = frontier_phi_72_pred;
                    _3259 = frontier_phi_72_pred_1;
                    _3257 = frontier_phi_72_pred_2;
                    _3255 = frontier_phi_72_pred_3;
                    _3253 = frontier_phi_72_pred_4;
                    _3251 = frontier_phi_72_pred_5;
                    uint _3396 = _3395 + 1u;
                    if (_3396 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3389 = _3251;
                        _3390 = _3253;
                        _3391 = _3255;
                        _3392 = _3257;
                        _3393 = _3259;
                        _3394 = _3261;
                        _3395 = _3396;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3261;
                frontier_phi_60_61_ladder_1 = _3259;
                frontier_phi_60_61_ladder_2 = _3255;
                frontier_phi_60_61_ladder_3 = _3253;
                frontier_phi_60_61_ladder_4 = _3251;
                frontier_phi_60_61_ladder_5 = _3257;
            }
            else
            {
                frontier_phi_60_61_ladder = _3147;
                frontier_phi_60_61_ladder_1 = _3145;
                frontier_phi_60_61_ladder_2 = _3141;
                frontier_phi_60_61_ladder_3 = _3139;
                frontier_phi_60_61_ladder_4 = _3137;
                frontier_phi_60_61_ladder_5 = _3143;
            }
            _3250 = frontier_phi_60_61_ladder_4;
            _3252 = frontier_phi_60_61_ladder_3;
            _3254 = frontier_phi_60_61_ladder_2;
            _3256 = frontier_phi_60_61_ladder_5;
            _3258 = frontier_phi_60_61_ladder_1;
            _3260 = frontier_phi_60_61_ladder;
        }
        float _3265 = isnan(1.0) ? _1041 : (isnan(_1041) ? 1.0 : min(_1041, 1.0));
        _3070 = (_3265 * _3256) + _2582;
        _3072 = (_3265 * _3258) + _2584;
        _3074 = (_3265 * _3260) + _2586;
        _3076 = ((_3250 * _1025) * _3265) + _2920;
        _3078 = ((_3252 * _1027) * _3265) + _2922;
        _3080 = ((_3254 * _1028) * _3265) + _2924;
    }
    else
    {
        _3070 = _2582;
        _3072 = _2584;
        _3074 = _2586;
        _3076 = _2920;
        _3078 = _2922;
        _3080 = _2924;
    }
    float _5028 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _5039 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _5050 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    uint _3100 = _261 + 6u;
    float _3108 = _963 / cbSceneParam._m0[86u].x;
    float _3109 = _964 / cbSceneParam._m0[86u].y;
    vec4 _3123 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3108, _3109, (log2((isnan(cbSceneParam._m0[77u].w) ? _898 : (isnan(_898) ? cbSceneParam._m0[77u].w : min(_898, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3125 = _3123.x;
    float _3126 = _3123.y;
    float _3127 = _3123.z;
    float _3128 = _3123.w;
    float _3200;
    float _3202;
    float _3204;
    float _3206;
    if (_898 > cbSceneParam._m0[78u].w)
    {
        float _3162 = isnan(_898) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _898 : min(cbSceneParam._m0[80u].w, _898));
        float _3163 = _3162 / _898;
        float _3174 = _3163 * _948;
        float _3175 = _949 * _3163;
        float _3176 = (-0.0) - _3175;
        float _3178 = _3163 * _950;
        float _3180 = (cbSceneParam._m0[77u].w * _3176) / _3162;
        float _3181 = _3180 + cbSceneParam._m0[79u].w;
        float _3182 = cbSceneParam._m0[79u].w - _3175;
        float _3188 = sqrt(((_3174 * _3174) + (_3175 * _3175)) + (_3178 * _3178));
        float _3191 = (1.0 - (cbSceneParam._m0[77u].w / _3162)) * _3188;
        float _3196 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3198 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3351;
        if (abs((_3176 - _3180) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3351 = ((((_3181 > 0.0) ? exp2(_3196 * _3181) : (2.0 - exp2(_3198 * _3181))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3191;
        }
        else
        {
            float _3311 = 1.0 / cbSceneParam._m0[80u].x;
            float _3312 = isnan(_3182) ? _3181 : (isnan(_3181) ? _3182 : max(_3181, _3182));
            float _3313 = isnan(_3182) ? _3181 : (isnan(_3181) ? _3182 : min(_3181, _3182));
            float _3322 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : min(_3312, 0.0));
            float _3323 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : min(_3313, 0.0));
            _3351 = ((abs(_3188 / _3176) * cbSceneParam._m0[80u].y) * ((((_3322 - _3323) * 2.0) - ((exp2(_3196 * (isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0)))) - exp2(_3196 * (isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))))) * _3311)) - ((exp2(_3198 * _3322) - exp2(_3198 * _3323)) * _3311))) + (_3191 * cbSceneParam._m0[80u].z);
        }
        vec4 _3353 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3108, _3109, 1.0), 0.0);
        float _3362 = exp2((_3351 * (-1.44269502162933349609375)) * (1.0 - _3353.w));
        float _3363 = log2(_3362);
        float _3379 = log2(_3128);
        _3200 = (exp2(_3379 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3363 * cbSceneParam._m0[78u].x)) * _3353.x) / cbSceneParam._m0[78u].x)) + _3125;
        _3202 = (exp2(_3379 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3363 * cbSceneParam._m0[78u].y)) * _3353.y) / cbSceneParam._m0[78u].y)) + _3126;
        _3204 = (exp2(_3379 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3363 * cbSceneParam._m0[78u].z)) * _3353.z) / cbSceneParam._m0[78u].z)) + _3127;
        _3206 = _3362 * _3128;
    }
    else
    {
        _3200 = _3125;
        _3202 = _3126;
        _3204 = _3127;
        _3206 = _3128;
    }
    float _3218 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3219 = _3218 == 3.0;
    float _3220 = log2(_3206);
    float _3227 = exp2(_3220 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0))) * (_3070 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1041))) + ((_3076 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1848)) * cbPerFrame._m0[3u].x));
    float _3228 = exp2(_3220 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0))) * (_3072 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1041))) + ((_3078 + ((isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0))) * _1848)) * cbPerFrame._m0[3u].x));
    float _3229 = exp2(_3220 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_3074 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1041))) + ((_3080 + ((isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0))) * _1848)) * cbPerFrame._m0[3u].x));
    float _3238 = (_3218 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3238 * (_3219 ? _3227 : (_3227 + (cbSceneParam._m0[72u].w * _3200)));
    SV_Target.y = _3238 * (_3219 ? _3228 : (_3228 + (cbSceneParam._m0[72u].w * _3202)));
    SV_Target.z = _3238 * (_3219 ? _3229 : (_3229 + (cbSceneParam._m0[72u].w * _3204)));
    SV_Target.w = cbInstanceData._m0[_3100].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3100].w;
}


