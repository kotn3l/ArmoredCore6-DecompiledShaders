#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1146;
float _3813;
float _3814;
float _3815;
float _3816;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _312 = _308.z;
    float _317 = (_308.x * 2.0) + (-1.0);
    float _319 = (_308.y * 2.0) + (-1.0);
    float _320 = dot(vec2(_317, _319), vec2(_317, _319));
    float _3825 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _326 = sqrt(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))));
    vec4 _343 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _345 = _343.x;
    float _346 = 1.0 - _345;
    float _355 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _358 = ((isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : min(_355, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _367 = (_358 - ((((((_345 - _346) * cbMtdParam._m0[24u].z) + _346) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _358))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3846 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _375 = (_368 * (cbMtdParam._m0[17u].x - _288)) + _288;
    float _376 = (_368 * (cbMtdParam._m0[17u].y - _289)) + _289;
    float _377 = (_368 * (cbMtdParam._m0[17u].z - _290)) + _290;
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _392 = _390.x;
    float _393 = 1.0 - _392;
    float _422 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_392 - _393) * cbMtdParam._m0[24u].w) + _393) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3857 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _431 = ((((cbMtdParam._m0[10u].x - _375) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _423) + _375;
    float _432 = ((((cbMtdParam._m0[10u].y - _376) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _423) + _376;
    float _433 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _377)) * _423) + _377;
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _448 = _446.x;
    float _450 = _448 - (_448 * _368);
    float _452 = _450 - (_450 * _423);
    vec4 _466 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _473 = (_466.x * 2.0) + (-1.0);
    float _474 = (_466.y * 2.0) + (-1.0);
    float _475 = dot(vec2(_473, _474), vec2(_473, _474));
    float _3868 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _483 = (_368 * (_466.z - _312)) + _312;
    float _486 = ((cbMtdParam._m0[23u].y - _483) * _423) + _483;
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _514 = (_508.x * 2.0) + (-1.0);
    float _515 = (_508.y * 2.0) + (-1.0);
    float _516 = dot(vec2(_514, _515), vec2(_514, _515));
    float _3879 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _533 = (((_473 - _317) + (cbMtdParam._m0[21u].x * _317)) * _368) + _317;
    float _534 = (((_474 - _319) + (cbMtdParam._m0[21u].x * _319)) * _368) + _319;
    float _535 = (_368 * (sqrt(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) - _326)) + _326;
    float _546 = (((_514 - _533) + (_533 * cbMtdParam._m0[22u].z)) * _423) + _533;
    float _547 = (((_515 - _534) + (_534 * cbMtdParam._m0[22u].z)) * _423) + _534;
    float _548 = ((sqrt(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) - _535) * _423) + _535;
    float _550 = cbMtdParam._m0[22u].x + _308.w;
    float _553 = fma(_548, _230 * NORMAL.x, fma(_547, _237 * TANGENT.x, (_223 * _215) * _546));
    float _556 = fma(_548, _230 * NORMAL.y, fma(_547, _237 * TANGENT.y, (_223 * _216) * _546));
    float _559 = fma(_548, _230 * NORMAL.z, fma(_547, _237 * TANGENT.z, (_223 * _217) * _546));
    float _563 = inversesqrt(dot(vec3(_553, _556, _559), vec3(_553, _556, _559)));
    float _564 = _563 * _553;
    float _565 = _563 * _556;
    float _566 = _563 * _559;
    float _3890 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _567 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3912 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3923 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3934 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3945 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _572 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _586 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _636 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _626);
    float _637 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _626);
    float _638 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _626);
    float _642 = inversesqrt(dot(vec3(_636, _637, _638), vec3(_636, _637, _638)));
    float _643 = _636 * _642;
    float _644 = _637 * _642;
    float _645 = _638 * _642;
    vec4 _650 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _652 = _650.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _827 = sqrt(((_636 * _636) + (_637 * _637)) + (_638 * _638));
        float _833 = (cbMatDynParam._m0[5u].x * _827) + cbMatDynParam._m0[5u].y;
        float _3956 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _838 = (cbMatDynParam._m0[5u].z * _827) + cbMatDynParam._m0[5u].w;
        float _3967 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) - _834)) + _834) < ((_652 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _664 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _665 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _685 = fma(_566, cbSceneParam._m0[5u].z, fma(_565, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _564));
    float _688 = fma(_566, cbSceneParam._m0[6u].z, fma(_565, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _564));
    float _691 = fma(_566, cbSceneParam._m0[7u].z, fma(_565, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _564));
    uint _704 = _243 + 9u;
    uint _705 = _704 + uint(cbMatDynParam._m0[0u].w);
    float _711 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_705].x;
    float _712 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_705].y;
    float _713 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_705].z;
    float _3978 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _717 = 1.0 - _572;
    float _718 = _714 * _717;
    float _719 = _715 * _717;
    float _720 = _716 * _717;
    float _725 = (_714 + (-0.039999999105930328369140625)) * _572;
    float _726 = (_715 + (-0.039999999105930328369140625)) * _572;
    float _727 = (_716 + (-0.039999999105930328369140625)) * _572;
    float _728 = _725 + 0.039999999105930328369140625;
    float _730 = _726 + 0.039999999105930328369140625;
    float _731 = _727 + 0.039999999105930328369140625;
    vec4 _740 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _664, cbSceneParam._m0[86u].y * _665));
    float _744 = ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * TEXCOORD_5.w) * _740.x;
    float _745 = dot(vec3(_564, _565, _566), vec3(_643, _644, _645));
    float _748 = _745 * 2.0;
    float _752 = (_748 * _564) - _643;
    float _753 = (_748 * _565) - _644;
    float _754 = (_748 * _566) - _645;
    float _758 = abs(dot(vec3(_643, _644, _645), vec3(_564, _565, _566)));
    float _4011 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _760 = sqrt(_567);
    float _773 = exp2((_760 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_760 * 3.0));
    float _779 = (1.0 - _773) * ((_760 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _780 = _773 * _760;
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1145;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _870 = fma(_816, cbModelParam._m0[26u].z, fma(_812, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _808));
        float _874 = fma(_816, cbModelParam._m0[27u].z, fma(_812, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _808));
        float _878 = fma(_816, cbModelParam._m0[28u].z, fma(_812, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _808));
        float _903 = _808 + _564;
        float _904 = _812 + _565;
        float _905 = _816 + _566;
        float _915 = fma(_905, cbModelParam._m0[26u].z, fma(_904, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _903)) - _870;
        float _916 = fma(_905, cbModelParam._m0[27u].z, fma(_904, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _903)) - _874;
        float _917 = fma(_905, cbModelParam._m0[28u].z, fma(_904, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _903)) - _878;
        float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
        float _934 = ((_921 * _915) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_870 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_921 * _916) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_874 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_921 * _917) / cbModelParam._m0[34u].z) + ((((((_878 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        float _973 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_939.x + (-0.5));
        float _975 = _973 * (_939.y + (-0.5));
        float _976 = _973 * (_939.z + (-0.5));
        float _983 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_946.x + (-0.5));
        float _985 = _983 * (_946.y + (-0.5));
        float _986 = _983 * (_946.z + (-0.5));
        float _993 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_953.x + (-0.5));
        float _995 = _993 * (_953.y + (-0.5));
        float _996 = _993 * (_953.z + (-0.5));
        float _1003 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_960.x + (-0.5));
        float _1005 = _1003 * (_960.y + (-0.5));
        float _1006 = _1003 * (_960.z + (-0.5));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = _974 * 0.5;
        float _1011 = _984 * 0.5;
        float _1012 = _994 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1027 = (dot(vec3(_564, _565, _566), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1037 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _4059 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1039 + 1.0))) + _1044) * _1007;
        float _1054 = _975 * 0.5;
        float _1055 = _985 * 0.5;
        float _1056 = _995 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_564, _565, _566), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _4092 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1081 + 1.0))) + _1086) * _1008;
        float _1096 = _976 * 0.5;
        float _1097 = _986 * 0.5;
        float _1098 = _996 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_564, _565, _566), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _4125 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1123 + 1.0))) + _1128) * _1009;
        _1145 = _976;
        _1147 = _975;
        _1148 = _974;
        _1149 = _986;
        _1150 = _985;
        _1151 = _984;
        _1152 = _996;
        _1153 = _995;
        _1154 = _994;
        _1155 = _1009;
        _1156 = _1008;
        _1157 = _1007;
        _1158 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1159 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1160 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
    }
    else
    {
        _1145 = _1146;
        _1147 = _1146;
        _1148 = _1146;
        _1149 = _1146;
        _1150 = _1146;
        _1151 = _1146;
        _1152 = _1146;
        _1153 = _1146;
        _1154 = _1146;
        _1155 = _1146;
        _1156 = _1146;
        _1157 = _1146;
        _1158 = 0.0;
        _1159 = 0.0;
        _1160 = 0.0;
    }
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1188 = fma(_816, cbModelParam._m0[30u].z, fma(_812, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _808));
        float _1192 = fma(_816, cbModelParam._m0[31u].z, fma(_812, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _808));
        float _1196 = fma(_816, cbModelParam._m0[32u].z, fma(_812, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _808));
        float _1219 = _808 + _564;
        float _1220 = _812 + _565;
        float _1221 = _816 + _566;
        float _1231 = fma(_1221, cbModelParam._m0[30u].z, fma(_1220, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1219)) - _1188;
        float _1232 = fma(_1221, cbModelParam._m0[31u].z, fma(_1220, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1219)) - _1192;
        float _1233 = fma(_1221, cbModelParam._m0[32u].z, fma(_1220, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1219)) - _1196;
        float _1237 = inversesqrt(dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233)));
        float _1250 = ((_1237 * _1231) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1188 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1237 * _1232) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1192 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1237 * _1233) / cbModelParam._m0[35u].z) + ((((((_1196 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        float _1287 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1254.x + (-0.5));
        float _1289 = _1287 * (_1254.y + (-0.5));
        float _1290 = _1287 * (_1254.z + (-0.5));
        float _1297 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1261.x + (-0.5));
        float _1299 = _1297 * (_1261.y + (-0.5));
        float _1300 = _1297 * (_1261.z + (-0.5));
        float _1307 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1268.x + (-0.5));
        float _1309 = _1307 * (_1268.y + (-0.5));
        float _1310 = _1307 * (_1268.z + (-0.5));
        float _1317 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1275.x + (-0.5));
        float _1319 = _1317 * (_1275.y + (-0.5));
        float _1320 = _1317 * (_1275.z + (-0.5));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = _1288 * 0.5;
        float _1325 = _1298 * 0.5;
        float _1326 = _1308 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_564, _565, _566), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4188 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1351 + 1.0))) + _1356) * _1321;
        float _1366 = _1289 * 0.5;
        float _1367 = _1299 * 0.5;
        float _1368 = _1309 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_564, _565, _566), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4221 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1393 + 1.0))) + _1398) * _1322;
        float _1408 = _1290 * 0.5;
        float _1409 = _1300 * 0.5;
        float _1410 = _1310 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_564, _565, _566), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4254 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1435 + 1.0))) + _1440) * _1323;
        _1457 = _1290;
        _1458 = _1289;
        _1459 = _1288;
        _1460 = _1300;
        _1461 = _1299;
        _1462 = _1298;
        _1463 = _1310;
        _1464 = _1309;
        _1465 = _1308;
        _1466 = _1323;
        _1467 = _1322;
        _1468 = _1321;
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
    }
    else
    {
        _1457 = _1146;
        _1458 = _1146;
        _1459 = _1146;
        _1460 = _1146;
        _1461 = _1146;
        _1462 = _1146;
        _1463 = _1146;
        _1464 = _1146;
        _1465 = _1146;
        _1466 = _1146;
        _1467 = _1146;
        _1468 = _1146;
        _1469 = 0.0;
        _1470 = 0.0;
        _1471 = 0.0;
    }
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1158)) + _1158;
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1159)) + _1159;
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1160)) + _1160;
    float _1504 = fma(_1483, cbSceneParam._m0[89u].z, fma(_1482, cbSceneParam._m0[89u].y, _1481 * cbSceneParam._m0[89u].x));
    float _1507 = fma(_1483, cbSceneParam._m0[90u].z, fma(_1482, cbSceneParam._m0[90u].y, _1481 * cbSceneParam._m0[90u].x));
    float _1510 = fma(_1483, cbSceneParam._m0[91u].z, fma(_1482, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1481));
    float _1525 = _752 * 0.5;
    float _1526 = _753 * 0.5;
    float _1527 = _754 * 0.5;
    float _1528 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1531 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1534 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1568;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1541 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1145, _1149, _1152, _1155));
        float _1545 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1147, _1150, _1153, _1156));
        float _1549 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1148, _1151, _1154, _1157));
        float _1556 = dot(vec4(cbModelParam._m0[39u]), vec4(_1525, _1526, _1527, 1.0));
        _1568 = dot(vec3(isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1556) ? 0.0 : (isnan(0.0) ? _1556 : max(0.0, _1556))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1568 = 1.0;
    }
    float _1579;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1570 = dot(vec4(cbModelParam._m0[40u]), vec4(_1525, _1526, _1527, 1.0));
        _1579 = dot(vec3(isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1570) ? 0.0 : (isnan(0.0) ? _1570 : max(0.0, _1570))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1579 = 1.0;
    }
    float _1583 = (_1579 * cbModelParam._m0[1u].x) + (_1568 * (1.0 - cbModelParam._m0[1u].x));
    float _1593 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _567);
    float _1594 = isnan(_1593) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1593 : min(cbModelParam._m0[25u].z, _1593));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1642 = fma(_816, cbModelParam._m0[13u].z, fma(_812, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _808)) + cbModelParam._m0[13u].w;
        float _1646 = fma(_816, cbModelParam._m0[14u].z, fma(_812, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _808)) + cbModelParam._m0[14u].w;
        float _1650 = fma(_816, cbModelParam._m0[15u].z, fma(_812, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _808)) + cbModelParam._m0[15u].w;
        float _1653 = fma(_754, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752));
        float _1656 = fma(_754, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752));
        float _1659 = fma(_754, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752));
        float _1687;
        if (_1653 > 0.0)
        {
            _1687 = abs((1.0 - _1642) / _1653);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1642 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1687 = frontier_phi_17_15_ladder;
        }
        float _1859;
        if (_1656 > 0.0)
        {
            _1859 = abs((1.0 - _1646) / _1656);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1646 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1859 = frontier_phi_26_22_ladder;
        }
        float _2155;
        if (_1659 > 0.0)
        {
            _2155 = abs((1.0 - _1650) / _1659);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1650 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2155 = frontier_phi_38_33_ladder;
        }
        float _2157 = isnan(_1859) ? _1687 : (isnan(_1687) ? _1859 : min(_1687, _1859));
        float _2158 = isnan(_2155) ? _2157 : (isnan(_2157) ? _2155 : min(_2157, _2155));
        float _2162 = (_2158 * _1653) + _1642;
        float _2163 = (_2158 * _1656) + _1646;
        float _2164 = (_2158 * _1659) + _1650;
        float _2165 = _2158 * 9.9999997473787516355514526367188e-05;
        float _2167 = (-1.0) - _2165;
        float _2169 = _2165 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2164 > _2169) || ((_2164 < _2167) || ((_2163 > _2169) || ((_2163 < _2167) || ((_2162 < _2167) || (_2162 > _2169))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2309 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2164, cbModelParam._m0[9u].z, fma(_2163, cbModelParam._m0[9u].y, _2162 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2164, cbModelParam._m0[10u].z, fma(_2163, cbModelParam._m0[10u].y, _2162 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2164, cbModelParam._m0[11u].z, fma(_2163, cbModelParam._m0[11u].y, _2162 * cbModelParam._m0[11u].x))), _1594);
            frontier_phi_16_38_ladder = _2309.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2309.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2309.x * cbModelParam._m0[1u].y;
        }
        _1675 = frontier_phi_16_38_ladder_2;
        _1677 = frontier_phi_16_38_ladder_1;
        _1679 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1663 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_752, _753, _754), _1594);
        _1675 = _1663.x * cbModelParam._m0[1u].y;
        _1677 = _1663.y * cbModelParam._m0[1u].y;
        _1679 = _1663.z * cbModelParam._m0[1u].y;
    }
    float _1683 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _567);
    float _1684 = isnan(_1683) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1683 : min(cbModelParam._m0[25u].w, _1683));
    float _1774;
    float _1776;
    float _1778;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1738 = fma(_816, cbModelParam._m0[21u].z, fma(_812, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _808)) + cbModelParam._m0[21u].w;
        float _1742 = fma(_816, cbModelParam._m0[22u].z, fma(_812, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _808)) + cbModelParam._m0[22u].w;
        float _1746 = fma(_816, cbModelParam._m0[23u].z, fma(_812, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _808)) + cbModelParam._m0[23u].w;
        float _1749 = fma(_754, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752));
        float _1752 = fma(_754, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752));
        float _1755 = fma(_754, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752));
        float _1864;
        if (_1749 > 0.0)
        {
            _1864 = abs((1.0 - _1738) / _1749);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1738 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1864 = frontier_phi_28_24_ladder;
        }
        float _2182;
        if (_1752 > 0.0)
        {
            _2182 = abs((1.0 - _1742) / _1752);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1742 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2182 = frontier_phi_40_35_ladder;
        }
        float _2520;
        if (_1755 > 0.0)
        {
            _2520 = abs((1.0 - _1746) / _1755);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1746 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2520 = frontier_phi_50_47_ladder;
        }
        float _2522 = isnan(_2182) ? _1864 : (isnan(_1864) ? _2182 : min(_1864, _2182));
        float _2523 = isnan(_2520) ? _2522 : (isnan(_2522) ? _2520 : min(_2522, _2520));
        float _2527 = (_2523 * _1749) + _1738;
        float _2528 = (_2523 * _1752) + _1742;
        float _2529 = (_2523 * _1755) + _1746;
        float _2530 = _2523 * 9.9999997473787516355514526367188e-05;
        float _2531 = (-1.0) - _2530;
        float _2533 = _2530 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2529 > _2533) || ((_2529 < _2531) || ((_2528 > _2533) || ((_2528 < _2531) || ((_2527 < _2531) || (_2527 > _2533))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2651 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2529, cbModelParam._m0[17u].z, fma(_2528, cbModelParam._m0[17u].y, _2527 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2529, cbModelParam._m0[18u].z, fma(_2528, cbModelParam._m0[18u].y, _2527 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2529, cbModelParam._m0[19u].z, fma(_2528, cbModelParam._m0[19u].y, _2527 * cbModelParam._m0[19u].x))), _1684);
            frontier_phi_25_50_ladder = _2651.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2651.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2651.x * cbModelParam._m0[1u].z;
        }
        _1774 = frontier_phi_25_50_ladder_2;
        _1776 = frontier_phi_25_50_ladder_1;
        _1778 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1758 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_752, _753, _754), _1684);
        _1774 = _1758.x * cbModelParam._m0[1u].z;
        _1776 = _1758.y * cbModelParam._m0[1u].z;
        _1778 = _1758.z * cbModelParam._m0[1u].z;
    }
    float _1791 = (((_779 * _728) + _780) * _744) * ((cbModelParam._m0[1u].w * (_1774 - _1675)) + _1675);
    float _1793 = (((_779 * _730) + _780) * _744) * ((cbModelParam._m0[1u].w * (_1776 - _1677)) + _1677);
    float _1795 = (((_779 * _731) + _780) * _744) * ((cbModelParam._m0[1u].w * (_1778 - _1679)) + _1679);
    float _1798 = fma(_1795, cbSceneParam._m0[89u].z, fma(_1793, cbSceneParam._m0[89u].y, _1791 * cbSceneParam._m0[89u].x));
    float _1801 = fma(_1795, cbSceneParam._m0[90u].z, fma(_1793, cbSceneParam._m0[90u].y, _1791 * cbSceneParam._m0[90u].x));
    float _1804 = fma(_1795, cbSceneParam._m0[91u].z, fma(_1793, cbSceneParam._m0[91u].y, _1791 * cbSceneParam._m0[91u].x));
    float _1838 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1842 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1846 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1850 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1851 = _1838 / _1850;
    float _1852 = _1842 / _1850;
    float _1853 = _1846 / _1850;
    float _2000;
    float _2001;
    float _2002;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1880 = ((uint(_1853 > cbSceneParam._m0[59u].y) + uint(_1853 > cbSceneParam._m0[59u].x)) + uint(_1853 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1881 = _1880 + 43u;
        uint _1889 = _1880 + 44u;
        uint _1897 = _1880 + 45u;
        uint _1905 = _1880 + 46u;
        float _1916 = fma(_1850, cbSceneParam._m0[_1881].w, fma(_1846, cbSceneParam._m0[_1881].z, fma(_1842, cbSceneParam._m0[_1881].y, _1838 * cbSceneParam._m0[_1881].x)));
        float _1920 = fma(_1850, cbSceneParam._m0[_1889].w, fma(_1846, cbSceneParam._m0[_1889].z, fma(_1842, cbSceneParam._m0[_1889].y, _1838 * cbSceneParam._m0[_1889].x)));
        float _1928 = fma(_1850, cbSceneParam._m0[_1905].w, fma(_1846, cbSceneParam._m0[_1905].z, fma(_1842, cbSceneParam._m0[_1905].y, _1838 * cbSceneParam._m0[_1905].x)));
        float _1933 = cbSceneParam._m0[33u].z * _1928;
        float _1935 = cbSceneParam._m0[33u].w * _1928;
        float _1938 = fma(_1850, cbSceneParam._m0[_1897].w, fma(_1846, cbSceneParam._m0[_1897].z, fma(_1842, cbSceneParam._m0[_1897].y, _1838 * cbSceneParam._m0[_1897].x))) / _1928;
        float _1986 = (cbSceneParam._m0[33u].x - sqrt(((_1852 * _1852) + (_1851 * _1851)) + (_1853 * _1853))) * cbSceneParam._m0[33u].y;
        float _4380 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1993 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1933 + _1916) / _1928, (_1935 + _1920) / _1928), _1938), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1935 + _1916) / _1928, (_1920 - _1933) / _1928), _1938), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1916 - _1933) / _1928, (_1920 - _1935) / _1928), _1938), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1916 - _1935) / _1928, (_1933 + _1920) / _1928), _1938), 0.0)).x), vec4(0.25)));
        _2000 = 1.0 - (_1993 * cbSceneParam._m0[34u].x);
        _2001 = 1.0 - (_1993 * cbSceneParam._m0[34u].y);
        _2002 = 1.0 - (_1993 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2000 = 1.0;
        _2001 = 1.0;
        _2002 = 1.0;
    }
    float _2066;
    float _2068;
    float _2070;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2054 = fma(_1850, cbSceneParam._m0[63u].w, fma(_1846, cbSceneParam._m0[63u].z, fma(_1842, cbSceneParam._m0[63u].y, _1838 * cbSceneParam._m0[63u].x)));
        float _2055 = fma(_1850, cbSceneParam._m0[60u].w, fma(_1846, cbSceneParam._m0[60u].z, fma(_1842, cbSceneParam._m0[60u].y, _1838 * cbSceneParam._m0[60u].x))) / _2054;
        float _2056 = fma(_1850, cbSceneParam._m0[61u].w, fma(_1846, cbSceneParam._m0[61u].z, fma(_1842, cbSceneParam._m0[61u].y, _1838 * cbSceneParam._m0[61u].x))) / _2054;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2055 >= cbSceneParam._m0[64u].x) && (_2056 >= cbSceneParam._m0[64u].y)) && (_2055 <= cbSceneParam._m0[64u].z)) && (_2056 <= cbSceneParam._m0[64u].w))
        {
            float _2195 = fma(_1850, cbSceneParam._m0[62u].w, fma(_1846, cbSceneParam._m0[62u].z, fma(_1842, cbSceneParam._m0[62u].y, _1838 * cbSceneParam._m0[62u].x))) / _2054;
            float _2199 = isnan(cbSceneParam._m0[41u].w) ? _2195 : (isnan(_2195) ? cbSceneParam._m0[41u].w : max(_2195, cbSceneParam._m0[41u].w));
            float _2242 = (cbSceneParam._m0[33u].x - sqrt(((_1852 * _1852) + (_1851 * _1851)) + (_1853 * _1853))) * cbSceneParam._m0[33u].y;
            float _4396 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
            float _2249 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2055, cbSceneParam._m0[33u].w + _2056), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2055, _2056 - cbSceneParam._m0[33u].z), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2055 - cbSceneParam._m0[33u].z, _2056 - cbSceneParam._m0[33u].w), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2055 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2056), _2199), 0.0)).x), vec4(0.25)));
            float _2253 = 1.0 - (_2249 * cbSceneParam._m0[34u].x);
            float _2254 = 1.0 - (_2249 * cbSceneParam._m0[34u].y);
            float _2255 = 1.0 - (_2249 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2255) ? _2002 : (isnan(_2002) ? _2255 : min(_2002, _2255));
            frontier_phi_37_36_ladder_1 = isnan(_2254) ? _2001 : (isnan(_2001) ? _2254 : min(_2001, _2254));
            frontier_phi_37_36_ladder_2 = isnan(_2253) ? _2000 : (isnan(_2000) ? _2253 : min(_2000, _2253));
        }
        else
        {
            frontier_phi_37_36_ladder = _2002;
            frontier_phi_37_36_ladder_1 = _2001;
            frontier_phi_37_36_ladder_2 = _2000;
        }
        _2066 = frontier_phi_37_36_ladder_2;
        _2068 = frontier_phi_37_36_ladder_1;
        _2070 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2066 = _2000;
        _2068 = _2001;
        _2070 = _2002;
    }
    uvec4 _2075 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _2077 = _2075.x * 14u;
    uint _2078 = _2077 + 13u;
    float _2085 = _744 + (-1.0);
    float _2090 = (cbLight._m0[_2078].x * _2085) + 1.0;
    float _2091 = (cbLight._m0[_2078].y * _2085) + 1.0;
    float _2092 = (cbLight._m0[_2078].z * _2085) + 1.0;
    float _2093 = (cbLight._m0[_2078].w * _2085) + 1.0;
    uint _2094 = _2077 + 5u;
    float _2100 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
    uint _2104 = _2077 + 4u;
    float _2114 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
    uint _2118 = _2077 | 1u;
    float _2129 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_564, _565, _566));
    float _2132 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_564, _565, _566));
    float _4432 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _4443 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2137 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * 0.3183098733425140380859375;
    float _2139 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * 0.3183098733425140380859375;
    float _2146 = ((cbLight._m0[_2094].x * _2100) * _2139) + (((cbLight._m0[_2104].x * _2066) * _2114) * _2137);
    float _2147 = ((_2100 * cbLight._m0[_2094].y) * _2139) + (((cbLight._m0[_2104].y * _2068) * _2114) * _2137);
    float _2148 = ((_2100 * cbLight._m0[_2094].z) * _2139) + (((cbLight._m0[_2104].z * _2070) * _2114) * _2137);
    uvec4 _2152 = floatBitsToUint(cbLight._m0[_2077 + 12u]);
    bool _2154 = _2152.x == 0u;
    float _2256;
    float _2258;
    float _2260;
    if (_2154)
    {
        _2256 = _2146;
        _2258 = _2147;
        _2260 = _2148;
    }
    else
    {
        uint _2264 = _2077 + 6u;
        float _2280 = (dot(vec3(cbLight._m0[_2077 + 2u].xyz), vec3(_564, _565, _566)) * 0.5) + 0.5;
        float _2281 = _2280 * _2280;
        float _4454 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2282 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2283 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2256 = (((cbLight._m0[_2264].x * 0.3183098733425140380859375) * _2282) * _2283) + _2146;
        _2258 = (((cbLight._m0[_2264].y * 0.3183098733425140380859375) * _2282) * _2283) + _2147;
        _2260 = (((cbLight._m0[_2264].z * 0.3183098733425140380859375) * _2282) * _2283) + _2148;
    }
    bool _2263 = _2152.y == 0u;
    float _2318;
    float _2320;
    float _2322;
    if (_2263)
    {
        _2318 = _2256;
        _2320 = _2258;
        _2322 = _2260;
    }
    else
    {
        uint _2491 = _2077 + 7u;
        float _2507 = (dot(vec3(cbLight._m0[_2077 + 3u].xyz), vec3(_564, _565, _566)) * 0.5) + 0.5;
        float _2508 = _2507 * _2507;
        float _4470 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2509 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2510 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2318 = (((cbLight._m0[_2491].x * 0.3183098733425140380859375) * _2509) * _2510) + _2256;
        _2320 = (((cbLight._m0[_2491].y * 0.3183098733425140380859375) * _2509) * _2510) + _2258;
        _2322 = (((cbLight._m0[_2491].z * 0.3183098733425140380859375) * _2509) * _2510) + _2260;
    }
    uint _2325 = _2077 + 8u;
    float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _567) * 0.949999988079071044921875);
    float _2339 = _2338 * _2338;
    float _2340 = cbLight._m0[_2077].x + _643;
    float _2341 = cbLight._m0[_2077].y + _644;
    float _2342 = cbLight._m0[_2077].z + _645;
    float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
    float _2347 = _2346 * _2340;
    float _2348 = _2346 * _2341;
    float _2349 = _2346 * _2342;
    float _2350 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2077].xyz));
    float _4486 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2353 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _4497 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _2354 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2355 = dot(vec3(_564, _565, _566), vec3(_2347, _2348, _2349));
    float _4508 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2359 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2347, _2348, _2349));
    float _4519 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2363 = _2339 * _2339;
    float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
    float _2375 = exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0);
    float _2376 = 0.959999978542327880859375 - _725;
    float _2378 = 0.959999978542327880859375 - _726;
    float _2379 = 0.959999978542327880859375 - _727;
    float _2386 = 1.0 - _2339;
    float _2397 = (0.5 / (((_2354 * ((_2353 * _2386) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2386) + _2339) * _2353))) * _2353;
    float _4530 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2399 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
    uint _2413 = _2077 + 9u;
    float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _567) * 0.949999988079071044921875);
    float _2425 = _2424 * _2424;
    float _2426 = cbLight._m0[_2118].x + _643;
    float _2427 = cbLight._m0[_2118].y + _644;
    float _2428 = cbLight._m0[_2118].z + _645;
    float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
    float _2433 = _2432 * _2426;
    float _2434 = _2432 * _2427;
    float _2435 = _2432 * _2428;
    float _2436 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2118].xyz));
    float _4541 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2440 = dot(vec3(_564, _565, _566), vec3(_2433, _2434, _2435));
    float _4552 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2444 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2433, _2434, _2435));
    float _4563 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2448 = _2425 * _2425;
    float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
    float _2459 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
    float _2466 = 1.0 - _2425;
    float _2476 = (0.5 / (((_2354 * ((_2439 * _2466) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2466) + _2425) * _2439))) * _2439;
    float _4574 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2478 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
    float _2488 = (((((_2459 * _2376) + _728) * cbLight._m0[_2413].x) * _2478) * _2100) + ((((cbLight._m0[_2325].x * _2066) * ((_2375 * _2376) + _728)) * _2399) * _2114);
    float _2489 = (((((_2459 * _2378) + _730) * cbLight._m0[_2413].y) * _2478) * _2100) + ((((cbLight._m0[_2325].y * _2068) * ((_2375 * _2378) + _730)) * _2399) * _2114);
    float _2490 = (((((_2459 * _2379) + _731) * cbLight._m0[_2413].z) * _2478) * _2100) + ((((cbLight._m0[_2325].z * _2070) * ((_2375 * _2379) + _731)) * _2399) * _2114);
    float _2546;
    float _2548;
    float _2550;
    if (_2154)
    {
        _2546 = _2488;
        _2548 = _2489;
        _2550 = _2490;
    }
    else
    {
        uint _2552 = _2077 + 2u;
        uint _2556 = _2077 + 10u;
        float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _567) * 0.949999988079071044921875);
        float _2571 = _2570 * _2570;
        float _2572 = cbLight._m0[_2552].x + _643;
        float _2573 = cbLight._m0[_2552].y + _644;
        float _2574 = cbLight._m0[_2552].z + _645;
        float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
        float _2579 = _2578 * _2572;
        float _2580 = _2578 * _2573;
        float _2581 = _2578 * _2574;
        float _2582 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2552].xyz));
        float _4585 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2586 = dot(vec3(_564, _565, _566), vec3(_2579, _2580, _2581));
        float _4596 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2590 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2579, _2580, _2581));
        float _4607 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2594 = _2571 * _2571;
        float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
        float _2605 = exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0);
        float _2612 = 1.0 - _2571;
        float _2622 = (0.5 / (((_2354 * ((_2585 * _2612) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2612) + _2571) * _2585))) * _2585;
        float _4618 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2624 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
        float _2625 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2546 = (((((_2605 * _2376) + _728) * cbLight._m0[_2556].x) * _2624) * _2625) + _2488;
        _2548 = (((((_2605 * _2378) + _730) * cbLight._m0[_2556].y) * _2624) * _2625) + _2489;
        _2550 = (((((_2605 * _2379) + _731) * cbLight._m0[_2556].z) * _2624) * _2625) + _2490;
    }
    float _2656;
    float _2658;
    float _2660;
    if (_2263)
    {
        _2656 = _2546;
        _2658 = _2548;
        _2660 = _2550;
    }
    else
    {
        uint _2667 = _2077 + 3u;
        uint _2671 = _2077 + 11u;
        float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2667].w)) * _567) * 0.949999988079071044921875);
        float _2686 = _2685 * _2685;
        float _2687 = cbLight._m0[_2667].x + _643;
        float _2688 = cbLight._m0[_2667].y + _644;
        float _2689 = cbLight._m0[_2667].z + _645;
        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
        float _2694 = _2693 * _2687;
        float _2695 = _2693 * _2688;
        float _2696 = _2693 * _2689;
        float _2697 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2667].xyz));
        float _4634 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2701 = dot(vec3(_564, _565, _566), vec3(_2694, _2695, _2696));
        float _4645 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2705 = dot(vec3(cbLight._m0[_2667].xyz), vec3(_2694, _2695, _2696));
        float _4656 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2709 = _2686 * _2686;
        float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
        float _2720 = exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0);
        float _2727 = 1.0 - _2686;
        float _2737 = (0.5 / (((_2354 * ((_2700 * _2727) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2727) + _2686) * _2700))) * _2700;
        float _4667 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2739 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
        float _2740 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2656 = (((((_2720 * _2376) + _728) * cbLight._m0[_2671].x) * _2739) * _2740) + _2546;
        _2658 = (((((_2720 * _2378) + _730) * cbLight._m0[_2671].y) * _2739) * _2740) + _2548;
        _2660 = (((((_2720 * _2379) + _731) * cbLight._m0[_2671].z) * _2739) * _2740) + _2550;
    }
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    if (_2075.y == 0u)
    {
        uvec4 _2761 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2762 = _2761.x;
        uint _2773 = uint((float(_2761.y) * floor(float(uint(cbSceneParam._m0[85u].y * _665) / _2762))) + floor(float(uint(cbSceneParam._m0[85u].x * _664) / _2762)));
        float _2783 = (log2(_1853 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2784 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        uint _2787 = uint(isnan(14.0) ? _2784 : (isnan(_2784) ? 14.0 : min(_2784, 14.0)));
        uvec4 _2792 = texelFetch(g_lightClusterGridBuffer, int(((_2787 << 2u) + (_2773 << 6u)) >> 2u));
        uint _2793 = _2792.x;
        uint _2794 = _2761.z;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        if (((((1u << ((_2794 >> 4u) & 15u)) + 4294967295u) & _2793) == 0u) || ((_2794 & 240u) == 0u))
        {
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
        }
        else
        {
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            uint _3032 = 0u;
            uint _3041;
            bool _3042;
            for (;;)
            {
                _3041 = texelFetch(g_lightClassification, int((((_2787 << 5u) + (_2773 << 9u)) + (_3032 << 2u)) >> 2u)).x;
                _3042 = _3041 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3042)
                {
                    frontier_phi_71_pred = _3031;
                    frontier_phi_71_pred_1 = _3030;
                    frontier_phi_71_pred_2 = _3029;
                    frontier_phi_71_pred_3 = _3028;
                    frontier_phi_71_pred_4 = _3027;
                    frontier_phi_71_pred_5 = _3026;
                }
                else
                {
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    uint _3177;
                    _3171 = _3026;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3031;
                    _3177 = _3041;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    for (;;)
                    {
                        uint _3181 = uint(findLSB(_3177)) + (_3032 << 5u);
                        uint _3178 = (_3177 + 4294967295u) & _3177;
                        uint _3183 = _3181 * 48u;
                        vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 3u)).x));
                        uint _3203 = (_3181 * 48u) + 4u;
                        vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 3u)).x));
                        uint _3222 = (_3181 * 48u) + 8u;
                        vec3 _3233 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3222)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 2u)).x));
                        float _3237 = _3197.x - _1851;
                        float _3238 = _3197.y - _1852;
                        float _3239 = _3197.z - _1853;
                        float _3240 = dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239));
                        float _3243 = inversesqrt(_3240);
                        float _3244 = _3243 * _3237;
                        float _3245 = _3243 * _3238;
                        float _3246 = _3243 * _3239;
                        float _3247 = dot(vec3(_685, _688, _691), vec3(_3244, _3245, _3246));
                        float _3252 = 1.0 - (_3240 * _3197.w);
                        float _4693 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3253 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3254 = sqrt(_3240) * _3216.w;
                        float _3257 = 1.39999997615814208984375 / (_3254 + 1.39999997615814208984375);
                        float _3258 = _3257 * _3257;
                        float _3261 = ((1.0 - _3258) * _3247) + _3258;
                        float _3264 = _3254 * _3254;
                        float _3268 = ((isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))) * _3253) / ((_3264 * 0.699999988079071044921875) + 1.0);
                        float _3272 = (-0.0) - _1851;
                        float _3273 = (-0.0) - _1852;
                        float _3274 = (-0.0) - _1853;
                        float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                        float _3279 = _3278 * _3272;
                        float _3280 = _3278 * _3273;
                        float _3281 = _3278 * _3274;
                        float _3288 = exp2(log2(1.0 / ((_3264 * 3.5) + 5.0)) * 0.25);
                        float _3289 = 1.0 - _760;
                        float _3296 = sqrt(1.0 - ((1.0 - (_3289 * _3289)) * (1.0 - (_3288 * _3288))));
                        float _3297 = _3296 * _3296;
                        float _3298 = _3297 * _3297;
                        float _3299 = _3279 + _3244;
                        float _3300 = _3280 + _3245;
                        float _3301 = _3281 + _3246;
                        float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                        float _3309 = dot(vec3(_685, _688, _691), vec3(_3279, _3280, _3281));
                        float _4709 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3313 = dot(vec3(_685, _688, _691), vec3(_3305 * _3299, _3305 * _3300, _3305 * _3301));
                        float _4720 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3316 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                        float _3320 = ((_3316 * _3316) * (_3298 + (-1.0))) + 1.0;
                        float _3321 = _3257 * _3297;
                        float _3322 = _3321 * _3321;
                        float _3325 = ((1.0 - _3322) * _3247) + _3322;
                        float _4731 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3326 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                        float _3327 = 1.0 - _3297;
                        float _3337 = (0.5 / (((_3326 * ((_3312 * _3327) + _3297)) + 9.9999999392252902907785028219223e-09) + (((_3326 * _3327) + _3297) * _3312))) * _3326;
                        float _4742 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3348 = (((_3298 * 3.1415927410125732421875) * (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) / ((_3320 * _3320) * ((_3264 * 2.1991131305694580078125) + 3.141590118408203125))) * _3253;
                        _3101 = (_3268 * _3216.x) + _3174;
                        _3102 = (_3268 * _3216.y) + _3175;
                        _3103 = (_3268 * _3216.z) + _3176;
                        _3098 = (_3348 * _3233.x) + _3171;
                        _3099 = (_3348 * _3233.y) + _3172;
                        _3100 = (_3348 * _3233.z) + _3173;
                        if (_3178 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3171 = _3098;
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3103;
                            _3177 = _3178;
                        }
                    }
                    frontier_phi_71_pred = _3103;
                    frontier_phi_71_pred_1 = _3102;
                    frontier_phi_71_pred_2 = _3101;
                    frontier_phi_71_pred_3 = _3100;
                    frontier_phi_71_pred_4 = _3099;
                    frontier_phi_71_pred_5 = _3098;
                }
                _2884 = frontier_phi_71_pred;
                _2882 = frontier_phi_71_pred_1;
                _2880 = frontier_phi_71_pred_2;
                _2878 = frontier_phi_71_pred_3;
                _2876 = frontier_phi_71_pred_4;
                _2874 = frontier_phi_71_pred_5;
                uint _3033 = _3032 + 1u;
                if (_3033 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3026 = _2874;
                    _3027 = _2876;
                    _3028 = _2878;
                    _3029 = _2880;
                    _3030 = _2882;
                    _3031 = _2884;
                    _3032 = _3033;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
        }
        uvec4 _2887 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2888 = _2887.z;
        uint _2890 = (_2888 >> 8u) & 15u;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        if (((4294967295u << _2890) & _2793) == 0u)
        {
            _2994 = _2873;
            _2996 = _2875;
            _2998 = _2877;
            _3000 = _2879;
            _3002 = _2881;
            _3004 = _2883;
        }
        else
        {
            float _3019 = inversesqrt(dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853)));
            float _3020 = _3019 * _1851;
            float _3021 = _3019 * _1852;
            float _3022 = _3019 * _1853;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2890 < ((_2888 >> 12u) & 15u))
            {
                float _2995;
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3154 = _2873;
                float _3155 = _2875;
                float _3156 = _2877;
                float _3157 = _2879;
                float _3158 = _2881;
                float _3159 = _2883;
                uint _3160 = _2890;
                uint _3169;
                bool _3170;
                for (;;)
                {
                    _3169 = texelFetch(g_lightClassification, int((((_2787 << 5u) + (_2773 << 9u)) + (_3160 << 2u)) >> 2u)).x;
                    _3170 = _3169 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3170)
                    {
                        frontier_phi_82_pred = _3159;
                        frontier_phi_82_pred_1 = _3158;
                        frontier_phi_82_pred_2 = _3157;
                        frontier_phi_82_pred_3 = _3156;
                        frontier_phi_82_pred_4 = _3155;
                        frontier_phi_82_pred_5 = _3154;
                    }
                    else
                    {
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3375 = _3154;
                        float _3376 = _3155;
                        float _3377 = _3156;
                        float _3378 = _3157;
                        float _3379 = _3158;
                        float _3380 = _3159;
                        uint _3381 = _3169;
                        uint _3382;
                        vec4 _3407;
                        float _3408;
                        vec4 _3423;
                        vec3 _3435;
                        vec4 _3451;
                        vec4 _3467;
                        float _3513;
                        bool _3514;
                        for (;;)
                        {
                            uint _3392 = ((_3160 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3381));
                            _3382 = (_3381 + 4294967295u) & _3381;
                            uint _3394 = _3392 * 40u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            _3408 = _3407.w;
                            uint _3410 = (_3392 * 40u) + 4u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3425 = (_3392 * 40u) + 8u;
                            _3435 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x));
                            uint _3438 = (_3392 * 40u) + 16u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3454 = (_3392 * 40u) + 20u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3392 * 40u) + 24u;
                            vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3488 = (_3392 * 40u) + 28u;
                            vec4 _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            _3513 = fma(_1853, _3501.z, fma(_1852, _3501.y, _3501.x * _1851)) + _3501.w;
                            _3514 = !((fma(_1853, _3482.z, fma(_1852, _3482.y, _3482.x * _1851)) + _3482.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3514)
                            {
                                float _3541 = _3407.x - _1851;
                                float _3542 = _3407.y - _1852;
                                float _3543 = _3407.z - _1853;
                                float _3544 = dot(vec3(_3541, _3542, _3543), vec3(_3541, _3542, _3543));
                                float _3547 = inversesqrt(_3544);
                                float _3548 = _3547 * _3541;
                                float _3549 = _3547 * _3542;
                                float _3550 = _3547 * _3543;
                                float _3554 = 1.0 - (_3544 / (_3408 * _3408));
                                float _4753 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3555 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3559 = sqrt(_3544) * _3423.w;
                                float _3561 = 1.39999997615814208984375 / (_3559 + 1.39999997615814208984375);
                                float _3562 = _3561 * _3561;
                                float _3565 = ((1.0 - _3562) * dot(vec3(_3548, _3549, _3550), vec3(_685, _688, _691))) + _3562;
                                float _3568 = _3559 * _3559;
                                float _3572 = (fma(_1853, _3451.z, fma(_1852, _3451.y, _3451.x * _1851)) + _3451.w) / _3513;
                                float _3573 = (fma(_1853, _3467.z, fma(_1852, _3467.y, _3467.x * _1851)) + _3467.w) / _3513;
                                float _3577 = 1.0 - dot(vec2(_3572, _3573), vec2(_3572, _3573));
                                float _4769 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3579 = _3578 * (((isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0))) * _3555) / ((_3568 * 0.699999988079071044921875) + 1.0));
                                float _3591 = exp2(log2(1.0 / ((_3568 * 3.5) + 5.0)) * 0.25);
                                float _3592 = 1.0 - _760;
                                float _3599 = sqrt(1.0 - ((1.0 - (_3592 * _3592)) * (1.0 - (_3591 * _3591))));
                                float _3600 = _3599 * _3599;
                                float _3601 = _3600 * _3600;
                                float _3602 = _3548 - _3020;
                                float _3603 = _3549 - _3021;
                                float _3604 = _3550 - _3022;
                                float _3608 = inversesqrt(dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604)));
                                float _3612 = dot(vec3(_685, _688, _691), vec3((-0.0) - _3020, (-0.0) - _3021, (-0.0) - _3022));
                                float _4780 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3615 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3616 = dot(vec3(_685, _688, _691), vec3(_3608 * _3602, _3608 * _3603, _3608 * _3604));
                                float _4791 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3619 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3623 = ((_3619 * _3619) * (_3601 + (-1.0))) + 1.0;
                                float _3624 = _3561 * _3600;
                                float _3625 = _3624 * _3624;
                                float _3631 = ((1.0 - _3625) * dot(vec3(_685, _688, _691), vec3(_3548, _3549, _3550))) + _3625;
                                float _4802 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3632 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3633 = 1.0 - _3600;
                                float _3643 = (0.5 / (((_3632 * ((_3615 * _3633) + _3600)) + 9.9999999392252902907785028219223e-09) + (((_3632 * _3633) + _3600) * _3615))) * _3632;
                                float _4813 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3653 = (_3578 * _3555) * (((_3601 * 3.1415927410125732421875) * (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) / ((_3623 * _3623) * ((_3568 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3579 * _3423.z;
                                frontier_phi_88_pred_1 = _3579 * _3423.y;
                                frontier_phi_88_pred_2 = _3579 * _3423.x;
                                frontier_phi_88_pred_3 = _3653 * _3435.z;
                                frontier_phi_88_pred_4 = _3653 * _3435.y;
                                frontier_phi_88_pred_5 = _3653 * _3435.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3662 = frontier_phi_88_pred;
                            _3661 = frontier_phi_88_pred_1;
                            _3660 = frontier_phi_88_pred_2;
                            _3659 = frontier_phi_88_pred_3;
                            _3658 = frontier_phi_88_pred_4;
                            _3657 = frontier_phi_88_pred_5;
                            _3365 = _3660 + _3378;
                            _3366 = _3661 + _3379;
                            _3367 = _3662 + _3380;
                            _3362 = _3657 + _3375;
                            _3363 = _3658 + _3376;
                            _3364 = _3659 + _3377;
                            if (_3382 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3382;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3367;
                        frontier_phi_82_pred_1 = _3366;
                        frontier_phi_82_pred_2 = _3365;
                        frontier_phi_82_pred_3 = _3364;
                        frontier_phi_82_pred_4 = _3363;
                        frontier_phi_82_pred_5 = _3362;
                    }
                    _3005 = frontier_phi_82_pred;
                    _3003 = frontier_phi_82_pred_1;
                    _3001 = frontier_phi_82_pred_2;
                    _2999 = frontier_phi_82_pred_3;
                    _2997 = frontier_phi_82_pred_4;
                    _2995 = frontier_phi_82_pred_5;
                    uint _3161 = _3160 + 1u;
                    if (_3161 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3154 = _2995;
                        _3155 = _2997;
                        _3156 = _2999;
                        _3157 = _3001;
                        _3158 = _3003;
                        _3159 = _3005;
                        _3160 = _3161;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3001;
                frontier_phi_63_64_ladder_1 = _3005;
                frontier_phi_63_64_ladder_2 = _3003;
                frontier_phi_63_64_ladder_3 = _2999;
                frontier_phi_63_64_ladder_4 = _2997;
                frontier_phi_63_64_ladder_5 = _2995;
            }
            else
            {
                frontier_phi_63_64_ladder = _2879;
                frontier_phi_63_64_ladder_1 = _2883;
                frontier_phi_63_64_ladder_2 = _2881;
                frontier_phi_63_64_ladder_3 = _2877;
                frontier_phi_63_64_ladder_4 = _2875;
                frontier_phi_63_64_ladder_5 = _2873;
            }
            _2994 = frontier_phi_63_64_ladder_5;
            _2996 = frontier_phi_63_64_ladder_4;
            _2998 = frontier_phi_63_64_ladder_3;
            _3000 = frontier_phi_63_64_ladder;
            _3002 = frontier_phi_63_64_ladder_2;
            _3004 = frontier_phi_63_64_ladder_1;
        }
        float _3009 = isnan(1.0) ? _744 : (isnan(_744) ? 1.0 : min(_744, 1.0));
        _2806 = (_3009 * _3000) + _2318;
        _2808 = (_3009 * _3002) + _2320;
        _2810 = (_3009 * _3004) + _2322;
        _2812 = ((_2994 * _728) * _3009) + _2656;
        _2814 = ((_2996 * _730) * _3009) + _2658;
        _2816 = ((_2998 * _731) * _3009) + _2660;
    }
    else
    {
        _2806 = _2318;
        _2808 = _2320;
        _2810 = _2322;
        _2812 = _2656;
        _2814 = _2658;
        _2816 = _2660;
    }
    float _4829 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4840 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4851 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _2833 = ((isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2806 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _744))) + ((_2812 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1583)) * cbPerFrame._m0[3u].x);
    float _2834 = ((isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2808 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _744))) + ((_2814 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1583)) * cbPerFrame._m0[3u].x);
    float _2835 = ((isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2810 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _744))) + ((_2816 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1583)) * cbPerFrame._m0[3u].x);
    uint _2836 = _243 + 6u;
    float _2844 = _664 / cbSceneParam._m0[86u].x;
    float _2845 = _665 / cbSceneParam._m0[86u].y;
    vec4 _2859 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2844, _2845, (log2((isnan(cbSceneParam._m0[77u].w) ? _586 : (isnan(_586) ? cbSceneParam._m0[77u].w : min(_586, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2861 = _2859.x;
    float _2862 = _2859.y;
    float _2863 = _2859.z;
    float _2864 = _2859.w;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    if (_586 > cbSceneParam._m0[78u].w)
    {
        float _2898 = isnan(_586) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _586 : min(cbSceneParam._m0[80u].w, _586));
        float _2899 = _2898 / _586;
        float _2910 = _2899 * _636;
        float _2911 = _637 * _2899;
        float _2912 = (-0.0) - _2911;
        float _2914 = _2899 * _638;
        float _2916 = (cbSceneParam._m0[77u].w * _2912) / _2898;
        float _2917 = _2916 + cbSceneParam._m0[79u].w;
        float _2918 = cbSceneParam._m0[79u].w - _2911;
        float _2924 = sqrt(((_2910 * _2910) + (_2911 * _2911)) + (_2914 * _2914));
        float _2927 = (1.0 - (cbSceneParam._m0[77u].w / _2898)) * _2924;
        float _2932 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2934 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3111;
        if (abs((_2912 - _2916) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3111 = ((((_2917 > 0.0) ? exp2(_2932 * _2917) : (2.0 - exp2(_2934 * _2917))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2927;
        }
        else
        {
            float _3055 = 1.0 / cbSceneParam._m0[80u].x;
            float _3056 = isnan(_2918) ? _2917 : (isnan(_2917) ? _2918 : max(_2917, _2918));
            float _3057 = isnan(_2918) ? _2917 : (isnan(_2917) ? _2918 : min(_2917, _2918));
            float _3066 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : min(_3056, 0.0));
            float _3067 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : min(_3057, 0.0));
            _3111 = ((abs(_2924 / _2912) * cbSceneParam._m0[80u].y) * ((((_3066 - _3067) * 2.0) - ((exp2(_2932 * (isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0)))) - exp2(_2932 * (isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))))) * _3055)) - ((exp2(_2934 * _3066) - exp2(_2934 * _3067)) * _3055))) + (_2927 * cbSceneParam._m0[80u].z);
        }
        vec4 _3113 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2844, _2845, 1.0), 0.0);
        float _3122 = exp2((_3111 * (-1.44269502162933349609375)) * (1.0 - _3113.w));
        float _3123 = log2(_3122);
        float _3139 = log2(_2864);
        _2936 = (exp2(_3139 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].x)) * _3113.x) / cbSceneParam._m0[78u].x)) + _2861;
        _2938 = (exp2(_3139 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].y)) * _3113.y) / cbSceneParam._m0[78u].y)) + _2862;
        _2940 = (exp2(_3139 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].z)) * _3113.z) / cbSceneParam._m0[78u].z)) + _2863;
        _2942 = _3122 * _2864;
    }
    else
    {
        _2936 = _2861;
        _2938 = _2862;
        _2940 = _2863;
        _2942 = _2864;
    }
    bool _3149;
    vec4 _2952;
    vec4 _2974;
    float _2976;
    float _2980;
    float _2981;
    float _2982;
    float _2983;
    bool _2993;
    for (;;)
    {
        _2952 = cbMatDynParam._m0[0u];
        float _2954 = roundEven(_2952.y);
        bool _2955 = _2954 == 3.0;
        float _2956 = log2(_2942);
        float _2963 = exp2(_2956 * cbSceneParam._m0[78u].x) * _2833;
        float _2964 = exp2(_2956 * cbSceneParam._m0[78u].y) * _2834;
        float _2965 = exp2(_2956 * cbSceneParam._m0[78u].z) * _2835;
        float _2972 = _652 + (-0.5);
        _2974 = cbMtdParam._m0[1u];
        _2976 = _2974.y * _2972;
        float _2979 = (_2954 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2980 = _2979 * (_2955 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2936)));
        _2981 = _2979 * (_2955 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2938)));
        _2982 = _2979 * (_2955 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2940)));
        _2983 = _2972 * 0.999000012874603271484375;
        _2993 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2993)
        {
            if ((cbInstanceData._m0[_243 + 7u].x + _2983) < 0.5)
            {
                _3149 = true;
                break;
            }
        }
        uint _3090 = _704 + uint(_2952.w);
        if ((cbInstanceData._m0[_3090].w < 1.0) && ((cbInstanceData._m0[_3090].w + _2983) < 0.5))
        {
            _3149 = true;
            break;
        }
        if ((_2976 + 1.0) < _2974.x)
        {
            _3149 = true;
            break;
        }
        _3149 = false;
        break;
    }
    float _3353;
    if (_3149)
    {
        discard_state = true;
        _3353 = 0.0;
    }
    else
    {
        _3353 = cbInstanceData._m0[_2836].w;
    }
    SV_Target.x = _2980;
    SV_Target.y = _2981;
    SV_Target.z = _2982;
    SV_Target.w = _3353;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2836].w;
    discard_exit();
}


