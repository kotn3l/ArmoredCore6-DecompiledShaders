#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1442;
float _4103;
float _4104;
float _4105;
float _4106;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4115 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _4126 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4137 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _346 = _341.x * cbMtdParam._m0[11u].x;
    float _347 = _341.y * cbMtdParam._m0[11u].y;
    float _348 = _341.z * cbMtdParam._m0[11u].z;
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].y) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4148 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _443 = (_436 * ((_367.x * cbMtdParam._m0[12u].x) - _346)) + _346;
    float _444 = (_436 * ((_367.y * cbMtdParam._m0[12u].y) - _347)) + _347;
    float _445 = (_436 * ((_367.z * cbMtdParam._m0[12u].z) - _348)) + _348;
    vec4 _462 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _484 = _482.x;
    float _494 = dot(vec4(_484, _482.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _508 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_484 - _494) * cbMtdParam._m0[24u].y) + _494) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4159 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _509 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _516 = (_509 * ((_462.x * cbMtdParam._m0[13u].x) - _443)) + _443;
    float _517 = (_509 * ((_462.y * cbMtdParam._m0[13u].y) - _444)) + _444;
    float _518 = (_509 * ((_462.z * cbMtdParam._m0[13u].z) - _445)) + _445;
    float _522 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _516;
    float _525 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _517;
    float _528 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _518;
    float _535 = ((_516 - _522) * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) + _522;
    float _536 = ((_517 - _525) * (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) + _525;
    float _537 = ((_518 - _528) * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) + _528;
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _303) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _304) + cbTextureTilingScale._m0[14u].w));
    vec4 _575 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _598 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _615 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _617 = _615.x;
    float _618 = _615.y;
    float _619 = _615.z;
    float _626 = ((_598.x - _617) * _436) + _617;
    float _627 = ((_598.y - _618) * _436) + _618;
    float _628 = ((_598.z - _619) * _436) + _619;
    vec4 _640 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _653 = ((_640.z - _628) * _509) + _628;
    float _656 = ((((_640.x - _626) * _509) + _626) * 2.0) + (-1.0);
    float _657 = ((((_640.y - _627) * _509) + _627) * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _4170 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _663 = sqrt(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))));
    vec4 _676 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _694 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _303) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _304) + cbTextureTilingScale._m0[11u].w));
    float _696 = _694.x;
    float _697 = 1.0 - _696;
    float _710 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_696 - _697) * cbMtdParam._m0[24u].z) + _697) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4181 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _711 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _718 = (_711 * ((_556.x * cbMtdParam._m0[18u].x) - _535)) + _535;
    float _719 = (_711 * ((_556.y * cbMtdParam._m0[18u].y) - _536)) + _536;
    float _720 = (_711 * ((_556.z * cbMtdParam._m0[18u].z) - _537)) + _537;
    vec4 _732 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _746 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _748 = _746.x;
    float _766 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _303) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _304) + cbTextureTilingScale._m0[9u].w)).x - _748) * _436) + _748;
    float _783 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _303) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _304) + cbTextureTilingScale._m0[21u].w)).x - _766) * _509) + _766;
    float _787 = ((_732.x - _783) * cbMtdParam._m0[19u].z) + _783;
    float _789 = _787 - (_787 * _711);
    float _794 = (((_575.z - _653) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _653;
    vec4 _807 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _303) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _304) + cbTextureTilingScale._m0[15u].w));
    float _814 = (_807.x * 2.0) + (-1.0);
    float _815 = (_807.y * 2.0) + (-1.0);
    float _816 = dot(vec2(_814, _815), vec2(_814, _815));
    float _4192 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _824 = (_711 * (_807.z - _794)) + _794;
    float _829 = _656 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_575.x * 2.0) + (-1.0)));
    float _830 = _657 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_575.y * 2.0) + (-1.0)));
    float _842 = (((_814 - _829) + (cbMtdParam._m0[21u].x * _829)) * _711) + _829;
    float _843 = (((_815 - _830) + (cbMtdParam._m0[21u].x * _830)) * _711) + _830;
    float _844 = (_711 * (sqrt(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) - _663)) + _663;
    float _848 = cbMtdParam._m0[22u].x + _676.w;
    float _851 = fma(_844, _250 * NORMAL.x, fma(_843, _257 * TANGENT.x, (_243 * _235) * _842));
    float _854 = fma(_844, _250 * NORMAL.y, fma(_843, _257 * TANGENT.y, (_243 * _236) * _842));
    float _857 = fma(_844, _250 * NORMAL.z, fma(_843, _257 * TANGENT.z, (_243 * _237) * _842));
    float _861 = inversesqrt(dot(vec3(_851, _854, _857), vec3(_851, _854, _857)));
    float _862 = _861 * _851;
    float _863 = _861 * _854;
    float _864 = _861 * _857;
    float _4203 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _865 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _4214 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4225 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4236 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4247 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4258 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _870 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _884 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _935 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _925);
    float _936 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _925);
    float _937 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _925);
    float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
    float _942 = _935 * _941;
    float _943 = _936 * _941;
    float _944 = _937 * _941;
    vec4 _949 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _951 = _949.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1123 = sqrt(((_935 * _935) + (_936 * _936)) + (_937 * _937));
        float _1129 = (cbMatDynParam._m0[5u].x * _1123) + cbMatDynParam._m0[5u].y;
        float _4269 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1134 = (cbMatDynParam._m0[5u].z * _1123) + cbMatDynParam._m0[5u].w;
        float _4280 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) - _1130)) + _1130) < ((_951 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _962 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _963 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _981 = fma(_864, cbSceneParam._m0[5u].z, fma(_863, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _862));
    float _984 = fma(_864, cbSceneParam._m0[6u].z, fma(_863, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _862));
    float _987 = fma(_864, cbSceneParam._m0[7u].z, fma(_863, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _862));
    uint _1000 = _284 + 9u;
    uint _1001 = _1000 + uint(cbMatDynParam._m0[0u].w);
    float _1007 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * cbInstanceData._m0[_1001].x;
    float _1008 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * cbInstanceData._m0[_1001].y;
    float _1009 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * cbInstanceData._m0[_1001].z;
    float _4291 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _4313 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _1013 = 1.0 - _870;
    float _1014 = _1010 * _1013;
    float _1015 = _1011 * _1013;
    float _1016 = _1012 * _1013;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _870;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _870;
    float _1023 = (_1012 + (-0.039999999105930328369140625)) * _870;
    float _1024 = _1021 + 0.039999999105930328369140625;
    float _1026 = _1022 + 0.039999999105930328369140625;
    float _1027 = _1023 + 0.039999999105930328369140625;
    vec4 _1036 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _962, cbSceneParam._m0[86u].y * _963));
    float _1040 = ((isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * TEXCOORD_5.w) * _1036.x;
    float _1041 = dot(vec3(_862, _863, _864), vec3(_942, _943, _944));
    float _1044 = _1041 * 2.0;
    float _1048 = (_1044 * _862) - _942;
    float _1049 = (_1044 * _863) - _943;
    float _1050 = (_1044 * _864) - _944;
    float _1054 = abs(dot(vec3(_942, _943, _944), vec3(_862, _863, _864)));
    float _4324 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1056 = sqrt(_865);
    float _1069 = exp2((_1056 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1056 * 3.0));
    float _1075 = (1.0 - _1069) * ((_1056 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1076 = _1069 * _1056;
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1441;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1166 = fma(_1112, cbModelParam._m0[26u].z, fma(_1108, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104));
        float _1170 = fma(_1112, cbModelParam._m0[27u].z, fma(_1108, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104));
        float _1174 = fma(_1112, cbModelParam._m0[28u].z, fma(_1108, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104));
        float _1199 = _1104 + _862;
        float _1200 = _1108 + _863;
        float _1201 = _1112 + _864;
        float _1211 = fma(_1201, cbModelParam._m0[26u].z, fma(_1200, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1199)) - _1166;
        float _1212 = fma(_1201, cbModelParam._m0[27u].z, fma(_1200, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1199)) - _1170;
        float _1213 = fma(_1201, cbModelParam._m0[28u].z, fma(_1200, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1199)) - _1174;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1166 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1170 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[34u].z) + ((((((_1174 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1269 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1235.x + (-0.5));
        float _1271 = _1269 * (_1235.y + (-0.5));
        float _1272 = _1269 * (_1235.z + (-0.5));
        float _1279 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1242.x + (-0.5));
        float _1281 = _1279 * (_1242.y + (-0.5));
        float _1282 = _1279 * (_1242.z + (-0.5));
        float _1289 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1249.x + (-0.5));
        float _1291 = _1289 * (_1249.y + (-0.5));
        float _1292 = _1289 * (_1249.z + (-0.5));
        float _1299 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1256.x + (-0.5));
        float _1301 = _1299 * (_1256.y + (-0.5));
        float _1302 = _1299 * (_1256.z + (-0.5));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = _1270 * 0.5;
        float _1307 = _1280 * 0.5;
        float _1308 = _1290 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1323 = (dot(vec3(_862, _863, _864), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1333 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4372 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1335 + 1.0))) + _1340) * _1303;
        float _1350 = _1271 * 0.5;
        float _1351 = _1281 * 0.5;
        float _1352 = _1291 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_862, _863, _864), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4405 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1377 + 1.0))) + _1382) * _1304;
        float _1392 = _1272 * 0.5;
        float _1393 = _1282 * 0.5;
        float _1394 = _1292 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_862, _863, _864), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4438 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1419 + 1.0))) + _1424) * _1305;
        _1441 = _1272;
        _1443 = _1271;
        _1444 = _1270;
        _1445 = _1282;
        _1446 = _1281;
        _1447 = _1280;
        _1448 = _1292;
        _1449 = _1291;
        _1450 = _1290;
        _1451 = _1305;
        _1452 = _1304;
        _1453 = _1303;
        _1454 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1455 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1456 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
    }
    else
    {
        _1441 = _1442;
        _1443 = _1442;
        _1444 = _1442;
        _1445 = _1442;
        _1446 = _1442;
        _1447 = _1442;
        _1448 = _1442;
        _1449 = _1442;
        _1450 = _1442;
        _1451 = _1442;
        _1452 = _1442;
        _1453 = _1442;
        _1454 = 0.0;
        _1455 = 0.0;
        _1456 = 0.0;
    }
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1483 = fma(_1112, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1104));
        float _1487 = fma(_1112, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1104));
        float _1491 = fma(_1112, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1104));
        float _1514 = _1104 + _862;
        float _1515 = _1108 + _863;
        float _1516 = _1112 + _864;
        float _1526 = fma(_1516, cbModelParam._m0[30u].z, fma(_1515, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1514)) - _1483;
        float _1527 = fma(_1516, cbModelParam._m0[31u].z, fma(_1515, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1514)) - _1487;
        float _1528 = fma(_1516, cbModelParam._m0[32u].z, fma(_1515, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1514)) - _1491;
        float _1532 = inversesqrt(dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528)));
        float _1545 = ((_1532 * _1526) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1483 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1546 = ((_1532 * _1527) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1487 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1547 = ((_1532 * _1528) / cbModelParam._m0[35u].z) + ((((((_1491 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        float _1582 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1549.x + (-0.5));
        float _1584 = _1582 * (_1549.y + (-0.5));
        float _1585 = _1582 * (_1549.z + (-0.5));
        float _1592 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1556.x + (-0.5));
        float _1594 = _1592 * (_1556.y + (-0.5));
        float _1595 = _1592 * (_1556.z + (-0.5));
        float _1602 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1563.x + (-0.5));
        float _1604 = _1602 * (_1563.y + (-0.5));
        float _1605 = _1602 * (_1563.z + (-0.5));
        float _1612 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1570.x + (-0.5));
        float _1614 = _1612 * (_1570.y + (-0.5));
        float _1615 = _1612 * (_1570.z + (-0.5));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = _1583 * 0.5;
        float _1620 = _1593 * 0.5;
        float _1621 = _1603 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_862, _863, _864), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4479 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4490 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4501 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_1646 + 1.0))) + _1651) * _1616;
        float _1661 = _1584 * 0.5;
        float _1662 = _1594 * 0.5;
        float _1663 = _1604 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_862, _863, _864), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4512 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4523 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4534 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_1688 + 1.0))) + _1693) * _1617;
        float _1703 = _1585 * 0.5;
        float _1704 = _1595 * 0.5;
        float _1705 = _1605 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_862, _863, _864), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4545 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4556 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4567 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_1730 + 1.0))) + _1735) * _1618;
        _1752 = _1585;
        _1753 = _1584;
        _1754 = _1583;
        _1755 = _1595;
        _1756 = _1594;
        _1757 = _1593;
        _1758 = _1605;
        _1759 = _1604;
        _1760 = _1603;
        _1761 = _1618;
        _1762 = _1617;
        _1763 = _1616;
        _1764 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
        _1765 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
        _1766 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
    }
    else
    {
        _1752 = _1442;
        _1753 = _1442;
        _1754 = _1442;
        _1755 = _1442;
        _1756 = _1442;
        _1757 = _1442;
        _1758 = _1442;
        _1759 = _1442;
        _1760 = _1442;
        _1761 = _1442;
        _1762 = _1442;
        _1763 = _1442;
        _1764 = 0.0;
        _1765 = 0.0;
        _1766 = 0.0;
    }
    float _1776 = (cbModelParam._m0[1u].x * (_1764 - _1454)) + _1454;
    float _1777 = (cbModelParam._m0[1u].x * (_1765 - _1455)) + _1455;
    float _1778 = (cbModelParam._m0[1u].x * (_1766 - _1456)) + _1456;
    float _1799 = fma(_1778, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1776 * cbSceneParam._m0[89u].x));
    float _1802 = fma(_1778, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1776 * cbSceneParam._m0[90u].x));
    float _1805 = fma(_1778, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1776));
    float _1820 = _1048 * 0.5;
    float _1821 = _1049 * 0.5;
    float _1822 = _1050 * 0.5;
    float _1823 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1754, _1757, _1760, _1763));
    float _1826 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1753, _1756, _1759, _1762));
    float _1829 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1752, _1755, _1758, _1761));
    float _1863;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1836 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1441, _1445, _1448, _1451));
        float _1840 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1443, _1446, _1449, _1452));
        float _1844 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1444, _1447, _1450, _1453));
        float _1851 = dot(vec4(cbModelParam._m0[39u]), vec4(_1820, _1821, _1822, 1.0));
        _1863 = dot(vec3(isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1851) ? 0.0 : (isnan(0.0) ? _1851 : max(0.0, _1851))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1863 = 1.0;
    }
    float _1874;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1865 = dot(vec4(cbModelParam._m0[40u]), vec4(_1820, _1821, _1822, 1.0));
        _1874 = dot(vec3(isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1865) ? 0.0 : (isnan(0.0) ? _1865 : max(0.0, _1865))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1874 = 1.0;
    }
    float _1878 = (_1874 * cbModelParam._m0[1u].x) + (_1863 * (1.0 - cbModelParam._m0[1u].x));
    float _1888 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _865);
    float _1889 = isnan(_1888) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1888 : min(cbModelParam._m0[25u].z, _1888));
    float _1969;
    float _1971;
    float _1973;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1936 = fma(_1112, cbModelParam._m0[13u].z, fma(_1108, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1104)) + cbModelParam._m0[13u].w;
        float _1940 = fma(_1112, cbModelParam._m0[14u].z, fma(_1108, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1104)) + cbModelParam._m0[14u].w;
        float _1944 = fma(_1112, cbModelParam._m0[15u].z, fma(_1108, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1104)) + cbModelParam._m0[15u].w;
        float _1947 = fma(_1050, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1048));
        float _1950 = fma(_1050, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1048));
        float _1953 = fma(_1050, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1048));
        float _1981;
        if (_1947 > 0.0)
        {
            _1981 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1981 = frontier_phi_17_15_ladder;
        }
        float _2152;
        if (_1950 > 0.0)
        {
            _2152 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2152 = frontier_phi_26_22_ladder;
        }
        float _2447;
        if (_1953 > 0.0)
        {
            _2447 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2447 = frontier_phi_38_33_ladder;
        }
        float _2449 = isnan(_2152) ? _1981 : (isnan(_1981) ? _2152 : min(_1981, _2152));
        float _2450 = isnan(_2447) ? _2449 : (isnan(_2449) ? _2447 : min(_2449, _2447));
        float _2454 = (_2450 * _1947) + _1936;
        float _2455 = (_2450 * _1950) + _1940;
        float _2456 = (_2450 * _1953) + _1944;
        float _2457 = _2450 * 9.9999997473787516355514526367188e-05;
        float _2459 = (-1.0) - _2457;
        float _2461 = _2457 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2456 > _2461) || ((_2456 < _2459) || ((_2455 > _2461) || ((_2455 < _2459) || ((_2454 < _2459) || (_2454 > _2461))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2601 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2456, cbModelParam._m0[9u].z, fma(_2455, cbModelParam._m0[9u].y, _2454 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2456, cbModelParam._m0[10u].z, fma(_2455, cbModelParam._m0[10u].y, _2454 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2456, cbModelParam._m0[11u].z, fma(_2455, cbModelParam._m0[11u].y, _2454 * cbModelParam._m0[11u].x))), _1889);
            frontier_phi_16_38_ladder = _2601.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2601.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2601.x * cbModelParam._m0[1u].y;
        }
        _1969 = frontier_phi_16_38_ladder_2;
        _1971 = frontier_phi_16_38_ladder_1;
        _1973 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1048, _1049, _1050), _1889);
        _1969 = _1957.x * cbModelParam._m0[1u].y;
        _1971 = _1957.y * cbModelParam._m0[1u].y;
        _1973 = _1957.z * cbModelParam._m0[1u].y;
    }
    float _1977 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _865);
    float _1978 = isnan(_1977) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1977 : min(cbModelParam._m0[25u].w, _1977));
    float _2067;
    float _2069;
    float _2071;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2031 = fma(_1112, cbModelParam._m0[21u].z, fma(_1108, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1104)) + cbModelParam._m0[21u].w;
        float _2035 = fma(_1112, cbModelParam._m0[22u].z, fma(_1108, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1104)) + cbModelParam._m0[22u].w;
        float _2039 = fma(_1112, cbModelParam._m0[23u].z, fma(_1108, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1104)) + cbModelParam._m0[23u].w;
        float _2042 = fma(_1050, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1048));
        float _2045 = fma(_1050, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1048));
        float _2048 = fma(_1050, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1048));
        float _2157;
        if (_2042 > 0.0)
        {
            _2157 = abs((1.0 - _2031) / _2042);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2031 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2157 = frontier_phi_28_24_ladder;
        }
        float _2474;
        if (_2045 > 0.0)
        {
            _2474 = abs((1.0 - _2035) / _2045);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2035 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2474 = frontier_phi_40_35_ladder;
        }
        float _2812;
        if (_2048 > 0.0)
        {
            _2812 = abs((1.0 - _2039) / _2048);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2039 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2812 = frontier_phi_50_47_ladder;
        }
        float _2814 = isnan(_2474) ? _2157 : (isnan(_2157) ? _2474 : min(_2157, _2474));
        float _2815 = isnan(_2812) ? _2814 : (isnan(_2814) ? _2812 : min(_2814, _2812));
        float _2819 = (_2815 * _2042) + _2031;
        float _2820 = (_2815 * _2045) + _2035;
        float _2821 = (_2815 * _2048) + _2039;
        float _2822 = _2815 * 9.9999997473787516355514526367188e-05;
        float _2823 = (-1.0) - _2822;
        float _2825 = _2822 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2821 > _2825) || ((_2821 < _2823) || ((_2820 > _2825) || ((_2820 < _2823) || ((_2819 < _2823) || (_2819 > _2825))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2943 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2821, cbModelParam._m0[17u].z, fma(_2820, cbModelParam._m0[17u].y, _2819 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2821, cbModelParam._m0[18u].z, fma(_2820, cbModelParam._m0[18u].y, _2819 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2821, cbModelParam._m0[19u].z, fma(_2820, cbModelParam._m0[19u].y, _2819 * cbModelParam._m0[19u].x))), _1978);
            frontier_phi_25_50_ladder = _2943.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2943.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2943.x * cbModelParam._m0[1u].z;
        }
        _2067 = frontier_phi_25_50_ladder_2;
        _2069 = frontier_phi_25_50_ladder_1;
        _2071 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2051 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1048, _1049, _1050), _1978);
        _2067 = _2051.x * cbModelParam._m0[1u].z;
        _2069 = _2051.y * cbModelParam._m0[1u].z;
        _2071 = _2051.z * cbModelParam._m0[1u].z;
    }
    float _2084 = (((_1075 * _1024) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2067 - _1969)) + _1969);
    float _2086 = (((_1075 * _1026) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2069 - _1971)) + _1971);
    float _2088 = (((_1075 * _1027) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2071 - _1973)) + _1973);
    float _2091 = fma(_2088, cbSceneParam._m0[89u].z, fma(_2086, cbSceneParam._m0[89u].y, _2084 * cbSceneParam._m0[89u].x));
    float _2094 = fma(_2088, cbSceneParam._m0[90u].z, fma(_2086, cbSceneParam._m0[90u].y, _2084 * cbSceneParam._m0[90u].x));
    float _2097 = fma(_2088, cbSceneParam._m0[91u].z, fma(_2086, cbSceneParam._m0[91u].y, _2084 * cbSceneParam._m0[91u].x));
    float _2131 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2135 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2139 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2143 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2144 = _2131 / _2143;
    float _2145 = _2135 / _2143;
    float _2146 = _2139 / _2143;
    float _2293;
    float _2294;
    float _2295;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2173 = ((uint(_2146 > cbSceneParam._m0[59u].y) + uint(_2146 > cbSceneParam._m0[59u].x)) + uint(_2146 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2174 = _2173 + 43u;
        uint _2182 = _2173 + 44u;
        uint _2190 = _2173 + 45u;
        uint _2198 = _2173 + 46u;
        float _2209 = fma(_2143, cbSceneParam._m0[_2174].w, fma(_2139, cbSceneParam._m0[_2174].z, fma(_2135, cbSceneParam._m0[_2174].y, _2131 * cbSceneParam._m0[_2174].x)));
        float _2213 = fma(_2143, cbSceneParam._m0[_2182].w, fma(_2139, cbSceneParam._m0[_2182].z, fma(_2135, cbSceneParam._m0[_2182].y, _2131 * cbSceneParam._m0[_2182].x)));
        float _2221 = fma(_2143, cbSceneParam._m0[_2198].w, fma(_2139, cbSceneParam._m0[_2198].z, fma(_2135, cbSceneParam._m0[_2198].y, _2131 * cbSceneParam._m0[_2198].x)));
        float _2226 = cbSceneParam._m0[33u].z * _2221;
        float _2228 = cbSceneParam._m0[33u].w * _2221;
        float _2231 = fma(_2143, cbSceneParam._m0[_2190].w, fma(_2139, cbSceneParam._m0[_2190].z, fma(_2135, cbSceneParam._m0[_2190].y, _2131 * cbSceneParam._m0[_2190].x))) / _2221;
        float _2279 = (cbSceneParam._m0[33u].x - sqrt(((_2145 * _2145) + (_2144 * _2144)) + (_2146 * _2146))) * cbSceneParam._m0[33u].y;
        float _4693 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2286 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2226 + _2209) / _2221, (_2228 + _2213) / _2221), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2228 + _2209) / _2221, (_2213 - _2226) / _2221), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2209 - _2226) / _2221, (_2213 - _2228) / _2221), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2209 - _2228) / _2221, (_2226 + _2213) / _2221), _2231), 0.0)).x), vec4(0.25)));
        _2293 = 1.0 - (_2286 * cbSceneParam._m0[34u].x);
        _2294 = 1.0 - (_2286 * cbSceneParam._m0[34u].y);
        _2295 = 1.0 - (_2286 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2293 = 1.0;
        _2294 = 1.0;
        _2295 = 1.0;
    }
    float _2359;
    float _2361;
    float _2363;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2347 = fma(_2143, cbSceneParam._m0[63u].w, fma(_2139, cbSceneParam._m0[63u].z, fma(_2135, cbSceneParam._m0[63u].y, _2131 * cbSceneParam._m0[63u].x)));
        float _2348 = fma(_2143, cbSceneParam._m0[60u].w, fma(_2139, cbSceneParam._m0[60u].z, fma(_2135, cbSceneParam._m0[60u].y, _2131 * cbSceneParam._m0[60u].x))) / _2347;
        float _2349 = fma(_2143, cbSceneParam._m0[61u].w, fma(_2139, cbSceneParam._m0[61u].z, fma(_2135, cbSceneParam._m0[61u].y, _2131 * cbSceneParam._m0[61u].x))) / _2347;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2348 >= cbSceneParam._m0[64u].x) && (_2349 >= cbSceneParam._m0[64u].y)) && (_2348 <= cbSceneParam._m0[64u].z)) && (_2349 <= cbSceneParam._m0[64u].w))
        {
            float _2487 = fma(_2143, cbSceneParam._m0[62u].w, fma(_2139, cbSceneParam._m0[62u].z, fma(_2135, cbSceneParam._m0[62u].y, _2131 * cbSceneParam._m0[62u].x))) / _2347;
            float _2491 = isnan(cbSceneParam._m0[41u].w) ? _2487 : (isnan(_2487) ? cbSceneParam._m0[41u].w : max(_2487, cbSceneParam._m0[41u].w));
            float _2534 = (cbSceneParam._m0[33u].x - sqrt(((_2145 * _2145) + (_2144 * _2144)) + (_2146 * _2146))) * cbSceneParam._m0[33u].y;
            float _4709 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
            float _2541 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2348, cbSceneParam._m0[33u].w + _2349), _2491), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2348, _2349 - cbSceneParam._m0[33u].z), _2491), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2348 - cbSceneParam._m0[33u].z, _2349 - cbSceneParam._m0[33u].w), _2491), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2348 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2349), _2491), 0.0)).x), vec4(0.25)));
            float _2545 = 1.0 - (_2541 * cbSceneParam._m0[34u].x);
            float _2546 = 1.0 - (_2541 * cbSceneParam._m0[34u].y);
            float _2547 = 1.0 - (_2541 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2547) ? _2295 : (isnan(_2295) ? _2547 : min(_2295, _2547));
            frontier_phi_37_36_ladder_1 = isnan(_2546) ? _2294 : (isnan(_2294) ? _2546 : min(_2294, _2546));
            frontier_phi_37_36_ladder_2 = isnan(_2545) ? _2293 : (isnan(_2293) ? _2545 : min(_2293, _2545));
        }
        else
        {
            frontier_phi_37_36_ladder = _2295;
            frontier_phi_37_36_ladder_1 = _2294;
            frontier_phi_37_36_ladder_2 = _2293;
        }
        _2359 = frontier_phi_37_36_ladder_2;
        _2361 = frontier_phi_37_36_ladder_1;
        _2363 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2359 = _2293;
        _2361 = _2294;
        _2363 = _2295;
    }
    uvec4 _2368 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2370 = _2368.x * 14u;
    uint _2371 = _2370 + 13u;
    float _2378 = _1040 + (-1.0);
    float _2383 = (cbLight._m0[_2371].x * _2378) + 1.0;
    float _2384 = (cbLight._m0[_2371].y * _2378) + 1.0;
    float _2385 = (cbLight._m0[_2371].z * _2378) + 1.0;
    float _2386 = (cbLight._m0[_2371].w * _2378) + 1.0;
    uint _2387 = _2370 + 5u;
    float _2393 = isnan(1.0) ? _2384 : (isnan(_2384) ? 1.0 : min(_2384, 1.0));
    uint _2397 = _2370 + 4u;
    float _2406 = isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0));
    uint _2410 = _2370 | 1u;
    float _2421 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_862, _863, _864));
    float _2424 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_862, _863, _864));
    float _4745 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _4756 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2429 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * 0.3183098733425140380859375;
    float _2431 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * 0.3183098733425140380859375;
    float _2438 = ((cbLight._m0[_2387].x * _2393) * _2431) + (((cbLight._m0[_2397].x * _2359) * _2406) * _2429);
    float _2439 = ((_2393 * cbLight._m0[_2387].y) * _2431) + (((cbLight._m0[_2397].y * _2361) * _2406) * _2429);
    float _2440 = ((_2393 * cbLight._m0[_2387].z) * _2431) + (((cbLight._m0[_2397].z * _2363) * _2406) * _2429);
    uvec4 _2444 = floatBitsToUint(cbLight._m0[_2370 + 12u]);
    bool _2446 = _2444.x == 0u;
    float _2548;
    float _2550;
    float _2552;
    if (_2446)
    {
        _2548 = _2438;
        _2550 = _2439;
        _2552 = _2440;
    }
    else
    {
        uint _2556 = _2370 + 6u;
        float _2572 = (dot(vec3(cbLight._m0[_2370 + 2u].xyz), vec3(_862, _863, _864)) * 0.5) + 0.5;
        float _2573 = _2572 * _2572;
        float _4767 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2574 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _2575 = isnan(1.0) ? _2385 : (isnan(_2385) ? 1.0 : min(_2385, 1.0));
        _2548 = (((cbLight._m0[_2556].x * 0.3183098733425140380859375) * _2574) * _2575) + _2438;
        _2550 = (((cbLight._m0[_2556].y * 0.3183098733425140380859375) * _2574) * _2575) + _2439;
        _2552 = (((cbLight._m0[_2556].z * 0.3183098733425140380859375) * _2574) * _2575) + _2440;
    }
    bool _2555 = _2444.y == 0u;
    float _2610;
    float _2612;
    float _2614;
    if (_2555)
    {
        _2610 = _2548;
        _2612 = _2550;
        _2614 = _2552;
    }
    else
    {
        uint _2783 = _2370 + 7u;
        float _2799 = (dot(vec3(cbLight._m0[_2370 + 3u].xyz), vec3(_862, _863, _864)) * 0.5) + 0.5;
        float _2800 = _2799 * _2799;
        float _4783 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2801 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2802 = isnan(1.0) ? _2386 : (isnan(_2386) ? 1.0 : min(_2386, 1.0));
        _2610 = (((cbLight._m0[_2783].x * 0.3183098733425140380859375) * _2801) * _2802) + _2548;
        _2612 = (((cbLight._m0[_2783].y * 0.3183098733425140380859375) * _2801) * _2802) + _2550;
        _2614 = (((cbLight._m0[_2783].z * 0.3183098733425140380859375) * _2801) * _2802) + _2552;
    }
    uint _2617 = _2370 + 8u;
    float _2630 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2370].w)) * _865) * 0.949999988079071044921875);
    float _2631 = _2630 * _2630;
    float _2632 = cbLight._m0[_2370].x + _942;
    float _2633 = cbLight._m0[_2370].y + _943;
    float _2634 = cbLight._m0[_2370].z + _944;
    float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
    float _2639 = _2638 * _2632;
    float _2640 = _2638 * _2633;
    float _2641 = _2638 * _2634;
    float _2642 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2370].xyz));
    float _4799 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2645 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
    float _4810 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _2646 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
    float _2647 = dot(vec3(_862, _863, _864), vec3(_2639, _2640, _2641));
    float _4821 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2650 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
    float _2651 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_2639, _2640, _2641));
    float _4832 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2655 = _2631 * _2631;
    float _2659 = ((_2650 * _2650) * (_2655 + (-1.0))) + 1.0;
    float _2667 = exp2(log2(1.0 - (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) * 5.0);
    float _2668 = 0.959999978542327880859375 - _1021;
    float _2670 = 0.959999978542327880859375 - _1022;
    float _2671 = 0.959999978542327880859375 - _1023;
    float _2678 = 1.0 - _2631;
    float _2689 = (0.5 / (((_2646 * ((_2645 * _2678) + _2631)) + 9.9999999392252902907785028219223e-09) + (((_2646 * _2678) + _2631) * _2645))) * _2645;
    float _4843 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2691 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2655 / ((_2659 * _2659) * 3.141590118408203125));
    uint _2705 = _2370 + 9u;
    float _2716 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _865) * 0.949999988079071044921875);
    float _2717 = _2716 * _2716;
    float _2718 = cbLight._m0[_2410].x + _942;
    float _2719 = cbLight._m0[_2410].y + _943;
    float _2720 = cbLight._m0[_2410].z + _944;
    float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
    float _2725 = _2724 * _2718;
    float _2726 = _2724 * _2719;
    float _2727 = _2724 * _2720;
    float _2728 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2410].xyz));
    float _4854 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2731 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
    float _2732 = dot(vec3(_862, _863, _864), vec3(_2725, _2726, _2727));
    float _4865 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2735 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
    float _2736 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2725, _2726, _2727));
    float _4876 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2740 = _2717 * _2717;
    float _2744 = ((_2735 * _2735) * (_2740 + (-1.0))) + 1.0;
    float _2751 = exp2(log2(1.0 - (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) * 5.0);
    float _2758 = 1.0 - _2717;
    float _2768 = (0.5 / (((_2646 * ((_2731 * _2758) + _2717)) + 9.9999999392252902907785028219223e-09) + (((_2646 * _2758) + _2717) * _2731))) * _2731;
    float _4887 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2770 = (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2740 / ((_2744 * _2744) * 3.141590118408203125));
    float _2780 = (((((_2751 * _2668) + _1024) * cbLight._m0[_2705].x) * _2770) * _2393) + ((((cbLight._m0[_2617].x * _2359) * ((_2667 * _2668) + _1024)) * _2691) * _2406);
    float _2781 = (((((_2751 * _2670) + _1026) * cbLight._m0[_2705].y) * _2770) * _2393) + ((((cbLight._m0[_2617].y * _2361) * ((_2667 * _2670) + _1026)) * _2691) * _2406);
    float _2782 = (((((_2751 * _2671) + _1027) * cbLight._m0[_2705].z) * _2770) * _2393) + ((((cbLight._m0[_2617].z * _2363) * ((_2667 * _2671) + _1027)) * _2691) * _2406);
    float _2838;
    float _2840;
    float _2842;
    if (_2446)
    {
        _2838 = _2780;
        _2840 = _2781;
        _2842 = _2782;
    }
    else
    {
        uint _2844 = _2370 + 2u;
        uint _2848 = _2370 + 10u;
        float _2862 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2844].w)) * _865) * 0.949999988079071044921875);
        float _2863 = _2862 * _2862;
        float _2864 = cbLight._m0[_2844].x + _942;
        float _2865 = cbLight._m0[_2844].y + _943;
        float _2866 = cbLight._m0[_2844].z + _944;
        float _2870 = inversesqrt(dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866)));
        float _2871 = _2870 * _2864;
        float _2872 = _2870 * _2865;
        float _2873 = _2870 * _2866;
        float _2874 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2844].xyz));
        float _4898 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2877 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
        float _2878 = dot(vec3(_862, _863, _864), vec3(_2871, _2872, _2873));
        float _4909 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2881 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
        float _2882 = dot(vec3(cbLight._m0[_2844].xyz), vec3(_2871, _2872, _2873));
        float _4920 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2886 = _2863 * _2863;
        float _2890 = ((_2881 * _2881) * (_2886 + (-1.0))) + 1.0;
        float _2897 = exp2(log2(1.0 - (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) * 5.0);
        float _2904 = 1.0 - _2863;
        float _2914 = (0.5 / (((_2646 * ((_2877 * _2904) + _2863)) + 9.9999999392252902907785028219223e-09) + (((_2646 * _2904) + _2863) * _2877))) * _2877;
        float _4931 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2916 = (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2886 / ((_2890 * _2890) * 3.141590118408203125));
        float _2917 = isnan(1.0) ? _2385 : (isnan(_2385) ? 1.0 : min(_2385, 1.0));
        _2838 = (((((_2897 * _2668) + _1024) * cbLight._m0[_2848].x) * _2916) * _2917) + _2780;
        _2840 = (((((_2897 * _2670) + _1026) * cbLight._m0[_2848].y) * _2916) * _2917) + _2781;
        _2842 = (((((_2897 * _2671) + _1027) * cbLight._m0[_2848].z) * _2916) * _2917) + _2782;
    }
    float _2948;
    float _2950;
    float _2952;
    if (_2555)
    {
        _2948 = _2838;
        _2950 = _2840;
        _2952 = _2842;
    }
    else
    {
        uint _2959 = _2370 + 3u;
        uint _2963 = _2370 + 11u;
        float _2977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2959].w)) * _865) * 0.949999988079071044921875);
        float _2978 = _2977 * _2977;
        float _2979 = cbLight._m0[_2959].x + _942;
        float _2980 = cbLight._m0[_2959].y + _943;
        float _2981 = cbLight._m0[_2959].z + _944;
        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
        float _2986 = _2985 * _2979;
        float _2987 = _2985 * _2980;
        float _2988 = _2985 * _2981;
        float _2989 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2959].xyz));
        float _4947 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2992 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
        float _2993 = dot(vec3(_862, _863, _864), vec3(_2986, _2987, _2988));
        float _4958 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        float _2996 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
        float _2997 = dot(vec3(cbLight._m0[_2959].xyz), vec3(_2986, _2987, _2988));
        float _4969 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        float _3001 = _2978 * _2978;
        float _3005 = ((_2996 * _2996) * (_3001 + (-1.0))) + 1.0;
        float _3012 = exp2(log2(1.0 - (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0)))) * 5.0);
        float _3019 = 1.0 - _2978;
        float _3029 = (0.5 / (((_2646 * ((_2992 * _3019) + _2978)) + 9.9999999392252902907785028219223e-09) + (((_2646 * _3019) + _2978) * _2992))) * _2992;
        float _4980 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
        float _3031 = (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0))) * (_3001 / ((_3005 * _3005) * 3.141590118408203125));
        float _3032 = isnan(1.0) ? _2386 : (isnan(_2386) ? 1.0 : min(_2386, 1.0));
        _2948 = (((((_3012 * _2668) + _1024) * cbLight._m0[_2963].x) * _3031) * _3032) + _2838;
        _2950 = (((((_3012 * _2670) + _1026) * cbLight._m0[_2963].y) * _3031) * _3032) + _2840;
        _2952 = (((((_3012 * _2671) + _1027) * cbLight._m0[_2963].z) * _3031) * _3032) + _2842;
    }
    float _3098;
    float _3100;
    float _3102;
    float _3104;
    float _3106;
    float _3108;
    if (_2368.y == 0u)
    {
        uvec4 _3053 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3054 = _3053.x;
        uint _3065 = uint((float(_3053.y) * floor(float(uint(cbSceneParam._m0[85u].y * _963) / _3054))) + floor(float(uint(cbSceneParam._m0[85u].x * _962) / _3054)));
        float _3075 = (log2(_2146 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3076 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
        uint _3079 = uint(isnan(14.0) ? _3076 : (isnan(_3076) ? 14.0 : min(_3076, 14.0)));
        uvec4 _3084 = texelFetch(g_lightClusterGridBuffer, int(((_3079 << 2u) + (_3065 << 6u)) >> 2u));
        uint _3085 = _3084.x;
        uint _3086 = _3053.z;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        if (((((1u << ((_3086 >> 4u) & 15u)) + 4294967295u) & _3085) == 0u) || ((_3086 & 240u) == 0u))
        {
            _3165 = 0.0;
            _3167 = 0.0;
            _3169 = 0.0;
            _3171 = 0.0;
            _3173 = 0.0;
            _3175 = 0.0;
        }
        else
        {
            float _3166;
            float _3168;
            float _3170;
            float _3172;
            float _3174;
            float _3176;
            float _3318 = 0.0;
            float _3319 = 0.0;
            float _3320 = 0.0;
            float _3321 = 0.0;
            float _3322 = 0.0;
            float _3323 = 0.0;
            uint _3324 = 0u;
            uint _3333;
            bool _3334;
            for (;;)
            {
                _3333 = texelFetch(g_lightClassification, int((((_3079 << 5u) + (_3065 << 9u)) + (_3324 << 2u)) >> 2u)).x;
                _3334 = _3333 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3334)
                {
                    frontier_phi_71_pred = _3323;
                    frontier_phi_71_pred_1 = _3322;
                    frontier_phi_71_pred_2 = _3321;
                    frontier_phi_71_pred_3 = _3320;
                    frontier_phi_71_pred_4 = _3319;
                    frontier_phi_71_pred_5 = _3318;
                }
                else
                {
                    float _3463;
                    float _3464;
                    float _3465;
                    float _3466;
                    float _3467;
                    float _3468;
                    uint _3469;
                    _3463 = _3318;
                    _3464 = _3319;
                    _3465 = _3320;
                    _3466 = _3321;
                    _3467 = _3322;
                    _3468 = _3323;
                    _3469 = _3333;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    float _3395;
                    for (;;)
                    {
                        uint _3473 = uint(findLSB(_3469)) + (_3324 << 5u);
                        uint _3470 = (_3469 + 4294967295u) & _3469;
                        uint _3475 = _3473 * 48u;
                        vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3475)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 3u)).x));
                        uint _3495 = (_3473 * 48u) + 4u;
                        vec4 _3508 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3495)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 3u)).x));
                        uint _3514 = (_3473 * 48u) + 8u;
                        vec3 _3525 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3514)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 2u)).x));
                        float _3529 = _3489.x - _2144;
                        float _3530 = _3489.y - _2145;
                        float _3531 = _3489.z - _2146;
                        float _3532 = dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531));
                        float _3535 = inversesqrt(_3532);
                        float _3536 = _3535 * _3529;
                        float _3537 = _3535 * _3530;
                        float _3538 = _3535 * _3531;
                        float _3539 = dot(vec3(_981, _984, _987), vec3(_3536, _3537, _3538));
                        float _3544 = 1.0 - (_3532 * _3489.w);
                        float _5006 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3545 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                        float _3546 = sqrt(_3532) * _3508.w;
                        float _3549 = 1.39999997615814208984375 / (_3546 + 1.39999997615814208984375);
                        float _3550 = _3549 * _3549;
                        float _3553 = ((1.0 - _3550) * _3539) + _3550;
                        float _3556 = _3546 * _3546;
                        float _3560 = ((isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0))) * _3545) / ((_3556 * 0.699999988079071044921875) + 1.0);
                        float _3564 = (-0.0) - _2144;
                        float _3565 = (-0.0) - _2145;
                        float _3566 = (-0.0) - _2146;
                        float _3570 = inversesqrt(dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566)));
                        float _3571 = _3570 * _3564;
                        float _3572 = _3570 * _3565;
                        float _3573 = _3570 * _3566;
                        float _3580 = exp2(log2(1.0 / ((_3556 * 3.5) + 5.0)) * 0.25);
                        float _3581 = 1.0 - _1056;
                        float _3588 = sqrt(1.0 - ((1.0 - (_3581 * _3581)) * (1.0 - (_3580 * _3580))));
                        float _3589 = _3588 * _3588;
                        float _3590 = _3589 * _3589;
                        float _3591 = _3571 + _3536;
                        float _3592 = _3572 + _3537;
                        float _3593 = _3573 + _3538;
                        float _3597 = inversesqrt(dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593)));
                        float _3601 = dot(vec3(_981, _984, _987), vec3(_3571, _3572, _3573));
                        float _5022 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                        float _3604 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                        float _3605 = dot(vec3(_981, _984, _987), vec3(_3597 * _3591, _3597 * _3592, _3597 * _3593));
                        float _5033 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                        float _3608 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                        float _3612 = ((_3608 * _3608) * (_3590 + (-1.0))) + 1.0;
                        float _3613 = _3549 * _3589;
                        float _3614 = _3613 * _3613;
                        float _3617 = ((1.0 - _3614) * _3539) + _3614;
                        float _5044 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                        float _3618 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                        float _3619 = 1.0 - _3589;
                        float _3629 = (0.5 / (((_3618 * ((_3604 * _3619) + _3589)) + 9.9999999392252902907785028219223e-09) + (((_3618 * _3619) + _3589) * _3604))) * _3618;
                        float _5055 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                        float _3640 = (((_3590 * 3.1415927410125732421875) * (isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0)))) / ((_3612 * _3612) * ((_3556 * 2.1991131305694580078125) + 3.141590118408203125))) * _3545;
                        _3393 = (_3560 * _3508.x) + _3466;
                        _3394 = (_3560 * _3508.y) + _3467;
                        _3395 = (_3560 * _3508.z) + _3468;
                        _3390 = (_3640 * _3525.x) + _3463;
                        _3391 = (_3640 * _3525.y) + _3464;
                        _3392 = (_3640 * _3525.z) + _3465;
                        if (_3470 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3463 = _3390;
                            _3464 = _3391;
                            _3465 = _3392;
                            _3466 = _3393;
                            _3467 = _3394;
                            _3468 = _3395;
                            _3469 = _3470;
                        }
                    }
                    frontier_phi_71_pred = _3395;
                    frontier_phi_71_pred_1 = _3394;
                    frontier_phi_71_pred_2 = _3393;
                    frontier_phi_71_pred_3 = _3392;
                    frontier_phi_71_pred_4 = _3391;
                    frontier_phi_71_pred_5 = _3390;
                }
                _3176 = frontier_phi_71_pred;
                _3174 = frontier_phi_71_pred_1;
                _3172 = frontier_phi_71_pred_2;
                _3170 = frontier_phi_71_pred_3;
                _3168 = frontier_phi_71_pred_4;
                _3166 = frontier_phi_71_pred_5;
                uint _3325 = _3324 + 1u;
                if (_3325 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3318 = _3166;
                    _3319 = _3168;
                    _3320 = _3170;
                    _3321 = _3172;
                    _3322 = _3174;
                    _3323 = _3176;
                    _3324 = _3325;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3165 = _3166;
            _3167 = _3168;
            _3169 = _3170;
            _3171 = _3172;
            _3173 = _3174;
            _3175 = _3176;
        }
        uvec4 _3179 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3180 = _3179.z;
        uint _3182 = (_3180 >> 8u) & 15u;
        float _3286;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        float _3296;
        if (((4294967295u << _3182) & _3085) == 0u)
        {
            _3286 = _3165;
            _3288 = _3167;
            _3290 = _3169;
            _3292 = _3171;
            _3294 = _3173;
            _3296 = _3175;
        }
        else
        {
            float _3311 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
            float _3312 = _3311 * _2144;
            float _3313 = _3311 * _2145;
            float _3314 = _3311 * _2146;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3182 < ((_3180 >> 12u) & 15u))
            {
                float _3287;
                float _3289;
                float _3291;
                float _3293;
                float _3295;
                float _3297;
                float _3446 = _3165;
                float _3447 = _3167;
                float _3448 = _3169;
                float _3449 = _3171;
                float _3450 = _3173;
                float _3451 = _3175;
                uint _3452 = _3182;
                uint _3461;
                bool _3462;
                for (;;)
                {
                    _3461 = texelFetch(g_lightClassification, int((((_3079 << 5u) + (_3065 << 9u)) + (_3452 << 2u)) >> 2u)).x;
                    _3462 = _3461 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3462)
                    {
                        frontier_phi_82_pred = _3451;
                        frontier_phi_82_pred_1 = _3450;
                        frontier_phi_82_pred_2 = _3449;
                        frontier_phi_82_pred_3 = _3448;
                        frontier_phi_82_pred_4 = _3447;
                        frontier_phi_82_pred_5 = _3446;
                    }
                    else
                    {
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3947;
                        float _3948;
                        float _3949;
                        float _3950;
                        float _3951;
                        float _3952;
                        float _3667 = _3446;
                        float _3668 = _3447;
                        float _3669 = _3448;
                        float _3670 = _3449;
                        float _3671 = _3450;
                        float _3672 = _3451;
                        uint _3673 = _3461;
                        uint _3674;
                        vec4 _3699;
                        float _3700;
                        vec4 _3715;
                        vec3 _3727;
                        vec4 _3742;
                        vec4 _3757;
                        float _3803;
                        bool _3804;
                        for (;;)
                        {
                            uint _3684 = ((_3452 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3673));
                            _3674 = (_3673 + 4294967295u) & _3673;
                            uint _3686 = _3684 * 40u;
                            _3699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 3u)).x));
                            _3700 = _3699.w;
                            uint _3702 = (_3684 * 40u) + 4u;
                            _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            uint _3717 = (_3684 * 40u) + 8u;
                            _3727 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x));
                            uint _3729 = (_3684 * 40u) + 16u;
                            _3742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 3u)).x));
                            uint _3744 = (_3684 * 40u) + 20u;
                            _3757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 3u)).x));
                            uint _3759 = (_3684 * 40u) + 24u;
                            vec4 _3772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 3u)).x));
                            uint _3778 = (_3684 * 40u) + 28u;
                            vec4 _3791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 3u)).x));
                            _3803 = fma(_2146, _3791.z, fma(_2145, _3791.y, _3791.x * _2144)) + _3791.w;
                            _3804 = !((fma(_2146, _3772.z, fma(_2145, _3772.y, _3772.x * _2144)) + _3772.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3804)
                            {
                                float _3831 = _3699.x - _2144;
                                float _3832 = _3699.y - _2145;
                                float _3833 = _3699.z - _2146;
                                float _3834 = dot(vec3(_3831, _3832, _3833), vec3(_3831, _3832, _3833));
                                float _3837 = inversesqrt(_3834);
                                float _3838 = _3837 * _3831;
                                float _3839 = _3837 * _3832;
                                float _3840 = _3837 * _3833;
                                float _3844 = 1.0 - (_3834 / (_3700 * _3700));
                                float _5066 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3845 = isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0));
                                float _3849 = sqrt(_3834) * _3715.w;
                                float _3851 = 1.39999997615814208984375 / (_3849 + 1.39999997615814208984375);
                                float _3852 = _3851 * _3851;
                                float _3855 = ((1.0 - _3852) * dot(vec3(_3838, _3839, _3840), vec3(_981, _984, _987))) + _3852;
                                float _3858 = _3849 * _3849;
                                float _3862 = (fma(_2146, _3742.z, fma(_2145, _3742.y, _3742.x * _2144)) + _3742.w) / _3803;
                                float _3863 = (fma(_2146, _3757.z, fma(_2145, _3757.y, _3757.x * _2144)) + _3757.w) / _3803;
                                float _3867 = 1.0 - dot(vec2(_3862, _3863), vec2(_3862, _3863));
                                float _5082 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3868 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                                float _3869 = _3868 * (((isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0))) * _3845) / ((_3858 * 0.699999988079071044921875) + 1.0));
                                float _3881 = exp2(log2(1.0 / ((_3858 * 3.5) + 5.0)) * 0.25);
                                float _3882 = 1.0 - _1056;
                                float _3889 = sqrt(1.0 - ((1.0 - (_3882 * _3882)) * (1.0 - (_3881 * _3881))));
                                float _3890 = _3889 * _3889;
                                float _3891 = _3890 * _3890;
                                float _3892 = _3838 - _3312;
                                float _3893 = _3839 - _3313;
                                float _3894 = _3840 - _3314;
                                float _3898 = inversesqrt(dot(vec3(_3892, _3893, _3894), vec3(_3892, _3893, _3894)));
                                float _3902 = dot(vec3(_981, _984, _987), vec3((-0.0) - _3312, (-0.0) - _3313, (-0.0) - _3314));
                                float _5093 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3905 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
                                float _3906 = dot(vec3(_981, _984, _987), vec3(_3898 * _3892, _3898 * _3893, _3898 * _3894));
                                float _5104 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                                float _3909 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
                                float _3913 = ((_3909 * _3909) * (_3891 + (-1.0))) + 1.0;
                                float _3914 = _3851 * _3890;
                                float _3915 = _3914 * _3914;
                                float _3921 = ((1.0 - _3915) * dot(vec3(_981, _984, _987), vec3(_3838, _3839, _3840))) + _3915;
                                float _5115 = isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0));
                                float _3922 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
                                float _3923 = 1.0 - _3890;
                                float _3933 = (0.5 / (((_3922 * ((_3905 * _3923) + _3890)) + 9.9999999392252902907785028219223e-09) + (((_3922 * _3923) + _3890) * _3905))) * _3922;
                                float _5126 = isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0));
                                float _3943 = (_3868 * _3845) * (((_3891 * 3.1415927410125732421875) * (isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0)))) / ((_3913 * _3913) * ((_3858 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3869 * _3715.z;
                                frontier_phi_88_pred_1 = _3869 * _3715.y;
                                frontier_phi_88_pred_2 = _3869 * _3715.x;
                                frontier_phi_88_pred_3 = _3943 * _3727.z;
                                frontier_phi_88_pred_4 = _3943 * _3727.y;
                                frontier_phi_88_pred_5 = _3943 * _3727.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3952 = frontier_phi_88_pred;
                            _3951 = frontier_phi_88_pred_1;
                            _3950 = frontier_phi_88_pred_2;
                            _3949 = frontier_phi_88_pred_3;
                            _3948 = frontier_phi_88_pred_4;
                            _3947 = frontier_phi_88_pred_5;
                            _3657 = _3950 + _3670;
                            _3658 = _3951 + _3671;
                            _3659 = _3952 + _3672;
                            _3654 = _3947 + _3667;
                            _3655 = _3948 + _3668;
                            _3656 = _3949 + _3669;
                            if (_3674 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3667 = _3654;
                                _3668 = _3655;
                                _3669 = _3656;
                                _3670 = _3657;
                                _3671 = _3658;
                                _3672 = _3659;
                                _3673 = _3674;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3659;
                        frontier_phi_82_pred_1 = _3658;
                        frontier_phi_82_pred_2 = _3657;
                        frontier_phi_82_pred_3 = _3656;
                        frontier_phi_82_pred_4 = _3655;
                        frontier_phi_82_pred_5 = _3654;
                    }
                    _3297 = frontier_phi_82_pred;
                    _3295 = frontier_phi_82_pred_1;
                    _3293 = frontier_phi_82_pred_2;
                    _3291 = frontier_phi_82_pred_3;
                    _3289 = frontier_phi_82_pred_4;
                    _3287 = frontier_phi_82_pred_5;
                    uint _3453 = _3452 + 1u;
                    if (_3453 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3446 = _3287;
                        _3447 = _3289;
                        _3448 = _3291;
                        _3449 = _3293;
                        _3450 = _3295;
                        _3451 = _3297;
                        _3452 = _3453;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3293;
                frontier_phi_63_64_ladder_1 = _3297;
                frontier_phi_63_64_ladder_2 = _3295;
                frontier_phi_63_64_ladder_3 = _3291;
                frontier_phi_63_64_ladder_4 = _3289;
                frontier_phi_63_64_ladder_5 = _3287;
            }
            else
            {
                frontier_phi_63_64_ladder = _3171;
                frontier_phi_63_64_ladder_1 = _3175;
                frontier_phi_63_64_ladder_2 = _3173;
                frontier_phi_63_64_ladder_3 = _3169;
                frontier_phi_63_64_ladder_4 = _3167;
                frontier_phi_63_64_ladder_5 = _3165;
            }
            _3286 = frontier_phi_63_64_ladder_5;
            _3288 = frontier_phi_63_64_ladder_4;
            _3290 = frontier_phi_63_64_ladder_3;
            _3292 = frontier_phi_63_64_ladder;
            _3294 = frontier_phi_63_64_ladder_2;
            _3296 = frontier_phi_63_64_ladder_1;
        }
        float _3301 = isnan(1.0) ? _1040 : (isnan(_1040) ? 1.0 : min(_1040, 1.0));
        _3098 = (_3301 * _3292) + _2610;
        _3100 = (_3301 * _3294) + _2612;
        _3102 = (_3301 * _3296) + _2614;
        _3104 = ((_3286 * _1024) * _3301) + _2948;
        _3106 = ((_3288 * _1026) * _3301) + _2950;
        _3108 = ((_3290 * _1027) * _3301) + _2952;
    }
    else
    {
        _3098 = _2610;
        _3100 = _2612;
        _3102 = _2614;
        _3104 = _2948;
        _3106 = _2950;
        _3108 = _2952;
    }
    float _5142 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _5153 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _5164 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _3125 = ((isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0))) * (_3098 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1040))) + ((_3104 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1878)) * cbPerFrame._m0[3u].x);
    float _3126 = ((isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0))) * (_3100 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1040))) + ((_3106 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1878)) * cbPerFrame._m0[3u].x);
    float _3127 = ((isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0))) * (_3102 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1040))) + ((_3108 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1878)) * cbPerFrame._m0[3u].x);
    uint _3128 = _284 + 6u;
    float _3136 = _962 / cbSceneParam._m0[86u].x;
    float _3137 = _963 / cbSceneParam._m0[86u].y;
    vec4 _3151 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3136, _3137, (log2((isnan(cbSceneParam._m0[77u].w) ? _884 : (isnan(_884) ? cbSceneParam._m0[77u].w : min(_884, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3153 = _3151.x;
    float _3154 = _3151.y;
    float _3155 = _3151.z;
    float _3156 = _3151.w;
    float _3228;
    float _3230;
    float _3232;
    float _3234;
    if (_884 > cbSceneParam._m0[78u].w)
    {
        float _3190 = isnan(_884) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _884 : min(cbSceneParam._m0[80u].w, _884));
        float _3191 = _3190 / _884;
        float _3202 = _3191 * _935;
        float _3203 = _936 * _3191;
        float _3204 = (-0.0) - _3203;
        float _3206 = _3191 * _937;
        float _3208 = (cbSceneParam._m0[77u].w * _3204) / _3190;
        float _3209 = _3208 + cbSceneParam._m0[79u].w;
        float _3210 = cbSceneParam._m0[79u].w - _3203;
        float _3216 = sqrt(((_3202 * _3202) + (_3203 * _3203)) + (_3206 * _3206));
        float _3219 = (1.0 - (cbSceneParam._m0[77u].w / _3190)) * _3216;
        float _3224 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3226 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3403;
        if (abs((_3204 - _3208) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3403 = ((((_3209 > 0.0) ? exp2(_3224 * _3209) : (2.0 - exp2(_3226 * _3209))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3219;
        }
        else
        {
            float _3347 = 1.0 / cbSceneParam._m0[80u].x;
            float _3348 = isnan(_3210) ? _3209 : (isnan(_3209) ? _3210 : max(_3209, _3210));
            float _3349 = isnan(_3210) ? _3209 : (isnan(_3209) ? _3210 : min(_3209, _3210));
            float _3358 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : min(_3348, 0.0));
            float _3359 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : min(_3349, 0.0));
            _3403 = ((abs(_3216 / _3204) * cbSceneParam._m0[80u].y) * ((((_3358 - _3359) * 2.0) - ((exp2(_3224 * (isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0)))) - exp2(_3224 * (isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0))))) * _3347)) - ((exp2(_3226 * _3358) - exp2(_3226 * _3359)) * _3347))) + (_3219 * cbSceneParam._m0[80u].z);
        }
        vec4 _3405 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3136, _3137, 1.0), 0.0);
        float _3414 = exp2((_3403 * (-1.44269502162933349609375)) * (1.0 - _3405.w));
        float _3415 = log2(_3414);
        float _3431 = log2(_3156);
        _3228 = (exp2(_3431 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3415 * cbSceneParam._m0[78u].x)) * _3405.x) / cbSceneParam._m0[78u].x)) + _3153;
        _3230 = (exp2(_3431 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3415 * cbSceneParam._m0[78u].y)) * _3405.y) / cbSceneParam._m0[78u].y)) + _3154;
        _3232 = (exp2(_3431 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3415 * cbSceneParam._m0[78u].z)) * _3405.z) / cbSceneParam._m0[78u].z)) + _3155;
        _3234 = _3414 * _3156;
    }
    else
    {
        _3228 = _3153;
        _3230 = _3154;
        _3232 = _3155;
        _3234 = _3156;
    }
    bool _3441;
    vec4 _3244;
    vec4 _3266;
    float _3268;
    float _3272;
    float _3273;
    float _3274;
    float _3275;
    bool _3285;
    for (;;)
    {
        _3244 = cbMatDynParam._m0[0u];
        float _3246 = roundEven(_3244.y);
        bool _3247 = _3246 == 3.0;
        float _3248 = log2(_3234);
        float _3255 = exp2(_3248 * cbSceneParam._m0[78u].x) * _3125;
        float _3256 = exp2(_3248 * cbSceneParam._m0[78u].y) * _3126;
        float _3257 = exp2(_3248 * cbSceneParam._m0[78u].z) * _3127;
        float _3264 = _951 + (-0.5);
        _3266 = cbMtdParam._m0[1u];
        _3268 = _3266.y * _3264;
        float _3271 = (_3246 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3272 = _3271 * (_3247 ? _3255 : (_3255 + (cbSceneParam._m0[72u].w * _3228)));
        _3273 = _3271 * (_3247 ? _3256 : (_3256 + (cbSceneParam._m0[72u].w * _3230)));
        _3274 = _3271 * (_3247 ? _3257 : (_3257 + (cbSceneParam._m0[72u].w * _3232)));
        _3275 = _3264 * 0.999000012874603271484375;
        _3285 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3285)
        {
            if ((cbInstanceData._m0[_284 + 7u].x + _3275) < 0.5)
            {
                _3441 = true;
                break;
            }
        }
        uint _3382 = _1000 + uint(_3244.w);
        if ((cbInstanceData._m0[_3382].w < 1.0) && ((cbInstanceData._m0[_3382].w + _3275) < 0.5))
        {
            _3441 = true;
            break;
        }
        if ((_3268 + 1.0) < _3266.x)
        {
            _3441 = true;
            break;
        }
        _3441 = false;
        break;
    }
    float _3645;
    if (_3441)
    {
        discard_state = true;
        _3645 = 0.0;
    }
    else
    {
        _3645 = cbInstanceData._m0[_3128].w;
    }
    SV_Target.x = _3272;
    SV_Target.y = _3273;
    SV_Target.z = _3274;
    SV_Target.w = _3645;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3128].w;
    discard_exit();
}


