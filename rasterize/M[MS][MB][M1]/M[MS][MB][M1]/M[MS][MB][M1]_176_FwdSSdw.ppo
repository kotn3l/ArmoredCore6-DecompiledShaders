#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1390;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3741 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3752 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3763 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _405 = _403.x;
    float _417 = dot(vec4(_405, _403.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _434 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_405 - _417) * cbMtdParam._m0[24u].y) + _417) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3774 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _442 = (_435 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _443 = (_435 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _444 = (_435 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _483 = _481.x;
    float _493 = dot(vec4(_483, _481.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _507 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_483 - _493) * cbMtdParam._m0[24u].y) + _493) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3785 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _515 = (_508 * ((_461.x * cbMtdParam._m0[13u].x) - _442)) + _442;
    float _516 = (_508 * ((_461.y * cbMtdParam._m0[13u].y) - _443)) + _443;
    float _517 = (_508 * ((_461.z * cbMtdParam._m0[13u].z) - _444)) + _444;
    float _521 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _515;
    float _524 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _516;
    float _527 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _517;
    float _534 = ((_515 - _521) * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) + _521;
    float _535 = ((_516 - _524) * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) + _524;
    float _536 = ((_517 - _527) * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) + _527;
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _590 = _588.x;
    float _591 = _588.y;
    float _592 = _588.z;
    float _599 = ((_571.x - _590) * _435) + _590;
    float _600 = ((_571.y - _591) * _435) + _591;
    float _601 = ((_571.z - _592) * _435) + _592;
    vec4 _613 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _626 = ((_613.z - _601) * _508) + _601;
    float _629 = ((((_613.x - _599) * _508) + _599) * 2.0) + (-1.0);
    float _630 = ((((_613.y - _600) * _508) + _600) * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _3796 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _636 = sqrt(1.0 - (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))));
    float _641 = _629 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_548.x * 2.0) + (-1.0)));
    float _642 = _630 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_548.y * 2.0) + (-1.0)));
    vec4 _655 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _669 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _671 = _669.x;
    float _672 = 1.0 - _671;
    float _698 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_671 - _672) * cbMtdParam._m0[24u].w) + _672) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3807 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _707 = ((((cbMtdParam._m0[10u].x - _534) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _699) + _534;
    float _708 = ((((cbMtdParam._m0[10u].y - _535) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _699) + _535;
    float _709 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _536)) * _699) + _536;
    vec4 _721 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _735 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _737 = _735.x;
    float _755 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _737) * _435) + _737;
    float _773 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _302) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _303) + cbTextureTilingScale._m0[21u].w)).x - _755) * _508) + _755;
    float _777 = ((_721.x - _773) * cbMtdParam._m0[19u].z) + _773;
    float _779 = _777 - (_777 * _699);
    float _784 = (((_548.z - _626) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _626;
    float _788 = ((cbMtdParam._m0[23u].y - _784) * _699) + _784;
    vec4 _807 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _813 = (_807.x * 2.0) + (-1.0);
    float _814 = (_807.y * 2.0) + (-1.0);
    float _815 = dot(vec2(_813, _814), vec2(_813, _814));
    float _3818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _831 = (_699 * (((cbMtdParam._m0[22u].z * _641) - _641) + _813)) + _641;
    float _832 = (_699 * (((cbMtdParam._m0[22u].z * _642) - _642) + _814)) + _642;
    float _833 = (_699 * (sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) - _636)) + _636;
    float _837 = cbMtdParam._m0[22u].x + _655.w;
    float _840 = fma(_833, _251 * NORMAL.x, fma(_832, _258 * TANGENT.x, (_244 * _236) * _831));
    float _843 = fma(_833, _251 * NORMAL.y, fma(_832, _258 * TANGENT.y, (_244 * _237) * _831));
    float _846 = fma(_833, _251 * NORMAL.z, fma(_832, _258 * TANGENT.z, (_244 * _238) * _831));
    float _850 = inversesqrt(dot(vec3(_840, _843, _846), vec3(_840, _843, _846)));
    float _851 = _850 * _840;
    float _852 = _850 * _843;
    float _853 = _850 * _846;
    float _3829 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _854 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _3851 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _3862 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _3873 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _3884 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _859 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _873 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _923 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _913);
    float _924 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _913);
    float _925 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _913);
    float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
    float _930 = _923 * _929;
    float _931 = _924 * _929;
    float _932 = _925 * _929;
    float _938 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _939 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _957 = fma(_853, cbSceneParam._m0[5u].z, fma(_852, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _851));
    float _960 = fma(_853, cbSceneParam._m0[6u].z, fma(_852, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _851));
    float _963 = fma(_853, cbSceneParam._m0[7u].z, fma(_852, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _851));
    uint _977 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _983 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * cbInstanceData._m0[_977].x;
    float _984 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_977].y;
    float _985 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_977].z;
    float _3895 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _986 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _987 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _988 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _989 = 1.0 - _859;
    float _990 = _986 * _989;
    float _991 = _987 * _989;
    float _992 = _988 * _989;
    float _997 = (_986 + (-0.039999999105930328369140625)) * _859;
    float _998 = (_987 + (-0.039999999105930328369140625)) * _859;
    float _999 = (_988 + (-0.039999999105930328369140625)) * _859;
    float _1000 = _997 + 0.039999999105930328369140625;
    float _1002 = _998 + 0.039999999105930328369140625;
    float _1003 = _999 + 0.039999999105930328369140625;
    vec4 _1012 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _938, cbSceneParam._m0[86u].y * _939));
    float _1016 = ((isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * TEXCOORD_5.w) * _1012.x;
    float _1017 = dot(vec3(_851, _852, _853), vec3(_930, _931, _932));
    float _1020 = _1017 * 2.0;
    float _1024 = (_1020 * _851) - _930;
    float _1025 = (_1020 * _852) - _931;
    float _1026 = (_1020 * _853) - _932;
    float _1030 = abs(dot(vec3(_930, _931, _932), vec3(_851, _852, _853)));
    float _3928 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1032 = sqrt(_854);
    float _1045 = exp2((_1032 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1032 * 3.0));
    float _1051 = (1.0 - _1045) * ((_1032 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1052 = _1045 * _1032;
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1389;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1114 = fma(_1088, cbModelParam._m0[26u].z, fma(_1084, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1080));
        float _1118 = fma(_1088, cbModelParam._m0[27u].z, fma(_1084, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1080));
        float _1122 = fma(_1088, cbModelParam._m0[28u].z, fma(_1084, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1080));
        float _1147 = _1080 + _851;
        float _1148 = _1084 + _852;
        float _1149 = _1088 + _853;
        float _1159 = fma(_1149, cbModelParam._m0[26u].z, fma(_1148, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1147)) - _1114;
        float _1160 = fma(_1149, cbModelParam._m0[27u].z, fma(_1148, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1147)) - _1118;
        float _1161 = fma(_1149, cbModelParam._m0[28u].z, fma(_1148, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1147)) - _1122;
        float _1165 = inversesqrt(dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161)));
        float _1178 = ((_1165 * _1159) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1114 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1165 * _1160) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1118 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1165 * _1161) / cbModelParam._m0[34u].z) + ((((((_1122 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        float _1217 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1183.x + (-0.5));
        float _1219 = _1217 * (_1183.y + (-0.5));
        float _1220 = _1217 * (_1183.z + (-0.5));
        float _1227 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1190.x + (-0.5));
        float _1229 = _1227 * (_1190.y + (-0.5));
        float _1230 = _1227 * (_1190.z + (-0.5));
        float _1237 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1197.x + (-0.5));
        float _1239 = _1237 * (_1197.y + (-0.5));
        float _1240 = _1237 * (_1197.z + (-0.5));
        float _1247 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1204.x + (-0.5));
        float _1249 = _1247 * (_1204.y + (-0.5));
        float _1250 = _1247 * (_1204.z + (-0.5));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = _1218 * 0.5;
        float _1255 = _1228 * 0.5;
        float _1256 = _1238 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1271 = (dot(vec3(_851, _852, _853), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1281 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3976 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1283 + 1.0))) + _1288) * _1251;
        float _1298 = _1219 * 0.5;
        float _1299 = _1229 * 0.5;
        float _1300 = _1239 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_851, _852, _853), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4009 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1325 + 1.0))) + _1330) * _1252;
        float _1340 = _1220 * 0.5;
        float _1341 = _1230 * 0.5;
        float _1342 = _1240 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_851, _852, _853), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4042 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1367 + 1.0))) + _1372) * _1253;
        _1389 = _1220;
        _1391 = _1219;
        _1392 = _1218;
        _1393 = _1230;
        _1394 = _1229;
        _1395 = _1228;
        _1396 = _1240;
        _1397 = _1239;
        _1398 = _1238;
        _1399 = _1253;
        _1400 = _1252;
        _1401 = _1251;
        _1402 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
    }
    else
    {
        _1389 = _1390;
        _1391 = _1390;
        _1392 = _1390;
        _1393 = _1390;
        _1394 = _1390;
        _1395 = _1390;
        _1396 = _1390;
        _1397 = _1390;
        _1398 = _1390;
        _1399 = _1390;
        _1400 = _1390;
        _1401 = _1390;
        _1402 = 0.0;
        _1403 = 0.0;
        _1404 = 0.0;
    }
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1428 = fma(_1088, cbModelParam._m0[30u].z, fma(_1084, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1080));
        float _1432 = fma(_1088, cbModelParam._m0[31u].z, fma(_1084, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1080));
        float _1436 = fma(_1088, cbModelParam._m0[32u].z, fma(_1084, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1080));
        float _1459 = _1080 + _851;
        float _1460 = _1084 + _852;
        float _1461 = _1088 + _853;
        float _1471 = fma(_1461, cbModelParam._m0[30u].z, fma(_1460, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1459)) - _1428;
        float _1472 = fma(_1461, cbModelParam._m0[31u].z, fma(_1460, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1459)) - _1432;
        float _1473 = fma(_1461, cbModelParam._m0[32u].z, fma(_1460, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1459)) - _1436;
        float _1477 = inversesqrt(dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473)));
        float _1490 = ((_1477 * _1471) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1428 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1491 = ((_1477 * _1472) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1432 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1492 = ((_1477 * _1473) / cbModelParam._m0[35u].z) + ((((((_1436 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        float _1527 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1494.x + (-0.5));
        float _1529 = _1527 * (_1494.y + (-0.5));
        float _1530 = _1527 * (_1494.z + (-0.5));
        float _1537 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1501.x + (-0.5));
        float _1539 = _1537 * (_1501.y + (-0.5));
        float _1540 = _1537 * (_1501.z + (-0.5));
        float _1547 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1508.x + (-0.5));
        float _1549 = _1547 * (_1508.y + (-0.5));
        float _1550 = _1547 * (_1508.z + (-0.5));
        float _1557 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1515.x + (-0.5));
        float _1559 = _1557 * (_1515.y + (-0.5));
        float _1560 = _1557 * (_1515.z + (-0.5));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = _1528 * 0.5;
        float _1565 = _1538 * 0.5;
        float _1566 = _1548 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_851, _852, _853), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4105 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1591 + 1.0))) + _1596) * _1561;
        float _1606 = _1529 * 0.5;
        float _1607 = _1539 * 0.5;
        float _1608 = _1549 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_851, _852, _853), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4138 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1633 + 1.0))) + _1638) * _1562;
        float _1648 = _1530 * 0.5;
        float _1649 = _1540 * 0.5;
        float _1650 = _1550 * 0.5;
        float _1651 = dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650));
        float _1656 = (_1651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1651);
        float _1664 = (dot(vec3(_851, _852, _853), vec3(_1656 * _1648, _1656 * _1649, _1656 * _1650)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1673 = sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1675 = _1674 * 2.0;
        float _1679 = (1.0 - _1674) / (_1674 + 1.0);
        float _4171 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1689 = ((((1.0 - _1680) * (_1675 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1675 + 1.0))) + _1680) * _1563;
        _1697 = _1530;
        _1698 = _1529;
        _1699 = _1528;
        _1700 = _1540;
        _1701 = _1539;
        _1702 = _1538;
        _1703 = _1550;
        _1704 = _1549;
        _1705 = _1548;
        _1706 = _1563;
        _1707 = _1562;
        _1708 = _1561;
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
    }
    else
    {
        _1697 = _1390;
        _1698 = _1390;
        _1699 = _1390;
        _1700 = _1390;
        _1701 = _1390;
        _1702 = _1390;
        _1703 = _1390;
        _1704 = _1390;
        _1705 = _1390;
        _1706 = _1390;
        _1707 = _1390;
        _1708 = _1390;
        _1709 = 0.0;
        _1710 = 0.0;
        _1711 = 0.0;
    }
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1402)) + _1402;
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1403)) + _1403;
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1404)) + _1404;
    float _1744 = fma(_1723, cbSceneParam._m0[89u].z, fma(_1722, cbSceneParam._m0[89u].y, _1721 * cbSceneParam._m0[89u].x));
    float _1747 = fma(_1723, cbSceneParam._m0[90u].z, fma(_1722, cbSceneParam._m0[90u].y, _1721 * cbSceneParam._m0[90u].x));
    float _1750 = fma(_1723, cbSceneParam._m0[91u].z, fma(_1722, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1721));
    float _1765 = _1024 * 0.5;
    float _1766 = _1025 * 0.5;
    float _1767 = _1026 * 0.5;
    float _1768 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1771 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1774 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1808;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1781 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1389, _1393, _1396, _1399));
        float _1785 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1391, _1394, _1397, _1400));
        float _1789 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1392, _1395, _1398, _1401));
        float _1796 = dot(vec4(cbModelParam._m0[39u]), vec4(_1765, _1766, _1767, 1.0));
        _1808 = dot(vec3(isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1808 = 1.0;
    }
    float _1819;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1810 = dot(vec4(cbModelParam._m0[40u]), vec4(_1765, _1766, _1767, 1.0));
        _1819 = dot(vec3(isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1810) ? 0.0 : (isnan(0.0) ? _1810 : max(0.0, _1810))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1819 = 1.0;
    }
    float _1823 = (_1819 * cbModelParam._m0[1u].x) + (_1808 * (1.0 - cbModelParam._m0[1u].x));
    float _1833 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _854);
    float _1834 = isnan(_1833) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1833 : min(cbModelParam._m0[25u].z, _1833));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1883 = fma(_1088, cbModelParam._m0[13u].z, fma(_1084, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1080)) + cbModelParam._m0[13u].w;
        float _1887 = fma(_1088, cbModelParam._m0[14u].z, fma(_1084, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1080)) + cbModelParam._m0[14u].w;
        float _1891 = fma(_1088, cbModelParam._m0[15u].z, fma(_1084, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1080)) + cbModelParam._m0[15u].w;
        float _1894 = fma(_1026, cbModelParam._m0[13u].z, fma(_1025, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1024));
        float _1897 = fma(_1026, cbModelParam._m0[14u].z, fma(_1025, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1024));
        float _1900 = fma(_1026, cbModelParam._m0[15u].z, fma(_1025, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1024));
        float _1928;
        if (_1894 > 0.0)
        {
            _1928 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1928 = frontier_phi_14_12_ladder;
        }
        float _2152;
        if (_1897 > 0.0)
        {
            _2152 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2152 = frontier_phi_23_19_ladder;
        }
        float _2409;
        if (_1900 > 0.0)
        {
            _2409 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2409 = frontier_phi_35_30_ladder;
        }
        float _2411 = isnan(_2152) ? _1928 : (isnan(_1928) ? _2152 : min(_1928, _2152));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1894) + _1883;
        float _2417 = (_2412 * _1897) + _1887;
        float _2418 = (_2412 * _1900) + _1891;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2419;
        float _2423 = _2419 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 > _2423) || ((_2417 < _2421) || ((_2416 < _2421) || (_2416 > _2423))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2546 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2418, cbModelParam._m0[9u].z, fma(_2417, cbModelParam._m0[9u].y, _2416 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2418, cbModelParam._m0[10u].z, fma(_2417, cbModelParam._m0[10u].y, _2416 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2418, cbModelParam._m0[11u].z, fma(_2417, cbModelParam._m0[11u].y, _2416 * cbModelParam._m0[11u].x))), _1834);
            frontier_phi_13_35_ladder = _2546.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2546.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2546.x * cbModelParam._m0[1u].y;
        }
        _1916 = frontier_phi_13_35_ladder_2;
        _1918 = frontier_phi_13_35_ladder_1;
        _1920 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1024, _1025, _1026), _1834);
        _1916 = _1904.x * cbModelParam._m0[1u].y;
        _1918 = _1904.y * cbModelParam._m0[1u].y;
        _1920 = _1904.z * cbModelParam._m0[1u].y;
    }
    float _1924 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _854);
    float _1925 = isnan(_1924) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1924 : min(cbModelParam._m0[25u].w, _1924));
    float _2015;
    float _2017;
    float _2019;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1979 = fma(_1088, cbModelParam._m0[21u].z, fma(_1084, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1080)) + cbModelParam._m0[21u].w;
        float _1983 = fma(_1088, cbModelParam._m0[22u].z, fma(_1084, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1080)) + cbModelParam._m0[22u].w;
        float _1987 = fma(_1088, cbModelParam._m0[23u].z, fma(_1084, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1080)) + cbModelParam._m0[23u].w;
        float _1990 = fma(_1026, cbModelParam._m0[21u].z, fma(_1025, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1024));
        float _1993 = fma(_1026, cbModelParam._m0[22u].z, fma(_1025, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1024));
        float _1996 = fma(_1026, cbModelParam._m0[23u].z, fma(_1025, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1024));
        float _2157;
        if (_1990 > 0.0)
        {
            _2157 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2157 = frontier_phi_25_21_ladder;
        }
        float _2436;
        if (_1993 > 0.0)
        {
            _2436 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2436 = frontier_phi_37_32_ladder;
        }
        float _2649;
        if (_1996 > 0.0)
        {
            _2649 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2649 = frontier_phi_46_43_ladder;
        }
        float _2651 = isnan(_2436) ? _2157 : (isnan(_2157) ? _2436 : min(_2157, _2436));
        float _2652 = isnan(_2649) ? _2651 : (isnan(_2651) ? _2649 : min(_2651, _2649));
        float _2656 = (_2652 * _1990) + _1979;
        float _2657 = (_2652 * _1993) + _1983;
        float _2658 = (_2652 * _1996) + _1987;
        float _2659 = _2652 * 9.9999997473787516355514526367188e-05;
        float _2660 = (-1.0) - _2659;
        float _2662 = _2659 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2658 > _2662) || ((_2658 < _2660) || ((_2657 > _2662) || ((_2657 < _2660) || ((_2656 < _2660) || (_2656 > _2662))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2857 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2658, cbModelParam._m0[17u].z, fma(_2657, cbModelParam._m0[17u].y, _2656 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2658, cbModelParam._m0[18u].z, fma(_2657, cbModelParam._m0[18u].y, _2656 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2658, cbModelParam._m0[19u].z, fma(_2657, cbModelParam._m0[19u].y, _2656 * cbModelParam._m0[19u].x))), _1925);
            frontier_phi_22_46_ladder = _2857.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2857.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2857.x * cbModelParam._m0[1u].z;
        }
        _2015 = frontier_phi_22_46_ladder_2;
        _2017 = frontier_phi_22_46_ladder_1;
        _2019 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1999 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1024, _1025, _1026), _1925);
        _2015 = _1999.x * cbModelParam._m0[1u].z;
        _2017 = _1999.y * cbModelParam._m0[1u].z;
        _2019 = _1999.z * cbModelParam._m0[1u].z;
    }
    float _2032 = (((_1051 * _1000) + _1052) * _1016) * ((cbModelParam._m0[1u].w * (_2015 - _1916)) + _1916);
    float _2034 = (((_1051 * _1002) + _1052) * _1016) * ((cbModelParam._m0[1u].w * (_2017 - _1918)) + _1918);
    float _2036 = (((_1051 * _1003) + _1052) * _1016) * ((cbModelParam._m0[1u].w * (_2019 - _1920)) + _1920);
    float _2039 = fma(_2036, cbSceneParam._m0[89u].z, fma(_2034, cbSceneParam._m0[89u].y, _2032 * cbSceneParam._m0[89u].x));
    float _2042 = fma(_2036, cbSceneParam._m0[90u].z, fma(_2034, cbSceneParam._m0[90u].y, _2032 * cbSceneParam._m0[90u].x));
    float _2045 = fma(_2036, cbSceneParam._m0[91u].z, fma(_2034, cbSceneParam._m0[91u].y, _2032 * cbSceneParam._m0[91u].x));
    vec4 _2053 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_938, _939));
    float _2055 = _2053.w;
    float _2067 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2055);
    float _2068 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2055);
    float _2069 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2055);
    uvec4 _2073 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2075 = _2073.x * 14u;
    uint _2076 = _2075 + 13u;
    float _2083 = _1016 + (-1.0);
    float _2088 = (cbLight._m0[_2076].x * _2083) + 1.0;
    float _2089 = (cbLight._m0[_2076].y * _2083) + 1.0;
    float _2090 = (cbLight._m0[_2076].z * _2083) + 1.0;
    float _2091 = (cbLight._m0[_2076].w * _2083) + 1.0;
    uint _2092 = _2075 + 5u;
    float _2098 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
    uint _2102 = _2075 + 4u;
    float _2111 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
    uint _2115 = _2075 | 1u;
    float _2126 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_851, _852, _853));
    float _2129 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_851, _852, _853));
    float _4307 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _4318 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2134 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * 0.3183098733425140380859375;
    float _2136 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * 0.3183098733425140380859375;
    float _2143 = ((cbLight._m0[_2092].x * _2098) * _2136) + (((cbLight._m0[_2102].x * _2067) * _2111) * _2134);
    float _2144 = ((_2098 * cbLight._m0[_2092].y) * _2136) + (((cbLight._m0[_2102].y * _2068) * _2111) * _2134);
    float _2145 = ((_2098 * cbLight._m0[_2092].z) * _2136) + (((cbLight._m0[_2102].z * _2069) * _2111) * _2134);
    uvec4 _2149 = floatBitsToUint(cbLight._m0[_2075 + 12u]);
    bool _2151 = _2149.x == 0u;
    float _2162;
    float _2164;
    float _2166;
    if (_2151)
    {
        _2162 = _2143;
        _2164 = _2144;
        _2166 = _2145;
    }
    else
    {
        uint _2170 = _2075 + 6u;
        float _2186 = (dot(vec3(cbLight._m0[_2075 + 2u].xyz), vec3(_851, _852, _853)) * 0.5) + 0.5;
        float _2187 = _2186 * _2186;
        float _4329 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2188 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2189 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2162 = (((cbLight._m0[_2170].x * 0.3183098733425140380859375) * _2188) * _2189) + _2143;
        _2164 = (((cbLight._m0[_2170].y * 0.3183098733425140380859375) * _2188) * _2189) + _2144;
        _2166 = (((cbLight._m0[_2170].z * 0.3183098733425140380859375) * _2188) * _2189) + _2145;
    }
    bool _2169 = _2149.y == 0u;
    float _2207;
    float _2209;
    float _2211;
    if (_2169)
    {
        _2207 = _2162;
        _2209 = _2164;
        _2211 = _2166;
    }
    else
    {
        uint _2380 = _2075 + 7u;
        float _2396 = (dot(vec3(cbLight._m0[_2075 + 3u].xyz), vec3(_851, _852, _853)) * 0.5) + 0.5;
        float _2397 = _2396 * _2396;
        float _4345 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2398 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2399 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2207 = (((cbLight._m0[_2380].x * 0.3183098733425140380859375) * _2398) * _2399) + _2162;
        _2209 = (((cbLight._m0[_2380].y * 0.3183098733425140380859375) * _2398) * _2399) + _2164;
        _2211 = (((cbLight._m0[_2380].z * 0.3183098733425140380859375) * _2398) * _2399) + _2166;
    }
    uint _2214 = _2075 + 8u;
    float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _854) * 0.949999988079071044921875);
    float _2228 = _2227 * _2227;
    float _2229 = cbLight._m0[_2075].x + _930;
    float _2230 = cbLight._m0[_2075].y + _931;
    float _2231 = cbLight._m0[_2075].z + _932;
    float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
    float _2236 = _2235 * _2229;
    float _2237 = _2235 * _2230;
    float _2238 = _2235 * _2231;
    float _2239 = dot(vec3(_851, _852, _853), vec3(cbLight._m0[_2075].xyz));
    float _4361 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _4372 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _2243 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _2244 = dot(vec3(_851, _852, _853), vec3(_2236, _2237, _2238));
    float _4383 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _2248 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2236, _2237, _2238));
    float _4394 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2252 = _2228 * _2228;
    float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
    float _2264 = exp2(log2(1.0 - (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) * 5.0);
    float _2265 = 0.959999978542327880859375 - _997;
    float _2267 = 0.959999978542327880859375 - _998;
    float _2268 = 0.959999978542327880859375 - _999;
    float _2275 = 1.0 - _2228;
    float _2286 = (0.5 / (((_2243 * ((_2242 * _2275) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2275) + _2228) * _2242))) * _2242;
    float _4405 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2288 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
    uint _2302 = _2075 + 9u;
    float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _854) * 0.949999988079071044921875);
    float _2314 = _2313 * _2313;
    float _2315 = cbLight._m0[_2115].x + _930;
    float _2316 = cbLight._m0[_2115].y + _931;
    float _2317 = cbLight._m0[_2115].z + _932;
    float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
    float _2322 = _2321 * _2315;
    float _2323 = _2321 * _2316;
    float _2324 = _2321 * _2317;
    float _2325 = dot(vec3(_851, _852, _853), vec3(cbLight._m0[_2115].xyz));
    float _4416 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2329 = dot(vec3(_851, _852, _853), vec3(_2322, _2323, _2324));
    float _4427 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2333 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2322, _2323, _2324));
    float _4438 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2337 = _2314 * _2314;
    float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
    float _2348 = exp2(log2(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) * 5.0);
    float _2355 = 1.0 - _2314;
    float _2365 = (0.5 / (((_2243 * ((_2328 * _2355) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2355) + _2314) * _2328))) * _2328;
    float _4449 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2367 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
    float _2377 = (((((_2348 * _2265) + _1000) * cbLight._m0[_2302].x) * _2367) * _2098) + ((((cbLight._m0[_2214].x * _2067) * ((_2264 * _2265) + _1000)) * _2288) * _2111);
    float _2378 = (((((_2348 * _2267) + _1002) * cbLight._m0[_2302].y) * _2367) * _2098) + ((((cbLight._m0[_2214].y * _2068) * ((_2264 * _2267) + _1002)) * _2288) * _2111);
    float _2379 = (((((_2348 * _2268) + _1003) * cbLight._m0[_2302].z) * _2367) * _2098) + ((((cbLight._m0[_2214].z * _2069) * ((_2264 * _2268) + _1003)) * _2288) * _2111);
    float _2441;
    float _2443;
    float _2445;
    if (_2151)
    {
        _2441 = _2377;
        _2443 = _2378;
        _2445 = _2379;
    }
    else
    {
        uint _2447 = _2075 + 2u;
        uint _2451 = _2075 + 10u;
        float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _854) * 0.949999988079071044921875);
        float _2466 = _2465 * _2465;
        float _2467 = cbLight._m0[_2447].x + _930;
        float _2468 = cbLight._m0[_2447].y + _931;
        float _2469 = cbLight._m0[_2447].z + _932;
        float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
        float _2474 = _2473 * _2467;
        float _2475 = _2473 * _2468;
        float _2476 = _2473 * _2469;
        float _2477 = dot(vec3(_851, _852, _853), vec3(cbLight._m0[_2447].xyz));
        float _4460 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2481 = dot(vec3(_851, _852, _853), vec3(_2474, _2475, _2476));
        float _4471 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2485 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2474, _2475, _2476));
        float _4482 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2489 = _2466 * _2466;
        float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
        float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0);
        float _2507 = 1.0 - _2466;
        float _2517 = (0.5 / (((_2243 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2507) + _2466) * _2480))) * _2480;
        float _4493 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2519 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
        float _2520 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2441 = (((((_2500 * _2265) + _1000) * cbLight._m0[_2451].x) * _2519) * _2520) + _2377;
        _2443 = (((((_2500 * _2267) + _1002) * cbLight._m0[_2451].y) * _2519) * _2520) + _2378;
        _2445 = (((((_2500 * _2268) + _1003) * cbLight._m0[_2451].z) * _2519) * _2520) + _2379;
    }
    float _2555;
    float _2557;
    float _2559;
    if (_2169)
    {
        _2555 = _2441;
        _2557 = _2443;
        _2559 = _2445;
    }
    else
    {
        uint _2566 = _2075 + 3u;
        uint _2570 = _2075 + 11u;
        float _2584 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2566].w)) * _854) * 0.949999988079071044921875);
        float _2585 = _2584 * _2584;
        float _2586 = cbLight._m0[_2566].x + _930;
        float _2587 = cbLight._m0[_2566].y + _931;
        float _2588 = cbLight._m0[_2566].z + _932;
        float _2592 = inversesqrt(dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588)));
        float _2593 = _2592 * _2586;
        float _2594 = _2592 * _2587;
        float _2595 = _2592 * _2588;
        float _2596 = dot(vec3(_851, _852, _853), vec3(cbLight._m0[_2566].xyz));
        float _4509 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2600 = dot(vec3(_851, _852, _853), vec3(_2593, _2594, _2595));
        float _4520 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2604 = dot(vec3(cbLight._m0[_2566].xyz), vec3(_2593, _2594, _2595));
        float _4531 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2608 = _2585 * _2585;
        float _2612 = ((_2603 * _2603) * (_2608 + (-1.0))) + 1.0;
        float _2619 = exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0);
        float _2626 = 1.0 - _2585;
        float _2636 = (0.5 / (((_2243 * ((_2599 * _2626) + _2585)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2626) + _2585) * _2599))) * _2599;
        float _4542 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2638 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2608 / ((_2612 * _2612) * 3.141590118408203125));
        float _2639 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2555 = (((((_2619 * _2265) + _1000) * cbLight._m0[_2570].x) * _2638) * _2639) + _2441;
        _2557 = (((((_2619 * _2267) + _1002) * cbLight._m0[_2570].y) * _2638) * _2639) + _2443;
        _2559 = (((((_2619 * _2268) + _1003) * cbLight._m0[_2570].z) * _2638) * _2639) + _2445;
    }
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    if (_2073.y == 0u)
    {
        float _2714 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2715 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2714;
        float _2716 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2714;
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2714;
        uvec4 _2729 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2730 = _2729.x;
        uint _2741 = uint((float(_2729.y) * floor(float(uint(cbSceneParam._m0[85u].y * _939) / _2730))) + floor(float(uint(cbSceneParam._m0[85u].x * _938) / _2730)));
        float _2751 = (log2(_2717 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2752 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        uint _2755 = uint(isnan(14.0) ? _2752 : (isnan(_2752) ? 14.0 : min(_2752, 14.0)));
        uvec4 _2760 = texelFetch(g_lightClusterGridBuffer, int(((_2755 << 2u) + (_2741 << 6u)) >> 2u));
        uint _2761 = _2760.x;
        uint _2762 = _2729.z;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        if (((((1u << ((_2762 >> 4u) & 15u)) + 4294967295u) & _2761) == 0u) || ((_2762 & 240u) == 0u))
        {
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
        }
        else
        {
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _2873;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            uint _3013 = 0u;
            uint _3022;
            bool _3023;
            for (;;)
            {
                _3022 = texelFetch(g_lightClassification, int((((_2755 << 5u) + (_2741 << 9u)) + (_3013 << 2u)) >> 2u)).x;
                _3023 = _3022 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3023)
                {
                    frontier_phi_61_pred = _3007;
                    frontier_phi_61_pred_1 = _3012;
                    frontier_phi_61_pred_2 = _3011;
                    frontier_phi_61_pred_3 = _3010;
                    frontier_phi_61_pred_4 = _3009;
                    frontier_phi_61_pred_5 = _3008;
                }
                else
                {
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    uint _3137;
                    _3131 = _3007;
                    _3132 = _3008;
                    _3133 = _3009;
                    _3134 = _3010;
                    _3135 = _3011;
                    _3136 = _3012;
                    _3137 = _3022;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    for (;;)
                    {
                        uint _3141 = uint(findLSB(_3137)) + (_3013 << 5u);
                        uint _3138 = (_3137 + 4294967295u) & _3137;
                        uint _3143 = _3141 * 48u;
                        vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3163 = (_3141 * 48u) + 4u;
                        vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3182 = (_3141 * 48u) + 8u;
                        vec3 _3193 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x));
                        float _3197 = _3157.x - _2715;
                        float _3198 = _3157.y - _2716;
                        float _3199 = _3157.z - _2717;
                        float _3200 = dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199));
                        float _3203 = inversesqrt(_3200);
                        float _3204 = _3203 * _3197;
                        float _3205 = _3203 * _3198;
                        float _3206 = _3203 * _3199;
                        float _3207 = dot(vec3(_957, _960, _963), vec3(_3204, _3205, _3206));
                        float _3212 = 1.0 - (_3200 * _3157.w);
                        float _4568 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3213 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3214 = sqrt(_3200) * _3176.w;
                        float _3217 = 1.39999997615814208984375 / (_3214 + 1.39999997615814208984375);
                        float _3218 = _3217 * _3217;
                        float _3221 = ((1.0 - _3218) * _3207) + _3218;
                        float _3224 = _3214 * _3214;
                        float _3228 = ((isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0))) * _3213) / ((_3224 * 0.699999988079071044921875) + 1.0);
                        float _3232 = (-0.0) - _2715;
                        float _3233 = (-0.0) - _2716;
                        float _3234 = (-0.0) - _2717;
                        float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3249 = exp2(log2(1.0 / ((_3224 * 3.5) + 5.0)) * 0.25);
                        float _3250 = 1.0 - _1032;
                        float _3257 = sqrt(1.0 - ((1.0 - (_3250 * _3250)) * (1.0 - (_3249 * _3249))));
                        float _3258 = _3257 * _3257;
                        float _3259 = _3258 * _3258;
                        float _3260 = _3239 + _3204;
                        float _3261 = _3240 + _3205;
                        float _3262 = _3241 + _3206;
                        float _3266 = inversesqrt(dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262)));
                        float _3270 = dot(vec3(_957, _960, _963), vec3(_3239, _3240, _3241));
                        float _4584 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3273 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3274 = dot(vec3(_957, _960, _963), vec3(_3266 * _3260, _3266 * _3261, _3266 * _3262));
                        float _4595 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3277 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3281 = ((_3277 * _3277) * (_3259 + (-1.0))) + 1.0;
                        float _3282 = _3217 * _3258;
                        float _3283 = _3282 * _3282;
                        float _3286 = ((1.0 - _3283) * _3207) + _3283;
                        float _4606 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3287 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3288 = 1.0 - _3258;
                        float _3298 = (0.5 / (((_3287 * ((_3273 * _3288) + _3258)) + 9.9999999392252902907785028219223e-09) + (((_3287 * _3288) + _3258) * _3273))) * _3287;
                        float _4617 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3309 = (((_3259 * 3.1415927410125732421875) * (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) / ((_3281 * _3281) * ((_3224 * 2.1991131305694580078125) + 3.141590118408203125))) * _3213;
                        _3066 = (_3228 * _3176.x) + _3134;
                        _3067 = (_3228 * _3176.y) + _3135;
                        _3068 = (_3228 * _3176.z) + _3136;
                        _3063 = (_3309 * _3193.x) + _3131;
                        _3064 = (_3309 * _3193.y) + _3132;
                        _3065 = (_3309 * _3193.z) + _3133;
                        if (_3138 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3131 = _3063;
                            _3132 = _3064;
                            _3133 = _3065;
                            _3134 = _3066;
                            _3135 = _3067;
                            _3136 = _3068;
                            _3137 = _3138;
                        }
                    }
                    frontier_phi_61_pred = _3063;
                    frontier_phi_61_pred_1 = _3068;
                    frontier_phi_61_pred_2 = _3067;
                    frontier_phi_61_pred_3 = _3066;
                    frontier_phi_61_pred_4 = _3065;
                    frontier_phi_61_pred_5 = _3064;
                }
                _2863 = frontier_phi_61_pred;
                _2873 = frontier_phi_61_pred_1;
                _2871 = frontier_phi_61_pred_2;
                _2869 = frontier_phi_61_pred_3;
                _2867 = frontier_phi_61_pred_4;
                _2865 = frontier_phi_61_pred_5;
                uint _3014 = _3013 + 1u;
                if (_3014 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3007 = _2863;
                    _3008 = _2865;
                    _3009 = _2867;
                    _3010 = _2869;
                    _3011 = _2871;
                    _3012 = _2873;
                    _3013 = _3014;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
        }
        uvec4 _2876 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2877 = _2876.z;
        uint _2879 = (_2877 >> 8u) & 15u;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        if (((4294967295u << _2879) & _2761) == 0u)
        {
            _2975 = _2862;
            _2977 = _2864;
            _2979 = _2866;
            _2981 = _2868;
            _2983 = _2870;
            _2985 = _2872;
        }
        else
        {
            float _3000 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
            float _3001 = _3000 * _2715;
            float _3002 = _3000 * _2716;
            float _3003 = _3000 * _2717;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2879 < ((_2877 >> 12u) & 15u))
            {
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _2986;
                float _3114 = _2862;
                float _3115 = _2864;
                float _3116 = _2866;
                float _3117 = _2868;
                float _3118 = _2870;
                float _3119 = _2872;
                uint _3120 = _2879;
                uint _3129;
                bool _3130;
                for (;;)
                {
                    _3129 = texelFetch(g_lightClassification, int((((_2755 << 5u) + (_2741 << 9u)) + (_3120 << 2u)) >> 2u)).x;
                    _3130 = _3129 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3130)
                    {
                        frontier_phi_67_pred = _3117;
                        frontier_phi_67_pred_1 = _3118;
                        frontier_phi_67_pred_2 = _3119;
                        frontier_phi_67_pred_3 = _3116;
                        frontier_phi_67_pred_4 = _3115;
                        frontier_phi_67_pred_5 = _3114;
                    }
                    else
                    {
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3327 = _3114;
                        float _3328 = _3115;
                        float _3329 = _3116;
                        float _3330 = _3117;
                        float _3331 = _3118;
                        float _3332 = _3119;
                        uint _3333 = _3129;
                        uint _3334;
                        vec4 _3359;
                        float _3360;
                        vec4 _3375;
                        vec3 _3387;
                        vec4 _3402;
                        vec4 _3417;
                        float _3463;
                        bool _3464;
                        for (;;)
                        {
                            uint _3344 = ((_3120 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3333));
                            _3334 = (_3333 + 4294967295u) & _3333;
                            uint _3346 = _3344 * 40u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            _3360 = _3359.w;
                            uint _3362 = (_3344 * 40u) + 4u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3344 * 40u) + 8u;
                            _3387 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x));
                            uint _3389 = (_3344 * 40u) + 16u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3404 = (_3344 * 40u) + 20u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3419 = (_3344 * 40u) + 24u;
                            vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3438 = (_3344 * 40u) + 28u;
                            vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            _3463 = fma(_2717, _3451.z, fma(_2716, _3451.y, _3451.x * _2715)) + _3451.w;
                            _3464 = !((fma(_2717, _3432.z, fma(_2716, _3432.y, _3432.x * _2715)) + _3432.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3464)
                            {
                                float _3491 = _3359.x - _2715;
                                float _3492 = _3359.y - _2716;
                                float _3493 = _3359.z - _2717;
                                float _3494 = dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493));
                                float _3497 = inversesqrt(_3494);
                                float _3498 = _3497 * _3491;
                                float _3499 = _3497 * _3492;
                                float _3500 = _3497 * _3493;
                                float _3504 = 1.0 - (_3494 / (_3360 * _3360));
                                float _4628 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3509 = sqrt(_3494) * _3375.w;
                                float _3511 = 1.39999997615814208984375 / (_3509 + 1.39999997615814208984375);
                                float _3512 = _3511 * _3511;
                                float _3515 = ((1.0 - _3512) * dot(vec3(_3498, _3499, _3500), vec3(_957, _960, _963))) + _3512;
                                float _3518 = _3509 * _3509;
                                float _3522 = (fma(_2717, _3402.z, fma(_2716, _3402.y, _3402.x * _2715)) + _3402.w) / _3463;
                                float _3523 = (fma(_2717, _3417.z, fma(_2716, _3417.y, _3417.x * _2715)) + _3417.w) / _3463;
                                float _3527 = 1.0 - dot(vec2(_3522, _3523), vec2(_3522, _3523));
                                float _4644 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3529 = _3528 * (((isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0))) * _3505) / ((_3518 * 0.699999988079071044921875) + 1.0));
                                float _3541 = exp2(log2(1.0 / ((_3518 * 3.5) + 5.0)) * 0.25);
                                float _3542 = 1.0 - _1032;
                                float _3549 = sqrt(1.0 - ((1.0 - (_3542 * _3542)) * (1.0 - (_3541 * _3541))));
                                float _3550 = _3549 * _3549;
                                float _3551 = _3550 * _3550;
                                float _3552 = _3498 - _3001;
                                float _3553 = _3499 - _3002;
                                float _3554 = _3500 - _3003;
                                float _3558 = inversesqrt(dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554)));
                                float _3562 = dot(vec3(_957, _960, _963), vec3((-0.0) - _3001, (-0.0) - _3002, (-0.0) - _3003));
                                float _4655 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3565 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3566 = dot(vec3(_957, _960, _963), vec3(_3558 * _3552, _3558 * _3553, _3558 * _3554));
                                float _4666 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3569 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3573 = ((_3569 * _3569) * (_3551 + (-1.0))) + 1.0;
                                float _3574 = _3511 * _3550;
                                float _3575 = _3574 * _3574;
                                float _3581 = ((1.0 - _3575) * dot(vec3(_957, _960, _963), vec3(_3498, _3499, _3500))) + _3575;
                                float _4677 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3583 = 1.0 - _3550;
                                float _3593 = (0.5 / (((_3582 * ((_3565 * _3583) + _3550)) + 9.9999999392252902907785028219223e-09) + (((_3582 * _3583) + _3550) * _3565))) * _3582;
                                float _4688 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3603 = (_3528 * _3505) * (((_3551 * 3.1415927410125732421875) * (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) / ((_3573 * _3573) * ((_3518 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3603 * _3387.x;
                                frontier_phi_73_pred_1 = _3603 * _3387.y;
                                frontier_phi_73_pred_2 = _3529 * _3375.z;
                                frontier_phi_73_pred_3 = _3529 * _3375.y;
                                frontier_phi_73_pred_4 = _3529 * _3375.x;
                                frontier_phi_73_pred_5 = _3603 * _3387.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3607 = frontier_phi_73_pred;
                            _3608 = frontier_phi_73_pred_1;
                            _3612 = frontier_phi_73_pred_2;
                            _3611 = frontier_phi_73_pred_3;
                            _3610 = frontier_phi_73_pred_4;
                            _3609 = frontier_phi_73_pred_5;
                            _3317 = _3610 + _3330;
                            _3318 = _3611 + _3331;
                            _3319 = _3612 + _3332;
                            _3314 = _3607 + _3327;
                            _3315 = _3608 + _3328;
                            _3316 = _3609 + _3329;
                            if (_3334 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3334;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3317;
                        frontier_phi_67_pred_1 = _3318;
                        frontier_phi_67_pred_2 = _3319;
                        frontier_phi_67_pred_3 = _3316;
                        frontier_phi_67_pred_4 = _3315;
                        frontier_phi_67_pred_5 = _3314;
                    }
                    _2982 = frontier_phi_67_pred;
                    _2984 = frontier_phi_67_pred_1;
                    _2986 = frontier_phi_67_pred_2;
                    _2980 = frontier_phi_67_pred_3;
                    _2978 = frontier_phi_67_pred_4;
                    _2976 = frontier_phi_67_pred_5;
                    uint _3121 = _3120 + 1u;
                    if (_3121 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3114 = _2976;
                        _3115 = _2978;
                        _3116 = _2980;
                        _3117 = _2982;
                        _3118 = _2984;
                        _3119 = _2986;
                        _3120 = _3121;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2984;
                frontier_phi_55_56_ladder_1 = _2986;
                frontier_phi_55_56_ladder_2 = _2982;
                frontier_phi_55_56_ladder_3 = _2980;
                frontier_phi_55_56_ladder_4 = _2978;
                frontier_phi_55_56_ladder_5 = _2976;
            }
            else
            {
                frontier_phi_55_56_ladder = _2870;
                frontier_phi_55_56_ladder_1 = _2872;
                frontier_phi_55_56_ladder_2 = _2868;
                frontier_phi_55_56_ladder_3 = _2866;
                frontier_phi_55_56_ladder_4 = _2864;
                frontier_phi_55_56_ladder_5 = _2862;
            }
            _2975 = frontier_phi_55_56_ladder_5;
            _2977 = frontier_phi_55_56_ladder_4;
            _2979 = frontier_phi_55_56_ladder_3;
            _2981 = frontier_phi_55_56_ladder_2;
            _2983 = frontier_phi_55_56_ladder;
            _2985 = frontier_phi_55_56_ladder_1;
        }
        float _2990 = isnan(1.0) ? _1016 : (isnan(_1016) ? 1.0 : min(_1016, 1.0));
        _2774 = (_2990 * _2981) + _2207;
        _2776 = (_2990 * _2983) + _2209;
        _2778 = (_2990 * _2985) + _2211;
        _2780 = ((_2975 * _1000) * _2990) + _2555;
        _2782 = ((_2977 * _1002) * _2990) + _2557;
        _2784 = ((_2979 * _1003) * _2990) + _2559;
    }
    else
    {
        _2774 = _2207;
        _2776 = _2209;
        _2778 = _2211;
        _2780 = _2555;
        _2782 = _2557;
        _2784 = _2559;
    }
    float _4704 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _4715 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _4726 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    uint _2804 = _283 + 6u;
    float _2812 = _938 / cbSceneParam._m0[86u].x;
    float _2813 = _939 / cbSceneParam._m0[86u].y;
    vec4 _2827 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2812, _2813, (log2((isnan(cbSceneParam._m0[77u].w) ? _873 : (isnan(_873) ? cbSceneParam._m0[77u].w : min(_873, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2829 = _2827.x;
    float _2830 = _2827.y;
    float _2831 = _2827.z;
    float _2832 = _2827.w;
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    if (_873 > cbSceneParam._m0[78u].w)
    {
        float _2887 = isnan(_873) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _873 : min(cbSceneParam._m0[80u].w, _873));
        float _2888 = _2887 / _873;
        float _2899 = _2888 * _923;
        float _2900 = _924 * _2888;
        float _2901 = (-0.0) - _2900;
        float _2903 = _2888 * _925;
        float _2905 = (cbSceneParam._m0[77u].w * _2901) / _2887;
        float _2906 = _2905 + cbSceneParam._m0[79u].w;
        float _2907 = cbSceneParam._m0[79u].w - _2900;
        float _2913 = sqrt(((_2899 * _2899) + (_2900 * _2900)) + (_2903 * _2903));
        float _2916 = (1.0 - (cbSceneParam._m0[77u].w / _2887)) * _2913;
        float _2921 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2923 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3076;
        if (abs((_2901 - _2905) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3076 = ((((_2906 > 0.0) ? exp2(_2921 * _2906) : (2.0 - exp2(_2923 * _2906))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2916;
        }
        else
        {
            float _3036 = 1.0 / cbSceneParam._m0[80u].x;
            float _3037 = isnan(_2907) ? _2906 : (isnan(_2906) ? _2907 : max(_2906, _2907));
            float _3038 = isnan(_2907) ? _2906 : (isnan(_2906) ? _2907 : min(_2906, _2907));
            float _3047 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : min(_3037, 0.0));
            float _3048 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : min(_3038, 0.0));
            _3076 = ((abs(_2913 / _2901) * cbSceneParam._m0[80u].y) * ((((_3047 - _3048) * 2.0) - ((exp2(_2921 * (isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0)))) - exp2(_2921 * (isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))))) * _3036)) - ((exp2(_2923 * _3047) - exp2(_2923 * _3048)) * _3036))) + (_2916 * cbSceneParam._m0[80u].z);
        }
        vec4 _3078 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2812, _2813, 1.0), 0.0);
        float _3087 = exp2((_3076 * (-1.44269502162933349609375)) * (1.0 - _3078.w));
        float _3088 = log2(_3087);
        float _3104 = log2(_2832);
        _2925 = (exp2(_3104 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].x)) * _3078.x) / cbSceneParam._m0[78u].x)) + _2829;
        _2927 = (exp2(_3104 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].y)) * _3078.y) / cbSceneParam._m0[78u].y)) + _2830;
        _2929 = (exp2(_3104 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].z)) * _3078.z) / cbSceneParam._m0[78u].z)) + _2831;
        _2931 = _3087 * _2832;
    }
    else
    {
        _2925 = _2829;
        _2927 = _2830;
        _2929 = _2831;
        _2931 = _2832;
    }
    float _2943 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2944 = _2943 == 3.0;
    float _2945 = log2(_2931);
    float _2952 = exp2(_2945 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2774 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1016))) + ((_2780 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1823)) * cbPerFrame._m0[3u].x));
    float _2953 = exp2(_2945 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2776 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1016))) + ((_2782 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1823)) * cbPerFrame._m0[3u].x));
    float _2954 = exp2(_2945 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2778 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1016))) + ((_2784 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1823)) * cbPerFrame._m0[3u].x));
    float _2963 = (_2943 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2963 * (_2944 ? _2952 : (_2952 + (cbSceneParam._m0[72u].w * _2925)));
    SV_Target.y = _2963 * (_2944 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2927)));
    SV_Target.z = _2963 * (_2944 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2929)));
    SV_Target.w = cbInstanceData._m0[_2804].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2804].w;
}


