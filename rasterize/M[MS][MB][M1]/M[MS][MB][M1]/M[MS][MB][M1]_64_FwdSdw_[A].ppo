#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1198;
float _3864;
float _3865;
float _3866;
float _3867;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3876 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3887 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3898 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[24u].y) + _401) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3909 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _426 = (_419 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _427 = (_419 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _428 = (_419 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    float _432 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _426;
    float _435 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _427;
    float _438 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _428;
    float _445 = ((_426 - _432) * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) + _432;
    float _446 = ((_427 - _435) * (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) + _435;
    float _447 = ((_428 - _438) * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) + _438;
    vec4 _460 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _502 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _504 = _502.x;
    float _505 = _502.y;
    float _506 = _502.z;
    float _515 = ((_485.z - _506) * _419) + _506;
    float _518 = ((((_485.x - _504) * _419) + _504) * 2.0) + (-1.0);
    float _519 = ((((_485.y - _505) * _419) + _505) * 2.0) + (-1.0);
    float _520 = dot(vec2(_518, _519), vec2(_518, _519));
    float _3920 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _525 = sqrt(1.0 - (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))));
    float _530 = _518 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_460.x * 2.0) + (-1.0)));
    float _531 = _519 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_460.y * 2.0) + (-1.0)));
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _572 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _574 = _572.x;
    float _592 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _287) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _288) + cbTextureTilingScale._m0[9u].w)).x - _574) * _419) + _574;
    float _596 = ((_558.x - _592) * cbMtdParam._m0[19u].z) + _592;
    float _601 = (((_460.z - _515) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _515;
    float _603 = cbMtdParam._m0[22u].x + _544.w;
    float _606 = fma(_525, _234 * NORMAL.x, fma(_531, _241 * TANGENT.x, (_227 * _219) * _530));
    float _609 = fma(_525, _234 * NORMAL.y, fma(_531, _241 * TANGENT.y, (_227 * _220) * _530));
    float _612 = fma(_525, _234 * NORMAL.z, fma(_531, _241 * TANGENT.z, (_227 * _221) * _530));
    float _616 = inversesqrt(dot(vec3(_606, _609, _612), vec3(_606, _609, _612)));
    float _617 = _616 * _606;
    float _618 = _616 * _609;
    float _619 = _616 * _612;
    float _3931 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _620 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3953 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3964 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3975 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3986 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _625 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _639 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _690 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _680);
    float _691 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _680);
    float _692 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _680);
    float _696 = inversesqrt(dot(vec3(_690, _691, _692), vec3(_690, _691, _692)));
    float _697 = _690 * _696;
    float _698 = _691 * _696;
    float _699 = _692 * _696;
    vec4 _704 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _706 = _704.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _878 = sqrt(((_690 * _690) + (_691 * _691)) + (_692 * _692));
        float _884 = (cbMatDynParam._m0[5u].x * _878) + cbMatDynParam._m0[5u].y;
        float _3997 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _889 = (cbMatDynParam._m0[5u].z * _878) + cbMatDynParam._m0[5u].w;
        float _4008 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) - _885)) + _885) < ((_706 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _717 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _718 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _736 = fma(_619, cbSceneParam._m0[5u].z, fma(_618, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _617));
    float _739 = fma(_619, cbSceneParam._m0[6u].z, fma(_618, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _617));
    float _742 = fma(_619, cbSceneParam._m0[7u].z, fma(_618, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _617));
    uint _755 = _268 + 9u;
    uint _756 = _755 + uint(cbMatDynParam._m0[0u].w);
    float _762 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * cbInstanceData._m0[_756].x;
    float _763 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * cbInstanceData._m0[_756].y;
    float _764 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * cbInstanceData._m0[_756].z;
    float _4019 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _768 = 1.0 - _625;
    float _769 = _765 * _768;
    float _770 = _766 * _768;
    float _771 = _767 * _768;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _625;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _625;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _625;
    float _779 = _776 + 0.039999999105930328369140625;
    float _781 = _777 + 0.039999999105930328369140625;
    float _782 = _778 + 0.039999999105930328369140625;
    vec4 _791 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718));
    float _795 = ((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * TEXCOORD_5.w) * _791.x;
    float _796 = dot(vec3(_617, _618, _619), vec3(_697, _698, _699));
    float _799 = _796 * 2.0;
    float _803 = (_799 * _617) - _697;
    float _804 = (_799 * _618) - _698;
    float _805 = (_799 * _619) - _699;
    float _809 = abs(dot(vec3(_697, _698, _699), vec3(_617, _618, _619)));
    float _4052 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _811 = sqrt(_620);
    float _824 = exp2((_811 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_811 * 3.0));
    float _830 = (1.0 - _824) * ((_811 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _831 = _824 * _811;
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1197;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _922 = fma(_867, cbModelParam._m0[26u].z, fma(_863, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859));
        float _926 = fma(_867, cbModelParam._m0[27u].z, fma(_863, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859));
        float _930 = fma(_867, cbModelParam._m0[28u].z, fma(_863, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859));
        float _955 = _859 + _617;
        float _956 = _863 + _618;
        float _957 = _867 + _619;
        float _967 = fma(_957, cbModelParam._m0[26u].z, fma(_956, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _955)) - _922;
        float _968 = fma(_957, cbModelParam._m0[27u].z, fma(_956, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _955)) - _926;
        float _969 = fma(_957, cbModelParam._m0[28u].z, fma(_956, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _955)) - _930;
        float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
        float _986 = ((_973 * _967) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_922 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_973 * _968) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_926 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_973 * _969) / cbModelParam._m0[34u].z) + ((((((_930 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        float _1025 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_991.x + (-0.5));
        float _1027 = _1025 * (_991.y + (-0.5));
        float _1028 = _1025 * (_991.z + (-0.5));
        float _1035 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_998.x + (-0.5));
        float _1037 = _1035 * (_998.y + (-0.5));
        float _1038 = _1035 * (_998.z + (-0.5));
        float _1045 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1005.x + (-0.5));
        float _1047 = _1045 * (_1005.y + (-0.5));
        float _1048 = _1045 * (_1005.z + (-0.5));
        float _1055 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1012.x + (-0.5));
        float _1057 = _1055 * (_1012.y + (-0.5));
        float _1058 = _1055 * (_1012.z + (-0.5));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = _1026 * 0.5;
        float _1063 = _1036 * 0.5;
        float _1064 = _1046 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1079 = (dot(vec3(_617, _618, _619), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1089 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _4100 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1091 + 1.0))) + _1096) * _1059;
        float _1106 = _1027 * 0.5;
        float _1107 = _1037 * 0.5;
        float _1108 = _1047 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_617, _618, _619), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _4133 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1133 + 1.0))) + _1138) * _1060;
        float _1148 = _1028 * 0.5;
        float _1149 = _1038 * 0.5;
        float _1150 = _1048 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_617, _618, _619), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _4166 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1175 + 1.0))) + _1180) * _1061;
        _1197 = _1028;
        _1199 = _1027;
        _1200 = _1026;
        _1201 = _1038;
        _1202 = _1037;
        _1203 = _1036;
        _1204 = _1048;
        _1205 = _1047;
        _1206 = _1046;
        _1207 = _1061;
        _1208 = _1060;
        _1209 = _1059;
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
    }
    else
    {
        _1197 = _1198;
        _1199 = _1198;
        _1200 = _1198;
        _1201 = _1198;
        _1202 = _1198;
        _1203 = _1198;
        _1204 = _1198;
        _1205 = _1198;
        _1206 = _1198;
        _1207 = _1198;
        _1208 = _1198;
        _1209 = _1198;
        _1210 = 0.0;
        _1211 = 0.0;
        _1212 = 0.0;
    }
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1240 = fma(_867, cbModelParam._m0[30u].z, fma(_863, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _859));
        float _1244 = fma(_867, cbModelParam._m0[31u].z, fma(_863, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _859));
        float _1248 = fma(_867, cbModelParam._m0[32u].z, fma(_863, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _859));
        float _1271 = _859 + _617;
        float _1272 = _863 + _618;
        float _1273 = _867 + _619;
        float _1283 = fma(_1273, cbModelParam._m0[30u].z, fma(_1272, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1271)) - _1240;
        float _1284 = fma(_1273, cbModelParam._m0[31u].z, fma(_1272, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1271)) - _1244;
        float _1285 = fma(_1273, cbModelParam._m0[32u].z, fma(_1272, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1271)) - _1248;
        float _1289 = inversesqrt(dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285)));
        float _1302 = ((_1289 * _1283) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1240 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1289 * _1284) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1244 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1289 * _1285) / cbModelParam._m0[35u].z) + ((((((_1248 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        float _1339 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1306.x + (-0.5));
        float _1341 = _1339 * (_1306.y + (-0.5));
        float _1342 = _1339 * (_1306.z + (-0.5));
        float _1349 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1313.x + (-0.5));
        float _1351 = _1349 * (_1313.y + (-0.5));
        float _1352 = _1349 * (_1313.z + (-0.5));
        float _1359 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1320.x + (-0.5));
        float _1361 = _1359 * (_1320.y + (-0.5));
        float _1362 = _1359 * (_1320.z + (-0.5));
        float _1369 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1327.x + (-0.5));
        float _1371 = _1369 * (_1327.y + (-0.5));
        float _1372 = _1369 * (_1327.z + (-0.5));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = _1340 * 0.5;
        float _1377 = _1350 * 0.5;
        float _1378 = _1360 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_617, _618, _619), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4229 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1403 + 1.0))) + _1408) * _1373;
        float _1418 = _1341 * 0.5;
        float _1419 = _1351 * 0.5;
        float _1420 = _1361 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_617, _618, _619), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4262 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1445 + 1.0))) + _1450) * _1374;
        float _1460 = _1342 * 0.5;
        float _1461 = _1352 * 0.5;
        float _1462 = _1362 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_617, _618, _619), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4295 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1487 + 1.0))) + _1492) * _1375;
        _1509 = _1342;
        _1510 = _1341;
        _1511 = _1340;
        _1512 = _1352;
        _1513 = _1351;
        _1514 = _1350;
        _1515 = _1362;
        _1516 = _1361;
        _1517 = _1360;
        _1518 = _1375;
        _1519 = _1374;
        _1520 = _1373;
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
    }
    else
    {
        _1509 = _1198;
        _1510 = _1198;
        _1511 = _1198;
        _1512 = _1198;
        _1513 = _1198;
        _1514 = _1198;
        _1515 = _1198;
        _1516 = _1198;
        _1517 = _1198;
        _1518 = _1198;
        _1519 = _1198;
        _1520 = _1198;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1210)) + _1210;
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1211)) + _1211;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1212)) + _1212;
    float _1556 = fma(_1535, cbSceneParam._m0[89u].z, fma(_1534, cbSceneParam._m0[89u].y, _1533 * cbSceneParam._m0[89u].x));
    float _1559 = fma(_1535, cbSceneParam._m0[90u].z, fma(_1534, cbSceneParam._m0[90u].y, _1533 * cbSceneParam._m0[90u].x));
    float _1562 = fma(_1535, cbSceneParam._m0[91u].z, fma(_1534, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1533));
    float _1577 = _803 * 0.5;
    float _1578 = _804 * 0.5;
    float _1579 = _805 * 0.5;
    float _1580 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1583 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1586 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1620;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1593 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1197, _1201, _1204, _1207));
        float _1597 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1601 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1608 = dot(vec4(cbModelParam._m0[39u]), vec4(_1577, _1578, _1579, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1608) ? 0.0 : (isnan(0.0) ? _1608 : max(0.0, _1608))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1631;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1622 = dot(vec4(cbModelParam._m0[40u]), vec4(_1577, _1578, _1579, 1.0));
        _1631 = dot(vec3(isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1622) ? 0.0 : (isnan(0.0) ? _1622 : max(0.0, _1622))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1631 = 1.0;
    }
    float _1635 = (_1631 * cbModelParam._m0[1u].x) + (_1620 * (1.0 - cbModelParam._m0[1u].x));
    float _1645 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _620);
    float _1646 = isnan(_1645) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1645 : min(cbModelParam._m0[25u].z, _1645));
    float _1728;
    float _1730;
    float _1732;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1695 = fma(_867, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859)) + cbModelParam._m0[13u].w;
        float _1699 = fma(_867, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859)) + cbModelParam._m0[14u].w;
        float _1703 = fma(_867, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859)) + cbModelParam._m0[15u].w;
        float _1706 = fma(_805, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803));
        float _1709 = fma(_805, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803));
        float _1712 = fma(_805, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803));
        float _1740;
        if (_1706 > 0.0)
        {
            _1740 = abs((1.0 - _1695) / _1706);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1695 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1740 = frontier_phi_17_15_ladder;
        }
        float _1913;
        if (_1709 > 0.0)
        {
            _1913 = abs((1.0 - _1699) / _1709);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1699 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1913 = frontier_phi_26_22_ladder;
        }
        float _2208;
        if (_1712 > 0.0)
        {
            _2208 = abs((1.0 - _1703) / _1712);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1703 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2208 = frontier_phi_38_33_ladder;
        }
        float _2210 = isnan(_1913) ? _1740 : (isnan(_1740) ? _1913 : min(_1740, _1913));
        float _2211 = isnan(_2208) ? _2210 : (isnan(_2210) ? _2208 : min(_2210, _2208));
        float _2215 = (_2211 * _1706) + _1695;
        float _2216 = (_2211 * _1709) + _1699;
        float _2217 = (_2211 * _1712) + _1703;
        float _2218 = _2211 * 9.9999997473787516355514526367188e-05;
        float _2220 = (-1.0) - _2218;
        float _2222 = _2218 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2217 > _2222) || ((_2217 < _2220) || ((_2216 > _2222) || ((_2216 < _2220) || ((_2215 < _2220) || (_2215 > _2222))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2217, cbModelParam._m0[9u].z, fma(_2216, cbModelParam._m0[9u].y, _2215 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2217, cbModelParam._m0[10u].z, fma(_2216, cbModelParam._m0[10u].y, _2215 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2217, cbModelParam._m0[11u].z, fma(_2216, cbModelParam._m0[11u].y, _2215 * cbModelParam._m0[11u].x))), _1646);
            frontier_phi_16_38_ladder = _2362.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2362.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2362.x * cbModelParam._m0[1u].y;
        }
        _1728 = frontier_phi_16_38_ladder_2;
        _1730 = frontier_phi_16_38_ladder_1;
        _1732 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1716 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_803, _804, _805), _1646);
        _1728 = _1716.x * cbModelParam._m0[1u].y;
        _1730 = _1716.y * cbModelParam._m0[1u].y;
        _1732 = _1716.z * cbModelParam._m0[1u].y;
    }
    float _1736 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _620);
    float _1737 = isnan(_1736) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1736 : min(cbModelParam._m0[25u].w, _1736));
    float _1828;
    float _1830;
    float _1832;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1792 = fma(_867, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859)) + cbModelParam._m0[21u].w;
        float _1796 = fma(_867, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859)) + cbModelParam._m0[22u].w;
        float _1800 = fma(_867, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859)) + cbModelParam._m0[23u].w;
        float _1803 = fma(_805, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803));
        float _1806 = fma(_805, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803));
        float _1809 = fma(_805, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803));
        float _1918;
        if (_1803 > 0.0)
        {
            _1918 = abs((1.0 - _1792) / _1803);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1792 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1918 = frontier_phi_28_24_ladder;
        }
        float _2235;
        if (_1806 > 0.0)
        {
            _2235 = abs((1.0 - _1796) / _1806);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1796 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2235 = frontier_phi_40_35_ladder;
        }
        float _2573;
        if (_1809 > 0.0)
        {
            _2573 = abs((1.0 - _1800) / _1809);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1800 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2573 = frontier_phi_50_47_ladder;
        }
        float _2575 = isnan(_2235) ? _1918 : (isnan(_1918) ? _2235 : min(_1918, _2235));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _1803) + _1792;
        float _2581 = (_2576 * _1806) + _1796;
        float _2582 = (_2576 * _1809) + _1800;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2584 = (-1.0) - _2583;
        float _2586 = _2583 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2582 > _2586) || ((_2582 < _2584) || ((_2581 > _2586) || ((_2581 < _2584) || ((_2580 < _2584) || (_2580 > _2586))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2704 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2582, cbModelParam._m0[17u].z, fma(_2581, cbModelParam._m0[17u].y, _2580 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2582, cbModelParam._m0[18u].z, fma(_2581, cbModelParam._m0[18u].y, _2580 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2582, cbModelParam._m0[19u].z, fma(_2581, cbModelParam._m0[19u].y, _2580 * cbModelParam._m0[19u].x))), _1737);
            frontier_phi_25_50_ladder = _2704.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2704.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2704.x * cbModelParam._m0[1u].z;
        }
        _1828 = frontier_phi_25_50_ladder_2;
        _1830 = frontier_phi_25_50_ladder_1;
        _1832 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1812 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_803, _804, _805), _1737);
        _1828 = _1812.x * cbModelParam._m0[1u].z;
        _1830 = _1812.y * cbModelParam._m0[1u].z;
        _1832 = _1812.z * cbModelParam._m0[1u].z;
    }
    float _1845 = (((_830 * _779) + _831) * _795) * ((cbModelParam._m0[1u].w * (_1828 - _1728)) + _1728);
    float _1847 = (((_830 * _781) + _831) * _795) * ((cbModelParam._m0[1u].w * (_1830 - _1730)) + _1730);
    float _1849 = (((_830 * _782) + _831) * _795) * ((cbModelParam._m0[1u].w * (_1832 - _1732)) + _1732);
    float _1852 = fma(_1849, cbSceneParam._m0[89u].z, fma(_1847, cbSceneParam._m0[89u].y, _1845 * cbSceneParam._m0[89u].x));
    float _1855 = fma(_1849, cbSceneParam._m0[90u].z, fma(_1847, cbSceneParam._m0[90u].y, _1845 * cbSceneParam._m0[90u].x));
    float _1858 = fma(_1849, cbSceneParam._m0[91u].z, fma(_1847, cbSceneParam._m0[91u].y, _1845 * cbSceneParam._m0[91u].x));
    float _1892 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1896 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1900 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1904 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1905 = _1892 / _1904;
    float _1906 = _1896 / _1904;
    float _1907 = _1900 / _1904;
    float _2054;
    float _2055;
    float _2056;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1934 = ((uint(_1907 > cbSceneParam._m0[59u].y) + uint(_1907 > cbSceneParam._m0[59u].x)) + uint(_1907 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1935 = _1934 + 43u;
        uint _1943 = _1934 + 44u;
        uint _1951 = _1934 + 45u;
        uint _1959 = _1934 + 46u;
        float _1970 = fma(_1904, cbSceneParam._m0[_1935].w, fma(_1900, cbSceneParam._m0[_1935].z, fma(_1896, cbSceneParam._m0[_1935].y, _1892 * cbSceneParam._m0[_1935].x)));
        float _1974 = fma(_1904, cbSceneParam._m0[_1943].w, fma(_1900, cbSceneParam._m0[_1943].z, fma(_1896, cbSceneParam._m0[_1943].y, _1892 * cbSceneParam._m0[_1943].x)));
        float _1982 = fma(_1904, cbSceneParam._m0[_1959].w, fma(_1900, cbSceneParam._m0[_1959].z, fma(_1896, cbSceneParam._m0[_1959].y, _1892 * cbSceneParam._m0[_1959].x)));
        float _1987 = cbSceneParam._m0[33u].z * _1982;
        float _1989 = cbSceneParam._m0[33u].w * _1982;
        float _1992 = fma(_1904, cbSceneParam._m0[_1951].w, fma(_1900, cbSceneParam._m0[_1951].z, fma(_1896, cbSceneParam._m0[_1951].y, _1892 * cbSceneParam._m0[_1951].x))) / _1982;
        float _2040 = (cbSceneParam._m0[33u].x - sqrt(((_1906 * _1906) + (_1905 * _1905)) + (_1907 * _1907))) * cbSceneParam._m0[33u].y;
        float _4421 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2047 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1987 + _1970) / _1982, (_1989 + _1974) / _1982), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1989 + _1970) / _1982, (_1974 - _1987) / _1982), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1970 - _1987) / _1982, (_1974 - _1989) / _1982), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1970 - _1989) / _1982, (_1987 + _1974) / _1982), _1992), 0.0)).x), vec4(0.25)));
        _2054 = 1.0 - (_2047 * cbSceneParam._m0[34u].x);
        _2055 = 1.0 - (_2047 * cbSceneParam._m0[34u].y);
        _2056 = 1.0 - (_2047 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2054 = 1.0;
        _2055 = 1.0;
        _2056 = 1.0;
    }
    float _2120;
    float _2122;
    float _2124;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2108 = fma(_1904, cbSceneParam._m0[63u].w, fma(_1900, cbSceneParam._m0[63u].z, fma(_1896, cbSceneParam._m0[63u].y, _1892 * cbSceneParam._m0[63u].x)));
        float _2109 = fma(_1904, cbSceneParam._m0[60u].w, fma(_1900, cbSceneParam._m0[60u].z, fma(_1896, cbSceneParam._m0[60u].y, _1892 * cbSceneParam._m0[60u].x))) / _2108;
        float _2110 = fma(_1904, cbSceneParam._m0[61u].w, fma(_1900, cbSceneParam._m0[61u].z, fma(_1896, cbSceneParam._m0[61u].y, _1892 * cbSceneParam._m0[61u].x))) / _2108;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2109 >= cbSceneParam._m0[64u].x) && (_2110 >= cbSceneParam._m0[64u].y)) && (_2109 <= cbSceneParam._m0[64u].z)) && (_2110 <= cbSceneParam._m0[64u].w))
        {
            float _2248 = fma(_1904, cbSceneParam._m0[62u].w, fma(_1900, cbSceneParam._m0[62u].z, fma(_1896, cbSceneParam._m0[62u].y, _1892 * cbSceneParam._m0[62u].x))) / _2108;
            float _2252 = isnan(cbSceneParam._m0[41u].w) ? _2248 : (isnan(_2248) ? cbSceneParam._m0[41u].w : max(_2248, cbSceneParam._m0[41u].w));
            float _2295 = (cbSceneParam._m0[33u].x - sqrt(((_1906 * _1906) + (_1905 * _1905)) + (_1907 * _1907))) * cbSceneParam._m0[33u].y;
            float _4437 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
            float _2302 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2109, cbSceneParam._m0[33u].w + _2110), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2109, _2110 - cbSceneParam._m0[33u].z), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2109 - cbSceneParam._m0[33u].z, _2110 - cbSceneParam._m0[33u].w), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2109 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2110), _2252), 0.0)).x), vec4(0.25)));
            float _2306 = 1.0 - (_2302 * cbSceneParam._m0[34u].x);
            float _2307 = 1.0 - (_2302 * cbSceneParam._m0[34u].y);
            float _2308 = 1.0 - (_2302 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2308) ? _2056 : (isnan(_2056) ? _2308 : min(_2056, _2308));
            frontier_phi_37_36_ladder_1 = isnan(_2307) ? _2055 : (isnan(_2055) ? _2307 : min(_2055, _2307));
            frontier_phi_37_36_ladder_2 = isnan(_2306) ? _2054 : (isnan(_2054) ? _2306 : min(_2054, _2306));
        }
        else
        {
            frontier_phi_37_36_ladder = _2056;
            frontier_phi_37_36_ladder_1 = _2055;
            frontier_phi_37_36_ladder_2 = _2054;
        }
        _2120 = frontier_phi_37_36_ladder_2;
        _2122 = frontier_phi_37_36_ladder_1;
        _2124 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2120 = _2054;
        _2122 = _2055;
        _2124 = _2056;
    }
    uvec4 _2129 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _2131 = _2129.x * 14u;
    uint _2132 = _2131 + 13u;
    float _2139 = _795 + (-1.0);
    float _2144 = (cbLight._m0[_2132].x * _2139) + 1.0;
    float _2145 = (cbLight._m0[_2132].y * _2139) + 1.0;
    float _2146 = (cbLight._m0[_2132].z * _2139) + 1.0;
    float _2147 = (cbLight._m0[_2132].w * _2139) + 1.0;
    uint _2148 = _2131 + 5u;
    float _2154 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
    uint _2158 = _2131 + 4u;
    float _2167 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
    uint _2171 = _2131 | 1u;
    float _2182 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_617, _618, _619));
    float _2185 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_617, _618, _619));
    float _4473 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _4484 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2190 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * 0.3183098733425140380859375;
    float _2192 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * 0.3183098733425140380859375;
    float _2199 = ((cbLight._m0[_2148].x * _2154) * _2192) + (((cbLight._m0[_2158].x * _2120) * _2167) * _2190);
    float _2200 = ((_2154 * cbLight._m0[_2148].y) * _2192) + (((cbLight._m0[_2158].y * _2122) * _2167) * _2190);
    float _2201 = ((_2154 * cbLight._m0[_2148].z) * _2192) + (((cbLight._m0[_2158].z * _2124) * _2167) * _2190);
    uvec4 _2205 = floatBitsToUint(cbLight._m0[_2131 + 12u]);
    bool _2207 = _2205.x == 0u;
    float _2309;
    float _2311;
    float _2313;
    if (_2207)
    {
        _2309 = _2199;
        _2311 = _2200;
        _2313 = _2201;
    }
    else
    {
        uint _2317 = _2131 + 6u;
        float _2333 = (dot(vec3(cbLight._m0[_2131 + 2u].xyz), vec3(_617, _618, _619)) * 0.5) + 0.5;
        float _2334 = _2333 * _2333;
        float _4495 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2335 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2336 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
        _2309 = (((cbLight._m0[_2317].x * 0.3183098733425140380859375) * _2335) * _2336) + _2199;
        _2311 = (((cbLight._m0[_2317].y * 0.3183098733425140380859375) * _2335) * _2336) + _2200;
        _2313 = (((cbLight._m0[_2317].z * 0.3183098733425140380859375) * _2335) * _2336) + _2201;
    }
    bool _2316 = _2205.y == 0u;
    float _2371;
    float _2373;
    float _2375;
    if (_2316)
    {
        _2371 = _2309;
        _2373 = _2311;
        _2375 = _2313;
    }
    else
    {
        uint _2544 = _2131 + 7u;
        float _2560 = (dot(vec3(cbLight._m0[_2131 + 3u].xyz), vec3(_617, _618, _619)) * 0.5) + 0.5;
        float _2561 = _2560 * _2560;
        float _4511 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2562 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2563 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2371 = (((cbLight._m0[_2544].x * 0.3183098733425140380859375) * _2562) * _2563) + _2309;
        _2373 = (((cbLight._m0[_2544].y * 0.3183098733425140380859375) * _2562) * _2563) + _2311;
        _2375 = (((cbLight._m0[_2544].z * 0.3183098733425140380859375) * _2562) * _2563) + _2313;
    }
    uint _2378 = _2131 + 8u;
    float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _620) * 0.949999988079071044921875);
    float _2392 = _2391 * _2391;
    float _2393 = cbLight._m0[_2131].x + _697;
    float _2394 = cbLight._m0[_2131].y + _698;
    float _2395 = cbLight._m0[_2131].z + _699;
    float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
    float _2400 = _2399 * _2393;
    float _2401 = _2399 * _2394;
    float _2402 = _2399 * _2395;
    float _2403 = dot(vec3(_617, _618, _619), vec3(cbLight._m0[_2131].xyz));
    float _4527 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _4538 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2407 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _2408 = dot(vec3(_617, _618, _619), vec3(_2400, _2401, _2402));
    float _4549 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2412 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2400, _2401, _2402));
    float _4560 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2416 = _2392 * _2392;
    float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
    float _2428 = exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0);
    float _2429 = 0.959999978542327880859375 - _776;
    float _2431 = 0.959999978542327880859375 - _777;
    float _2432 = 0.959999978542327880859375 - _778;
    float _2439 = 1.0 - _2392;
    float _2450 = (0.5 / (((_2407 * ((_2406 * _2439) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2439) + _2392) * _2406))) * _2406;
    float _4571 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2452 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
    uint _2466 = _2131 + 9u;
    float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _620) * 0.949999988079071044921875);
    float _2478 = _2477 * _2477;
    float _2479 = cbLight._m0[_2171].x + _697;
    float _2480 = cbLight._m0[_2171].y + _698;
    float _2481 = cbLight._m0[_2171].z + _699;
    float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
    float _2486 = _2485 * _2479;
    float _2487 = _2485 * _2480;
    float _2488 = _2485 * _2481;
    float _2489 = dot(vec3(_617, _618, _619), vec3(cbLight._m0[_2171].xyz));
    float _4582 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2493 = dot(vec3(_617, _618, _619), vec3(_2486, _2487, _2488));
    float _4593 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2497 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2486, _2487, _2488));
    float _4604 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2501 = _2478 * _2478;
    float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
    float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0);
    float _2519 = 1.0 - _2478;
    float _2529 = (0.5 / (((_2407 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2519) + _2478) * _2492))) * _2492;
    float _4615 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2531 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
    float _2541 = (((((_2512 * _2429) + _779) * cbLight._m0[_2466].x) * _2531) * _2154) + ((((cbLight._m0[_2378].x * _2120) * ((_2428 * _2429) + _779)) * _2452) * _2167);
    float _2542 = (((((_2512 * _2431) + _781) * cbLight._m0[_2466].y) * _2531) * _2154) + ((((cbLight._m0[_2378].y * _2122) * ((_2428 * _2431) + _781)) * _2452) * _2167);
    float _2543 = (((((_2512 * _2432) + _782) * cbLight._m0[_2466].z) * _2531) * _2154) + ((((cbLight._m0[_2378].z * _2124) * ((_2428 * _2432) + _782)) * _2452) * _2167);
    float _2599;
    float _2601;
    float _2603;
    if (_2207)
    {
        _2599 = _2541;
        _2601 = _2542;
        _2603 = _2543;
    }
    else
    {
        uint _2605 = _2131 + 2u;
        uint _2609 = _2131 + 10u;
        float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2605].w)) * _620) * 0.949999988079071044921875);
        float _2624 = _2623 * _2623;
        float _2625 = cbLight._m0[_2605].x + _697;
        float _2626 = cbLight._m0[_2605].y + _698;
        float _2627 = cbLight._m0[_2605].z + _699;
        float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
        float _2632 = _2631 * _2625;
        float _2633 = _2631 * _2626;
        float _2634 = _2631 * _2627;
        float _2635 = dot(vec3(_617, _618, _619), vec3(cbLight._m0[_2605].xyz));
        float _4626 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2639 = dot(vec3(_617, _618, _619), vec3(_2632, _2633, _2634));
        float _4637 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2643 = dot(vec3(cbLight._m0[_2605].xyz), vec3(_2632, _2633, _2634));
        float _4648 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2647 = _2624 * _2624;
        float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
        float _2658 = exp2(log2(1.0 - (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) * 5.0);
        float _2665 = 1.0 - _2624;
        float _2675 = (0.5 / (((_2407 * ((_2638 * _2665) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2665) + _2624) * _2638))) * _2638;
        float _4659 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2677 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
        float _2678 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
        _2599 = (((((_2658 * _2429) + _779) * cbLight._m0[_2609].x) * _2677) * _2678) + _2541;
        _2601 = (((((_2658 * _2431) + _781) * cbLight._m0[_2609].y) * _2677) * _2678) + _2542;
        _2603 = (((((_2658 * _2432) + _782) * cbLight._m0[_2609].z) * _2677) * _2678) + _2543;
    }
    float _2709;
    float _2711;
    float _2713;
    if (_2316)
    {
        _2709 = _2599;
        _2711 = _2601;
        _2713 = _2603;
    }
    else
    {
        uint _2720 = _2131 + 3u;
        uint _2724 = _2131 + 11u;
        float _2738 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2720].w)) * _620) * 0.949999988079071044921875);
        float _2739 = _2738 * _2738;
        float _2740 = cbLight._m0[_2720].x + _697;
        float _2741 = cbLight._m0[_2720].y + _698;
        float _2742 = cbLight._m0[_2720].z + _699;
        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
        float _2747 = _2746 * _2740;
        float _2748 = _2746 * _2741;
        float _2749 = _2746 * _2742;
        float _2750 = dot(vec3(_617, _618, _619), vec3(cbLight._m0[_2720].xyz));
        float _4675 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2753 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2754 = dot(vec3(_617, _618, _619), vec3(_2747, _2748, _2749));
        float _4686 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2757 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2758 = dot(vec3(cbLight._m0[_2720].xyz), vec3(_2747, _2748, _2749));
        float _4697 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2762 = _2739 * _2739;
        float _2766 = ((_2757 * _2757) * (_2762 + (-1.0))) + 1.0;
        float _2773 = exp2(log2(1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * 5.0);
        float _2780 = 1.0 - _2739;
        float _2790 = (0.5 / (((_2407 * ((_2753 * _2780) + _2739)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2780) + _2739) * _2753))) * _2753;
        float _4708 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2792 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2762 / ((_2766 * _2766) * 3.141590118408203125));
        float _2793 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2709 = (((((_2773 * _2429) + _779) * cbLight._m0[_2724].x) * _2792) * _2793) + _2599;
        _2711 = (((((_2773 * _2431) + _781) * cbLight._m0[_2724].y) * _2792) * _2793) + _2601;
        _2713 = (((((_2773 * _2432) + _782) * cbLight._m0[_2724].z) * _2792) * _2793) + _2603;
    }
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    if (_2129.y == 0u)
    {
        uvec4 _2814 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2815 = _2814.x;
        uint _2826 = uint((float(_2814.y) * floor(float(uint(cbSceneParam._m0[85u].y * _718) / _2815))) + floor(float(uint(cbSceneParam._m0[85u].x * _717) / _2815)));
        float _2836 = (log2(_1907 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2837 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        uint _2840 = uint(isnan(14.0) ? _2837 : (isnan(_2837) ? 14.0 : min(_2837, 14.0)));
        uvec4 _2845 = texelFetch(g_lightClusterGridBuffer, int(((_2840 << 2u) + (_2826 << 6u)) >> 2u));
        uint _2846 = _2845.x;
        uint _2847 = _2814.z;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((((1u << ((_2847 >> 4u) & 15u)) + 4294967295u) & _2846) == 0u) || ((_2847 & 240u) == 0u))
        {
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
        }
        else
        {
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            uint _3085 = 0u;
            uint _3094;
            bool _3095;
            for (;;)
            {
                _3094 = texelFetch(g_lightClassification, int((((_2840 << 5u) + (_2826 << 9u)) + (_3085 << 2u)) >> 2u)).x;
                _3095 = _3094 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3095)
                {
                    frontier_phi_71_pred = _3084;
                    frontier_phi_71_pred_1 = _3083;
                    frontier_phi_71_pred_2 = _3082;
                    frontier_phi_71_pred_3 = _3081;
                    frontier_phi_71_pred_4 = _3080;
                    frontier_phi_71_pred_5 = _3079;
                }
                else
                {
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    uint _3230;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3094;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    for (;;)
                    {
                        uint _3234 = uint(findLSB(_3230)) + (_3085 << 5u);
                        uint _3231 = (_3230 + 4294967295u) & _3230;
                        uint _3236 = _3234 * 48u;
                        vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3236)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 3u)).x));
                        uint _3256 = (_3234 * 48u) + 4u;
                        vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 3u)).x));
                        uint _3275 = (_3234 * 48u) + 8u;
                        vec3 _3286 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x));
                        float _3290 = _3250.x - _1905;
                        float _3291 = _3250.y - _1906;
                        float _3292 = _3250.z - _1907;
                        float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                        float _3296 = inversesqrt(_3293);
                        float _3297 = _3296 * _3290;
                        float _3298 = _3296 * _3291;
                        float _3299 = _3296 * _3292;
                        float _3300 = dot(vec3(_736, _739, _742), vec3(_3297, _3298, _3299));
                        float _3305 = 1.0 - (_3293 * _3250.w);
                        float _4734 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3306 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                        float _3307 = sqrt(_3293) * _3269.w;
                        float _3310 = 1.39999997615814208984375 / (_3307 + 1.39999997615814208984375);
                        float _3311 = _3310 * _3310;
                        float _3314 = ((1.0 - _3311) * _3300) + _3311;
                        float _3317 = _3307 * _3307;
                        float _3321 = ((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3306) / ((_3317 * 0.699999988079071044921875) + 1.0);
                        float _3325 = (-0.0) - _1905;
                        float _3326 = (-0.0) - _1906;
                        float _3327 = (-0.0) - _1907;
                        float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                        float _3332 = _3331 * _3325;
                        float _3333 = _3331 * _3326;
                        float _3334 = _3331 * _3327;
                        float _3341 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                        float _3342 = 1.0 - _811;
                        float _3349 = sqrt(1.0 - ((1.0 - (_3342 * _3342)) * (1.0 - (_3341 * _3341))));
                        float _3350 = _3349 * _3349;
                        float _3351 = _3350 * _3350;
                        float _3352 = _3332 + _3297;
                        float _3353 = _3333 + _3298;
                        float _3354 = _3334 + _3299;
                        float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                        float _3362 = dot(vec3(_736, _739, _742), vec3(_3332, _3333, _3334));
                        float _4750 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3365 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3366 = dot(vec3(_736, _739, _742), vec3(_3358 * _3352, _3358 * _3353, _3358 * _3354));
                        float _4761 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3373 = ((_3369 * _3369) * (_3351 + (-1.0))) + 1.0;
                        float _3374 = _3310 * _3350;
                        float _3375 = _3374 * _3374;
                        float _3378 = ((1.0 - _3375) * _3300) + _3375;
                        float _4772 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3379 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3380 = 1.0 - _3350;
                        float _3390 = (0.5 / (((_3379 * ((_3365 * _3380) + _3350)) + 9.9999999392252902907785028219223e-09) + (((_3379 * _3380) + _3350) * _3365))) * _3379;
                        float _4783 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3401 = (((_3351 * 3.1415927410125732421875) * (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) / ((_3373 * _3373) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125))) * _3306;
                        _3154 = (_3321 * _3269.x) + _3227;
                        _3155 = (_3321 * _3269.y) + _3228;
                        _3156 = (_3321 * _3269.z) + _3229;
                        _3151 = (_3401 * _3286.x) + _3224;
                        _3152 = (_3401 * _3286.y) + _3225;
                        _3153 = (_3401 * _3286.z) + _3226;
                        if (_3231 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3231;
                        }
                    }
                    frontier_phi_71_pred = _3156;
                    frontier_phi_71_pred_1 = _3155;
                    frontier_phi_71_pred_2 = _3154;
                    frontier_phi_71_pred_3 = _3153;
                    frontier_phi_71_pred_4 = _3152;
                    frontier_phi_71_pred_5 = _3151;
                }
                _2937 = frontier_phi_71_pred;
                _2935 = frontier_phi_71_pred_1;
                _2933 = frontier_phi_71_pred_2;
                _2931 = frontier_phi_71_pred_3;
                _2929 = frontier_phi_71_pred_4;
                _2927 = frontier_phi_71_pred_5;
                uint _3086 = _3085 + 1u;
                if (_3086 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3079 = _2927;
                    _3080 = _2929;
                    _3081 = _2931;
                    _3082 = _2933;
                    _3083 = _2935;
                    _3084 = _2937;
                    _3085 = _3086;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
        }
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.z;
        uint _2943 = (_2941 >> 8u) & 15u;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        if (((4294967295u << _2943) & _2846) == 0u)
        {
            _3047 = _2926;
            _3049 = _2928;
            _3051 = _2930;
            _3053 = _2932;
            _3055 = _2934;
            _3057 = _2936;
        }
        else
        {
            float _3072 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
            float _3073 = _3072 * _1905;
            float _3074 = _3072 * _1906;
            float _3075 = _3072 * _1907;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2943 < ((_2941 >> 12u) & 15u))
            {
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3207 = _2926;
                float _3208 = _2928;
                float _3209 = _2930;
                float _3210 = _2932;
                float _3211 = _2934;
                float _3212 = _2936;
                uint _3213 = _2943;
                uint _3222;
                bool _3223;
                for (;;)
                {
                    _3222 = texelFetch(g_lightClassification, int((((_2840 << 5u) + (_2826 << 9u)) + (_3213 << 2u)) >> 2u)).x;
                    _3223 = _3222 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3223)
                    {
                        frontier_phi_82_pred = _3212;
                        frontier_phi_82_pred_1 = _3211;
                        frontier_phi_82_pred_2 = _3210;
                        frontier_phi_82_pred_3 = _3209;
                        frontier_phi_82_pred_4 = _3208;
                        frontier_phi_82_pred_5 = _3207;
                    }
                    else
                    {
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3428 = _3207;
                        float _3429 = _3208;
                        float _3430 = _3209;
                        float _3431 = _3210;
                        float _3432 = _3211;
                        float _3433 = _3212;
                        uint _3434 = _3222;
                        uint _3435;
                        vec4 _3460;
                        float _3461;
                        vec4 _3476;
                        vec3 _3488;
                        vec4 _3503;
                        vec4 _3518;
                        float _3564;
                        bool _3565;
                        for (;;)
                        {
                            uint _3445 = ((_3213 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3434));
                            _3435 = (_3434 + 4294967295u) & _3434;
                            uint _3447 = _3445 * 40u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            _3461 = _3460.w;
                            uint _3463 = (_3445 * 40u) + 4u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3478 = (_3445 * 40u) + 8u;
                            _3488 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x));
                            uint _3490 = (_3445 * 40u) + 16u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3505 = (_3445 * 40u) + 20u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3445 * 40u) + 24u;
                            vec4 _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3539 = (_3445 * 40u) + 28u;
                            vec4 _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            _3564 = fma(_1907, _3552.z, fma(_1906, _3552.y, _3552.x * _1905)) + _3552.w;
                            _3565 = !((fma(_1907, _3533.z, fma(_1906, _3533.y, _3533.x * _1905)) + _3533.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3565)
                            {
                                float _3592 = _3460.x - _1905;
                                float _3593 = _3460.y - _1906;
                                float _3594 = _3460.z - _1907;
                                float _3595 = dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594));
                                float _3598 = inversesqrt(_3595);
                                float _3599 = _3598 * _3592;
                                float _3600 = _3598 * _3593;
                                float _3601 = _3598 * _3594;
                                float _3605 = 1.0 - (_3595 / (_3461 * _3461));
                                float _4794 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                                float _3610 = sqrt(_3595) * _3476.w;
                                float _3612 = 1.39999997615814208984375 / (_3610 + 1.39999997615814208984375);
                                float _3613 = _3612 * _3612;
                                float _3616 = ((1.0 - _3613) * dot(vec3(_3599, _3600, _3601), vec3(_736, _739, _742))) + _3613;
                                float _3619 = _3610 * _3610;
                                float _3623 = (fma(_1907, _3503.z, fma(_1906, _3503.y, _3503.x * _1905)) + _3503.w) / _3564;
                                float _3624 = (fma(_1907, _3518.z, fma(_1906, _3518.y, _3518.x * _1905)) + _3518.w) / _3564;
                                float _3628 = 1.0 - dot(vec2(_3623, _3624), vec2(_3623, _3624));
                                float _4810 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3630 = _3629 * (((isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0))) * _3606) / ((_3619 * 0.699999988079071044921875) + 1.0));
                                float _3642 = exp2(log2(1.0 / ((_3619 * 3.5) + 5.0)) * 0.25);
                                float _3643 = 1.0 - _811;
                                float _3650 = sqrt(1.0 - ((1.0 - (_3643 * _3643)) * (1.0 - (_3642 * _3642))));
                                float _3651 = _3650 * _3650;
                                float _3652 = _3651 * _3651;
                                float _3653 = _3599 - _3073;
                                float _3654 = _3600 - _3074;
                                float _3655 = _3601 - _3075;
                                float _3659 = inversesqrt(dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655)));
                                float _3663 = dot(vec3(_736, _739, _742), vec3((-0.0) - _3073, (-0.0) - _3074, (-0.0) - _3075));
                                float _4821 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3666 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3667 = dot(vec3(_736, _739, _742), vec3(_3659 * _3653, _3659 * _3654, _3659 * _3655));
                                float _4832 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3670 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3674 = ((_3670 * _3670) * (_3652 + (-1.0))) + 1.0;
                                float _3675 = _3612 * _3651;
                                float _3676 = _3675 * _3675;
                                float _3682 = ((1.0 - _3676) * dot(vec3(_736, _739, _742), vec3(_3599, _3600, _3601))) + _3676;
                                float _4843 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3684 = 1.0 - _3651;
                                float _3694 = (0.5 / (((_3683 * ((_3666 * _3684) + _3651)) + 9.9999999392252902907785028219223e-09) + (((_3683 * _3684) + _3651) * _3666))) * _3683;
                                float _4854 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3704 = (_3629 * _3606) * (((_3652 * 3.1415927410125732421875) * (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) / ((_3674 * _3674) * ((_3619 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3630 * _3476.z;
                                frontier_phi_88_pred_1 = _3630 * _3476.y;
                                frontier_phi_88_pred_2 = _3630 * _3476.x;
                                frontier_phi_88_pred_3 = _3704 * _3488.z;
                                frontier_phi_88_pred_4 = _3704 * _3488.y;
                                frontier_phi_88_pred_5 = _3704 * _3488.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3713 = frontier_phi_88_pred;
                            _3712 = frontier_phi_88_pred_1;
                            _3711 = frontier_phi_88_pred_2;
                            _3710 = frontier_phi_88_pred_3;
                            _3709 = frontier_phi_88_pred_4;
                            _3708 = frontier_phi_88_pred_5;
                            _3418 = _3711 + _3431;
                            _3419 = _3712 + _3432;
                            _3420 = _3713 + _3433;
                            _3415 = _3708 + _3428;
                            _3416 = _3709 + _3429;
                            _3417 = _3710 + _3430;
                            if (_3435 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3435;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3420;
                        frontier_phi_82_pred_1 = _3419;
                        frontier_phi_82_pred_2 = _3418;
                        frontier_phi_82_pred_3 = _3417;
                        frontier_phi_82_pred_4 = _3416;
                        frontier_phi_82_pred_5 = _3415;
                    }
                    _3058 = frontier_phi_82_pred;
                    _3056 = frontier_phi_82_pred_1;
                    _3054 = frontier_phi_82_pred_2;
                    _3052 = frontier_phi_82_pred_3;
                    _3050 = frontier_phi_82_pred_4;
                    _3048 = frontier_phi_82_pred_5;
                    uint _3214 = _3213 + 1u;
                    if (_3214 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3207 = _3048;
                        _3208 = _3050;
                        _3209 = _3052;
                        _3210 = _3054;
                        _3211 = _3056;
                        _3212 = _3058;
                        _3213 = _3214;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3054;
                frontier_phi_63_64_ladder_1 = _3058;
                frontier_phi_63_64_ladder_2 = _3056;
                frontier_phi_63_64_ladder_3 = _3052;
                frontier_phi_63_64_ladder_4 = _3050;
                frontier_phi_63_64_ladder_5 = _3048;
            }
            else
            {
                frontier_phi_63_64_ladder = _2932;
                frontier_phi_63_64_ladder_1 = _2936;
                frontier_phi_63_64_ladder_2 = _2934;
                frontier_phi_63_64_ladder_3 = _2930;
                frontier_phi_63_64_ladder_4 = _2928;
                frontier_phi_63_64_ladder_5 = _2926;
            }
            _3047 = frontier_phi_63_64_ladder_5;
            _3049 = frontier_phi_63_64_ladder_4;
            _3051 = frontier_phi_63_64_ladder_3;
            _3053 = frontier_phi_63_64_ladder;
            _3055 = frontier_phi_63_64_ladder_2;
            _3057 = frontier_phi_63_64_ladder_1;
        }
        float _3062 = isnan(1.0) ? _795 : (isnan(_795) ? 1.0 : min(_795, 1.0));
        _2859 = (_3062 * _3053) + _2371;
        _2861 = (_3062 * _3055) + _2373;
        _2863 = (_3062 * _3057) + _2375;
        _2865 = ((_3047 * _779) * _3062) + _2709;
        _2867 = ((_3049 * _781) * _3062) + _2711;
        _2869 = ((_3051 * _782) * _3062) + _2713;
    }
    else
    {
        _2859 = _2371;
        _2861 = _2373;
        _2863 = _2375;
        _2865 = _2709;
        _2867 = _2711;
        _2869 = _2713;
    }
    float _4870 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4881 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4892 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _2886 = ((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2859 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _795))) + ((_2865 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    float _2887 = ((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2861 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _795))) + ((_2867 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    float _2888 = ((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2863 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _795))) + ((_2869 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    uint _2889 = _268 + 6u;
    float _2897 = _717 / cbSceneParam._m0[86u].x;
    float _2898 = _718 / cbSceneParam._m0[86u].y;
    vec4 _2912 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, (log2((isnan(cbSceneParam._m0[77u].w) ? _639 : (isnan(_639) ? cbSceneParam._m0[77u].w : min(_639, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2914 = _2912.x;
    float _2915 = _2912.y;
    float _2916 = _2912.z;
    float _2917 = _2912.w;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    if (_639 > cbSceneParam._m0[78u].w)
    {
        float _2951 = isnan(_639) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _639 : min(cbSceneParam._m0[80u].w, _639));
        float _2952 = _2951 / _639;
        float _2963 = _2952 * _690;
        float _2964 = _691 * _2952;
        float _2965 = (-0.0) - _2964;
        float _2967 = _2952 * _692;
        float _2969 = (cbSceneParam._m0[77u].w * _2965) / _2951;
        float _2970 = _2969 + cbSceneParam._m0[79u].w;
        float _2971 = cbSceneParam._m0[79u].w - _2964;
        float _2977 = sqrt(((_2963 * _2963) + (_2964 * _2964)) + (_2967 * _2967));
        float _2980 = (1.0 - (cbSceneParam._m0[77u].w / _2951)) * _2977;
        float _2985 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2987 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3164;
        if (abs((_2965 - _2969) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3164 = ((((_2970 > 0.0) ? exp2(_2985 * _2970) : (2.0 - exp2(_2987 * _2970))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2980;
        }
        else
        {
            float _3108 = 1.0 / cbSceneParam._m0[80u].x;
            float _3109 = isnan(_2971) ? _2970 : (isnan(_2970) ? _2971 : max(_2970, _2971));
            float _3110 = isnan(_2971) ? _2970 : (isnan(_2970) ? _2971 : min(_2970, _2971));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            float _3120 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : min(_3110, 0.0));
            _3164 = ((abs(_2977 / _2965) * cbSceneParam._m0[80u].y) * ((((_3119 - _3120) * 2.0) - ((exp2(_2985 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0)))) - exp2(_2985 * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))))) * _3108)) - ((exp2(_2987 * _3119) - exp2(_2987 * _3120)) * _3108))) + (_2980 * cbSceneParam._m0[80u].z);
        }
        vec4 _3166 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, 1.0), 0.0);
        float _3175 = exp2((_3164 * (-1.44269502162933349609375)) * (1.0 - _3166.w));
        float _3176 = log2(_3175);
        float _3192 = log2(_2917);
        _2989 = (exp2(_3192 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].x)) * _3166.x) / cbSceneParam._m0[78u].x)) + _2914;
        _2991 = (exp2(_3192 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].y)) * _3166.y) / cbSceneParam._m0[78u].y)) + _2915;
        _2993 = (exp2(_3192 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].z)) * _3166.z) / cbSceneParam._m0[78u].z)) + _2916;
        _2995 = _3175 * _2917;
    }
    else
    {
        _2989 = _2914;
        _2991 = _2915;
        _2993 = _2916;
        _2995 = _2917;
    }
    bool _3202;
    vec4 _3005;
    vec4 _3027;
    float _3029;
    float _3033;
    float _3034;
    float _3035;
    float _3036;
    bool _3046;
    for (;;)
    {
        _3005 = cbMatDynParam._m0[0u];
        float _3007 = roundEven(_3005.y);
        bool _3008 = _3007 == 3.0;
        float _3009 = log2(_2995);
        float _3016 = exp2(_3009 * cbSceneParam._m0[78u].x) * _2886;
        float _3017 = exp2(_3009 * cbSceneParam._m0[78u].y) * _2887;
        float _3018 = exp2(_3009 * cbSceneParam._m0[78u].z) * _2888;
        float _3025 = _706 + (-0.5);
        _3027 = cbMtdParam._m0[1u];
        _3029 = _3027.y * _3025;
        float _3032 = (_3007 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3033 = _3032 * (_3008 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2989)));
        _3034 = _3032 * (_3008 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2991)));
        _3035 = _3032 * (_3008 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2993)));
        _3036 = _3025 * 0.999000012874603271484375;
        _3046 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3046)
        {
            if ((cbInstanceData._m0[_268 + 7u].x + _3036) < 0.5)
            {
                _3202 = true;
                break;
            }
        }
        uint _3143 = _755 + uint(_3005.w);
        if ((cbInstanceData._m0[_3143].w < 1.0) && ((cbInstanceData._m0[_3143].w + _3036) < 0.5))
        {
            _3202 = true;
            break;
        }
        if ((_3029 + 1.0) < _3027.x)
        {
            _3202 = true;
            break;
        }
        _3202 = false;
        break;
    }
    float _3406;
    if (_3202)
    {
        discard_state = true;
        _3406 = 0.0;
    }
    else
    {
        _3406 = cbInstanceData._m0[_2889].w;
    }
    SV_Target.x = _3033;
    SV_Target.y = _3034;
    SV_Target.z = _3035;
    SV_Target.w = _3406;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2889].w;
    discard_exit();
}


