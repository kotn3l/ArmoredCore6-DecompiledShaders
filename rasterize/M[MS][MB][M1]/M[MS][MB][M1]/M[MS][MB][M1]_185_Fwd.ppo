#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1387;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3713 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3724 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3735 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[24u].y) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3746 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _433 = (_426 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _434 = (_426 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _435 = (_426 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    vec4 _452 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _293) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _294) + cbTextureTilingScale._m0[3u].w));
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _474 = _472.x;
    float _484 = dot(vec4(_474, _472.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _498 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_474 - _484) * cbMtdParam._m0[24u].y) + _484) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3757 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _506 = (_499 * ((_452.x * cbMtdParam._m0[13u].x) - _433)) + _433;
    float _507 = (_499 * ((_452.y * cbMtdParam._m0[13u].y) - _434)) + _434;
    float _508 = (_499 * ((_452.z * cbMtdParam._m0[13u].z) - _435)) + _435;
    float _512 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _506;
    float _515 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _507;
    float _518 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _508;
    float _525 = ((_506 - _512) * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) + _512;
    float _526 = ((_507 - _515) * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) + _515;
    float _527 = ((_508 - _518) * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) + _518;
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _586 = _584.x;
    float _587 = _584.y;
    float _588 = _584.z;
    float _595 = ((_567.x - _586) * _426) + _586;
    float _596 = ((_567.y - _587) * _426) + _587;
    float _597 = ((_567.z - _588) * _426) + _588;
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _293) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _294) + cbTextureTilingScale._m0[2u].w));
    float _622 = ((_609.z - _597) * _499) + _597;
    float _625 = ((((_609.x - _595) * _499) + _595) * 2.0) + (-1.0);
    float _626 = ((((_609.y - _596) * _499) + _596) * 2.0) + (-1.0);
    float _627 = dot(vec2(_625, _626), vec2(_625, _626));
    float _3768 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _632 = sqrt(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))));
    vec4 _646 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _671 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _673 = _671.x;
    float _674 = 1.0 - _673;
    float _687 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_673 - _674) * cbMtdParam._m0[24u].z) + _674) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3779 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _688 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _695 = (_688 * (cbMtdParam._m0[17u].x - _525)) + _525;
    float _696 = (_688 * (cbMtdParam._m0[17u].y - _526)) + _526;
    float _697 = (_688 * (cbMtdParam._m0[17u].z - _527)) + _527;
    vec4 _709 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _723 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _725 = _723.x;
    float _743 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w)).x - _725) * _426) + _725;
    float _760 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _293) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _294) + cbTextureTilingScale._m0[21u].w)).x - _743) * _499) + _743;
    float _764 = ((_709.x - _760) * cbMtdParam._m0[19u].z) + _760;
    float _766 = _764 - (_764 * _688);
    float _771 = (((_544.z - _622) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _622;
    float _775 = ((_646.z - _771) * cbMtdParam._m0[19u].w) + _771;
    vec4 _788 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _795 = (_788.x * 2.0) + (-1.0);
    float _796 = (_788.y * 2.0) + (-1.0);
    float _797 = dot(vec2(_795, _796), vec2(_795, _796));
    float _3790 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _805 = (_688 * (_788.z - _775)) + _775;
    float _814 = (_625 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_544.x * 2.0) + (-1.0)))) + (((_646.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _815 = (_626 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_544.y * 2.0) + (-1.0)))) + (((_646.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _827 = (((_795 - _814) + (cbMtdParam._m0[21u].x * _814)) * _688) + _814;
    float _828 = (((_796 - _815) + (cbMtdParam._m0[21u].x * _815)) * _688) + _815;
    float _829 = (_688 * (sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) - _632)) + _632;
    float _833 = cbMtdParam._m0[22u].x + _646.w;
    float _836 = fma(_829, _240 * NORMAL.x, fma(_828, _247 * TANGENT.x, (_233 * _225) * _827));
    float _839 = fma(_829, _240 * NORMAL.y, fma(_828, _247 * TANGENT.y, (_233 * _226) * _827));
    float _842 = fma(_829, _240 * NORMAL.z, fma(_828, _247 * TANGENT.z, (_233 * _227) * _827));
    float _846 = inversesqrt(dot(vec3(_836, _839, _842), vec3(_836, _839, _842)));
    float _847 = _846 * _836;
    float _848 = _846 * _839;
    float _849 = _846 * _842;
    float _3801 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _850 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _3823 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3834 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _3845 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _3856 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _855 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _869 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _920 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _910);
    float _921 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _910);
    float _922 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _910);
    float _926 = inversesqrt(dot(vec3(_920, _921, _922), vec3(_920, _921, _922)));
    float _927 = _920 * _926;
    float _928 = _921 * _926;
    float _929 = _922 * _926;
    float _935 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _936 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _954 = fma(_849, cbSceneParam._m0[5u].z, fma(_848, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _847));
    float _957 = fma(_849, cbSceneParam._m0[6u].z, fma(_848, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _847));
    float _960 = fma(_849, cbSceneParam._m0[7u].z, fma(_848, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _847));
    uint _974 = (_274 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _980 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * cbInstanceData._m0[_974].x;
    float _981 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_974].y;
    float _982 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_974].z;
    float _3867 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _986 = 1.0 - _855;
    float _987 = _983 * _986;
    float _988 = _984 * _986;
    float _989 = _985 * _986;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _855;
    float _995 = (_984 + (-0.039999999105930328369140625)) * _855;
    float _996 = (_985 + (-0.039999999105930328369140625)) * _855;
    float _997 = _994 + 0.039999999105930328369140625;
    float _999 = _995 + 0.039999999105930328369140625;
    float _1000 = _996 + 0.039999999105930328369140625;
    vec4 _1009 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _935, cbSceneParam._m0[86u].y * _936));
    float _1013 = ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * TEXCOORD_5.w) * _1009.x;
    float _1014 = dot(vec3(_847, _848, _849), vec3(_927, _928, _929));
    float _1017 = _1014 * 2.0;
    float _1021 = (_1017 * _847) - _927;
    float _1022 = (_1017 * _848) - _928;
    float _1023 = (_1017 * _849) - _929;
    float _1027 = abs(dot(vec3(_927, _928, _929), vec3(_847, _848, _849)));
    float _3900 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1029 = sqrt(_850);
    float _1042 = exp2((_1029 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1029 * 3.0));
    float _1048 = (1.0 - _1042) * ((_1029 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1049 = _1042 * _1029;
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1386;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1111 = fma(_1085, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077));
        float _1115 = fma(_1085, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077));
        float _1119 = fma(_1085, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077));
        float _1144 = _1077 + _847;
        float _1145 = _1081 + _848;
        float _1146 = _1085 + _849;
        float _1156 = fma(_1146, cbModelParam._m0[26u].z, fma(_1145, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1144)) - _1111;
        float _1157 = fma(_1146, cbModelParam._m0[27u].z, fma(_1145, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1144)) - _1115;
        float _1158 = fma(_1146, cbModelParam._m0[28u].z, fma(_1145, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1144)) - _1119;
        float _1162 = inversesqrt(dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158)));
        float _1175 = ((_1162 * _1156) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1111 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1162 * _1157) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1115 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1162 * _1158) / cbModelParam._m0[34u].z) + ((((((_1119 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        float _1214 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1180.x + (-0.5));
        float _1216 = _1214 * (_1180.y + (-0.5));
        float _1217 = _1214 * (_1180.z + (-0.5));
        float _1224 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1187.x + (-0.5));
        float _1226 = _1224 * (_1187.y + (-0.5));
        float _1227 = _1224 * (_1187.z + (-0.5));
        float _1234 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1194.x + (-0.5));
        float _1236 = _1234 * (_1194.y + (-0.5));
        float _1237 = _1234 * (_1194.z + (-0.5));
        float _1244 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1201.x + (-0.5));
        float _1246 = _1244 * (_1201.y + (-0.5));
        float _1247 = _1244 * (_1201.z + (-0.5));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = _1215 * 0.5;
        float _1252 = _1225 * 0.5;
        float _1253 = _1235 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1268 = (dot(vec3(_847, _848, _849), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1278 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _3948 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1280 + 1.0))) + _1285) * _1248;
        float _1295 = _1216 * 0.5;
        float _1296 = _1226 * 0.5;
        float _1297 = _1236 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_847, _848, _849), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3981 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1322 + 1.0))) + _1327) * _1249;
        float _1337 = _1217 * 0.5;
        float _1338 = _1227 * 0.5;
        float _1339 = _1237 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_847, _848, _849), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4014 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1364 + 1.0))) + _1369) * _1250;
        _1386 = _1217;
        _1388 = _1216;
        _1389 = _1215;
        _1390 = _1227;
        _1391 = _1226;
        _1392 = _1225;
        _1393 = _1237;
        _1394 = _1236;
        _1395 = _1235;
        _1396 = _1250;
        _1397 = _1249;
        _1398 = _1248;
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
    }
    else
    {
        _1386 = _1387;
        _1388 = _1387;
        _1389 = _1387;
        _1390 = _1387;
        _1391 = _1387;
        _1392 = _1387;
        _1393 = _1387;
        _1394 = _1387;
        _1395 = _1387;
        _1396 = _1387;
        _1397 = _1387;
        _1398 = _1387;
        _1399 = 0.0;
        _1400 = 0.0;
        _1401 = 0.0;
    }
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1425 = fma(_1085, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077));
        float _1429 = fma(_1085, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077));
        float _1433 = fma(_1085, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077));
        float _1456 = _1077 + _847;
        float _1457 = _1081 + _848;
        float _1458 = _1085 + _849;
        float _1468 = fma(_1458, cbModelParam._m0[30u].z, fma(_1457, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1456)) - _1425;
        float _1469 = fma(_1458, cbModelParam._m0[31u].z, fma(_1457, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1456)) - _1429;
        float _1470 = fma(_1458, cbModelParam._m0[32u].z, fma(_1457, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1456)) - _1433;
        float _1474 = inversesqrt(dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470)));
        float _1487 = ((_1474 * _1468) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1425 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1488 = ((_1474 * _1469) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1429 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1474 * _1470) / cbModelParam._m0[35u].z) + ((((((_1433 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1512 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        float _1524 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1491.x + (-0.5));
        float _1526 = _1524 * (_1491.y + (-0.5));
        float _1527 = _1524 * (_1491.z + (-0.5));
        float _1534 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1498.x + (-0.5));
        float _1536 = _1534 * (_1498.y + (-0.5));
        float _1537 = _1534 * (_1498.z + (-0.5));
        float _1544 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1505.x + (-0.5));
        float _1546 = _1544 * (_1505.y + (-0.5));
        float _1547 = _1544 * (_1505.z + (-0.5));
        float _1554 = exp2((_1512.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1512.x + (-0.5));
        float _1556 = _1554 * (_1512.y + (-0.5));
        float _1557 = _1554 * (_1512.z + (-0.5));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = _1525 * 0.5;
        float _1562 = _1535 * 0.5;
        float _1563 = _1545 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_847, _848, _849), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4077 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1588 + 1.0))) + _1593) * _1558;
        float _1603 = _1526 * 0.5;
        float _1604 = _1536 * 0.5;
        float _1605 = _1546 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_847, _848, _849), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4110 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1630 + 1.0))) + _1635) * _1559;
        float _1645 = _1527 * 0.5;
        float _1646 = _1537 * 0.5;
        float _1647 = _1547 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_847, _848, _849), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4143 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1672 + 1.0))) + _1677) * _1560;
        _1694 = _1527;
        _1695 = _1526;
        _1696 = _1525;
        _1697 = _1537;
        _1698 = _1536;
        _1699 = _1535;
        _1700 = _1547;
        _1701 = _1546;
        _1702 = _1545;
        _1703 = _1560;
        _1704 = _1559;
        _1705 = _1558;
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
    }
    else
    {
        _1694 = _1387;
        _1695 = _1387;
        _1696 = _1387;
        _1697 = _1387;
        _1698 = _1387;
        _1699 = _1387;
        _1700 = _1387;
        _1701 = _1387;
        _1702 = _1387;
        _1703 = _1387;
        _1704 = _1387;
        _1705 = _1387;
        _1706 = 0.0;
        _1707 = 0.0;
        _1708 = 0.0;
    }
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1399)) + _1399;
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1400)) + _1400;
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1401)) + _1401;
    float _1741 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1719, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1744 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1719, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1747 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1719, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1718));
    float _1762 = _1021 * 0.5;
    float _1763 = _1022 * 0.5;
    float _1764 = _1023 * 0.5;
    float _1765 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1768 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1771 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1805;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1778 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1386, _1390, _1393, _1396));
        float _1782 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1388, _1391, _1394, _1397));
        float _1786 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1389, _1392, _1395, _1398));
        float _1793 = dot(vec4(cbModelParam._m0[39u]), vec4(_1762, _1763, _1764, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1793) ? 0.0 : (isnan(0.0) ? _1793 : max(0.0, _1793))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1816;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1807 = dot(vec4(cbModelParam._m0[40u]), vec4(_1762, _1763, _1764, 1.0));
        _1816 = dot(vec3(isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1807) ? 0.0 : (isnan(0.0) ? _1807 : max(0.0, _1807))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1816 = 1.0;
    }
    float _1820 = (_1816 * cbModelParam._m0[1u].x) + (_1805 * (1.0 - cbModelParam._m0[1u].x));
    float _1830 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _850);
    float _1831 = isnan(_1830) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1830 : min(cbModelParam._m0[25u].z, _1830));
    float _1912;
    float _1914;
    float _1916;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1879 = fma(_1085, cbModelParam._m0[13u].z, fma(_1081, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1077)) + cbModelParam._m0[13u].w;
        float _1883 = fma(_1085, cbModelParam._m0[14u].z, fma(_1081, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1077)) + cbModelParam._m0[14u].w;
        float _1887 = fma(_1085, cbModelParam._m0[15u].z, fma(_1081, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1077)) + cbModelParam._m0[15u].w;
        float _1890 = fma(_1023, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1021));
        float _1893 = fma(_1023, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1021));
        float _1896 = fma(_1023, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1021));
        float _1924;
        if (_1890 > 0.0)
        {
            _1924 = abs((1.0 - _1879) / _1890);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1879 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1924 = frontier_phi_14_12_ladder;
        }
        float _2127;
        if (_1893 > 0.0)
        {
            _2127 = abs((1.0 - _1883) / _1893);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1883 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2127 = frontier_phi_23_19_ladder;
        }
        float _2381;
        if (_1896 > 0.0)
        {
            _2381 = abs((1.0 - _1887) / _1896);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1887 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2381 = frontier_phi_35_30_ladder;
        }
        float _2383 = isnan(_2127) ? _1924 : (isnan(_1924) ? _2127 : min(_1924, _2127));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1890) + _1879;
        float _2389 = (_2384 * _1893) + _1883;
        float _2390 = (_2384 * _1896) + _1887;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2393 = (-1.0) - _2391;
        float _2395 = _2391 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2390 > _2395) || ((_2390 < _2393) || ((_2389 > _2395) || ((_2389 < _2393) || ((_2388 < _2393) || (_2388 > _2395))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2518 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2390, cbModelParam._m0[9u].z, fma(_2389, cbModelParam._m0[9u].y, _2388 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2390, cbModelParam._m0[10u].z, fma(_2389, cbModelParam._m0[10u].y, _2388 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2390, cbModelParam._m0[11u].z, fma(_2389, cbModelParam._m0[11u].y, _2388 * cbModelParam._m0[11u].x))), _1831);
            frontier_phi_13_35_ladder = _2518.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2518.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2518.x * cbModelParam._m0[1u].y;
        }
        _1912 = frontier_phi_13_35_ladder_2;
        _1914 = frontier_phi_13_35_ladder_1;
        _1916 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1021, _1022, _1023), _1831);
        _1912 = _1900.x * cbModelParam._m0[1u].y;
        _1914 = _1900.y * cbModelParam._m0[1u].y;
        _1916 = _1900.z * cbModelParam._m0[1u].y;
    }
    float _1920 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _850);
    float _1921 = isnan(_1920) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1920 : min(cbModelParam._m0[25u].w, _1920));
    float _2011;
    float _2013;
    float _2015;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1975 = fma(_1085, cbModelParam._m0[21u].z, fma(_1081, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1077)) + cbModelParam._m0[21u].w;
        float _1979 = fma(_1085, cbModelParam._m0[22u].z, fma(_1081, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1077)) + cbModelParam._m0[22u].w;
        float _1983 = fma(_1085, cbModelParam._m0[23u].z, fma(_1081, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1077)) + cbModelParam._m0[23u].w;
        float _1986 = fma(_1023, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1021));
        float _1989 = fma(_1023, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1021));
        float _1992 = fma(_1023, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1021));
        float _2132;
        if (_1986 > 0.0)
        {
            _2132 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2132 = frontier_phi_25_21_ladder;
        }
        float _2408;
        if (_1989 > 0.0)
        {
            _2408 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2408 = frontier_phi_37_32_ladder;
        }
        float _2621;
        if (_1992 > 0.0)
        {
            _2621 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2621 = frontier_phi_46_43_ladder;
        }
        float _2623 = isnan(_2408) ? _2132 : (isnan(_2132) ? _2408 : min(_2132, _2408));
        float _2624 = isnan(_2621) ? _2623 : (isnan(_2623) ? _2621 : min(_2623, _2621));
        float _2628 = (_2624 * _1986) + _1975;
        float _2629 = (_2624 * _1989) + _1979;
        float _2630 = (_2624 * _1992) + _1983;
        float _2631 = _2624 * 9.9999997473787516355514526367188e-05;
        float _2632 = (-1.0) - _2631;
        float _2634 = _2631 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2630 > _2634) || ((_2630 < _2632) || ((_2629 > _2634) || ((_2629 < _2632) || ((_2628 < _2632) || (_2628 > _2634))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2630, cbModelParam._m0[17u].z, fma(_2629, cbModelParam._m0[17u].y, _2628 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2630, cbModelParam._m0[18u].z, fma(_2629, cbModelParam._m0[18u].y, _2628 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2630, cbModelParam._m0[19u].z, fma(_2629, cbModelParam._m0[19u].y, _2628 * cbModelParam._m0[19u].x))), _1921);
            frontier_phi_22_46_ladder = _2829.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2829.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2829.x * cbModelParam._m0[1u].z;
        }
        _2011 = frontier_phi_22_46_ladder_2;
        _2013 = frontier_phi_22_46_ladder_1;
        _2015 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1995 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1021, _1022, _1023), _1921);
        _2011 = _1995.x * cbModelParam._m0[1u].z;
        _2013 = _1995.y * cbModelParam._m0[1u].z;
        _2015 = _1995.z * cbModelParam._m0[1u].z;
    }
    float _2028 = (((_1048 * _997) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2011 - _1912)) + _1912);
    float _2030 = (((_1048 * _999) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2013 - _1914)) + _1914);
    float _2032 = (((_1048 * _1000) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2015 - _1916)) + _1916);
    float _2035 = fma(_2032, cbSceneParam._m0[89u].z, fma(_2030, cbSceneParam._m0[89u].y, _2028 * cbSceneParam._m0[89u].x));
    float _2038 = fma(_2032, cbSceneParam._m0[90u].z, fma(_2030, cbSceneParam._m0[90u].y, _2028 * cbSceneParam._m0[90u].x));
    float _2041 = fma(_2032, cbSceneParam._m0[91u].z, fma(_2030, cbSceneParam._m0[91u].y, _2028 * cbSceneParam._m0[91u].x));
    uvec4 _2051 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2053 = _2051.x * 14u;
    uint _2054 = _2053 + 13u;
    float _2061 = _1013 + (-1.0);
    float _2066 = (cbLight._m0[_2054].x * _2061) + 1.0;
    float _2067 = (cbLight._m0[_2054].y * _2061) + 1.0;
    float _2068 = (cbLight._m0[_2054].z * _2061) + 1.0;
    float _2069 = (cbLight._m0[_2054].w * _2061) + 1.0;
    uint _2070 = _2053 + 5u;
    float _2076 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
    uint _2080 = _2053 + 4u;
    float _2086 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
    uint _2090 = _2053 | 1u;
    float _2101 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_847, _848, _849));
    float _2104 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_847, _848, _849));
    float _4279 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _4290 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2109 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * 0.3183098733425140380859375;
    float _2111 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * 0.3183098733425140380859375;
    float _2118 = ((cbLight._m0[_2070].x * _2076) * _2111) + ((cbLight._m0[_2080].x * _2086) * _2109);
    float _2119 = ((_2076 * cbLight._m0[_2070].y) * _2111) + ((_2086 * cbLight._m0[_2080].y) * _2109);
    float _2120 = ((_2076 * cbLight._m0[_2070].z) * _2111) + ((_2086 * cbLight._m0[_2080].z) * _2109);
    uvec4 _2124 = floatBitsToUint(cbLight._m0[_2053 + 12u]);
    bool _2126 = _2124.x == 0u;
    float _2137;
    float _2139;
    float _2141;
    if (_2126)
    {
        _2137 = _2118;
        _2139 = _2119;
        _2141 = _2120;
    }
    else
    {
        uint _2145 = _2053 + 6u;
        float _2161 = (dot(vec3(cbLight._m0[_2053 + 2u].xyz), vec3(_847, _848, _849)) * 0.5) + 0.5;
        float _2162 = _2161 * _2161;
        float _4301 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2163 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2164 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2137 = (((cbLight._m0[_2145].x * 0.3183098733425140380859375) * _2163) * _2164) + _2118;
        _2139 = (((cbLight._m0[_2145].y * 0.3183098733425140380859375) * _2163) * _2164) + _2119;
        _2141 = (((cbLight._m0[_2145].z * 0.3183098733425140380859375) * _2163) * _2164) + _2120;
    }
    bool _2144 = _2124.y == 0u;
    float _2182;
    float _2184;
    float _2186;
    if (_2144)
    {
        _2182 = _2137;
        _2184 = _2139;
        _2186 = _2141;
    }
    else
    {
        uint _2352 = _2053 + 7u;
        float _2368 = (dot(vec3(cbLight._m0[_2053 + 3u].xyz), vec3(_847, _848, _849)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4317 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2371 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2182 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2137;
        _2184 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2139;
        _2186 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2141;
    }
    uint _2189 = _2053 + 8u;
    float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _850) * 0.949999988079071044921875);
    float _2203 = _2202 * _2202;
    float _2204 = cbLight._m0[_2053].x + _927;
    float _2205 = cbLight._m0[_2053].y + _928;
    float _2206 = cbLight._m0[_2053].z + _929;
    float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
    float _2211 = _2210 * _2204;
    float _2212 = _2210 * _2205;
    float _2213 = _2210 * _2206;
    float _2214 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2053].xyz));
    float _4333 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _4344 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _2218 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2219 = dot(vec3(_847, _848, _849), vec3(_2211, _2212, _2213));
    float _4355 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2223 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2211, _2212, _2213));
    float _4366 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2227 = _2203 * _2203;
    float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
    float _2239 = exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0);
    float _2240 = 0.959999978542327880859375 - _994;
    float _2242 = 0.959999978542327880859375 - _995;
    float _2243 = 0.959999978542327880859375 - _996;
    float _2250 = 1.0 - _2203;
    float _2261 = (0.5 / (((_2218 * ((_2217 * _2250) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2250) + _2203) * _2217))) * _2217;
    float _4377 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2263 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
    uint _2274 = _2053 + 9u;
    float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _850) * 0.949999988079071044921875);
    float _2286 = _2285 * _2285;
    float _2287 = cbLight._m0[_2090].x + _927;
    float _2288 = cbLight._m0[_2090].y + _928;
    float _2289 = cbLight._m0[_2090].z + _929;
    float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
    float _2294 = _2293 * _2287;
    float _2295 = _2293 * _2288;
    float _2296 = _2293 * _2289;
    float _2297 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2090].xyz));
    float _4388 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _2301 = dot(vec3(_847, _848, _849), vec3(_2294, _2295, _2296));
    float _4399 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2305 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2294, _2295, _2296));
    float _4410 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2309 = _2286 * _2286;
    float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
    float _2320 = exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0);
    float _2327 = 1.0 - _2286;
    float _2337 = (0.5 / (((_2218 * ((_2300 * _2327) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2327) + _2286) * _2300))) * _2300;
    float _4421 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2339 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
    float _2349 = (((((_2320 * _2240) + _997) * cbLight._m0[_2274].x) * _2339) * _2076) + (((((_2239 * _2240) + _997) * cbLight._m0[_2189].x) * _2263) * _2086);
    float _2350 = (((((_2320 * _2242) + _999) * cbLight._m0[_2274].y) * _2339) * _2076) + (((((_2239 * _2242) + _999) * cbLight._m0[_2189].y) * _2263) * _2086);
    float _2351 = (((((_2320 * _2243) + _1000) * cbLight._m0[_2274].z) * _2339) * _2076) + (((((_2239 * _2243) + _1000) * cbLight._m0[_2189].z) * _2263) * _2086);
    float _2413;
    float _2415;
    float _2417;
    if (_2126)
    {
        _2413 = _2349;
        _2415 = _2350;
        _2417 = _2351;
    }
    else
    {
        uint _2419 = _2053 + 2u;
        uint _2423 = _2053 + 10u;
        float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _850) * 0.949999988079071044921875);
        float _2438 = _2437 * _2437;
        float _2439 = cbLight._m0[_2419].x + _927;
        float _2440 = cbLight._m0[_2419].y + _928;
        float _2441 = cbLight._m0[_2419].z + _929;
        float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
        float _2446 = _2445 * _2439;
        float _2447 = _2445 * _2440;
        float _2448 = _2445 * _2441;
        float _2449 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2419].xyz));
        float _4432 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2453 = dot(vec3(_847, _848, _849), vec3(_2446, _2447, _2448));
        float _4443 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2457 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2446, _2447, _2448));
        float _4454 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2461 = _2438 * _2438;
        float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
        float _2472 = exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0);
        float _2479 = 1.0 - _2438;
        float _2489 = (0.5 / (((_2218 * ((_2452 * _2479) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2479) + _2438) * _2452))) * _2452;
        float _4465 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2491 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
        float _2492 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2413 = (((((_2472 * _2240) + _997) * cbLight._m0[_2423].x) * _2491) * _2492) + _2349;
        _2415 = (((((_2472 * _2242) + _999) * cbLight._m0[_2423].y) * _2491) * _2492) + _2350;
        _2417 = (((((_2472 * _2243) + _1000) * cbLight._m0[_2423].z) * _2491) * _2492) + _2351;
    }
    float _2527;
    float _2529;
    float _2531;
    if (_2144)
    {
        _2527 = _2413;
        _2529 = _2415;
        _2531 = _2417;
    }
    else
    {
        uint _2538 = _2053 + 3u;
        uint _2542 = _2053 + 11u;
        float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2538].w)) * _850) * 0.949999988079071044921875);
        float _2557 = _2556 * _2556;
        float _2558 = cbLight._m0[_2538].x + _927;
        float _2559 = cbLight._m0[_2538].y + _928;
        float _2560 = cbLight._m0[_2538].z + _929;
        float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
        float _2565 = _2564 * _2558;
        float _2566 = _2564 * _2559;
        float _2567 = _2564 * _2560;
        float _2568 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2538].xyz));
        float _4481 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2572 = dot(vec3(_847, _848, _849), vec3(_2565, _2566, _2567));
        float _4492 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2576 = dot(vec3(cbLight._m0[_2538].xyz), vec3(_2565, _2566, _2567));
        float _4503 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2580 = _2557 * _2557;
        float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
        float _2591 = exp2(log2(1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * 5.0);
        float _2598 = 1.0 - _2557;
        float _2608 = (0.5 / (((_2218 * ((_2571 * _2598) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2598) + _2557) * _2571))) * _2571;
        float _4514 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2610 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
        float _2611 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2527 = (((((_2591 * _2240) + _997) * cbLight._m0[_2542].x) * _2610) * _2611) + _2413;
        _2529 = (((((_2591 * _2242) + _999) * cbLight._m0[_2542].y) * _2610) * _2611) + _2415;
        _2531 = (((((_2591 * _2243) + _1000) * cbLight._m0[_2542].z) * _2610) * _2611) + _2417;
    }
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    if (_2051.y == 0u)
    {
        float _2686 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2686;
        float _2688 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2686;
        float _2689 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2686;
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.x;
        uint _2713 = uint((float(_2701.y) * floor(float(uint(cbSceneParam._m0[85u].y * _936) / _2702))) + floor(float(uint(cbSceneParam._m0[85u].x * _935) / _2702)));
        float _2723 = (log2(_2689 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2724 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        uint _2727 = uint(isnan(14.0) ? _2724 : (isnan(_2724) ? 14.0 : min(_2724, 14.0)));
        uvec4 _2732 = texelFetch(g_lightClusterGridBuffer, int(((_2727 << 2u) + (_2713 << 6u)) >> 2u));
        uint _2733 = _2732.x;
        uint _2734 = _2701.z;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        if (((((1u << ((_2734 >> 4u) & 15u)) + 4294967295u) & _2733) == 0u) || ((_2734 & 240u) == 0u))
        {
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
        }
        else
        {
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            uint _2985 = 0u;
            uint _2994;
            bool _2995;
            for (;;)
            {
                _2994 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_2985 << 2u)) >> 2u)).x;
                _2995 = _2994 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2995)
                {
                    frontier_phi_61_pred = _2979;
                    frontier_phi_61_pred_1 = _2984;
                    frontier_phi_61_pred_2 = _2983;
                    frontier_phi_61_pred_3 = _2982;
                    frontier_phi_61_pred_4 = _2981;
                    frontier_phi_61_pred_5 = _2980;
                }
                else
                {
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    uint _3109;
                    _3103 = _2979;
                    _3104 = _2980;
                    _3105 = _2981;
                    _3106 = _2982;
                    _3107 = _2983;
                    _3108 = _2984;
                    _3109 = _2994;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    for (;;)
                    {
                        uint _3113 = uint(findLSB(_3109)) + (_2985 << 5u);
                        uint _3110 = (_3109 + 4294967295u) & _3109;
                        uint _3115 = _3113 * 48u;
                        vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 3u)).x));
                        uint _3135 = (_3113 * 48u) + 4u;
                        vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 3u)).x));
                        uint _3154 = (_3113 * 48u) + 8u;
                        vec3 _3165 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x));
                        float _3169 = _3129.x - _2687;
                        float _3170 = _3129.y - _2688;
                        float _3171 = _3129.z - _2689;
                        float _3172 = dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171));
                        float _3175 = inversesqrt(_3172);
                        float _3176 = _3175 * _3169;
                        float _3177 = _3175 * _3170;
                        float _3178 = _3175 * _3171;
                        float _3179 = dot(vec3(_954, _957, _960), vec3(_3176, _3177, _3178));
                        float _3184 = 1.0 - (_3172 * _3129.w);
                        float _4540 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3186 = sqrt(_3172) * _3148.w;
                        float _3189 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                        float _3190 = _3189 * _3189;
                        float _3193 = ((1.0 - _3190) * _3179) + _3190;
                        float _3196 = _3186 * _3186;
                        float _3200 = ((isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))) * _3185) / ((_3196 * 0.699999988079071044921875) + 1.0);
                        float _3204 = (-0.0) - _2687;
                        float _3205 = (-0.0) - _2688;
                        float _3206 = (-0.0) - _2689;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3211 = _3210 * _3204;
                        float _3212 = _3210 * _3205;
                        float _3213 = _3210 * _3206;
                        float _3221 = exp2(log2(1.0 / ((_3196 * 3.5) + 5.0)) * 0.25);
                        float _3222 = 1.0 - _1029;
                        float _3229 = sqrt(1.0 - ((1.0 - (_3222 * _3222)) * (1.0 - (_3221 * _3221))));
                        float _3230 = _3229 * _3229;
                        float _3231 = _3230 * _3230;
                        float _3232 = _3211 + _3176;
                        float _3233 = _3212 + _3177;
                        float _3234 = _3213 + _3178;
                        float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                        float _3242 = dot(vec3(_954, _957, _960), vec3(_3211, _3212, _3213));
                        float _4556 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3245 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3246 = dot(vec3(_954, _957, _960), vec3(_3238 * _3232, _3238 * _3233, _3238 * _3234));
                        float _4567 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3249 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3253 = ((_3249 * _3249) * (_3231 + (-1.0))) + 1.0;
                        float _3254 = _3189 * _3230;
                        float _3255 = _3254 * _3254;
                        float _3258 = ((1.0 - _3255) * _3179) + _3255;
                        float _4578 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3259 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3260 = 1.0 - _3230;
                        float _3270 = (0.5 / (((_3259 * ((_3245 * _3260) + _3230)) + 9.9999999392252902907785028219223e-09) + (((_3259 * _3260) + _3230) * _3245))) * _3259;
                        float _4589 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3281 = (((_3231 * 3.1415927410125732421875) * (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) / ((_3253 * _3253) * ((_3196 * 2.1991131305694580078125) + 3.141590118408203125))) * _3185;
                        _3038 = (_3200 * _3148.x) + _3106;
                        _3039 = (_3200 * _3148.y) + _3107;
                        _3040 = (_3200 * _3148.z) + _3108;
                        _3035 = (_3281 * _3165.x) + _3103;
                        _3036 = (_3281 * _3165.y) + _3104;
                        _3037 = (_3281 * _3165.z) + _3105;
                        if (_3110 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3103 = _3035;
                            _3104 = _3036;
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3039;
                            _3108 = _3040;
                            _3109 = _3110;
                        }
                    }
                    frontier_phi_61_pred = _3035;
                    frontier_phi_61_pred_1 = _3040;
                    frontier_phi_61_pred_2 = _3039;
                    frontier_phi_61_pred_3 = _3038;
                    frontier_phi_61_pred_4 = _3037;
                    frontier_phi_61_pred_5 = _3036;
                }
                _2835 = frontier_phi_61_pred;
                _2845 = frontier_phi_61_pred_1;
                _2843 = frontier_phi_61_pred_2;
                _2841 = frontier_phi_61_pred_3;
                _2839 = frontier_phi_61_pred_4;
                _2837 = frontier_phi_61_pred_5;
                uint _2986 = _2985 + 1u;
                if (_2986 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2979 = _2835;
                    _2980 = _2837;
                    _2981 = _2839;
                    _2982 = _2841;
                    _2983 = _2843;
                    _2984 = _2845;
                    _2985 = _2986;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
        }
        uvec4 _2848 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2849 = _2848.z;
        uint _2851 = (_2849 >> 8u) & 15u;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((4294967295u << _2851) & _2733) == 0u)
        {
            _2947 = _2834;
            _2949 = _2836;
            _2951 = _2838;
            _2953 = _2840;
            _2955 = _2842;
            _2957 = _2844;
        }
        else
        {
            float _2972 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
            float _2973 = _2972 * _2687;
            float _2974 = _2972 * _2688;
            float _2975 = _2972 * _2689;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2851 < ((_2849 >> 12u) & 15u))
            {
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _3086 = _2834;
                float _3087 = _2836;
                float _3088 = _2838;
                float _3089 = _2840;
                float _3090 = _2842;
                float _3091 = _2844;
                uint _3092 = _2851;
                uint _3101;
                bool _3102;
                for (;;)
                {
                    _3101 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_3092 << 2u)) >> 2u)).x;
                    _3102 = _3101 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3102)
                    {
                        frontier_phi_67_pred = _3089;
                        frontier_phi_67_pred_1 = _3090;
                        frontier_phi_67_pred_2 = _3091;
                        frontier_phi_67_pred_3 = _3088;
                        frontier_phi_67_pred_4 = _3087;
                        frontier_phi_67_pred_5 = _3086;
                    }
                    else
                    {
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3299 = _3086;
                        float _3300 = _3087;
                        float _3301 = _3088;
                        float _3302 = _3089;
                        float _3303 = _3090;
                        float _3304 = _3091;
                        uint _3305 = _3101;
                        uint _3306;
                        vec4 _3331;
                        float _3332;
                        vec4 _3347;
                        vec3 _3359;
                        vec4 _3374;
                        vec4 _3389;
                        float _3435;
                        bool _3436;
                        for (;;)
                        {
                            uint _3316 = ((_3092 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3305));
                            _3306 = (_3305 + 4294967295u) & _3305;
                            uint _3318 = _3316 * 40u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            _3332 = _3331.w;
                            uint _3334 = (_3316 * 40u) + 4u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3349 = (_3316 * 40u) + 8u;
                            _3359 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x));
                            uint _3361 = (_3316 * 40u) + 16u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3376 = (_3316 * 40u) + 20u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3391 = (_3316 * 40u) + 24u;
                            vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3410 = (_3316 * 40u) + 28u;
                            vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            _3435 = fma(_2689, _3423.z, fma(_2688, _3423.y, _3423.x * _2687)) + _3423.w;
                            _3436 = !((fma(_2689, _3404.z, fma(_2688, _3404.y, _3404.x * _2687)) + _3404.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3436)
                            {
                                float _3463 = _3331.x - _2687;
                                float _3464 = _3331.y - _2688;
                                float _3465 = _3331.z - _2689;
                                float _3466 = dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465));
                                float _3469 = inversesqrt(_3466);
                                float _3470 = _3469 * _3463;
                                float _3471 = _3469 * _3464;
                                float _3472 = _3469 * _3465;
                                float _3476 = 1.0 - (_3466 / (_3332 * _3332));
                                float _4600 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3481 = sqrt(_3466) * _3347.w;
                                float _3483 = 1.39999997615814208984375 / (_3481 + 1.39999997615814208984375);
                                float _3484 = _3483 * _3483;
                                float _3487 = ((1.0 - _3484) * dot(vec3(_3470, _3471, _3472), vec3(_954, _957, _960))) + _3484;
                                float _3490 = _3481 * _3481;
                                float _3494 = (fma(_2689, _3374.z, fma(_2688, _3374.y, _3374.x * _2687)) + _3374.w) / _3435;
                                float _3495 = (fma(_2689, _3389.z, fma(_2688, _3389.y, _3389.x * _2687)) + _3389.w) / _3435;
                                float _3499 = 1.0 - dot(vec2(_3494, _3495), vec2(_3494, _3495));
                                float _4616 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3501 = _3500 * (((isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0))) * _3477) / ((_3490 * 0.699999988079071044921875) + 1.0));
                                float _3513 = exp2(log2(1.0 / ((_3490 * 3.5) + 5.0)) * 0.25);
                                float _3514 = 1.0 - _1029;
                                float _3521 = sqrt(1.0 - ((1.0 - (_3514 * _3514)) * (1.0 - (_3513 * _3513))));
                                float _3522 = _3521 * _3521;
                                float _3523 = _3522 * _3522;
                                float _3524 = _3470 - _2973;
                                float _3525 = _3471 - _2974;
                                float _3526 = _3472 - _2975;
                                float _3530 = inversesqrt(dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526)));
                                float _3534 = dot(vec3(_954, _957, _960), vec3((-0.0) - _2973, (-0.0) - _2974, (-0.0) - _2975));
                                float _4627 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3537 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3538 = dot(vec3(_954, _957, _960), vec3(_3530 * _3524, _3530 * _3525, _3530 * _3526));
                                float _4638 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3545 = ((_3541 * _3541) * (_3523 + (-1.0))) + 1.0;
                                float _3546 = _3483 * _3522;
                                float _3547 = _3546 * _3546;
                                float _3553 = ((1.0 - _3547) * dot(vec3(_954, _957, _960), vec3(_3470, _3471, _3472))) + _3547;
                                float _4649 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3555 = 1.0 - _3522;
                                float _3565 = (0.5 / (((_3554 * ((_3537 * _3555) + _3522)) + 9.9999999392252902907785028219223e-09) + (((_3554 * _3555) + _3522) * _3537))) * _3554;
                                float _4660 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3575 = (_3500 * _3477) * (((_3523 * 3.1415927410125732421875) * (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) / ((_3545 * _3545) * ((_3490 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3575 * _3359.x;
                                frontier_phi_73_pred_1 = _3575 * _3359.y;
                                frontier_phi_73_pred_2 = _3501 * _3347.z;
                                frontier_phi_73_pred_3 = _3501 * _3347.y;
                                frontier_phi_73_pred_4 = _3501 * _3347.x;
                                frontier_phi_73_pred_5 = _3575 * _3359.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3579 = frontier_phi_73_pred;
                            _3580 = frontier_phi_73_pred_1;
                            _3584 = frontier_phi_73_pred_2;
                            _3583 = frontier_phi_73_pred_3;
                            _3582 = frontier_phi_73_pred_4;
                            _3581 = frontier_phi_73_pred_5;
                            _3289 = _3582 + _3302;
                            _3290 = _3583 + _3303;
                            _3291 = _3584 + _3304;
                            _3286 = _3579 + _3299;
                            _3287 = _3580 + _3300;
                            _3288 = _3581 + _3301;
                            if (_3306 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3306;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3289;
                        frontier_phi_67_pred_1 = _3290;
                        frontier_phi_67_pred_2 = _3291;
                        frontier_phi_67_pred_3 = _3288;
                        frontier_phi_67_pred_4 = _3287;
                        frontier_phi_67_pred_5 = _3286;
                    }
                    _2954 = frontier_phi_67_pred;
                    _2956 = frontier_phi_67_pred_1;
                    _2958 = frontier_phi_67_pred_2;
                    _2952 = frontier_phi_67_pred_3;
                    _2950 = frontier_phi_67_pred_4;
                    _2948 = frontier_phi_67_pred_5;
                    uint _3093 = _3092 + 1u;
                    if (_3093 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3086 = _2948;
                        _3087 = _2950;
                        _3088 = _2952;
                        _3089 = _2954;
                        _3090 = _2956;
                        _3091 = _2958;
                        _3092 = _3093;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2956;
                frontier_phi_55_56_ladder_1 = _2958;
                frontier_phi_55_56_ladder_2 = _2954;
                frontier_phi_55_56_ladder_3 = _2952;
                frontier_phi_55_56_ladder_4 = _2950;
                frontier_phi_55_56_ladder_5 = _2948;
            }
            else
            {
                frontier_phi_55_56_ladder = _2842;
                frontier_phi_55_56_ladder_1 = _2844;
                frontier_phi_55_56_ladder_2 = _2840;
                frontier_phi_55_56_ladder_3 = _2838;
                frontier_phi_55_56_ladder_4 = _2836;
                frontier_phi_55_56_ladder_5 = _2834;
            }
            _2947 = frontier_phi_55_56_ladder_5;
            _2949 = frontier_phi_55_56_ladder_4;
            _2951 = frontier_phi_55_56_ladder_3;
            _2953 = frontier_phi_55_56_ladder_2;
            _2955 = frontier_phi_55_56_ladder;
            _2957 = frontier_phi_55_56_ladder_1;
        }
        float _2962 = isnan(1.0) ? _1013 : (isnan(_1013) ? 1.0 : min(_1013, 1.0));
        _2746 = (_2962 * _2953) + _2182;
        _2748 = (_2962 * _2955) + _2184;
        _2750 = (_2962 * _2957) + _2186;
        _2752 = ((_2947 * _997) * _2962) + _2527;
        _2754 = ((_2949 * _999) * _2962) + _2529;
        _2756 = ((_2951 * _1000) * _2962) + _2531;
    }
    else
    {
        _2746 = _2182;
        _2748 = _2184;
        _2750 = _2186;
        _2752 = _2527;
        _2754 = _2529;
        _2756 = _2531;
    }
    float _4676 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _4687 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _4698 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    uint _2776 = _274 + 6u;
    float _2784 = _935 / cbSceneParam._m0[86u].x;
    float _2785 = _936 / cbSceneParam._m0[86u].y;
    vec4 _2799 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, (log2((isnan(cbSceneParam._m0[77u].w) ? _869 : (isnan(_869) ? cbSceneParam._m0[77u].w : min(_869, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2801 = _2799.x;
    float _2802 = _2799.y;
    float _2803 = _2799.z;
    float _2804 = _2799.w;
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    if (_869 > cbSceneParam._m0[78u].w)
    {
        float _2859 = isnan(_869) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _869 : min(cbSceneParam._m0[80u].w, _869));
        float _2860 = _2859 / _869;
        float _2871 = _2860 * _920;
        float _2872 = _921 * _2860;
        float _2873 = (-0.0) - _2872;
        float _2875 = _2860 * _922;
        float _2877 = (cbSceneParam._m0[77u].w * _2873) / _2859;
        float _2878 = _2877 + cbSceneParam._m0[79u].w;
        float _2879 = cbSceneParam._m0[79u].w - _2872;
        float _2885 = sqrt(((_2871 * _2871) + (_2872 * _2872)) + (_2875 * _2875));
        float _2888 = (1.0 - (cbSceneParam._m0[77u].w / _2859)) * _2885;
        float _2893 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2895 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3048;
        if (abs((_2873 - _2877) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3048 = ((((_2878 > 0.0) ? exp2(_2893 * _2878) : (2.0 - exp2(_2895 * _2878))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2888;
        }
        else
        {
            float _3008 = 1.0 / cbSceneParam._m0[80u].x;
            float _3009 = isnan(_2879) ? _2878 : (isnan(_2878) ? _2879 : max(_2878, _2879));
            float _3010 = isnan(_2879) ? _2878 : (isnan(_2878) ? _2879 : min(_2878, _2879));
            float _3019 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : min(_3009, 0.0));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            _3048 = ((abs(_2885 / _2873) * cbSceneParam._m0[80u].y) * ((((_3019 - _3020) * 2.0) - ((exp2(_2893 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0)))) - exp2(_2893 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))))) * _3008)) - ((exp2(_2895 * _3019) - exp2(_2895 * _3020)) * _3008))) + (_2888 * cbSceneParam._m0[80u].z);
        }
        vec4 _3050 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, 1.0), 0.0);
        float _3059 = exp2((_3048 * (-1.44269502162933349609375)) * (1.0 - _3050.w));
        float _3060 = log2(_3059);
        float _3076 = log2(_2804);
        _2897 = (exp2(_3076 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].x)) * _3050.x) / cbSceneParam._m0[78u].x)) + _2801;
        _2899 = (exp2(_3076 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].y)) * _3050.y) / cbSceneParam._m0[78u].y)) + _2802;
        _2901 = (exp2(_3076 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].z)) * _3050.z) / cbSceneParam._m0[78u].z)) + _2803;
        _2903 = _3059 * _2804;
    }
    else
    {
        _2897 = _2801;
        _2899 = _2802;
        _2901 = _2803;
        _2903 = _2804;
    }
    float _2915 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2916 = _2915 == 3.0;
    float _2917 = log2(_2903);
    float _2924 = exp2(_2917 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2746 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1013))) + ((_2752 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1820)) * cbPerFrame._m0[3u].x));
    float _2925 = exp2(_2917 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2748 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1013))) + ((_2754 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1820)) * cbPerFrame._m0[3u].x));
    float _2926 = exp2(_2917 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2750 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1013))) + ((_2756 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1820)) * cbPerFrame._m0[3u].x));
    float _2935 = (_2915 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2935 * (_2916 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2897)));
    SV_Target.y = _2935 * (_2916 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2899)));
    SV_Target.z = _2935 * (_2916 ? _2926 : (_2926 + (cbSceneParam._m0[72u].w * _2901)));
    SV_Target.w = cbInstanceData._m0[_2776].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2776].w;
}


