#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1360;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3686 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _463 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _465 = _463.x;
    float _466 = _463.y;
    float _467 = _463.z;
    float _476 = ((_446.z - _467) * _392) + _467;
    float _479 = ((((_446.x - _465) * _392) + _465) * 2.0) + (-1.0);
    float _480 = ((((_446.y - _466) * _392) + _466) * 2.0) + (-1.0);
    float _481 = dot(vec2(_479, _480), vec2(_479, _480));
    float _3697 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))));
    float _489 = _479 + ((((_419.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _490 = _480 + ((((_419.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _493 = fma(_486, _243, fma(_490, _250, _489 * _236));
    float _496 = fma(_486, _244, fma(_490, _251, _489 * _237));
    float _499 = fma(_486, _245, fma(_490, _252, _489 * _238));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    vec4 _519 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _547 = _545.x;
    float _548 = 1.0 - _547;
    float _552 = ((_547 - _548) * cbMtdParam._m0[24u].z) + _548;
    float _554 = (cbMtdParam._m0[19u].x + dot(vec4(_503 * _493, _503 * _496, _503 * _499, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_552 * cbMtdParam._m0[21u].z);
    float _3708 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _557 = (-0.0) - cbMtdParam._m0[24u].x;
    float _559 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _560 = isnan(1.0) ? _559 : (isnan(_559) ? 1.0 : min(_559, 1.0));
    float _567 = _555 - ((_555 * TEXCOORD_8.x) * _560);
    float _568 = _555 - ((_555 * TEXCOORD_8.y) * _560);
    float _569 = _555 - ((_555 * TEXCOORD_8.z) * _560);
    float _576 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _580 = ((isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : min(_576, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _588 = (_580 - (((_552 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _580))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3739 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _589 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _593 = ((_567 * (cbMtdParam._m0[17u].x - _399)) * _589) + _399;
    float _594 = ((_568 * (cbMtdParam._m0[17u].y - _400)) * _589) + _400;
    float _595 = ((_569 * (cbMtdParam._m0[17u].z - _401)) * _589) + _401;
    vec4 _607 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _609 = _607.x;
    float _610 = 1.0 - _609;
    float _637 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_609 - _610) * cbMtdParam._m0[24u].w) + _610) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3750 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _646 = ((((cbMtdParam._m0[10u].x - _593) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _638) + _593;
    float _647 = ((((cbMtdParam._m0[10u].y - _594) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _638) + _594;
    float _648 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _595)) * _638) + _595;
    vec4 _674 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _676 = _674.x;
    float _694 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _676) * _392) + _676;
    float _698 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _694) * cbMtdParam._m0[19u].z) + _694;
    float _701 = _698 - ((_589 * _567) * _698);
    float _703 = _701 - (_701 * _638);
    float _708 = (((_419.z - _476) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _476;
    vec4 _722 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _729 = (_722.x * 2.0) + (-1.0);
    float _730 = (_722.y * 2.0) + (-1.0);
    float _731 = dot(vec2(_729, _730), vec2(_729, _730));
    float _3761 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _740 = (((_722.z - _708) * _567) * _589) + _708;
    float _743 = ((cbMtdParam._m0[23u].y - _740) * _638) + _740;
    vec4 _762 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _768 = (_762.x * 2.0) + (-1.0);
    float _769 = (_762.y * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _3772 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _790 = (((cbMtdParam._m0[21u].x * _489) + ((_729 - _489) * _567)) * _589) + _489;
    float _791 = (((cbMtdParam._m0[21u].x * _490) + ((_730 - _490) * _568)) * _589) + _490;
    float _792 = (((sqrt(1.0 - (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) - _486) * _569) * _589) + _486;
    float _803 = (((_768 - _790) + (_790 * cbMtdParam._m0[22u].z)) * _638) + _790;
    float _804 = (((_769 - _791) + (_791 * cbMtdParam._m0[22u].z)) * _638) + _791;
    float _805 = ((sqrt(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) - _792) * _638) + _792;
    float _807 = cbMtdParam._m0[22u].x + _519.w;
    float _810 = fma(_805, _243, fma(_804, _250, _803 * _236));
    float _813 = fma(_805, _244, fma(_804, _251, _803 * _237));
    float _816 = fma(_805, _245, fma(_804, _252, _803 * _238));
    float _820 = inversesqrt(dot(vec3(_810, _813, _816), vec3(_810, _813, _816)));
    float _821 = _820 * _810;
    float _822 = _820 * _813;
    float _823 = _820 * _816;
    float _3783 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _824 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _3805 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _3816 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3827 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3838 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _829 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _843 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _893 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _883);
    float _894 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _883);
    float _895 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _883);
    float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
    float _900 = _893 * _899;
    float _901 = _894 * _899;
    float _902 = _895 * _899;
    float _908 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _909 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _927 = fma(_823, cbSceneParam._m0[5u].z, fma(_822, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _821));
    float _930 = fma(_823, cbSceneParam._m0[6u].z, fma(_822, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _821));
    float _933 = fma(_823, cbSceneParam._m0[7u].z, fma(_822, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _821));
    uint _947 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _953 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_947].x;
    float _954 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_947].y;
    float _955 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_947].z;
    float _3849 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _3871 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _959 = 1.0 - _829;
    float _960 = _956 * _959;
    float _961 = _957 * _959;
    float _962 = _958 * _959;
    float _967 = (_956 + (-0.039999999105930328369140625)) * _829;
    float _968 = (_957 + (-0.039999999105930328369140625)) * _829;
    float _969 = (_958 + (-0.039999999105930328369140625)) * _829;
    float _970 = _967 + 0.039999999105930328369140625;
    float _972 = _968 + 0.039999999105930328369140625;
    float _973 = _969 + 0.039999999105930328369140625;
    vec4 _982 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _908, cbSceneParam._m0[86u].y * _909));
    float _986 = ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * TEXCOORD_5.w) * _982.x;
    float _987 = dot(vec3(_821, _822, _823), vec3(_900, _901, _902));
    float _990 = _987 * 2.0;
    float _994 = (_990 * _821) - _900;
    float _995 = (_990 * _822) - _901;
    float _996 = (_990 * _823) - _902;
    float _1000 = abs(dot(vec3(_900, _901, _902), vec3(_821, _822, _823)));
    float _3882 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1002 = sqrt(_824);
    float _1015 = exp2((_1002 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1002 * 3.0));
    float _1021 = (1.0 - _1015) * ((_1002 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1022 = _1015 * _1002;
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1359;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1084 = fma(_1058, cbModelParam._m0[26u].z, fma(_1054, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050));
        float _1088 = fma(_1058, cbModelParam._m0[27u].z, fma(_1054, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050));
        float _1092 = fma(_1058, cbModelParam._m0[28u].z, fma(_1054, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050));
        float _1117 = _1050 + _821;
        float _1118 = _1054 + _822;
        float _1119 = _1058 + _823;
        float _1129 = fma(_1119, cbModelParam._m0[26u].z, fma(_1118, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1117)) - _1084;
        float _1130 = fma(_1119, cbModelParam._m0[27u].z, fma(_1118, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1117)) - _1088;
        float _1131 = fma(_1119, cbModelParam._m0[28u].z, fma(_1118, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1117)) - _1092;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1084 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1088 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[34u].z) + ((((((_1092 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1187 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1153.x + (-0.5));
        float _1189 = _1187 * (_1153.y + (-0.5));
        float _1190 = _1187 * (_1153.z + (-0.5));
        float _1197 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1160.x + (-0.5));
        float _1199 = _1197 * (_1160.y + (-0.5));
        float _1200 = _1197 * (_1160.z + (-0.5));
        float _1207 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1167.x + (-0.5));
        float _1209 = _1207 * (_1167.y + (-0.5));
        float _1210 = _1207 * (_1167.z + (-0.5));
        float _1217 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1174.x + (-0.5));
        float _1219 = _1217 * (_1174.y + (-0.5));
        float _1220 = _1217 * (_1174.z + (-0.5));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = _1188 * 0.5;
        float _1225 = _1198 * 0.5;
        float _1226 = _1208 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1241 = (dot(vec3(_821, _822, _823), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1251 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3930 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1253 + 1.0))) + _1258) * _1221;
        float _1268 = _1189 * 0.5;
        float _1269 = _1199 * 0.5;
        float _1270 = _1209 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_821, _822, _823), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3963 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1295 + 1.0))) + _1300) * _1222;
        float _1310 = _1190 * 0.5;
        float _1311 = _1200 * 0.5;
        float _1312 = _1210 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_821, _822, _823), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3996 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1337 + 1.0))) + _1342) * _1223;
        _1359 = _1190;
        _1361 = _1189;
        _1362 = _1188;
        _1363 = _1200;
        _1364 = _1199;
        _1365 = _1198;
        _1366 = _1210;
        _1367 = _1209;
        _1368 = _1208;
        _1369 = _1223;
        _1370 = _1222;
        _1371 = _1221;
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1360;
        _1361 = _1360;
        _1362 = _1360;
        _1363 = _1360;
        _1364 = _1360;
        _1365 = _1360;
        _1366 = _1360;
        _1367 = _1360;
        _1368 = _1360;
        _1369 = _1360;
        _1370 = _1360;
        _1371 = _1360;
        _1372 = 0.0;
        _1373 = 0.0;
        _1374 = 0.0;
    }
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1399 = fma(_1058, cbModelParam._m0[30u].z, fma(_1054, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1050));
        float _1403 = fma(_1058, cbModelParam._m0[31u].z, fma(_1054, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1050));
        float _1407 = fma(_1058, cbModelParam._m0[32u].z, fma(_1054, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1050));
        float _1430 = _1050 + _821;
        float _1431 = _1054 + _822;
        float _1432 = _1058 + _823;
        float _1442 = fma(_1432, cbModelParam._m0[30u].z, fma(_1431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1430)) - _1399;
        float _1443 = fma(_1432, cbModelParam._m0[31u].z, fma(_1431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1430)) - _1403;
        float _1444 = fma(_1432, cbModelParam._m0[32u].z, fma(_1431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1430)) - _1407;
        float _1448 = inversesqrt(dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444)));
        float _1461 = ((_1448 * _1442) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1399 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1448 * _1443) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1403 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1448 * _1444) / cbModelParam._m0[35u].z) + ((((((_1407 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        float _1498 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1465.x + (-0.5));
        float _1500 = _1498 * (_1465.y + (-0.5));
        float _1501 = _1498 * (_1465.z + (-0.5));
        float _1508 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1472.x + (-0.5));
        float _1510 = _1508 * (_1472.y + (-0.5));
        float _1511 = _1508 * (_1472.z + (-0.5));
        float _1518 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1479.x + (-0.5));
        float _1520 = _1518 * (_1479.y + (-0.5));
        float _1521 = _1518 * (_1479.z + (-0.5));
        float _1528 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1486.x + (-0.5));
        float _1530 = _1528 * (_1486.y + (-0.5));
        float _1531 = _1528 * (_1486.z + (-0.5));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = _1499 * 0.5;
        float _1536 = _1509 * 0.5;
        float _1537 = _1519 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_821, _822, _823), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4059 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1562 + 1.0))) + _1567) * _1532;
        float _1577 = _1500 * 0.5;
        float _1578 = _1510 * 0.5;
        float _1579 = _1520 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_821, _822, _823), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4092 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1604 + 1.0))) + _1609) * _1533;
        float _1619 = _1501 * 0.5;
        float _1620 = _1511 * 0.5;
        float _1621 = _1521 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_821, _822, _823), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4125 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1646 + 1.0))) + _1651) * _1534;
        _1668 = _1501;
        _1669 = _1500;
        _1670 = _1499;
        _1671 = _1511;
        _1672 = _1510;
        _1673 = _1509;
        _1674 = _1521;
        _1675 = _1520;
        _1676 = _1519;
        _1677 = _1534;
        _1678 = _1533;
        _1679 = _1532;
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
    }
    else
    {
        _1668 = _1360;
        _1669 = _1360;
        _1670 = _1360;
        _1671 = _1360;
        _1672 = _1360;
        _1673 = _1360;
        _1674 = _1360;
        _1675 = _1360;
        _1676 = _1360;
        _1677 = _1360;
        _1678 = _1360;
        _1679 = _1360;
        _1680 = 0.0;
        _1681 = 0.0;
        _1682 = 0.0;
    }
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1372)) + _1372;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1373)) + _1373;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1374)) + _1374;
    float _1715 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1692));
    float _1736 = _994 * 0.5;
    float _1737 = _995 * 0.5;
    float _1738 = _996 * 0.5;
    float _1739 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1742 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1745 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1779;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1752 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1359, _1363, _1366, _1369));
        float _1756 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1760 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1362, _1365, _1368, _1371));
        float _1767 = dot(vec4(cbModelParam._m0[39u]), vec4(_1736, _1737, _1738, 1.0));
        _1779 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1779 = 1.0;
    }
    float _1790;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1781 = dot(vec4(cbModelParam._m0[40u]), vec4(_1736, _1737, _1738, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1794 = (_1790 * cbModelParam._m0[1u].x) + (_1779 * (1.0 - cbModelParam._m0[1u].x));
    float _1804 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _824);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1804 : min(cbModelParam._m0[25u].z, _1804));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1853 = fma(_1058, cbModelParam._m0[13u].z, fma(_1054, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1050)) + cbModelParam._m0[13u].w;
        float _1857 = fma(_1058, cbModelParam._m0[14u].z, fma(_1054, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1050)) + cbModelParam._m0[14u].w;
        float _1861 = fma(_1058, cbModelParam._m0[15u].z, fma(_1054, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1050)) + cbModelParam._m0[15u].w;
        float _1864 = fma(_996, cbModelParam._m0[13u].z, fma(_995, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _994));
        float _1867 = fma(_996, cbModelParam._m0[14u].z, fma(_995, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _994));
        float _1870 = fma(_996, cbModelParam._m0[15u].z, fma(_995, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _994));
        float _1898;
        if (_1864 > 0.0)
        {
            _1898 = abs((1.0 - _1853) / _1864);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1853 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1898 = frontier_phi_14_12_ladder;
        }
        float _2101;
        if (_1867 > 0.0)
        {
            _2101 = abs((1.0 - _1857) / _1867);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1857 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2101 = frontier_phi_23_19_ladder;
        }
        float _2355;
        if (_1870 > 0.0)
        {
            _2355 = abs((1.0 - _1861) / _1870);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1861 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2355 = frontier_phi_35_30_ladder;
        }
        float _2357 = isnan(_2101) ? _1898 : (isnan(_1898) ? _2101 : min(_1898, _2101));
        float _2358 = isnan(_2355) ? _2357 : (isnan(_2357) ? _2355 : min(_2357, _2355));
        float _2362 = (_2358 * _1864) + _1853;
        float _2363 = (_2358 * _1867) + _1857;
        float _2364 = (_2358 * _1870) + _1861;
        float _2365 = _2358 * 9.9999997473787516355514526367188e-05;
        float _2367 = (-1.0) - _2365;
        float _2369 = _2365 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2364 > _2369) || ((_2364 < _2367) || ((_2363 > _2369) || ((_2363 < _2367) || ((_2362 < _2367) || (_2362 > _2369))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2492 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2364, cbModelParam._m0[9u].z, fma(_2363, cbModelParam._m0[9u].y, _2362 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2364, cbModelParam._m0[10u].z, fma(_2363, cbModelParam._m0[10u].y, _2362 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2364, cbModelParam._m0[11u].z, fma(_2363, cbModelParam._m0[11u].y, _2362 * cbModelParam._m0[11u].x))), _1805);
            frontier_phi_13_35_ladder = _2492.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2492.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2492.x * cbModelParam._m0[1u].y;
        }
        _1886 = frontier_phi_13_35_ladder_2;
        _1888 = frontier_phi_13_35_ladder_1;
        _1890 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_994, _995, _996), _1805);
        _1886 = _1874.x * cbModelParam._m0[1u].y;
        _1888 = _1874.y * cbModelParam._m0[1u].y;
        _1890 = _1874.z * cbModelParam._m0[1u].y;
    }
    float _1894 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _824);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1894 : min(cbModelParam._m0[25u].w, _1894));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1949 = fma(_1058, cbModelParam._m0[21u].z, fma(_1054, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1050)) + cbModelParam._m0[21u].w;
        float _1953 = fma(_1058, cbModelParam._m0[22u].z, fma(_1054, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1050)) + cbModelParam._m0[22u].w;
        float _1957 = fma(_1058, cbModelParam._m0[23u].z, fma(_1054, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1050)) + cbModelParam._m0[23u].w;
        float _1960 = fma(_996, cbModelParam._m0[21u].z, fma(_995, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _994));
        float _1963 = fma(_996, cbModelParam._m0[22u].z, fma(_995, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _994));
        float _1966 = fma(_996, cbModelParam._m0[23u].z, fma(_995, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _994));
        float _2106;
        if (_1960 > 0.0)
        {
            _2106 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2106 = frontier_phi_25_21_ladder;
        }
        float _2382;
        if (_1963 > 0.0)
        {
            _2382 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2382 = frontier_phi_37_32_ladder;
        }
        float _2595;
        if (_1966 > 0.0)
        {
            _2595 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2595 = frontier_phi_46_43_ladder;
        }
        float _2597 = isnan(_2382) ? _2106 : (isnan(_2106) ? _2382 : min(_2106, _2382));
        float _2598 = isnan(_2595) ? _2597 : (isnan(_2597) ? _2595 : min(_2597, _2595));
        float _2602 = (_2598 * _1960) + _1949;
        float _2603 = (_2598 * _1963) + _1953;
        float _2604 = (_2598 * _1966) + _1957;
        float _2605 = _2598 * 9.9999997473787516355514526367188e-05;
        float _2606 = (-1.0) - _2605;
        float _2608 = _2605 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2604 > _2608) || ((_2604 < _2606) || ((_2603 > _2608) || ((_2603 < _2606) || ((_2602 < _2606) || (_2602 > _2608))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2803 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2604, cbModelParam._m0[17u].z, fma(_2603, cbModelParam._m0[17u].y, _2602 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2604, cbModelParam._m0[18u].z, fma(_2603, cbModelParam._m0[18u].y, _2602 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2604, cbModelParam._m0[19u].z, fma(_2603, cbModelParam._m0[19u].y, _2602 * cbModelParam._m0[19u].x))), _1895);
            frontier_phi_22_46_ladder = _2803.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2803.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2803.x * cbModelParam._m0[1u].z;
        }
        _1985 = frontier_phi_22_46_ladder_2;
        _1987 = frontier_phi_22_46_ladder_1;
        _1989 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_994, _995, _996), _1895);
        _1985 = _1969.x * cbModelParam._m0[1u].z;
        _1987 = _1969.y * cbModelParam._m0[1u].z;
        _1989 = _1969.z * cbModelParam._m0[1u].z;
    }
    float _2002 = (((_1021 * _970) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_1985 - _1886)) + _1886);
    float _2004 = (((_1021 * _972) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_1987 - _1888)) + _1888);
    float _2006 = (((_1021 * _973) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_1989 - _1890)) + _1890);
    float _2009 = fma(_2006, cbSceneParam._m0[89u].z, fma(_2004, cbSceneParam._m0[89u].y, _2002 * cbSceneParam._m0[89u].x));
    float _2012 = fma(_2006, cbSceneParam._m0[90u].z, fma(_2004, cbSceneParam._m0[90u].y, _2002 * cbSceneParam._m0[90u].x));
    float _2015 = fma(_2006, cbSceneParam._m0[91u].z, fma(_2004, cbSceneParam._m0[91u].y, _2002 * cbSceneParam._m0[91u].x));
    uvec4 _2025 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2027 = _2025.x * 14u;
    uint _2028 = _2027 + 13u;
    float _2035 = _986 + (-1.0);
    float _2040 = (cbLight._m0[_2028].x * _2035) + 1.0;
    float _2041 = (cbLight._m0[_2028].y * _2035) + 1.0;
    float _2042 = (cbLight._m0[_2028].z * _2035) + 1.0;
    float _2043 = (cbLight._m0[_2028].w * _2035) + 1.0;
    uint _2044 = _2027 + 5u;
    float _2050 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
    uint _2054 = _2027 + 4u;
    float _2060 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
    uint _2064 = _2027 | 1u;
    float _2075 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_821, _822, _823));
    float _2078 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_821, _822, _823));
    float _4261 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _4272 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2083 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.3183098733425140380859375;
    float _2085 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * 0.3183098733425140380859375;
    float _2092 = ((cbLight._m0[_2044].x * _2050) * _2085) + ((cbLight._m0[_2054].x * _2060) * _2083);
    float _2093 = ((_2050 * cbLight._m0[_2044].y) * _2085) + ((_2060 * cbLight._m0[_2054].y) * _2083);
    float _2094 = ((_2050 * cbLight._m0[_2044].z) * _2085) + ((_2060 * cbLight._m0[_2054].z) * _2083);
    uvec4 _2098 = floatBitsToUint(cbLight._m0[_2027 + 12u]);
    bool _2100 = _2098.x == 0u;
    float _2111;
    float _2113;
    float _2115;
    if (_2100)
    {
        _2111 = _2092;
        _2113 = _2093;
        _2115 = _2094;
    }
    else
    {
        uint _2119 = _2027 + 6u;
        float _2135 = (dot(vec3(cbLight._m0[_2027 + 2u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2136 = _2135 * _2135;
        float _4283 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2137 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2138 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2111 = (((cbLight._m0[_2119].x * 0.3183098733425140380859375) * _2137) * _2138) + _2092;
        _2113 = (((cbLight._m0[_2119].y * 0.3183098733425140380859375) * _2137) * _2138) + _2093;
        _2115 = (((cbLight._m0[_2119].z * 0.3183098733425140380859375) * _2137) * _2138) + _2094;
    }
    bool _2118 = _2098.y == 0u;
    float _2156;
    float _2158;
    float _2160;
    if (_2118)
    {
        _2156 = _2111;
        _2158 = _2113;
        _2160 = _2115;
    }
    else
    {
        uint _2326 = _2027 + 7u;
        float _2342 = (dot(vec3(cbLight._m0[_2027 + 3u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2343 = _2342 * _2342;
        float _4299 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2344 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2345 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2156 = (((cbLight._m0[_2326].x * 0.3183098733425140380859375) * _2344) * _2345) + _2111;
        _2158 = (((cbLight._m0[_2326].y * 0.3183098733425140380859375) * _2344) * _2345) + _2113;
        _2160 = (((cbLight._m0[_2326].z * 0.3183098733425140380859375) * _2344) * _2345) + _2115;
    }
    uint _2163 = _2027 + 8u;
    float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _824) * 0.949999988079071044921875);
    float _2177 = _2176 * _2176;
    float _2178 = cbLight._m0[_2027].x + _900;
    float _2179 = cbLight._m0[_2027].y + _901;
    float _2180 = cbLight._m0[_2027].z + _902;
    float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
    float _2185 = _2184 * _2178;
    float _2186 = _2184 * _2179;
    float _2187 = _2184 * _2180;
    float _2188 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2027].xyz));
    float _4315 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _4326 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _2192 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2193 = dot(vec3(_821, _822, _823), vec3(_2185, _2186, _2187));
    float _4337 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2185, _2186, _2187));
    float _4348 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2177 * _2177;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2213 = exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0);
    float _2214 = 0.959999978542327880859375 - _967;
    float _2216 = 0.959999978542327880859375 - _968;
    float _2217 = 0.959999978542327880859375 - _969;
    float _2224 = 1.0 - _2177;
    float _2235 = (0.5 / (((_2192 * ((_2191 * _2224) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2224) + _2177) * _2191))) * _2191;
    float _4359 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2237 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    uint _2248 = _2027 + 9u;
    float _2259 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _824) * 0.949999988079071044921875);
    float _2260 = _2259 * _2259;
    float _2261 = cbLight._m0[_2064].x + _900;
    float _2262 = cbLight._m0[_2064].y + _901;
    float _2263 = cbLight._m0[_2064].z + _902;
    float _2267 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
    float _2268 = _2267 * _2261;
    float _2269 = _2267 * _2262;
    float _2270 = _2267 * _2263;
    float _2271 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2064].xyz));
    float _4370 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2275 = dot(vec3(_821, _822, _823), vec3(_2268, _2269, _2270));
    float _4381 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2279 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2268, _2269, _2270));
    float _4392 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2283 = _2260 * _2260;
    float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
    float _2294 = exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0);
    float _2301 = 1.0 - _2260;
    float _2311 = (0.5 / (((_2192 * ((_2274 * _2301) + _2260)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2301) + _2260) * _2274))) * _2274;
    float _4403 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2313 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
    float _2323 = (((((_2294 * _2214) + _970) * cbLight._m0[_2248].x) * _2313) * _2050) + (((((_2213 * _2214) + _970) * cbLight._m0[_2163].x) * _2237) * _2060);
    float _2324 = (((((_2294 * _2216) + _972) * cbLight._m0[_2248].y) * _2313) * _2050) + (((((_2213 * _2216) + _972) * cbLight._m0[_2163].y) * _2237) * _2060);
    float _2325 = (((((_2294 * _2217) + _973) * cbLight._m0[_2248].z) * _2313) * _2050) + (((((_2213 * _2217) + _973) * cbLight._m0[_2163].z) * _2237) * _2060);
    float _2387;
    float _2389;
    float _2391;
    if (_2100)
    {
        _2387 = _2323;
        _2389 = _2324;
        _2391 = _2325;
    }
    else
    {
        uint _2393 = _2027 + 2u;
        uint _2397 = _2027 + 10u;
        float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _824) * 0.949999988079071044921875);
        float _2412 = _2411 * _2411;
        float _2413 = cbLight._m0[_2393].x + _900;
        float _2414 = cbLight._m0[_2393].y + _901;
        float _2415 = cbLight._m0[_2393].z + _902;
        float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
        float _2420 = _2419 * _2413;
        float _2421 = _2419 * _2414;
        float _2422 = _2419 * _2415;
        float _2423 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2393].xyz));
        float _4414 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2427 = dot(vec3(_821, _822, _823), vec3(_2420, _2421, _2422));
        float _4425 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2431 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2420, _2421, _2422));
        float _4436 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2435 = _2412 * _2412;
        float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
        float _2446 = exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0);
        float _2453 = 1.0 - _2412;
        float _2463 = (0.5 / (((_2192 * ((_2426 * _2453) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2453) + _2412) * _2426))) * _2426;
        float _4447 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2465 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
        float _2466 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2387 = (((((_2446 * _2214) + _970) * cbLight._m0[_2397].x) * _2465) * _2466) + _2323;
        _2389 = (((((_2446 * _2216) + _972) * cbLight._m0[_2397].y) * _2465) * _2466) + _2324;
        _2391 = (((((_2446 * _2217) + _973) * cbLight._m0[_2397].z) * _2465) * _2466) + _2325;
    }
    float _2501;
    float _2503;
    float _2505;
    if (_2118)
    {
        _2501 = _2387;
        _2503 = _2389;
        _2505 = _2391;
    }
    else
    {
        uint _2512 = _2027 + 3u;
        uint _2516 = _2027 + 11u;
        float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2512].w)) * _824) * 0.949999988079071044921875);
        float _2531 = _2530 * _2530;
        float _2532 = cbLight._m0[_2512].x + _900;
        float _2533 = cbLight._m0[_2512].y + _901;
        float _2534 = cbLight._m0[_2512].z + _902;
        float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
        float _2539 = _2538 * _2532;
        float _2540 = _2538 * _2533;
        float _2541 = _2538 * _2534;
        float _2542 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2512].xyz));
        float _4463 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2546 = dot(vec3(_821, _822, _823), vec3(_2539, _2540, _2541));
        float _4474 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2550 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_2539, _2540, _2541));
        float _4485 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2554 = _2531 * _2531;
        float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
        float _2565 = exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0);
        float _2572 = 1.0 - _2531;
        float _2582 = (0.5 / (((_2192 * ((_2545 * _2572) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2572) + _2531) * _2545))) * _2545;
        float _4496 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2584 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
        float _2585 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2501 = (((((_2565 * _2214) + _970) * cbLight._m0[_2516].x) * _2584) * _2585) + _2387;
        _2503 = (((((_2565 * _2216) + _972) * cbLight._m0[_2516].y) * _2584) * _2585) + _2389;
        _2505 = (((((_2565 * _2217) + _973) * cbLight._m0[_2516].z) * _2584) * _2585) + _2391;
    }
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    if (_2025.y == 0u)
    {
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2660;
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2660;
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2660;
        uvec4 _2675 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2676 = _2675.x;
        uint _2687 = uint((float(_2675.y) * floor(float(uint(cbSceneParam._m0[85u].y * _909) / _2676))) + floor(float(uint(cbSceneParam._m0[85u].x * _908) / _2676)));
        float _2697 = (log2(_2663 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2698 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        uint _2701 = uint(isnan(14.0) ? _2698 : (isnan(_2698) ? 14.0 : min(_2698, 14.0)));
        uvec4 _2706 = texelFetch(g_lightClusterGridBuffer, int(((_2701 << 2u) + (_2687 << 6u)) >> 2u));
        uint _2707 = _2706.x;
        uint _2708 = _2675.z;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        if (((((1u << ((_2708 >> 4u) & 15u)) + 4294967295u) & _2707) == 0u) || ((_2708 & 240u) == 0u))
        {
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
        }
        else
        {
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            uint _2958 = 0u;
            uint _2967;
            bool _2968;
            for (;;)
            {
                _2967 = texelFetch(g_lightClassification, int((((_2701 << 5u) + (_2687 << 9u)) + (_2958 << 2u)) >> 2u)).x;
                _2968 = _2967 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2968)
                {
                    frontier_phi_61_pred = _2952;
                    frontier_phi_61_pred_1 = _2957;
                    frontier_phi_61_pred_2 = _2956;
                    frontier_phi_61_pred_3 = _2955;
                    frontier_phi_61_pred_4 = _2954;
                    frontier_phi_61_pred_5 = _2953;
                }
                else
                {
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    uint _3082;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2967;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    for (;;)
                    {
                        uint _3086 = uint(findLSB(_3082)) + (_2958 << 5u);
                        uint _3083 = (_3082 + 4294967295u) & _3082;
                        uint _3088 = _3086 * 48u;
                        vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3088)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 3u)).x));
                        uint _3108 = (_3086 * 48u) + 4u;
                        vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 3u)).x));
                        uint _3127 = (_3086 * 48u) + 8u;
                        vec3 _3138 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x));
                        float _3142 = _3102.x - _2661;
                        float _3143 = _3102.y - _2662;
                        float _3144 = _3102.z - _2663;
                        float _3145 = dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144));
                        float _3148 = inversesqrt(_3145);
                        float _3149 = _3148 * _3142;
                        float _3150 = _3148 * _3143;
                        float _3151 = _3148 * _3144;
                        float _3152 = dot(vec3(_927, _930, _933), vec3(_3149, _3150, _3151));
                        float _3157 = 1.0 - (_3145 * _3102.w);
                        float _4522 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3158 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3159 = sqrt(_3145) * _3121.w;
                        float _3162 = 1.39999997615814208984375 / (_3159 + 1.39999997615814208984375);
                        float _3163 = _3162 * _3162;
                        float _3166 = ((1.0 - _3163) * _3152) + _3163;
                        float _3169 = _3159 * _3159;
                        float _3173 = ((isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0))) * _3158) / ((_3169 * 0.699999988079071044921875) + 1.0);
                        float _3177 = (-0.0) - _2661;
                        float _3178 = (-0.0) - _2662;
                        float _3179 = (-0.0) - _2663;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3194 = exp2(log2(1.0 / ((_3169 * 3.5) + 5.0)) * 0.25);
                        float _3195 = 1.0 - _1002;
                        float _3202 = sqrt(1.0 - ((1.0 - (_3195 * _3195)) * (1.0 - (_3194 * _3194))));
                        float _3203 = _3202 * _3202;
                        float _3204 = _3203 * _3203;
                        float _3205 = _3184 + _3149;
                        float _3206 = _3185 + _3150;
                        float _3207 = _3186 + _3151;
                        float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                        float _3215 = dot(vec3(_927, _930, _933), vec3(_3184, _3185, _3186));
                        float _4538 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3218 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3219 = dot(vec3(_927, _930, _933), vec3(_3211 * _3205, _3211 * _3206, _3211 * _3207));
                        float _4549 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3222 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3226 = ((_3222 * _3222) * (_3204 + (-1.0))) + 1.0;
                        float _3227 = _3162 * _3203;
                        float _3228 = _3227 * _3227;
                        float _3231 = ((1.0 - _3228) * _3152) + _3228;
                        float _4560 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3232 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3233 = 1.0 - _3203;
                        float _3243 = (0.5 / (((_3232 * ((_3218 * _3233) + _3203)) + 9.9999999392252902907785028219223e-09) + (((_3232 * _3233) + _3203) * _3218))) * _3232;
                        float _4571 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3254 = (((_3204 * 3.1415927410125732421875) * (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) / ((_3226 * _3226) * ((_3169 * 2.1991131305694580078125) + 3.141590118408203125))) * _3158;
                        _3011 = (_3173 * _3121.x) + _3079;
                        _3012 = (_3173 * _3121.y) + _3080;
                        _3013 = (_3173 * _3121.z) + _3081;
                        _3008 = (_3254 * _3138.x) + _3076;
                        _3009 = (_3254 * _3138.y) + _3077;
                        _3010 = (_3254 * _3138.z) + _3078;
                        if (_3083 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3083;
                        }
                    }
                    frontier_phi_61_pred = _3008;
                    frontier_phi_61_pred_1 = _3013;
                    frontier_phi_61_pred_2 = _3012;
                    frontier_phi_61_pred_3 = _3011;
                    frontier_phi_61_pred_4 = _3010;
                    frontier_phi_61_pred_5 = _3009;
                }
                _2809 = frontier_phi_61_pred;
                _2819 = frontier_phi_61_pred_1;
                _2817 = frontier_phi_61_pred_2;
                _2815 = frontier_phi_61_pred_3;
                _2813 = frontier_phi_61_pred_4;
                _2811 = frontier_phi_61_pred_5;
                uint _2959 = _2958 + 1u;
                if (_2959 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2952 = _2809;
                    _2953 = _2811;
                    _2954 = _2813;
                    _2955 = _2815;
                    _2956 = _2817;
                    _2957 = _2819;
                    _2958 = _2959;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
        }
        uvec4 _2822 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2823 = _2822.z;
        uint _2825 = (_2823 >> 8u) & 15u;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        if (((4294967295u << _2825) & _2707) == 0u)
        {
            _2920 = _2808;
            _2922 = _2810;
            _2924 = _2812;
            _2926 = _2814;
            _2928 = _2816;
            _2930 = _2818;
        }
        else
        {
            float _2945 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
            float _2946 = _2945 * _2661;
            float _2947 = _2945 * _2662;
            float _2948 = _2945 * _2663;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2825 < ((_2823 >> 12u) & 15u))
            {
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _3059 = _2808;
                float _3060 = _2810;
                float _3061 = _2812;
                float _3062 = _2814;
                float _3063 = _2816;
                float _3064 = _2818;
                uint _3065 = _2825;
                uint _3074;
                bool _3075;
                for (;;)
                {
                    _3074 = texelFetch(g_lightClassification, int((((_2701 << 5u) + (_2687 << 9u)) + (_3065 << 2u)) >> 2u)).x;
                    _3075 = _3074 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3075)
                    {
                        frontier_phi_67_pred = _3062;
                        frontier_phi_67_pred_1 = _3063;
                        frontier_phi_67_pred_2 = _3064;
                        frontier_phi_67_pred_3 = _3061;
                        frontier_phi_67_pred_4 = _3060;
                        frontier_phi_67_pred_5 = _3059;
                    }
                    else
                    {
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3272 = _3059;
                        float _3273 = _3060;
                        float _3274 = _3061;
                        float _3275 = _3062;
                        float _3276 = _3063;
                        float _3277 = _3064;
                        uint _3278 = _3074;
                        uint _3279;
                        vec4 _3304;
                        float _3305;
                        vec4 _3320;
                        vec3 _3332;
                        vec4 _3347;
                        vec4 _3362;
                        float _3408;
                        bool _3409;
                        for (;;)
                        {
                            uint _3289 = ((_3065 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3278));
                            _3279 = (_3278 + 4294967295u) & _3278;
                            uint _3291 = _3289 * 40u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            _3305 = _3304.w;
                            uint _3307 = (_3289 * 40u) + 4u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3322 = (_3289 * 40u) + 8u;
                            _3332 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x));
                            uint _3334 = (_3289 * 40u) + 16u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3349 = (_3289 * 40u) + 20u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3364 = (_3289 * 40u) + 24u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3383 = (_3289 * 40u) + 28u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3408 = fma(_2663, _3396.z, fma(_2662, _3396.y, _3396.x * _2661)) + _3396.w;
                            _3409 = !((fma(_2663, _3377.z, fma(_2662, _3377.y, _3377.x * _2661)) + _3377.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3409)
                            {
                                float _3436 = _3304.x - _2661;
                                float _3437 = _3304.y - _2662;
                                float _3438 = _3304.z - _2663;
                                float _3439 = dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438));
                                float _3442 = inversesqrt(_3439);
                                float _3443 = _3442 * _3436;
                                float _3444 = _3442 * _3437;
                                float _3445 = _3442 * _3438;
                                float _3449 = 1.0 - (_3439 / (_3305 * _3305));
                                float _4582 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3454 = sqrt(_3439) * _3320.w;
                                float _3456 = 1.39999997615814208984375 / (_3454 + 1.39999997615814208984375);
                                float _3457 = _3456 * _3456;
                                float _3460 = ((1.0 - _3457) * dot(vec3(_3443, _3444, _3445), vec3(_927, _930, _933))) + _3457;
                                float _3463 = _3454 * _3454;
                                float _3467 = (fma(_2663, _3347.z, fma(_2662, _3347.y, _3347.x * _2661)) + _3347.w) / _3408;
                                float _3468 = (fma(_2663, _3362.z, fma(_2662, _3362.y, _3362.x * _2661)) + _3362.w) / _3408;
                                float _3472 = 1.0 - dot(vec2(_3467, _3468), vec2(_3467, _3468));
                                float _4598 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3474 = _3473 * (((isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))) * _3450) / ((_3463 * 0.699999988079071044921875) + 1.0));
                                float _3486 = exp2(log2(1.0 / ((_3463 * 3.5) + 5.0)) * 0.25);
                                float _3487 = 1.0 - _1002;
                                float _3494 = sqrt(1.0 - ((1.0 - (_3487 * _3487)) * (1.0 - (_3486 * _3486))));
                                float _3495 = _3494 * _3494;
                                float _3496 = _3495 * _3495;
                                float _3497 = _3443 - _2946;
                                float _3498 = _3444 - _2947;
                                float _3499 = _3445 - _2948;
                                float _3503 = inversesqrt(dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499)));
                                float _3507 = dot(vec3(_927, _930, _933), vec3((-0.0) - _2946, (-0.0) - _2947, (-0.0) - _2948));
                                float _4609 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3510 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3511 = dot(vec3(_927, _930, _933), vec3(_3503 * _3497, _3503 * _3498, _3503 * _3499));
                                float _4620 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3518 = ((_3514 * _3514) * (_3496 + (-1.0))) + 1.0;
                                float _3519 = _3456 * _3495;
                                float _3520 = _3519 * _3519;
                                float _3526 = ((1.0 - _3520) * dot(vec3(_927, _930, _933), vec3(_3443, _3444, _3445))) + _3520;
                                float _4631 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3528 = 1.0 - _3495;
                                float _3538 = (0.5 / (((_3527 * ((_3510 * _3528) + _3495)) + 9.9999999392252902907785028219223e-09) + (((_3527 * _3528) + _3495) * _3510))) * _3527;
                                float _4642 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3548 = (_3473 * _3450) * (((_3496 * 3.1415927410125732421875) * (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0)))) / ((_3518 * _3518) * ((_3463 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3548 * _3332.x;
                                frontier_phi_73_pred_1 = _3548 * _3332.y;
                                frontier_phi_73_pred_2 = _3474 * _3320.z;
                                frontier_phi_73_pred_3 = _3474 * _3320.y;
                                frontier_phi_73_pred_4 = _3474 * _3320.x;
                                frontier_phi_73_pred_5 = _3548 * _3332.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3552 = frontier_phi_73_pred;
                            _3553 = frontier_phi_73_pred_1;
                            _3557 = frontier_phi_73_pred_2;
                            _3556 = frontier_phi_73_pred_3;
                            _3555 = frontier_phi_73_pred_4;
                            _3554 = frontier_phi_73_pred_5;
                            _3262 = _3555 + _3275;
                            _3263 = _3556 + _3276;
                            _3264 = _3557 + _3277;
                            _3259 = _3552 + _3272;
                            _3260 = _3553 + _3273;
                            _3261 = _3554 + _3274;
                            if (_3279 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3279;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3262;
                        frontier_phi_67_pred_1 = _3263;
                        frontier_phi_67_pred_2 = _3264;
                        frontier_phi_67_pred_3 = _3261;
                        frontier_phi_67_pred_4 = _3260;
                        frontier_phi_67_pred_5 = _3259;
                    }
                    _2927 = frontier_phi_67_pred;
                    _2929 = frontier_phi_67_pred_1;
                    _2931 = frontier_phi_67_pred_2;
                    _2925 = frontier_phi_67_pred_3;
                    _2923 = frontier_phi_67_pred_4;
                    _2921 = frontier_phi_67_pred_5;
                    uint _3066 = _3065 + 1u;
                    if (_3066 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3059 = _2921;
                        _3060 = _2923;
                        _3061 = _2925;
                        _3062 = _2927;
                        _3063 = _2929;
                        _3064 = _2931;
                        _3065 = _3066;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2929;
                frontier_phi_55_56_ladder_1 = _2931;
                frontier_phi_55_56_ladder_2 = _2927;
                frontier_phi_55_56_ladder_3 = _2925;
                frontier_phi_55_56_ladder_4 = _2923;
                frontier_phi_55_56_ladder_5 = _2921;
            }
            else
            {
                frontier_phi_55_56_ladder = _2816;
                frontier_phi_55_56_ladder_1 = _2818;
                frontier_phi_55_56_ladder_2 = _2814;
                frontier_phi_55_56_ladder_3 = _2812;
                frontier_phi_55_56_ladder_4 = _2810;
                frontier_phi_55_56_ladder_5 = _2808;
            }
            _2920 = frontier_phi_55_56_ladder_5;
            _2922 = frontier_phi_55_56_ladder_4;
            _2924 = frontier_phi_55_56_ladder_3;
            _2926 = frontier_phi_55_56_ladder_2;
            _2928 = frontier_phi_55_56_ladder;
            _2930 = frontier_phi_55_56_ladder_1;
        }
        float _2935 = isnan(1.0) ? _986 : (isnan(_986) ? 1.0 : min(_986, 1.0));
        _2720 = (_2935 * _2926) + _2156;
        _2722 = (_2935 * _2928) + _2158;
        _2724 = (_2935 * _2930) + _2160;
        _2726 = ((_2920 * _970) * _2935) + _2501;
        _2728 = ((_2922 * _972) * _2935) + _2503;
        _2730 = ((_2924 * _973) * _2935) + _2505;
    }
    else
    {
        _2720 = _2156;
        _2722 = _2158;
        _2724 = _2160;
        _2726 = _2501;
        _2728 = _2503;
        _2730 = _2505;
    }
    float _4658 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _4669 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4680 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    uint _2750 = _255 + 6u;
    float _2758 = _908 / cbSceneParam._m0[86u].x;
    float _2759 = _909 / cbSceneParam._m0[86u].y;
    vec4 _2773 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2758, _2759, (log2((isnan(cbSceneParam._m0[77u].w) ? _843 : (isnan(_843) ? cbSceneParam._m0[77u].w : min(_843, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2775 = _2773.x;
    float _2776 = _2773.y;
    float _2777 = _2773.z;
    float _2778 = _2773.w;
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    if (_843 > cbSceneParam._m0[78u].w)
    {
        float _2833 = isnan(_843) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _843 : min(cbSceneParam._m0[80u].w, _843));
        float _2834 = _2833 / _843;
        float _2845 = _2834 * _893;
        float _2846 = _894 * _2834;
        float _2847 = (-0.0) - _2846;
        float _2848 = _2834 * _895;
        float _2850 = (cbSceneParam._m0[77u].w * _2847) / _2833;
        float _2851 = _2850 + cbSceneParam._m0[79u].w;
        float _2852 = cbSceneParam._m0[79u].w - _2846;
        float _2858 = sqrt(((_2845 * _2845) + (_2846 * _2846)) + (_2848 * _2848));
        float _2861 = (1.0 - (cbSceneParam._m0[77u].w / _2833)) * _2858;
        float _2866 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2868 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3021;
        if (abs((_2847 - _2850) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3021 = ((((_2851 > 0.0) ? exp2(_2866 * _2851) : (2.0 - exp2(_2868 * _2851))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2861;
        }
        else
        {
            float _2981 = 1.0 / cbSceneParam._m0[80u].x;
            float _2982 = isnan(_2852) ? _2851 : (isnan(_2851) ? _2852 : max(_2851, _2852));
            float _2983 = isnan(_2852) ? _2851 : (isnan(_2851) ? _2852 : min(_2851, _2852));
            float _2992 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : min(_2982, 0.0));
            float _2993 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : min(_2983, 0.0));
            _3021 = ((abs(_2858 / _2847) * cbSceneParam._m0[80u].y) * ((((_2992 - _2993) * 2.0) - ((exp2(_2866 * (isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0)))) - exp2(_2866 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))))) * _2981)) - ((exp2(_2868 * _2992) - exp2(_2868 * _2993)) * _2981))) + (_2861 * cbSceneParam._m0[80u].z);
        }
        vec4 _3023 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2758, _2759, 1.0), 0.0);
        float _3032 = exp2((_3021 * (-1.44269502162933349609375)) * (1.0 - _3023.w));
        float _3033 = log2(_3032);
        float _3049 = log2(_2778);
        _2870 = (exp2(_3049 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].x)) * _3023.x) / cbSceneParam._m0[78u].x)) + _2775;
        _2872 = (exp2(_3049 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].y)) * _3023.y) / cbSceneParam._m0[78u].y)) + _2776;
        _2874 = (exp2(_3049 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].z)) * _3023.z) / cbSceneParam._m0[78u].z)) + _2777;
        _2876 = _3032 * _2778;
    }
    else
    {
        _2870 = _2775;
        _2872 = _2776;
        _2874 = _2777;
        _2876 = _2778;
    }
    float _2888 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2889 = _2888 == 3.0;
    float _2890 = log2(_2876);
    float _2897 = exp2(_2890 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2720 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _986))) + ((_2726 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1794)) * cbPerFrame._m0[3u].x));
    float _2898 = exp2(_2890 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2722 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _986))) + ((_2728 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1794)) * cbPerFrame._m0[3u].x));
    float _2899 = exp2(_2890 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2724 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _986))) + ((_2730 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1794)) * cbPerFrame._m0[3u].x));
    float _2908 = (_2888 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2908 * (_2889 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2870)));
    SV_Target.y = _2908 * (_2889 ? _2898 : (_2898 + (cbSceneParam._m0[72u].w * _2872)));
    SV_Target.z = _2908 * (_2889 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2874)));
    SV_Target.w = cbInstanceData._m0[_2750].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2750].w;
}


