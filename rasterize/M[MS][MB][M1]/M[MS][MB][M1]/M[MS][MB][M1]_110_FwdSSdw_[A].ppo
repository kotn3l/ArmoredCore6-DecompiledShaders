#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1233;
float _3639;
float _3640;
float _3641;
float _3642;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _360 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _360) * cbMtdParam._m0[24u].y) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3651 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _385 = (_378 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _386 = (_378 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _387 = (_378 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    float _435 = ((_405.z - _426) * _378) + _426;
    float _438 = ((((_405.x - _424) * _378) + _424) * 2.0) + (-1.0);
    float _440 = ((((_405.y - _425) * _378) + _425) * 2.0) + (-1.0);
    float _441 = dot(vec2(_438, _440), vec2(_438, _440));
    float _3662 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _446 = sqrt(1.0 - (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))));
    float _449 = fma(_446, _228, fma(_440, _235, _438 * _221));
    float _452 = fma(_446, _229, fma(_440, _236, _438 * _222));
    float _455 = fma(_446, _230, fma(_440, _237, _438 * _223));
    float _459 = inversesqrt(dot(vec3(_449, _452, _455), vec3(_449, _452, _455)));
    vec4 _475 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _503 = _501.x;
    float _504 = 1.0 - _503;
    float _508 = ((_503 - _504) * cbMtdParam._m0[24u].z) + _504;
    float _510 = (cbMtdParam._m0[19u].x + dot(vec4(_459 * _449, _459 * _452, _459 * _455, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_508 * cbMtdParam._m0[21u].z);
    float _3673 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _511 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _526 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_508 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3684 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _531 = ((_511 * (cbMtdParam._m0[17u].x - _385)) * _527) + _385;
    float _532 = ((_511 * (cbMtdParam._m0[17u].y - _386)) * _527) + _386;
    float _533 = ((_511 * (cbMtdParam._m0[17u].z - _387)) * _527) + _387;
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _559 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _561 = _559.x;
    float _579 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _561) * _378) + _561;
    float _583 = ((_545.x - _579) * cbMtdParam._m0[19u].z) + _579;
    float _586 = _583 - ((_527 * _511) * _583);
    vec4 _599 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _606 = (_599.x * 2.0) + (-1.0);
    float _607 = (_599.y * 2.0) + (-1.0);
    float _608 = dot(vec2(_606, _607), vec2(_606, _607));
    float _3695 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _617 = (((_599.z - _435) * _511) * _527) + _435;
    float _632 = (((cbMtdParam._m0[21u].x * _438) + ((_606 - _438) * _511)) * _527) + _438;
    float _633 = (((cbMtdParam._m0[21u].x * _440) + ((_607 - _440) * _511)) * _527) + _440;
    float _634 = (((sqrt(1.0 - (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) - _446) * _511) * _527) + _446;
    float _639 = cbMtdParam._m0[22u].x + _475.w;
    float _642 = fma(_634, _228, fma(_633, _235, _632 * _221));
    float _645 = fma(_634, _229, fma(_633, _236, _632 * _222));
    float _648 = fma(_634, _230, fma(_633, _237, _632 * _223));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    float _653 = _652 * _642;
    float _654 = _652 * _645;
    float _655 = _652 * _648;
    float _3706 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _656 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3728 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _3739 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3750 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _3761 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _661 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _675 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _726 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _716);
    float _727 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _716);
    float _728 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _716);
    float _732 = inversesqrt(dot(vec3(_726, _727, _728), vec3(_726, _727, _728)));
    float _733 = _726 * _732;
    float _734 = _727 * _732;
    float _735 = _728 * _732;
    vec4 _740 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _742 = _740.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _914 = sqrt(((_726 * _726) + (_727 * _727)) + (_728 * _728));
        float _920 = (cbMatDynParam._m0[5u].x * _914) + cbMatDynParam._m0[5u].y;
        float _3772 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _925 = (cbMatDynParam._m0[5u].z * _914) + cbMatDynParam._m0[5u].w;
        float _3783 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) - _921)) + _921) < ((_742 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _753 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _754 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _772 = fma(_655, cbSceneParam._m0[5u].z, fma(_654, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _653));
    float _775 = fma(_655, cbSceneParam._m0[6u].z, fma(_654, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _653));
    float _778 = fma(_655, cbSceneParam._m0[7u].z, fma(_654, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _653));
    uint _791 = _240 + 9u;
    uint _792 = _791 + uint(cbMatDynParam._m0[0u].w);
    float _798 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_792].x;
    float _799 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_792].y;
    float _800 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_792].z;
    float _3794 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _804 = 1.0 - _661;
    float _805 = _801 * _804;
    float _806 = _802 * _804;
    float _807 = _803 * _804;
    float _812 = (_801 + (-0.039999999105930328369140625)) * _661;
    float _813 = (_802 + (-0.039999999105930328369140625)) * _661;
    float _814 = (_803 + (-0.039999999105930328369140625)) * _661;
    float _815 = _812 + 0.039999999105930328369140625;
    float _817 = _813 + 0.039999999105930328369140625;
    float _818 = _814 + 0.039999999105930328369140625;
    vec4 _827 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _753, cbSceneParam._m0[86u].y * _754));
    float _831 = ((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * TEXCOORD_5.w) * _827.x;
    float _832 = dot(vec3(_653, _654, _655), vec3(_733, _734, _735));
    float _835 = _832 * 2.0;
    float _839 = (_835 * _653) - _733;
    float _840 = (_835 * _654) - _734;
    float _841 = (_835 * _655) - _735;
    float _845 = abs(dot(vec3(_733, _734, _735), vec3(_653, _654, _655)));
    float _3827 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _847 = sqrt(_656);
    float _860 = exp2((_847 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_847 * 3.0));
    float _866 = (1.0 - _860) * ((_847 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _867 = _860 * _847;
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1232;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _957 = fma(_903, cbModelParam._m0[26u].z, fma(_899, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _895));
        float _961 = fma(_903, cbModelParam._m0[27u].z, fma(_899, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _895));
        float _965 = fma(_903, cbModelParam._m0[28u].z, fma(_899, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _895));
        float _990 = _895 + _653;
        float _991 = _899 + _654;
        float _992 = _903 + _655;
        float _1002 = fma(_992, cbModelParam._m0[26u].z, fma(_991, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _990)) - _957;
        float _1003 = fma(_992, cbModelParam._m0[27u].z, fma(_991, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _990)) - _961;
        float _1004 = fma(_992, cbModelParam._m0[28u].z, fma(_991, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _990)) - _965;
        float _1008 = inversesqrt(dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004)));
        float _1021 = ((_1008 * _1002) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_957 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1008 * _1003) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_961 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1008 * _1004) / cbModelParam._m0[34u].z) + ((((((_965 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        float _1060 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1026.x + (-0.5));
        float _1062 = _1060 * (_1026.y + (-0.5));
        float _1063 = _1060 * (_1026.z + (-0.5));
        float _1070 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1033.x + (-0.5));
        float _1072 = _1070 * (_1033.y + (-0.5));
        float _1073 = _1070 * (_1033.z + (-0.5));
        float _1080 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1040.x + (-0.5));
        float _1082 = _1080 * (_1040.y + (-0.5));
        float _1083 = _1080 * (_1040.z + (-0.5));
        float _1090 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1047.x + (-0.5));
        float _1092 = _1090 * (_1047.y + (-0.5));
        float _1093 = _1090 * (_1047.z + (-0.5));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = _1061 * 0.5;
        float _1098 = _1071 * 0.5;
        float _1099 = _1081 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1114 = (dot(vec3(_653, _654, _655), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1124 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3875 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1126 + 1.0))) + _1131) * _1094;
        float _1141 = _1062 * 0.5;
        float _1142 = _1072 * 0.5;
        float _1143 = _1082 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_653, _654, _655), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3908 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1168 + 1.0))) + _1173) * _1095;
        float _1183 = _1063 * 0.5;
        float _1184 = _1073 * 0.5;
        float _1185 = _1083 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_653, _654, _655), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3941 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1210 + 1.0))) + _1215) * _1096;
        _1232 = _1063;
        _1234 = _1062;
        _1235 = _1061;
        _1236 = _1073;
        _1237 = _1072;
        _1238 = _1071;
        _1239 = _1083;
        _1240 = _1082;
        _1241 = _1081;
        _1242 = _1096;
        _1243 = _1095;
        _1244 = _1094;
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
    }
    else
    {
        _1232 = _1233;
        _1234 = _1233;
        _1235 = _1233;
        _1236 = _1233;
        _1237 = _1233;
        _1238 = _1233;
        _1239 = _1233;
        _1240 = _1233;
        _1241 = _1233;
        _1242 = _1233;
        _1243 = _1233;
        _1244 = _1233;
        _1245 = 0.0;
        _1246 = 0.0;
        _1247 = 0.0;
    }
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1275 = fma(_903, cbModelParam._m0[30u].z, fma(_899, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _895));
        float _1279 = fma(_903, cbModelParam._m0[31u].z, fma(_899, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _895));
        float _1283 = fma(_903, cbModelParam._m0[32u].z, fma(_899, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _895));
        float _1306 = _895 + _653;
        float _1307 = _899 + _654;
        float _1308 = _903 + _655;
        float _1318 = fma(_1308, cbModelParam._m0[30u].z, fma(_1307, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1306)) - _1275;
        float _1319 = fma(_1308, cbModelParam._m0[31u].z, fma(_1307, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1306)) - _1279;
        float _1320 = fma(_1308, cbModelParam._m0[32u].z, fma(_1307, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1306)) - _1283;
        float _1324 = inversesqrt(dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320)));
        float _1337 = ((_1324 * _1318) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1275 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1338 = ((_1324 * _1319) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1279 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1339 = ((_1324 * _1320) / cbModelParam._m0[35u].z) + ((((((_1283 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        float _1374 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1341.x + (-0.5));
        float _1376 = _1374 * (_1341.y + (-0.5));
        float _1377 = _1374 * (_1341.z + (-0.5));
        float _1384 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1348.x + (-0.5));
        float _1386 = _1384 * (_1348.y + (-0.5));
        float _1387 = _1384 * (_1348.z + (-0.5));
        float _1394 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1355.x + (-0.5));
        float _1396 = _1394 * (_1355.y + (-0.5));
        float _1397 = _1394 * (_1355.z + (-0.5));
        float _1404 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1362.x + (-0.5));
        float _1406 = _1404 * (_1362.y + (-0.5));
        float _1407 = _1404 * (_1362.z + (-0.5));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = _1375 * 0.5;
        float _1412 = _1385 * 0.5;
        float _1413 = _1395 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_653, _654, _655), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4004 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1438 + 1.0))) + _1443) * _1408;
        float _1453 = _1376 * 0.5;
        float _1454 = _1386 * 0.5;
        float _1455 = _1396 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_653, _654, _655), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4037 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1480 + 1.0))) + _1485) * _1409;
        float _1495 = _1377 * 0.5;
        float _1496 = _1387 * 0.5;
        float _1497 = _1397 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_653, _654, _655), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4070 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1522 + 1.0))) + _1527) * _1410;
        _1544 = _1377;
        _1545 = _1376;
        _1546 = _1375;
        _1547 = _1387;
        _1548 = _1386;
        _1549 = _1385;
        _1550 = _1397;
        _1551 = _1396;
        _1552 = _1395;
        _1553 = _1410;
        _1554 = _1409;
        _1555 = _1408;
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
    }
    else
    {
        _1544 = _1233;
        _1545 = _1233;
        _1546 = _1233;
        _1547 = _1233;
        _1548 = _1233;
        _1549 = _1233;
        _1550 = _1233;
        _1551 = _1233;
        _1552 = _1233;
        _1553 = _1233;
        _1554 = _1233;
        _1555 = _1233;
        _1556 = 0.0;
        _1557 = 0.0;
        _1558 = 0.0;
    }
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1245)) + _1245;
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1246)) + _1246;
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1247)) + _1247;
    float _1591 = fma(_1570, cbSceneParam._m0[89u].z, fma(_1569, cbSceneParam._m0[89u].y, _1568 * cbSceneParam._m0[89u].x));
    float _1594 = fma(_1570, cbSceneParam._m0[90u].z, fma(_1569, cbSceneParam._m0[90u].y, _1568 * cbSceneParam._m0[90u].x));
    float _1597 = fma(_1570, cbSceneParam._m0[91u].z, fma(_1569, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1568));
    float _1612 = _839 * 0.5;
    float _1613 = _840 * 0.5;
    float _1614 = _841 * 0.5;
    float _1615 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1618 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1621 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1655;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1628 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1232, _1236, _1239, _1242));
        float _1632 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1234, _1237, _1240, _1243));
        float _1636 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1235, _1238, _1241, _1244));
        float _1643 = dot(vec4(cbModelParam._m0[39u]), vec4(_1612, _1613, _1614, 1.0));
        _1655 = dot(vec3(isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1643) ? 0.0 : (isnan(0.0) ? _1643 : max(0.0, _1643))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1655 = 1.0;
    }
    float _1666;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1657 = dot(vec4(cbModelParam._m0[40u]), vec4(_1612, _1613, _1614, 1.0));
        _1666 = dot(vec3(isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1657) ? 0.0 : (isnan(0.0) ? _1657 : max(0.0, _1657))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1666 = 1.0;
    }
    float _1670 = (_1666 * cbModelParam._m0[1u].x) + (_1655 * (1.0 - cbModelParam._m0[1u].x));
    float _1680 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _656);
    float _1681 = isnan(_1680) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1680 : min(cbModelParam._m0[25u].z, _1680));
    float _1762;
    float _1764;
    float _1766;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1729 = fma(_903, cbModelParam._m0[13u].z, fma(_899, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _895)) + cbModelParam._m0[13u].w;
        float _1733 = fma(_903, cbModelParam._m0[14u].z, fma(_899, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _895)) + cbModelParam._m0[14u].w;
        float _1737 = fma(_903, cbModelParam._m0[15u].z, fma(_899, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _895)) + cbModelParam._m0[15u].w;
        float _1740 = fma(_841, cbModelParam._m0[13u].z, fma(_840, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _839));
        float _1743 = fma(_841, cbModelParam._m0[14u].z, fma(_840, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _839));
        float _1746 = fma(_841, cbModelParam._m0[15u].z, fma(_840, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _839));
        float _1774;
        if (_1740 > 0.0)
        {
            _1774 = abs((1.0 - _1729) / _1740);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1729 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1774 = frontier_phi_17_15_ladder;
        }
        float _1998;
        if (_1743 > 0.0)
        {
            _1998 = abs((1.0 - _1733) / _1743);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1733 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1998 = frontier_phi_26_22_ladder;
        }
        float _2255;
        if (_1746 > 0.0)
        {
            _2255 = abs((1.0 - _1737) / _1746);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1737 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2255 = frontier_phi_38_33_ladder;
        }
        float _2257 = isnan(_1998) ? _1774 : (isnan(_1774) ? _1998 : min(_1774, _1998));
        float _2258 = isnan(_2255) ? _2257 : (isnan(_2257) ? _2255 : min(_2257, _2255));
        float _2262 = (_2258 * _1740) + _1729;
        float _2263 = (_2258 * _1743) + _1733;
        float _2264 = (_2258 * _1746) + _1737;
        float _2265 = _2258 * 9.9999997473787516355514526367188e-05;
        float _2267 = (-1.0) - _2265;
        float _2269 = _2265 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2264 > _2269) || ((_2264 < _2267) || ((_2263 > _2269) || ((_2263 < _2267) || ((_2262 < _2267) || (_2262 > _2269))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2392 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2264, cbModelParam._m0[9u].z, fma(_2263, cbModelParam._m0[9u].y, _2262 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2264, cbModelParam._m0[10u].z, fma(_2263, cbModelParam._m0[10u].y, _2262 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2264, cbModelParam._m0[11u].z, fma(_2263, cbModelParam._m0[11u].y, _2262 * cbModelParam._m0[11u].x))), _1681);
            frontier_phi_16_38_ladder = _2392.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2392.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2392.x * cbModelParam._m0[1u].y;
        }
        _1762 = frontier_phi_16_38_ladder_2;
        _1764 = frontier_phi_16_38_ladder_1;
        _1766 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1750 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_839, _840, _841), _1681);
        _1762 = _1750.x * cbModelParam._m0[1u].y;
        _1764 = _1750.y * cbModelParam._m0[1u].y;
        _1766 = _1750.z * cbModelParam._m0[1u].y;
    }
    float _1770 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _656);
    float _1771 = isnan(_1770) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1770 : min(cbModelParam._m0[25u].w, _1770));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1825 = fma(_903, cbModelParam._m0[21u].z, fma(_899, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _895)) + cbModelParam._m0[21u].w;
        float _1829 = fma(_903, cbModelParam._m0[22u].z, fma(_899, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _895)) + cbModelParam._m0[22u].w;
        float _1833 = fma(_903, cbModelParam._m0[23u].z, fma(_899, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _895)) + cbModelParam._m0[23u].w;
        float _1836 = fma(_841, cbModelParam._m0[21u].z, fma(_840, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _839));
        float _1839 = fma(_841, cbModelParam._m0[22u].z, fma(_840, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _839));
        float _1842 = fma(_841, cbModelParam._m0[23u].z, fma(_840, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _839));
        float _2003;
        if (_1836 > 0.0)
        {
            _2003 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2003 = frontier_phi_28_24_ladder;
        }
        float _2282;
        if (_1839 > 0.0)
        {
            _2282 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2282 = frontier_phi_40_35_ladder;
        }
        float _2495;
        if (_1842 > 0.0)
        {
            _2495 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2495 = frontier_phi_49_46_ladder;
        }
        float _2497 = isnan(_2282) ? _2003 : (isnan(_2003) ? _2282 : min(_2003, _2282));
        float _2498 = isnan(_2495) ? _2497 : (isnan(_2497) ? _2495 : min(_2497, _2495));
        float _2502 = (_2498 * _1836) + _1825;
        float _2503 = (_2498 * _1839) + _1829;
        float _2504 = (_2498 * _1842) + _1833;
        float _2505 = _2498 * 9.9999997473787516355514526367188e-05;
        float _2506 = (-1.0) - _2505;
        float _2508 = _2505 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2504 > _2508) || ((_2504 < _2506) || ((_2503 > _2508) || ((_2503 < _2506) || ((_2502 < _2506) || (_2502 > _2508))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2504, cbModelParam._m0[17u].z, fma(_2503, cbModelParam._m0[17u].y, _2502 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2504, cbModelParam._m0[18u].z, fma(_2503, cbModelParam._m0[18u].y, _2502 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2504, cbModelParam._m0[19u].z, fma(_2503, cbModelParam._m0[19u].y, _2502 * cbModelParam._m0[19u].x))), _1771);
            frontier_phi_25_49_ladder = _2703.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2703.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2703.x * cbModelParam._m0[1u].z;
        }
        _1861 = frontier_phi_25_49_ladder_2;
        _1863 = frontier_phi_25_49_ladder_1;
        _1865 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_839, _840, _841), _1771);
        _1861 = _1845.x * cbModelParam._m0[1u].z;
        _1863 = _1845.y * cbModelParam._m0[1u].z;
        _1865 = _1845.z * cbModelParam._m0[1u].z;
    }
    float _1878 = (((_866 * _815) + _867) * _831) * ((cbModelParam._m0[1u].w * (_1861 - _1762)) + _1762);
    float _1880 = (((_866 * _817) + _867) * _831) * ((cbModelParam._m0[1u].w * (_1863 - _1764)) + _1764);
    float _1882 = (((_866 * _818) + _867) * _831) * ((cbModelParam._m0[1u].w * (_1865 - _1766)) + _1766);
    float _1885 = fma(_1882, cbSceneParam._m0[89u].z, fma(_1880, cbSceneParam._m0[89u].y, _1878 * cbSceneParam._m0[89u].x));
    float _1888 = fma(_1882, cbSceneParam._m0[90u].z, fma(_1880, cbSceneParam._m0[90u].y, _1878 * cbSceneParam._m0[90u].x));
    float _1891 = fma(_1882, cbSceneParam._m0[91u].z, fma(_1880, cbSceneParam._m0[91u].y, _1878 * cbSceneParam._m0[91u].x));
    vec4 _1899 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_753, _754));
    float _1901 = _1899.w;
    float _1913 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1901);
    float _1914 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1901);
    float _1915 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1901);
    uvec4 _1919 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1921 = _1919.x * 14u;
    uint _1922 = _1921 + 13u;
    float _1929 = _831 + (-1.0);
    float _1934 = (cbLight._m0[_1922].x * _1929) + 1.0;
    float _1935 = (cbLight._m0[_1922].y * _1929) + 1.0;
    float _1936 = (cbLight._m0[_1922].z * _1929) + 1.0;
    float _1937 = (cbLight._m0[_1922].w * _1929) + 1.0;
    uint _1938 = _1921 + 5u;
    float _1944 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
    uint _1948 = _1921 + 4u;
    float _1957 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
    uint _1961 = _1921 | 1u;
    float _1972 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_653, _654, _655));
    float _1975 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_653, _654, _655));
    float _4206 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _4217 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1980 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.3183098733425140380859375;
    float _1982 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.3183098733425140380859375;
    float _1989 = ((cbLight._m0[_1938].x * _1944) * _1982) + (((cbLight._m0[_1948].x * _1913) * _1957) * _1980);
    float _1990 = ((_1944 * cbLight._m0[_1938].y) * _1982) + (((cbLight._m0[_1948].y * _1914) * _1957) * _1980);
    float _1991 = ((_1944 * cbLight._m0[_1938].z) * _1982) + (((cbLight._m0[_1948].z * _1915) * _1957) * _1980);
    uvec4 _1995 = floatBitsToUint(cbLight._m0[_1921 + 12u]);
    bool _1997 = _1995.x == 0u;
    float _2008;
    float _2010;
    float _2012;
    if (_1997)
    {
        _2008 = _1989;
        _2010 = _1990;
        _2012 = _1991;
    }
    else
    {
        uint _2016 = _1921 + 6u;
        float _2032 = (dot(vec3(cbLight._m0[_1921 + 2u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2033 = _2032 * _2032;
        float _4228 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2034 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2035 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
        _2008 = (((cbLight._m0[_2016].x * 0.3183098733425140380859375) * _2034) * _2035) + _1989;
        _2010 = (((cbLight._m0[_2016].y * 0.3183098733425140380859375) * _2034) * _2035) + _1990;
        _2012 = (((cbLight._m0[_2016].z * 0.3183098733425140380859375) * _2034) * _2035) + _1991;
    }
    bool _2015 = _1995.y == 0u;
    float _2053;
    float _2055;
    float _2057;
    if (_2015)
    {
        _2053 = _2008;
        _2055 = _2010;
        _2057 = _2012;
    }
    else
    {
        uint _2226 = _1921 + 7u;
        float _2242 = (dot(vec3(cbLight._m0[_1921 + 3u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2243 = _2242 * _2242;
        float _4244 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2244 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2245 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2053 = (((cbLight._m0[_2226].x * 0.3183098733425140380859375) * _2244) * _2245) + _2008;
        _2055 = (((cbLight._m0[_2226].y * 0.3183098733425140380859375) * _2244) * _2245) + _2010;
        _2057 = (((cbLight._m0[_2226].z * 0.3183098733425140380859375) * _2244) * _2245) + _2012;
    }
    uint _2060 = _1921 + 8u;
    float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _656) * 0.949999988079071044921875);
    float _2074 = _2073 * _2073;
    float _2075 = cbLight._m0[_1921].x + _733;
    float _2076 = cbLight._m0[_1921].y + _734;
    float _2077 = cbLight._m0[_1921].z + _735;
    float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
    float _2082 = _2081 * _2075;
    float _2083 = _2081 * _2076;
    float _2084 = _2081 * _2077;
    float _2085 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1921].xyz));
    float _4260 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _4271 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _2089 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2090 = dot(vec3(_653, _654, _655), vec3(_2082, _2083, _2084));
    float _4282 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_2082, _2083, _2084));
    float _4293 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = _2074 * _2074;
    float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
    float _2110 = exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0);
    float _2111 = 0.959999978542327880859375 - _812;
    float _2113 = 0.959999978542327880859375 - _813;
    float _2114 = 0.959999978542327880859375 - _814;
    float _2121 = 1.0 - _2074;
    float _2132 = (0.5 / (((_2089 * ((_2088 * _2121) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2121) + _2074) * _2088))) * _2088;
    float _4304 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2134 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
    uint _2148 = _1921 + 9u;
    float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _656) * 0.949999988079071044921875);
    float _2160 = _2159 * _2159;
    float _2161 = cbLight._m0[_1961].x + _733;
    float _2162 = cbLight._m0[_1961].y + _734;
    float _2163 = cbLight._m0[_1961].z + _735;
    float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
    float _2168 = _2167 * _2161;
    float _2169 = _2167 * _2162;
    float _2170 = _2167 * _2163;
    float _2171 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1961].xyz));
    float _4315 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2175 = dot(vec3(_653, _654, _655), vec3(_2168, _2169, _2170));
    float _4326 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2179 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_2168, _2169, _2170));
    float _4337 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2183 = _2160 * _2160;
    float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
    float _2194 = exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0);
    float _2201 = 1.0 - _2160;
    float _2211 = (0.5 / (((_2089 * ((_2174 * _2201) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2201) + _2160) * _2174))) * _2174;
    float _4348 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2213 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
    float _2223 = (((((_2194 * _2111) + _815) * cbLight._m0[_2148].x) * _2213) * _1944) + ((((cbLight._m0[_2060].x * _1913) * ((_2110 * _2111) + _815)) * _2134) * _1957);
    float _2224 = (((((_2194 * _2113) + _817) * cbLight._m0[_2148].y) * _2213) * _1944) + ((((cbLight._m0[_2060].y * _1914) * ((_2110 * _2113) + _817)) * _2134) * _1957);
    float _2225 = (((((_2194 * _2114) + _818) * cbLight._m0[_2148].z) * _2213) * _1944) + ((((cbLight._m0[_2060].z * _1915) * ((_2110 * _2114) + _818)) * _2134) * _1957);
    float _2287;
    float _2289;
    float _2291;
    if (_1997)
    {
        _2287 = _2223;
        _2289 = _2224;
        _2291 = _2225;
    }
    else
    {
        uint _2293 = _1921 + 2u;
        uint _2297 = _1921 + 10u;
        float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _656) * 0.949999988079071044921875);
        float _2312 = _2311 * _2311;
        float _2313 = cbLight._m0[_2293].x + _733;
        float _2314 = cbLight._m0[_2293].y + _734;
        float _2315 = cbLight._m0[_2293].z + _735;
        float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
        float _2320 = _2319 * _2313;
        float _2321 = _2319 * _2314;
        float _2322 = _2319 * _2315;
        float _2323 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2293].xyz));
        float _4359 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2327 = dot(vec3(_653, _654, _655), vec3(_2320, _2321, _2322));
        float _4370 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2331 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2320, _2321, _2322));
        float _4381 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2335 = _2312 * _2312;
        float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
        float _2346 = exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0);
        float _2353 = 1.0 - _2312;
        float _2363 = (0.5 / (((_2089 * ((_2326 * _2353) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2353) + _2312) * _2326))) * _2326;
        float _4392 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2365 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
        float _2366 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
        _2287 = (((((_2346 * _2111) + _815) * cbLight._m0[_2297].x) * _2365) * _2366) + _2223;
        _2289 = (((((_2346 * _2113) + _817) * cbLight._m0[_2297].y) * _2365) * _2366) + _2224;
        _2291 = (((((_2346 * _2114) + _818) * cbLight._m0[_2297].z) * _2365) * _2366) + _2225;
    }
    float _2401;
    float _2403;
    float _2405;
    if (_2015)
    {
        _2401 = _2287;
        _2403 = _2289;
        _2405 = _2291;
    }
    else
    {
        uint _2412 = _1921 + 3u;
        uint _2416 = _1921 + 11u;
        float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2412].w)) * _656) * 0.949999988079071044921875);
        float _2431 = _2430 * _2430;
        float _2432 = cbLight._m0[_2412].x + _733;
        float _2433 = cbLight._m0[_2412].y + _734;
        float _2434 = cbLight._m0[_2412].z + _735;
        float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
        float _2439 = _2438 * _2432;
        float _2440 = _2438 * _2433;
        float _2441 = _2438 * _2434;
        float _2442 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2412].xyz));
        float _4408 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2446 = dot(vec3(_653, _654, _655), vec3(_2439, _2440, _2441));
        float _4419 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2450 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_2439, _2440, _2441));
        float _4430 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2454 = _2431 * _2431;
        float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
        float _2465 = exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0);
        float _2472 = 1.0 - _2431;
        float _2482 = (0.5 / (((_2089 * ((_2445 * _2472) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2472) + _2431) * _2445))) * _2445;
        float _4441 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2484 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
        float _2485 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2401 = (((((_2465 * _2111) + _815) * cbLight._m0[_2416].x) * _2484) * _2485) + _2287;
        _2403 = (((((_2465 * _2113) + _817) * cbLight._m0[_2416].y) * _2484) * _2485) + _2289;
        _2405 = (((((_2465 * _2114) + _818) * cbLight._m0[_2416].z) * _2484) * _2485) + _2291;
    }
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    if (_1919.y == 0u)
    {
        float _2560 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2561 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2560;
        float _2562 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2560;
        float _2563 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2560;
        uvec4 _2575 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2576 = _2575.x;
        uint _2587 = uint((float(_2575.y) * floor(float(uint(cbSceneParam._m0[85u].y * _754) / _2576))) + floor(float(uint(cbSceneParam._m0[85u].x * _753) / _2576)));
        float _2597 = (log2(_2563 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2598 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        uint _2601 = uint(isnan(14.0) ? _2598 : (isnan(_2598) ? 14.0 : min(_2598, 14.0)));
        uvec4 _2606 = texelFetch(g_lightClusterGridBuffer, int(((_2601 << 2u) + (_2587 << 6u)) >> 2u));
        uint _2607 = _2606.x;
        uint _2608 = _2575.z;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        if (((((1u << ((_2608 >> 4u) & 15u)) + 4294967295u) & _2607) == 0u) || ((_2608 & 240u) == 0u))
        {
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
        }
        else
        {
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            uint _2867 = 0u;
            uint _2876;
            bool _2877;
            for (;;)
            {
                _2876 = texelFetch(g_lightClassification, int((((_2601 << 5u) + (_2587 << 9u)) + (_2867 << 2u)) >> 2u)).x;
                _2877 = _2876 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2877)
                {
                    frontier_phi_66_pred = _2861;
                    frontier_phi_66_pred_1 = _2866;
                    frontier_phi_66_pred_2 = _2865;
                    frontier_phi_66_pred_3 = _2864;
                    frontier_phi_66_pred_4 = _2863;
                    frontier_phi_66_pred_5 = _2862;
                }
                else
                {
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    uint _3012;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2876;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    for (;;)
                    {
                        uint _3016 = uint(findLSB(_3012)) + (_2867 << 5u);
                        uint _3013 = (_3012 + 4294967295u) & _3012;
                        uint _3018 = _3016 * 48u;
                        vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 3u)).x));
                        uint _3038 = (_3016 * 48u) + 4u;
                        vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 3u)).x));
                        uint _3057 = (_3016 * 48u) + 8u;
                        vec3 _3068 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3057)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 2u)).x));
                        float _3072 = _3032.x - _2561;
                        float _3073 = _3032.y - _2562;
                        float _3074 = _3032.z - _2563;
                        float _3075 = dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074));
                        float _3078 = inversesqrt(_3075);
                        float _3079 = _3078 * _3072;
                        float _3080 = _3078 * _3073;
                        float _3081 = _3078 * _3074;
                        float _3082 = dot(vec3(_772, _775, _778), vec3(_3079, _3080, _3081));
                        float _3087 = 1.0 - (_3075 * _3032.w);
                        float _4467 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3088 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3089 = sqrt(_3075) * _3051.w;
                        float _3092 = 1.39999997615814208984375 / (_3089 + 1.39999997615814208984375);
                        float _3093 = _3092 * _3092;
                        float _3096 = ((1.0 - _3093) * _3082) + _3093;
                        float _3099 = _3089 * _3089;
                        float _3103 = ((isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0))) * _3088) / ((_3099 * 0.699999988079071044921875) + 1.0);
                        float _3107 = (-0.0) - _2561;
                        float _3108 = (-0.0) - _2562;
                        float _3109 = (-0.0) - _2563;
                        float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
                        float _3114 = _3113 * _3107;
                        float _3115 = _3113 * _3108;
                        float _3116 = _3113 * _3109;
                        float _3124 = exp2(log2(1.0 / ((_3099 * 3.5) + 5.0)) * 0.25);
                        float _3125 = 1.0 - _847;
                        float _3132 = sqrt(1.0 - ((1.0 - (_3125 * _3125)) * (1.0 - (_3124 * _3124))));
                        float _3133 = _3132 * _3132;
                        float _3134 = _3133 * _3133;
                        float _3135 = _3114 + _3079;
                        float _3136 = _3115 + _3080;
                        float _3137 = _3116 + _3081;
                        float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                        float _3145 = dot(vec3(_772, _775, _778), vec3(_3114, _3115, _3116));
                        float _4483 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3148 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3149 = dot(vec3(_772, _775, _778), vec3(_3141 * _3135, _3141 * _3136, _3141 * _3137));
                        float _4494 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3152 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3156 = ((_3152 * _3152) * (_3134 + (-1.0))) + 1.0;
                        float _3157 = _3092 * _3133;
                        float _3158 = _3157 * _3157;
                        float _3161 = ((1.0 - _3158) * _3082) + _3158;
                        float _4505 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3162 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3163 = 1.0 - _3133;
                        float _3173 = (0.5 / (((_3162 * ((_3148 * _3163) + _3133)) + 9.9999999392252902907785028219223e-09) + (((_3162 * _3163) + _3133) * _3148))) * _3162;
                        float _4516 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3184 = (((_3134 * 3.1415927410125732421875) * (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) / ((_3156 * _3156) * ((_3099 * 2.1991131305694580078125) + 3.141590118408203125))) * _3088;
                        _2936 = (_3103 * _3051.x) + _3009;
                        _2937 = (_3103 * _3051.y) + _3010;
                        _2938 = (_3103 * _3051.z) + _3011;
                        _2933 = (_3184 * _3068.x) + _3006;
                        _2934 = (_3184 * _3068.y) + _3007;
                        _2935 = (_3184 * _3068.z) + _3008;
                        if (_3013 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _2938;
                            _3012 = _3013;
                        }
                    }
                    frontier_phi_66_pred = _2933;
                    frontier_phi_66_pred_1 = _2938;
                    frontier_phi_66_pred_2 = _2937;
                    frontier_phi_66_pred_3 = _2936;
                    frontier_phi_66_pred_4 = _2935;
                    frontier_phi_66_pred_5 = _2934;
                }
                _2709 = frontier_phi_66_pred;
                _2719 = frontier_phi_66_pred_1;
                _2717 = frontier_phi_66_pred_2;
                _2715 = frontier_phi_66_pred_3;
                _2713 = frontier_phi_66_pred_4;
                _2711 = frontier_phi_66_pred_5;
                uint _2868 = _2867 + 1u;
                if (_2868 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2861 = _2709;
                    _2862 = _2711;
                    _2863 = _2713;
                    _2864 = _2715;
                    _2865 = _2717;
                    _2866 = _2719;
                    _2867 = _2868;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
        }
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.z;
        uint _2725 = (_2723 >> 8u) & 15u;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        if (((4294967295u << _2725) & _2607) == 0u)
        {
            _2829 = _2708;
            _2831 = _2710;
            _2833 = _2712;
            _2835 = _2714;
            _2837 = _2716;
            _2839 = _2718;
        }
        else
        {
            float _2854 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
            float _2855 = _2854 * _2561;
            float _2856 = _2854 * _2562;
            float _2857 = _2854 * _2563;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2725 < ((_2723 >> 12u) & 15u))
            {
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2989 = _2708;
                float _2990 = _2710;
                float _2991 = _2712;
                float _2992 = _2714;
                float _2993 = _2716;
                float _2994 = _2718;
                uint _2995 = _2725;
                uint _3004;
                bool _3005;
                for (;;)
                {
                    _3004 = texelFetch(g_lightClassification, int((((_2601 << 5u) + (_2587 << 9u)) + (_2995 << 2u)) >> 2u)).x;
                    _3005 = _3004 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3005)
                    {
                        frontier_phi_77_pred = _2994;
                        frontier_phi_77_pred_1 = _2993;
                        frontier_phi_77_pred_2 = _2992;
                        frontier_phi_77_pred_3 = _2991;
                        frontier_phi_77_pred_4 = _2990;
                        frontier_phi_77_pred_5 = _2989;
                    }
                    else
                    {
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3211 = _2989;
                        float _3212 = _2990;
                        float _3213 = _2991;
                        float _3214 = _2992;
                        float _3215 = _2993;
                        float _3216 = _2994;
                        uint _3217 = _3004;
                        uint _3218;
                        vec4 _3243;
                        float _3244;
                        vec4 _3259;
                        vec3 _3271;
                        vec4 _3286;
                        vec4 _3302;
                        float _3348;
                        bool _3349;
                        for (;;)
                        {
                            uint _3228 = ((_2995 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3217));
                            _3218 = (_3217 + 4294967295u) & _3217;
                            uint _3230 = _3228 * 40u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            _3244 = _3243.w;
                            uint _3246 = (_3228 * 40u) + 4u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3261 = (_3228 * 40u) + 8u;
                            _3271 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x));
                            uint _3273 = (_3228 * 40u) + 16u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3289 = (_3228 * 40u) + 20u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3304 = (_3228 * 40u) + 24u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3323 = (_3228 * 40u) + 28u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            _3348 = fma(_2563, _3336.z, fma(_2562, _3336.y, _3336.x * _2561)) + _3336.w;
                            _3349 = !((fma(_2563, _3317.z, fma(_2562, _3317.y, _3317.x * _2561)) + _3317.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3349)
                            {
                                float _3376 = _3243.x - _2561;
                                float _3377 = _3243.y - _2562;
                                float _3378 = _3243.z - _2563;
                                float _3379 = dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378));
                                float _3382 = inversesqrt(_3379);
                                float _3383 = _3382 * _3376;
                                float _3384 = _3382 * _3377;
                                float _3385 = _3382 * _3378;
                                float _3389 = 1.0 - (_3379 / (_3244 * _3244));
                                float _4527 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3394 = sqrt(_3379) * _3259.w;
                                float _3396 = 1.39999997615814208984375 / (_3394 + 1.39999997615814208984375);
                                float _3397 = _3396 * _3396;
                                float _3400 = ((1.0 - _3397) * dot(vec3(_3383, _3384, _3385), vec3(_772, _775, _778))) + _3397;
                                float _3403 = _3394 * _3394;
                                float _3407 = (fma(_2563, _3286.z, fma(_2562, _3286.y, _3286.x * _2561)) + _3286.w) / _3348;
                                float _3408 = (fma(_2563, _3302.z, fma(_2562, _3302.y, _3302.x * _2561)) + _3302.w) / _3348;
                                float _3412 = 1.0 - dot(vec2(_3407, _3408), vec2(_3407, _3408));
                                float _4543 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3414 = _3413 * (((isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0))) * _3390) / ((_3403 * 0.699999988079071044921875) + 1.0));
                                float _3426 = exp2(log2(1.0 / ((_3403 * 3.5) + 5.0)) * 0.25);
                                float _3427 = 1.0 - _847;
                                float _3434 = sqrt(1.0 - ((1.0 - (_3427 * _3427)) * (1.0 - (_3426 * _3426))));
                                float _3435 = _3434 * _3434;
                                float _3436 = _3435 * _3435;
                                float _3437 = _3383 - _2855;
                                float _3438 = _3384 - _2856;
                                float _3439 = _3385 - _2857;
                                float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                                float _3447 = dot(vec3(_772, _775, _778), vec3((-0.0) - _2855, (-0.0) - _2856, (-0.0) - _2857));
                                float _4554 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3451 = dot(vec3(_772, _775, _778), vec3(_3443 * _3437, _3443 * _3438, _3443 * _3439));
                                float _4565 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3454 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3458 = ((_3454 * _3454) * (_3436 + (-1.0))) + 1.0;
                                float _3459 = _3396 * _3435;
                                float _3460 = _3459 * _3459;
                                float _3466 = ((1.0 - _3460) * dot(vec3(_772, _775, _778), vec3(_3383, _3384, _3385))) + _3460;
                                float _4576 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3468 = 1.0 - _3435;
                                float _3478 = (0.5 / (((_3467 * ((_3450 * _3468) + _3435)) + 9.9999999392252902907785028219223e-09) + (((_3467 * _3468) + _3435) * _3450))) * _3467;
                                float _4587 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3488 = (_3413 * _3390) * (((_3436 * 3.1415927410125732421875) * (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) / ((_3458 * _3458) * ((_3403 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3414 * _3259.y;
                                frontier_phi_83_pred_1 = _3414 * _3259.x;
                                frontier_phi_83_pred_2 = _3488 * _3271.z;
                                frontier_phi_83_pred_3 = _3488 * _3271.y;
                                frontier_phi_83_pred_4 = _3488 * _3271.x;
                                frontier_phi_83_pred_5 = _3414 * _3259.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3496 = frontier_phi_83_pred;
                            _3495 = frontier_phi_83_pred_1;
                            _3494 = frontier_phi_83_pred_2;
                            _3493 = frontier_phi_83_pred_3;
                            _3492 = frontier_phi_83_pred_4;
                            _3497 = frontier_phi_83_pred_5;
                            _3201 = _3495 + _3214;
                            _3202 = _3496 + _3215;
                            _3203 = _3497 + _3216;
                            _3198 = _3492 + _3211;
                            _3199 = _3493 + _3212;
                            _3200 = _3494 + _3213;
                            if (_3218 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3218;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3203;
                        frontier_phi_77_pred_1 = _3202;
                        frontier_phi_77_pred_2 = _3201;
                        frontier_phi_77_pred_3 = _3200;
                        frontier_phi_77_pred_4 = _3199;
                        frontier_phi_77_pred_5 = _3198;
                    }
                    _2840 = frontier_phi_77_pred;
                    _2838 = frontier_phi_77_pred_1;
                    _2836 = frontier_phi_77_pred_2;
                    _2834 = frontier_phi_77_pred_3;
                    _2832 = frontier_phi_77_pred_4;
                    _2830 = frontier_phi_77_pred_5;
                    uint _2996 = _2995 + 1u;
                    if (_2996 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2989 = _2830;
                        _2990 = _2832;
                        _2991 = _2834;
                        _2992 = _2836;
                        _2993 = _2838;
                        _2994 = _2840;
                        _2995 = _2996;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2834;
                frontier_phi_58_59_ladder_1 = _2840;
                frontier_phi_58_59_ladder_2 = _2838;
                frontier_phi_58_59_ladder_3 = _2836;
                frontier_phi_58_59_ladder_4 = _2832;
                frontier_phi_58_59_ladder_5 = _2830;
            }
            else
            {
                frontier_phi_58_59_ladder = _2712;
                frontier_phi_58_59_ladder_1 = _2718;
                frontier_phi_58_59_ladder_2 = _2716;
                frontier_phi_58_59_ladder_3 = _2714;
                frontier_phi_58_59_ladder_4 = _2710;
                frontier_phi_58_59_ladder_5 = _2708;
            }
            _2829 = frontier_phi_58_59_ladder_5;
            _2831 = frontier_phi_58_59_ladder_4;
            _2833 = frontier_phi_58_59_ladder;
            _2835 = frontier_phi_58_59_ladder_3;
            _2837 = frontier_phi_58_59_ladder_2;
            _2839 = frontier_phi_58_59_ladder_1;
        }
        float _2844 = isnan(1.0) ? _831 : (isnan(_831) ? 1.0 : min(_831, 1.0));
        _2620 = (_2844 * _2835) + _2053;
        _2622 = (_2844 * _2837) + _2055;
        _2624 = (_2844 * _2839) + _2057;
        _2626 = ((_2829 * _815) * _2844) + _2401;
        _2628 = ((_2831 * _817) * _2844) + _2403;
        _2630 = ((_2833 * _818) * _2844) + _2405;
    }
    else
    {
        _2620 = _2053;
        _2622 = _2055;
        _2624 = _2057;
        _2626 = _2401;
        _2628 = _2403;
        _2630 = _2405;
    }
    float _4603 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4614 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4625 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _2647 = ((isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2620 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _831))) + ((_2626 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1670)) * cbPerFrame._m0[3u].x);
    float _2648 = ((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2622 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _831))) + ((_2628 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1670)) * cbPerFrame._m0[3u].x);
    float _2649 = ((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2624 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _831))) + ((_2630 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1670)) * cbPerFrame._m0[3u].x);
    uint _2650 = _240 + 6u;
    float _2658 = _753 / cbSceneParam._m0[86u].x;
    float _2659 = _754 / cbSceneParam._m0[86u].y;
    vec4 _2673 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2658, _2659, (log2((isnan(cbSceneParam._m0[77u].w) ? _675 : (isnan(_675) ? cbSceneParam._m0[77u].w : min(_675, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2675 = _2673.x;
    float _2676 = _2673.y;
    float _2677 = _2673.z;
    float _2678 = _2673.w;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    if (_675 > cbSceneParam._m0[78u].w)
    {
        float _2733 = isnan(_675) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _675 : min(cbSceneParam._m0[80u].w, _675));
        float _2734 = _2733 / _675;
        float _2745 = _2734 * _726;
        float _2746 = _727 * _2734;
        float _2747 = (-0.0) - _2746;
        float _2749 = _2734 * _728;
        float _2751 = (cbSceneParam._m0[77u].w * _2747) / _2733;
        float _2752 = _2751 + cbSceneParam._m0[79u].w;
        float _2753 = cbSceneParam._m0[79u].w - _2746;
        float _2759 = sqrt(((_2745 * _2745) + (_2746 * _2746)) + (_2749 * _2749));
        float _2762 = (1.0 - (cbSceneParam._m0[77u].w / _2733)) * _2759;
        float _2767 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2769 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2946;
        if (abs((_2747 - _2751) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2946 = ((((_2752 > 0.0) ? exp2(_2767 * _2752) : (2.0 - exp2(_2769 * _2752))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2762;
        }
        else
        {
            float _2890 = 1.0 / cbSceneParam._m0[80u].x;
            float _2891 = isnan(_2753) ? _2752 : (isnan(_2752) ? _2753 : max(_2752, _2753));
            float _2892 = isnan(_2753) ? _2752 : (isnan(_2752) ? _2753 : min(_2752, _2753));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            float _2902 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : min(_2892, 0.0));
            _2946 = ((abs(_2759 / _2747) * cbSceneParam._m0[80u].y) * ((((_2901 - _2902) * 2.0) - ((exp2(_2767 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0)))) - exp2(_2767 * (isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0))))) * _2890)) - ((exp2(_2769 * _2901) - exp2(_2769 * _2902)) * _2890))) + (_2762 * cbSceneParam._m0[80u].z);
        }
        vec4 _2948 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2658, _2659, 1.0), 0.0);
        float _2957 = exp2((_2946 * (-1.44269502162933349609375)) * (1.0 - _2948.w));
        float _2958 = log2(_2957);
        float _2974 = log2(_2678);
        _2771 = (exp2(_2974 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].x)) * _2948.x) / cbSceneParam._m0[78u].x)) + _2675;
        _2773 = (exp2(_2974 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].y)) * _2948.y) / cbSceneParam._m0[78u].y)) + _2676;
        _2775 = (exp2(_2974 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].z)) * _2948.z) / cbSceneParam._m0[78u].z)) + _2677;
        _2777 = _2957 * _2678;
    }
    else
    {
        _2771 = _2675;
        _2773 = _2676;
        _2775 = _2677;
        _2777 = _2678;
    }
    bool _2984;
    vec4 _2787;
    vec4 _2809;
    float _2811;
    float _2815;
    float _2816;
    float _2817;
    float _2818;
    bool _2828;
    for (;;)
    {
        _2787 = cbMatDynParam._m0[0u];
        float _2789 = roundEven(_2787.y);
        bool _2790 = _2789 == 3.0;
        float _2791 = log2(_2777);
        float _2798 = exp2(_2791 * cbSceneParam._m0[78u].x) * _2647;
        float _2799 = exp2(_2791 * cbSceneParam._m0[78u].y) * _2648;
        float _2800 = exp2(_2791 * cbSceneParam._m0[78u].z) * _2649;
        float _2807 = _742 + (-0.5);
        _2809 = cbMtdParam._m0[1u];
        _2811 = _2809.y * _2807;
        float _2814 = (_2789 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2815 = _2814 * (_2790 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2771)));
        _2816 = _2814 * (_2790 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2773)));
        _2817 = _2814 * (_2790 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2775)));
        _2818 = _2807 * 0.999000012874603271484375;
        _2828 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2828)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2818) < 0.5)
            {
                _2984 = true;
                break;
            }
        }
        uint _2925 = _791 + uint(_2787.w);
        if ((cbInstanceData._m0[_2925].w < 1.0) && ((cbInstanceData._m0[_2925].w + _2818) < 0.5))
        {
            _2984 = true;
            break;
        }
        if ((_2811 + 1.0) < _2809.x)
        {
            _2984 = true;
            break;
        }
        _2984 = false;
        break;
    }
    float _3189;
    if (_2984)
    {
        discard_state = true;
        _3189 = 0.0;
    }
    else
    {
        _3189 = cbInstanceData._m0[_2650].w;
    }
    SV_Target.x = _2815;
    SV_Target.y = _2816;
    SV_Target.z = _2817;
    SV_Target.w = _3189;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2650].w;
    discard_exit();
}


