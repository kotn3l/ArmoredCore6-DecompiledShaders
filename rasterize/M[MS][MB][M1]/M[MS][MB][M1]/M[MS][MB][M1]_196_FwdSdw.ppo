#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1319;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _369 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_357 - _369) * cbMtdParam._m0[24u].y) + _369) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3926 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _394 = (_387 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _395 = (_387 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _396 = (_387 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _445 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _459 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_435 - _445) * cbMtdParam._m0[24u].y) + _445) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3937 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _467 = (_460 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394;
    float _468 = (_460 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395;
    float _469 = (_460 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396;
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _525 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _527 = _525.x;
    float _528 = _525.y;
    float _529 = _525.z;
    float _536 = ((_508.x - _527) * _387) + _527;
    float _537 = ((_508.y - _528) * _387) + _528;
    float _538 = ((_508.z - _529) * _387) + _529;
    vec4 _550 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _563 = ((_550.z - _538) * _460) + _538;
    float _566 = ((((_550.x - _536) * _460) + _536) * 2.0) + (-1.0);
    float _568 = ((((_550.y - _537) * _460) + _537) * 2.0) + (-1.0);
    float _569 = dot(vec2(_566, _568), vec2(_566, _568));
    float _3948 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _574 = sqrt(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _613 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _615 = _613.x;
    float _616 = 1.0 - _615;
    float _629 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_615 - _616) * cbMtdParam._m0[24u].z) + _616) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3959 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _637 = (_630 * ((_488.x * cbMtdParam._m0[18u].x) - _467)) + _467;
    float _638 = (_630 * ((_488.y * cbMtdParam._m0[18u].y) - _468)) + _468;
    float _639 = (_630 * ((_488.z * cbMtdParam._m0[18u].z) - _469)) + _469;
    vec4 _651 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _665 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _667 = _665.x;
    float _685 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _667) * _387) + _667;
    float _702 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _268) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _269) + cbTextureTilingScale._m0[21u].w)).x - _685) * _460) + _685;
    float _706 = ((_651.x - _702) * cbMtdParam._m0[19u].z) + _702;
    float _708 = _706 - (_706 * _630);
    float _712 = (cbMtdParam._m0[19u].w * (_588.z - _563)) + _563;
    vec4 _725 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _732 = (_725.x * 2.0) + (-1.0);
    float _733 = (_725.y * 2.0) + (-1.0);
    float _734 = dot(vec2(_732, _733), vec2(_732, _733));
    float _3970 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _742 = (_630 * (_725.z - _712)) + _712;
    float _745 = (((_588.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _566;
    float _746 = (((_588.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _568;
    float _758 = (((_732 - _745) + (cbMtdParam._m0[21u].x * _745)) * _630) + _745;
    float _759 = (((_733 - _746) + (cbMtdParam._m0[21u].x * _746)) * _630) + _746;
    float _760 = (_630 * (sqrt(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) - _574)) + _574;
    float _765 = cbMtdParam._m0[22u].x + _588.w;
    float _768 = fma(_760, _235 * NORMAL.x, fma(_759, _242 * TANGENT.x, (_228 * _220) * _758));
    float _771 = fma(_760, _235 * NORMAL.y, fma(_759, _242 * TANGENT.y, (_228 * _221) * _758));
    float _774 = fma(_760, _235 * NORMAL.z, fma(_759, _242 * TANGENT.z, (_228 * _222) * _758));
    float _778 = inversesqrt(dot(vec3(_768, _771, _774), vec3(_768, _771, _774)));
    float _779 = _778 * _768;
    float _780 = _778 * _771;
    float _781 = _778 * _774;
    float _3981 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _782 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4003 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4014 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4025 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4036 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _787 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _801 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _852 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _842);
    float _853 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _842);
    float _854 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _842);
    float _858 = inversesqrt(dot(vec3(_852, _853, _854), vec3(_852, _853, _854)));
    float _859 = _852 * _858;
    float _860 = _853 * _858;
    float _861 = _854 * _858;
    float _867 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _868 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _886 = fma(_781, cbSceneParam._m0[5u].z, fma(_780, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _779));
    float _889 = fma(_781, cbSceneParam._m0[6u].z, fma(_780, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _779));
    float _892 = fma(_781, cbSceneParam._m0[7u].z, fma(_780, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _779));
    uint _906 = (_248 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _912 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * cbInstanceData._m0[_906].x;
    float _913 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_906].y;
    float _914 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_906].z;
    float _4047 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _4058 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _918 = 1.0 - _787;
    float _919 = _915 * _918;
    float _920 = _916 * _918;
    float _921 = _917 * _918;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _787;
    float _927 = (_916 + (-0.039999999105930328369140625)) * _787;
    float _928 = (_917 + (-0.039999999105930328369140625)) * _787;
    float _929 = _926 + 0.039999999105930328369140625;
    float _931 = _927 + 0.039999999105930328369140625;
    float _932 = _928 + 0.039999999105930328369140625;
    vec4 _941 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _867, cbSceneParam._m0[86u].y * _868));
    float _945 = ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * TEXCOORD_5.w) * _941.x;
    float _946 = dot(vec3(_779, _780, _781), vec3(_859, _860, _861));
    float _949 = _946 * 2.0;
    float _953 = (_949 * _779) - _859;
    float _954 = (_949 * _780) - _860;
    float _955 = (_949 * _781) - _861;
    float _959 = abs(dot(vec3(_859, _860, _861), vec3(_779, _780, _781)));
    float _4080 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _961 = sqrt(_782);
    float _974 = exp2((_961 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_961 * 3.0));
    float _980 = (1.0 - _974) * ((_961 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _981 = _974 * _961;
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1318;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1043 = fma(_1017, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009));
        float _1047 = fma(_1017, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009));
        float _1051 = fma(_1017, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009));
        float _1076 = _1009 + _779;
        float _1077 = _1013 + _780;
        float _1078 = _1017 + _781;
        float _1088 = fma(_1078, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076)) - _1043;
        float _1089 = fma(_1078, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076)) - _1047;
        float _1090 = fma(_1078, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076)) - _1051;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1043 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1047 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[34u].z) + ((((((_1051 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1146 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1112.x + (-0.5));
        float _1148 = _1146 * (_1112.y + (-0.5));
        float _1149 = _1146 * (_1112.z + (-0.5));
        float _1156 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1119.x + (-0.5));
        float _1158 = _1156 * (_1119.y + (-0.5));
        float _1159 = _1156 * (_1119.z + (-0.5));
        float _1166 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1126.x + (-0.5));
        float _1168 = _1166 * (_1126.y + (-0.5));
        float _1169 = _1166 * (_1126.z + (-0.5));
        float _1176 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1133.x + (-0.5));
        float _1178 = _1176 * (_1133.y + (-0.5));
        float _1179 = _1176 * (_1133.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1200 = (dot(vec3(_779, _780, _781), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1210 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4128 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1212 + 1.0))) + _1217) * _1180;
        float _1227 = _1148 * 0.5;
        float _1228 = _1158 * 0.5;
        float _1229 = _1168 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_779, _780, _781), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4161 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1254 + 1.0))) + _1259) * _1181;
        float _1269 = _1149 * 0.5;
        float _1270 = _1159 * 0.5;
        float _1271 = _1169 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_779, _780, _781), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4194 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1296 + 1.0))) + _1301) * _1182;
        _1318 = _1149;
        _1320 = _1148;
        _1321 = _1147;
        _1322 = _1159;
        _1323 = _1158;
        _1324 = _1157;
        _1325 = _1169;
        _1326 = _1168;
        _1327 = _1167;
        _1328 = _1182;
        _1329 = _1181;
        _1330 = _1180;
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1319;
        _1320 = _1319;
        _1321 = _1319;
        _1322 = _1319;
        _1323 = _1319;
        _1324 = _1319;
        _1325 = _1319;
        _1326 = _1319;
        _1327 = _1319;
        _1328 = _1319;
        _1329 = _1319;
        _1330 = _1319;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1357 = fma(_1017, cbModelParam._m0[30u].z, fma(_1013, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009));
        float _1361 = fma(_1017, cbModelParam._m0[31u].z, fma(_1013, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009));
        float _1365 = fma(_1017, cbModelParam._m0[32u].z, fma(_1013, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009));
        float _1388 = _1009 + _779;
        float _1389 = _1013 + _780;
        float _1390 = _1017 + _781;
        float _1400 = fma(_1390, cbModelParam._m0[30u].z, fma(_1389, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1388)) - _1357;
        float _1401 = fma(_1390, cbModelParam._m0[31u].z, fma(_1389, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1388)) - _1361;
        float _1402 = fma(_1390, cbModelParam._m0[32u].z, fma(_1389, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1388)) - _1365;
        float _1406 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
        float _1419 = ((_1406 * _1400) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1357 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1406 * _1401) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1361 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1406 * _1402) / cbModelParam._m0[35u].z) + ((((((_1365 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        float _1456 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1423.x + (-0.5));
        float _1458 = _1456 * (_1423.y + (-0.5));
        float _1459 = _1456 * (_1423.z + (-0.5));
        float _1466 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1430.x + (-0.5));
        float _1468 = _1466 * (_1430.y + (-0.5));
        float _1469 = _1466 * (_1430.z + (-0.5));
        float _1476 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1437.x + (-0.5));
        float _1478 = _1476 * (_1437.y + (-0.5));
        float _1479 = _1476 * (_1437.z + (-0.5));
        float _1486 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1444.x + (-0.5));
        float _1488 = _1486 * (_1444.y + (-0.5));
        float _1489 = _1486 * (_1444.z + (-0.5));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = _1457 * 0.5;
        float _1494 = _1467 * 0.5;
        float _1495 = _1477 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_779, _780, _781), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4257 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1520 + 1.0))) + _1525) * _1490;
        float _1535 = _1458 * 0.5;
        float _1536 = _1468 * 0.5;
        float _1537 = _1478 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_779, _780, _781), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4290 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1562 + 1.0))) + _1567) * _1491;
        float _1577 = _1459 * 0.5;
        float _1578 = _1469 * 0.5;
        float _1579 = _1479 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_779, _780, _781), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4323 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1604 + 1.0))) + _1609) * _1492;
        _1626 = _1459;
        _1627 = _1458;
        _1628 = _1457;
        _1629 = _1469;
        _1630 = _1468;
        _1631 = _1467;
        _1632 = _1479;
        _1633 = _1478;
        _1634 = _1477;
        _1635 = _1492;
        _1636 = _1491;
        _1637 = _1490;
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
    }
    else
    {
        _1626 = _1319;
        _1627 = _1319;
        _1628 = _1319;
        _1629 = _1319;
        _1630 = _1319;
        _1631 = _1319;
        _1632 = _1319;
        _1633 = _1319;
        _1634 = _1319;
        _1635 = _1319;
        _1636 = _1319;
        _1637 = _1319;
        _1638 = 0.0;
        _1639 = 0.0;
        _1640 = 0.0;
    }
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1331)) + _1331;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1332)) + _1332;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1333)) + _1333;
    float _1673 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1651, cbSceneParam._m0[89u].y, _1650 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1651, cbSceneParam._m0[90u].y, _1650 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1651, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1650));
    float _1694 = _953 * 0.5;
    float _1695 = _954 * 0.5;
    float _1696 = _955 * 0.5;
    float _1697 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1700 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1703 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1737;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1710 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1318, _1322, _1325, _1328));
        float _1714 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1718 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1725 = dot(vec4(cbModelParam._m0[39u]), vec4(_1694, _1695, _1696, 1.0));
        _1737 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1737 = 1.0;
    }
    float _1748;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1739 = dot(vec4(cbModelParam._m0[40u]), vec4(_1694, _1695, _1696, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1739) ? 0.0 : (isnan(0.0) ? _1739 : max(0.0, _1739))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1752 = (_1748 * cbModelParam._m0[1u].x) + (_1737 * (1.0 - cbModelParam._m0[1u].x));
    float _1762 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _782);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1762 : min(cbModelParam._m0[25u].z, _1762));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1810 = fma(_1017, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009)) + cbModelParam._m0[13u].w;
        float _1814 = fma(_1017, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009)) + cbModelParam._m0[14u].w;
        float _1818 = fma(_1017, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009)) + cbModelParam._m0[15u].w;
        float _1821 = fma(_955, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953));
        float _1824 = fma(_955, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953));
        float _1827 = fma(_955, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953));
        float _1855;
        if (_1821 > 0.0)
        {
            _1855 = abs((1.0 - _1810) / _1821);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1810 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1855 = frontier_phi_14_12_ladder;
        }
        float _2026;
        if (_1824 > 0.0)
        {
            _2026 = abs((1.0 - _1814) / _1824);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1814 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2026 = frontier_phi_23_19_ladder;
        }
        float _2321;
        if (_1827 > 0.0)
        {
            _2321 = abs((1.0 - _1818) / _1827);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1818 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2321 = frontier_phi_35_30_ladder;
        }
        float _2323 = isnan(_2026) ? _1855 : (isnan(_1855) ? _2026 : min(_1855, _2026));
        float _2324 = isnan(_2321) ? _2323 : (isnan(_2323) ? _2321 : min(_2323, _2321));
        float _2328 = (_2324 * _1821) + _1810;
        float _2329 = (_2324 * _1824) + _1814;
        float _2330 = (_2324 * _1827) + _1818;
        float _2331 = _2324 * 9.9999997473787516355514526367188e-05;
        float _2333 = (-1.0) - _2331;
        float _2335 = _2331 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2330 > _2335) || ((_2330 < _2333) || ((_2329 > _2335) || ((_2329 < _2333) || ((_2328 < _2333) || (_2328 > _2335))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2330, cbModelParam._m0[9u].z, fma(_2329, cbModelParam._m0[9u].y, _2328 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2330, cbModelParam._m0[10u].z, fma(_2329, cbModelParam._m0[10u].y, _2328 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2330, cbModelParam._m0[11u].z, fma(_2329, cbModelParam._m0[11u].y, _2328 * cbModelParam._m0[11u].x))), _1763);
            frontier_phi_13_35_ladder = _2475.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2475.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2475.x * cbModelParam._m0[1u].y;
        }
        _1843 = frontier_phi_13_35_ladder_2;
        _1845 = frontier_phi_13_35_ladder_1;
        _1847 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_953, _954, _955), _1763);
        _1843 = _1831.x * cbModelParam._m0[1u].y;
        _1845 = _1831.y * cbModelParam._m0[1u].y;
        _1847 = _1831.z * cbModelParam._m0[1u].y;
    }
    float _1851 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _782);
    float _1852 = isnan(_1851) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1851 : min(cbModelParam._m0[25u].w, _1851));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1905 = fma(_1017, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009)) + cbModelParam._m0[21u].w;
        float _1909 = fma(_1017, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009)) + cbModelParam._m0[22u].w;
        float _1913 = fma(_1017, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009)) + cbModelParam._m0[23u].w;
        float _1916 = fma(_955, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953));
        float _1919 = fma(_955, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953));
        float _1922 = fma(_955, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953));
        float _2031;
        if (_1916 > 0.0)
        {
            _2031 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2031 = frontier_phi_25_21_ladder;
        }
        float _2348;
        if (_1919 > 0.0)
        {
            _2348 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2348 = frontier_phi_37_32_ladder;
        }
        float _2686;
        if (_1922 > 0.0)
        {
            _2686 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2686 = frontier_phi_47_44_ladder;
        }
        float _2688 = isnan(_2348) ? _2031 : (isnan(_2031) ? _2348 : min(_2031, _2348));
        float _2689 = isnan(_2686) ? _2688 : (isnan(_2688) ? _2686 : min(_2688, _2686));
        float _2693 = (_2689 * _1916) + _1905;
        float _2694 = (_2689 * _1919) + _1909;
        float _2695 = (_2689 * _1922) + _1913;
        float _2696 = _2689 * 9.9999997473787516355514526367188e-05;
        float _2697 = (-1.0) - _2696;
        float _2699 = _2696 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2695 > _2699) || ((_2695 < _2697) || ((_2694 > _2699) || ((_2694 < _2697) || ((_2693 < _2697) || (_2693 > _2699))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2817 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2695, cbModelParam._m0[17u].z, fma(_2694, cbModelParam._m0[17u].y, _2693 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2695, cbModelParam._m0[18u].z, fma(_2694, cbModelParam._m0[18u].y, _2693 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2695, cbModelParam._m0[19u].z, fma(_2694, cbModelParam._m0[19u].y, _2693 * cbModelParam._m0[19u].x))), _1852);
            frontier_phi_22_47_ladder = _2817.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2817.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2817.x * cbModelParam._m0[1u].z;
        }
        _1941 = frontier_phi_22_47_ladder_2;
        _1943 = frontier_phi_22_47_ladder_1;
        _1945 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_953, _954, _955), _1852);
        _1941 = _1925.x * cbModelParam._m0[1u].z;
        _1943 = _1925.y * cbModelParam._m0[1u].z;
        _1945 = _1925.z * cbModelParam._m0[1u].z;
    }
    float _1958 = (((_980 * _929) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1941 - _1843)) + _1843);
    float _1960 = (((_980 * _931) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1943 - _1845)) + _1845);
    float _1962 = (((_980 * _932) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1945 - _1847)) + _1847);
    float _1965 = fma(_1962, cbSceneParam._m0[89u].z, fma(_1960, cbSceneParam._m0[89u].y, _1958 * cbSceneParam._m0[89u].x));
    float _1968 = fma(_1962, cbSceneParam._m0[90u].z, fma(_1960, cbSceneParam._m0[90u].y, _1958 * cbSceneParam._m0[90u].x));
    float _1971 = fma(_1962, cbSceneParam._m0[91u].z, fma(_1960, cbSceneParam._m0[91u].y, _1958 * cbSceneParam._m0[91u].x));
    float _2005 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2009 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2013 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2017 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2018 = _2005 / _2017;
    float _2019 = _2009 / _2017;
    float _2020 = _2013 / _2017;
    float _2167;
    float _2168;
    float _2169;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2047 = ((uint(_2020 > cbSceneParam._m0[59u].y) + uint(_2020 > cbSceneParam._m0[59u].x)) + uint(_2020 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2048 = _2047 + 43u;
        uint _2056 = _2047 + 44u;
        uint _2064 = _2047 + 45u;
        uint _2072 = _2047 + 46u;
        float _2083 = fma(_2017, cbSceneParam._m0[_2048].w, fma(_2013, cbSceneParam._m0[_2048].z, fma(_2009, cbSceneParam._m0[_2048].y, _2005 * cbSceneParam._m0[_2048].x)));
        float _2087 = fma(_2017, cbSceneParam._m0[_2056].w, fma(_2013, cbSceneParam._m0[_2056].z, fma(_2009, cbSceneParam._m0[_2056].y, _2005 * cbSceneParam._m0[_2056].x)));
        float _2095 = fma(_2017, cbSceneParam._m0[_2072].w, fma(_2013, cbSceneParam._m0[_2072].z, fma(_2009, cbSceneParam._m0[_2072].y, _2005 * cbSceneParam._m0[_2072].x)));
        float _2100 = cbSceneParam._m0[33u].z * _2095;
        float _2102 = cbSceneParam._m0[33u].w * _2095;
        float _2105 = fma(_2017, cbSceneParam._m0[_2064].w, fma(_2013, cbSceneParam._m0[_2064].z, fma(_2009, cbSceneParam._m0[_2064].y, _2005 * cbSceneParam._m0[_2064].x))) / _2095;
        float _2153 = (cbSceneParam._m0[33u].x - sqrt(((_2019 * _2019) + (_2018 * _2018)) + (_2020 * _2020))) * cbSceneParam._m0[33u].y;
        float _4449 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2160 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2100 + _2083) / _2095, (_2102 + _2087) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 + _2083) / _2095, (_2087 - _2100) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 - _2100) / _2095, (_2087 - _2102) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 - _2102) / _2095, (_2100 + _2087) / _2095), _2105), 0.0)).x), vec4(0.25)));
        _2167 = 1.0 - (_2160 * cbSceneParam._m0[34u].x);
        _2168 = 1.0 - (_2160 * cbSceneParam._m0[34u].y);
        _2169 = 1.0 - (_2160 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2167 = 1.0;
        _2168 = 1.0;
        _2169 = 1.0;
    }
    float _2233;
    float _2235;
    float _2237;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2221 = fma(_2017, cbSceneParam._m0[63u].w, fma(_2013, cbSceneParam._m0[63u].z, fma(_2009, cbSceneParam._m0[63u].y, _2005 * cbSceneParam._m0[63u].x)));
        float _2222 = fma(_2017, cbSceneParam._m0[60u].w, fma(_2013, cbSceneParam._m0[60u].z, fma(_2009, cbSceneParam._m0[60u].y, _2005 * cbSceneParam._m0[60u].x))) / _2221;
        float _2223 = fma(_2017, cbSceneParam._m0[61u].w, fma(_2013, cbSceneParam._m0[61u].z, fma(_2009, cbSceneParam._m0[61u].y, _2005 * cbSceneParam._m0[61u].x))) / _2221;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2222 >= cbSceneParam._m0[64u].x) && (_2223 >= cbSceneParam._m0[64u].y)) && (_2222 <= cbSceneParam._m0[64u].z)) && (_2223 <= cbSceneParam._m0[64u].w))
        {
            float _2361 = fma(_2017, cbSceneParam._m0[62u].w, fma(_2013, cbSceneParam._m0[62u].z, fma(_2009, cbSceneParam._m0[62u].y, _2005 * cbSceneParam._m0[62u].x))) / _2221;
            float _2365 = isnan(cbSceneParam._m0[41u].w) ? _2361 : (isnan(_2361) ? cbSceneParam._m0[41u].w : max(_2361, cbSceneParam._m0[41u].w));
            float _2408 = (cbSceneParam._m0[33u].x - sqrt(((_2019 * _2019) + (_2018 * _2018)) + (_2020 * _2020))) * cbSceneParam._m0[33u].y;
            float _4465 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
            float _2415 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2222, cbSceneParam._m0[33u].w + _2223), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2222, _2223 - cbSceneParam._m0[33u].z), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2222 - cbSceneParam._m0[33u].z, _2223 - cbSceneParam._m0[33u].w), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2222 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2223), _2365), 0.0)).x), vec4(0.25)));
            float _2419 = 1.0 - (_2415 * cbSceneParam._m0[34u].x);
            float _2420 = 1.0 - (_2415 * cbSceneParam._m0[34u].y);
            float _2421 = 1.0 - (_2415 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2421) ? _2169 : (isnan(_2169) ? _2421 : min(_2169, _2421));
            frontier_phi_34_33_ladder_1 = isnan(_2420) ? _2168 : (isnan(_2168) ? _2420 : min(_2168, _2420));
            frontier_phi_34_33_ladder_2 = isnan(_2419) ? _2167 : (isnan(_2167) ? _2419 : min(_2167, _2419));
        }
        else
        {
            frontier_phi_34_33_ladder = _2169;
            frontier_phi_34_33_ladder_1 = _2168;
            frontier_phi_34_33_ladder_2 = _2167;
        }
        _2233 = frontier_phi_34_33_ladder_2;
        _2235 = frontier_phi_34_33_ladder_1;
        _2237 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2233 = _2167;
        _2235 = _2168;
        _2237 = _2169;
    }
    uvec4 _2242 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2244 = _2242.x * 14u;
    uint _2245 = _2244 + 13u;
    float _2252 = _945 + (-1.0);
    float _2257 = (cbLight._m0[_2245].x * _2252) + 1.0;
    float _2258 = (cbLight._m0[_2245].y * _2252) + 1.0;
    float _2259 = (cbLight._m0[_2245].z * _2252) + 1.0;
    float _2260 = (cbLight._m0[_2245].w * _2252) + 1.0;
    uint _2261 = _2244 + 5u;
    float _2267 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2271 = _2244 + 4u;
    float _2280 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
    uint _2284 = _2244 | 1u;
    float _2295 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_779, _780, _781));
    float _2298 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_779, _780, _781));
    float _4501 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _4512 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2303 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * 0.3183098733425140380859375;
    float _2305 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * 0.3183098733425140380859375;
    float _2312 = ((cbLight._m0[_2261].x * _2267) * _2305) + (((cbLight._m0[_2271].x * _2233) * _2280) * _2303);
    float _2313 = ((_2267 * cbLight._m0[_2261].y) * _2305) + (((cbLight._m0[_2271].y * _2235) * _2280) * _2303);
    float _2314 = ((_2267 * cbLight._m0[_2261].z) * _2305) + (((cbLight._m0[_2271].z * _2237) * _2280) * _2303);
    uvec4 _2318 = floatBitsToUint(cbLight._m0[_2244 + 12u]);
    bool _2320 = _2318.x == 0u;
    float _2422;
    float _2424;
    float _2426;
    if (_2320)
    {
        _2422 = _2312;
        _2424 = _2313;
        _2426 = _2314;
    }
    else
    {
        uint _2430 = _2244 + 6u;
        float _2446 = (dot(vec3(cbLight._m0[_2244 + 2u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2447 = _2446 * _2446;
        float _4523 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2448 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2449 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2422 = (((cbLight._m0[_2430].x * 0.3183098733425140380859375) * _2448) * _2449) + _2312;
        _2424 = (((cbLight._m0[_2430].y * 0.3183098733425140380859375) * _2448) * _2449) + _2313;
        _2426 = (((cbLight._m0[_2430].z * 0.3183098733425140380859375) * _2448) * _2449) + _2314;
    }
    bool _2429 = _2318.y == 0u;
    float _2484;
    float _2486;
    float _2488;
    if (_2429)
    {
        _2484 = _2422;
        _2486 = _2424;
        _2488 = _2426;
    }
    else
    {
        uint _2657 = _2244 + 7u;
        float _2673 = (dot(vec3(cbLight._m0[_2244 + 3u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2674 = _2673 * _2673;
        float _4539 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2675 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2676 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2484 = (((cbLight._m0[_2657].x * 0.3183098733425140380859375) * _2675) * _2676) + _2422;
        _2486 = (((cbLight._m0[_2657].y * 0.3183098733425140380859375) * _2675) * _2676) + _2424;
        _2488 = (((cbLight._m0[_2657].z * 0.3183098733425140380859375) * _2675) * _2676) + _2426;
    }
    uint _2491 = _2244 + 8u;
    float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _782) * 0.949999988079071044921875);
    float _2505 = _2504 * _2504;
    float _2506 = cbLight._m0[_2244].x + _859;
    float _2507 = cbLight._m0[_2244].y + _860;
    float _2508 = cbLight._m0[_2244].z + _861;
    float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
    float _2513 = _2512 * _2506;
    float _2514 = _2512 * _2507;
    float _2515 = _2512 * _2508;
    float _2516 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2244].xyz));
    float _4555 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2519 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _4566 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _2520 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2521 = dot(vec3(_779, _780, _781), vec3(_2513, _2514, _2515));
    float _4577 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2524 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2525 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2513, _2514, _2515));
    float _4588 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2529 = _2505 * _2505;
    float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
    float _2541 = exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0);
    float _2542 = 0.959999978542327880859375 - _926;
    float _2544 = 0.959999978542327880859375 - _927;
    float _2545 = 0.959999978542327880859375 - _928;
    float _2552 = 1.0 - _2505;
    float _2563 = (0.5 / (((_2520 * ((_2519 * _2552) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2552) + _2505) * _2519))) * _2519;
    float _4599 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2565 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
    uint _2579 = _2244 + 9u;
    float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _782) * 0.949999988079071044921875);
    float _2591 = _2590 * _2590;
    float _2592 = cbLight._m0[_2284].x + _859;
    float _2593 = cbLight._m0[_2284].y + _860;
    float _2594 = cbLight._m0[_2284].z + _861;
    float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
    float _2599 = _2598 * _2592;
    float _2600 = _2598 * _2593;
    float _2601 = _2598 * _2594;
    float _2602 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2284].xyz));
    float _4610 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2605 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2606 = dot(vec3(_779, _780, _781), vec3(_2599, _2600, _2601));
    float _4621 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2609 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _2610 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2599, _2600, _2601));
    float _4632 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2614 = _2591 * _2591;
    float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
    float _2625 = exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0);
    float _2632 = 1.0 - _2591;
    float _2642 = (0.5 / (((_2520 * ((_2605 * _2632) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2632) + _2591) * _2605))) * _2605;
    float _4643 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2644 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
    float _2654 = (((((_2625 * _2542) + _929) * cbLight._m0[_2579].x) * _2644) * _2267) + ((((cbLight._m0[_2491].x * _2233) * ((_2541 * _2542) + _929)) * _2565) * _2280);
    float _2655 = (((((_2625 * _2544) + _931) * cbLight._m0[_2579].y) * _2644) * _2267) + ((((cbLight._m0[_2491].y * _2235) * ((_2541 * _2544) + _931)) * _2565) * _2280);
    float _2656 = (((((_2625 * _2545) + _932) * cbLight._m0[_2579].z) * _2644) * _2267) + ((((cbLight._m0[_2491].z * _2237) * ((_2541 * _2545) + _932)) * _2565) * _2280);
    float _2712;
    float _2714;
    float _2716;
    if (_2320)
    {
        _2712 = _2654;
        _2714 = _2655;
        _2716 = _2656;
    }
    else
    {
        uint _2718 = _2244 + 2u;
        uint _2722 = _2244 + 10u;
        float _2736 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2718].w)) * _782) * 0.949999988079071044921875);
        float _2737 = _2736 * _2736;
        float _2738 = cbLight._m0[_2718].x + _859;
        float _2739 = cbLight._m0[_2718].y + _860;
        float _2740 = cbLight._m0[_2718].z + _861;
        float _2744 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
        float _2745 = _2744 * _2738;
        float _2746 = _2744 * _2739;
        float _2747 = _2744 * _2740;
        float _2748 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2718].xyz));
        float _4654 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2751 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2752 = dot(vec3(_779, _780, _781), vec3(_2745, _2746, _2747));
        float _4665 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2755 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2756 = dot(vec3(cbLight._m0[_2718].xyz), vec3(_2745, _2746, _2747));
        float _4676 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2760 = _2737 * _2737;
        float _2764 = ((_2755 * _2755) * (_2760 + (-1.0))) + 1.0;
        float _2771 = exp2(log2(1.0 - (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) * 5.0);
        float _2778 = 1.0 - _2737;
        float _2788 = (0.5 / (((_2520 * ((_2751 * _2778) + _2737)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2778) + _2737) * _2751))) * _2751;
        float _4687 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2790 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2760 / ((_2764 * _2764) * 3.141590118408203125));
        float _2791 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2712 = (((((_2771 * _2542) + _929) * cbLight._m0[_2722].x) * _2790) * _2791) + _2654;
        _2714 = (((((_2771 * _2544) + _931) * cbLight._m0[_2722].y) * _2790) * _2791) + _2655;
        _2716 = (((((_2771 * _2545) + _932) * cbLight._m0[_2722].z) * _2790) * _2791) + _2656;
    }
    float _2822;
    float _2824;
    float _2826;
    if (_2429)
    {
        _2822 = _2712;
        _2824 = _2714;
        _2826 = _2716;
    }
    else
    {
        uint _2833 = _2244 + 3u;
        uint _2837 = _2244 + 11u;
        float _2851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2833].w)) * _782) * 0.949999988079071044921875);
        float _2852 = _2851 * _2851;
        float _2853 = cbLight._m0[_2833].x + _859;
        float _2854 = cbLight._m0[_2833].y + _860;
        float _2855 = cbLight._m0[_2833].z + _861;
        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
        float _2860 = _2859 * _2853;
        float _2861 = _2859 * _2854;
        float _2862 = _2859 * _2855;
        float _2863 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2833].xyz));
        float _4703 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2866 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2867 = dot(vec3(_779, _780, _781), vec3(_2860, _2861, _2862));
        float _4714 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2870 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2871 = dot(vec3(cbLight._m0[_2833].xyz), vec3(_2860, _2861, _2862));
        float _4725 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2875 = _2852 * _2852;
        float _2879 = ((_2870 * _2870) * (_2875 + (-1.0))) + 1.0;
        float _2886 = exp2(log2(1.0 - (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0)))) * 5.0);
        float _2893 = 1.0 - _2852;
        float _2903 = (0.5 / (((_2520 * ((_2866 * _2893) + _2852)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2893) + _2852) * _2866))) * _2866;
        float _4736 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2905 = (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2875 / ((_2879 * _2879) * 3.141590118408203125));
        float _2906 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2822 = (((((_2886 * _2542) + _929) * cbLight._m0[_2837].x) * _2905) * _2906) + _2712;
        _2824 = (((((_2886 * _2544) + _931) * cbLight._m0[_2837].y) * _2905) * _2906) + _2714;
        _2826 = (((((_2886 * _2545) + _932) * cbLight._m0[_2837].z) * _2905) * _2906) + _2716;
    }
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    if (_2242.y == 0u)
    {
        uvec4 _2927 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2928 = _2927.x;
        uint _2939 = uint((float(_2927.y) * floor(float(uint(cbSceneParam._m0[85u].y * _868) / _2928))) + floor(float(uint(cbSceneParam._m0[85u].x * _867) / _2928)));
        float _2949 = (log2(_2020 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2950 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        uint _2953 = uint(isnan(14.0) ? _2950 : (isnan(_2950) ? 14.0 : min(_2950, 14.0)));
        uvec4 _2958 = texelFetch(g_lightClusterGridBuffer, int(((_2953 << 2u) + (_2939 << 6u)) >> 2u));
        uint _2959 = _2958.x;
        uint _2960 = _2927.z;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        if (((((1u << ((_2960 >> 4u) & 15u)) + 4294967295u) & _2959) == 0u) || ((_2960 & 240u) == 0u))
        {
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
        }
        else
        {
            float _3040;
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            uint _3190 = 0u;
            uint _3199;
            bool _3200;
            for (;;)
            {
                _3199 = texelFetch(g_lightClassification, int((((_2953 << 5u) + (_2939 << 9u)) + (_3190 << 2u)) >> 2u)).x;
                _3200 = _3199 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3200)
                {
                    frontier_phi_66_pred = _3189;
                    frontier_phi_66_pred_1 = _3188;
                    frontier_phi_66_pred_2 = _3187;
                    frontier_phi_66_pred_3 = _3186;
                    frontier_phi_66_pred_4 = _3185;
                    frontier_phi_66_pred_5 = _3184;
                }
                else
                {
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    uint _3314;
                    _3308 = _3184;
                    _3309 = _3185;
                    _3310 = _3186;
                    _3311 = _3187;
                    _3312 = _3188;
                    _3313 = _3189;
                    _3314 = _3199;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    for (;;)
                    {
                        uint _3318 = uint(findLSB(_3314)) + (_3190 << 5u);
                        uint _3315 = (_3314 + 4294967295u) & _3314;
                        uint _3320 = _3318 * 48u;
                        vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3340 = (_3318 * 48u) + 4u;
                        vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 3u)).x));
                        uint _3359 = (_3318 * 48u) + 8u;
                        vec3 _3370 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x));
                        float _3374 = _3334.x - _2018;
                        float _3375 = _3334.y - _2019;
                        float _3376 = _3334.z - _2020;
                        float _3377 = dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376));
                        float _3380 = inversesqrt(_3377);
                        float _3381 = _3380 * _3374;
                        float _3382 = _3380 * _3375;
                        float _3383 = _3380 * _3376;
                        float _3384 = dot(vec3(_886, _889, _892), vec3(_3381, _3382, _3383));
                        float _3389 = 1.0 - (_3377 * _3334.w);
                        float _4762 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3390 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3391 = sqrt(_3377) * _3353.w;
                        float _3394 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                        float _3395 = _3394 * _3394;
                        float _3398 = ((1.0 - _3395) * _3384) + _3395;
                        float _3401 = _3391 * _3391;
                        float _3405 = ((isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))) * _3390) / ((_3401 * 0.699999988079071044921875) + 1.0);
                        float _3409 = (-0.0) - _2018;
                        float _3410 = (-0.0) - _2019;
                        float _3411 = (-0.0) - _2020;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3425 = exp2(log2(1.0 / ((_3401 * 3.5) + 5.0)) * 0.25);
                        float _3426 = 1.0 - _961;
                        float _3433 = sqrt(1.0 - ((1.0 - (_3426 * _3426)) * (1.0 - (_3425 * _3425))));
                        float _3434 = _3433 * _3433;
                        float _3435 = _3434 * _3434;
                        float _3436 = _3416 + _3381;
                        float _3437 = _3417 + _3382;
                        float _3438 = _3418 + _3383;
                        float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                        float _3446 = dot(vec3(_886, _889, _892), vec3(_3416, _3417, _3418));
                        float _4778 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3449 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3450 = dot(vec3(_886, _889, _892), vec3(_3442 * _3436, _3442 * _3437, _3442 * _3438));
                        float _4789 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3453 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3457 = ((_3453 * _3453) * (_3435 + (-1.0))) + 1.0;
                        float _3458 = _3394 * _3434;
                        float _3459 = _3458 * _3458;
                        float _3462 = ((1.0 - _3459) * _3384) + _3459;
                        float _4800 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3463 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3464 = 1.0 - _3434;
                        float _3474 = (0.5 / (((_3463 * ((_3449 * _3464) + _3434)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3434) * _3449))) * _3463;
                        float _4811 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3485 = (((_3435 * 3.1415927410125732421875) * (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) / ((_3457 * _3457) * ((_3401 * 2.1991131305694580078125) + 3.141590118408203125))) * _3390;
                        _3243 = (_3405 * _3353.x) + _3311;
                        _3244 = (_3405 * _3353.y) + _3312;
                        _3245 = (_3405 * _3353.z) + _3313;
                        _3240 = (_3485 * _3370.x) + _3308;
                        _3241 = (_3485 * _3370.y) + _3309;
                        _3242 = (_3485 * _3370.z) + _3310;
                        if (_3315 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3308 = _3240;
                            _3309 = _3241;
                            _3310 = _3242;
                            _3311 = _3243;
                            _3312 = _3244;
                            _3313 = _3245;
                            _3314 = _3315;
                        }
                    }
                    frontier_phi_66_pred = _3245;
                    frontier_phi_66_pred_1 = _3244;
                    frontier_phi_66_pred_2 = _3243;
                    frontier_phi_66_pred_3 = _3242;
                    frontier_phi_66_pred_4 = _3241;
                    frontier_phi_66_pred_5 = _3240;
                }
                _3050 = frontier_phi_66_pred;
                _3048 = frontier_phi_66_pred_1;
                _3046 = frontier_phi_66_pred_2;
                _3044 = frontier_phi_66_pred_3;
                _3042 = frontier_phi_66_pred_4;
                _3040 = frontier_phi_66_pred_5;
                uint _3191 = _3190 + 1u;
                if (_3191 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3184 = _3040;
                    _3185 = _3042;
                    _3186 = _3044;
                    _3187 = _3046;
                    _3188 = _3048;
                    _3189 = _3050;
                    _3190 = _3191;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
        }
        uvec4 _3053 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3054 = _3053.z;
        uint _3056 = (_3054 >> 8u) & 15u;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        if (((4294967295u << _3056) & _2959) == 0u)
        {
            _3152 = _3039;
            _3154 = _3041;
            _3156 = _3043;
            _3158 = _3045;
            _3160 = _3047;
            _3162 = _3049;
        }
        else
        {
            float _3177 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
            float _3178 = _3177 * _2018;
            float _3179 = _3177 * _2019;
            float _3180 = _3177 * _2020;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3056 < ((_3054 >> 12u) & 15u))
            {
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3291 = _3039;
                float _3292 = _3041;
                float _3293 = _3043;
                float _3294 = _3045;
                float _3295 = _3047;
                float _3296 = _3049;
                uint _3297 = _3056;
                uint _3306;
                bool _3307;
                for (;;)
                {
                    _3306 = texelFetch(g_lightClassification, int((((_2953 << 5u) + (_2939 << 9u)) + (_3297 << 2u)) >> 2u)).x;
                    _3307 = _3306 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3307)
                    {
                        frontier_phi_72_pred = _3296;
                        frontier_phi_72_pred_1 = _3295;
                        frontier_phi_72_pred_2 = _3294;
                        frontier_phi_72_pred_3 = _3293;
                        frontier_phi_72_pred_4 = _3292;
                        frontier_phi_72_pred_5 = _3291;
                    }
                    else
                    {
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3503 = _3291;
                        float _3504 = _3292;
                        float _3505 = _3293;
                        float _3506 = _3294;
                        float _3507 = _3295;
                        float _3508 = _3296;
                        uint _3509 = _3306;
                        uint _3510;
                        vec4 _3535;
                        float _3536;
                        vec4 _3551;
                        vec3 _3563;
                        vec4 _3578;
                        vec4 _3593;
                        float _3639;
                        bool _3640;
                        for (;;)
                        {
                            uint _3520 = ((_3297 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3509));
                            _3510 = (_3509 + 4294967295u) & _3509;
                            uint _3522 = _3520 * 40u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            _3536 = _3535.w;
                            uint _3538 = (_3520 * 40u) + 4u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3553 = (_3520 * 40u) + 8u;
                            _3563 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x));
                            uint _3565 = (_3520 * 40u) + 16u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3520 * 40u) + 20u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3520 * 40u) + 24u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3614 = (_3520 * 40u) + 28u;
                            vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            _3639 = fma(_2020, _3627.z, fma(_2019, _3627.y, _3627.x * _2018)) + _3627.w;
                            _3640 = !((fma(_2020, _3608.z, fma(_2019, _3608.y, _3608.x * _2018)) + _3608.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3640)
                            {
                                float _3667 = _3535.x - _2018;
                                float _3668 = _3535.y - _2019;
                                float _3669 = _3535.z - _2020;
                                float _3670 = dot(vec3(_3667, _3668, _3669), vec3(_3667, _3668, _3669));
                                float _3673 = inversesqrt(_3670);
                                float _3674 = _3673 * _3667;
                                float _3675 = _3673 * _3668;
                                float _3676 = _3673 * _3669;
                                float _3680 = 1.0 - (_3670 / (_3536 * _3536));
                                float _4822 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3685 = sqrt(_3670) * _3551.w;
                                float _3687 = 1.39999997615814208984375 / (_3685 + 1.39999997615814208984375);
                                float _3688 = _3687 * _3687;
                                float _3691 = ((1.0 - _3688) * dot(vec3(_3674, _3675, _3676), vec3(_886, _889, _892))) + _3688;
                                float _3694 = _3685 * _3685;
                                float _3698 = (fma(_2020, _3578.z, fma(_2019, _3578.y, _3578.x * _2018)) + _3578.w) / _3639;
                                float _3699 = (fma(_2020, _3593.z, fma(_2019, _3593.y, _3593.x * _2018)) + _3593.w) / _3639;
                                float _3703 = 1.0 - dot(vec2(_3698, _3699), vec2(_3698, _3699));
                                float _4838 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3705 = _3704 * (((isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0))) * _3681) / ((_3694 * 0.699999988079071044921875) + 1.0));
                                float _3717 = exp2(log2(1.0 / ((_3694 * 3.5) + 5.0)) * 0.25);
                                float _3718 = 1.0 - _961;
                                float _3725 = sqrt(1.0 - ((1.0 - (_3718 * _3718)) * (1.0 - (_3717 * _3717))));
                                float _3726 = _3725 * _3725;
                                float _3727 = _3726 * _3726;
                                float _3728 = _3674 - _3178;
                                float _3729 = _3675 - _3179;
                                float _3730 = _3676 - _3180;
                                float _3734 = inversesqrt(dot(vec3(_3728, _3729, _3730), vec3(_3728, _3729, _3730)));
                                float _3738 = dot(vec3(_886, _889, _892), vec3((-0.0) - _3178, (-0.0) - _3179, (-0.0) - _3180));
                                float _4849 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3741 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3742 = dot(vec3(_886, _889, _892), vec3(_3734 * _3728, _3734 * _3729, _3734 * _3730));
                                float _4860 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3745 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3749 = ((_3745 * _3745) * (_3727 + (-1.0))) + 1.0;
                                float _3750 = _3687 * _3726;
                                float _3751 = _3750 * _3750;
                                float _3757 = ((1.0 - _3751) * dot(vec3(_886, _889, _892), vec3(_3674, _3675, _3676))) + _3751;
                                float _4871 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3759 = 1.0 - _3726;
                                float _3769 = (0.5 / (((_3758 * ((_3741 * _3759) + _3726)) + 9.9999999392252902907785028219223e-09) + (((_3758 * _3759) + _3726) * _3741))) * _3758;
                                float _4882 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3779 = (_3704 * _3681) * (((_3727 * 3.1415927410125732421875) * (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) / ((_3749 * _3749) * ((_3694 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3705 * _3551.y;
                                frontier_phi_78_pred_1 = _3705 * _3551.x;
                                frontier_phi_78_pred_2 = _3779 * _3563.z;
                                frontier_phi_78_pred_3 = _3779 * _3563.y;
                                frontier_phi_78_pred_4 = _3779 * _3563.x;
                                frontier_phi_78_pred_5 = _3705 * _3551.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3787 = frontier_phi_78_pred;
                            _3786 = frontier_phi_78_pred_1;
                            _3785 = frontier_phi_78_pred_2;
                            _3784 = frontier_phi_78_pred_3;
                            _3783 = frontier_phi_78_pred_4;
                            _3788 = frontier_phi_78_pred_5;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            _3490 = _3783 + _3503;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            if (_3510 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3510;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3495;
                        frontier_phi_72_pred_1 = _3494;
                        frontier_phi_72_pred_2 = _3493;
                        frontier_phi_72_pred_3 = _3492;
                        frontier_phi_72_pred_4 = _3491;
                        frontier_phi_72_pred_5 = _3490;
                    }
                    _3163 = frontier_phi_72_pred;
                    _3161 = frontier_phi_72_pred_1;
                    _3159 = frontier_phi_72_pred_2;
                    _3157 = frontier_phi_72_pred_3;
                    _3155 = frontier_phi_72_pred_4;
                    _3153 = frontier_phi_72_pred_5;
                    uint _3298 = _3297 + 1u;
                    if (_3298 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3291 = _3153;
                        _3292 = _3155;
                        _3293 = _3157;
                        _3294 = _3159;
                        _3295 = _3161;
                        _3296 = _3163;
                        _3297 = _3298;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3163;
                frontier_phi_60_61_ladder_1 = _3161;
                frontier_phi_60_61_ladder_2 = _3157;
                frontier_phi_60_61_ladder_3 = _3155;
                frontier_phi_60_61_ladder_4 = _3153;
                frontier_phi_60_61_ladder_5 = _3159;
            }
            else
            {
                frontier_phi_60_61_ladder = _3049;
                frontier_phi_60_61_ladder_1 = _3047;
                frontier_phi_60_61_ladder_2 = _3043;
                frontier_phi_60_61_ladder_3 = _3041;
                frontier_phi_60_61_ladder_4 = _3039;
                frontier_phi_60_61_ladder_5 = _3045;
            }
            _3152 = frontier_phi_60_61_ladder_4;
            _3154 = frontier_phi_60_61_ladder_3;
            _3156 = frontier_phi_60_61_ladder_2;
            _3158 = frontier_phi_60_61_ladder_5;
            _3160 = frontier_phi_60_61_ladder_1;
            _3162 = frontier_phi_60_61_ladder;
        }
        float _3167 = isnan(1.0) ? _945 : (isnan(_945) ? 1.0 : min(_945, 1.0));
        _2972 = (_3167 * _3158) + _2484;
        _2974 = (_3167 * _3160) + _2486;
        _2976 = (_3167 * _3162) + _2488;
        _2978 = ((_3152 * _929) * _3167) + _2822;
        _2980 = ((_3154 * _931) * _3167) + _2824;
        _2982 = ((_3156 * _932) * _3167) + _2826;
    }
    else
    {
        _2972 = _2484;
        _2974 = _2486;
        _2976 = _2488;
        _2978 = _2822;
        _2980 = _2824;
        _2982 = _2826;
    }
    float _4898 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4909 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _4920 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    uint _3002 = _248 + 6u;
    float _3010 = _867 / cbSceneParam._m0[86u].x;
    float _3011 = _868 / cbSceneParam._m0[86u].y;
    vec4 _3025 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3010, _3011, (log2((isnan(cbSceneParam._m0[77u].w) ? _801 : (isnan(_801) ? cbSceneParam._m0[77u].w : min(_801, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3027 = _3025.x;
    float _3028 = _3025.y;
    float _3029 = _3025.z;
    float _3030 = _3025.w;
    float _3102;
    float _3104;
    float _3106;
    float _3108;
    if (_801 > cbSceneParam._m0[78u].w)
    {
        float _3064 = isnan(_801) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _801 : min(cbSceneParam._m0[80u].w, _801));
        float _3065 = _3064 / _801;
        float _3076 = _3065 * _852;
        float _3077 = _853 * _3065;
        float _3078 = (-0.0) - _3077;
        float _3080 = _3065 * _854;
        float _3082 = (cbSceneParam._m0[77u].w * _3078) / _3064;
        float _3083 = _3082 + cbSceneParam._m0[79u].w;
        float _3084 = cbSceneParam._m0[79u].w - _3077;
        float _3090 = sqrt(((_3076 * _3076) + (_3077 * _3077)) + (_3080 * _3080));
        float _3093 = (1.0 - (cbSceneParam._m0[77u].w / _3064)) * _3090;
        float _3098 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3100 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3253;
        if (abs((_3078 - _3082) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3253 = ((((_3083 > 0.0) ? exp2(_3098 * _3083) : (2.0 - exp2(_3100 * _3083))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3093;
        }
        else
        {
            float _3213 = 1.0 / cbSceneParam._m0[80u].x;
            float _3214 = isnan(_3084) ? _3083 : (isnan(_3083) ? _3084 : max(_3083, _3084));
            float _3215 = isnan(_3084) ? _3083 : (isnan(_3083) ? _3084 : min(_3083, _3084));
            float _3224 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : min(_3214, 0.0));
            float _3225 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : min(_3215, 0.0));
            _3253 = ((abs(_3090 / _3078) * cbSceneParam._m0[80u].y) * ((((_3224 - _3225) * 2.0) - ((exp2(_3098 * (isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0)))) - exp2(_3098 * (isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))))) * _3213)) - ((exp2(_3100 * _3224) - exp2(_3100 * _3225)) * _3213))) + (_3093 * cbSceneParam._m0[80u].z);
        }
        vec4 _3255 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3010, _3011, 1.0), 0.0);
        float _3264 = exp2((_3253 * (-1.44269502162933349609375)) * (1.0 - _3255.w));
        float _3265 = log2(_3264);
        float _3281 = log2(_3030);
        _3102 = (exp2(_3281 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3265 * cbSceneParam._m0[78u].x)) * _3255.x) / cbSceneParam._m0[78u].x)) + _3027;
        _3104 = (exp2(_3281 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3265 * cbSceneParam._m0[78u].y)) * _3255.y) / cbSceneParam._m0[78u].y)) + _3028;
        _3106 = (exp2(_3281 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3265 * cbSceneParam._m0[78u].z)) * _3255.z) / cbSceneParam._m0[78u].z)) + _3029;
        _3108 = _3264 * _3030;
    }
    else
    {
        _3102 = _3027;
        _3104 = _3028;
        _3106 = _3029;
        _3108 = _3030;
    }
    float _3120 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3121 = _3120 == 3.0;
    float _3122 = log2(_3108);
    float _3129 = exp2(_3122 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2972 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _945))) + ((_2978 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1752)) * cbPerFrame._m0[3u].x));
    float _3130 = exp2(_3122 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2974 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _945))) + ((_2980 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1752)) * cbPerFrame._m0[3u].x));
    float _3131 = exp2(_3122 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2976 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _945))) + ((_2982 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1752)) * cbPerFrame._m0[3u].x));
    float _3140 = (_3120 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3140 * (_3121 ? _3129 : (_3129 + (cbSceneParam._m0[72u].w * _3102)));
    SV_Target.y = _3140 * (_3121 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3104)));
    SV_Target.z = _3140 * (_3121 ? _3131 : (_3131 + (cbSceneParam._m0[72u].w * _3106)));
    SV_Target.w = cbInstanceData._m0[_3002].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3002].w;
}


