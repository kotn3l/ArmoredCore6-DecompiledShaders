#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1156;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _358 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _358) * cbMtdParam._m0[24u].y) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3767 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _383 = (_376 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _384 = (_376 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _385 = (_376 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    float _433 = ((_403.z - _424) * _376) + _424;
    float _436 = ((((_403.x - _422) * _376) + _422) * 2.0) + (-1.0);
    float _438 = ((((_403.y - _423) * _376) + _423) * 2.0) + (-1.0);
    float _439 = dot(vec2(_436, _438), vec2(_436, _438));
    float _3778 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _444 = sqrt(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))));
    vec4 _457 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _475 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _477 = _475.x;
    float _478 = 1.0 - _477;
    float _491 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_477 - _478) * cbMtdParam._m0[24u].z) + _478) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3789 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _499 = (_492 * (cbMtdParam._m0[17u].x - _383)) + _383;
    float _500 = (_492 * (cbMtdParam._m0[17u].y - _384)) + _384;
    float _501 = (_492 * (cbMtdParam._m0[17u].z - _385)) + _385;
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _529 = _527.x;
    float _547 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _529) * _376) + _529;
    float _551 = ((_513.x - _547) * cbMtdParam._m0[19u].z) + _547;
    float _553 = _551 - (_551 * _492);
    vec4 _566 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _573 = (_566.x * 2.0) + (-1.0);
    float _574 = (_566.y * 2.0) + (-1.0);
    float _575 = dot(vec2(_573, _574), vec2(_573, _574));
    float _3800 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _583 = (_492 * (_566.z - _433)) + _433;
    float _595 = (((_573 - _436) + (cbMtdParam._m0[21u].x * _436)) * _492) + _436;
    float _596 = (((_574 - _438) + (cbMtdParam._m0[21u].x * _438)) * _492) + _438;
    float _597 = (_492 * (sqrt(1.0 - (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) - _444)) + _444;
    float _602 = cbMtdParam._m0[22u].x + _457.w;
    float _605 = fma(_597, _225 * NORMAL.x, fma(_596, _232 * TANGENT.x, (_218 * _210) * _595));
    float _608 = fma(_597, _225 * NORMAL.y, fma(_596, _232 * TANGENT.y, (_218 * _211) * _595));
    float _611 = fma(_597, _225 * NORMAL.z, fma(_596, _232 * TANGENT.z, (_218 * _212) * _595));
    float _615 = inversesqrt(dot(vec3(_605, _608, _611), vec3(_605, _608, _611)));
    float _616 = _615 * _605;
    float _617 = _615 * _608;
    float _618 = _615 * _611;
    float _3811 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _619 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3833 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3844 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3855 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3866 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _624 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _638 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _689 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _679);
    float _690 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _679);
    float _691 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _679);
    float _695 = inversesqrt(dot(vec3(_689, _690, _691), vec3(_689, _690, _691)));
    float _696 = _689 * _695;
    float _697 = _690 * _695;
    float _698 = _691 * _695;
    float _704 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _705 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _723 = fma(_618, cbSceneParam._m0[5u].z, fma(_617, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _616));
    float _726 = fma(_618, cbSceneParam._m0[6u].z, fma(_617, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _616));
    float _729 = fma(_618, cbSceneParam._m0[7u].z, fma(_617, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _616));
    uint _743 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _749 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_743].x;
    float _750 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * cbInstanceData._m0[_743].y;
    float _751 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * cbInstanceData._m0[_743].z;
    float _3877 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _755 = 1.0 - _624;
    float _756 = _752 * _755;
    float _757 = _753 * _755;
    float _758 = _754 * _755;
    float _763 = (_752 + (-0.039999999105930328369140625)) * _624;
    float _764 = (_753 + (-0.039999999105930328369140625)) * _624;
    float _765 = (_754 + (-0.039999999105930328369140625)) * _624;
    float _766 = _763 + 0.039999999105930328369140625;
    float _768 = _764 + 0.039999999105930328369140625;
    float _769 = _765 + 0.039999999105930328369140625;
    vec4 _778 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _704, cbSceneParam._m0[86u].y * _705));
    float _782 = ((isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * TEXCOORD_5.w) * _778.x;
    float _783 = dot(vec3(_616, _617, _618), vec3(_696, _697, _698));
    float _786 = _783 * 2.0;
    float _790 = (_786 * _616) - _696;
    float _791 = (_786 * _617) - _697;
    float _792 = (_786 * _618) - _698;
    float _796 = abs(dot(vec3(_696, _697, _698), vec3(_616, _617, _618)));
    float _3910 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _798 = sqrt(_619);
    float _811 = exp2((_798 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_798 * 3.0));
    float _817 = (1.0 - _811) * ((_798 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _818 = _811 * _798;
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1155;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _880 = fma(_854, cbModelParam._m0[26u].z, fma(_850, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _846));
        float _884 = fma(_854, cbModelParam._m0[27u].z, fma(_850, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _846));
        float _888 = fma(_854, cbModelParam._m0[28u].z, fma(_850, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _846));
        float _913 = _846 + _616;
        float _914 = _850 + _617;
        float _915 = _854 + _618;
        float _925 = fma(_915, cbModelParam._m0[26u].z, fma(_914, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _913)) - _880;
        float _926 = fma(_915, cbModelParam._m0[27u].z, fma(_914, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _913)) - _884;
        float _927 = fma(_915, cbModelParam._m0[28u].z, fma(_914, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _913)) - _888;
        float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
        float _944 = ((_931 * _925) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_880 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_931 * _926) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_884 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_931 * _927) / cbModelParam._m0[34u].z) + ((((((_888 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        float _983 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_949.x + (-0.5));
        float _985 = _983 * (_949.y + (-0.5));
        float _986 = _983 * (_949.z + (-0.5));
        float _993 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_956.x + (-0.5));
        float _995 = _993 * (_956.y + (-0.5));
        float _996 = _993 * (_956.z + (-0.5));
        float _1003 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_963.x + (-0.5));
        float _1005 = _1003 * (_963.y + (-0.5));
        float _1006 = _1003 * (_963.z + (-0.5));
        float _1013 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_970.x + (-0.5));
        float _1015 = _1013 * (_970.y + (-0.5));
        float _1016 = _1013 * (_970.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1037 = (dot(vec3(_616, _617, _618), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1047 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3958 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1049 + 1.0))) + _1054) * _1017;
        float _1064 = _985 * 0.5;
        float _1065 = _995 * 0.5;
        float _1066 = _1005 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_616, _617, _618), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3991 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1091 + 1.0))) + _1096) * _1018;
        float _1106 = _986 * 0.5;
        float _1107 = _996 * 0.5;
        float _1108 = _1006 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_616, _617, _618), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _4024 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1133 + 1.0))) + _1138) * _1019;
        _1155 = _986;
        _1157 = _985;
        _1158 = _984;
        _1159 = _996;
        _1160 = _995;
        _1161 = _994;
        _1162 = _1006;
        _1163 = _1005;
        _1164 = _1004;
        _1165 = _1019;
        _1166 = _1018;
        _1167 = _1017;
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _1156;
        _1157 = _1156;
        _1158 = _1156;
        _1159 = _1156;
        _1160 = _1156;
        _1161 = _1156;
        _1162 = _1156;
        _1163 = _1156;
        _1164 = _1156;
        _1165 = _1156;
        _1166 = _1156;
        _1167 = _1156;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1195 = fma(_854, cbModelParam._m0[30u].z, fma(_850, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _846));
        float _1199 = fma(_854, cbModelParam._m0[31u].z, fma(_850, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _846));
        float _1203 = fma(_854, cbModelParam._m0[32u].z, fma(_850, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _846));
        float _1226 = _846 + _616;
        float _1227 = _850 + _617;
        float _1228 = _854 + _618;
        float _1238 = fma(_1228, cbModelParam._m0[30u].z, fma(_1227, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1226)) - _1195;
        float _1239 = fma(_1228, cbModelParam._m0[31u].z, fma(_1227, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1226)) - _1199;
        float _1240 = fma(_1228, cbModelParam._m0[32u].z, fma(_1227, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1226)) - _1203;
        float _1244 = inversesqrt(dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240)));
        float _1257 = ((_1244 * _1238) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1195 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1244 * _1239) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1199 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1244 * _1240) / cbModelParam._m0[35u].z) + ((((((_1203 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        float _1294 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1261.x + (-0.5));
        float _1296 = _1294 * (_1261.y + (-0.5));
        float _1297 = _1294 * (_1261.z + (-0.5));
        float _1304 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1268.x + (-0.5));
        float _1306 = _1304 * (_1268.y + (-0.5));
        float _1307 = _1304 * (_1268.z + (-0.5));
        float _1314 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1275.x + (-0.5));
        float _1316 = _1314 * (_1275.y + (-0.5));
        float _1317 = _1314 * (_1275.z + (-0.5));
        float _1324 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1282.x + (-0.5));
        float _1326 = _1324 * (_1282.y + (-0.5));
        float _1327 = _1324 * (_1282.z + (-0.5));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = _1295 * 0.5;
        float _1332 = _1305 * 0.5;
        float _1333 = _1315 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_616, _617, _618), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4087 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1358 + 1.0))) + _1363) * _1328;
        float _1373 = _1296 * 0.5;
        float _1374 = _1306 * 0.5;
        float _1375 = _1316 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_616, _617, _618), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4120 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1400 + 1.0))) + _1405) * _1329;
        float _1415 = _1297 * 0.5;
        float _1416 = _1307 * 0.5;
        float _1417 = _1317 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_616, _617, _618), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4153 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1442 + 1.0))) + _1447) * _1330;
        _1464 = _1297;
        _1465 = _1296;
        _1466 = _1295;
        _1467 = _1307;
        _1468 = _1306;
        _1469 = _1305;
        _1470 = _1317;
        _1471 = _1316;
        _1472 = _1315;
        _1473 = _1330;
        _1474 = _1329;
        _1475 = _1328;
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
    }
    else
    {
        _1464 = _1156;
        _1465 = _1156;
        _1466 = _1156;
        _1467 = _1156;
        _1468 = _1156;
        _1469 = _1156;
        _1470 = _1156;
        _1471 = _1156;
        _1472 = _1156;
        _1473 = _1156;
        _1474 = _1156;
        _1475 = _1156;
        _1476 = 0.0;
        _1477 = 0.0;
        _1478 = 0.0;
    }
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1168)) + _1168;
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1169)) + _1169;
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1170)) + _1170;
    float _1511 = fma(_1490, cbSceneParam._m0[89u].z, fma(_1489, cbSceneParam._m0[89u].y, _1488 * cbSceneParam._m0[89u].x));
    float _1514 = fma(_1490, cbSceneParam._m0[90u].z, fma(_1489, cbSceneParam._m0[90u].y, _1488 * cbSceneParam._m0[90u].x));
    float _1517 = fma(_1490, cbSceneParam._m0[91u].z, fma(_1489, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1488));
    float _1532 = _790 * 0.5;
    float _1533 = _791 * 0.5;
    float _1534 = _792 * 0.5;
    float _1535 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1538 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1541 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1575;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1548 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1155, _1159, _1162, _1165));
        float _1552 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1556 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1563 = dot(vec4(cbModelParam._m0[39u]), vec4(_1532, _1533, _1534, 1.0));
        _1575 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1563) ? 0.0 : (isnan(0.0) ? _1563 : max(0.0, _1563))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1575 = 1.0;
    }
    float _1586;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1577 = dot(vec4(cbModelParam._m0[40u]), vec4(_1532, _1533, _1534, 1.0));
        _1586 = dot(vec3(isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1577) ? 0.0 : (isnan(0.0) ? _1577 : max(0.0, _1577))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1586 = 1.0;
    }
    float _1590 = (_1586 * cbModelParam._m0[1u].x) + (_1575 * (1.0 - cbModelParam._m0[1u].x));
    float _1600 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _619);
    float _1601 = isnan(_1600) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1600 : min(cbModelParam._m0[25u].z, _1600));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1649 = fma(_854, cbModelParam._m0[13u].z, fma(_850, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _846)) + cbModelParam._m0[13u].w;
        float _1653 = fma(_854, cbModelParam._m0[14u].z, fma(_850, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _846)) + cbModelParam._m0[14u].w;
        float _1657 = fma(_854, cbModelParam._m0[15u].z, fma(_850, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _846)) + cbModelParam._m0[15u].w;
        float _1660 = fma(_792, cbModelParam._m0[13u].z, fma(_791, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _790));
        float _1663 = fma(_792, cbModelParam._m0[14u].z, fma(_791, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _790));
        float _1666 = fma(_792, cbModelParam._m0[15u].z, fma(_791, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _790));
        float _1694;
        if (_1660 > 0.0)
        {
            _1694 = abs((1.0 - _1649) / _1660);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1649 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1694 = frontier_phi_14_12_ladder;
        }
        float _1866;
        if (_1663 > 0.0)
        {
            _1866 = abs((1.0 - _1653) / _1663);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1653 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1866 = frontier_phi_23_19_ladder;
        }
        float _2161;
        if (_1666 > 0.0)
        {
            _2161 = abs((1.0 - _1657) / _1666);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1657 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2161 = frontier_phi_35_30_ladder;
        }
        float _2163 = isnan(_1866) ? _1694 : (isnan(_1694) ? _1866 : min(_1694, _1866));
        float _2164 = isnan(_2161) ? _2163 : (isnan(_2163) ? _2161 : min(_2163, _2161));
        float _2168 = (_2164 * _1660) + _1649;
        float _2169 = (_2164 * _1663) + _1653;
        float _2170 = (_2164 * _1666) + _1657;
        float _2171 = _2164 * 9.9999997473787516355514526367188e-05;
        float _2173 = (-1.0) - _2171;
        float _2175 = _2171 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2170 > _2175) || ((_2170 < _2173) || ((_2169 > _2175) || ((_2169 < _2173) || ((_2168 < _2173) || (_2168 > _2175))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2315 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2170, cbModelParam._m0[9u].z, fma(_2169, cbModelParam._m0[9u].y, _2168 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2170, cbModelParam._m0[10u].z, fma(_2169, cbModelParam._m0[10u].y, _2168 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2170, cbModelParam._m0[11u].z, fma(_2169, cbModelParam._m0[11u].y, _2168 * cbModelParam._m0[11u].x))), _1601);
            frontier_phi_13_35_ladder = _2315.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2315.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2315.x * cbModelParam._m0[1u].y;
        }
        _1682 = frontier_phi_13_35_ladder_2;
        _1684 = frontier_phi_13_35_ladder_1;
        _1686 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1670 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_790, _791, _792), _1601);
        _1682 = _1670.x * cbModelParam._m0[1u].y;
        _1684 = _1670.y * cbModelParam._m0[1u].y;
        _1686 = _1670.z * cbModelParam._m0[1u].y;
    }
    float _1690 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _619);
    float _1691 = isnan(_1690) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1690 : min(cbModelParam._m0[25u].w, _1690));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1745 = fma(_854, cbModelParam._m0[21u].z, fma(_850, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _846)) + cbModelParam._m0[21u].w;
        float _1749 = fma(_854, cbModelParam._m0[22u].z, fma(_850, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _846)) + cbModelParam._m0[22u].w;
        float _1753 = fma(_854, cbModelParam._m0[23u].z, fma(_850, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _846)) + cbModelParam._m0[23u].w;
        float _1756 = fma(_792, cbModelParam._m0[21u].z, fma(_791, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _790));
        float _1759 = fma(_792, cbModelParam._m0[22u].z, fma(_791, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _790));
        float _1762 = fma(_792, cbModelParam._m0[23u].z, fma(_791, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _790));
        float _1871;
        if (_1756 > 0.0)
        {
            _1871 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1871 = frontier_phi_25_21_ladder;
        }
        float _2188;
        if (_1759 > 0.0)
        {
            _2188 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2188 = frontier_phi_37_32_ladder;
        }
        float _2526;
        if (_1762 > 0.0)
        {
            _2526 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2526 = frontier_phi_47_44_ladder;
        }
        float _2528 = isnan(_2188) ? _1871 : (isnan(_1871) ? _2188 : min(_1871, _2188));
        float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
        float _2533 = (_2529 * _1756) + _1745;
        float _2534 = (_2529 * _1759) + _1749;
        float _2535 = (_2529 * _1762) + _1753;
        float _2536 = _2529 * 9.9999997473787516355514526367188e-05;
        float _2537 = (-1.0) - _2536;
        float _2539 = _2536 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2535 > _2539) || ((_2535 < _2537) || ((_2534 > _2539) || ((_2534 < _2537) || ((_2533 < _2537) || (_2533 > _2539))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2535, cbModelParam._m0[17u].z, fma(_2534, cbModelParam._m0[17u].y, _2533 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2535, cbModelParam._m0[18u].z, fma(_2534, cbModelParam._m0[18u].y, _2533 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2535, cbModelParam._m0[19u].z, fma(_2534, cbModelParam._m0[19u].y, _2533 * cbModelParam._m0[19u].x))), _1691);
            frontier_phi_22_47_ladder = _2657.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2657.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2657.x * cbModelParam._m0[1u].z;
        }
        _1781 = frontier_phi_22_47_ladder_2;
        _1783 = frontier_phi_22_47_ladder_1;
        _1785 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_790, _791, _792), _1691);
        _1781 = _1765.x * cbModelParam._m0[1u].z;
        _1783 = _1765.y * cbModelParam._m0[1u].z;
        _1785 = _1765.z * cbModelParam._m0[1u].z;
    }
    float _1798 = (((_817 * _766) + _818) * _782) * ((cbModelParam._m0[1u].w * (_1781 - _1682)) + _1682);
    float _1800 = (((_817 * _768) + _818) * _782) * ((cbModelParam._m0[1u].w * (_1783 - _1684)) + _1684);
    float _1802 = (((_817 * _769) + _818) * _782) * ((cbModelParam._m0[1u].w * (_1785 - _1686)) + _1686);
    float _1805 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1800, cbSceneParam._m0[89u].y, _1798 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1800, cbSceneParam._m0[90u].y, _1798 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1800, cbSceneParam._m0[91u].y, _1798 * cbSceneParam._m0[91u].x));
    float _1845 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1849 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1853 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1857 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1858 = _1845 / _1857;
    float _1859 = _1849 / _1857;
    float _1860 = _1853 / _1857;
    float _2007;
    float _2008;
    float _2009;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1887 = ((uint(_1860 > cbSceneParam._m0[59u].y) + uint(_1860 > cbSceneParam._m0[59u].x)) + uint(_1860 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1888 = _1887 + 43u;
        uint _1896 = _1887 + 44u;
        uint _1904 = _1887 + 45u;
        uint _1912 = _1887 + 46u;
        float _1923 = fma(_1857, cbSceneParam._m0[_1888].w, fma(_1853, cbSceneParam._m0[_1888].z, fma(_1849, cbSceneParam._m0[_1888].y, _1845 * cbSceneParam._m0[_1888].x)));
        float _1927 = fma(_1857, cbSceneParam._m0[_1896].w, fma(_1853, cbSceneParam._m0[_1896].z, fma(_1849, cbSceneParam._m0[_1896].y, _1845 * cbSceneParam._m0[_1896].x)));
        float _1935 = fma(_1857, cbSceneParam._m0[_1912].w, fma(_1853, cbSceneParam._m0[_1912].z, fma(_1849, cbSceneParam._m0[_1912].y, _1845 * cbSceneParam._m0[_1912].x)));
        float _1940 = cbSceneParam._m0[33u].z * _1935;
        float _1942 = cbSceneParam._m0[33u].w * _1935;
        float _1945 = fma(_1857, cbSceneParam._m0[_1904].w, fma(_1853, cbSceneParam._m0[_1904].z, fma(_1849, cbSceneParam._m0[_1904].y, _1845 * cbSceneParam._m0[_1904].x))) / _1935;
        float _1993 = (cbSceneParam._m0[33u].x - sqrt(((_1859 * _1859) + (_1858 * _1858)) + (_1860 * _1860))) * cbSceneParam._m0[33u].y;
        float _4279 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _2000 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1940 + _1923) / _1935, (_1942 + _1927) / _1935), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1942 + _1923) / _1935, (_1927 - _1940) / _1935), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1923 - _1940) / _1935, (_1927 - _1942) / _1935), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1923 - _1942) / _1935, (_1940 + _1927) / _1935), _1945), 0.0)).x), vec4(0.25)));
        _2007 = 1.0 - (_2000 * cbSceneParam._m0[34u].x);
        _2008 = 1.0 - (_2000 * cbSceneParam._m0[34u].y);
        _2009 = 1.0 - (_2000 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2007 = 1.0;
        _2008 = 1.0;
        _2009 = 1.0;
    }
    float _2073;
    float _2075;
    float _2077;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2061 = fma(_1857, cbSceneParam._m0[63u].w, fma(_1853, cbSceneParam._m0[63u].z, fma(_1849, cbSceneParam._m0[63u].y, _1845 * cbSceneParam._m0[63u].x)));
        float _2062 = fma(_1857, cbSceneParam._m0[60u].w, fma(_1853, cbSceneParam._m0[60u].z, fma(_1849, cbSceneParam._m0[60u].y, _1845 * cbSceneParam._m0[60u].x))) / _2061;
        float _2063 = fma(_1857, cbSceneParam._m0[61u].w, fma(_1853, cbSceneParam._m0[61u].z, fma(_1849, cbSceneParam._m0[61u].y, _1845 * cbSceneParam._m0[61u].x))) / _2061;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2062 >= cbSceneParam._m0[64u].x) && (_2063 >= cbSceneParam._m0[64u].y)) && (_2062 <= cbSceneParam._m0[64u].z)) && (_2063 <= cbSceneParam._m0[64u].w))
        {
            float _2201 = fma(_1857, cbSceneParam._m0[62u].w, fma(_1853, cbSceneParam._m0[62u].z, fma(_1849, cbSceneParam._m0[62u].y, _1845 * cbSceneParam._m0[62u].x))) / _2061;
            float _2205 = isnan(cbSceneParam._m0[41u].w) ? _2201 : (isnan(_2201) ? cbSceneParam._m0[41u].w : max(_2201, cbSceneParam._m0[41u].w));
            float _2248 = (cbSceneParam._m0[33u].x - sqrt(((_1859 * _1859) + (_1858 * _1858)) + (_1860 * _1860))) * cbSceneParam._m0[33u].y;
            float _4295 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
            float _2255 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2062, cbSceneParam._m0[33u].w + _2063), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2062, _2063 - cbSceneParam._m0[33u].z), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2062 - cbSceneParam._m0[33u].z, _2063 - cbSceneParam._m0[33u].w), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2062 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2063), _2205), 0.0)).x), vec4(0.25)));
            float _2259 = 1.0 - (_2255 * cbSceneParam._m0[34u].x);
            float _2260 = 1.0 - (_2255 * cbSceneParam._m0[34u].y);
            float _2261 = 1.0 - (_2255 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2261) ? _2009 : (isnan(_2009) ? _2261 : min(_2009, _2261));
            frontier_phi_34_33_ladder_1 = isnan(_2260) ? _2008 : (isnan(_2008) ? _2260 : min(_2008, _2260));
            frontier_phi_34_33_ladder_2 = isnan(_2259) ? _2007 : (isnan(_2007) ? _2259 : min(_2007, _2259));
        }
        else
        {
            frontier_phi_34_33_ladder = _2009;
            frontier_phi_34_33_ladder_1 = _2008;
            frontier_phi_34_33_ladder_2 = _2007;
        }
        _2073 = frontier_phi_34_33_ladder_2;
        _2075 = frontier_phi_34_33_ladder_1;
        _2077 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2073 = _2007;
        _2075 = _2008;
        _2077 = _2009;
    }
    uvec4 _2082 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2084 = _2082.x * 14u;
    uint _2085 = _2084 + 13u;
    float _2092 = _782 + (-1.0);
    float _2097 = (cbLight._m0[_2085].x * _2092) + 1.0;
    float _2098 = (cbLight._m0[_2085].y * _2092) + 1.0;
    float _2099 = (cbLight._m0[_2085].z * _2092) + 1.0;
    float _2100 = (cbLight._m0[_2085].w * _2092) + 1.0;
    uint _2101 = _2084 + 5u;
    float _2107 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
    uint _2111 = _2084 + 4u;
    float _2120 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
    uint _2124 = _2084 | 1u;
    float _2135 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_616, _617, _618));
    float _2138 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_616, _617, _618));
    float _4331 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _4342 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2143 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * 0.3183098733425140380859375;
    float _2145 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * 0.3183098733425140380859375;
    float _2152 = ((cbLight._m0[_2101].x * _2107) * _2145) + (((cbLight._m0[_2111].x * _2073) * _2120) * _2143);
    float _2153 = ((_2107 * cbLight._m0[_2101].y) * _2145) + (((cbLight._m0[_2111].y * _2075) * _2120) * _2143);
    float _2154 = ((_2107 * cbLight._m0[_2101].z) * _2145) + (((cbLight._m0[_2111].z * _2077) * _2120) * _2143);
    uvec4 _2158 = floatBitsToUint(cbLight._m0[_2084 + 12u]);
    bool _2160 = _2158.x == 0u;
    float _2262;
    float _2264;
    float _2266;
    if (_2160)
    {
        _2262 = _2152;
        _2264 = _2153;
        _2266 = _2154;
    }
    else
    {
        uint _2270 = _2084 + 6u;
        float _2286 = (dot(vec3(cbLight._m0[_2084 + 2u].xyz), vec3(_616, _617, _618)) * 0.5) + 0.5;
        float _2287 = _2286 * _2286;
        float _4353 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2288 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2289 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2262 = (((cbLight._m0[_2270].x * 0.3183098733425140380859375) * _2288) * _2289) + _2152;
        _2264 = (((cbLight._m0[_2270].y * 0.3183098733425140380859375) * _2288) * _2289) + _2153;
        _2266 = (((cbLight._m0[_2270].z * 0.3183098733425140380859375) * _2288) * _2289) + _2154;
    }
    bool _2269 = _2158.y == 0u;
    float _2324;
    float _2326;
    float _2328;
    if (_2269)
    {
        _2324 = _2262;
        _2326 = _2264;
        _2328 = _2266;
    }
    else
    {
        uint _2497 = _2084 + 7u;
        float _2513 = (dot(vec3(cbLight._m0[_2084 + 3u].xyz), vec3(_616, _617, _618)) * 0.5) + 0.5;
        float _2514 = _2513 * _2513;
        float _4369 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2515 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2516 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2324 = (((cbLight._m0[_2497].x * 0.3183098733425140380859375) * _2515) * _2516) + _2262;
        _2326 = (((cbLight._m0[_2497].y * 0.3183098733425140380859375) * _2515) * _2516) + _2264;
        _2328 = (((cbLight._m0[_2497].z * 0.3183098733425140380859375) * _2515) * _2516) + _2266;
    }
    uint _2331 = _2084 + 8u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _619) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2084].x + _696;
    float _2347 = cbLight._m0[_2084].y + _697;
    float _2348 = cbLight._m0[_2084].z + _698;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_2084].xyz));
    float _4385 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _4396 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _2360 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2361 = dot(vec3(_616, _617, _618), vec3(_2353, _2354, _2355));
    float _4407 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2365 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2353, _2354, _2355));
    float _4418 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = _2345 * _2345;
    float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
    float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0);
    float _2382 = 0.959999978542327880859375 - _763;
    float _2384 = 0.959999978542327880859375 - _764;
    float _2385 = 0.959999978542327880859375 - _765;
    float _2392 = 1.0 - _2345;
    float _2403 = (0.5 / (((_2360 * ((_2359 * _2392) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2392) + _2345) * _2359))) * _2359;
    float _4429 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2405 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
    uint _2419 = _2084 + 9u;
    float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _619) * 0.949999988079071044921875);
    float _2431 = _2430 * _2430;
    float _2432 = cbLight._m0[_2124].x + _696;
    float _2433 = cbLight._m0[_2124].y + _697;
    float _2434 = cbLight._m0[_2124].z + _698;
    float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
    float _2439 = _2438 * _2432;
    float _2440 = _2438 * _2433;
    float _2441 = _2438 * _2434;
    float _2442 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_2124].xyz));
    float _4440 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2446 = dot(vec3(_616, _617, _618), vec3(_2439, _2440, _2441));
    float _4451 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2439, _2440, _2441));
    float _4462 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2431 * _2431;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2465 = exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0);
    float _2472 = 1.0 - _2431;
    float _2482 = (0.5 / (((_2360 * ((_2445 * _2472) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2472) + _2431) * _2445))) * _2445;
    float _4473 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2484 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    float _2494 = (((((_2465 * _2382) + _766) * cbLight._m0[_2419].x) * _2484) * _2107) + ((((cbLight._m0[_2331].x * _2073) * ((_2381 * _2382) + _766)) * _2405) * _2120);
    float _2495 = (((((_2465 * _2384) + _768) * cbLight._m0[_2419].y) * _2484) * _2107) + ((((cbLight._m0[_2331].y * _2075) * ((_2381 * _2384) + _768)) * _2405) * _2120);
    float _2496 = (((((_2465 * _2385) + _769) * cbLight._m0[_2419].z) * _2484) * _2107) + ((((cbLight._m0[_2331].z * _2077) * ((_2381 * _2385) + _769)) * _2405) * _2120);
    float _2552;
    float _2554;
    float _2556;
    if (_2160)
    {
        _2552 = _2494;
        _2554 = _2495;
        _2556 = _2496;
    }
    else
    {
        uint _2558 = _2084 + 2u;
        uint _2562 = _2084 + 10u;
        float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2558].w)) * _619) * 0.949999988079071044921875);
        float _2577 = _2576 * _2576;
        float _2578 = cbLight._m0[_2558].x + _696;
        float _2579 = cbLight._m0[_2558].y + _697;
        float _2580 = cbLight._m0[_2558].z + _698;
        float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
        float _2585 = _2584 * _2578;
        float _2586 = _2584 * _2579;
        float _2587 = _2584 * _2580;
        float _2588 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_2558].xyz));
        float _4484 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2592 = dot(vec3(_616, _617, _618), vec3(_2585, _2586, _2587));
        float _4495 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2596 = dot(vec3(cbLight._m0[_2558].xyz), vec3(_2585, _2586, _2587));
        float _4506 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2600 = _2577 * _2577;
        float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
        float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0);
        float _2618 = 1.0 - _2577;
        float _2628 = (0.5 / (((_2360 * ((_2591 * _2618) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2618) + _2577) * _2591))) * _2591;
        float _4517 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2630 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
        float _2631 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2552 = (((((_2611 * _2382) + _766) * cbLight._m0[_2562].x) * _2630) * _2631) + _2494;
        _2554 = (((((_2611 * _2384) + _768) * cbLight._m0[_2562].y) * _2630) * _2631) + _2495;
        _2556 = (((((_2611 * _2385) + _769) * cbLight._m0[_2562].z) * _2630) * _2631) + _2496;
    }
    float _2662;
    float _2664;
    float _2666;
    if (_2269)
    {
        _2662 = _2552;
        _2664 = _2554;
        _2666 = _2556;
    }
    else
    {
        uint _2673 = _2084 + 3u;
        uint _2677 = _2084 + 11u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _619) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _696;
        float _2694 = cbLight._m0[_2673].y + _697;
        float _2695 = cbLight._m0[_2673].z + _698;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_2673].xyz));
        float _4533 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2707 = dot(vec3(_616, _617, _618), vec3(_2700, _2701, _2702));
        float _4544 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4555 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2726 = exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0);
        float _2733 = 1.0 - _2692;
        float _2743 = (0.5 / (((_2360 * ((_2706 * _2733) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2733) + _2692) * _2706))) * _2706;
        float _4566 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2745 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2746 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2662 = (((((_2726 * _2382) + _766) * cbLight._m0[_2677].x) * _2745) * _2746) + _2552;
        _2664 = (((((_2726 * _2384) + _768) * cbLight._m0[_2677].y) * _2745) * _2746) + _2554;
        _2666 = (((((_2726 * _2385) + _769) * cbLight._m0[_2677].z) * _2745) * _2746) + _2556;
    }
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    if (_2082.y == 0u)
    {
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.x;
        uint _2779 = uint((float(_2767.y) * floor(float(uint(cbSceneParam._m0[85u].y * _705) / _2768))) + floor(float(uint(cbSceneParam._m0[85u].x * _704) / _2768)));
        float _2789 = (log2(_1860 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2790 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        uint _2793 = uint(isnan(14.0) ? _2790 : (isnan(_2790) ? 14.0 : min(_2790, 14.0)));
        uvec4 _2798 = texelFetch(g_lightClusterGridBuffer, int(((_2793 << 2u) + (_2779 << 6u)) >> 2u));
        uint _2799 = _2798.x;
        uint _2800 = _2767.z;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        if (((((1u << ((_2800 >> 4u) & 15u)) + 4294967295u) & _2799) == 0u) || ((_2800 & 240u) == 0u))
        {
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
        }
        else
        {
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            uint _3030 = 0u;
            uint _3039;
            bool _3040;
            for (;;)
            {
                _3039 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3030 << 2u)) >> 2u)).x;
                _3040 = _3039 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3040)
                {
                    frontier_phi_66_pred = _3029;
                    frontier_phi_66_pred_1 = _3028;
                    frontier_phi_66_pred_2 = _3027;
                    frontier_phi_66_pred_3 = _3026;
                    frontier_phi_66_pred_4 = _3025;
                    frontier_phi_66_pred_5 = _3024;
                }
                else
                {
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    uint _3154;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3026;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3039;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    for (;;)
                    {
                        uint _3158 = uint(findLSB(_3154)) + (_3030 << 5u);
                        uint _3155 = (_3154 + 4294967295u) & _3154;
                        uint _3160 = _3158 * 48u;
                        vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3160)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 3u)).x));
                        uint _3180 = (_3158 * 48u) + 4u;
                        vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 3u)).x));
                        uint _3199 = (_3158 * 48u) + 8u;
                        vec3 _3210 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x));
                        float _3214 = _3174.x - _1858;
                        float _3215 = _3174.y - _1859;
                        float _3216 = _3174.z - _1860;
                        float _3217 = dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216));
                        float _3220 = inversesqrt(_3217);
                        float _3221 = _3220 * _3214;
                        float _3222 = _3220 * _3215;
                        float _3223 = _3220 * _3216;
                        float _3224 = dot(vec3(_723, _726, _729), vec3(_3221, _3222, _3223));
                        float _3229 = 1.0 - (_3217 * _3174.w);
                        float _4592 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3230 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3231 = sqrt(_3217) * _3193.w;
                        float _3234 = 1.39999997615814208984375 / (_3231 + 1.39999997615814208984375);
                        float _3235 = _3234 * _3234;
                        float _3238 = ((1.0 - _3235) * _3224) + _3235;
                        float _3241 = _3231 * _3231;
                        float _3245 = ((isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0))) * _3230) / ((_3241 * 0.699999988079071044921875) + 1.0);
                        float _3249 = (-0.0) - _1858;
                        float _3250 = (-0.0) - _1859;
                        float _3251 = (-0.0) - _1860;
                        float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                        float _3256 = _3255 * _3249;
                        float _3257 = _3255 * _3250;
                        float _3258 = _3255 * _3251;
                        float _3265 = exp2(log2(1.0 / ((_3241 * 3.5) + 5.0)) * 0.25);
                        float _3266 = 1.0 - _798;
                        float _3273 = sqrt(1.0 - ((1.0 - (_3266 * _3266)) * (1.0 - (_3265 * _3265))));
                        float _3274 = _3273 * _3273;
                        float _3275 = _3274 * _3274;
                        float _3276 = _3256 + _3221;
                        float _3277 = _3257 + _3222;
                        float _3278 = _3258 + _3223;
                        float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                        float _3286 = dot(vec3(_723, _726, _729), vec3(_3256, _3257, _3258));
                        float _4608 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3289 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3290 = dot(vec3(_723, _726, _729), vec3(_3282 * _3276, _3282 * _3277, _3282 * _3278));
                        float _4619 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3297 = ((_3293 * _3293) * (_3275 + (-1.0))) + 1.0;
                        float _3298 = _3234 * _3274;
                        float _3299 = _3298 * _3298;
                        float _3302 = ((1.0 - _3299) * _3224) + _3299;
                        float _4630 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3303 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3304 = 1.0 - _3274;
                        float _3314 = (0.5 / (((_3303 * ((_3289 * _3304) + _3274)) + 9.9999999392252902907785028219223e-09) + (((_3303 * _3304) + _3274) * _3289))) * _3303;
                        float _4641 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3325 = (((_3275 * 3.1415927410125732421875) * (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) / ((_3297 * _3297) * ((_3241 * 2.1991131305694580078125) + 3.141590118408203125))) * _3230;
                        _3083 = (_3245 * _3193.x) + _3151;
                        _3084 = (_3245 * _3193.y) + _3152;
                        _3085 = (_3245 * _3193.z) + _3153;
                        _3080 = (_3325 * _3210.x) + _3148;
                        _3081 = (_3325 * _3210.y) + _3149;
                        _3082 = (_3325 * _3210.z) + _3150;
                        if (_3155 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3082;
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3155;
                        }
                    }
                    frontier_phi_66_pred = _3085;
                    frontier_phi_66_pred_1 = _3084;
                    frontier_phi_66_pred_2 = _3083;
                    frontier_phi_66_pred_3 = _3082;
                    frontier_phi_66_pred_4 = _3081;
                    frontier_phi_66_pred_5 = _3080;
                }
                _2890 = frontier_phi_66_pred;
                _2888 = frontier_phi_66_pred_1;
                _2886 = frontier_phi_66_pred_2;
                _2884 = frontier_phi_66_pred_3;
                _2882 = frontier_phi_66_pred_4;
                _2880 = frontier_phi_66_pred_5;
                uint _3031 = _3030 + 1u;
                if (_3031 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3024 = _2880;
                    _3025 = _2882;
                    _3026 = _2884;
                    _3027 = _2886;
                    _3028 = _2888;
                    _3029 = _2890;
                    _3030 = _3031;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
        }
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.z;
        uint _2896 = (_2894 >> 8u) & 15u;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        if (((4294967295u << _2896) & _2799) == 0u)
        {
            _2992 = _2879;
            _2994 = _2881;
            _2996 = _2883;
            _2998 = _2885;
            _3000 = _2887;
            _3002 = _2889;
        }
        else
        {
            float _3017 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
            float _3018 = _3017 * _1858;
            float _3019 = _3017 * _1859;
            float _3020 = _3017 * _1860;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2896 < ((_2894 >> 12u) & 15u))
            {
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3131 = _2879;
                float _3132 = _2881;
                float _3133 = _2883;
                float _3134 = _2885;
                float _3135 = _2887;
                float _3136 = _2889;
                uint _3137 = _2896;
                uint _3146;
                bool _3147;
                for (;;)
                {
                    _3146 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3137 << 2u)) >> 2u)).x;
                    _3147 = _3146 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3147)
                    {
                        frontier_phi_72_pred = _3136;
                        frontier_phi_72_pred_1 = _3135;
                        frontier_phi_72_pred_2 = _3134;
                        frontier_phi_72_pred_3 = _3133;
                        frontier_phi_72_pred_4 = _3132;
                        frontier_phi_72_pred_5 = _3131;
                    }
                    else
                    {
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3343 = _3131;
                        float _3344 = _3132;
                        float _3345 = _3133;
                        float _3346 = _3134;
                        float _3347 = _3135;
                        float _3348 = _3136;
                        uint _3349 = _3146;
                        uint _3350;
                        vec4 _3375;
                        float _3376;
                        vec4 _3391;
                        vec3 _3403;
                        vec4 _3418;
                        vec4 _3434;
                        float _3480;
                        bool _3481;
                        for (;;)
                        {
                            uint _3360 = ((_3137 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3349));
                            _3350 = (_3349 + 4294967295u) & _3349;
                            uint _3362 = _3360 * 40u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            _3376 = _3375.w;
                            uint _3378 = (_3360 * 40u) + 4u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3393 = (_3360 * 40u) + 8u;
                            _3403 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x));
                            uint _3405 = (_3360 * 40u) + 16u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3421 = (_3360 * 40u) + 20u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3360 * 40u) + 24u;
                            vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3455 = (_3360 * 40u) + 28u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            _3480 = fma(_1860, _3468.z, fma(_1859, _3468.y, _3468.x * _1858)) + _3468.w;
                            _3481 = !((fma(_1860, _3449.z, fma(_1859, _3449.y, _3449.x * _1858)) + _3449.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3481)
                            {
                                float _3508 = _3375.x - _1858;
                                float _3509 = _3375.y - _1859;
                                float _3510 = _3375.z - _1860;
                                float _3511 = dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510));
                                float _3514 = inversesqrt(_3511);
                                float _3515 = _3514 * _3508;
                                float _3516 = _3514 * _3509;
                                float _3517 = _3514 * _3510;
                                float _3521 = 1.0 - (_3511 / (_3376 * _3376));
                                float _4652 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3526 = sqrt(_3511) * _3391.w;
                                float _3528 = 1.39999997615814208984375 / (_3526 + 1.39999997615814208984375);
                                float _3529 = _3528 * _3528;
                                float _3532 = ((1.0 - _3529) * dot(vec3(_3515, _3516, _3517), vec3(_723, _726, _729))) + _3529;
                                float _3535 = _3526 * _3526;
                                float _3539 = (fma(_1860, _3418.z, fma(_1859, _3418.y, _3418.x * _1858)) + _3418.w) / _3480;
                                float _3540 = (fma(_1860, _3434.z, fma(_1859, _3434.y, _3434.x * _1858)) + _3434.w) / _3480;
                                float _3544 = 1.0 - dot(vec2(_3539, _3540), vec2(_3539, _3540));
                                float _4668 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3546 = _3545 * (((isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0))) * _3522) / ((_3535 * 0.699999988079071044921875) + 1.0));
                                float _3558 = exp2(log2(1.0 / ((_3535 * 3.5) + 5.0)) * 0.25);
                                float _3559 = 1.0 - _798;
                                float _3566 = sqrt(1.0 - ((1.0 - (_3559 * _3559)) * (1.0 - (_3558 * _3558))));
                                float _3567 = _3566 * _3566;
                                float _3568 = _3567 * _3567;
                                float _3569 = _3515 - _3018;
                                float _3570 = _3516 - _3019;
                                float _3571 = _3517 - _3020;
                                float _3575 = inversesqrt(dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571)));
                                float _3579 = dot(vec3(_723, _726, _729), vec3((-0.0) - _3018, (-0.0) - _3019, (-0.0) - _3020));
                                float _4679 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3582 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3583 = dot(vec3(_723, _726, _729), vec3(_3575 * _3569, _3575 * _3570, _3575 * _3571));
                                float _4690 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3590 = ((_3586 * _3586) * (_3568 + (-1.0))) + 1.0;
                                float _3591 = _3528 * _3567;
                                float _3592 = _3591 * _3591;
                                float _3598 = ((1.0 - _3592) * dot(vec3(_723, _726, _729), vec3(_3515, _3516, _3517))) + _3592;
                                float _4701 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3600 = 1.0 - _3567;
                                float _3610 = (0.5 / (((_3599 * ((_3582 * _3600) + _3567)) + 9.9999999392252902907785028219223e-09) + (((_3599 * _3600) + _3567) * _3582))) * _3599;
                                float _4712 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3620 = (_3545 * _3522) * (((_3568 * 3.1415927410125732421875) * (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) / ((_3590 * _3590) * ((_3535 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3546 * _3391.y;
                                frontier_phi_78_pred_1 = _3546 * _3391.x;
                                frontier_phi_78_pred_2 = _3620 * _3403.z;
                                frontier_phi_78_pred_3 = _3620 * _3403.y;
                                frontier_phi_78_pred_4 = _3620 * _3403.x;
                                frontier_phi_78_pred_5 = _3546 * _3391.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3628 = frontier_phi_78_pred;
                            _3627 = frontier_phi_78_pred_1;
                            _3626 = frontier_phi_78_pred_2;
                            _3625 = frontier_phi_78_pred_3;
                            _3624 = frontier_phi_78_pred_4;
                            _3629 = frontier_phi_78_pred_5;
                            _3333 = _3627 + _3346;
                            _3334 = _3628 + _3347;
                            _3335 = _3629 + _3348;
                            _3330 = _3624 + _3343;
                            _3331 = _3625 + _3344;
                            _3332 = _3626 + _3345;
                            if (_3350 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3350;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3335;
                        frontier_phi_72_pred_1 = _3334;
                        frontier_phi_72_pred_2 = _3333;
                        frontier_phi_72_pred_3 = _3332;
                        frontier_phi_72_pred_4 = _3331;
                        frontier_phi_72_pred_5 = _3330;
                    }
                    _3003 = frontier_phi_72_pred;
                    _3001 = frontier_phi_72_pred_1;
                    _2999 = frontier_phi_72_pred_2;
                    _2997 = frontier_phi_72_pred_3;
                    _2995 = frontier_phi_72_pred_4;
                    _2993 = frontier_phi_72_pred_5;
                    uint _3138 = _3137 + 1u;
                    if (_3138 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3131 = _2993;
                        _3132 = _2995;
                        _3133 = _2997;
                        _3134 = _2999;
                        _3135 = _3001;
                        _3136 = _3003;
                        _3137 = _3138;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3003;
                frontier_phi_60_61_ladder_1 = _3001;
                frontier_phi_60_61_ladder_2 = _2997;
                frontier_phi_60_61_ladder_3 = _2995;
                frontier_phi_60_61_ladder_4 = _2993;
                frontier_phi_60_61_ladder_5 = _2999;
            }
            else
            {
                frontier_phi_60_61_ladder = _2889;
                frontier_phi_60_61_ladder_1 = _2887;
                frontier_phi_60_61_ladder_2 = _2883;
                frontier_phi_60_61_ladder_3 = _2881;
                frontier_phi_60_61_ladder_4 = _2879;
                frontier_phi_60_61_ladder_5 = _2885;
            }
            _2992 = frontier_phi_60_61_ladder_4;
            _2994 = frontier_phi_60_61_ladder_3;
            _2996 = frontier_phi_60_61_ladder_2;
            _2998 = frontier_phi_60_61_ladder_5;
            _3000 = frontier_phi_60_61_ladder_1;
            _3002 = frontier_phi_60_61_ladder;
        }
        float _3007 = isnan(1.0) ? _782 : (isnan(_782) ? 1.0 : min(_782, 1.0));
        _2812 = (_3007 * _2998) + _2324;
        _2814 = (_3007 * _3000) + _2326;
        _2816 = (_3007 * _3002) + _2328;
        _2818 = ((_2992 * _766) * _3007) + _2662;
        _2820 = ((_2994 * _768) * _3007) + _2664;
        _2822 = ((_2996 * _769) * _3007) + _2666;
    }
    else
    {
        _2812 = _2324;
        _2814 = _2326;
        _2816 = _2328;
        _2818 = _2662;
        _2820 = _2664;
        _2822 = _2666;
    }
    float _4728 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4739 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4750 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    uint _2842 = _238 + 6u;
    float _2850 = _704 / cbSceneParam._m0[86u].x;
    float _2851 = _705 / cbSceneParam._m0[86u].y;
    vec4 _2865 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, (log2((isnan(cbSceneParam._m0[77u].w) ? _638 : (isnan(_638) ? cbSceneParam._m0[77u].w : min(_638, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2867 = _2865.x;
    float _2868 = _2865.y;
    float _2869 = _2865.z;
    float _2870 = _2865.w;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    if (_638 > cbSceneParam._m0[78u].w)
    {
        float _2904 = isnan(_638) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _638 : min(cbSceneParam._m0[80u].w, _638));
        float _2905 = _2904 / _638;
        float _2916 = _2905 * _689;
        float _2917 = _690 * _2905;
        float _2918 = (-0.0) - _2917;
        float _2920 = _2905 * _691;
        float _2922 = (cbSceneParam._m0[77u].w * _2918) / _2904;
        float _2923 = _2922 + cbSceneParam._m0[79u].w;
        float _2924 = cbSceneParam._m0[79u].w - _2917;
        float _2930 = sqrt(((_2916 * _2916) + (_2917 * _2917)) + (_2920 * _2920));
        float _2933 = (1.0 - (cbSceneParam._m0[77u].w / _2904)) * _2930;
        float _2938 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2940 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3093;
        if (abs((_2918 - _2922) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3093 = ((((_2923 > 0.0) ? exp2(_2938 * _2923) : (2.0 - exp2(_2940 * _2923))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2933;
        }
        else
        {
            float _3053 = 1.0 / cbSceneParam._m0[80u].x;
            float _3054 = isnan(_2924) ? _2923 : (isnan(_2923) ? _2924 : max(_2923, _2924));
            float _3055 = isnan(_2924) ? _2923 : (isnan(_2923) ? _2924 : min(_2923, _2924));
            float _3064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : min(_3054, 0.0));
            float _3065 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : min(_3055, 0.0));
            _3093 = ((abs(_2930 / _2918) * cbSceneParam._m0[80u].y) * ((((_3064 - _3065) * 2.0) - ((exp2(_2938 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0)))) - exp2(_2938 * (isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0))))) * _3053)) - ((exp2(_2940 * _3064) - exp2(_2940 * _3065)) * _3053))) + (_2933 * cbSceneParam._m0[80u].z);
        }
        vec4 _3095 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, 1.0), 0.0);
        float _3104 = exp2((_3093 * (-1.44269502162933349609375)) * (1.0 - _3095.w));
        float _3105 = log2(_3104);
        float _3121 = log2(_2870);
        _2942 = (exp2(_3121 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].x)) * _3095.x) / cbSceneParam._m0[78u].x)) + _2867;
        _2944 = (exp2(_3121 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].y)) * _3095.y) / cbSceneParam._m0[78u].y)) + _2868;
        _2946 = (exp2(_3121 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].z)) * _3095.z) / cbSceneParam._m0[78u].z)) + _2869;
        _2948 = _3104 * _2870;
    }
    else
    {
        _2942 = _2867;
        _2944 = _2868;
        _2946 = _2869;
        _2948 = _2870;
    }
    float _2960 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2961 = _2960 == 3.0;
    float _2962 = log2(_2948);
    float _2969 = exp2(_2962 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2812 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _782))) + ((_2818 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1590)) * cbPerFrame._m0[3u].x));
    float _2970 = exp2(_2962 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2814 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _782))) + ((_2820 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1590)) * cbPerFrame._m0[3u].x));
    float _2971 = exp2(_2962 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2816 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _782))) + ((_2822 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1590)) * cbPerFrame._m0[3u].x));
    float _2980 = (_2960 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2980 * (_2961 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2942)));
    SV_Target.y = _2980 * (_2961 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2944)));
    SV_Target.z = _2980 * (_2961 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2946)));
    SV_Target.w = cbInstanceData._m0[_2842].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2842].w;
}


