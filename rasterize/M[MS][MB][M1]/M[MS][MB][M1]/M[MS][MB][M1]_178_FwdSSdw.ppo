#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1406;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3757 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3768 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3779 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _405 = _403.x;
    float _417 = dot(vec4(_405, _403.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _434 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_405 - _417) * cbMtdParam._m0[24u].y) + _417) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3790 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _442 = (_435 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _443 = (_435 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _444 = (_435 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _483 = _481.x;
    float _493 = dot(vec4(_483, _481.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _507 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_483 - _493) * cbMtdParam._m0[24u].y) + _493) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3801 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _515 = (_508 * ((_461.x * cbMtdParam._m0[13u].x) - _442)) + _442;
    float _516 = (_508 * ((_461.y * cbMtdParam._m0[13u].y) - _443)) + _443;
    float _517 = (_508 * ((_461.z * cbMtdParam._m0[13u].z) - _444)) + _444;
    float _521 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _515;
    float _524 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _516;
    float _527 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _517;
    float _534 = ((_515 - _521) * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) + _521;
    float _535 = ((_516 - _524) * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) + _524;
    float _536 = ((_517 - _527) * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) + _527;
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _590 = _588.x;
    float _591 = _588.y;
    float _592 = _588.z;
    float _599 = ((_571.x - _590) * _435) + _590;
    float _600 = ((_571.y - _591) * _435) + _591;
    float _601 = ((_571.z - _592) * _435) + _592;
    vec4 _613 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _626 = ((_613.z - _601) * _508) + _601;
    float _629 = ((((_613.x - _599) * _508) + _599) * 2.0) + (-1.0);
    float _630 = ((((_613.y - _600) * _508) + _600) * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _3812 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _636 = sqrt(1.0 - (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))));
    vec4 _656 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _668 = (_629 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_548.x * 2.0) + (-1.0)))) + (((_656.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _669 = (_630 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_548.y * 2.0) + (-1.0)))) + (((_656.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _681 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _683 = _681.x;
    float _684 = 1.0 - _683;
    float _710 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_683 - _684) * cbMtdParam._m0[24u].w) + _684) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3823 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _711 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _719 = ((((cbMtdParam._m0[10u].x - _534) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _711) + _534;
    float _720 = ((((cbMtdParam._m0[10u].y - _535) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _711) + _535;
    float _721 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _536)) * _711) + _536;
    vec4 _733 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _747 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _749 = _747.x;
    float _767 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _749) * _435) + _749;
    float _785 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _302) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _303) + cbTextureTilingScale._m0[21u].w)).x - _767) * _508) + _767;
    float _789 = ((_733.x - _785) * cbMtdParam._m0[19u].z) + _785;
    float _791 = _789 - (_789 * _711);
    float _796 = (((_548.z - _626) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _626;
    float _800 = ((_656.z - _796) * cbMtdParam._m0[19u].w) + _796;
    float _804 = ((cbMtdParam._m0[23u].y - _800) * _711) + _800;
    vec4 _823 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _829 = (_823.x * 2.0) + (-1.0);
    float _830 = (_823.y * 2.0) + (-1.0);
    float _831 = dot(vec2(_829, _830), vec2(_829, _830));
    float _3834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _847 = (_711 * (((cbMtdParam._m0[22u].z * _668) - _668) + _829)) + _668;
    float _848 = (_711 * (((cbMtdParam._m0[22u].z * _669) - _669) + _830)) + _669;
    float _849 = (_711 * (sqrt(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) - _636)) + _636;
    float _853 = cbMtdParam._m0[22u].x + _656.w;
    float _856 = fma(_849, _251 * NORMAL.x, fma(_848, _258 * TANGENT.x, (_244 * _236) * _847));
    float _859 = fma(_849, _251 * NORMAL.y, fma(_848, _258 * TANGENT.y, (_244 * _237) * _847));
    float _862 = fma(_849, _251 * NORMAL.z, fma(_848, _258 * TANGENT.z, (_244 * _238) * _847));
    float _866 = inversesqrt(dot(vec3(_856, _859, _862), vec3(_856, _859, _862)));
    float _867 = _866 * _856;
    float _868 = _866 * _859;
    float _869 = _866 * _862;
    float _3845 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _870 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _3867 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _3878 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _3889 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _3900 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _875 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _889 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _939 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _929);
    float _940 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _929);
    float _941 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _929);
    float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
    float _946 = _939 * _945;
    float _947 = _940 * _945;
    float _948 = _941 * _945;
    float _954 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _955 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _973 = fma(_869, cbSceneParam._m0[5u].z, fma(_868, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _867));
    float _976 = fma(_869, cbSceneParam._m0[6u].z, fma(_868, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _867));
    float _979 = fma(_869, cbSceneParam._m0[7u].z, fma(_868, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _867));
    uint _993 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _999 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * cbInstanceData._m0[_993].x;
    float _1000 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_993].y;
    float _1001 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_993].z;
    float _3911 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _3922 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1005 = 1.0 - _875;
    float _1006 = _1002 * _1005;
    float _1007 = _1003 * _1005;
    float _1008 = _1004 * _1005;
    float _1013 = (_1002 + (-0.039999999105930328369140625)) * _875;
    float _1014 = (_1003 + (-0.039999999105930328369140625)) * _875;
    float _1015 = (_1004 + (-0.039999999105930328369140625)) * _875;
    float _1016 = _1013 + 0.039999999105930328369140625;
    float _1018 = _1014 + 0.039999999105930328369140625;
    float _1019 = _1015 + 0.039999999105930328369140625;
    vec4 _1028 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _954, cbSceneParam._m0[86u].y * _955));
    float _1032 = ((isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * TEXCOORD_5.w) * _1028.x;
    float _1033 = dot(vec3(_867, _868, _869), vec3(_946, _947, _948));
    float _1036 = _1033 * 2.0;
    float _1040 = (_1036 * _867) - _946;
    float _1041 = (_1036 * _868) - _947;
    float _1042 = (_1036 * _869) - _948;
    float _1046 = abs(dot(vec3(_946, _947, _948), vec3(_867, _868, _869)));
    float _3944 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1048 = sqrt(_870);
    float _1061 = exp2((_1048 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1048 * 3.0));
    float _1067 = (1.0 - _1061) * ((_1048 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1068 = _1061 * _1048;
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1405;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1130 = fma(_1104, cbModelParam._m0[26u].z, fma(_1100, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1096));
        float _1134 = fma(_1104, cbModelParam._m0[27u].z, fma(_1100, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1096));
        float _1138 = fma(_1104, cbModelParam._m0[28u].z, fma(_1100, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1096));
        float _1163 = _1096 + _867;
        float _1164 = _1100 + _868;
        float _1165 = _1104 + _869;
        float _1175 = fma(_1165, cbModelParam._m0[26u].z, fma(_1164, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163)) - _1130;
        float _1176 = fma(_1165, cbModelParam._m0[27u].z, fma(_1164, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163)) - _1134;
        float _1177 = fma(_1165, cbModelParam._m0[28u].z, fma(_1164, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163)) - _1138;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1130 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1134 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[34u].z) + ((((((_1138 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1233 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1199.x + (-0.5));
        float _1235 = _1233 * (_1199.y + (-0.5));
        float _1236 = _1233 * (_1199.z + (-0.5));
        float _1243 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1206.x + (-0.5));
        float _1245 = _1243 * (_1206.y + (-0.5));
        float _1246 = _1243 * (_1206.z + (-0.5));
        float _1253 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1213.x + (-0.5));
        float _1255 = _1253 * (_1213.y + (-0.5));
        float _1256 = _1253 * (_1213.z + (-0.5));
        float _1263 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1220.x + (-0.5));
        float _1265 = _1263 * (_1220.y + (-0.5));
        float _1266 = _1263 * (_1220.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1287 = (dot(vec3(_867, _868, _869), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1297 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3992 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1299 + 1.0))) + _1304) * _1267;
        float _1314 = _1235 * 0.5;
        float _1315 = _1245 * 0.5;
        float _1316 = _1255 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_867, _868, _869), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4025 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1341 + 1.0))) + _1346) * _1268;
        float _1356 = _1236 * 0.5;
        float _1357 = _1246 * 0.5;
        float _1358 = _1256 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_867, _868, _869), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4058 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1383 + 1.0))) + _1388) * _1269;
        _1405 = _1236;
        _1407 = _1235;
        _1408 = _1234;
        _1409 = _1246;
        _1410 = _1245;
        _1411 = _1244;
        _1412 = _1256;
        _1413 = _1255;
        _1414 = _1254;
        _1415 = _1269;
        _1416 = _1268;
        _1417 = _1267;
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
    }
    else
    {
        _1405 = _1406;
        _1407 = _1406;
        _1408 = _1406;
        _1409 = _1406;
        _1410 = _1406;
        _1411 = _1406;
        _1412 = _1406;
        _1413 = _1406;
        _1414 = _1406;
        _1415 = _1406;
        _1416 = _1406;
        _1417 = _1406;
        _1418 = 0.0;
        _1419 = 0.0;
        _1420 = 0.0;
    }
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1444 = fma(_1104, cbModelParam._m0[30u].z, fma(_1100, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1096));
        float _1448 = fma(_1104, cbModelParam._m0[31u].z, fma(_1100, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1096));
        float _1452 = fma(_1104, cbModelParam._m0[32u].z, fma(_1100, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1096));
        float _1475 = _1096 + _867;
        float _1476 = _1100 + _868;
        float _1477 = _1104 + _869;
        float _1487 = fma(_1477, cbModelParam._m0[30u].z, fma(_1476, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1475)) - _1444;
        float _1488 = fma(_1477, cbModelParam._m0[31u].z, fma(_1476, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1475)) - _1448;
        float _1489 = fma(_1477, cbModelParam._m0[32u].z, fma(_1476, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1475)) - _1452;
        float _1493 = inversesqrt(dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489)));
        float _1506 = ((_1493 * _1487) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1444 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1493 * _1488) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1448 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1493 * _1489) / cbModelParam._m0[35u].z) + ((((((_1452 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        float _1543 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1510.x + (-0.5));
        float _1545 = _1543 * (_1510.y + (-0.5));
        float _1546 = _1543 * (_1510.z + (-0.5));
        float _1553 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1517.x + (-0.5));
        float _1555 = _1553 * (_1517.y + (-0.5));
        float _1556 = _1553 * (_1517.z + (-0.5));
        float _1563 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1524.x + (-0.5));
        float _1565 = _1563 * (_1524.y + (-0.5));
        float _1566 = _1563 * (_1524.z + (-0.5));
        float _1573 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1531.x + (-0.5));
        float _1575 = _1573 * (_1531.y + (-0.5));
        float _1576 = _1573 * (_1531.z + (-0.5));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = _1544 * 0.5;
        float _1581 = _1554 * 0.5;
        float _1582 = _1564 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_867, _868, _869), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4121 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1607 + 1.0))) + _1612) * _1577;
        float _1622 = _1545 * 0.5;
        float _1623 = _1555 * 0.5;
        float _1624 = _1565 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_867, _868, _869), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4154 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1649 + 1.0))) + _1654) * _1578;
        float _1664 = _1546 * 0.5;
        float _1665 = _1556 * 0.5;
        float _1666 = _1566 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_867, _868, _869), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4187 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1691 + 1.0))) + _1696) * _1579;
        _1713 = _1546;
        _1714 = _1545;
        _1715 = _1544;
        _1716 = _1556;
        _1717 = _1555;
        _1718 = _1554;
        _1719 = _1566;
        _1720 = _1565;
        _1721 = _1564;
        _1722 = _1579;
        _1723 = _1578;
        _1724 = _1577;
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
    }
    else
    {
        _1713 = _1406;
        _1714 = _1406;
        _1715 = _1406;
        _1716 = _1406;
        _1717 = _1406;
        _1718 = _1406;
        _1719 = _1406;
        _1720 = _1406;
        _1721 = _1406;
        _1722 = _1406;
        _1723 = _1406;
        _1724 = _1406;
        _1725 = 0.0;
        _1726 = 0.0;
        _1727 = 0.0;
    }
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1418)) + _1418;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1419)) + _1419;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1420)) + _1420;
    float _1760 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1737));
    float _1781 = _1040 * 0.5;
    float _1782 = _1041 * 0.5;
    float _1783 = _1042 * 0.5;
    float _1784 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1787 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1790 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1824;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1797 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1405, _1409, _1412, _1415));
        float _1801 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1407, _1410, _1413, _1416));
        float _1805 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1812 = dot(vec4(cbModelParam._m0[39u]), vec4(_1781, _1782, _1783, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1835;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1826 = dot(vec4(cbModelParam._m0[40u]), vec4(_1781, _1782, _1783, 1.0));
        _1835 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1826) ? 0.0 : (isnan(0.0) ? _1826 : max(0.0, _1826))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1835 = 1.0;
    }
    float _1839 = (_1835 * cbModelParam._m0[1u].x) + (_1824 * (1.0 - cbModelParam._m0[1u].x));
    float _1849 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _870);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1849 : min(cbModelParam._m0[25u].z, _1849));
    float _1932;
    float _1934;
    float _1936;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1899 = fma(_1104, cbModelParam._m0[13u].z, fma(_1100, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1096)) + cbModelParam._m0[13u].w;
        float _1903 = fma(_1104, cbModelParam._m0[14u].z, fma(_1100, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1096)) + cbModelParam._m0[14u].w;
        float _1907 = fma(_1104, cbModelParam._m0[15u].z, fma(_1100, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1096)) + cbModelParam._m0[15u].w;
        float _1910 = fma(_1042, cbModelParam._m0[13u].z, fma(_1041, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1040));
        float _1913 = fma(_1042, cbModelParam._m0[14u].z, fma(_1041, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1040));
        float _1916 = fma(_1042, cbModelParam._m0[15u].z, fma(_1041, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1040));
        float _1944;
        if (_1910 > 0.0)
        {
            _1944 = abs((1.0 - _1899) / _1910);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1899 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1944 = frontier_phi_14_12_ladder;
        }
        float _2168;
        if (_1913 > 0.0)
        {
            _2168 = abs((1.0 - _1903) / _1913);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1903 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2168 = frontier_phi_23_19_ladder;
        }
        float _2425;
        if (_1916 > 0.0)
        {
            _2425 = abs((1.0 - _1907) / _1916);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1907 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2425 = frontier_phi_35_30_ladder;
        }
        float _2427 = isnan(_2168) ? _1944 : (isnan(_1944) ? _2168 : min(_1944, _2168));
        float _2428 = isnan(_2425) ? _2427 : (isnan(_2427) ? _2425 : min(_2427, _2425));
        float _2432 = (_2428 * _1910) + _1899;
        float _2433 = (_2428 * _1913) + _1903;
        float _2434 = (_2428 * _1916) + _1907;
        float _2435 = _2428 * 9.9999997473787516355514526367188e-05;
        float _2437 = (-1.0) - _2435;
        float _2439 = _2435 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2434 > _2439) || ((_2434 < _2437) || ((_2433 > _2439) || ((_2433 < _2437) || ((_2432 < _2437) || (_2432 > _2439))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2562 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2434, cbModelParam._m0[9u].z, fma(_2433, cbModelParam._m0[9u].y, _2432 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2434, cbModelParam._m0[10u].z, fma(_2433, cbModelParam._m0[10u].y, _2432 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2434, cbModelParam._m0[11u].z, fma(_2433, cbModelParam._m0[11u].y, _2432 * cbModelParam._m0[11u].x))), _1850);
            frontier_phi_13_35_ladder = _2562.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2562.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2562.x * cbModelParam._m0[1u].y;
        }
        _1932 = frontier_phi_13_35_ladder_2;
        _1934 = frontier_phi_13_35_ladder_1;
        _1936 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1920 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1040, _1041, _1042), _1850);
        _1932 = _1920.x * cbModelParam._m0[1u].y;
        _1934 = _1920.y * cbModelParam._m0[1u].y;
        _1936 = _1920.z * cbModelParam._m0[1u].y;
    }
    float _1940 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _870);
    float _1941 = isnan(_1940) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1940 : min(cbModelParam._m0[25u].w, _1940));
    float _2031;
    float _2033;
    float _2035;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1995 = fma(_1104, cbModelParam._m0[21u].z, fma(_1100, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1096)) + cbModelParam._m0[21u].w;
        float _1999 = fma(_1104, cbModelParam._m0[22u].z, fma(_1100, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1096)) + cbModelParam._m0[22u].w;
        float _2003 = fma(_1104, cbModelParam._m0[23u].z, fma(_1100, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1096)) + cbModelParam._m0[23u].w;
        float _2006 = fma(_1042, cbModelParam._m0[21u].z, fma(_1041, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1040));
        float _2009 = fma(_1042, cbModelParam._m0[22u].z, fma(_1041, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1040));
        float _2012 = fma(_1042, cbModelParam._m0[23u].z, fma(_1041, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1040));
        float _2173;
        if (_2006 > 0.0)
        {
            _2173 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2173 = frontier_phi_25_21_ladder;
        }
        float _2452;
        if (_2009 > 0.0)
        {
            _2452 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2452 = frontier_phi_37_32_ladder;
        }
        float _2665;
        if (_2012 > 0.0)
        {
            _2665 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2665 = frontier_phi_46_43_ladder;
        }
        float _2667 = isnan(_2452) ? _2173 : (isnan(_2173) ? _2452 : min(_2173, _2452));
        float _2668 = isnan(_2665) ? _2667 : (isnan(_2667) ? _2665 : min(_2667, _2665));
        float _2672 = (_2668 * _2006) + _1995;
        float _2673 = (_2668 * _2009) + _1999;
        float _2674 = (_2668 * _2012) + _2003;
        float _2675 = _2668 * 9.9999997473787516355514526367188e-05;
        float _2676 = (-1.0) - _2675;
        float _2678 = _2675 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2674 > _2678) || ((_2674 < _2676) || ((_2673 > _2678) || ((_2673 < _2676) || ((_2672 < _2676) || (_2672 > _2678))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2873 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2674, cbModelParam._m0[17u].z, fma(_2673, cbModelParam._m0[17u].y, _2672 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2674, cbModelParam._m0[18u].z, fma(_2673, cbModelParam._m0[18u].y, _2672 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2674, cbModelParam._m0[19u].z, fma(_2673, cbModelParam._m0[19u].y, _2672 * cbModelParam._m0[19u].x))), _1941);
            frontier_phi_22_46_ladder = _2873.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2873.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2873.x * cbModelParam._m0[1u].z;
        }
        _2031 = frontier_phi_22_46_ladder_2;
        _2033 = frontier_phi_22_46_ladder_1;
        _2035 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1040, _1041, _1042), _1941);
        _2031 = _2015.x * cbModelParam._m0[1u].z;
        _2033 = _2015.y * cbModelParam._m0[1u].z;
        _2035 = _2015.z * cbModelParam._m0[1u].z;
    }
    float _2048 = (((_1067 * _1016) + _1068) * _1032) * ((cbModelParam._m0[1u].w * (_2031 - _1932)) + _1932);
    float _2050 = (((_1067 * _1018) + _1068) * _1032) * ((cbModelParam._m0[1u].w * (_2033 - _1934)) + _1934);
    float _2052 = (((_1067 * _1019) + _1068) * _1032) * ((cbModelParam._m0[1u].w * (_2035 - _1936)) + _1936);
    float _2055 = fma(_2052, cbSceneParam._m0[89u].z, fma(_2050, cbSceneParam._m0[89u].y, _2048 * cbSceneParam._m0[89u].x));
    float _2058 = fma(_2052, cbSceneParam._m0[90u].z, fma(_2050, cbSceneParam._m0[90u].y, _2048 * cbSceneParam._m0[90u].x));
    float _2061 = fma(_2052, cbSceneParam._m0[91u].z, fma(_2050, cbSceneParam._m0[91u].y, _2048 * cbSceneParam._m0[91u].x));
    vec4 _2069 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_954, _955));
    float _2071 = _2069.w;
    float _2083 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2071);
    float _2084 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2071);
    float _2085 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2071);
    uvec4 _2089 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2091 = _2089.x * 14u;
    uint _2092 = _2091 + 13u;
    float _2099 = _1032 + (-1.0);
    float _2104 = (cbLight._m0[_2092].x * _2099) + 1.0;
    float _2105 = (cbLight._m0[_2092].y * _2099) + 1.0;
    float _2106 = (cbLight._m0[_2092].z * _2099) + 1.0;
    float _2107 = (cbLight._m0[_2092].w * _2099) + 1.0;
    uint _2108 = _2091 + 5u;
    float _2114 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
    uint _2118 = _2091 + 4u;
    float _2127 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
    uint _2131 = _2091 | 1u;
    float _2142 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_867, _868, _869));
    float _2145 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_867, _868, _869));
    float _4323 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _4334 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2150 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * 0.3183098733425140380859375;
    float _2152 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * 0.3183098733425140380859375;
    float _2159 = ((cbLight._m0[_2108].x * _2114) * _2152) + (((cbLight._m0[_2118].x * _2083) * _2127) * _2150);
    float _2160 = ((_2114 * cbLight._m0[_2108].y) * _2152) + (((cbLight._m0[_2118].y * _2084) * _2127) * _2150);
    float _2161 = ((_2114 * cbLight._m0[_2108].z) * _2152) + (((cbLight._m0[_2118].z * _2085) * _2127) * _2150);
    uvec4 _2165 = floatBitsToUint(cbLight._m0[_2091 + 12u]);
    bool _2167 = _2165.x == 0u;
    float _2178;
    float _2180;
    float _2182;
    if (_2167)
    {
        _2178 = _2159;
        _2180 = _2160;
        _2182 = _2161;
    }
    else
    {
        uint _2186 = _2091 + 6u;
        float _2202 = (dot(vec3(cbLight._m0[_2091 + 2u].xyz), vec3(_867, _868, _869)) * 0.5) + 0.5;
        float _2203 = _2202 * _2202;
        float _4345 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2204 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2205 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2178 = (((cbLight._m0[_2186].x * 0.3183098733425140380859375) * _2204) * _2205) + _2159;
        _2180 = (((cbLight._m0[_2186].y * 0.3183098733425140380859375) * _2204) * _2205) + _2160;
        _2182 = (((cbLight._m0[_2186].z * 0.3183098733425140380859375) * _2204) * _2205) + _2161;
    }
    bool _2185 = _2165.y == 0u;
    float _2223;
    float _2225;
    float _2227;
    if (_2185)
    {
        _2223 = _2178;
        _2225 = _2180;
        _2227 = _2182;
    }
    else
    {
        uint _2396 = _2091 + 7u;
        float _2412 = (dot(vec3(cbLight._m0[_2091 + 3u].xyz), vec3(_867, _868, _869)) * 0.5) + 0.5;
        float _2413 = _2412 * _2412;
        float _4361 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2414 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2415 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2223 = (((cbLight._m0[_2396].x * 0.3183098733425140380859375) * _2414) * _2415) + _2178;
        _2225 = (((cbLight._m0[_2396].y * 0.3183098733425140380859375) * _2414) * _2415) + _2180;
        _2227 = (((cbLight._m0[_2396].z * 0.3183098733425140380859375) * _2414) * _2415) + _2182;
    }
    uint _2230 = _2091 + 8u;
    float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _870) * 0.949999988079071044921875);
    float _2244 = _2243 * _2243;
    float _2245 = cbLight._m0[_2091].x + _946;
    float _2246 = cbLight._m0[_2091].y + _947;
    float _2247 = cbLight._m0[_2091].z + _948;
    float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
    float _2252 = _2251 * _2245;
    float _2253 = _2251 * _2246;
    float _2254 = _2251 * _2247;
    float _2255 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2091].xyz));
    float _4377 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _4388 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _2259 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _2260 = dot(vec3(_867, _868, _869), vec3(_2252, _2253, _2254));
    float _4399 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2264 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2252, _2253, _2254));
    float _4410 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2268 = _2244 * _2244;
    float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
    float _2280 = exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0);
    float _2281 = 0.959999978542327880859375 - _1013;
    float _2283 = 0.959999978542327880859375 - _1014;
    float _2284 = 0.959999978542327880859375 - _1015;
    float _2291 = 1.0 - _2244;
    float _2302 = (0.5 / (((_2259 * ((_2258 * _2291) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2291) + _2244) * _2258))) * _2258;
    float _4421 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2304 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
    uint _2318 = _2091 + 9u;
    float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _870) * 0.949999988079071044921875);
    float _2330 = _2329 * _2329;
    float _2331 = cbLight._m0[_2131].x + _946;
    float _2332 = cbLight._m0[_2131].y + _947;
    float _2333 = cbLight._m0[_2131].z + _948;
    float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
    float _2338 = _2337 * _2331;
    float _2339 = _2337 * _2332;
    float _2340 = _2337 * _2333;
    float _2341 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2131].xyz));
    float _4432 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2345 = dot(vec3(_867, _868, _869), vec3(_2338, _2339, _2340));
    float _4443 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2349 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2338, _2339, _2340));
    float _4454 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2353 = _2330 * _2330;
    float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
    float _2364 = exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0);
    float _2371 = 1.0 - _2330;
    float _2381 = (0.5 / (((_2259 * ((_2344 * _2371) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2371) + _2330) * _2344))) * _2344;
    float _4465 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2383 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
    float _2393 = (((((_2364 * _2281) + _1016) * cbLight._m0[_2318].x) * _2383) * _2114) + ((((cbLight._m0[_2230].x * _2083) * ((_2280 * _2281) + _1016)) * _2304) * _2127);
    float _2394 = (((((_2364 * _2283) + _1018) * cbLight._m0[_2318].y) * _2383) * _2114) + ((((cbLight._m0[_2230].y * _2084) * ((_2280 * _2283) + _1018)) * _2304) * _2127);
    float _2395 = (((((_2364 * _2284) + _1019) * cbLight._m0[_2318].z) * _2383) * _2114) + ((((cbLight._m0[_2230].z * _2085) * ((_2280 * _2284) + _1019)) * _2304) * _2127);
    float _2457;
    float _2459;
    float _2461;
    if (_2167)
    {
        _2457 = _2393;
        _2459 = _2394;
        _2461 = _2395;
    }
    else
    {
        uint _2463 = _2091 + 2u;
        uint _2467 = _2091 + 10u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _870) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _946;
        float _2484 = cbLight._m0[_2463].y + _947;
        float _2485 = cbLight._m0[_2463].z + _948;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2463].xyz));
        float _4476 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _2497 = dot(vec3(_867, _868, _869), vec3(_2490, _2491, _2492));
        float _4487 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4498 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2516 = exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0);
        float _2523 = 1.0 - _2482;
        float _2533 = (0.5 / (((_2259 * ((_2496 * _2523) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2523) + _2482) * _2496))) * _2496;
        float _4509 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2457 = (((((_2516 * _2281) + _1016) * cbLight._m0[_2467].x) * _2535) * _2536) + _2393;
        _2459 = (((((_2516 * _2283) + _1018) * cbLight._m0[_2467].y) * _2535) * _2536) + _2394;
        _2461 = (((((_2516 * _2284) + _1019) * cbLight._m0[_2467].z) * _2535) * _2536) + _2395;
    }
    float _2571;
    float _2573;
    float _2575;
    if (_2185)
    {
        _2571 = _2457;
        _2573 = _2459;
        _2575 = _2461;
    }
    else
    {
        uint _2582 = _2091 + 3u;
        uint _2586 = _2091 + 11u;
        float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2582].w)) * _870) * 0.949999988079071044921875);
        float _2601 = _2600 * _2600;
        float _2602 = cbLight._m0[_2582].x + _946;
        float _2603 = cbLight._m0[_2582].y + _947;
        float _2604 = cbLight._m0[_2582].z + _948;
        float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
        float _2609 = _2608 * _2602;
        float _2610 = _2608 * _2603;
        float _2611 = _2608 * _2604;
        float _2612 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2582].xyz));
        float _4525 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2616 = dot(vec3(_867, _868, _869), vec3(_2609, _2610, _2611));
        float _4536 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2620 = dot(vec3(cbLight._m0[_2582].xyz), vec3(_2609, _2610, _2611));
        float _4547 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2624 = _2601 * _2601;
        float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
        float _2635 = exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0);
        float _2642 = 1.0 - _2601;
        float _2652 = (0.5 / (((_2259 * ((_2615 * _2642) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2642) + _2601) * _2615))) * _2615;
        float _4558 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2654 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
        float _2655 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2571 = (((((_2635 * _2281) + _1016) * cbLight._m0[_2586].x) * _2654) * _2655) + _2457;
        _2573 = (((((_2635 * _2283) + _1018) * cbLight._m0[_2586].y) * _2654) * _2655) + _2459;
        _2575 = (((((_2635 * _2284) + _1019) * cbLight._m0[_2586].z) * _2654) * _2655) + _2461;
    }
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    if (_2089.y == 0u)
    {
        float _2730 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2731 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2730;
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2730;
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2730;
        uvec4 _2745 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2746 = _2745.x;
        uint _2757 = uint((float(_2745.y) * floor(float(uint(cbSceneParam._m0[85u].y * _955) / _2746))) + floor(float(uint(cbSceneParam._m0[85u].x * _954) / _2746)));
        float _2767 = (log2(_2733 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2768 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        uint _2771 = uint(isnan(14.0) ? _2768 : (isnan(_2768) ? 14.0 : min(_2768, 14.0)));
        uvec4 _2776 = texelFetch(g_lightClusterGridBuffer, int(((_2771 << 2u) + (_2757 << 6u)) >> 2u));
        uint _2777 = _2776.x;
        uint _2778 = _2745.z;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        if (((((1u << ((_2778 >> 4u) & 15u)) + 4294967295u) & _2777) == 0u) || ((_2778 & 240u) == 0u))
        {
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
        }
        else
        {
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            uint _3029 = 0u;
            uint _3038;
            bool _3039;
            for (;;)
            {
                _3038 = texelFetch(g_lightClassification, int((((_2771 << 5u) + (_2757 << 9u)) + (_3029 << 2u)) >> 2u)).x;
                _3039 = _3038 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3039)
                {
                    frontier_phi_61_pred = _3023;
                    frontier_phi_61_pred_1 = _3028;
                    frontier_phi_61_pred_2 = _3027;
                    frontier_phi_61_pred_3 = _3026;
                    frontier_phi_61_pred_4 = _3025;
                    frontier_phi_61_pred_5 = _3024;
                }
                else
                {
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    uint _3153;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3026;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3038;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    for (;;)
                    {
                        uint _3157 = uint(findLSB(_3153)) + (_3029 << 5u);
                        uint _3154 = (_3153 + 4294967295u) & _3153;
                        uint _3159 = _3157 * 48u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3179 = (_3157 * 48u) + 4u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 3u)).x));
                        uint _3198 = (_3157 * 48u) + 8u;
                        vec3 _3209 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x));
                        float _3213 = _3173.x - _2731;
                        float _3214 = _3173.y - _2732;
                        float _3215 = _3173.z - _2733;
                        float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                        float _3219 = inversesqrt(_3216);
                        float _3220 = _3219 * _3213;
                        float _3221 = _3219 * _3214;
                        float _3222 = _3219 * _3215;
                        float _3223 = dot(vec3(_973, _976, _979), vec3(_3220, _3221, _3222));
                        float _3228 = 1.0 - (_3216 * _3173.w);
                        float _4584 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3230 = sqrt(_3216) * _3192.w;
                        float _3233 = 1.39999997615814208984375 / (_3230 + 1.39999997615814208984375);
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3223) + _3234;
                        float _3240 = _3230 * _3230;
                        float _3244 = ((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3229) / ((_3240 * 0.699999988079071044921875) + 1.0);
                        float _3248 = (-0.0) - _2731;
                        float _3249 = (-0.0) - _2732;
                        float _3250 = (-0.0) - _2733;
                        float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                        float _3255 = _3254 * _3248;
                        float _3256 = _3254 * _3249;
                        float _3257 = _3254 * _3250;
                        float _3265 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                        float _3266 = 1.0 - _1048;
                        float _3273 = sqrt(1.0 - ((1.0 - (_3266 * _3266)) * (1.0 - (_3265 * _3265))));
                        float _3274 = _3273 * _3273;
                        float _3275 = _3274 * _3274;
                        float _3276 = _3255 + _3220;
                        float _3277 = _3256 + _3221;
                        float _3278 = _3257 + _3222;
                        float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                        float _3286 = dot(vec3(_973, _976, _979), vec3(_3255, _3256, _3257));
                        float _4600 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3289 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3290 = dot(vec3(_973, _976, _979), vec3(_3282 * _3276, _3282 * _3277, _3282 * _3278));
                        float _4611 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3297 = ((_3293 * _3293) * (_3275 + (-1.0))) + 1.0;
                        float _3298 = _3233 * _3274;
                        float _3299 = _3298 * _3298;
                        float _3302 = ((1.0 - _3299) * _3223) + _3299;
                        float _4622 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3303 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3304 = 1.0 - _3274;
                        float _3314 = (0.5 / (((_3303 * ((_3289 * _3304) + _3274)) + 9.9999999392252902907785028219223e-09) + (((_3303 * _3304) + _3274) * _3289))) * _3303;
                        float _4633 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3325 = (((_3275 * 3.1415927410125732421875) * (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) / ((_3297 * _3297) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125))) * _3229;
                        _3082 = (_3244 * _3192.x) + _3150;
                        _3083 = (_3244 * _3192.y) + _3151;
                        _3084 = (_3244 * _3192.z) + _3152;
                        _3079 = (_3325 * _3209.x) + _3147;
                        _3080 = (_3325 * _3209.y) + _3148;
                        _3081 = (_3325 * _3209.z) + _3149;
                        if (_3154 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3082;
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3154;
                        }
                    }
                    frontier_phi_61_pred = _3079;
                    frontier_phi_61_pred_1 = _3084;
                    frontier_phi_61_pred_2 = _3083;
                    frontier_phi_61_pred_3 = _3082;
                    frontier_phi_61_pred_4 = _3081;
                    frontier_phi_61_pred_5 = _3080;
                }
                _2879 = frontier_phi_61_pred;
                _2889 = frontier_phi_61_pred_1;
                _2887 = frontier_phi_61_pred_2;
                _2885 = frontier_phi_61_pred_3;
                _2883 = frontier_phi_61_pred_4;
                _2881 = frontier_phi_61_pred_5;
                uint _3030 = _3029 + 1u;
                if (_3030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3023 = _2879;
                    _3024 = _2881;
                    _3025 = _2883;
                    _3026 = _2885;
                    _3027 = _2887;
                    _3028 = _2889;
                    _3029 = _3030;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
        }
        uvec4 _2892 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2893 = _2892.z;
        uint _2895 = (_2893 >> 8u) & 15u;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        if (((4294967295u << _2895) & _2777) == 0u)
        {
            _2991 = _2878;
            _2993 = _2880;
            _2995 = _2882;
            _2997 = _2884;
            _2999 = _2886;
            _3001 = _2888;
        }
        else
        {
            float _3016 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
            float _3017 = _3016 * _2731;
            float _3018 = _3016 * _2732;
            float _3019 = _3016 * _2733;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2895 < ((_2893 >> 12u) & 15u))
            {
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3130 = _2878;
                float _3131 = _2880;
                float _3132 = _2882;
                float _3133 = _2884;
                float _3134 = _2886;
                float _3135 = _2888;
                uint _3136 = _2895;
                uint _3145;
                bool _3146;
                for (;;)
                {
                    _3145 = texelFetch(g_lightClassification, int((((_2771 << 5u) + (_2757 << 9u)) + (_3136 << 2u)) >> 2u)).x;
                    _3146 = _3145 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3146)
                    {
                        frontier_phi_67_pred = _3133;
                        frontier_phi_67_pred_1 = _3134;
                        frontier_phi_67_pred_2 = _3135;
                        frontier_phi_67_pred_3 = _3132;
                        frontier_phi_67_pred_4 = _3131;
                        frontier_phi_67_pred_5 = _3130;
                    }
                    else
                    {
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3343 = _3130;
                        float _3344 = _3131;
                        float _3345 = _3132;
                        float _3346 = _3133;
                        float _3347 = _3134;
                        float _3348 = _3135;
                        uint _3349 = _3145;
                        uint _3350;
                        vec4 _3375;
                        float _3376;
                        vec4 _3391;
                        vec3 _3403;
                        vec4 _3418;
                        vec4 _3433;
                        float _3479;
                        bool _3480;
                        for (;;)
                        {
                            uint _3360 = ((_3136 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3349));
                            _3350 = (_3349 + 4294967295u) & _3349;
                            uint _3362 = _3360 * 40u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            _3376 = _3375.w;
                            uint _3378 = (_3360 * 40u) + 4u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3393 = (_3360 * 40u) + 8u;
                            _3403 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x));
                            uint _3405 = (_3360 * 40u) + 16u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3420 = (_3360 * 40u) + 20u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3360 * 40u) + 24u;
                            vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3454 = (_3360 * 40u) + 28u;
                            vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            _3479 = fma(_2733, _3467.z, fma(_2732, _3467.y, _3467.x * _2731)) + _3467.w;
                            _3480 = !((fma(_2733, _3448.z, fma(_2732, _3448.y, _3448.x * _2731)) + _3448.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3480)
                            {
                                float _3507 = _3375.x - _2731;
                                float _3508 = _3375.y - _2732;
                                float _3509 = _3375.z - _2733;
                                float _3510 = dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509));
                                float _3513 = inversesqrt(_3510);
                                float _3514 = _3513 * _3507;
                                float _3515 = _3513 * _3508;
                                float _3516 = _3513 * _3509;
                                float _3520 = 1.0 - (_3510 / (_3376 * _3376));
                                float _4644 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3525 = sqrt(_3510) * _3391.w;
                                float _3527 = 1.39999997615814208984375 / (_3525 + 1.39999997615814208984375);
                                float _3528 = _3527 * _3527;
                                float _3531 = ((1.0 - _3528) * dot(vec3(_3514, _3515, _3516), vec3(_973, _976, _979))) + _3528;
                                float _3534 = _3525 * _3525;
                                float _3538 = (fma(_2733, _3418.z, fma(_2732, _3418.y, _3418.x * _2731)) + _3418.w) / _3479;
                                float _3539 = (fma(_2733, _3433.z, fma(_2732, _3433.y, _3433.x * _2731)) + _3433.w) / _3479;
                                float _3543 = 1.0 - dot(vec2(_3538, _3539), vec2(_3538, _3539));
                                float _4660 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3545 = _3544 * (((isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0))) * _3521) / ((_3534 * 0.699999988079071044921875) + 1.0));
                                float _3557 = exp2(log2(1.0 / ((_3534 * 3.5) + 5.0)) * 0.25);
                                float _3558 = 1.0 - _1048;
                                float _3565 = sqrt(1.0 - ((1.0 - (_3558 * _3558)) * (1.0 - (_3557 * _3557))));
                                float _3566 = _3565 * _3565;
                                float _3567 = _3566 * _3566;
                                float _3568 = _3514 - _3017;
                                float _3569 = _3515 - _3018;
                                float _3570 = _3516 - _3019;
                                float _3574 = inversesqrt(dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570)));
                                float _3578 = dot(vec3(_973, _976, _979), vec3((-0.0) - _3017, (-0.0) - _3018, (-0.0) - _3019));
                                float _4671 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3581 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3582 = dot(vec3(_973, _976, _979), vec3(_3574 * _3568, _3574 * _3569, _3574 * _3570));
                                float _4682 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3585 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3589 = ((_3585 * _3585) * (_3567 + (-1.0))) + 1.0;
                                float _3590 = _3527 * _3566;
                                float _3591 = _3590 * _3590;
                                float _3597 = ((1.0 - _3591) * dot(vec3(_973, _976, _979), vec3(_3514, _3515, _3516))) + _3591;
                                float _4693 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3599 = 1.0 - _3566;
                                float _3609 = (0.5 / (((_3598 * ((_3581 * _3599) + _3566)) + 9.9999999392252902907785028219223e-09) + (((_3598 * _3599) + _3566) * _3581))) * _3598;
                                float _4704 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3619 = (_3544 * _3521) * (((_3567 * 3.1415927410125732421875) * (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) / ((_3589 * _3589) * ((_3534 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3619 * _3403.x;
                                frontier_phi_73_pred_1 = _3619 * _3403.y;
                                frontier_phi_73_pred_2 = _3545 * _3391.z;
                                frontier_phi_73_pred_3 = _3545 * _3391.y;
                                frontier_phi_73_pred_4 = _3545 * _3391.x;
                                frontier_phi_73_pred_5 = _3619 * _3403.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3623 = frontier_phi_73_pred;
                            _3624 = frontier_phi_73_pred_1;
                            _3628 = frontier_phi_73_pred_2;
                            _3627 = frontier_phi_73_pred_3;
                            _3626 = frontier_phi_73_pred_4;
                            _3625 = frontier_phi_73_pred_5;
                            _3333 = _3626 + _3346;
                            _3334 = _3627 + _3347;
                            _3335 = _3628 + _3348;
                            _3330 = _3623 + _3343;
                            _3331 = _3624 + _3344;
                            _3332 = _3625 + _3345;
                            if (_3350 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3350;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3333;
                        frontier_phi_67_pred_1 = _3334;
                        frontier_phi_67_pred_2 = _3335;
                        frontier_phi_67_pred_3 = _3332;
                        frontier_phi_67_pred_4 = _3331;
                        frontier_phi_67_pred_5 = _3330;
                    }
                    _2998 = frontier_phi_67_pred;
                    _3000 = frontier_phi_67_pred_1;
                    _3002 = frontier_phi_67_pred_2;
                    _2996 = frontier_phi_67_pred_3;
                    _2994 = frontier_phi_67_pred_4;
                    _2992 = frontier_phi_67_pred_5;
                    uint _3137 = _3136 + 1u;
                    if (_3137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3130 = _2992;
                        _3131 = _2994;
                        _3132 = _2996;
                        _3133 = _2998;
                        _3134 = _3000;
                        _3135 = _3002;
                        _3136 = _3137;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3000;
                frontier_phi_55_56_ladder_1 = _3002;
                frontier_phi_55_56_ladder_2 = _2998;
                frontier_phi_55_56_ladder_3 = _2996;
                frontier_phi_55_56_ladder_4 = _2994;
                frontier_phi_55_56_ladder_5 = _2992;
            }
            else
            {
                frontier_phi_55_56_ladder = _2886;
                frontier_phi_55_56_ladder_1 = _2888;
                frontier_phi_55_56_ladder_2 = _2884;
                frontier_phi_55_56_ladder_3 = _2882;
                frontier_phi_55_56_ladder_4 = _2880;
                frontier_phi_55_56_ladder_5 = _2878;
            }
            _2991 = frontier_phi_55_56_ladder_5;
            _2993 = frontier_phi_55_56_ladder_4;
            _2995 = frontier_phi_55_56_ladder_3;
            _2997 = frontier_phi_55_56_ladder_2;
            _2999 = frontier_phi_55_56_ladder;
            _3001 = frontier_phi_55_56_ladder_1;
        }
        float _3006 = isnan(1.0) ? _1032 : (isnan(_1032) ? 1.0 : min(_1032, 1.0));
        _2790 = (_3006 * _2997) + _2223;
        _2792 = (_3006 * _2999) + _2225;
        _2794 = (_3006 * _3001) + _2227;
        _2796 = ((_2991 * _1016) * _3006) + _2571;
        _2798 = ((_2993 * _1018) * _3006) + _2573;
        _2800 = ((_2995 * _1019) * _3006) + _2575;
    }
    else
    {
        _2790 = _2223;
        _2792 = _2225;
        _2794 = _2227;
        _2796 = _2571;
        _2798 = _2573;
        _2800 = _2575;
    }
    float _4720 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _4731 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _4742 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    uint _2820 = _283 + 6u;
    float _2828 = _954 / cbSceneParam._m0[86u].x;
    float _2829 = _955 / cbSceneParam._m0[86u].y;
    vec4 _2843 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2828, _2829, (log2((isnan(cbSceneParam._m0[77u].w) ? _889 : (isnan(_889) ? cbSceneParam._m0[77u].w : min(_889, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2845 = _2843.x;
    float _2846 = _2843.y;
    float _2847 = _2843.z;
    float _2848 = _2843.w;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    if (_889 > cbSceneParam._m0[78u].w)
    {
        float _2903 = isnan(_889) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _889 : min(cbSceneParam._m0[80u].w, _889));
        float _2904 = _2903 / _889;
        float _2915 = _2904 * _939;
        float _2916 = _940 * _2904;
        float _2917 = (-0.0) - _2916;
        float _2919 = _2904 * _941;
        float _2921 = (cbSceneParam._m0[77u].w * _2917) / _2903;
        float _2922 = _2921 + cbSceneParam._m0[79u].w;
        float _2923 = cbSceneParam._m0[79u].w - _2916;
        float _2929 = sqrt(((_2915 * _2915) + (_2916 * _2916)) + (_2919 * _2919));
        float _2932 = (1.0 - (cbSceneParam._m0[77u].w / _2903)) * _2929;
        float _2937 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2939 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3092;
        if (abs((_2917 - _2921) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3092 = ((((_2922 > 0.0) ? exp2(_2937 * _2922) : (2.0 - exp2(_2939 * _2922))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2932;
        }
        else
        {
            float _3052 = 1.0 / cbSceneParam._m0[80u].x;
            float _3053 = isnan(_2923) ? _2922 : (isnan(_2922) ? _2923 : max(_2922, _2923));
            float _3054 = isnan(_2923) ? _2922 : (isnan(_2922) ? _2923 : min(_2922, _2923));
            float _3063 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : min(_3053, 0.0));
            float _3064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : min(_3054, 0.0));
            _3092 = ((abs(_2929 / _2917) * cbSceneParam._m0[80u].y) * ((((_3063 - _3064) * 2.0) - ((exp2(_2937 * (isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0)))) - exp2(_2937 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))))) * _3052)) - ((exp2(_2939 * _3063) - exp2(_2939 * _3064)) * _3052))) + (_2932 * cbSceneParam._m0[80u].z);
        }
        vec4 _3094 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2828, _2829, 1.0), 0.0);
        float _3103 = exp2((_3092 * (-1.44269502162933349609375)) * (1.0 - _3094.w));
        float _3104 = log2(_3103);
        float _3120 = log2(_2848);
        _2941 = (exp2(_3120 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].x)) * _3094.x) / cbSceneParam._m0[78u].x)) + _2845;
        _2943 = (exp2(_3120 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].y)) * _3094.y) / cbSceneParam._m0[78u].y)) + _2846;
        _2945 = (exp2(_3120 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].z)) * _3094.z) / cbSceneParam._m0[78u].z)) + _2847;
        _2947 = _3103 * _2848;
    }
    else
    {
        _2941 = _2845;
        _2943 = _2846;
        _2945 = _2847;
        _2947 = _2848;
    }
    float _2959 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2960 = _2959 == 3.0;
    float _2961 = log2(_2947);
    float _2968 = exp2(_2961 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2790 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1032))) + ((_2796 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1839)) * cbPerFrame._m0[3u].x));
    float _2969 = exp2(_2961 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2792 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1032))) + ((_2798 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1839)) * cbPerFrame._m0[3u].x));
    float _2970 = exp2(_2961 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2794 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1032))) + ((_2800 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1839)) * cbPerFrame._m0[3u].x));
    float _2979 = (_2959 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2979 * (_2960 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2941)));
    SV_Target.y = _2979 * (_2960 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2943)));
    SV_Target.z = _2979 * (_2960 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2945)));
    SV_Target.w = cbInstanceData._m0[_2820].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2820].w;
}


