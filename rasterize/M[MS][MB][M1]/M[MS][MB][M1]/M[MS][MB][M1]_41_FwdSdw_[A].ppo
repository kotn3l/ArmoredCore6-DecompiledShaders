#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1169;
float _3834;
float _3835;
float _3836;
float _3837;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _284.x * cbMtdParam._m0[9u].x;
    float _291 = _284.y * cbMtdParam._m0[9u].y;
    float _292 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _335 = _331.z;
    float _340 = (_331.x * 2.0) + (-1.0);
    float _342 = (_331.y * 2.0) + (-1.0);
    float _343 = dot(vec2(_340, _342), vec2(_340, _342));
    float _3846 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _349 = sqrt(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))));
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _368 = _366.x;
    float _369 = 1.0 - _368;
    float _378 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _381 = ((isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : min(_378, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _390 = (_381 - ((((((_368 - _369) * cbMtdParam._m0[24u].z) + _369) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _381))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3867 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _398 = (_391 * ((_311.x * cbMtdParam._m0[18u].x) - _290)) + _290;
    float _399 = (_391 * ((_311.y * cbMtdParam._m0[18u].y) - _291)) + _291;
    float _400 = (_391 * ((_311.z * cbMtdParam._m0[18u].z) - _292)) + _292;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _415 = _413.x;
    float _416 = 1.0 - _415;
    float _445 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_415 - _416) * cbMtdParam._m0[24u].w) + _416) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3878 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _454 = ((((cbMtdParam._m0[10u].x - _398) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _446) + _398;
    float _455 = ((((cbMtdParam._m0[10u].y - _399) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _446) + _399;
    float _456 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _400)) * _446) + _400;
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _471 = _469.x;
    float _473 = _471 - (_471 * _391);
    float _475 = _473 - (_473 * _446);
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _496 = (_489.x * 2.0) + (-1.0);
    float _497 = (_489.y * 2.0) + (-1.0);
    float _498 = dot(vec2(_496, _497), vec2(_496, _497));
    float _3889 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _506 = (_391 * (_489.z - _335)) + _335;
    float _509 = ((cbMtdParam._m0[23u].y - _506) * _446) + _506;
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _537 = (_531.x * 2.0) + (-1.0);
    float _538 = (_531.y * 2.0) + (-1.0);
    float _539 = dot(vec2(_537, _538), vec2(_537, _538));
    float _3900 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _556 = (((_496 - _340) + (cbMtdParam._m0[21u].x * _340)) * _391) + _340;
    float _557 = (((_497 - _342) + (cbMtdParam._m0[21u].x * _342)) * _391) + _342;
    float _558 = (_391 * (sqrt(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) - _349)) + _349;
    float _569 = (((_537 - _556) + (_556 * cbMtdParam._m0[22u].z)) * _446) + _556;
    float _570 = (((_538 - _557) + (_557 * cbMtdParam._m0[22u].z)) * _446) + _557;
    float _571 = ((sqrt(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) - _558) * _446) + _558;
    float _573 = cbMtdParam._m0[22u].x + _331.w;
    float _576 = fma(_571, _232 * NORMAL.x, fma(_570, _239 * TANGENT.x, (_225 * _217) * _569));
    float _579 = fma(_571, _232 * NORMAL.y, fma(_570, _239 * TANGENT.y, (_225 * _218) * _569));
    float _582 = fma(_571, _232 * NORMAL.z, fma(_570, _239 * TANGENT.z, (_225 * _219) * _569));
    float _586 = inversesqrt(dot(vec3(_576, _579, _582), vec3(_576, _579, _582)));
    float _587 = _586 * _576;
    float _588 = _586 * _579;
    float _589 = _586 * _582;
    float _3911 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _590 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _3922 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3933 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3944 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3955 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3966 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _595 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _609 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _659 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _649);
    float _660 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _649);
    float _661 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _649);
    float _665 = inversesqrt(dot(vec3(_659, _660, _661), vec3(_659, _660, _661)));
    float _666 = _659 * _665;
    float _667 = _660 * _665;
    float _668 = _661 * _665;
    vec4 _673 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _675 = _673.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _850 = sqrt(((_659 * _659) + (_660 * _660)) + (_661 * _661));
        float _856 = (cbMatDynParam._m0[5u].x * _850) + cbMatDynParam._m0[5u].y;
        float _3977 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _861 = (cbMatDynParam._m0[5u].z * _850) + cbMatDynParam._m0[5u].w;
        float _3988 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) - _857)) + _857) < ((_675 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _687 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _688 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _708 = fma(_589, cbSceneParam._m0[5u].z, fma(_588, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _587));
    float _711 = fma(_589, cbSceneParam._m0[6u].z, fma(_588, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _587));
    float _714 = fma(_589, cbSceneParam._m0[7u].z, fma(_588, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _587));
    uint _727 = _245 + 9u;
    uint _728 = _727 + uint(cbMatDynParam._m0[0u].w);
    float _734 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_728].x;
    float _735 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * cbInstanceData._m0[_728].y;
    float _736 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * cbInstanceData._m0[_728].z;
    float _3999 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _4010 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _738 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _740 = 1.0 - _595;
    float _741 = _737 * _740;
    float _742 = _738 * _740;
    float _743 = _739 * _740;
    float _748 = (_737 + (-0.039999999105930328369140625)) * _595;
    float _749 = (_738 + (-0.039999999105930328369140625)) * _595;
    float _750 = (_739 + (-0.039999999105930328369140625)) * _595;
    float _751 = _748 + 0.039999999105930328369140625;
    float _753 = _749 + 0.039999999105930328369140625;
    float _754 = _750 + 0.039999999105930328369140625;
    vec4 _763 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _687, cbSceneParam._m0[86u].y * _688));
    float _767 = ((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * TEXCOORD_5.w) * _763.x;
    float _768 = dot(vec3(_587, _588, _589), vec3(_666, _667, _668));
    float _771 = _768 * 2.0;
    float _775 = (_771 * _587) - _666;
    float _776 = (_771 * _588) - _667;
    float _777 = (_771 * _589) - _668;
    float _781 = abs(dot(vec3(_666, _667, _668), vec3(_587, _588, _589)));
    float _4032 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _783 = sqrt(_590);
    float _796 = exp2((_783 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_783 * 3.0));
    float _802 = (1.0 - _796) * ((_783 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _803 = _796 * _783;
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1168;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _893 = fma(_839, cbModelParam._m0[26u].z, fma(_835, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _831));
        float _897 = fma(_839, cbModelParam._m0[27u].z, fma(_835, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _831));
        float _901 = fma(_839, cbModelParam._m0[28u].z, fma(_835, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _831));
        float _926 = _831 + _587;
        float _927 = _835 + _588;
        float _928 = _839 + _589;
        float _938 = fma(_928, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926)) - _893;
        float _939 = fma(_928, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926)) - _897;
        float _940 = fma(_928, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926)) - _901;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_893 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_897 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[34u].z) + ((((((_901 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _996 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_962.x + (-0.5));
        float _998 = _996 * (_962.y + (-0.5));
        float _999 = _996 * (_962.z + (-0.5));
        float _1006 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_969.x + (-0.5));
        float _1008 = _1006 * (_969.y + (-0.5));
        float _1009 = _1006 * (_969.z + (-0.5));
        float _1016 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_976.x + (-0.5));
        float _1018 = _1016 * (_976.y + (-0.5));
        float _1019 = _1016 * (_976.z + (-0.5));
        float _1026 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_983.x + (-0.5));
        float _1028 = _1026 * (_983.y + (-0.5));
        float _1029 = _1026 * (_983.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1050 = (dot(vec3(_587, _588, _589), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1060 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _4080 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1062 + 1.0))) + _1067) * _1030;
        float _1077 = _998 * 0.5;
        float _1078 = _1008 * 0.5;
        float _1079 = _1018 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_587, _588, _589), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _4113 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1104 + 1.0))) + _1109) * _1031;
        float _1119 = _999 * 0.5;
        float _1120 = _1009 * 0.5;
        float _1121 = _1019 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_587, _588, _589), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _4146 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1146 + 1.0))) + _1151) * _1032;
        _1168 = _999;
        _1170 = _998;
        _1171 = _997;
        _1172 = _1009;
        _1173 = _1008;
        _1174 = _1007;
        _1175 = _1019;
        _1176 = _1018;
        _1177 = _1017;
        _1178 = _1032;
        _1179 = _1031;
        _1180 = _1030;
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _1169;
        _1170 = _1169;
        _1171 = _1169;
        _1172 = _1169;
        _1173 = _1169;
        _1174 = _1169;
        _1175 = _1169;
        _1176 = _1169;
        _1177 = _1169;
        _1178 = _1169;
        _1179 = _1169;
        _1180 = _1169;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1211 = fma(_839, cbModelParam._m0[30u].z, fma(_835, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _831));
        float _1215 = fma(_839, cbModelParam._m0[31u].z, fma(_835, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _831));
        float _1219 = fma(_839, cbModelParam._m0[32u].z, fma(_835, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _831));
        float _1242 = _831 + _587;
        float _1243 = _835 + _588;
        float _1244 = _839 + _589;
        float _1254 = fma(_1244, cbModelParam._m0[30u].z, fma(_1243, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1242)) - _1211;
        float _1255 = fma(_1244, cbModelParam._m0[31u].z, fma(_1243, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1242)) - _1215;
        float _1256 = fma(_1244, cbModelParam._m0[32u].z, fma(_1243, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1242)) - _1219;
        float _1260 = inversesqrt(dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256)));
        float _1273 = ((_1260 * _1254) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1211 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1260 * _1255) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1215 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1260 * _1256) / cbModelParam._m0[35u].z) + ((((((_1219 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        float _1310 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1277.x + (-0.5));
        float _1312 = _1310 * (_1277.y + (-0.5));
        float _1313 = _1310 * (_1277.z + (-0.5));
        float _1320 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1284.x + (-0.5));
        float _1322 = _1320 * (_1284.y + (-0.5));
        float _1323 = _1320 * (_1284.z + (-0.5));
        float _1330 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1291.x + (-0.5));
        float _1332 = _1330 * (_1291.y + (-0.5));
        float _1333 = _1330 * (_1291.z + (-0.5));
        float _1340 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1298.x + (-0.5));
        float _1342 = _1340 * (_1298.y + (-0.5));
        float _1343 = _1340 * (_1298.z + (-0.5));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = _1311 * 0.5;
        float _1348 = _1321 * 0.5;
        float _1349 = _1331 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_587, _588, _589), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4209 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1374 + 1.0))) + _1379) * _1344;
        float _1389 = _1312 * 0.5;
        float _1390 = _1322 * 0.5;
        float _1391 = _1332 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_587, _588, _589), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4242 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1416 + 1.0))) + _1421) * _1345;
        float _1431 = _1313 * 0.5;
        float _1432 = _1323 * 0.5;
        float _1433 = _1333 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_587, _588, _589), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4275 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1458 + 1.0))) + _1463) * _1346;
        _1480 = _1313;
        _1481 = _1312;
        _1482 = _1311;
        _1483 = _1323;
        _1484 = _1322;
        _1485 = _1321;
        _1486 = _1333;
        _1487 = _1332;
        _1488 = _1331;
        _1489 = _1346;
        _1490 = _1345;
        _1491 = _1344;
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
    }
    else
    {
        _1480 = _1169;
        _1481 = _1169;
        _1482 = _1169;
        _1483 = _1169;
        _1484 = _1169;
        _1485 = _1169;
        _1486 = _1169;
        _1487 = _1169;
        _1488 = _1169;
        _1489 = _1169;
        _1490 = _1169;
        _1491 = _1169;
        _1492 = 0.0;
        _1493 = 0.0;
        _1494 = 0.0;
    }
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1181)) + _1181;
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1182)) + _1182;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1183)) + _1183;
    float _1527 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1505, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1530 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1505, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1533 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1505, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1504));
    float _1548 = _775 * 0.5;
    float _1549 = _776 * 0.5;
    float _1550 = _777 * 0.5;
    float _1551 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1554 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1557 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1591;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1564 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1168, _1172, _1175, _1178));
        float _1568 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1572 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1579 = dot(vec4(cbModelParam._m0[39u]), vec4(_1548, _1549, _1550, 1.0));
        _1591 = dot(vec3(isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1579) ? 0.0 : (isnan(0.0) ? _1579 : max(0.0, _1579))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1591 = 1.0;
    }
    float _1602;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1593 = dot(vec4(cbModelParam._m0[40u]), vec4(_1548, _1549, _1550, 1.0));
        _1602 = dot(vec3(isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1602 = 1.0;
    }
    float _1606 = (_1602 * cbModelParam._m0[1u].x) + (_1591 * (1.0 - cbModelParam._m0[1u].x));
    float _1616 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _590);
    float _1617 = isnan(_1616) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1616 : min(cbModelParam._m0[25u].z, _1616));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1664 = fma(_839, cbModelParam._m0[13u].z, fma(_835, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _831)) + cbModelParam._m0[13u].w;
        float _1668 = fma(_839, cbModelParam._m0[14u].z, fma(_835, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _831)) + cbModelParam._m0[14u].w;
        float _1672 = fma(_839, cbModelParam._m0[15u].z, fma(_835, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _831)) + cbModelParam._m0[15u].w;
        float _1675 = fma(_777, cbModelParam._m0[13u].z, fma(_776, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _775));
        float _1678 = fma(_777, cbModelParam._m0[14u].z, fma(_776, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _775));
        float _1681 = fma(_777, cbModelParam._m0[15u].z, fma(_776, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _775));
        float _1709;
        if (_1675 > 0.0)
        {
            _1709 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1709 = frontier_phi_17_15_ladder;
        }
        float _1880;
        if (_1678 > 0.0)
        {
            _1880 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1880 = frontier_phi_26_22_ladder;
        }
        float _2176;
        if (_1681 > 0.0)
        {
            _2176 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2176 = frontier_phi_38_33_ladder;
        }
        float _2178 = isnan(_1880) ? _1709 : (isnan(_1709) ? _1880 : min(_1709, _1880));
        float _2179 = isnan(_2176) ? _2178 : (isnan(_2178) ? _2176 : min(_2178, _2176));
        float _2183 = (_2179 * _1675) + _1664;
        float _2184 = (_2179 * _1678) + _1668;
        float _2185 = (_2179 * _1681) + _1672;
        float _2186 = _2179 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2186;
        float _2190 = _2186 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 > _2190) || ((_2184 < _2188) || ((_2183 < _2188) || (_2183 > _2190))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2330 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2185, cbModelParam._m0[9u].z, fma(_2184, cbModelParam._m0[9u].y, _2183 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2185, cbModelParam._m0[10u].z, fma(_2184, cbModelParam._m0[10u].y, _2183 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2185, cbModelParam._m0[11u].z, fma(_2184, cbModelParam._m0[11u].y, _2183 * cbModelParam._m0[11u].x))), _1617);
            frontier_phi_16_38_ladder = _2330.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2330.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2330.x * cbModelParam._m0[1u].y;
        }
        _1697 = frontier_phi_16_38_ladder_2;
        _1699 = frontier_phi_16_38_ladder_1;
        _1701 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_775, _776, _777), _1617);
        _1697 = _1685.x * cbModelParam._m0[1u].y;
        _1699 = _1685.y * cbModelParam._m0[1u].y;
        _1701 = _1685.z * cbModelParam._m0[1u].y;
    }
    float _1705 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _590);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1705 : min(cbModelParam._m0[25u].w, _1705));
    float _1795;
    float _1797;
    float _1799;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1759 = fma(_839, cbModelParam._m0[21u].z, fma(_835, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _831)) + cbModelParam._m0[21u].w;
        float _1763 = fma(_839, cbModelParam._m0[22u].z, fma(_835, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _831)) + cbModelParam._m0[22u].w;
        float _1767 = fma(_839, cbModelParam._m0[23u].z, fma(_835, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _831)) + cbModelParam._m0[23u].w;
        float _1770 = fma(_777, cbModelParam._m0[21u].z, fma(_776, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _775));
        float _1773 = fma(_777, cbModelParam._m0[22u].z, fma(_776, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _775));
        float _1776 = fma(_777, cbModelParam._m0[23u].z, fma(_776, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _775));
        float _1885;
        if (_1770 > 0.0)
        {
            _1885 = abs((1.0 - _1759) / _1770);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1759 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1885 = frontier_phi_28_24_ladder;
        }
        float _2203;
        if (_1773 > 0.0)
        {
            _2203 = abs((1.0 - _1763) / _1773);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1763 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2203 = frontier_phi_40_35_ladder;
        }
        float _2541;
        if (_1776 > 0.0)
        {
            _2541 = abs((1.0 - _1767) / _1776);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1767 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2541 = frontier_phi_50_47_ladder;
        }
        float _2543 = isnan(_2203) ? _1885 : (isnan(_1885) ? _2203 : min(_1885, _2203));
        float _2544 = isnan(_2541) ? _2543 : (isnan(_2543) ? _2541 : min(_2543, _2541));
        float _2548 = (_2544 * _1770) + _1759;
        float _2549 = (_2544 * _1773) + _1763;
        float _2550 = (_2544 * _1776) + _1767;
        float _2551 = _2544 * 9.9999997473787516355514526367188e-05;
        float _2552 = (-1.0) - _2551;
        float _2554 = _2551 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2550 > _2554) || ((_2550 < _2552) || ((_2549 > _2554) || ((_2549 < _2552) || ((_2548 < _2552) || (_2548 > _2554))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2672 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2550, cbModelParam._m0[17u].z, fma(_2549, cbModelParam._m0[17u].y, _2548 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2550, cbModelParam._m0[18u].z, fma(_2549, cbModelParam._m0[18u].y, _2548 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2550, cbModelParam._m0[19u].z, fma(_2549, cbModelParam._m0[19u].y, _2548 * cbModelParam._m0[19u].x))), _1706);
            frontier_phi_25_50_ladder = _2672.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2672.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2672.x * cbModelParam._m0[1u].z;
        }
        _1795 = frontier_phi_25_50_ladder_2;
        _1797 = frontier_phi_25_50_ladder_1;
        _1799 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1779 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_775, _776, _777), _1706);
        _1795 = _1779.x * cbModelParam._m0[1u].z;
        _1797 = _1779.y * cbModelParam._m0[1u].z;
        _1799 = _1779.z * cbModelParam._m0[1u].z;
    }
    float _1812 = (((_802 * _751) + _803) * _767) * ((cbModelParam._m0[1u].w * (_1795 - _1697)) + _1697);
    float _1814 = (((_802 * _753) + _803) * _767) * ((cbModelParam._m0[1u].w * (_1797 - _1699)) + _1699);
    float _1816 = (((_802 * _754) + _803) * _767) * ((cbModelParam._m0[1u].w * (_1799 - _1701)) + _1701);
    float _1819 = fma(_1816, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1812 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1816, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1812 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1816, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, _1812 * cbSceneParam._m0[91u].x));
    float _1859 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1863 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1872 = _1859 / _1871;
    float _1873 = _1863 / _1871;
    float _1874 = _1867 / _1871;
    float _2021;
    float _2022;
    float _2023;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1901 = ((uint(_1874 > cbSceneParam._m0[59u].y) + uint(_1874 > cbSceneParam._m0[59u].x)) + uint(_1874 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1902 = _1901 + 43u;
        uint _1910 = _1901 + 44u;
        uint _1918 = _1901 + 45u;
        uint _1926 = _1901 + 46u;
        float _1937 = fma(_1871, cbSceneParam._m0[_1902].w, fma(_1867, cbSceneParam._m0[_1902].z, fma(_1863, cbSceneParam._m0[_1902].y, _1859 * cbSceneParam._m0[_1902].x)));
        float _1941 = fma(_1871, cbSceneParam._m0[_1910].w, fma(_1867, cbSceneParam._m0[_1910].z, fma(_1863, cbSceneParam._m0[_1910].y, _1859 * cbSceneParam._m0[_1910].x)));
        float _1949 = fma(_1871, cbSceneParam._m0[_1926].w, fma(_1867, cbSceneParam._m0[_1926].z, fma(_1863, cbSceneParam._m0[_1926].y, _1859 * cbSceneParam._m0[_1926].x)));
        float _1954 = cbSceneParam._m0[33u].z * _1949;
        float _1956 = cbSceneParam._m0[33u].w * _1949;
        float _1959 = fma(_1871, cbSceneParam._m0[_1918].w, fma(_1867, cbSceneParam._m0[_1918].z, fma(_1863, cbSceneParam._m0[_1918].y, _1859 * cbSceneParam._m0[_1918].x))) / _1949;
        float _2007 = (cbSceneParam._m0[33u].x - sqrt(((_1873 * _1873) + (_1872 * _1872)) + (_1874 * _1874))) * cbSceneParam._m0[33u].y;
        float _4401 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2014 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1954 + _1937) / _1949, (_1956 + _1941) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1956 + _1937) / _1949, (_1941 - _1954) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1937 - _1954) / _1949, (_1941 - _1956) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1937 - _1956) / _1949, (_1954 + _1941) / _1949), _1959), 0.0)).x), vec4(0.25)));
        _2021 = 1.0 - (_2014 * cbSceneParam._m0[34u].x);
        _2022 = 1.0 - (_2014 * cbSceneParam._m0[34u].y);
        _2023 = 1.0 - (_2014 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2021 = 1.0;
        _2022 = 1.0;
        _2023 = 1.0;
    }
    float _2087;
    float _2089;
    float _2091;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2075 = fma(_1871, cbSceneParam._m0[63u].w, fma(_1867, cbSceneParam._m0[63u].z, fma(_1863, cbSceneParam._m0[63u].y, _1859 * cbSceneParam._m0[63u].x)));
        float _2076 = fma(_1871, cbSceneParam._m0[60u].w, fma(_1867, cbSceneParam._m0[60u].z, fma(_1863, cbSceneParam._m0[60u].y, _1859 * cbSceneParam._m0[60u].x))) / _2075;
        float _2077 = fma(_1871, cbSceneParam._m0[61u].w, fma(_1867, cbSceneParam._m0[61u].z, fma(_1863, cbSceneParam._m0[61u].y, _1859 * cbSceneParam._m0[61u].x))) / _2075;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2076 >= cbSceneParam._m0[64u].x) && (_2077 >= cbSceneParam._m0[64u].y)) && (_2076 <= cbSceneParam._m0[64u].z)) && (_2077 <= cbSceneParam._m0[64u].w))
        {
            float _2216 = fma(_1871, cbSceneParam._m0[62u].w, fma(_1867, cbSceneParam._m0[62u].z, fma(_1863, cbSceneParam._m0[62u].y, _1859 * cbSceneParam._m0[62u].x))) / _2075;
            float _2220 = isnan(cbSceneParam._m0[41u].w) ? _2216 : (isnan(_2216) ? cbSceneParam._m0[41u].w : max(_2216, cbSceneParam._m0[41u].w));
            float _2263 = (cbSceneParam._m0[33u].x - sqrt(((_1873 * _1873) + (_1872 * _1872)) + (_1874 * _1874))) * cbSceneParam._m0[33u].y;
            float _4417 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
            float _2270 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2076, cbSceneParam._m0[33u].w + _2077), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2076, _2077 - cbSceneParam._m0[33u].z), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2076 - cbSceneParam._m0[33u].z, _2077 - cbSceneParam._m0[33u].w), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2076 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2077), _2220), 0.0)).x), vec4(0.25)));
            float _2274 = 1.0 - (_2270 * cbSceneParam._m0[34u].x);
            float _2275 = 1.0 - (_2270 * cbSceneParam._m0[34u].y);
            float _2276 = 1.0 - (_2270 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2276) ? _2023 : (isnan(_2023) ? _2276 : min(_2023, _2276));
            frontier_phi_37_36_ladder_1 = isnan(_2275) ? _2022 : (isnan(_2022) ? _2275 : min(_2022, _2275));
            frontier_phi_37_36_ladder_2 = isnan(_2274) ? _2021 : (isnan(_2021) ? _2274 : min(_2021, _2274));
        }
        else
        {
            frontier_phi_37_36_ladder = _2023;
            frontier_phi_37_36_ladder_1 = _2022;
            frontier_phi_37_36_ladder_2 = _2021;
        }
        _2087 = frontier_phi_37_36_ladder_2;
        _2089 = frontier_phi_37_36_ladder_1;
        _2091 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2087 = _2021;
        _2089 = _2022;
        _2091 = _2023;
    }
    uvec4 _2096 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _2098 = _2096.x * 14u;
    uint _2099 = _2098 + 13u;
    float _2106 = _767 + (-1.0);
    float _2111 = (cbLight._m0[_2099].x * _2106) + 1.0;
    float _2112 = (cbLight._m0[_2099].y * _2106) + 1.0;
    float _2113 = (cbLight._m0[_2099].z * _2106) + 1.0;
    float _2114 = (cbLight._m0[_2099].w * _2106) + 1.0;
    uint _2115 = _2098 + 5u;
    float _2121 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
    uint _2125 = _2098 + 4u;
    float _2135 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
    uint _2139 = _2098 | 1u;
    float _2150 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_587, _588, _589));
    float _2153 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_587, _588, _589));
    float _4453 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _4464 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2158 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * 0.3183098733425140380859375;
    float _2160 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2167 = ((cbLight._m0[_2115].x * _2121) * _2160) + (((cbLight._m0[_2125].x * _2087) * _2135) * _2158);
    float _2168 = ((_2121 * cbLight._m0[_2115].y) * _2160) + (((cbLight._m0[_2125].y * _2089) * _2135) * _2158);
    float _2169 = ((_2121 * cbLight._m0[_2115].z) * _2160) + (((cbLight._m0[_2125].z * _2091) * _2135) * _2158);
    uvec4 _2173 = floatBitsToUint(cbLight._m0[_2098 + 12u]);
    bool _2175 = _2173.x == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2175)
    {
        _2277 = _2167;
        _2279 = _2168;
        _2281 = _2169;
    }
    else
    {
        uint _2285 = _2098 + 6u;
        float _2301 = (dot(vec3(cbLight._m0[_2098 + 2u].xyz), vec3(_587, _588, _589)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4475 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2304 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2277 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2167;
        _2279 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2168;
        _2281 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2169;
    }
    bool _2284 = _2173.y == 0u;
    float _2339;
    float _2341;
    float _2343;
    if (_2284)
    {
        _2339 = _2277;
        _2341 = _2279;
        _2343 = _2281;
    }
    else
    {
        uint _2512 = _2098 + 7u;
        float _2528 = (dot(vec3(cbLight._m0[_2098 + 3u].xyz), vec3(_587, _588, _589)) * 0.5) + 0.5;
        float _2529 = _2528 * _2528;
        float _4491 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2530 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2531 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2339 = (((cbLight._m0[_2512].x * 0.3183098733425140380859375) * _2530) * _2531) + _2277;
        _2341 = (((cbLight._m0[_2512].y * 0.3183098733425140380859375) * _2530) * _2531) + _2279;
        _2343 = (((cbLight._m0[_2512].z * 0.3183098733425140380859375) * _2530) * _2531) + _2281;
    }
    uint _2346 = _2098 + 8u;
    float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _590) * 0.949999988079071044921875);
    float _2360 = _2359 * _2359;
    float _2361 = cbLight._m0[_2098].x + _666;
    float _2362 = cbLight._m0[_2098].y + _667;
    float _2363 = cbLight._m0[_2098].z + _668;
    float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
    float _2368 = _2367 * _2361;
    float _2369 = _2367 * _2362;
    float _2370 = _2367 * _2363;
    float _2371 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2098].xyz));
    float _4507 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2374 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _4518 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _2375 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2376 = dot(vec3(_587, _588, _589), vec3(_2368, _2369, _2370));
    float _4529 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2380 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2368, _2369, _2370));
    float _4540 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2384 = _2360 * _2360;
    float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
    float _2396 = exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0);
    float _2397 = 0.959999978542327880859375 - _748;
    float _2399 = 0.959999978542327880859375 - _749;
    float _2400 = 0.959999978542327880859375 - _750;
    float _2407 = 1.0 - _2360;
    float _2418 = (0.5 / (((_2375 * ((_2374 * _2407) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2407) + _2360) * _2374))) * _2374;
    float _4551 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2420 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
    uint _2434 = _2098 + 9u;
    float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _590) * 0.949999988079071044921875);
    float _2446 = _2445 * _2445;
    float _2447 = cbLight._m0[_2139].x + _666;
    float _2448 = cbLight._m0[_2139].y + _667;
    float _2449 = cbLight._m0[_2139].z + _668;
    float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
    float _2454 = _2453 * _2447;
    float _2455 = _2453 * _2448;
    float _2456 = _2453 * _2449;
    float _2457 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2139].xyz));
    float _4562 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2461 = dot(vec3(_587, _588, _589), vec3(_2454, _2455, _2456));
    float _4573 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2465 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2454, _2455, _2456));
    float _4584 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2469 = _2446 * _2446;
    float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
    float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
    float _2487 = 1.0 - _2446;
    float _2497 = (0.5 / (((_2375 * ((_2460 * _2487) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2487) + _2446) * _2460))) * _2460;
    float _4595 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2499 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
    float _2509 = (((((_2480 * _2397) + _751) * cbLight._m0[_2434].x) * _2499) * _2121) + ((((cbLight._m0[_2346].x * _2087) * ((_2396 * _2397) + _751)) * _2420) * _2135);
    float _2510 = (((((_2480 * _2399) + _753) * cbLight._m0[_2434].y) * _2499) * _2121) + ((((cbLight._m0[_2346].y * _2089) * ((_2396 * _2399) + _753)) * _2420) * _2135);
    float _2511 = (((((_2480 * _2400) + _754) * cbLight._m0[_2434].z) * _2499) * _2121) + ((((cbLight._m0[_2346].z * _2091) * ((_2396 * _2400) + _754)) * _2420) * _2135);
    float _2567;
    float _2569;
    float _2571;
    if (_2175)
    {
        _2567 = _2509;
        _2569 = _2510;
        _2571 = _2511;
    }
    else
    {
        uint _2573 = _2098 + 2u;
        uint _2577 = _2098 + 10u;
        float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2573].w)) * _590) * 0.949999988079071044921875);
        float _2592 = _2591 * _2591;
        float _2593 = cbLight._m0[_2573].x + _666;
        float _2594 = cbLight._m0[_2573].y + _667;
        float _2595 = cbLight._m0[_2573].z + _668;
        float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
        float _2600 = _2599 * _2593;
        float _2601 = _2599 * _2594;
        float _2602 = _2599 * _2595;
        float _2603 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2573].xyz));
        float _4606 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2607 = dot(vec3(_587, _588, _589), vec3(_2600, _2601, _2602));
        float _4617 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2611 = dot(vec3(cbLight._m0[_2573].xyz), vec3(_2600, _2601, _2602));
        float _4628 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2615 = _2592 * _2592;
        float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
        float _2626 = exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0);
        float _2633 = 1.0 - _2592;
        float _2643 = (0.5 / (((_2375 * ((_2606 * _2633) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2633) + _2592) * _2606))) * _2606;
        float _4639 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2645 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
        float _2646 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2567 = (((((_2626 * _2397) + _751) * cbLight._m0[_2577].x) * _2645) * _2646) + _2509;
        _2569 = (((((_2626 * _2399) + _753) * cbLight._m0[_2577].y) * _2645) * _2646) + _2510;
        _2571 = (((((_2626 * _2400) + _754) * cbLight._m0[_2577].z) * _2645) * _2646) + _2511;
    }
    float _2677;
    float _2679;
    float _2681;
    if (_2284)
    {
        _2677 = _2567;
        _2679 = _2569;
        _2681 = _2571;
    }
    else
    {
        uint _2688 = _2098 + 3u;
        uint _2692 = _2098 + 11u;
        float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2688].w)) * _590) * 0.949999988079071044921875);
        float _2707 = _2706 * _2706;
        float _2708 = cbLight._m0[_2688].x + _666;
        float _2709 = cbLight._m0[_2688].y + _667;
        float _2710 = cbLight._m0[_2688].z + _668;
        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
        float _2715 = _2714 * _2708;
        float _2716 = _2714 * _2709;
        float _2717 = _2714 * _2710;
        float _2718 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2688].xyz));
        float _4655 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2722 = dot(vec3(_587, _588, _589), vec3(_2715, _2716, _2717));
        float _4666 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2726 = dot(vec3(cbLight._m0[_2688].xyz), vec3(_2715, _2716, _2717));
        float _4677 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2730 = _2707 * _2707;
        float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
        float _2741 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
        float _2748 = 1.0 - _2707;
        float _2758 = (0.5 / (((_2375 * ((_2721 * _2748) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2748) + _2707) * _2721))) * _2721;
        float _4688 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2760 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
        float _2761 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2677 = (((((_2741 * _2397) + _751) * cbLight._m0[_2692].x) * _2760) * _2761) + _2567;
        _2679 = (((((_2741 * _2399) + _753) * cbLight._m0[_2692].y) * _2760) * _2761) + _2569;
        _2681 = (((((_2741 * _2400) + _754) * cbLight._m0[_2692].z) * _2760) * _2761) + _2571;
    }
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    if (_2096.y == 0u)
    {
        uvec4 _2782 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2783 = _2782.x;
        uint _2794 = uint((float(_2782.y) * floor(float(uint(cbSceneParam._m0[85u].y * _688) / _2783))) + floor(float(uint(cbSceneParam._m0[85u].x * _687) / _2783)));
        float _2804 = (log2(_1874 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2805 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        uint _2808 = uint(isnan(14.0) ? _2805 : (isnan(_2805) ? 14.0 : min(_2805, 14.0)));
        uvec4 _2813 = texelFetch(g_lightClusterGridBuffer, int(((_2808 << 2u) + (_2794 << 6u)) >> 2u));
        uint _2814 = _2813.x;
        uint _2815 = _2782.z;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        if (((((1u << ((_2815 >> 4u) & 15u)) + 4294967295u) & _2814) == 0u) || ((_2815 & 240u) == 0u))
        {
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
        }
        else
        {
            float _2895;
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            uint _3053 = 0u;
            uint _3062;
            bool _3063;
            for (;;)
            {
                _3062 = texelFetch(g_lightClassification, int((((_2808 << 5u) + (_2794 << 9u)) + (_3053 << 2u)) >> 2u)).x;
                _3063 = _3062 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3063)
                {
                    frontier_phi_71_pred = _3052;
                    frontier_phi_71_pred_1 = _3051;
                    frontier_phi_71_pred_2 = _3050;
                    frontier_phi_71_pred_3 = _3049;
                    frontier_phi_71_pred_4 = _3048;
                    frontier_phi_71_pred_5 = _3047;
                }
                else
                {
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    uint _3198;
                    _3192 = _3047;
                    _3193 = _3048;
                    _3194 = _3049;
                    _3195 = _3050;
                    _3196 = _3051;
                    _3197 = _3052;
                    _3198 = _3062;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    for (;;)
                    {
                        uint _3202 = uint(findLSB(_3198)) + (_3053 << 5u);
                        uint _3199 = (_3198 + 4294967295u) & _3198;
                        uint _3204 = _3202 * 48u;
                        vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 3u)).x));
                        uint _3224 = (_3202 * 48u) + 4u;
                        vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 3u)).x));
                        uint _3243 = (_3202 * 48u) + 8u;
                        vec3 _3254 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x));
                        float _3258 = _3218.x - _1872;
                        float _3259 = _3218.y - _1873;
                        float _3260 = _3218.z - _1874;
                        float _3261 = dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260));
                        float _3264 = inversesqrt(_3261);
                        float _3265 = _3264 * _3258;
                        float _3266 = _3264 * _3259;
                        float _3267 = _3264 * _3260;
                        float _3268 = dot(vec3(_708, _711, _714), vec3(_3265, _3266, _3267));
                        float _3273 = 1.0 - (_3261 * _3218.w);
                        float _4714 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3274 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3275 = sqrt(_3261) * _3237.w;
                        float _3278 = 1.39999997615814208984375 / (_3275 + 1.39999997615814208984375);
                        float _3279 = _3278 * _3278;
                        float _3282 = ((1.0 - _3279) * _3268) + _3279;
                        float _3285 = _3275 * _3275;
                        float _3289 = ((isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0))) * _3274) / ((_3285 * 0.699999988079071044921875) + 1.0);
                        float _3293 = (-0.0) - _1872;
                        float _3294 = (-0.0) - _1873;
                        float _3295 = (-0.0) - _1874;
                        float _3299 = inversesqrt(dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295)));
                        float _3300 = _3299 * _3293;
                        float _3301 = _3299 * _3294;
                        float _3302 = _3299 * _3295;
                        float _3309 = exp2(log2(1.0 / ((_3285 * 3.5) + 5.0)) * 0.25);
                        float _3310 = 1.0 - _783;
                        float _3317 = sqrt(1.0 - ((1.0 - (_3310 * _3310)) * (1.0 - (_3309 * _3309))));
                        float _3318 = _3317 * _3317;
                        float _3319 = _3318 * _3318;
                        float _3320 = _3300 + _3265;
                        float _3321 = _3301 + _3266;
                        float _3322 = _3302 + _3267;
                        float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                        float _3330 = dot(vec3(_708, _711, _714), vec3(_3300, _3301, _3302));
                        float _4730 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3333 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3334 = dot(vec3(_708, _711, _714), vec3(_3326 * _3320, _3326 * _3321, _3326 * _3322));
                        float _4741 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3337 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3341 = ((_3337 * _3337) * (_3319 + (-1.0))) + 1.0;
                        float _3342 = _3278 * _3318;
                        float _3343 = _3342 * _3342;
                        float _3346 = ((1.0 - _3343) * _3268) + _3343;
                        float _4752 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3347 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3348 = 1.0 - _3318;
                        float _3358 = (0.5 / (((_3347 * ((_3333 * _3348) + _3318)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3318) * _3333))) * _3347;
                        float _4763 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3369 = (((_3319 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3341 * _3341) * ((_3285 * 2.1991131305694580078125) + 3.141590118408203125))) * _3274;
                        _3122 = (_3289 * _3237.x) + _3195;
                        _3123 = (_3289 * _3237.y) + _3196;
                        _3124 = (_3289 * _3237.z) + _3197;
                        _3119 = (_3369 * _3254.x) + _3192;
                        _3120 = (_3369 * _3254.y) + _3193;
                        _3121 = (_3369 * _3254.z) + _3194;
                        if (_3199 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3192 = _3119;
                            _3193 = _3120;
                            _3194 = _3121;
                            _3195 = _3122;
                            _3196 = _3123;
                            _3197 = _3124;
                            _3198 = _3199;
                        }
                    }
                    frontier_phi_71_pred = _3124;
                    frontier_phi_71_pred_1 = _3123;
                    frontier_phi_71_pred_2 = _3122;
                    frontier_phi_71_pred_3 = _3121;
                    frontier_phi_71_pred_4 = _3120;
                    frontier_phi_71_pred_5 = _3119;
                }
                _2905 = frontier_phi_71_pred;
                _2903 = frontier_phi_71_pred_1;
                _2901 = frontier_phi_71_pred_2;
                _2899 = frontier_phi_71_pred_3;
                _2897 = frontier_phi_71_pred_4;
                _2895 = frontier_phi_71_pred_5;
                uint _3054 = _3053 + 1u;
                if (_3054 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3047 = _2895;
                    _3048 = _2897;
                    _3049 = _2899;
                    _3050 = _2901;
                    _3051 = _2903;
                    _3052 = _2905;
                    _3053 = _3054;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
        }
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.z;
        uint _2911 = (_2909 >> 8u) & 15u;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        if (((4294967295u << _2911) & _2814) == 0u)
        {
            _3015 = _2894;
            _3017 = _2896;
            _3019 = _2898;
            _3021 = _2900;
            _3023 = _2902;
            _3025 = _2904;
        }
        else
        {
            float _3040 = inversesqrt(dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874)));
            float _3041 = _3040 * _1872;
            float _3042 = _3040 * _1873;
            float _3043 = _3040 * _1874;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2911 < ((_2909 >> 12u) & 15u))
            {
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3026;
                float _3175 = _2894;
                float _3176 = _2896;
                float _3177 = _2898;
                float _3178 = _2900;
                float _3179 = _2902;
                float _3180 = _2904;
                uint _3181 = _2911;
                uint _3190;
                bool _3191;
                for (;;)
                {
                    _3190 = texelFetch(g_lightClassification, int((((_2808 << 5u) + (_2794 << 9u)) + (_3181 << 2u)) >> 2u)).x;
                    _3191 = _3190 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3191)
                    {
                        frontier_phi_82_pred = _3180;
                        frontier_phi_82_pred_1 = _3179;
                        frontier_phi_82_pred_2 = _3178;
                        frontier_phi_82_pred_3 = _3177;
                        frontier_phi_82_pred_4 = _3176;
                        frontier_phi_82_pred_5 = _3175;
                    }
                    else
                    {
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3396 = _3175;
                        float _3397 = _3176;
                        float _3398 = _3177;
                        float _3399 = _3178;
                        float _3400 = _3179;
                        float _3401 = _3180;
                        uint _3402 = _3190;
                        uint _3403;
                        vec4 _3428;
                        float _3429;
                        vec4 _3444;
                        vec3 _3456;
                        vec4 _3472;
                        vec4 _3488;
                        float _3534;
                        bool _3535;
                        for (;;)
                        {
                            uint _3413 = ((_3181 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3402));
                            _3403 = (_3402 + 4294967295u) & _3402;
                            uint _3415 = _3413 * 40u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            _3429 = _3428.w;
                            uint _3431 = (_3413 * 40u) + 4u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3446 = (_3413 * 40u) + 8u;
                            _3456 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x));
                            uint _3459 = (_3413 * 40u) + 16u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3475 = (_3413 * 40u) + 20u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3490 = (_3413 * 40u) + 24u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3509 = (_3413 * 40u) + 28u;
                            vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            _3534 = fma(_1874, _3522.z, fma(_1873, _3522.y, _3522.x * _1872)) + _3522.w;
                            _3535 = !((fma(_1874, _3503.z, fma(_1873, _3503.y, _3503.x * _1872)) + _3503.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3535)
                            {
                                float _3562 = _3428.x - _1872;
                                float _3563 = _3428.y - _1873;
                                float _3564 = _3428.z - _1874;
                                float _3565 = dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564));
                                float _3568 = inversesqrt(_3565);
                                float _3569 = _3568 * _3562;
                                float _3570 = _3568 * _3563;
                                float _3571 = _3568 * _3564;
                                float _3575 = 1.0 - (_3565 / (_3429 * _3429));
                                float _4774 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3580 = sqrt(_3565) * _3444.w;
                                float _3582 = 1.39999997615814208984375 / (_3580 + 1.39999997615814208984375);
                                float _3583 = _3582 * _3582;
                                float _3586 = ((1.0 - _3583) * dot(vec3(_3569, _3570, _3571), vec3(_708, _711, _714))) + _3583;
                                float _3589 = _3580 * _3580;
                                float _3593 = (fma(_1874, _3472.z, fma(_1873, _3472.y, _3472.x * _1872)) + _3472.w) / _3534;
                                float _3594 = (fma(_1874, _3488.z, fma(_1873, _3488.y, _3488.x * _1872)) + _3488.w) / _3534;
                                float _3598 = 1.0 - dot(vec2(_3593, _3594), vec2(_3593, _3594));
                                float _4790 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3600 = _3599 * (((isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0))) * _3576) / ((_3589 * 0.699999988079071044921875) + 1.0));
                                float _3612 = exp2(log2(1.0 / ((_3589 * 3.5) + 5.0)) * 0.25);
                                float _3613 = 1.0 - _783;
                                float _3620 = sqrt(1.0 - ((1.0 - (_3613 * _3613)) * (1.0 - (_3612 * _3612))));
                                float _3621 = _3620 * _3620;
                                float _3622 = _3621 * _3621;
                                float _3623 = _3569 - _3041;
                                float _3624 = _3570 - _3042;
                                float _3625 = _3571 - _3043;
                                float _3629 = inversesqrt(dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625)));
                                float _3633 = dot(vec3(_708, _711, _714), vec3((-0.0) - _3041, (-0.0) - _3042, (-0.0) - _3043));
                                float _4801 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3636 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3637 = dot(vec3(_708, _711, _714), vec3(_3629 * _3623, _3629 * _3624, _3629 * _3625));
                                float _4812 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3640 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3644 = ((_3640 * _3640) * (_3622 + (-1.0))) + 1.0;
                                float _3645 = _3582 * _3621;
                                float _3646 = _3645 * _3645;
                                float _3652 = ((1.0 - _3646) * dot(vec3(_708, _711, _714), vec3(_3569, _3570, _3571))) + _3646;
                                float _4823 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3654 = 1.0 - _3621;
                                float _3664 = (0.5 / (((_3653 * ((_3636 * _3654) + _3621)) + 9.9999999392252902907785028219223e-09) + (((_3653 * _3654) + _3621) * _3636))) * _3653;
                                float _4834 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3674 = (_3599 * _3576) * (((_3622 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3644 * _3644) * ((_3589 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3600 * _3444.z;
                                frontier_phi_88_pred_1 = _3600 * _3444.y;
                                frontier_phi_88_pred_2 = _3600 * _3444.x;
                                frontier_phi_88_pred_3 = _3674 * _3456.z;
                                frontier_phi_88_pred_4 = _3674 * _3456.y;
                                frontier_phi_88_pred_5 = _3674 * _3456.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3683 = frontier_phi_88_pred;
                            _3682 = frontier_phi_88_pred_1;
                            _3681 = frontier_phi_88_pred_2;
                            _3680 = frontier_phi_88_pred_3;
                            _3679 = frontier_phi_88_pred_4;
                            _3678 = frontier_phi_88_pred_5;
                            _3386 = _3681 + _3399;
                            _3387 = _3682 + _3400;
                            _3388 = _3683 + _3401;
                            _3383 = _3678 + _3396;
                            _3384 = _3679 + _3397;
                            _3385 = _3680 + _3398;
                            if (_3403 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3403;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3388;
                        frontier_phi_82_pred_1 = _3387;
                        frontier_phi_82_pred_2 = _3386;
                        frontier_phi_82_pred_3 = _3385;
                        frontier_phi_82_pred_4 = _3384;
                        frontier_phi_82_pred_5 = _3383;
                    }
                    _3026 = frontier_phi_82_pred;
                    _3024 = frontier_phi_82_pred_1;
                    _3022 = frontier_phi_82_pred_2;
                    _3020 = frontier_phi_82_pred_3;
                    _3018 = frontier_phi_82_pred_4;
                    _3016 = frontier_phi_82_pred_5;
                    uint _3182 = _3181 + 1u;
                    if (_3182 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3175 = _3016;
                        _3176 = _3018;
                        _3177 = _3020;
                        _3178 = _3022;
                        _3179 = _3024;
                        _3180 = _3026;
                        _3181 = _3182;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3022;
                frontier_phi_63_64_ladder_1 = _3026;
                frontier_phi_63_64_ladder_2 = _3024;
                frontier_phi_63_64_ladder_3 = _3020;
                frontier_phi_63_64_ladder_4 = _3018;
                frontier_phi_63_64_ladder_5 = _3016;
            }
            else
            {
                frontier_phi_63_64_ladder = _2900;
                frontier_phi_63_64_ladder_1 = _2904;
                frontier_phi_63_64_ladder_2 = _2902;
                frontier_phi_63_64_ladder_3 = _2898;
                frontier_phi_63_64_ladder_4 = _2896;
                frontier_phi_63_64_ladder_5 = _2894;
            }
            _3015 = frontier_phi_63_64_ladder_5;
            _3017 = frontier_phi_63_64_ladder_4;
            _3019 = frontier_phi_63_64_ladder_3;
            _3021 = frontier_phi_63_64_ladder;
            _3023 = frontier_phi_63_64_ladder_2;
            _3025 = frontier_phi_63_64_ladder_1;
        }
        float _3030 = isnan(1.0) ? _767 : (isnan(_767) ? 1.0 : min(_767, 1.0));
        _2827 = (_3030 * _3021) + _2339;
        _2829 = (_3030 * _3023) + _2341;
        _2831 = (_3030 * _3025) + _2343;
        _2833 = ((_3015 * _751) * _3030) + _2677;
        _2835 = ((_3017 * _753) * _3030) + _2679;
        _2837 = ((_3019 * _754) * _3030) + _2681;
    }
    else
    {
        _2827 = _2339;
        _2829 = _2341;
        _2831 = _2343;
        _2833 = _2677;
        _2835 = _2679;
        _2837 = _2681;
    }
    float _4850 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4861 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4872 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _2854 = ((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2827 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _767))) + ((_2833 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1606)) * cbPerFrame._m0[3u].x);
    float _2855 = ((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2829 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _767))) + ((_2835 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1606)) * cbPerFrame._m0[3u].x);
    float _2856 = ((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2831 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _767))) + ((_2837 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1606)) * cbPerFrame._m0[3u].x);
    uint _2857 = _245 + 6u;
    float _2865 = _687 / cbSceneParam._m0[86u].x;
    float _2866 = _688 / cbSceneParam._m0[86u].y;
    vec4 _2880 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, (log2((isnan(cbSceneParam._m0[77u].w) ? _609 : (isnan(_609) ? cbSceneParam._m0[77u].w : min(_609, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2882 = _2880.x;
    float _2883 = _2880.y;
    float _2884 = _2880.z;
    float _2885 = _2880.w;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    if (_609 > cbSceneParam._m0[78u].w)
    {
        float _2919 = isnan(_609) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _609 : min(cbSceneParam._m0[80u].w, _609));
        float _2920 = _2919 / _609;
        float _2931 = _2920 * _659;
        float _2932 = _660 * _2920;
        float _2933 = (-0.0) - _2932;
        float _2935 = _2920 * _661;
        float _2937 = (cbSceneParam._m0[77u].w * _2933) / _2919;
        float _2938 = _2937 + cbSceneParam._m0[79u].w;
        float _2939 = cbSceneParam._m0[79u].w - _2932;
        float _2945 = sqrt(((_2931 * _2931) + (_2932 * _2932)) + (_2935 * _2935));
        float _2948 = (1.0 - (cbSceneParam._m0[77u].w / _2919)) * _2945;
        float _2953 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2955 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3132;
        if (abs((_2933 - _2937) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3132 = ((((_2938 > 0.0) ? exp2(_2953 * _2938) : (2.0 - exp2(_2955 * _2938))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2948;
        }
        else
        {
            float _3076 = 1.0 / cbSceneParam._m0[80u].x;
            float _3077 = isnan(_2939) ? _2938 : (isnan(_2938) ? _2939 : max(_2938, _2939));
            float _3078 = isnan(_2939) ? _2938 : (isnan(_2938) ? _2939 : min(_2938, _2939));
            float _3087 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : min(_3077, 0.0));
            float _3088 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : min(_3078, 0.0));
            _3132 = ((abs(_2945 / _2933) * cbSceneParam._m0[80u].y) * ((((_3087 - _3088) * 2.0) - ((exp2(_2953 * (isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0)))) - exp2(_2953 * (isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0))))) * _3076)) - ((exp2(_2955 * _3087) - exp2(_2955 * _3088)) * _3076))) + (_2948 * cbSceneParam._m0[80u].z);
        }
        vec4 _3134 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, 1.0), 0.0);
        float _3143 = exp2((_3132 * (-1.44269502162933349609375)) * (1.0 - _3134.w));
        float _3144 = log2(_3143);
        float _3160 = log2(_2885);
        _2957 = (exp2(_3160 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].x)) * _3134.x) / cbSceneParam._m0[78u].x)) + _2882;
        _2959 = (exp2(_3160 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].y)) * _3134.y) / cbSceneParam._m0[78u].y)) + _2883;
        _2961 = (exp2(_3160 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].z)) * _3134.z) / cbSceneParam._m0[78u].z)) + _2884;
        _2963 = _3143 * _2885;
    }
    else
    {
        _2957 = _2882;
        _2959 = _2883;
        _2961 = _2884;
        _2963 = _2885;
    }
    bool _3170;
    vec4 _2973;
    vec4 _2995;
    float _2997;
    float _3001;
    float _3002;
    float _3003;
    float _3004;
    bool _3014;
    for (;;)
    {
        _2973 = cbMatDynParam._m0[0u];
        float _2975 = roundEven(_2973.y);
        bool _2976 = _2975 == 3.0;
        float _2977 = log2(_2963);
        float _2984 = exp2(_2977 * cbSceneParam._m0[78u].x) * _2854;
        float _2985 = exp2(_2977 * cbSceneParam._m0[78u].y) * _2855;
        float _2986 = exp2(_2977 * cbSceneParam._m0[78u].z) * _2856;
        float _2993 = _675 + (-0.5);
        _2995 = cbMtdParam._m0[1u];
        _2997 = _2995.y * _2993;
        float _3000 = (_2975 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3001 = _3000 * (_2976 ? _2984 : (_2984 + (cbSceneParam._m0[72u].w * _2957)));
        _3002 = _3000 * (_2976 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2959)));
        _3003 = _3000 * (_2976 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2961)));
        _3004 = _2993 * 0.999000012874603271484375;
        _3014 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3014)
        {
            if ((cbInstanceData._m0[_245 + 7u].x + _3004) < 0.5)
            {
                _3170 = true;
                break;
            }
        }
        uint _3111 = _727 + uint(_2973.w);
        if ((cbInstanceData._m0[_3111].w < 1.0) && ((cbInstanceData._m0[_3111].w + _3004) < 0.5))
        {
            _3170 = true;
            break;
        }
        if ((_2997 + 1.0) < _2995.x)
        {
            _3170 = true;
            break;
        }
        _3170 = false;
        break;
    }
    float _3374;
    if (_3170)
    {
        discard_state = true;
        _3374 = 0.0;
    }
    else
    {
        _3374 = cbInstanceData._m0[_2857].w;
    }
    SV_Target.x = _3001;
    SV_Target.y = _3002;
    SV_Target.z = _3003;
    SV_Target.w = _3374;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2857].w;
    discard_exit();
}


