#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1142;
float _3526;
float _3527;
float _3528;
float _3529;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _308 = _304.z;
    float _313 = (_304.x * 2.0) + (-1.0);
    float _315 = (_304.y * 2.0) + (-1.0);
    float _316 = dot(vec2(_313, _315), vec2(_313, _315));
    float _3538 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _322 = sqrt(1.0 - (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))));
    vec4 _339 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _341 = _339.x;
    float _342 = 1.0 - _341;
    float _351 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _354 = ((isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : min(_351, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _363 = (_354 - ((((((_341 - _342) * cbMtdParam._m0[24u].z) + _342) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _354))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3559 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _371 = (_364 * (cbMtdParam._m0[17u].x - _284)) + _284;
    float _372 = (_364 * (cbMtdParam._m0[17u].y - _285)) + _285;
    float _373 = (_364 * (cbMtdParam._m0[17u].z - _286)) + _286;
    vec4 _386 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _388 = _386.x;
    float _389 = 1.0 - _388;
    float _418 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_388 - _389) * cbMtdParam._m0[24u].w) + _389) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3570 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _427 = ((((cbMtdParam._m0[10u].x - _371) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _419) + _371;
    float _428 = ((((cbMtdParam._m0[10u].y - _372) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _419) + _372;
    float _429 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _373)) * _419) + _373;
    vec4 _442 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _444 = _442.x;
    float _446 = _444 - (_444 * _364);
    float _448 = _446 - (_446 * _419);
    vec4 _462 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _469 = (_462.x * 2.0) + (-1.0);
    float _470 = (_462.y * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3581 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _479 = (_364 * (_462.z - _308)) + _308;
    float _482 = ((cbMtdParam._m0[23u].y - _479) * _419) + _479;
    vec4 _504 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _510 = (_504.x * 2.0) + (-1.0);
    float _511 = (_504.y * 2.0) + (-1.0);
    float _512 = dot(vec2(_510, _511), vec2(_510, _511));
    float _3592 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _529 = (((_469 - _313) + (cbMtdParam._m0[21u].x * _313)) * _364) + _313;
    float _530 = (((_470 - _315) + (cbMtdParam._m0[21u].x * _315)) * _364) + _315;
    float _531 = (_364 * (sqrt(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) - _322)) + _322;
    float _542 = (((_510 - _529) + (_529 * cbMtdParam._m0[22u].z)) * _419) + _529;
    float _543 = (((_511 - _530) + (_530 * cbMtdParam._m0[22u].z)) * _419) + _530;
    float _544 = ((sqrt(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) - _531) * _419) + _531;
    float _546 = cbMtdParam._m0[22u].x + _304.w;
    float _549 = fma(_544, _226 * NORMAL.x, fma(_543, _233 * TANGENT.x, (_219 * _211) * _542));
    float _552 = fma(_544, _226 * NORMAL.y, fma(_543, _233 * TANGENT.y, (_219 * _212) * _542));
    float _555 = fma(_544, _226 * NORMAL.z, fma(_543, _233 * TANGENT.z, (_219 * _213) * _542));
    float _559 = inversesqrt(dot(vec3(_549, _552, _555), vec3(_549, _552, _555)));
    float _560 = _559 * _549;
    float _561 = _559 * _552;
    float _562 = _559 * _555;
    float _3603 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _563 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3625 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3636 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3647 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3658 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _568 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _582 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _632 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _622);
    float _633 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _622);
    float _634 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _622);
    float _638 = inversesqrt(dot(vec3(_632, _633, _634), vec3(_632, _633, _634)));
    float _639 = _632 * _638;
    float _640 = _633 * _638;
    float _641 = _634 * _638;
    vec4 _646 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _648 = _646.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _823 = sqrt(((_632 * _632) + (_633 * _633)) + (_634 * _634));
        float _829 = (cbMatDynParam._m0[5u].x * _823) + cbMatDynParam._m0[5u].y;
        float _3669 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _834 = (cbMatDynParam._m0[5u].z * _823) + cbMatDynParam._m0[5u].w;
        float _3680 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) - _830)) + _830) < ((_648 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _660 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _661 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _681 = fma(_562, cbSceneParam._m0[5u].z, fma(_561, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _560));
    float _684 = fma(_562, cbSceneParam._m0[6u].z, fma(_561, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _560));
    float _687 = fma(_562, cbSceneParam._m0[7u].z, fma(_561, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _560));
    uint _700 = _239 + 9u;
    uint _701 = _700 + uint(cbMatDynParam._m0[0u].w);
    float _707 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_701].x;
    float _708 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_701].y;
    float _709 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_701].z;
    float _3691 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _713 = 1.0 - _568;
    float _714 = _710 * _713;
    float _715 = _711 * _713;
    float _716 = _712 * _713;
    float _721 = (_710 + (-0.039999999105930328369140625)) * _568;
    float _722 = (_711 + (-0.039999999105930328369140625)) * _568;
    float _723 = (_712 + (-0.039999999105930328369140625)) * _568;
    float _724 = _721 + 0.039999999105930328369140625;
    float _726 = _722 + 0.039999999105930328369140625;
    float _727 = _723 + 0.039999999105930328369140625;
    vec4 _736 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661));
    float _740 = ((isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * TEXCOORD_5.w) * _736.x;
    float _741 = dot(vec3(_560, _561, _562), vec3(_639, _640, _641));
    float _744 = _741 * 2.0;
    float _748 = (_744 * _560) - _639;
    float _749 = (_744 * _561) - _640;
    float _750 = (_744 * _562) - _641;
    float _754 = abs(dot(vec3(_639, _640, _641), vec3(_560, _561, _562)));
    float _3724 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _756 = sqrt(_563);
    float _769 = exp2((_756 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_756 * 3.0));
    float _775 = (1.0 - _769) * ((_756 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _776 = _769 * _756;
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1141;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _866 = fma(_812, cbModelParam._m0[26u].z, fma(_808, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804));
        float _870 = fma(_812, cbModelParam._m0[27u].z, fma(_808, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804));
        float _874 = fma(_812, cbModelParam._m0[28u].z, fma(_808, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804));
        float _899 = _804 + _560;
        float _900 = _808 + _561;
        float _901 = _812 + _562;
        float _911 = fma(_901, cbModelParam._m0[26u].z, fma(_900, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _899)) - _866;
        float _912 = fma(_901, cbModelParam._m0[27u].z, fma(_900, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _899)) - _870;
        float _913 = fma(_901, cbModelParam._m0[28u].z, fma(_900, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _899)) - _874;
        float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
        float _930 = ((_917 * _911) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_866 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_917 * _912) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_870 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_917 * _913) / cbModelParam._m0[34u].z) + ((((((_874 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        float _969 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_935.x + (-0.5));
        float _971 = _969 * (_935.y + (-0.5));
        float _972 = _969 * (_935.z + (-0.5));
        float _979 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_942.x + (-0.5));
        float _981 = _979 * (_942.y + (-0.5));
        float _982 = _979 * (_942.z + (-0.5));
        float _989 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_949.x + (-0.5));
        float _991 = _989 * (_949.y + (-0.5));
        float _992 = _989 * (_949.z + (-0.5));
        float _999 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_956.x + (-0.5));
        float _1001 = _999 * (_956.y + (-0.5));
        float _1002 = _999 * (_956.z + (-0.5));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = _970 * 0.5;
        float _1007 = _980 * 0.5;
        float _1008 = _990 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1023 = (dot(vec3(_560, _561, _562), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1033 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3772 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1035 + 1.0))) + _1040) * _1003;
        float _1050 = _971 * 0.5;
        float _1051 = _981 * 0.5;
        float _1052 = _991 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_560, _561, _562), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3805 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1077 + 1.0))) + _1082) * _1004;
        float _1092 = _972 * 0.5;
        float _1093 = _982 * 0.5;
        float _1094 = _992 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_560, _561, _562), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3838 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1119 + 1.0))) + _1124) * _1005;
        _1141 = _972;
        _1143 = _971;
        _1144 = _970;
        _1145 = _982;
        _1146 = _981;
        _1147 = _980;
        _1148 = _992;
        _1149 = _991;
        _1150 = _990;
        _1151 = _1005;
        _1152 = _1004;
        _1153 = _1003;
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1156 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
    }
    else
    {
        _1141 = _1142;
        _1143 = _1142;
        _1144 = _1142;
        _1145 = _1142;
        _1146 = _1142;
        _1147 = _1142;
        _1148 = _1142;
        _1149 = _1142;
        _1150 = _1142;
        _1151 = _1142;
        _1152 = _1142;
        _1153 = _1142;
        _1154 = 0.0;
        _1155 = 0.0;
        _1156 = 0.0;
    }
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1184 = fma(_812, cbModelParam._m0[30u].z, fma(_808, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _804));
        float _1188 = fma(_812, cbModelParam._m0[31u].z, fma(_808, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _804));
        float _1192 = fma(_812, cbModelParam._m0[32u].z, fma(_808, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _804));
        float _1215 = _804 + _560;
        float _1216 = _808 + _561;
        float _1217 = _812 + _562;
        float _1227 = fma(_1217, cbModelParam._m0[30u].z, fma(_1216, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1215)) - _1184;
        float _1228 = fma(_1217, cbModelParam._m0[31u].z, fma(_1216, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1215)) - _1188;
        float _1229 = fma(_1217, cbModelParam._m0[32u].z, fma(_1216, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1215)) - _1192;
        float _1233 = inversesqrt(dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229)));
        float _1246 = ((_1233 * _1227) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1184 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1233 * _1228) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1188 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1233 * _1229) / cbModelParam._m0[35u].z) + ((((((_1192 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        float _1283 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1250.x + (-0.5));
        float _1285 = _1283 * (_1250.y + (-0.5));
        float _1286 = _1283 * (_1250.z + (-0.5));
        float _1293 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1257.x + (-0.5));
        float _1295 = _1293 * (_1257.y + (-0.5));
        float _1296 = _1293 * (_1257.z + (-0.5));
        float _1303 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1264.x + (-0.5));
        float _1305 = _1303 * (_1264.y + (-0.5));
        float _1306 = _1303 * (_1264.z + (-0.5));
        float _1313 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1271.x + (-0.5));
        float _1315 = _1313 * (_1271.y + (-0.5));
        float _1316 = _1313 * (_1271.z + (-0.5));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = _1284 * 0.5;
        float _1321 = _1294 * 0.5;
        float _1322 = _1304 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_560, _561, _562), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _3901 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1347 + 1.0))) + _1352) * _1317;
        float _1362 = _1285 * 0.5;
        float _1363 = _1295 * 0.5;
        float _1364 = _1305 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_560, _561, _562), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _3934 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1389 + 1.0))) + _1394) * _1318;
        float _1404 = _1286 * 0.5;
        float _1405 = _1296 * 0.5;
        float _1406 = _1306 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_560, _561, _562), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _3967 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1431 + 1.0))) + _1436) * _1319;
        _1453 = _1286;
        _1454 = _1285;
        _1455 = _1284;
        _1456 = _1296;
        _1457 = _1295;
        _1458 = _1294;
        _1459 = _1306;
        _1460 = _1305;
        _1461 = _1304;
        _1462 = _1319;
        _1463 = _1318;
        _1464 = _1317;
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1466 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1467 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
    }
    else
    {
        _1453 = _1142;
        _1454 = _1142;
        _1455 = _1142;
        _1456 = _1142;
        _1457 = _1142;
        _1458 = _1142;
        _1459 = _1142;
        _1460 = _1142;
        _1461 = _1142;
        _1462 = _1142;
        _1463 = _1142;
        _1464 = _1142;
        _1465 = 0.0;
        _1466 = 0.0;
        _1467 = 0.0;
    }
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1154)) + _1154;
    float _1478 = (cbModelParam._m0[1u].x * (_1466 - _1155)) + _1155;
    float _1479 = (cbModelParam._m0[1u].x * (_1467 - _1156)) + _1156;
    float _1500 = fma(_1479, cbSceneParam._m0[89u].z, fma(_1478, cbSceneParam._m0[89u].y, _1477 * cbSceneParam._m0[89u].x));
    float _1503 = fma(_1479, cbSceneParam._m0[90u].z, fma(_1478, cbSceneParam._m0[90u].y, _1477 * cbSceneParam._m0[90u].x));
    float _1506 = fma(_1479, cbSceneParam._m0[91u].z, fma(_1478, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1477));
    float _1521 = _748 * 0.5;
    float _1522 = _749 * 0.5;
    float _1523 = _750 * 0.5;
    float _1524 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1455, _1458, _1461, _1464));
    float _1527 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1454, _1457, _1460, _1463));
    float _1530 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1564;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1537 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1141, _1145, _1148, _1151));
        float _1541 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1143, _1146, _1149, _1152));
        float _1545 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1144, _1147, _1150, _1153));
        float _1552 = dot(vec4(cbModelParam._m0[39u]), vec4(_1521, _1522, _1523, 1.0));
        _1564 = dot(vec3(isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1552) ? 0.0 : (isnan(0.0) ? _1552 : max(0.0, _1552))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1564 = 1.0;
    }
    float _1575;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1566 = dot(vec4(cbModelParam._m0[40u]), vec4(_1521, _1522, _1523, 1.0));
        _1575 = dot(vec3(isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1566) ? 0.0 : (isnan(0.0) ? _1566 : max(0.0, _1566))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1575 = 1.0;
    }
    float _1579 = (_1575 * cbModelParam._m0[1u].x) + (_1564 * (1.0 - cbModelParam._m0[1u].x));
    float _1589 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _563);
    float _1590 = isnan(_1589) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1589 : min(cbModelParam._m0[25u].z, _1589));
    float _1671;
    float _1673;
    float _1675;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1638 = fma(_812, cbModelParam._m0[13u].z, fma(_808, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804)) + cbModelParam._m0[13u].w;
        float _1642 = fma(_812, cbModelParam._m0[14u].z, fma(_808, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804)) + cbModelParam._m0[14u].w;
        float _1646 = fma(_812, cbModelParam._m0[15u].z, fma(_808, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804)) + cbModelParam._m0[15u].w;
        float _1649 = fma(_750, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748));
        float _1652 = fma(_750, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748));
        float _1655 = fma(_750, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748));
        float _1683;
        if (_1649 > 0.0)
        {
            _1683 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1683 = frontier_phi_17_15_ladder;
        }
        float _1887;
        if (_1652 > 0.0)
        {
            _1887 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1887 = frontier_phi_26_22_ladder;
        }
        float _2141;
        if (_1655 > 0.0)
        {
            _2141 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2141 = frontier_phi_38_33_ladder;
        }
        float _2143 = isnan(_1887) ? _1683 : (isnan(_1683) ? _1887 : min(_1683, _1887));
        float _2144 = isnan(_2141) ? _2143 : (isnan(_2143) ? _2141 : min(_2143, _2141));
        float _2148 = (_2144 * _1649) + _1638;
        float _2149 = (_2144 * _1652) + _1642;
        float _2150 = (_2144 * _1655) + _1646;
        float _2151 = _2144 * 9.9999997473787516355514526367188e-05;
        float _2153 = (-1.0) - _2151;
        float _2155 = _2151 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2150 > _2155) || ((_2150 < _2153) || ((_2149 > _2155) || ((_2149 < _2153) || ((_2148 < _2153) || (_2148 > _2155))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2278 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2150, cbModelParam._m0[9u].z, fma(_2149, cbModelParam._m0[9u].y, _2148 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2150, cbModelParam._m0[10u].z, fma(_2149, cbModelParam._m0[10u].y, _2148 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2150, cbModelParam._m0[11u].z, fma(_2149, cbModelParam._m0[11u].y, _2148 * cbModelParam._m0[11u].x))), _1590);
            frontier_phi_16_38_ladder = _2278.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2278.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2278.x * cbModelParam._m0[1u].y;
        }
        _1671 = frontier_phi_16_38_ladder_2;
        _1673 = frontier_phi_16_38_ladder_1;
        _1675 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_748, _749, _750), _1590);
        _1671 = _1659.x * cbModelParam._m0[1u].y;
        _1673 = _1659.y * cbModelParam._m0[1u].y;
        _1675 = _1659.z * cbModelParam._m0[1u].y;
    }
    float _1679 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _563);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1679 : min(cbModelParam._m0[25u].w, _1679));
    float _1770;
    float _1772;
    float _1774;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1734 = fma(_812, cbModelParam._m0[21u].z, fma(_808, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804)) + cbModelParam._m0[21u].w;
        float _1738 = fma(_812, cbModelParam._m0[22u].z, fma(_808, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804)) + cbModelParam._m0[22u].w;
        float _1742 = fma(_812, cbModelParam._m0[23u].z, fma(_808, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804)) + cbModelParam._m0[23u].w;
        float _1745 = fma(_750, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748));
        float _1748 = fma(_750, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748));
        float _1751 = fma(_750, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748));
        float _1892;
        if (_1745 > 0.0)
        {
            _1892 = abs((1.0 - _1734) / _1745);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1734 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1892 = frontier_phi_28_24_ladder;
        }
        float _2168;
        if (_1748 > 0.0)
        {
            _2168 = abs((1.0 - _1738) / _1748);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1738 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2168 = frontier_phi_40_35_ladder;
        }
        float _2381;
        if (_1751 > 0.0)
        {
            _2381 = abs((1.0 - _1742) / _1751);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1742 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2381 = frontier_phi_49_46_ladder;
        }
        float _2383 = isnan(_2168) ? _1892 : (isnan(_1892) ? _2168 : min(_1892, _2168));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1745) + _1734;
        float _2389 = (_2384 * _1748) + _1738;
        float _2390 = (_2384 * _1751) + _1742;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2391;
        float _2394 = _2391 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2390 > _2394) || ((_2390 < _2392) || ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 < _2392) || (_2388 > _2394))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2589 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2390, cbModelParam._m0[17u].z, fma(_2389, cbModelParam._m0[17u].y, _2388 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2390, cbModelParam._m0[18u].z, fma(_2389, cbModelParam._m0[18u].y, _2388 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2390, cbModelParam._m0[19u].z, fma(_2389, cbModelParam._m0[19u].y, _2388 * cbModelParam._m0[19u].x))), _1680);
            frontier_phi_25_49_ladder = _2589.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2589.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2589.x * cbModelParam._m0[1u].z;
        }
        _1770 = frontier_phi_25_49_ladder_2;
        _1772 = frontier_phi_25_49_ladder_1;
        _1774 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1754 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_748, _749, _750), _1680);
        _1770 = _1754.x * cbModelParam._m0[1u].z;
        _1772 = _1754.y * cbModelParam._m0[1u].z;
        _1774 = _1754.z * cbModelParam._m0[1u].z;
    }
    float _1787 = (((_775 * _724) + _776) * _740) * ((cbModelParam._m0[1u].w * (_1770 - _1671)) + _1671);
    float _1789 = (((_775 * _726) + _776) * _740) * ((cbModelParam._m0[1u].w * (_1772 - _1673)) + _1673);
    float _1791 = (((_775 * _727) + _776) * _740) * ((cbModelParam._m0[1u].w * (_1774 - _1675)) + _1675);
    float _1794 = fma(_1791, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1787 * cbSceneParam._m0[89u].x));
    float _1797 = fma(_1791, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1787 * cbSceneParam._m0[90u].x));
    float _1800 = fma(_1791, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, _1787 * cbSceneParam._m0[91u].x));
    uvec4 _1810 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1812 = _1810.x * 14u;
    uint _1813 = _1812 + 13u;
    float _1820 = _740 + (-1.0);
    float _1825 = (cbLight._m0[_1813].x * _1820) + 1.0;
    float _1826 = (cbLight._m0[_1813].y * _1820) + 1.0;
    float _1827 = (cbLight._m0[_1813].z * _1820) + 1.0;
    float _1828 = (cbLight._m0[_1813].w * _1820) + 1.0;
    uint _1829 = _1812 + 5u;
    float _1835 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
    uint _1839 = _1812 + 4u;
    float _1846 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    uint _1850 = _1812 | 1u;
    float _1861 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_560, _561, _562));
    float _1864 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_560, _561, _562));
    float _4103 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _4114 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1869 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.3183098733425140380859375;
    float _1871 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * 0.3183098733425140380859375;
    float _1878 = ((cbLight._m0[_1829].x * _1835) * _1871) + ((cbLight._m0[_1839].x * _1846) * _1869);
    float _1879 = ((_1835 * cbLight._m0[_1829].y) * _1871) + ((_1846 * cbLight._m0[_1839].y) * _1869);
    float _1880 = ((_1835 * cbLight._m0[_1829].z) * _1871) + ((_1846 * cbLight._m0[_1839].z) * _1869);
    uvec4 _1884 = floatBitsToUint(cbLight._m0[_1812 + 12u]);
    bool _1886 = _1884.x == 0u;
    float _1897;
    float _1899;
    float _1901;
    if (_1886)
    {
        _1897 = _1878;
        _1899 = _1879;
        _1901 = _1880;
    }
    else
    {
        uint _1905 = _1812 + 6u;
        float _1921 = (dot(vec3(cbLight._m0[_1812 + 2u].xyz), vec3(_560, _561, _562)) * 0.5) + 0.5;
        float _1922 = _1921 * _1921;
        float _4125 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1924 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _1897 = (((cbLight._m0[_1905].x * 0.3183098733425140380859375) * _1923) * _1924) + _1878;
        _1899 = (((cbLight._m0[_1905].y * 0.3183098733425140380859375) * _1923) * _1924) + _1879;
        _1901 = (((cbLight._m0[_1905].z * 0.3183098733425140380859375) * _1923) * _1924) + _1880;
    }
    bool _1904 = _1884.y == 0u;
    float _1942;
    float _1944;
    float _1946;
    if (_1904)
    {
        _1942 = _1897;
        _1944 = _1899;
        _1946 = _1901;
    }
    else
    {
        uint _2112 = _1812 + 7u;
        float _2128 = (dot(vec3(cbLight._m0[_1812 + 3u].xyz), vec3(_560, _561, _562)) * 0.5) + 0.5;
        float _2129 = _2128 * _2128;
        float _4141 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2131 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _1942 = (((cbLight._m0[_2112].x * 0.3183098733425140380859375) * _2130) * _2131) + _1897;
        _1944 = (((cbLight._m0[_2112].y * 0.3183098733425140380859375) * _2130) * _2131) + _1899;
        _1946 = (((cbLight._m0[_2112].z * 0.3183098733425140380859375) * _2130) * _2131) + _1901;
    }
    uint _1949 = _1812 + 8u;
    float _1962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _563) * 0.949999988079071044921875);
    float _1963 = _1962 * _1962;
    float _1964 = cbLight._m0[_1812].x + _639;
    float _1965 = cbLight._m0[_1812].y + _640;
    float _1966 = cbLight._m0[_1812].z + _641;
    float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
    float _1971 = _1970 * _1964;
    float _1972 = _1970 * _1965;
    float _1973 = _1970 * _1966;
    float _1974 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_1812].xyz));
    float _4157 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1977 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _4168 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _1978 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _1979 = dot(vec3(_560, _561, _562), vec3(_1971, _1972, _1973));
    float _4179 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _1983 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_1971, _1972, _1973));
    float _4190 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1987 = _1963 * _1963;
    float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
    float _1999 = exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0);
    float _2000 = 0.959999978542327880859375 - _721;
    float _2002 = 0.959999978542327880859375 - _722;
    float _2003 = 0.959999978542327880859375 - _723;
    float _2010 = 1.0 - _1963;
    float _2021 = (0.5 / (((_1978 * ((_1977 * _2010) + _1963)) + 9.9999999392252902907785028219223e-09) + (((_1978 * _2010) + _1963) * _1977))) * _1977;
    float _4201 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
    uint _2034 = _1812 + 9u;
    float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1850].w)) * _563) * 0.949999988079071044921875);
    float _2046 = _2045 * _2045;
    float _2047 = cbLight._m0[_1850].x + _639;
    float _2048 = cbLight._m0[_1850].y + _640;
    float _2049 = cbLight._m0[_1850].z + _641;
    float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
    float _2054 = _2053 * _2047;
    float _2055 = _2053 * _2048;
    float _2056 = _2053 * _2049;
    float _2057 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_1850].xyz));
    float _4212 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2061 = dot(vec3(_560, _561, _562), vec3(_2054, _2055, _2056));
    float _4223 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2065 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_2054, _2055, _2056));
    float _4234 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2069 = _2046 * _2046;
    float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
    float _2080 = exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0);
    float _2087 = 1.0 - _2046;
    float _2097 = (0.5 / (((_1978 * ((_2060 * _2087) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_1978 * _2087) + _2046) * _2060))) * _2060;
    float _4245 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2099 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
    float _2109 = (((((_2080 * _2000) + _724) * cbLight._m0[_2034].x) * _2099) * _1835) + (((((_1999 * _2000) + _724) * cbLight._m0[_1949].x) * _2023) * _1846);
    float _2110 = (((((_2080 * _2002) + _726) * cbLight._m0[_2034].y) * _2099) * _1835) + (((((_1999 * _2002) + _726) * cbLight._m0[_1949].y) * _2023) * _1846);
    float _2111 = (((((_2080 * _2003) + _727) * cbLight._m0[_2034].z) * _2099) * _1835) + (((((_1999 * _2003) + _727) * cbLight._m0[_1949].z) * _2023) * _1846);
    float _2173;
    float _2175;
    float _2177;
    if (_1886)
    {
        _2173 = _2109;
        _2175 = _2110;
        _2177 = _2111;
    }
    else
    {
        uint _2179 = _1812 + 2u;
        uint _2183 = _1812 + 10u;
        float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2179].w)) * _563) * 0.949999988079071044921875);
        float _2198 = _2197 * _2197;
        float _2199 = cbLight._m0[_2179].x + _639;
        float _2200 = cbLight._m0[_2179].y + _640;
        float _2201 = cbLight._m0[_2179].z + _641;
        float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
        float _2206 = _2205 * _2199;
        float _2207 = _2205 * _2200;
        float _2208 = _2205 * _2201;
        float _2209 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2179].xyz));
        float _4256 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2213 = dot(vec3(_560, _561, _562), vec3(_2206, _2207, _2208));
        float _4267 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2216 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2217 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2206, _2207, _2208));
        float _4278 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2221 = _2198 * _2198;
        float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
        float _2232 = exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0);
        float _2239 = 1.0 - _2198;
        float _2249 = (0.5 / (((_1978 * ((_2212 * _2239) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_1978 * _2239) + _2198) * _2212))) * _2212;
        float _4289 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2251 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
        float _2252 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2173 = (((((_2232 * _2000) + _724) * cbLight._m0[_2183].x) * _2251) * _2252) + _2109;
        _2175 = (((((_2232 * _2002) + _726) * cbLight._m0[_2183].y) * _2251) * _2252) + _2110;
        _2177 = (((((_2232 * _2003) + _727) * cbLight._m0[_2183].z) * _2251) * _2252) + _2111;
    }
    float _2287;
    float _2289;
    float _2291;
    if (_1904)
    {
        _2287 = _2173;
        _2289 = _2175;
        _2291 = _2177;
    }
    else
    {
        uint _2298 = _1812 + 3u;
        uint _2302 = _1812 + 11u;
        float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _563) * 0.949999988079071044921875);
        float _2317 = _2316 * _2316;
        float _2318 = cbLight._m0[_2298].x + _639;
        float _2319 = cbLight._m0[_2298].y + _640;
        float _2320 = cbLight._m0[_2298].z + _641;
        float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
        float _2325 = _2324 * _2318;
        float _2326 = _2324 * _2319;
        float _2327 = _2324 * _2320;
        float _2328 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2298].xyz));
        float _4305 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2332 = dot(vec3(_560, _561, _562), vec3(_2325, _2326, _2327));
        float _4316 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2336 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2325, _2326, _2327));
        float _4327 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2340 = _2317 * _2317;
        float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
        float _2351 = exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0);
        float _2358 = 1.0 - _2317;
        float _2368 = (0.5 / (((_1978 * ((_2331 * _2358) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_1978 * _2358) + _2317) * _2331))) * _2331;
        float _4338 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2370 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
        float _2371 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2287 = (((((_2351 * _2000) + _724) * cbLight._m0[_2302].x) * _2370) * _2371) + _2173;
        _2289 = (((((_2351 * _2002) + _726) * cbLight._m0[_2302].y) * _2370) * _2371) + _2175;
        _2291 = (((((_2351 * _2003) + _727) * cbLight._m0[_2302].z) * _2370) * _2371) + _2177;
    }
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    if (_1810.y == 0u)
    {
        float _2446 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2447 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2446;
        float _2448 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2446;
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2446;
        uvec4 _2461 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2462 = _2461.x;
        uint _2473 = uint((float(_2461.y) * floor(float(uint(cbSceneParam._m0[85u].y * _661) / _2462))) + floor(float(uint(cbSceneParam._m0[85u].x * _660) / _2462)));
        float _2483 = (log2(_2449 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2484 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        uint _2487 = uint(isnan(14.0) ? _2484 : (isnan(_2484) ? 14.0 : min(_2484, 14.0)));
        uvec4 _2492 = texelFetch(g_lightClusterGridBuffer, int(((_2487 << 2u) + (_2473 << 6u)) >> 2u));
        uint _2493 = _2492.x;
        uint _2494 = _2461.z;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        if (((((1u << ((_2494 >> 4u) & 15u)) + 4294967295u) & _2493) == 0u) || ((_2494 & 240u) == 0u))
        {
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
        }
        else
        {
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            uint _2753 = 0u;
            uint _2762;
            bool _2763;
            for (;;)
            {
                _2762 = texelFetch(g_lightClassification, int((((_2487 << 5u) + (_2473 << 9u)) + (_2753 << 2u)) >> 2u)).x;
                _2763 = _2762 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2763)
                {
                    frontier_phi_66_pred = _2747;
                    frontier_phi_66_pred_1 = _2752;
                    frontier_phi_66_pred_2 = _2751;
                    frontier_phi_66_pred_3 = _2750;
                    frontier_phi_66_pred_4 = _2749;
                    frontier_phi_66_pred_5 = _2748;
                }
                else
                {
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    uint _2898;
                    _2892 = _2747;
                    _2893 = _2748;
                    _2894 = _2749;
                    _2895 = _2750;
                    _2896 = _2751;
                    _2897 = _2752;
                    _2898 = _2762;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    for (;;)
                    {
                        uint _2902 = uint(findLSB(_2898)) + (_2753 << 5u);
                        uint _2899 = (_2898 + 4294967295u) & _2898;
                        uint _2904 = _2902 * 48u;
                        vec4 _2918 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 3u)).x));
                        uint _2924 = (_2902 * 48u) + 4u;
                        vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2924)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 3u)).x));
                        uint _2943 = (_2902 * 48u) + 8u;
                        vec3 _2954 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x));
                        float _2958 = _2918.x - _2447;
                        float _2959 = _2918.y - _2448;
                        float _2960 = _2918.z - _2449;
                        float _2961 = dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960));
                        float _2964 = inversesqrt(_2961);
                        float _2965 = _2964 * _2958;
                        float _2966 = _2964 * _2959;
                        float _2967 = _2964 * _2960;
                        float _2968 = dot(vec3(_681, _684, _687), vec3(_2965, _2966, _2967));
                        float _2973 = 1.0 - (_2961 * _2918.w);
                        float _4364 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2974 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _2975 = sqrt(_2961) * _2937.w;
                        float _2978 = 1.39999997615814208984375 / (_2975 + 1.39999997615814208984375);
                        float _2979 = _2978 * _2978;
                        float _2982 = ((1.0 - _2979) * _2968) + _2979;
                        float _2985 = _2975 * _2975;
                        float _2989 = ((isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0))) * _2974) / ((_2985 * 0.699999988079071044921875) + 1.0);
                        float _2993 = (-0.0) - _2447;
                        float _2994 = (-0.0) - _2448;
                        float _2995 = (-0.0) - _2449;
                        float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
                        float _3000 = _2999 * _2993;
                        float _3001 = _2999 * _2994;
                        float _3002 = _2999 * _2995;
                        float _3010 = exp2(log2(1.0 / ((_2985 * 3.5) + 5.0)) * 0.25);
                        float _3011 = 1.0 - _756;
                        float _3018 = sqrt(1.0 - ((1.0 - (_3011 * _3011)) * (1.0 - (_3010 * _3010))));
                        float _3019 = _3018 * _3018;
                        float _3020 = _3019 * _3019;
                        float _3021 = _3000 + _2965;
                        float _3022 = _3001 + _2966;
                        float _3023 = _3002 + _2967;
                        float _3027 = inversesqrt(dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023)));
                        float _3031 = dot(vec3(_681, _684, _687), vec3(_3000, _3001, _3002));
                        float _4380 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3034 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _3035 = dot(vec3(_681, _684, _687), vec3(_3027 * _3021, _3027 * _3022, _3027 * _3023));
                        float _4391 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3038 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                        float _3042 = ((_3038 * _3038) * (_3020 + (-1.0))) + 1.0;
                        float _3043 = _2978 * _3019;
                        float _3044 = _3043 * _3043;
                        float _3047 = ((1.0 - _3044) * _2968) + _3044;
                        float _4402 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3048 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3049 = 1.0 - _3019;
                        float _3059 = (0.5 / (((_3048 * ((_3034 * _3049) + _3019)) + 9.9999999392252902907785028219223e-09) + (((_3048 * _3049) + _3019) * _3034))) * _3048;
                        float _4413 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3070 = (((_3020 * 3.1415927410125732421875) * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) / ((_3042 * _3042) * ((_2985 * 2.1991131305694580078125) + 3.141590118408203125))) * _2974;
                        _2822 = (_2989 * _2937.x) + _2895;
                        _2823 = (_2989 * _2937.y) + _2896;
                        _2824 = (_2989 * _2937.z) + _2897;
                        _2819 = (_3070 * _2954.x) + _2892;
                        _2820 = (_3070 * _2954.y) + _2893;
                        _2821 = (_3070 * _2954.z) + _2894;
                        if (_2899 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2892 = _2819;
                            _2893 = _2820;
                            _2894 = _2821;
                            _2895 = _2822;
                            _2896 = _2823;
                            _2897 = _2824;
                            _2898 = _2899;
                        }
                    }
                    frontier_phi_66_pred = _2819;
                    frontier_phi_66_pred_1 = _2824;
                    frontier_phi_66_pred_2 = _2823;
                    frontier_phi_66_pred_3 = _2822;
                    frontier_phi_66_pred_4 = _2821;
                    frontier_phi_66_pred_5 = _2820;
                }
                _2595 = frontier_phi_66_pred;
                _2605 = frontier_phi_66_pred_1;
                _2603 = frontier_phi_66_pred_2;
                _2601 = frontier_phi_66_pred_3;
                _2599 = frontier_phi_66_pred_4;
                _2597 = frontier_phi_66_pred_5;
                uint _2754 = _2753 + 1u;
                if (_2754 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2747 = _2595;
                    _2748 = _2597;
                    _2749 = _2599;
                    _2750 = _2601;
                    _2751 = _2603;
                    _2752 = _2605;
                    _2753 = _2754;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
        }
        uvec4 _2608 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2609 = _2608.z;
        uint _2611 = (_2609 >> 8u) & 15u;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        if (((4294967295u << _2611) & _2493) == 0u)
        {
            _2715 = _2594;
            _2717 = _2596;
            _2719 = _2598;
            _2721 = _2600;
            _2723 = _2602;
            _2725 = _2604;
        }
        else
        {
            float _2740 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
            float _2741 = _2740 * _2447;
            float _2742 = _2740 * _2448;
            float _2743 = _2740 * _2449;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2611 < ((_2609 >> 12u) & 15u))
            {
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2875 = _2594;
                float _2876 = _2596;
                float _2877 = _2598;
                float _2878 = _2600;
                float _2879 = _2602;
                float _2880 = _2604;
                uint _2881 = _2611;
                uint _2890;
                bool _2891;
                for (;;)
                {
                    _2890 = texelFetch(g_lightClassification, int((((_2487 << 5u) + (_2473 << 9u)) + (_2881 << 2u)) >> 2u)).x;
                    _2891 = _2890 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2891)
                    {
                        frontier_phi_77_pred = _2880;
                        frontier_phi_77_pred_1 = _2879;
                        frontier_phi_77_pred_2 = _2878;
                        frontier_phi_77_pred_3 = _2877;
                        frontier_phi_77_pred_4 = _2876;
                        frontier_phi_77_pred_5 = _2875;
                    }
                    else
                    {
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3097 = _2875;
                        float _3098 = _2876;
                        float _3099 = _2877;
                        float _3100 = _2878;
                        float _3101 = _2879;
                        float _3102 = _2880;
                        uint _3103 = _2890;
                        uint _3104;
                        vec4 _3129;
                        float _3130;
                        vec4 _3145;
                        vec3 _3157;
                        vec4 _3173;
                        vec4 _3189;
                        float _3235;
                        bool _3236;
                        for (;;)
                        {
                            uint _3114 = ((_2881 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3103));
                            _3104 = (_3103 + 4294967295u) & _3103;
                            uint _3116 = _3114 * 40u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            _3130 = _3129.w;
                            uint _3132 = (_3114 * 40u) + 4u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3147 = (_3114 * 40u) + 8u;
                            _3157 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x));
                            uint _3160 = (_3114 * 40u) + 16u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3176 = (_3114 * 40u) + 20u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3191 = (_3114 * 40u) + 24u;
                            vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3210 = (_3114 * 40u) + 28u;
                            vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            _3235 = fma(_2449, _3223.z, fma(_2448, _3223.y, _3223.x * _2447)) + _3223.w;
                            _3236 = !((fma(_2449, _3204.z, fma(_2448, _3204.y, _3204.x * _2447)) + _3204.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3236)
                            {
                                float _3263 = _3129.x - _2447;
                                float _3264 = _3129.y - _2448;
                                float _3265 = _3129.z - _2449;
                                float _3266 = dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265));
                                float _3269 = inversesqrt(_3266);
                                float _3270 = _3269 * _3263;
                                float _3271 = _3269 * _3264;
                                float _3272 = _3269 * _3265;
                                float _3276 = 1.0 - (_3266 / (_3130 * _3130));
                                float _4424 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3277 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3281 = sqrt(_3266) * _3145.w;
                                float _3283 = 1.39999997615814208984375 / (_3281 + 1.39999997615814208984375);
                                float _3284 = _3283 * _3283;
                                float _3287 = ((1.0 - _3284) * dot(vec3(_3270, _3271, _3272), vec3(_681, _684, _687))) + _3284;
                                float _3290 = _3281 * _3281;
                                float _3294 = (fma(_2449, _3173.z, fma(_2448, _3173.y, _3173.x * _2447)) + _3173.w) / _3235;
                                float _3295 = (fma(_2449, _3189.z, fma(_2448, _3189.y, _3189.x * _2447)) + _3189.w) / _3235;
                                float _3299 = 1.0 - dot(vec2(_3294, _3295), vec2(_3294, _3295));
                                float _4440 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3301 = _3300 * (((isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0))) * _3277) / ((_3290 * 0.699999988079071044921875) + 1.0));
                                float _3313 = exp2(log2(1.0 / ((_3290 * 3.5) + 5.0)) * 0.25);
                                float _3314 = 1.0 - _756;
                                float _3321 = sqrt(1.0 - ((1.0 - (_3314 * _3314)) * (1.0 - (_3313 * _3313))));
                                float _3322 = _3321 * _3321;
                                float _3323 = _3322 * _3322;
                                float _3324 = _3270 - _2741;
                                float _3325 = _3271 - _2742;
                                float _3326 = _3272 - _2743;
                                float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                                float _3334 = dot(vec3(_681, _684, _687), vec3((-0.0) - _2741, (-0.0) - _2742, (-0.0) - _2743));
                                float _4451 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3337 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3338 = dot(vec3(_681, _684, _687), vec3(_3330 * _3324, _3330 * _3325, _3330 * _3326));
                                float _4462 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3345 = ((_3341 * _3341) * (_3323 + (-1.0))) + 1.0;
                                float _3346 = _3283 * _3322;
                                float _3347 = _3346 * _3346;
                                float _3353 = ((1.0 - _3347) * dot(vec3(_681, _684, _687), vec3(_3270, _3271, _3272))) + _3347;
                                float _4473 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3354 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3355 = 1.0 - _3322;
                                float _3365 = (0.5 / (((_3354 * ((_3337 * _3355) + _3322)) + 9.9999999392252902907785028219223e-09) + (((_3354 * _3355) + _3322) * _3337))) * _3354;
                                float _4484 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3375 = (_3300 * _3277) * (((_3323 * 3.1415927410125732421875) * (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) / ((_3345 * _3345) * ((_3290 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3301 * _3145.y;
                                frontier_phi_83_pred_1 = _3301 * _3145.x;
                                frontier_phi_83_pred_2 = _3375 * _3157.z;
                                frontier_phi_83_pred_3 = _3375 * _3157.y;
                                frontier_phi_83_pred_4 = _3375 * _3157.x;
                                frontier_phi_83_pred_5 = _3301 * _3145.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3383 = frontier_phi_83_pred;
                            _3382 = frontier_phi_83_pred_1;
                            _3381 = frontier_phi_83_pred_2;
                            _3380 = frontier_phi_83_pred_3;
                            _3379 = frontier_phi_83_pred_4;
                            _3384 = frontier_phi_83_pred_5;
                            _3087 = _3382 + _3100;
                            _3088 = _3383 + _3101;
                            _3089 = _3384 + _3102;
                            _3084 = _3379 + _3097;
                            _3085 = _3380 + _3098;
                            _3086 = _3381 + _3099;
                            if (_3104 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3104;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3089;
                        frontier_phi_77_pred_1 = _3088;
                        frontier_phi_77_pred_2 = _3087;
                        frontier_phi_77_pred_3 = _3086;
                        frontier_phi_77_pred_4 = _3085;
                        frontier_phi_77_pred_5 = _3084;
                    }
                    _2726 = frontier_phi_77_pred;
                    _2724 = frontier_phi_77_pred_1;
                    _2722 = frontier_phi_77_pred_2;
                    _2720 = frontier_phi_77_pred_3;
                    _2718 = frontier_phi_77_pred_4;
                    _2716 = frontier_phi_77_pred_5;
                    uint _2882 = _2881 + 1u;
                    if (_2882 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2875 = _2716;
                        _2876 = _2718;
                        _2877 = _2720;
                        _2878 = _2722;
                        _2879 = _2724;
                        _2880 = _2726;
                        _2881 = _2882;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2720;
                frontier_phi_58_59_ladder_1 = _2726;
                frontier_phi_58_59_ladder_2 = _2724;
                frontier_phi_58_59_ladder_3 = _2722;
                frontier_phi_58_59_ladder_4 = _2718;
                frontier_phi_58_59_ladder_5 = _2716;
            }
            else
            {
                frontier_phi_58_59_ladder = _2598;
                frontier_phi_58_59_ladder_1 = _2604;
                frontier_phi_58_59_ladder_2 = _2602;
                frontier_phi_58_59_ladder_3 = _2600;
                frontier_phi_58_59_ladder_4 = _2596;
                frontier_phi_58_59_ladder_5 = _2594;
            }
            _2715 = frontier_phi_58_59_ladder_5;
            _2717 = frontier_phi_58_59_ladder_4;
            _2719 = frontier_phi_58_59_ladder;
            _2721 = frontier_phi_58_59_ladder_3;
            _2723 = frontier_phi_58_59_ladder_2;
            _2725 = frontier_phi_58_59_ladder_1;
        }
        float _2730 = isnan(1.0) ? _740 : (isnan(_740) ? 1.0 : min(_740, 1.0));
        _2506 = (_2730 * _2721) + _1942;
        _2508 = (_2730 * _2723) + _1944;
        _2510 = (_2730 * _2725) + _1946;
        _2512 = ((_2715 * _724) * _2730) + _2287;
        _2514 = ((_2717 * _726) * _2730) + _2289;
        _2516 = ((_2719 * _727) * _2730) + _2291;
    }
    else
    {
        _2506 = _1942;
        _2508 = _1944;
        _2510 = _1946;
        _2512 = _2287;
        _2514 = _2289;
        _2516 = _2291;
    }
    float _4500 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4511 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4522 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _2533 = ((isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2506 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _740))) + ((_2512 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1579)) * cbPerFrame._m0[3u].x);
    float _2534 = ((isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2508 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _740))) + ((_2514 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1579)) * cbPerFrame._m0[3u].x);
    float _2535 = ((isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2510 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _740))) + ((_2516 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1579)) * cbPerFrame._m0[3u].x);
    uint _2536 = _239 + 6u;
    float _2544 = _660 / cbSceneParam._m0[86u].x;
    float _2545 = _661 / cbSceneParam._m0[86u].y;
    vec4 _2559 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2544, _2545, (log2((isnan(cbSceneParam._m0[77u].w) ? _582 : (isnan(_582) ? cbSceneParam._m0[77u].w : min(_582, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2561 = _2559.x;
    float _2562 = _2559.y;
    float _2563 = _2559.z;
    float _2564 = _2559.w;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    if (_582 > cbSceneParam._m0[78u].w)
    {
        float _2619 = isnan(_582) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _582 : min(cbSceneParam._m0[80u].w, _582));
        float _2620 = _2619 / _582;
        float _2631 = _2620 * _632;
        float _2632 = _633 * _2620;
        float _2633 = (-0.0) - _2632;
        float _2635 = _2620 * _634;
        float _2637 = (cbSceneParam._m0[77u].w * _2633) / _2619;
        float _2638 = _2637 + cbSceneParam._m0[79u].w;
        float _2639 = cbSceneParam._m0[79u].w - _2632;
        float _2645 = sqrt(((_2631 * _2631) + (_2632 * _2632)) + (_2635 * _2635));
        float _2648 = (1.0 - (cbSceneParam._m0[77u].w / _2619)) * _2645;
        float _2653 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2655 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2832;
        if (abs((_2633 - _2637) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2832 = ((((_2638 > 0.0) ? exp2(_2653 * _2638) : (2.0 - exp2(_2655 * _2638))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2648;
        }
        else
        {
            float _2776 = 1.0 / cbSceneParam._m0[80u].x;
            float _2777 = isnan(_2639) ? _2638 : (isnan(_2638) ? _2639 : max(_2638, _2639));
            float _2778 = isnan(_2639) ? _2638 : (isnan(_2638) ? _2639 : min(_2638, _2639));
            float _2787 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : min(_2777, 0.0));
            float _2788 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : min(_2778, 0.0));
            _2832 = ((abs(_2645 / _2633) * cbSceneParam._m0[80u].y) * ((((_2787 - _2788) * 2.0) - ((exp2(_2653 * (isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0)))) - exp2(_2653 * (isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0))))) * _2776)) - ((exp2(_2655 * _2787) - exp2(_2655 * _2788)) * _2776))) + (_2648 * cbSceneParam._m0[80u].z);
        }
        vec4 _2834 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2544, _2545, 1.0), 0.0);
        float _2843 = exp2((_2832 * (-1.44269502162933349609375)) * (1.0 - _2834.w));
        float _2844 = log2(_2843);
        float _2860 = log2(_2564);
        _2657 = (exp2(_2860 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].x)) * _2834.x) / cbSceneParam._m0[78u].x)) + _2561;
        _2659 = (exp2(_2860 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].y)) * _2834.y) / cbSceneParam._m0[78u].y)) + _2562;
        _2661 = (exp2(_2860 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].z)) * _2834.z) / cbSceneParam._m0[78u].z)) + _2563;
        _2663 = _2843 * _2564;
    }
    else
    {
        _2657 = _2561;
        _2659 = _2562;
        _2661 = _2563;
        _2663 = _2564;
    }
    bool _2870;
    vec4 _2673;
    vec4 _2695;
    float _2697;
    float _2701;
    float _2702;
    float _2703;
    float _2704;
    bool _2714;
    for (;;)
    {
        _2673 = cbMatDynParam._m0[0u];
        float _2675 = roundEven(_2673.y);
        bool _2676 = _2675 == 3.0;
        float _2677 = log2(_2663);
        float _2684 = exp2(_2677 * cbSceneParam._m0[78u].x) * _2533;
        float _2685 = exp2(_2677 * cbSceneParam._m0[78u].y) * _2534;
        float _2686 = exp2(_2677 * cbSceneParam._m0[78u].z) * _2535;
        float _2693 = _648 + (-0.5);
        _2695 = cbMtdParam._m0[1u];
        _2697 = _2695.y * _2693;
        float _2700 = (_2675 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2701 = _2700 * (_2676 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2657)));
        _2702 = _2700 * (_2676 ? _2685 : (_2685 + (cbSceneParam._m0[72u].w * _2659)));
        _2703 = _2700 * (_2676 ? _2686 : (_2686 + (cbSceneParam._m0[72u].w * _2661)));
        _2704 = _2693 * 0.999000012874603271484375;
        _2714 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2714)
        {
            if ((cbInstanceData._m0[_239 + 7u].x + _2704) < 0.5)
            {
                _2870 = true;
                break;
            }
        }
        uint _2811 = _700 + uint(_2673.w);
        if ((cbInstanceData._m0[_2811].w < 1.0) && ((cbInstanceData._m0[_2811].w + _2704) < 0.5))
        {
            _2870 = true;
            break;
        }
        if ((_2697 + 1.0) < _2695.x)
        {
            _2870 = true;
            break;
        }
        _2870 = false;
        break;
    }
    float _3075;
    if (_2870)
    {
        discard_state = true;
        _3075 = 0.0;
    }
    else
    {
        _3075 = cbInstanceData._m0[_2536].w;
    }
    SV_Target.x = _2701;
    SV_Target.y = _2702;
    SV_Target.z = _2703;
    SV_Target.w = _3075;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2536].w;
    discard_exit();
}


