#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1357;
float _4021;
float _4022;
float _4023;
float _4024;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _367 = _365.x;
    float _379 = dot(vec4(_367, _365.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _396 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_367 - _379) * cbMtdParam._m0[24u].y) + _379) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4033 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _404 = (_397 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _405 = (_397 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _406 = (_397 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _455 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _469 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_445 - _455) * cbMtdParam._m0[24u].y) + _455) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4044 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _477 = (_470 * ((_423.x * cbMtdParam._m0[13u].x) - _404)) + _404;
    float _478 = (_470 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405;
    float _479 = (_470 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406;
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _520 = ((_492.x - _511) * _397) + _511;
    float _521 = ((_492.y - _512) * _397) + _512;
    float _522 = ((_492.z - _513) * _397) + _513;
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _547 = ((_534.z - _522) * _470) + _522;
    float _550 = ((((_534.x - _520) * _470) + _520) * 2.0) + (-1.0);
    float _552 = ((((_534.y - _521) * _470) + _521) * 2.0) + (-1.0);
    float _553 = dot(vec2(_550, _552), vec2(_550, _552));
    float _4055 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _558 = sqrt(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))));
    vec4 _572 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _584 = (((_572.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _550;
    float _585 = (((_572.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _552;
    vec4 _597 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _599 = _597.x;
    float _600 = 1.0 - _599;
    float _628 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_599 - _600) * cbMtdParam._m0[24u].w) + _600) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4066 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _629 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _637 = ((((cbMtdParam._m0[10u].x - _477) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _629) + _477;
    float _638 = ((((cbMtdParam._m0[10u].y - _478) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _629) + _478;
    float _639 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _479)) * _629) + _479;
    vec4 _651 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _665 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _667 = _665.x;
    float _685 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _667) * _397) + _667;
    float _703 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _685) * _470) + _685;
    float _707 = ((_651.x - _703) * cbMtdParam._m0[19u].z) + _703;
    float _709 = _707 - (_707 * _629);
    float _713 = (cbMtdParam._m0[19u].w * (_572.z - _547)) + _547;
    float _717 = ((cbMtdParam._m0[23u].y - _713) * _629) + _713;
    vec4 _736 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _742 = (_736.x * 2.0) + (-1.0);
    float _743 = (_736.y * 2.0) + (-1.0);
    float _744 = dot(vec2(_742, _743), vec2(_742, _743));
    float _4077 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _760 = (_629 * (((cbMtdParam._m0[22u].z * _584) - _584) + _742)) + _584;
    float _761 = (_629 * (((cbMtdParam._m0[22u].z * _585) - _585) + _743)) + _585;
    float _762 = (_629 * (sqrt(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) - _558)) + _558;
    float _764 = cbMtdParam._m0[22u].x + _572.w;
    float _767 = fma(_762, _246 * NORMAL.x, fma(_761, _253 * TANGENT.x, (_239 * _231) * _760));
    float _770 = fma(_762, _246 * NORMAL.y, fma(_761, _253 * TANGENT.y, (_239 * _232) * _760));
    float _773 = fma(_762, _246 * NORMAL.z, fma(_761, _253 * TANGENT.z, (_239 * _233) * _760));
    float _777 = inversesqrt(dot(vec3(_767, _770, _773), vec3(_767, _770, _773)));
    float _778 = _777 * _767;
    float _779 = _777 * _770;
    float _780 = _777 * _773;
    float _4088 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _781 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4110 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4121 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4132 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4143 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _786 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _800 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _850 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _840);
    float _851 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _840);
    float _852 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _840);
    float _856 = inversesqrt(dot(vec3(_850, _851, _852), vec3(_850, _851, _852)));
    float _857 = _850 * _856;
    float _858 = _851 * _856;
    float _859 = _852 * _856;
    vec4 _864 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _866 = _864.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1038 = sqrt(((_850 * _850) + (_851 * _851)) + (_852 * _852));
        float _1044 = (cbMatDynParam._m0[5u].x * _1038) + cbMatDynParam._m0[5u].y;
        float _4154 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1049 = (cbMatDynParam._m0[5u].z * _1038) + cbMatDynParam._m0[5u].w;
        float _4165 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) - _1045)) + _1045) < ((_866 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _877 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _878 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _896 = fma(_780, cbSceneParam._m0[5u].z, fma(_779, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _778));
    float _899 = fma(_780, cbSceneParam._m0[6u].z, fma(_779, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _778));
    float _902 = fma(_780, cbSceneParam._m0[7u].z, fma(_779, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _778));
    uint _915 = _259 + 9u;
    uint _916 = _915 + uint(cbMatDynParam._m0[0u].w);
    float _922 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * cbInstanceData._m0[_916].x;
    float _923 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * cbInstanceData._m0[_916].y;
    float _924 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * cbInstanceData._m0[_916].z;
    float _4176 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _925 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _4198 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _928 = 1.0 - _786;
    float _929 = _925 * _928;
    float _930 = _926 * _928;
    float _931 = _927 * _928;
    float _936 = (_925 + (-0.039999999105930328369140625)) * _786;
    float _937 = (_926 + (-0.039999999105930328369140625)) * _786;
    float _938 = (_927 + (-0.039999999105930328369140625)) * _786;
    float _939 = _936 + 0.039999999105930328369140625;
    float _941 = _937 + 0.039999999105930328369140625;
    float _942 = _938 + 0.039999999105930328369140625;
    vec4 _951 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _877, cbSceneParam._m0[86u].y * _878));
    float _955 = ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * TEXCOORD_5.w) * _951.x;
    float _956 = dot(vec3(_778, _779, _780), vec3(_857, _858, _859));
    float _959 = _956 * 2.0;
    float _963 = (_959 * _778) - _857;
    float _964 = (_959 * _779) - _858;
    float _965 = (_959 * _780) - _859;
    float _969 = abs(dot(vec3(_857, _858, _859), vec3(_778, _779, _780)));
    float _4209 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _971 = sqrt(_781);
    float _984 = exp2((_971 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_971 * 3.0));
    float _990 = (1.0 - _984) * ((_971 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _991 = _984 * _971;
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1356;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1081 = fma(_1027, cbModelParam._m0[26u].z, fma(_1023, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1019));
        float _1085 = fma(_1027, cbModelParam._m0[27u].z, fma(_1023, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1019));
        float _1089 = fma(_1027, cbModelParam._m0[28u].z, fma(_1023, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1019));
        float _1114 = _1019 + _778;
        float _1115 = _1023 + _779;
        float _1116 = _1027 + _780;
        float _1126 = fma(_1116, cbModelParam._m0[26u].z, fma(_1115, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1114)) - _1081;
        float _1127 = fma(_1116, cbModelParam._m0[27u].z, fma(_1115, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1114)) - _1085;
        float _1128 = fma(_1116, cbModelParam._m0[28u].z, fma(_1115, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1114)) - _1089;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1081 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1085 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[34u].z) + ((((((_1089 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1184 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1150.x + (-0.5));
        float _1186 = _1184 * (_1150.y + (-0.5));
        float _1187 = _1184 * (_1150.z + (-0.5));
        float _1194 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1157.x + (-0.5));
        float _1196 = _1194 * (_1157.y + (-0.5));
        float _1197 = _1194 * (_1157.z + (-0.5));
        float _1204 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1164.x + (-0.5));
        float _1206 = _1204 * (_1164.y + (-0.5));
        float _1207 = _1204 * (_1164.z + (-0.5));
        float _1214 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1171.x + (-0.5));
        float _1216 = _1214 * (_1171.y + (-0.5));
        float _1217 = _1214 * (_1171.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1238 = (dot(vec3(_778, _779, _780), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1248 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1250 + 1.0))) + _1255) * _1218;
        float _1265 = _1186 * 0.5;
        float _1266 = _1196 * 0.5;
        float _1267 = _1206 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_778, _779, _780), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4290 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1292 + 1.0))) + _1297) * _1219;
        float _1307 = _1187 * 0.5;
        float _1308 = _1197 * 0.5;
        float _1309 = _1207 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_778, _779, _780), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4323 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1334 + 1.0))) + _1339) * _1220;
        _1356 = _1187;
        _1358 = _1186;
        _1359 = _1185;
        _1360 = _1197;
        _1361 = _1196;
        _1362 = _1195;
        _1363 = _1207;
        _1364 = _1206;
        _1365 = _1205;
        _1366 = _1220;
        _1367 = _1219;
        _1368 = _1218;
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1357;
        _1358 = _1357;
        _1359 = _1357;
        _1360 = _1357;
        _1361 = _1357;
        _1362 = _1357;
        _1363 = _1357;
        _1364 = _1357;
        _1365 = _1357;
        _1366 = _1357;
        _1367 = _1357;
        _1368 = _1357;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1398 = fma(_1027, cbModelParam._m0[30u].z, fma(_1023, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1019));
        float _1402 = fma(_1027, cbModelParam._m0[31u].z, fma(_1023, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1019));
        float _1406 = fma(_1027, cbModelParam._m0[32u].z, fma(_1023, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1019));
        float _1429 = _1019 + _778;
        float _1430 = _1023 + _779;
        float _1431 = _1027 + _780;
        float _1441 = fma(_1431, cbModelParam._m0[30u].z, fma(_1430, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1429)) - _1398;
        float _1442 = fma(_1431, cbModelParam._m0[31u].z, fma(_1430, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1429)) - _1402;
        float _1443 = fma(_1431, cbModelParam._m0[32u].z, fma(_1430, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1429)) - _1406;
        float _1447 = inversesqrt(dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443)));
        float _1460 = ((_1447 * _1441) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1398 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1447 * _1442) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1402 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1447 * _1443) / cbModelParam._m0[35u].z) + ((((((_1406 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        float _1497 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1464.x + (-0.5));
        float _1499 = _1497 * (_1464.y + (-0.5));
        float _1500 = _1497 * (_1464.z + (-0.5));
        float _1507 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1471.x + (-0.5));
        float _1509 = _1507 * (_1471.y + (-0.5));
        float _1510 = _1507 * (_1471.z + (-0.5));
        float _1517 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1478.x + (-0.5));
        float _1519 = _1517 * (_1478.y + (-0.5));
        float _1520 = _1517 * (_1478.z + (-0.5));
        float _1527 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1485.x + (-0.5));
        float _1529 = _1527 * (_1485.y + (-0.5));
        float _1530 = _1527 * (_1485.z + (-0.5));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = _1498 * 0.5;
        float _1535 = _1508 * 0.5;
        float _1536 = _1518 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_778, _779, _780), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4386 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1561 + 1.0))) + _1566) * _1531;
        float _1576 = _1499 * 0.5;
        float _1577 = _1509 * 0.5;
        float _1578 = _1519 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_778, _779, _780), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4419 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1603 + 1.0))) + _1608) * _1532;
        float _1618 = _1500 * 0.5;
        float _1619 = _1510 * 0.5;
        float _1620 = _1520 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_778, _779, _780), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4452 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1645 + 1.0))) + _1650) * _1533;
        _1667 = _1500;
        _1668 = _1499;
        _1669 = _1498;
        _1670 = _1510;
        _1671 = _1509;
        _1672 = _1508;
        _1673 = _1520;
        _1674 = _1519;
        _1675 = _1518;
        _1676 = _1533;
        _1677 = _1532;
        _1678 = _1531;
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
    }
    else
    {
        _1667 = _1357;
        _1668 = _1357;
        _1669 = _1357;
        _1670 = _1357;
        _1671 = _1357;
        _1672 = _1357;
        _1673 = _1357;
        _1674 = _1357;
        _1675 = _1357;
        _1676 = _1357;
        _1677 = _1357;
        _1678 = _1357;
        _1679 = 0.0;
        _1680 = 0.0;
        _1681 = 0.0;
    }
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1369)) + _1369;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1370)) + _1370;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1371)) + _1371;
    float _1714 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1691));
    float _1735 = _963 * 0.5;
    float _1736 = _964 * 0.5;
    float _1737 = _965 * 0.5;
    float _1738 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1741 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1744 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1778;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1751 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1356, _1360, _1363, _1366));
        float _1755 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1759 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1766 = dot(vec4(cbModelParam._m0[39u]), vec4(_1735, _1736, _1737, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1766) ? 0.0 : (isnan(0.0) ? _1766 : max(0.0, _1766))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1789;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1780 = dot(vec4(cbModelParam._m0[40u]), vec4(_1735, _1736, _1737, 1.0));
        _1789 = dot(vec3(isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1789 = 1.0;
    }
    float _1793 = (_1789 * cbModelParam._m0[1u].x) + (_1778 * (1.0 - cbModelParam._m0[1u].x));
    float _1803 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _781);
    float _1804 = isnan(_1803) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1803 : min(cbModelParam._m0[25u].z, _1803));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1853 = fma(_1027, cbModelParam._m0[13u].z, fma(_1023, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1019)) + cbModelParam._m0[13u].w;
        float _1857 = fma(_1027, cbModelParam._m0[14u].z, fma(_1023, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1019)) + cbModelParam._m0[14u].w;
        float _1861 = fma(_1027, cbModelParam._m0[15u].z, fma(_1023, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1019)) + cbModelParam._m0[15u].w;
        float _1864 = fma(_965, cbModelParam._m0[13u].z, fma(_964, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963));
        float _1867 = fma(_965, cbModelParam._m0[14u].z, fma(_964, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963));
        float _1870 = fma(_965, cbModelParam._m0[15u].z, fma(_964, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963));
        float _1898;
        if (_1864 > 0.0)
        {
            _1898 = abs((1.0 - _1853) / _1864);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1853 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1898 = frontier_phi_17_15_ladder;
        }
        float _2070;
        if (_1867 > 0.0)
        {
            _2070 = abs((1.0 - _1857) / _1867);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1857 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2070 = frontier_phi_26_22_ladder;
        }
        float _2365;
        if (_1870 > 0.0)
        {
            _2365 = abs((1.0 - _1861) / _1870);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1861 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2365 = frontier_phi_38_33_ladder;
        }
        float _2367 = isnan(_2070) ? _1898 : (isnan(_1898) ? _2070 : min(_1898, _2070));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1864) + _1853;
        float _2373 = (_2368 * _1867) + _1857;
        float _2374 = (_2368 * _1870) + _1861;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2375;
        float _2379 = _2375 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 > _2379) || ((_2373 < _2377) || ((_2372 < _2377) || (_2372 > _2379))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2519 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2374, cbModelParam._m0[9u].z, fma(_2373, cbModelParam._m0[9u].y, _2372 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2374, cbModelParam._m0[10u].z, fma(_2373, cbModelParam._m0[10u].y, _2372 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2374, cbModelParam._m0[11u].z, fma(_2373, cbModelParam._m0[11u].y, _2372 * cbModelParam._m0[11u].x))), _1804);
            frontier_phi_16_38_ladder = _2519.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2519.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2519.x * cbModelParam._m0[1u].y;
        }
        _1886 = frontier_phi_16_38_ladder_2;
        _1888 = frontier_phi_16_38_ladder_1;
        _1890 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_963, _964, _965), _1804);
        _1886 = _1874.x * cbModelParam._m0[1u].y;
        _1888 = _1874.y * cbModelParam._m0[1u].y;
        _1890 = _1874.z * cbModelParam._m0[1u].y;
    }
    float _1894 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _781);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1894 : min(cbModelParam._m0[25u].w, _1894));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1949 = fma(_1027, cbModelParam._m0[21u].z, fma(_1023, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1019)) + cbModelParam._m0[21u].w;
        float _1953 = fma(_1027, cbModelParam._m0[22u].z, fma(_1023, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1019)) + cbModelParam._m0[22u].w;
        float _1957 = fma(_1027, cbModelParam._m0[23u].z, fma(_1023, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1019)) + cbModelParam._m0[23u].w;
        float _1960 = fma(_965, cbModelParam._m0[21u].z, fma(_964, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963));
        float _1963 = fma(_965, cbModelParam._m0[22u].z, fma(_964, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963));
        float _1966 = fma(_965, cbModelParam._m0[23u].z, fma(_964, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963));
        float _2075;
        if (_1960 > 0.0)
        {
            _2075 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2075 = frontier_phi_28_24_ladder;
        }
        float _2392;
        if (_1963 > 0.0)
        {
            _2392 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2392 = frontier_phi_40_35_ladder;
        }
        float _2730;
        if (_1966 > 0.0)
        {
            _2730 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2730 = frontier_phi_50_47_ladder;
        }
        float _2732 = isnan(_2392) ? _2075 : (isnan(_2075) ? _2392 : min(_2075, _2392));
        float _2733 = isnan(_2730) ? _2732 : (isnan(_2732) ? _2730 : min(_2732, _2730));
        float _2737 = (_2733 * _1960) + _1949;
        float _2738 = (_2733 * _1963) + _1953;
        float _2739 = (_2733 * _1966) + _1957;
        float _2740 = _2733 * 9.9999997473787516355514526367188e-05;
        float _2741 = (-1.0) - _2740;
        float _2743 = _2740 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2739 > _2743) || ((_2739 < _2741) || ((_2738 > _2743) || ((_2738 < _2741) || ((_2737 < _2741) || (_2737 > _2743))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2861 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2739, cbModelParam._m0[17u].z, fma(_2738, cbModelParam._m0[17u].y, _2737 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2739, cbModelParam._m0[18u].z, fma(_2738, cbModelParam._m0[18u].y, _2737 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2739, cbModelParam._m0[19u].z, fma(_2738, cbModelParam._m0[19u].y, _2737 * cbModelParam._m0[19u].x))), _1895);
            frontier_phi_25_50_ladder = _2861.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2861.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2861.x * cbModelParam._m0[1u].z;
        }
        _1985 = frontier_phi_25_50_ladder_2;
        _1987 = frontier_phi_25_50_ladder_1;
        _1989 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_963, _964, _965), _1895);
        _1985 = _1969.x * cbModelParam._m0[1u].z;
        _1987 = _1969.y * cbModelParam._m0[1u].z;
        _1989 = _1969.z * cbModelParam._m0[1u].z;
    }
    float _2002 = (((_990 * _939) + _991) * _955) * ((cbModelParam._m0[1u].w * (_1985 - _1886)) + _1886);
    float _2004 = (((_990 * _941) + _991) * _955) * ((cbModelParam._m0[1u].w * (_1987 - _1888)) + _1888);
    float _2006 = (((_990 * _942) + _991) * _955) * ((cbModelParam._m0[1u].w * (_1989 - _1890)) + _1890);
    float _2009 = fma(_2006, cbSceneParam._m0[89u].z, fma(_2004, cbSceneParam._m0[89u].y, _2002 * cbSceneParam._m0[89u].x));
    float _2012 = fma(_2006, cbSceneParam._m0[90u].z, fma(_2004, cbSceneParam._m0[90u].y, _2002 * cbSceneParam._m0[90u].x));
    float _2015 = fma(_2006, cbSceneParam._m0[91u].z, fma(_2004, cbSceneParam._m0[91u].y, _2002 * cbSceneParam._m0[91u].x));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2061 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2062 = _2049 / _2061;
    float _2063 = _2053 / _2061;
    float _2064 = _2057 / _2061;
    float _2211;
    float _2212;
    float _2213;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2091 = ((uint(_2064 > cbSceneParam._m0[59u].y) + uint(_2064 > cbSceneParam._m0[59u].x)) + uint(_2064 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2092 = _2091 + 43u;
        uint _2100 = _2091 + 44u;
        uint _2108 = _2091 + 45u;
        uint _2116 = _2091 + 46u;
        float _2127 = fma(_2061, cbSceneParam._m0[_2092].w, fma(_2057, cbSceneParam._m0[_2092].z, fma(_2053, cbSceneParam._m0[_2092].y, _2049 * cbSceneParam._m0[_2092].x)));
        float _2131 = fma(_2061, cbSceneParam._m0[_2100].w, fma(_2057, cbSceneParam._m0[_2100].z, fma(_2053, cbSceneParam._m0[_2100].y, _2049 * cbSceneParam._m0[_2100].x)));
        float _2139 = fma(_2061, cbSceneParam._m0[_2116].w, fma(_2057, cbSceneParam._m0[_2116].z, fma(_2053, cbSceneParam._m0[_2116].y, _2049 * cbSceneParam._m0[_2116].x)));
        float _2144 = cbSceneParam._m0[33u].z * _2139;
        float _2146 = cbSceneParam._m0[33u].w * _2139;
        float _2149 = fma(_2061, cbSceneParam._m0[_2108].w, fma(_2057, cbSceneParam._m0[_2108].z, fma(_2053, cbSceneParam._m0[_2108].y, _2049 * cbSceneParam._m0[_2108].x))) / _2139;
        float _2197 = (cbSceneParam._m0[33u].x - sqrt(((_2063 * _2063) + (_2062 * _2062)) + (_2064 * _2064))) * cbSceneParam._m0[33u].y;
        float _4578 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2204 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2144 + _2127) / _2139, (_2146 + _2131) / _2139), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 + _2127) / _2139, (_2131 - _2144) / _2139), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2127 - _2144) / _2139, (_2131 - _2146) / _2139), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2127 - _2146) / _2139, (_2144 + _2131) / _2139), _2149), 0.0)).x), vec4(0.25)));
        _2211 = 1.0 - (_2204 * cbSceneParam._m0[34u].x);
        _2212 = 1.0 - (_2204 * cbSceneParam._m0[34u].y);
        _2213 = 1.0 - (_2204 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2211 = 1.0;
        _2212 = 1.0;
        _2213 = 1.0;
    }
    float _2277;
    float _2279;
    float _2281;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2265 = fma(_2061, cbSceneParam._m0[63u].w, fma(_2057, cbSceneParam._m0[63u].z, fma(_2053, cbSceneParam._m0[63u].y, _2049 * cbSceneParam._m0[63u].x)));
        float _2266 = fma(_2061, cbSceneParam._m0[60u].w, fma(_2057, cbSceneParam._m0[60u].z, fma(_2053, cbSceneParam._m0[60u].y, _2049 * cbSceneParam._m0[60u].x))) / _2265;
        float _2267 = fma(_2061, cbSceneParam._m0[61u].w, fma(_2057, cbSceneParam._m0[61u].z, fma(_2053, cbSceneParam._m0[61u].y, _2049 * cbSceneParam._m0[61u].x))) / _2265;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2266 >= cbSceneParam._m0[64u].x) && (_2267 >= cbSceneParam._m0[64u].y)) && (_2266 <= cbSceneParam._m0[64u].z)) && (_2267 <= cbSceneParam._m0[64u].w))
        {
            float _2405 = fma(_2061, cbSceneParam._m0[62u].w, fma(_2057, cbSceneParam._m0[62u].z, fma(_2053, cbSceneParam._m0[62u].y, _2049 * cbSceneParam._m0[62u].x))) / _2265;
            float _2409 = isnan(cbSceneParam._m0[41u].w) ? _2405 : (isnan(_2405) ? cbSceneParam._m0[41u].w : max(_2405, cbSceneParam._m0[41u].w));
            float _2452 = (cbSceneParam._m0[33u].x - sqrt(((_2063 * _2063) + (_2062 * _2062)) + (_2064 * _2064))) * cbSceneParam._m0[33u].y;
            float _4594 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
            float _2459 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2266, cbSceneParam._m0[33u].w + _2267), _2409), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2266, _2267 - cbSceneParam._m0[33u].z), _2409), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2266 - cbSceneParam._m0[33u].z, _2267 - cbSceneParam._m0[33u].w), _2409), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2266 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2267), _2409), 0.0)).x), vec4(0.25)));
            float _2463 = 1.0 - (_2459 * cbSceneParam._m0[34u].x);
            float _2464 = 1.0 - (_2459 * cbSceneParam._m0[34u].y);
            float _2465 = 1.0 - (_2459 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2465) ? _2213 : (isnan(_2213) ? _2465 : min(_2213, _2465));
            frontier_phi_37_36_ladder_1 = isnan(_2464) ? _2212 : (isnan(_2212) ? _2464 : min(_2212, _2464));
            frontier_phi_37_36_ladder_2 = isnan(_2463) ? _2211 : (isnan(_2211) ? _2463 : min(_2211, _2463));
        }
        else
        {
            frontier_phi_37_36_ladder = _2213;
            frontier_phi_37_36_ladder_1 = _2212;
            frontier_phi_37_36_ladder_2 = _2211;
        }
        _2277 = frontier_phi_37_36_ladder_2;
        _2279 = frontier_phi_37_36_ladder_1;
        _2281 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2277 = _2211;
        _2279 = _2212;
        _2281 = _2213;
    }
    uvec4 _2286 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2288 = _2286.x * 14u;
    uint _2289 = _2288 + 13u;
    float _2296 = _955 + (-1.0);
    float _2301 = (cbLight._m0[_2289].x * _2296) + 1.0;
    float _2302 = (cbLight._m0[_2289].y * _2296) + 1.0;
    float _2303 = (cbLight._m0[_2289].z * _2296) + 1.0;
    float _2304 = (cbLight._m0[_2289].w * _2296) + 1.0;
    uint _2305 = _2288 + 5u;
    float _2311 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
    uint _2315 = _2288 + 4u;
    float _2324 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
    uint _2328 = _2288 | 1u;
    float _2339 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_778, _779, _780));
    float _2342 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_778, _779, _780));
    float _4630 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _4641 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2347 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * 0.3183098733425140380859375;
    float _2349 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * 0.3183098733425140380859375;
    float _2356 = ((cbLight._m0[_2305].x * _2311) * _2349) + (((cbLight._m0[_2315].x * _2277) * _2324) * _2347);
    float _2357 = ((_2311 * cbLight._m0[_2305].y) * _2349) + (((cbLight._m0[_2315].y * _2279) * _2324) * _2347);
    float _2358 = ((_2311 * cbLight._m0[_2305].z) * _2349) + (((cbLight._m0[_2315].z * _2281) * _2324) * _2347);
    uvec4 _2362 = floatBitsToUint(cbLight._m0[_2288 + 12u]);
    bool _2364 = _2362.x == 0u;
    float _2466;
    float _2468;
    float _2470;
    if (_2364)
    {
        _2466 = _2356;
        _2468 = _2357;
        _2470 = _2358;
    }
    else
    {
        uint _2474 = _2288 + 6u;
        float _2490 = (dot(vec3(cbLight._m0[_2288 + 2u].xyz), vec3(_778, _779, _780)) * 0.5) + 0.5;
        float _2491 = _2490 * _2490;
        float _4652 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2492 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2493 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2466 = (((cbLight._m0[_2474].x * 0.3183098733425140380859375) * _2492) * _2493) + _2356;
        _2468 = (((cbLight._m0[_2474].y * 0.3183098733425140380859375) * _2492) * _2493) + _2357;
        _2470 = (((cbLight._m0[_2474].z * 0.3183098733425140380859375) * _2492) * _2493) + _2358;
    }
    bool _2473 = _2362.y == 0u;
    float _2528;
    float _2530;
    float _2532;
    if (_2473)
    {
        _2528 = _2466;
        _2530 = _2468;
        _2532 = _2470;
    }
    else
    {
        uint _2701 = _2288 + 7u;
        float _2717 = (dot(vec3(cbLight._m0[_2288 + 3u].xyz), vec3(_778, _779, _780)) * 0.5) + 0.5;
        float _2718 = _2717 * _2717;
        float _4668 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2719 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2720 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2528 = (((cbLight._m0[_2701].x * 0.3183098733425140380859375) * _2719) * _2720) + _2466;
        _2530 = (((cbLight._m0[_2701].y * 0.3183098733425140380859375) * _2719) * _2720) + _2468;
        _2532 = (((cbLight._m0[_2701].z * 0.3183098733425140380859375) * _2719) * _2720) + _2470;
    }
    uint _2535 = _2288 + 8u;
    float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _781) * 0.949999988079071044921875);
    float _2549 = _2548 * _2548;
    float _2550 = cbLight._m0[_2288].x + _857;
    float _2551 = cbLight._m0[_2288].y + _858;
    float _2552 = cbLight._m0[_2288].z + _859;
    float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
    float _2557 = _2556 * _2550;
    float _2558 = _2556 * _2551;
    float _2559 = _2556 * _2552;
    float _2560 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2288].xyz));
    float _4684 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _4695 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _2564 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2565 = dot(vec3(_778, _779, _780), vec3(_2557, _2558, _2559));
    float _4706 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _2569 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2557, _2558, _2559));
    float _4717 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2573 = _2549 * _2549;
    float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
    float _2585 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
    float _2586 = 0.959999978542327880859375 - _936;
    float _2588 = 0.959999978542327880859375 - _937;
    float _2589 = 0.959999978542327880859375 - _938;
    float _2596 = 1.0 - _2549;
    float _2607 = (0.5 / (((_2564 * ((_2563 * _2596) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2596) + _2549) * _2563))) * _2563;
    float _4728 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2609 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
    uint _2623 = _2288 + 9u;
    float _2634 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _781) * 0.949999988079071044921875);
    float _2635 = _2634 * _2634;
    float _2636 = cbLight._m0[_2328].x + _857;
    float _2637 = cbLight._m0[_2328].y + _858;
    float _2638 = cbLight._m0[_2328].z + _859;
    float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
    float _2643 = _2642 * _2636;
    float _2644 = _2642 * _2637;
    float _2645 = _2642 * _2638;
    float _2646 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2328].xyz));
    float _4739 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2649 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2650 = dot(vec3(_778, _779, _780), vec3(_2643, _2644, _2645));
    float _4750 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2653 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2654 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2643, _2644, _2645));
    float _4761 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2658 = _2635 * _2635;
    float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
    float _2669 = exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0);
    float _2676 = 1.0 - _2635;
    float _2686 = (0.5 / (((_2564 * ((_2649 * _2676) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2676) + _2635) * _2649))) * _2649;
    float _4772 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2688 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
    float _2698 = (((((_2669 * _2586) + _939) * cbLight._m0[_2623].x) * _2688) * _2311) + ((((cbLight._m0[_2535].x * _2277) * ((_2585 * _2586) + _939)) * _2609) * _2324);
    float _2699 = (((((_2669 * _2588) + _941) * cbLight._m0[_2623].y) * _2688) * _2311) + ((((cbLight._m0[_2535].y * _2279) * ((_2585 * _2588) + _941)) * _2609) * _2324);
    float _2700 = (((((_2669 * _2589) + _942) * cbLight._m0[_2623].z) * _2688) * _2311) + ((((cbLight._m0[_2535].z * _2281) * ((_2585 * _2589) + _942)) * _2609) * _2324);
    float _2756;
    float _2758;
    float _2760;
    if (_2364)
    {
        _2756 = _2698;
        _2758 = _2699;
        _2760 = _2700;
    }
    else
    {
        uint _2762 = _2288 + 2u;
        uint _2766 = _2288 + 10u;
        float _2780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2762].w)) * _781) * 0.949999988079071044921875);
        float _2781 = _2780 * _2780;
        float _2782 = cbLight._m0[_2762].x + _857;
        float _2783 = cbLight._m0[_2762].y + _858;
        float _2784 = cbLight._m0[_2762].z + _859;
        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
        float _2789 = _2788 * _2782;
        float _2790 = _2788 * _2783;
        float _2791 = _2788 * _2784;
        float _2792 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2762].xyz));
        float _4783 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2795 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2796 = dot(vec3(_778, _779, _780), vec3(_2789, _2790, _2791));
        float _4794 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _2800 = dot(vec3(cbLight._m0[_2762].xyz), vec3(_2789, _2790, _2791));
        float _4805 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2804 = _2781 * _2781;
        float _2808 = ((_2799 * _2799) * (_2804 + (-1.0))) + 1.0;
        float _2815 = exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0);
        float _2822 = 1.0 - _2781;
        float _2832 = (0.5 / (((_2564 * ((_2795 * _2822) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2822) + _2781) * _2795))) * _2795;
        float _4816 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2834 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2804 / ((_2808 * _2808) * 3.141590118408203125));
        float _2835 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2756 = (((((_2815 * _2586) + _939) * cbLight._m0[_2766].x) * _2834) * _2835) + _2698;
        _2758 = (((((_2815 * _2588) + _941) * cbLight._m0[_2766].y) * _2834) * _2835) + _2699;
        _2760 = (((((_2815 * _2589) + _942) * cbLight._m0[_2766].z) * _2834) * _2835) + _2700;
    }
    float _2866;
    float _2868;
    float _2870;
    if (_2473)
    {
        _2866 = _2756;
        _2868 = _2758;
        _2870 = _2760;
    }
    else
    {
        uint _2877 = _2288 + 3u;
        uint _2881 = _2288 + 11u;
        float _2895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2877].w)) * _781) * 0.949999988079071044921875);
        float _2896 = _2895 * _2895;
        float _2897 = cbLight._m0[_2877].x + _857;
        float _2898 = cbLight._m0[_2877].y + _858;
        float _2899 = cbLight._m0[_2877].z + _859;
        float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
        float _2904 = _2903 * _2897;
        float _2905 = _2903 * _2898;
        float _2906 = _2903 * _2899;
        float _2907 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2877].xyz));
        float _4832 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2910 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2911 = dot(vec3(_778, _779, _780), vec3(_2904, _2905, _2906));
        float _4843 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2914 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2915 = dot(vec3(cbLight._m0[_2877].xyz), vec3(_2904, _2905, _2906));
        float _4854 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2919 = _2896 * _2896;
        float _2923 = ((_2914 * _2914) * (_2919 + (-1.0))) + 1.0;
        float _2930 = exp2(log2(1.0 - (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) * 5.0);
        float _2937 = 1.0 - _2896;
        float _2947 = (0.5 / (((_2564 * ((_2910 * _2937) + _2896)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2937) + _2896) * _2910))) * _2910;
        float _4865 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        float _2949 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2919 / ((_2923 * _2923) * 3.141590118408203125));
        float _2950 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2866 = (((((_2930 * _2586) + _939) * cbLight._m0[_2881].x) * _2949) * _2950) + _2756;
        _2868 = (((((_2930 * _2588) + _941) * cbLight._m0[_2881].y) * _2949) * _2950) + _2758;
        _2870 = (((((_2930 * _2589) + _942) * cbLight._m0[_2881].z) * _2949) * _2950) + _2760;
    }
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_2286.y == 0u)
    {
        uvec4 _2971 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2972 = _2971.x;
        uint _2983 = uint((float(_2971.y) * floor(float(uint(cbSceneParam._m0[85u].y * _878) / _2972))) + floor(float(uint(cbSceneParam._m0[85u].x * _877) / _2972)));
        float _2993 = (log2(_2064 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2994 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        uint _2997 = uint(isnan(14.0) ? _2994 : (isnan(_2994) ? 14.0 : min(_2994, 14.0)));
        uvec4 _3002 = texelFetch(g_lightClusterGridBuffer, int(((_2997 << 2u) + (_2983 << 6u)) >> 2u));
        uint _3003 = _3002.x;
        uint _3004 = _2971.z;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        if (((((1u << ((_3004 >> 4u) & 15u)) + 4294967295u) & _3003) == 0u) || ((_3004 & 240u) == 0u))
        {
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
        }
        else
        {
            float _3084;
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            uint _3242 = 0u;
            uint _3251;
            bool _3252;
            for (;;)
            {
                _3251 = texelFetch(g_lightClassification, int((((_2997 << 5u) + (_2983 << 9u)) + (_3242 << 2u)) >> 2u)).x;
                _3252 = _3251 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3252)
                {
                    frontier_phi_71_pred = _3241;
                    frontier_phi_71_pred_1 = _3240;
                    frontier_phi_71_pred_2 = _3239;
                    frontier_phi_71_pred_3 = _3238;
                    frontier_phi_71_pred_4 = _3237;
                    frontier_phi_71_pred_5 = _3236;
                }
                else
                {
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    uint _3387;
                    _3381 = _3236;
                    _3382 = _3237;
                    _3383 = _3238;
                    _3384 = _3239;
                    _3385 = _3240;
                    _3386 = _3241;
                    _3387 = _3251;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    for (;;)
                    {
                        uint _3391 = uint(findLSB(_3387)) + (_3242 << 5u);
                        uint _3388 = (_3387 + 4294967295u) & _3387;
                        uint _3393 = _3391 * 48u;
                        vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3393)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 3u)).x));
                        uint _3413 = (_3391 * 48u) + 4u;
                        vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3413)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 3u)).x));
                        uint _3432 = (_3391 * 48u) + 8u;
                        vec3 _3443 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3432)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 2u)).x));
                        float _3447 = _3407.x - _2062;
                        float _3448 = _3407.y - _2063;
                        float _3449 = _3407.z - _2064;
                        float _3450 = dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449));
                        float _3453 = inversesqrt(_3450);
                        float _3454 = _3453 * _3447;
                        float _3455 = _3453 * _3448;
                        float _3456 = _3453 * _3449;
                        float _3457 = dot(vec3(_896, _899, _902), vec3(_3454, _3455, _3456));
                        float _3462 = 1.0 - (_3450 * _3407.w);
                        float _4891 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3463 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3464 = sqrt(_3450) * _3426.w;
                        float _3467 = 1.39999997615814208984375 / (_3464 + 1.39999997615814208984375);
                        float _3468 = _3467 * _3467;
                        float _3471 = ((1.0 - _3468) * _3457) + _3468;
                        float _3474 = _3464 * _3464;
                        float _3478 = ((isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0))) * _3463) / ((_3474 * 0.699999988079071044921875) + 1.0);
                        float _3482 = (-0.0) - _2062;
                        float _3483 = (-0.0) - _2063;
                        float _3484 = (-0.0) - _2064;
                        float _3488 = inversesqrt(dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484)));
                        float _3489 = _3488 * _3482;
                        float _3490 = _3488 * _3483;
                        float _3491 = _3488 * _3484;
                        float _3498 = exp2(log2(1.0 / ((_3474 * 3.5) + 5.0)) * 0.25);
                        float _3499 = 1.0 - _971;
                        float _3506 = sqrt(1.0 - ((1.0 - (_3499 * _3499)) * (1.0 - (_3498 * _3498))));
                        float _3507 = _3506 * _3506;
                        float _3508 = _3507 * _3507;
                        float _3509 = _3489 + _3454;
                        float _3510 = _3490 + _3455;
                        float _3511 = _3491 + _3456;
                        float _3515 = inversesqrt(dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511)));
                        float _3519 = dot(vec3(_896, _899, _902), vec3(_3489, _3490, _3491));
                        float _4907 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3522 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                        float _3523 = dot(vec3(_896, _899, _902), vec3(_3515 * _3509, _3515 * _3510, _3515 * _3511));
                        float _4918 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3526 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                        float _3530 = ((_3526 * _3526) * (_3508 + (-1.0))) + 1.0;
                        float _3531 = _3467 * _3507;
                        float _3532 = _3531 * _3531;
                        float _3535 = ((1.0 - _3532) * _3457) + _3532;
                        float _4929 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                        float _3536 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                        float _3537 = 1.0 - _3507;
                        float _3547 = (0.5 / (((_3536 * ((_3522 * _3537) + _3507)) + 9.9999999392252902907785028219223e-09) + (((_3536 * _3537) + _3507) * _3522))) * _3536;
                        float _4940 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3558 = (((_3508 * 3.1415927410125732421875) * (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) / ((_3530 * _3530) * ((_3474 * 2.1991131305694580078125) + 3.141590118408203125))) * _3463;
                        _3311 = (_3478 * _3426.x) + _3384;
                        _3312 = (_3478 * _3426.y) + _3385;
                        _3313 = (_3478 * _3426.z) + _3386;
                        _3308 = (_3558 * _3443.x) + _3381;
                        _3309 = (_3558 * _3443.y) + _3382;
                        _3310 = (_3558 * _3443.z) + _3383;
                        if (_3388 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3381 = _3308;
                            _3382 = _3309;
                            _3383 = _3310;
                            _3384 = _3311;
                            _3385 = _3312;
                            _3386 = _3313;
                            _3387 = _3388;
                        }
                    }
                    frontier_phi_71_pred = _3313;
                    frontier_phi_71_pred_1 = _3312;
                    frontier_phi_71_pred_2 = _3311;
                    frontier_phi_71_pred_3 = _3310;
                    frontier_phi_71_pred_4 = _3309;
                    frontier_phi_71_pred_5 = _3308;
                }
                _3094 = frontier_phi_71_pred;
                _3092 = frontier_phi_71_pred_1;
                _3090 = frontier_phi_71_pred_2;
                _3088 = frontier_phi_71_pred_3;
                _3086 = frontier_phi_71_pred_4;
                _3084 = frontier_phi_71_pred_5;
                uint _3243 = _3242 + 1u;
                if (_3243 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3236 = _3084;
                    _3237 = _3086;
                    _3238 = _3088;
                    _3239 = _3090;
                    _3240 = _3092;
                    _3241 = _3094;
                    _3242 = _3243;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
        }
        uvec4 _3097 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3098 = _3097.z;
        uint _3100 = (_3098 >> 8u) & 15u;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        if (((4294967295u << _3100) & _3003) == 0u)
        {
            _3204 = _3083;
            _3206 = _3085;
            _3208 = _3087;
            _3210 = _3089;
            _3212 = _3091;
            _3214 = _3093;
        }
        else
        {
            float _3229 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
            float _3230 = _3229 * _2062;
            float _3231 = _3229 * _2063;
            float _3232 = _3229 * _2064;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3100 < ((_3098 >> 12u) & 15u))
            {
                float _3205;
                float _3207;
                float _3209;
                float _3211;
                float _3213;
                float _3215;
                float _3364 = _3083;
                float _3365 = _3085;
                float _3366 = _3087;
                float _3367 = _3089;
                float _3368 = _3091;
                float _3369 = _3093;
                uint _3370 = _3100;
                uint _3379;
                bool _3380;
                for (;;)
                {
                    _3379 = texelFetch(g_lightClassification, int((((_2997 << 5u) + (_2983 << 9u)) + (_3370 << 2u)) >> 2u)).x;
                    _3380 = _3379 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3380)
                    {
                        frontier_phi_82_pred = _3369;
                        frontier_phi_82_pred_1 = _3368;
                        frontier_phi_82_pred_2 = _3367;
                        frontier_phi_82_pred_3 = _3366;
                        frontier_phi_82_pred_4 = _3365;
                        frontier_phi_82_pred_5 = _3364;
                    }
                    else
                    {
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3585 = _3364;
                        float _3586 = _3365;
                        float _3587 = _3366;
                        float _3588 = _3367;
                        float _3589 = _3368;
                        float _3590 = _3369;
                        uint _3591 = _3379;
                        uint _3592;
                        vec4 _3617;
                        float _3618;
                        vec4 _3633;
                        vec3 _3645;
                        vec4 _3660;
                        vec4 _3675;
                        float _3721;
                        bool _3722;
                        for (;;)
                        {
                            uint _3602 = ((_3370 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3591));
                            _3592 = (_3591 + 4294967295u) & _3591;
                            uint _3604 = _3602 * 40u;
                            _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            _3618 = _3617.w;
                            uint _3620 = (_3602 * 40u) + 4u;
                            _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3635 = (_3602 * 40u) + 8u;
                            _3645 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x));
                            uint _3647 = (_3602 * 40u) + 16u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3662 = (_3602 * 40u) + 20u;
                            _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3677 = (_3602 * 40u) + 24u;
                            vec4 _3690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 3u)).x));
                            uint _3696 = (_3602 * 40u) + 28u;
                            vec4 _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            _3721 = fma(_2064, _3709.z, fma(_2063, _3709.y, _3709.x * _2062)) + _3709.w;
                            _3722 = !((fma(_2064, _3690.z, fma(_2063, _3690.y, _3690.x * _2062)) + _3690.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3722)
                            {
                                float _3749 = _3617.x - _2062;
                                float _3750 = _3617.y - _2063;
                                float _3751 = _3617.z - _2064;
                                float _3752 = dot(vec3(_3749, _3750, _3751), vec3(_3749, _3750, _3751));
                                float _3755 = inversesqrt(_3752);
                                float _3756 = _3755 * _3749;
                                float _3757 = _3755 * _3750;
                                float _3758 = _3755 * _3751;
                                float _3762 = 1.0 - (_3752 / (_3618 * _3618));
                                float _4951 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3763 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3767 = sqrt(_3752) * _3633.w;
                                float _3769 = 1.39999997615814208984375 / (_3767 + 1.39999997615814208984375);
                                float _3770 = _3769 * _3769;
                                float _3773 = ((1.0 - _3770) * dot(vec3(_3756, _3757, _3758), vec3(_896, _899, _902))) + _3770;
                                float _3776 = _3767 * _3767;
                                float _3780 = (fma(_2064, _3660.z, fma(_2063, _3660.y, _3660.x * _2062)) + _3660.w) / _3721;
                                float _3781 = (fma(_2064, _3675.z, fma(_2063, _3675.y, _3675.x * _2062)) + _3675.w) / _3721;
                                float _3785 = 1.0 - dot(vec2(_3780, _3781), vec2(_3780, _3781));
                                float _4967 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3787 = _3786 * (((isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0))) * _3763) / ((_3776 * 0.699999988079071044921875) + 1.0));
                                float _3799 = exp2(log2(1.0 / ((_3776 * 3.5) + 5.0)) * 0.25);
                                float _3800 = 1.0 - _971;
                                float _3807 = sqrt(1.0 - ((1.0 - (_3800 * _3800)) * (1.0 - (_3799 * _3799))));
                                float _3808 = _3807 * _3807;
                                float _3809 = _3808 * _3808;
                                float _3810 = _3756 - _3230;
                                float _3811 = _3757 - _3231;
                                float _3812 = _3758 - _3232;
                                float _3816 = inversesqrt(dot(vec3(_3810, _3811, _3812), vec3(_3810, _3811, _3812)));
                                float _3820 = dot(vec3(_896, _899, _902), vec3((-0.0) - _3230, (-0.0) - _3231, (-0.0) - _3232));
                                float _4978 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3823 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3824 = dot(vec3(_896, _899, _902), vec3(_3816 * _3810, _3816 * _3811, _3816 * _3812));
                                float _4989 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3827 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3831 = ((_3827 * _3827) * (_3809 + (-1.0))) + 1.0;
                                float _3832 = _3769 * _3808;
                                float _3833 = _3832 * _3832;
                                float _3839 = ((1.0 - _3833) * dot(vec3(_896, _899, _902), vec3(_3756, _3757, _3758))) + _3833;
                                float _5000 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3840 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3841 = 1.0 - _3808;
                                float _3851 = (0.5 / (((_3840 * ((_3823 * _3841) + _3808)) + 9.9999999392252902907785028219223e-09) + (((_3840 * _3841) + _3808) * _3823))) * _3840;
                                float _5011 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3861 = (_3786 * _3763) * (((_3809 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3831 * _3831) * ((_3776 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3787 * _3633.z;
                                frontier_phi_88_pred_1 = _3787 * _3633.y;
                                frontier_phi_88_pred_2 = _3787 * _3633.x;
                                frontier_phi_88_pred_3 = _3861 * _3645.z;
                                frontier_phi_88_pred_4 = _3861 * _3645.y;
                                frontier_phi_88_pred_5 = _3861 * _3645.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3870 = frontier_phi_88_pred;
                            _3869 = frontier_phi_88_pred_1;
                            _3868 = frontier_phi_88_pred_2;
                            _3867 = frontier_phi_88_pred_3;
                            _3866 = frontier_phi_88_pred_4;
                            _3865 = frontier_phi_88_pred_5;
                            _3575 = _3868 + _3588;
                            _3576 = _3869 + _3589;
                            _3577 = _3870 + _3590;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            _3574 = _3867 + _3587;
                            if (_3592 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3592;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3577;
                        frontier_phi_82_pred_1 = _3576;
                        frontier_phi_82_pred_2 = _3575;
                        frontier_phi_82_pred_3 = _3574;
                        frontier_phi_82_pred_4 = _3573;
                        frontier_phi_82_pred_5 = _3572;
                    }
                    _3215 = frontier_phi_82_pred;
                    _3213 = frontier_phi_82_pred_1;
                    _3211 = frontier_phi_82_pred_2;
                    _3209 = frontier_phi_82_pred_3;
                    _3207 = frontier_phi_82_pred_4;
                    _3205 = frontier_phi_82_pred_5;
                    uint _3371 = _3370 + 1u;
                    if (_3371 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3364 = _3205;
                        _3365 = _3207;
                        _3366 = _3209;
                        _3367 = _3211;
                        _3368 = _3213;
                        _3369 = _3215;
                        _3370 = _3371;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3211;
                frontier_phi_63_64_ladder_1 = _3215;
                frontier_phi_63_64_ladder_2 = _3213;
                frontier_phi_63_64_ladder_3 = _3209;
                frontier_phi_63_64_ladder_4 = _3207;
                frontier_phi_63_64_ladder_5 = _3205;
            }
            else
            {
                frontier_phi_63_64_ladder = _3089;
                frontier_phi_63_64_ladder_1 = _3093;
                frontier_phi_63_64_ladder_2 = _3091;
                frontier_phi_63_64_ladder_3 = _3087;
                frontier_phi_63_64_ladder_4 = _3085;
                frontier_phi_63_64_ladder_5 = _3083;
            }
            _3204 = frontier_phi_63_64_ladder_5;
            _3206 = frontier_phi_63_64_ladder_4;
            _3208 = frontier_phi_63_64_ladder_3;
            _3210 = frontier_phi_63_64_ladder;
            _3212 = frontier_phi_63_64_ladder_2;
            _3214 = frontier_phi_63_64_ladder_1;
        }
        float _3219 = isnan(1.0) ? _955 : (isnan(_955) ? 1.0 : min(_955, 1.0));
        _3016 = (_3219 * _3210) + _2528;
        _3018 = (_3219 * _3212) + _2530;
        _3020 = (_3219 * _3214) + _2532;
        _3022 = ((_3204 * _939) * _3219) + _2866;
        _3024 = ((_3206 * _941) * _3219) + _2868;
        _3026 = ((_3208 * _942) * _3219) + _2870;
    }
    else
    {
        _3016 = _2528;
        _3018 = _2530;
        _3020 = _2532;
        _3022 = _2866;
        _3024 = _2868;
        _3026 = _2870;
    }
    float _5027 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _5038 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _5049 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _3043 = ((isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_3016 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _955))) + ((_3022 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1793)) * cbPerFrame._m0[3u].x);
    float _3044 = ((isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0))) * (_3018 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _955))) + ((_3024 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1793)) * cbPerFrame._m0[3u].x);
    float _3045 = ((isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_3020 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _955))) + ((_3026 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1793)) * cbPerFrame._m0[3u].x);
    uint _3046 = _259 + 6u;
    float _3054 = _877 / cbSceneParam._m0[86u].x;
    float _3055 = _878 / cbSceneParam._m0[86u].y;
    vec4 _3069 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3054, _3055, (log2((isnan(cbSceneParam._m0[77u].w) ? _800 : (isnan(_800) ? cbSceneParam._m0[77u].w : min(_800, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3071 = _3069.x;
    float _3072 = _3069.y;
    float _3073 = _3069.z;
    float _3074 = _3069.w;
    float _3146;
    float _3148;
    float _3150;
    float _3152;
    if (_800 > cbSceneParam._m0[78u].w)
    {
        float _3108 = isnan(_800) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _800 : min(cbSceneParam._m0[80u].w, _800));
        float _3109 = _3108 / _800;
        float _3120 = _3109 * _850;
        float _3121 = _851 * _3109;
        float _3122 = (-0.0) - _3121;
        float _3124 = _3109 * _852;
        float _3126 = (cbSceneParam._m0[77u].w * _3122) / _3108;
        float _3127 = _3126 + cbSceneParam._m0[79u].w;
        float _3128 = cbSceneParam._m0[79u].w - _3121;
        float _3134 = sqrt(((_3120 * _3120) + (_3121 * _3121)) + (_3124 * _3124));
        float _3137 = (1.0 - (cbSceneParam._m0[77u].w / _3108)) * _3134;
        float _3142 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3144 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3321;
        if (abs((_3122 - _3126) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3321 = ((((_3127 > 0.0) ? exp2(_3142 * _3127) : (2.0 - exp2(_3144 * _3127))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3137;
        }
        else
        {
            float _3265 = 1.0 / cbSceneParam._m0[80u].x;
            float _3266 = isnan(_3128) ? _3127 : (isnan(_3127) ? _3128 : max(_3127, _3128));
            float _3267 = isnan(_3128) ? _3127 : (isnan(_3127) ? _3128 : min(_3127, _3128));
            float _3276 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : min(_3266, 0.0));
            float _3277 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : min(_3267, 0.0));
            _3321 = ((abs(_3134 / _3122) * cbSceneParam._m0[80u].y) * ((((_3276 - _3277) * 2.0) - ((exp2(_3142 * (isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0)))) - exp2(_3142 * (isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))))) * _3265)) - ((exp2(_3144 * _3276) - exp2(_3144 * _3277)) * _3265))) + (_3137 * cbSceneParam._m0[80u].z);
        }
        vec4 _3323 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3054, _3055, 1.0), 0.0);
        float _3332 = exp2((_3321 * (-1.44269502162933349609375)) * (1.0 - _3323.w));
        float _3333 = log2(_3332);
        float _3349 = log2(_3074);
        _3146 = (exp2(_3349 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3333 * cbSceneParam._m0[78u].x)) * _3323.x) / cbSceneParam._m0[78u].x)) + _3071;
        _3148 = (exp2(_3349 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3333 * cbSceneParam._m0[78u].y)) * _3323.y) / cbSceneParam._m0[78u].y)) + _3072;
        _3150 = (exp2(_3349 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3333 * cbSceneParam._m0[78u].z)) * _3323.z) / cbSceneParam._m0[78u].z)) + _3073;
        _3152 = _3332 * _3074;
    }
    else
    {
        _3146 = _3071;
        _3148 = _3072;
        _3150 = _3073;
        _3152 = _3074;
    }
    bool _3359;
    vec4 _3162;
    vec4 _3184;
    float _3186;
    float _3190;
    float _3191;
    float _3192;
    float _3193;
    bool _3203;
    for (;;)
    {
        _3162 = cbMatDynParam._m0[0u];
        float _3164 = roundEven(_3162.y);
        bool _3165 = _3164 == 3.0;
        float _3166 = log2(_3152);
        float _3173 = exp2(_3166 * cbSceneParam._m0[78u].x) * _3043;
        float _3174 = exp2(_3166 * cbSceneParam._m0[78u].y) * _3044;
        float _3175 = exp2(_3166 * cbSceneParam._m0[78u].z) * _3045;
        float _3182 = _866 + (-0.5);
        _3184 = cbMtdParam._m0[1u];
        _3186 = _3184.y * _3182;
        float _3189 = (_3164 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3190 = _3189 * (_3165 ? _3173 : (_3173 + (cbSceneParam._m0[72u].w * _3146)));
        _3191 = _3189 * (_3165 ? _3174 : (_3174 + (cbSceneParam._m0[72u].w * _3148)));
        _3192 = _3189 * (_3165 ? _3175 : (_3175 + (cbSceneParam._m0[72u].w * _3150)));
        _3193 = _3182 * 0.999000012874603271484375;
        _3203 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3203)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3193) < 0.5)
            {
                _3359 = true;
                break;
            }
        }
        uint _3300 = _915 + uint(_3162.w);
        if ((cbInstanceData._m0[_3300].w < 1.0) && ((cbInstanceData._m0[_3300].w + _3193) < 0.5))
        {
            _3359 = true;
            break;
        }
        if ((_3186 + 1.0) < _3184.x)
        {
            _3359 = true;
            break;
        }
        _3359 = false;
        break;
    }
    float _3563;
    if (_3359)
    {
        discard_state = true;
        _3563 = 0.0;
    }
    else
    {
        _3563 = cbInstanceData._m0[_3046].w;
    }
    SV_Target.x = _3190;
    SV_Target.y = _3191;
    SV_Target.z = _3192;
    SV_Target.w = _3563;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3046].w;
    discard_exit();
}


