#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1223;
float _3604;
float _3605;
float _3606;
float _3607;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _347 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _349 = _347.x;
    float _361 = dot(vec4(_349, _347.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _378 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_349 - _361) * cbMtdParam._m0[24u].y) + _361) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3616 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _386 = (_379 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _387 = (_379 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _388 = (_379 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _260) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _437 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _451 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_427 - _437) * cbMtdParam._m0[24u].y) + _437) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3627 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _459 = (_452 * ((_405.x * cbMtdParam._m0[13u].x) - _386)) + _386;
    float _460 = (_452 * ((_405.y * cbMtdParam._m0[13u].y) - _387)) + _387;
    float _461 = (_452 * ((_405.z * cbMtdParam._m0[13u].z) - _388)) + _388;
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _491 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _493 = _491.x;
    float _494 = _491.y;
    float _495 = _491.z;
    float _502 = ((_474.x - _493) * _379) + _493;
    float _503 = ((_474.y - _494) * _379) + _494;
    float _504 = ((_474.z - _495) * _379) + _495;
    vec4 _516 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _529 = ((_516.z - _504) * _452) + _504;
    float _532 = ((((_516.x - _502) * _452) + _502) * 2.0) + (-1.0);
    float _534 = ((((_516.y - _503) * _452) + _503) * 2.0) + (-1.0);
    float _535 = dot(vec2(_532, _534), vec2(_532, _534));
    float _3638 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _540 = sqrt(1.0 - (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))));
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _581 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _583 = _581.x;
    float _601 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _583) * _379) + _583;
    float _619 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _260) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _261) + cbTextureTilingScale._m0[21u].w)).x - _601) * _452) + _601;
    float _623 = ((_567.x - _619) * cbMtdParam._m0[19u].z) + _619;
    float _628 = cbMtdParam._m0[22u].x + _553.w;
    float _631 = fma(_540, _227 * NORMAL.x, fma(_534, _234 * TANGENT.x, (_220 * _212) * _532));
    float _634 = fma(_540, _227 * NORMAL.y, fma(_534, _234 * TANGENT.y, (_220 * _213) * _532));
    float _637 = fma(_540, _227 * NORMAL.z, fma(_534, _234 * TANGENT.z, (_220 * _214) * _532));
    float _641 = inversesqrt(dot(vec3(_631, _634, _637), vec3(_631, _634, _637)));
    float _642 = _641 * _631;
    float _643 = _641 * _634;
    float _644 = _641 * _637;
    float _3649 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _645 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3671 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3682 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3693 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3704 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _650 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _664 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _715 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _705);
    float _716 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _705);
    float _717 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _705);
    float _721 = inversesqrt(dot(vec3(_715, _716, _717), vec3(_715, _716, _717)));
    float _722 = _715 * _721;
    float _723 = _716 * _721;
    float _724 = _717 * _721;
    vec4 _729 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _731 = _729.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _903 = sqrt(((_715 * _715) + (_716 * _716)) + (_717 * _717));
        float _909 = (cbMatDynParam._m0[5u].x * _903) + cbMatDynParam._m0[5u].y;
        float _3715 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _914 = (cbMatDynParam._m0[5u].z * _903) + cbMatDynParam._m0[5u].w;
        float _3726 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) - _910)) + _910) < ((_731 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _742 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _743 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _761 = fma(_644, cbSceneParam._m0[5u].z, fma(_643, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _642));
    float _764 = fma(_644, cbSceneParam._m0[6u].z, fma(_643, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _642));
    float _767 = fma(_644, cbSceneParam._m0[7u].z, fma(_643, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _642));
    uint _780 = _240 + 9u;
    uint _781 = _780 + uint(cbMatDynParam._m0[0u].w);
    float _787 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) * cbInstanceData._m0[_781].x;
    float _788 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) * cbInstanceData._m0[_781].y;
    float _789 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * cbInstanceData._m0[_781].z;
    float _3737 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _3748 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _793 = 1.0 - _650;
    float _794 = _790 * _793;
    float _795 = _791 * _793;
    float _796 = _792 * _793;
    float _801 = (_790 + (-0.039999999105930328369140625)) * _650;
    float _802 = (_791 + (-0.039999999105930328369140625)) * _650;
    float _803 = (_792 + (-0.039999999105930328369140625)) * _650;
    float _804 = _801 + 0.039999999105930328369140625;
    float _806 = _802 + 0.039999999105930328369140625;
    float _807 = _803 + 0.039999999105930328369140625;
    vec4 _816 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _742, cbSceneParam._m0[86u].y * _743));
    float _820 = ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * TEXCOORD_5.w) * _816.x;
    float _821 = dot(vec3(_642, _643, _644), vec3(_722, _723, _724));
    float _824 = _821 * 2.0;
    float _828 = (_824 * _642) - _722;
    float _829 = (_824 * _643) - _723;
    float _830 = (_824 * _644) - _724;
    float _834 = abs(dot(vec3(_722, _723, _724), vec3(_642, _643, _644)));
    float _3770 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _836 = sqrt(_645);
    float _849 = exp2((_836 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_836 * 3.0));
    float _855 = (1.0 - _849) * ((_836 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _856 = _849 * _836;
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1222;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _947 = fma(_892, cbModelParam._m0[26u].z, fma(_888, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _884));
        float _951 = fma(_892, cbModelParam._m0[27u].z, fma(_888, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _884));
        float _955 = fma(_892, cbModelParam._m0[28u].z, fma(_888, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _884));
        float _980 = _884 + _642;
        float _981 = _888 + _643;
        float _982 = _892 + _644;
        float _992 = fma(_982, cbModelParam._m0[26u].z, fma(_981, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _980)) - _947;
        float _993 = fma(_982, cbModelParam._m0[27u].z, fma(_981, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _980)) - _951;
        float _994 = fma(_982, cbModelParam._m0[28u].z, fma(_981, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _980)) - _955;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _1011 = ((_998 * _992) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_947 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_998 * _993) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_951 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_998 * _994) / cbModelParam._m0[34u].z) + ((((((_955 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        float _1050 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1016.x + (-0.5));
        float _1052 = _1050 * (_1016.y + (-0.5));
        float _1053 = _1050 * (_1016.z + (-0.5));
        float _1060 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1023.x + (-0.5));
        float _1062 = _1060 * (_1023.y + (-0.5));
        float _1063 = _1060 * (_1023.z + (-0.5));
        float _1070 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1030.x + (-0.5));
        float _1072 = _1070 * (_1030.y + (-0.5));
        float _1073 = _1070 * (_1030.z + (-0.5));
        float _1080 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1037.x + (-0.5));
        float _1082 = _1080 * (_1037.y + (-0.5));
        float _1083 = _1080 * (_1037.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1104 = (dot(vec3(_642, _643, _644), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1114 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3818 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1116 + 1.0))) + _1121) * _1084;
        float _1131 = _1052 * 0.5;
        float _1132 = _1062 * 0.5;
        float _1133 = _1072 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_642, _643, _644), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3851 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1158 + 1.0))) + _1163) * _1085;
        float _1173 = _1053 * 0.5;
        float _1174 = _1063 * 0.5;
        float _1175 = _1073 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_642, _643, _644), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3884 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1200 + 1.0))) + _1205) * _1086;
        _1222 = _1053;
        _1224 = _1052;
        _1225 = _1051;
        _1226 = _1063;
        _1227 = _1062;
        _1228 = _1061;
        _1229 = _1073;
        _1230 = _1072;
        _1231 = _1071;
        _1232 = _1086;
        _1233 = _1085;
        _1234 = _1084;
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _1223;
        _1224 = _1223;
        _1225 = _1223;
        _1226 = _1223;
        _1227 = _1223;
        _1228 = _1223;
        _1229 = _1223;
        _1230 = _1223;
        _1231 = _1223;
        _1232 = _1223;
        _1233 = _1223;
        _1234 = _1223;
        _1235 = 0.0;
        _1236 = 0.0;
        _1237 = 0.0;
    }
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1264 = fma(_892, cbModelParam._m0[30u].z, fma(_888, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _884));
        float _1268 = fma(_892, cbModelParam._m0[31u].z, fma(_888, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _884));
        float _1272 = fma(_892, cbModelParam._m0[32u].z, fma(_888, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _884));
        float _1295 = _884 + _642;
        float _1296 = _888 + _643;
        float _1297 = _892 + _644;
        float _1307 = fma(_1297, cbModelParam._m0[30u].z, fma(_1296, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1295)) - _1264;
        float _1308 = fma(_1297, cbModelParam._m0[31u].z, fma(_1296, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1295)) - _1268;
        float _1309 = fma(_1297, cbModelParam._m0[32u].z, fma(_1296, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1295)) - _1272;
        float _1313 = inversesqrt(dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309)));
        float _1326 = ((_1313 * _1307) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1264 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1313 * _1308) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1268 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1313 * _1309) / cbModelParam._m0[35u].z) + ((((((_1272 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        float _1363 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1330.x + (-0.5));
        float _1365 = _1363 * (_1330.y + (-0.5));
        float _1366 = _1363 * (_1330.z + (-0.5));
        float _1373 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1337.x + (-0.5));
        float _1375 = _1373 * (_1337.y + (-0.5));
        float _1376 = _1373 * (_1337.z + (-0.5));
        float _1383 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1344.x + (-0.5));
        float _1385 = _1383 * (_1344.y + (-0.5));
        float _1386 = _1383 * (_1344.z + (-0.5));
        float _1393 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1351.x + (-0.5));
        float _1395 = _1393 * (_1351.y + (-0.5));
        float _1396 = _1393 * (_1351.z + (-0.5));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = _1364 * 0.5;
        float _1401 = _1374 * 0.5;
        float _1402 = _1384 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_642, _643, _644), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3947 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1427 + 1.0))) + _1432) * _1397;
        float _1442 = _1365 * 0.5;
        float _1443 = _1375 * 0.5;
        float _1444 = _1385 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_642, _643, _644), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _3980 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1469 + 1.0))) + _1474) * _1398;
        float _1484 = _1366 * 0.5;
        float _1485 = _1376 * 0.5;
        float _1486 = _1386 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_642, _643, _644), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4013 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1511 + 1.0))) + _1516) * _1399;
        _1533 = _1366;
        _1534 = _1365;
        _1535 = _1364;
        _1536 = _1376;
        _1537 = _1375;
        _1538 = _1374;
        _1539 = _1386;
        _1540 = _1385;
        _1541 = _1384;
        _1542 = _1399;
        _1543 = _1398;
        _1544 = _1397;
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1223;
        _1534 = _1223;
        _1535 = _1223;
        _1536 = _1223;
        _1537 = _1223;
        _1538 = _1223;
        _1539 = _1223;
        _1540 = _1223;
        _1541 = _1223;
        _1542 = _1223;
        _1543 = _1223;
        _1544 = _1223;
        _1545 = 0.0;
        _1546 = 0.0;
        _1547 = 0.0;
    }
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1235)) + _1235;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1236)) + _1236;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1237)) + _1237;
    float _1580 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1583 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1586 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1557));
    float _1601 = _828 * 0.5;
    float _1602 = _829 * 0.5;
    float _1603 = _830 * 0.5;
    float _1604 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1607 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1610 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1644;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1617 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1222, _1226, _1229, _1232));
        float _1621 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1224, _1227, _1230, _1233));
        float _1625 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1225, _1228, _1231, _1234));
        float _1632 = dot(vec4(cbModelParam._m0[39u]), vec4(_1601, _1602, _1603, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1655;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1646 = dot(vec4(cbModelParam._m0[40u]), vec4(_1601, _1602, _1603, 1.0));
        _1655 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1655 = 1.0;
    }
    float _1659 = (_1655 * cbModelParam._m0[1u].x) + (_1644 * (1.0 - cbModelParam._m0[1u].x));
    float _1669 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _645);
    float _1670 = isnan(_1669) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1669 : min(cbModelParam._m0[25u].z, _1669));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1719 = fma(_892, cbModelParam._m0[13u].z, fma(_888, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _884)) + cbModelParam._m0[13u].w;
        float _1723 = fma(_892, cbModelParam._m0[14u].z, fma(_888, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _884)) + cbModelParam._m0[14u].w;
        float _1727 = fma(_892, cbModelParam._m0[15u].z, fma(_888, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _884)) + cbModelParam._m0[15u].w;
        float _1730 = fma(_830, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _828));
        float _1733 = fma(_830, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _828));
        float _1736 = fma(_830, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _828));
        float _1764;
        if (_1730 > 0.0)
        {
            _1764 = abs((1.0 - _1719) / _1730);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1719 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1764 = frontier_phi_17_15_ladder;
        }
        float _1967;
        if (_1733 > 0.0)
        {
            _1967 = abs((1.0 - _1723) / _1733);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1723 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1967 = frontier_phi_26_22_ladder;
        }
        float _2221;
        if (_1736 > 0.0)
        {
            _2221 = abs((1.0 - _1727) / _1736);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1727 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2221 = frontier_phi_38_33_ladder;
        }
        float _2223 = isnan(_1967) ? _1764 : (isnan(_1764) ? _1967 : min(_1764, _1967));
        float _2224 = isnan(_2221) ? _2223 : (isnan(_2223) ? _2221 : min(_2223, _2221));
        float _2228 = (_2224 * _1730) + _1719;
        float _2229 = (_2224 * _1733) + _1723;
        float _2230 = (_2224 * _1736) + _1727;
        float _2231 = _2224 * 9.9999997473787516355514526367188e-05;
        float _2233 = (-1.0) - _2231;
        float _2235 = _2231 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2230 > _2235) || ((_2230 < _2233) || ((_2229 > _2235) || ((_2229 < _2233) || ((_2228 < _2233) || (_2228 > _2235))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2230, cbModelParam._m0[9u].z, fma(_2229, cbModelParam._m0[9u].y, _2228 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2230, cbModelParam._m0[10u].z, fma(_2229, cbModelParam._m0[10u].y, _2228 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2230, cbModelParam._m0[11u].z, fma(_2229, cbModelParam._m0[11u].y, _2228 * cbModelParam._m0[11u].x))), _1670);
            frontier_phi_16_38_ladder = _2358.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2358.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2358.x * cbModelParam._m0[1u].y;
        }
        _1752 = frontier_phi_16_38_ladder_2;
        _1754 = frontier_phi_16_38_ladder_1;
        _1756 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1740 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_828, _829, _830), _1670);
        _1752 = _1740.x * cbModelParam._m0[1u].y;
        _1754 = _1740.y * cbModelParam._m0[1u].y;
        _1756 = _1740.z * cbModelParam._m0[1u].y;
    }
    float _1760 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _645);
    float _1761 = isnan(_1760) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1760 : min(cbModelParam._m0[25u].w, _1760));
    float _1851;
    float _1853;
    float _1855;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1815 = fma(_892, cbModelParam._m0[21u].z, fma(_888, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _884)) + cbModelParam._m0[21u].w;
        float _1819 = fma(_892, cbModelParam._m0[22u].z, fma(_888, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _884)) + cbModelParam._m0[22u].w;
        float _1823 = fma(_892, cbModelParam._m0[23u].z, fma(_888, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _884)) + cbModelParam._m0[23u].w;
        float _1826 = fma(_830, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _828));
        float _1829 = fma(_830, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _828));
        float _1832 = fma(_830, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _828));
        float _1972;
        if (_1826 > 0.0)
        {
            _1972 = abs((1.0 - _1815) / _1826);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1815 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1972 = frontier_phi_28_24_ladder;
        }
        float _2248;
        if (_1829 > 0.0)
        {
            _2248 = abs((1.0 - _1819) / _1829);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1819 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2248 = frontier_phi_40_35_ladder;
        }
        float _2461;
        if (_1832 > 0.0)
        {
            _2461 = abs((1.0 - _1823) / _1832);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1823 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2461 = frontier_phi_49_46_ladder;
        }
        float _2463 = isnan(_2248) ? _1972 : (isnan(_1972) ? _2248 : min(_1972, _2248));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1826) + _1815;
        float _2469 = (_2464 * _1829) + _1819;
        float _2470 = (_2464 * _1832) + _1823;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2472 = (-1.0) - _2471;
        float _2474 = _2471 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2470 > _2474) || ((_2470 < _2472) || ((_2469 > _2474) || ((_2469 < _2472) || ((_2468 < _2472) || (_2468 > _2474))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2669 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2470, cbModelParam._m0[17u].z, fma(_2469, cbModelParam._m0[17u].y, _2468 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2470, cbModelParam._m0[18u].z, fma(_2469, cbModelParam._m0[18u].y, _2468 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2470, cbModelParam._m0[19u].z, fma(_2469, cbModelParam._m0[19u].y, _2468 * cbModelParam._m0[19u].x))), _1761);
            frontier_phi_25_49_ladder = _2669.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2669.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2669.x * cbModelParam._m0[1u].z;
        }
        _1851 = frontier_phi_25_49_ladder_2;
        _1853 = frontier_phi_25_49_ladder_1;
        _1855 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1835 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_828, _829, _830), _1761);
        _1851 = _1835.x * cbModelParam._m0[1u].z;
        _1853 = _1835.y * cbModelParam._m0[1u].z;
        _1855 = _1835.z * cbModelParam._m0[1u].z;
    }
    float _1868 = (((_855 * _804) + _856) * _820) * ((cbModelParam._m0[1u].w * (_1851 - _1752)) + _1752);
    float _1870 = (((_855 * _806) + _856) * _820) * ((cbModelParam._m0[1u].w * (_1853 - _1754)) + _1754);
    float _1872 = (((_855 * _807) + _856) * _820) * ((cbModelParam._m0[1u].w * (_1855 - _1756)) + _1756);
    float _1875 = fma(_1872, cbSceneParam._m0[89u].z, fma(_1870, cbSceneParam._m0[89u].y, _1868 * cbSceneParam._m0[89u].x));
    float _1878 = fma(_1872, cbSceneParam._m0[90u].z, fma(_1870, cbSceneParam._m0[90u].y, _1868 * cbSceneParam._m0[90u].x));
    float _1881 = fma(_1872, cbSceneParam._m0[91u].z, fma(_1870, cbSceneParam._m0[91u].y, _1868 * cbSceneParam._m0[91u].x));
    uvec4 _1891 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1893 = _1891.x * 14u;
    uint _1894 = _1893 + 13u;
    float _1901 = _820 + (-1.0);
    float _1906 = (cbLight._m0[_1894].x * _1901) + 1.0;
    float _1907 = (cbLight._m0[_1894].y * _1901) + 1.0;
    float _1908 = (cbLight._m0[_1894].z * _1901) + 1.0;
    float _1909 = (cbLight._m0[_1894].w * _1901) + 1.0;
    uint _1910 = _1893 + 5u;
    float _1916 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1920 = _1893 + 4u;
    float _1926 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1930 = _1893 | 1u;
    float _1941 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_642, _643, _644));
    float _1944 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_642, _643, _644));
    float _4149 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _4160 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1949 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.3183098733425140380859375;
    float _1951 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * 0.3183098733425140380859375;
    float _1958 = ((cbLight._m0[_1910].x * _1916) * _1951) + ((cbLight._m0[_1920].x * _1926) * _1949);
    float _1959 = ((_1916 * cbLight._m0[_1910].y) * _1951) + ((_1926 * cbLight._m0[_1920].y) * _1949);
    float _1960 = ((_1916 * cbLight._m0[_1910].z) * _1951) + ((_1926 * cbLight._m0[_1920].z) * _1949);
    uvec4 _1964 = floatBitsToUint(cbLight._m0[_1893 + 12u]);
    bool _1966 = _1964.x == 0u;
    float _1977;
    float _1979;
    float _1981;
    if (_1966)
    {
        _1977 = _1958;
        _1979 = _1959;
        _1981 = _1960;
    }
    else
    {
        uint _1985 = _1893 + 6u;
        float _2001 = (dot(vec3(cbLight._m0[_1893 + 2u].xyz), vec3(_642, _643, _644)) * 0.5) + 0.5;
        float _2002 = _2001 * _2001;
        float _4171 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2003 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2004 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _1977 = (((cbLight._m0[_1985].x * 0.3183098733425140380859375) * _2003) * _2004) + _1958;
        _1979 = (((cbLight._m0[_1985].y * 0.3183098733425140380859375) * _2003) * _2004) + _1959;
        _1981 = (((cbLight._m0[_1985].z * 0.3183098733425140380859375) * _2003) * _2004) + _1960;
    }
    bool _1984 = _1964.y == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_1984)
    {
        _2022 = _1977;
        _2024 = _1979;
        _2026 = _1981;
    }
    else
    {
        uint _2192 = _1893 + 7u;
        float _2208 = (dot(vec3(cbLight._m0[_1893 + 3u].xyz), vec3(_642, _643, _644)) * 0.5) + 0.5;
        float _2209 = _2208 * _2208;
        float _4187 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2210 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2211 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2022 = (((cbLight._m0[_2192].x * 0.3183098733425140380859375) * _2210) * _2211) + _1977;
        _2024 = (((cbLight._m0[_2192].y * 0.3183098733425140380859375) * _2210) * _2211) + _1979;
        _2026 = (((cbLight._m0[_2192].z * 0.3183098733425140380859375) * _2210) * _2211) + _1981;
    }
    uint _2029 = _1893 + 8u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _645) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1893].x + _722;
    float _2045 = cbLight._m0[_1893].y + _723;
    float _2046 = cbLight._m0[_1893].z + _724;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_1893].xyz));
    float _4203 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _4214 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _2058 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _2059 = dot(vec3(_642, _643, _644), vec3(_2051, _2052, _2053));
    float _4225 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2051, _2052, _2053));
    float _4236 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2043 * _2043;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2079 = exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0);
    float _2080 = 0.959999978542327880859375 - _801;
    float _2082 = 0.959999978542327880859375 - _802;
    float _2083 = 0.959999978542327880859375 - _803;
    float _2090 = 1.0 - _2043;
    float _2101 = (0.5 / (((_2058 * ((_2057 * _2090) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2090) + _2043) * _2057))) * _2057;
    float _4247 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2103 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    uint _2114 = _1893 + 9u;
    float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _645) * 0.949999988079071044921875);
    float _2126 = _2125 * _2125;
    float _2127 = cbLight._m0[_1930].x + _722;
    float _2128 = cbLight._m0[_1930].y + _723;
    float _2129 = cbLight._m0[_1930].z + _724;
    float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
    float _2134 = _2133 * _2127;
    float _2135 = _2133 * _2128;
    float _2136 = _2133 * _2129;
    float _2137 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_1930].xyz));
    float _4258 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2141 = dot(vec3(_642, _643, _644), vec3(_2134, _2135, _2136));
    float _4269 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _2145 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2134, _2135, _2136));
    float _4280 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2149 = _2126 * _2126;
    float _2153 = ((_2144 * _2144) * (_2149 + (-1.0))) + 1.0;
    float _2160 = exp2(log2(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * 5.0);
    float _2167 = 1.0 - _2126;
    float _2177 = (0.5 / (((_2058 * ((_2140 * _2167) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2167) + _2126) * _2140))) * _2140;
    float _4291 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2179 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2149 / ((_2153 * _2153) * 3.141590118408203125));
    float _2189 = (((((_2160 * _2080) + _804) * cbLight._m0[_2114].x) * _2179) * _1916) + (((((_2079 * _2080) + _804) * cbLight._m0[_2029].x) * _2103) * _1926);
    float _2190 = (((((_2160 * _2082) + _806) * cbLight._m0[_2114].y) * _2179) * _1916) + (((((_2079 * _2082) + _806) * cbLight._m0[_2029].y) * _2103) * _1926);
    float _2191 = (((((_2160 * _2083) + _807) * cbLight._m0[_2114].z) * _2179) * _1916) + (((((_2079 * _2083) + _807) * cbLight._m0[_2029].z) * _2103) * _1926);
    float _2253;
    float _2255;
    float _2257;
    if (_1966)
    {
        _2253 = _2189;
        _2255 = _2190;
        _2257 = _2191;
    }
    else
    {
        uint _2259 = _1893 + 2u;
        uint _2263 = _1893 + 10u;
        float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _645) * 0.949999988079071044921875);
        float _2278 = _2277 * _2277;
        float _2279 = cbLight._m0[_2259].x + _722;
        float _2280 = cbLight._m0[_2259].y + _723;
        float _2281 = cbLight._m0[_2259].z + _724;
        float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
        float _2286 = _2285 * _2279;
        float _2287 = _2285 * _2280;
        float _2288 = _2285 * _2281;
        float _2289 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2259].xyz));
        float _4302 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2293 = dot(vec3(_642, _643, _644), vec3(_2286, _2287, _2288));
        float _4313 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2297 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2286, _2287, _2288));
        float _4324 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2301 = _2278 * _2278;
        float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
        float _2312 = exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0);
        float _2319 = 1.0 - _2278;
        float _2329 = (0.5 / (((_2058 * ((_2292 * _2319) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2319) + _2278) * _2292))) * _2292;
        float _4335 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2331 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
        float _2332 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2253 = (((((_2312 * _2080) + _804) * cbLight._m0[_2263].x) * _2331) * _2332) + _2189;
        _2255 = (((((_2312 * _2082) + _806) * cbLight._m0[_2263].y) * _2331) * _2332) + _2190;
        _2257 = (((((_2312 * _2083) + _807) * cbLight._m0[_2263].z) * _2331) * _2332) + _2191;
    }
    float _2367;
    float _2369;
    float _2371;
    if (_1984)
    {
        _2367 = _2253;
        _2369 = _2255;
        _2371 = _2257;
    }
    else
    {
        uint _2378 = _1893 + 3u;
        uint _2382 = _1893 + 11u;
        float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _645) * 0.949999988079071044921875);
        float _2397 = _2396 * _2396;
        float _2398 = cbLight._m0[_2378].x + _722;
        float _2399 = cbLight._m0[_2378].y + _723;
        float _2400 = cbLight._m0[_2378].z + _724;
        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
        float _2405 = _2404 * _2398;
        float _2406 = _2404 * _2399;
        float _2407 = _2404 * _2400;
        float _2408 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2378].xyz));
        float _4351 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2412 = dot(vec3(_642, _643, _644), vec3(_2405, _2406, _2407));
        float _4362 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2416 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2405, _2406, _2407));
        float _4373 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2420 = _2397 * _2397;
        float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
        float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * 5.0);
        float _2438 = 1.0 - _2397;
        float _2448 = (0.5 / (((_2058 * ((_2411 * _2438) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2438) + _2397) * _2411))) * _2411;
        float _4384 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2450 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
        float _2451 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2367 = (((((_2431 * _2080) + _804) * cbLight._m0[_2382].x) * _2450) * _2451) + _2253;
        _2369 = (((((_2431 * _2082) + _806) * cbLight._m0[_2382].y) * _2450) * _2451) + _2255;
        _2371 = (((((_2431 * _2083) + _807) * cbLight._m0[_2382].z) * _2450) * _2451) + _2257;
    }
    float _2586;
    float _2588;
    float _2590;
    float _2592;
    float _2594;
    float _2596;
    if (_1891.y == 0u)
    {
        float _2526 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2527 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2526;
        float _2528 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2526;
        float _2529 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2526;
        uvec4 _2541 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2542 = _2541.x;
        uint _2553 = uint((float(_2541.y) * floor(float(uint(cbSceneParam._m0[85u].y * _743) / _2542))) + floor(float(uint(cbSceneParam._m0[85u].x * _742) / _2542)));
        float _2563 = (log2(_2529 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2564 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        uint _2567 = uint(isnan(14.0) ? _2564 : (isnan(_2564) ? 14.0 : min(_2564, 14.0)));
        uvec4 _2572 = texelFetch(g_lightClusterGridBuffer, int(((_2567 << 2u) + (_2553 << 6u)) >> 2u));
        uint _2573 = _2572.x;
        uint _2574 = _2541.z;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        if (((((1u << ((_2574 >> 4u) & 15u)) + 4294967295u) & _2573) == 0u) || ((_2574 & 240u) == 0u))
        {
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
            _2682 = 0.0;
            _2684 = 0.0;
        }
        else
        {
            float _2675;
            float _2677;
            float _2679;
            float _2681;
            float _2683;
            float _2685;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            uint _2833 = 0u;
            uint _2842;
            bool _2843;
            for (;;)
            {
                _2842 = texelFetch(g_lightClassification, int((((_2567 << 5u) + (_2553 << 9u)) + (_2833 << 2u)) >> 2u)).x;
                _2843 = _2842 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2843)
                {
                    frontier_phi_66_pred = _2827;
                    frontier_phi_66_pred_1 = _2832;
                    frontier_phi_66_pred_2 = _2831;
                    frontier_phi_66_pred_3 = _2830;
                    frontier_phi_66_pred_4 = _2829;
                    frontier_phi_66_pred_5 = _2828;
                }
                else
                {
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    uint _2978;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2830;
                    _2976 = _2831;
                    _2977 = _2832;
                    _2978 = _2842;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    for (;;)
                    {
                        uint _2982 = uint(findLSB(_2978)) + (_2833 << 5u);
                        uint _2979 = (_2978 + 4294967295u) & _2978;
                        uint _2984 = _2982 * 48u;
                        vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3004 = (_2982 * 48u) + 4u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        uint _3023 = (_2982 * 48u) + 8u;
                        vec3 _3034 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x));
                        float _3038 = _2998.x - _2527;
                        float _3039 = _2998.y - _2528;
                        float _3040 = _2998.z - _2529;
                        float _3041 = dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040));
                        float _3044 = inversesqrt(_3041);
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3048 = dot(vec3(_761, _764, _767), vec3(_3045, _3046, _3047));
                        float _3053 = 1.0 - (_3041 * _2998.w);
                        float _4410 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3054 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3055 = sqrt(_3041) * _3017.w;
                        float _3058 = 1.39999997615814208984375 / (_3055 + 1.39999997615814208984375);
                        float _3059 = _3058 * _3058;
                        float _3062 = ((1.0 - _3059) * _3048) + _3059;
                        float _3065 = _3055 * _3055;
                        float _3069 = ((isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))) * _3054) / ((_3065 * 0.699999988079071044921875) + 1.0);
                        float _3073 = (-0.0) - _2527;
                        float _3074 = (-0.0) - _2528;
                        float _3075 = (-0.0) - _2529;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3080 = _3079 * _3073;
                        float _3081 = _3079 * _3074;
                        float _3082 = _3079 * _3075;
                        float _3090 = exp2(log2(1.0 / ((_3065 * 3.5) + 5.0)) * 0.25);
                        float _3091 = 1.0 - _836;
                        float _3098 = sqrt(1.0 - ((1.0 - (_3091 * _3091)) * (1.0 - (_3090 * _3090))));
                        float _3099 = _3098 * _3098;
                        float _3100 = _3099 * _3099;
                        float _3101 = _3080 + _3045;
                        float _3102 = _3081 + _3046;
                        float _3103 = _3082 + _3047;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3111 = dot(vec3(_761, _764, _767), vec3(_3080, _3081, _3082));
                        float _4426 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3114 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3115 = dot(vec3(_761, _764, _767), vec3(_3107 * _3101, _3107 * _3102, _3107 * _3103));
                        float _4437 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3118 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3122 = ((_3118 * _3118) * (_3100 + (-1.0))) + 1.0;
                        float _3123 = _3058 * _3099;
                        float _3124 = _3123 * _3123;
                        float _3127 = ((1.0 - _3124) * _3048) + _3124;
                        float _4448 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3128 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3129 = 1.0 - _3099;
                        float _3139 = (0.5 / (((_3128 * ((_3114 * _3129) + _3099)) + 9.9999999392252902907785028219223e-09) + (((_3128 * _3129) + _3099) * _3114))) * _3128;
                        float _4459 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3150 = (((_3100 * 3.1415927410125732421875) * (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) / ((_3122 * _3122) * ((_3065 * 2.1991131305694580078125) + 3.141590118408203125))) * _3054;
                        _2902 = (_3069 * _3017.x) + _2975;
                        _2903 = (_3069 * _3017.y) + _2976;
                        _2904 = (_3069 * _3017.z) + _2977;
                        _2899 = (_3150 * _3034.x) + _2972;
                        _2900 = (_3150 * _3034.y) + _2973;
                        _2901 = (_3150 * _3034.z) + _2974;
                        if (_2979 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2902;
                            _2976 = _2903;
                            _2977 = _2904;
                            _2978 = _2979;
                        }
                    }
                    frontier_phi_66_pred = _2899;
                    frontier_phi_66_pred_1 = _2904;
                    frontier_phi_66_pred_2 = _2903;
                    frontier_phi_66_pred_3 = _2902;
                    frontier_phi_66_pred_4 = _2901;
                    frontier_phi_66_pred_5 = _2900;
                }
                _2675 = frontier_phi_66_pred;
                _2685 = frontier_phi_66_pred_1;
                _2683 = frontier_phi_66_pred_2;
                _2681 = frontier_phi_66_pred_3;
                _2679 = frontier_phi_66_pred_4;
                _2677 = frontier_phi_66_pred_5;
                uint _2834 = _2833 + 1u;
                if (_2834 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2827 = _2675;
                    _2828 = _2677;
                    _2829 = _2679;
                    _2830 = _2681;
                    _2831 = _2683;
                    _2832 = _2685;
                    _2833 = _2834;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
            _2682 = _2683;
            _2684 = _2685;
        }
        uvec4 _2688 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2689 = _2688.z;
        uint _2691 = (_2689 >> 8u) & 15u;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        if (((4294967295u << _2691) & _2573) == 0u)
        {
            _2795 = _2674;
            _2797 = _2676;
            _2799 = _2678;
            _2801 = _2680;
            _2803 = _2682;
            _2805 = _2684;
        }
        else
        {
            float _2820 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
            float _2821 = _2820 * _2527;
            float _2822 = _2820 * _2528;
            float _2823 = _2820 * _2529;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2691 < ((_2689 >> 12u) & 15u))
            {
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _2806;
                float _2955 = _2674;
                float _2956 = _2676;
                float _2957 = _2678;
                float _2958 = _2680;
                float _2959 = _2682;
                float _2960 = _2684;
                uint _2961 = _2691;
                uint _2970;
                bool _2971;
                for (;;)
                {
                    _2970 = texelFetch(g_lightClassification, int((((_2567 << 5u) + (_2553 << 9u)) + (_2961 << 2u)) >> 2u)).x;
                    _2971 = _2970 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2971)
                    {
                        frontier_phi_77_pred = _2960;
                        frontier_phi_77_pred_1 = _2959;
                        frontier_phi_77_pred_2 = _2958;
                        frontier_phi_77_pred_3 = _2957;
                        frontier_phi_77_pred_4 = _2956;
                        frontier_phi_77_pred_5 = _2955;
                    }
                    else
                    {
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3177 = _2955;
                        float _3178 = _2956;
                        float _3179 = _2957;
                        float _3180 = _2958;
                        float _3181 = _2959;
                        float _3182 = _2960;
                        uint _3183 = _2970;
                        uint _3184;
                        vec4 _3209;
                        float _3210;
                        vec4 _3225;
                        vec3 _3237;
                        vec4 _3252;
                        vec4 _3267;
                        float _3313;
                        bool _3314;
                        for (;;)
                        {
                            uint _3194 = ((_2961 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3183));
                            _3184 = (_3183 + 4294967295u) & _3183;
                            uint _3196 = _3194 * 40u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            _3210 = _3209.w;
                            uint _3212 = (_3194 * 40u) + 4u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3227 = (_3194 * 40u) + 8u;
                            _3237 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x));
                            uint _3239 = (_3194 * 40u) + 16u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3254 = (_3194 * 40u) + 20u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3269 = (_3194 * 40u) + 24u;
                            vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3288 = (_3194 * 40u) + 28u;
                            vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            _3313 = fma(_2529, _3301.z, fma(_2528, _3301.y, _3301.x * _2527)) + _3301.w;
                            _3314 = !((fma(_2529, _3282.z, fma(_2528, _3282.y, _3282.x * _2527)) + _3282.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3314)
                            {
                                float _3341 = _3209.x - _2527;
                                float _3342 = _3209.y - _2528;
                                float _3343 = _3209.z - _2529;
                                float _3344 = dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343));
                                float _3347 = inversesqrt(_3344);
                                float _3348 = _3347 * _3341;
                                float _3349 = _3347 * _3342;
                                float _3350 = _3347 * _3343;
                                float _3354 = 1.0 - (_3344 / (_3210 * _3210));
                                float _4470 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3359 = sqrt(_3344) * _3225.w;
                                float _3361 = 1.39999997615814208984375 / (_3359 + 1.39999997615814208984375);
                                float _3362 = _3361 * _3361;
                                float _3365 = ((1.0 - _3362) * dot(vec3(_3348, _3349, _3350), vec3(_761, _764, _767))) + _3362;
                                float _3368 = _3359 * _3359;
                                float _3372 = (fma(_2529, _3252.z, fma(_2528, _3252.y, _3252.x * _2527)) + _3252.w) / _3313;
                                float _3373 = (fma(_2529, _3267.z, fma(_2528, _3267.y, _3267.x * _2527)) + _3267.w) / _3313;
                                float _3377 = 1.0 - dot(vec2(_3372, _3373), vec2(_3372, _3373));
                                float _4486 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3379 = _3378 * (((isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0))) * _3355) / ((_3368 * 0.699999988079071044921875) + 1.0));
                                float _3391 = exp2(log2(1.0 / ((_3368 * 3.5) + 5.0)) * 0.25);
                                float _3392 = 1.0 - _836;
                                float _3399 = sqrt(1.0 - ((1.0 - (_3392 * _3392)) * (1.0 - (_3391 * _3391))));
                                float _3400 = _3399 * _3399;
                                float _3401 = _3400 * _3400;
                                float _3402 = _3348 - _2821;
                                float _3403 = _3349 - _2822;
                                float _3404 = _3350 - _2823;
                                float _3408 = inversesqrt(dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404)));
                                float _3412 = dot(vec3(_761, _764, _767), vec3((-0.0) - _2821, (-0.0) - _2822, (-0.0) - _2823));
                                float _4497 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3415 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3416 = dot(vec3(_761, _764, _767), vec3(_3408 * _3402, _3408 * _3403, _3408 * _3404));
                                float _4508 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3419 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3423 = ((_3419 * _3419) * (_3401 + (-1.0))) + 1.0;
                                float _3424 = _3361 * _3400;
                                float _3425 = _3424 * _3424;
                                float _3431 = ((1.0 - _3425) * dot(vec3(_761, _764, _767), vec3(_3348, _3349, _3350))) + _3425;
                                float _4519 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3433 = 1.0 - _3400;
                                float _3443 = (0.5 / (((_3432 * ((_3415 * _3433) + _3400)) + 9.9999999392252902907785028219223e-09) + (((_3432 * _3433) + _3400) * _3415))) * _3432;
                                float _4530 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3453 = (_3378 * _3355) * (((_3401 * 3.1415927410125732421875) * (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) / ((_3423 * _3423) * ((_3368 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3379 * _3225.y;
                                frontier_phi_83_pred_1 = _3379 * _3225.x;
                                frontier_phi_83_pred_2 = _3453 * _3237.z;
                                frontier_phi_83_pred_3 = _3453 * _3237.y;
                                frontier_phi_83_pred_4 = _3453 * _3237.x;
                                frontier_phi_83_pred_5 = _3379 * _3225.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3461 = frontier_phi_83_pred;
                            _3460 = frontier_phi_83_pred_1;
                            _3459 = frontier_phi_83_pred_2;
                            _3458 = frontier_phi_83_pred_3;
                            _3457 = frontier_phi_83_pred_4;
                            _3462 = frontier_phi_83_pred_5;
                            _3167 = _3460 + _3180;
                            _3168 = _3461 + _3181;
                            _3169 = _3462 + _3182;
                            _3164 = _3457 + _3177;
                            _3165 = _3458 + _3178;
                            _3166 = _3459 + _3179;
                            if (_3184 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3184;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3169;
                        frontier_phi_77_pred_1 = _3168;
                        frontier_phi_77_pred_2 = _3167;
                        frontier_phi_77_pred_3 = _3166;
                        frontier_phi_77_pred_4 = _3165;
                        frontier_phi_77_pred_5 = _3164;
                    }
                    _2806 = frontier_phi_77_pred;
                    _2804 = frontier_phi_77_pred_1;
                    _2802 = frontier_phi_77_pred_2;
                    _2800 = frontier_phi_77_pred_3;
                    _2798 = frontier_phi_77_pred_4;
                    _2796 = frontier_phi_77_pred_5;
                    uint _2962 = _2961 + 1u;
                    if (_2962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2955 = _2796;
                        _2956 = _2798;
                        _2957 = _2800;
                        _2958 = _2802;
                        _2959 = _2804;
                        _2960 = _2806;
                        _2961 = _2962;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2800;
                frontier_phi_58_59_ladder_1 = _2806;
                frontier_phi_58_59_ladder_2 = _2804;
                frontier_phi_58_59_ladder_3 = _2802;
                frontier_phi_58_59_ladder_4 = _2798;
                frontier_phi_58_59_ladder_5 = _2796;
            }
            else
            {
                frontier_phi_58_59_ladder = _2678;
                frontier_phi_58_59_ladder_1 = _2684;
                frontier_phi_58_59_ladder_2 = _2682;
                frontier_phi_58_59_ladder_3 = _2680;
                frontier_phi_58_59_ladder_4 = _2676;
                frontier_phi_58_59_ladder_5 = _2674;
            }
            _2795 = frontier_phi_58_59_ladder_5;
            _2797 = frontier_phi_58_59_ladder_4;
            _2799 = frontier_phi_58_59_ladder;
            _2801 = frontier_phi_58_59_ladder_3;
            _2803 = frontier_phi_58_59_ladder_2;
            _2805 = frontier_phi_58_59_ladder_1;
        }
        float _2810 = isnan(1.0) ? _820 : (isnan(_820) ? 1.0 : min(_820, 1.0));
        _2586 = (_2810 * _2801) + _2022;
        _2588 = (_2810 * _2803) + _2024;
        _2590 = (_2810 * _2805) + _2026;
        _2592 = ((_2795 * _804) * _2810) + _2367;
        _2594 = ((_2797 * _806) * _2810) + _2369;
        _2596 = ((_2799 * _807) * _2810) + _2371;
    }
    else
    {
        _2586 = _2022;
        _2588 = _2024;
        _2590 = _2026;
        _2592 = _2367;
        _2594 = _2369;
        _2596 = _2371;
    }
    float _4546 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4557 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4568 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2613 = ((isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2586 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _820))) + ((_2592 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    float _2614 = ((isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2588 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _820))) + ((_2594 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    float _2615 = ((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2590 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _820))) + ((_2596 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    uint _2616 = _240 + 6u;
    float _2624 = _742 / cbSceneParam._m0[86u].x;
    float _2625 = _743 / cbSceneParam._m0[86u].y;
    vec4 _2639 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2624, _2625, (log2((isnan(cbSceneParam._m0[77u].w) ? _664 : (isnan(_664) ? cbSceneParam._m0[77u].w : min(_664, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2641 = _2639.x;
    float _2642 = _2639.y;
    float _2643 = _2639.z;
    float _2644 = _2639.w;
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    if (_664 > cbSceneParam._m0[78u].w)
    {
        float _2699 = isnan(_664) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _664 : min(cbSceneParam._m0[80u].w, _664));
        float _2700 = _2699 / _664;
        float _2711 = _2700 * _715;
        float _2712 = _716 * _2700;
        float _2713 = (-0.0) - _2712;
        float _2715 = _2700 * _717;
        float _2717 = (cbSceneParam._m0[77u].w * _2713) / _2699;
        float _2718 = _2717 + cbSceneParam._m0[79u].w;
        float _2719 = cbSceneParam._m0[79u].w - _2712;
        float _2725 = sqrt(((_2711 * _2711) + (_2712 * _2712)) + (_2715 * _2715));
        float _2728 = (1.0 - (cbSceneParam._m0[77u].w / _2699)) * _2725;
        float _2733 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2735 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2912;
        if (abs((_2713 - _2717) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2912 = ((((_2718 > 0.0) ? exp2(_2733 * _2718) : (2.0 - exp2(_2735 * _2718))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2728;
        }
        else
        {
            float _2856 = 1.0 / cbSceneParam._m0[80u].x;
            float _2857 = isnan(_2719) ? _2718 : (isnan(_2718) ? _2719 : max(_2718, _2719));
            float _2858 = isnan(_2719) ? _2718 : (isnan(_2718) ? _2719 : min(_2718, _2719));
            float _2867 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : min(_2857, 0.0));
            float _2868 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : min(_2858, 0.0));
            _2912 = ((abs(_2725 / _2713) * cbSceneParam._m0[80u].y) * ((((_2867 - _2868) * 2.0) - ((exp2(_2733 * (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0)))) - exp2(_2733 * (isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0))))) * _2856)) - ((exp2(_2735 * _2867) - exp2(_2735 * _2868)) * _2856))) + (_2728 * cbSceneParam._m0[80u].z);
        }
        vec4 _2914 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2624, _2625, 1.0), 0.0);
        float _2923 = exp2((_2912 * (-1.44269502162933349609375)) * (1.0 - _2914.w));
        float _2924 = log2(_2923);
        float _2940 = log2(_2644);
        _2737 = (exp2(_2940 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].x)) * _2914.x) / cbSceneParam._m0[78u].x)) + _2641;
        _2739 = (exp2(_2940 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].y)) * _2914.y) / cbSceneParam._m0[78u].y)) + _2642;
        _2741 = (exp2(_2940 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].z)) * _2914.z) / cbSceneParam._m0[78u].z)) + _2643;
        _2743 = _2923 * _2644;
    }
    else
    {
        _2737 = _2641;
        _2739 = _2642;
        _2741 = _2643;
        _2743 = _2644;
    }
    bool _2950;
    vec4 _2753;
    vec4 _2775;
    float _2777;
    float _2781;
    float _2782;
    float _2783;
    float _2784;
    bool _2794;
    for (;;)
    {
        _2753 = cbMatDynParam._m0[0u];
        float _2755 = roundEven(_2753.y);
        bool _2756 = _2755 == 3.0;
        float _2757 = log2(_2743);
        float _2764 = exp2(_2757 * cbSceneParam._m0[78u].x) * _2613;
        float _2765 = exp2(_2757 * cbSceneParam._m0[78u].y) * _2614;
        float _2766 = exp2(_2757 * cbSceneParam._m0[78u].z) * _2615;
        float _2773 = _731 + (-0.5);
        _2775 = cbMtdParam._m0[1u];
        _2777 = _2775.y * _2773;
        float _2780 = (_2755 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2781 = _2780 * (_2756 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2737)));
        _2782 = _2780 * (_2756 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2739)));
        _2783 = _2780 * (_2756 ? _2766 : (_2766 + (cbSceneParam._m0[72u].w * _2741)));
        _2784 = _2773 * 0.999000012874603271484375;
        _2794 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2794)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2784) < 0.5)
            {
                _2950 = true;
                break;
            }
        }
        uint _2891 = _780 + uint(_2753.w);
        if ((cbInstanceData._m0[_2891].w < 1.0) && ((cbInstanceData._m0[_2891].w + _2784) < 0.5))
        {
            _2950 = true;
            break;
        }
        if ((_2777 + 1.0) < _2775.x)
        {
            _2950 = true;
            break;
        }
        _2950 = false;
        break;
    }
    float _3155;
    if (_2950)
    {
        discard_state = true;
        _3155 = 0.0;
    }
    else
    {
        _3155 = cbInstanceData._m0[_2616].w;
    }
    SV_Target.x = _2781;
    SV_Target.y = _2782;
    SV_Target.z = _2783;
    SV_Target.w = _3155;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2616].w;
    discard_exit();
}


