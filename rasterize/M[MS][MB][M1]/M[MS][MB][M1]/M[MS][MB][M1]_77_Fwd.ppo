#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1256;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _364 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _364) * cbMtdParam._m0[24u].y) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3584 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _389 = (_382 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _390 = (_382 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _391 = (_382 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _423 = _421.x;
    float _424 = _421.y;
    float _425 = _421.z;
    float _434 = ((_404.z - _425) * _382) + _425;
    float _437 = ((((_404.x - _423) * _382) + _423) * 2.0) + (-1.0);
    float _439 = ((((_404.y - _424) * _382) + _424) * 2.0) + (-1.0);
    float _440 = dot(vec2(_437, _439), vec2(_437, _439));
    float _3595 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _445 = sqrt(1.0 - (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))));
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _473 = (((_461.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _437;
    float _474 = (((_461.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _439;
    vec4 _486 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _488 = _486.x;
    float _489 = 1.0 - _488;
    float _517 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_488 - _489) * cbMtdParam._m0[24u].w) + _489) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3606 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _526 = ((((cbMtdParam._m0[10u].x - _389) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _518) + _389;
    float _527 = ((((cbMtdParam._m0[10u].y - _390) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _518) + _390;
    float _528 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _391)) * _518) + _391;
    vec4 _540 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _556 = _554.x;
    float _574 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _556) * _382) + _556;
    float _578 = ((_540.x - _574) * cbMtdParam._m0[19u].z) + _574;
    float _580 = _578 - (_578 * _518);
    float _584 = (cbMtdParam._m0[19u].w * (_461.z - _434)) + _434;
    float _588 = ((cbMtdParam._m0[23u].y - _584) * _518) + _584;
    vec4 _607 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _609 = _607.x;
    float _610 = _607.y;
    float _614 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_233, _234, _235, 0.0));
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _264) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _265) + cbTextureTilingScale._m0[18u].w));
    float _631 = _629.x;
    float _636 = fract(_629.w + cbPerFrame._m0[22u].x);
    float _638 = (1.0 - _636) * _631;
    float _643 = ((_636 + (-1.0)) + _631) * 9.0;
    float _645 = ((_631 + (-1.0)) + _636) * 9.0;
    float _646 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _647 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _661 = (_638 * ((_629.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _646 : (isnan(_646) ? 3.0 : min(_646, 3.0))) * 3.1415927410125732421875);
    float _663 = (_638 * ((_629.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _647 : (isnan(_647) ? 3.0 : min(_647, 3.0))) * 3.1415927410125732421875);
    float _667 = inversesqrt(dot(vec3(_661, _663, 1.0), vec3(_661, _663, 1.0)));
    float _683 = (((((0.5 - _609) + ((_661 * 0.5) * _667)) * _614) + _609) * 2.0) + (-1.0);
    float _684 = (((((0.5 - _610) + ((_667 * 0.5) * _663)) * _614) + _610) * 2.0) + (-1.0);
    float _685 = dot(vec2(_683, _684), vec2(_683, _684));
    float _3637 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _701 = ((((cbMtdParam._m0[22u].z * _473) - _473) + _683) * _518) + _473;
    float _702 = ((((cbMtdParam._m0[22u].z * _474) - _474) + _684) * _518) + _474;
    float _703 = (_518 * (sqrt(1.0 - (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) - _445)) + _445;
    float _705 = cbMtdParam._m0[22u].x + _461.w;
    float _708 = fma(_703, _233, fma(_702, _239 * TANGENT.x, (_225 * _217) * _701));
    float _711 = fma(_703, _234, fma(_702, _239 * TANGENT.y, (_225 * _218) * _701));
    float _714 = fma(_703, _235, fma(_702, _239 * TANGENT.z, (_225 * _219) * _701));
    float _718 = inversesqrt(dot(vec3(_708, _711, _714), vec3(_708, _711, _714)));
    float _719 = _718 * _708;
    float _720 = _718 * _711;
    float _721 = _718 * _714;
    float _3648 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _722 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _3670 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _3681 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _3692 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _3703 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _727 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _741 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _791 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _781);
    float _792 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _781);
    float _793 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _781);
    float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
    float _798 = _791 * _797;
    float _799 = _792 * _797;
    float _800 = _793 * _797;
    float _806 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _807 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _825 = fma(_721, cbSceneParam._m0[5u].z, fma(_720, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _719));
    float _828 = fma(_721, cbSceneParam._m0[6u].z, fma(_720, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _719));
    float _831 = fma(_721, cbSceneParam._m0[7u].z, fma(_720, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _719));
    uint _845 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _851 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_845].x;
    float _852 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * cbInstanceData._m0[_845].y;
    float _853 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_845].z;
    float _3714 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _857 = 1.0 - _727;
    float _858 = _854 * _857;
    float _859 = _855 * _857;
    float _860 = _856 * _857;
    float _865 = (_854 + (-0.039999999105930328369140625)) * _727;
    float _866 = (_855 + (-0.039999999105930328369140625)) * _727;
    float _867 = (_856 + (-0.039999999105930328369140625)) * _727;
    float _868 = _865 + 0.039999999105930328369140625;
    float _870 = _866 + 0.039999999105930328369140625;
    float _871 = _867 + 0.039999999105930328369140625;
    vec4 _880 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _806, cbSceneParam._m0[86u].y * _807));
    float _884 = ((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * TEXCOORD_5.w) * _880.x;
    float _885 = dot(vec3(_719, _720, _721), vec3(_798, _799, _800));
    float _888 = _885 * 2.0;
    float _892 = (_888 * _719) - _798;
    float _893 = (_888 * _720) - _799;
    float _894 = (_888 * _721) - _800;
    float _898 = abs(dot(vec3(_798, _799, _800), vec3(_719, _720, _721)));
    float _3747 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _900 = sqrt(_722);
    float _912 = exp2((_900 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_900 * 3.0));
    float _918 = (1.0 - _912) * ((_900 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _919 = _912 * _900;
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1255;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _981 = fma(_955, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _947));
        float _985 = fma(_955, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _947));
        float _989 = fma(_955, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _947));
        float _1013 = _947 + _719;
        float _1014 = _951 + _720;
        float _1015 = _955 + _721;
        float _1025 = fma(_1015, cbModelParam._m0[26u].z, fma(_1014, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1013)) - _981;
        float _1026 = fma(_1015, cbModelParam._m0[27u].z, fma(_1014, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1013)) - _985;
        float _1027 = fma(_1015, cbModelParam._m0[28u].z, fma(_1014, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1013)) - _989;
        float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
        float _1044 = ((_1031 * _1025) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_981 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1031 * _1026) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_985 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1031 * _1027) / cbModelParam._m0[34u].z) + ((((((_989 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        float _1083 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1049.x + (-0.5));
        float _1085 = _1083 * (_1049.y + (-0.5));
        float _1086 = _1083 * (_1049.z + (-0.5));
        float _1093 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1056.x + (-0.5));
        float _1095 = _1093 * (_1056.y + (-0.5));
        float _1096 = _1093 * (_1056.z + (-0.5));
        float _1103 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1063.x + (-0.5));
        float _1105 = _1103 * (_1063.y + (-0.5));
        float _1106 = _1103 * (_1063.z + (-0.5));
        float _1113 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1070.x + (-0.5));
        float _1115 = _1113 * (_1070.y + (-0.5));
        float _1116 = _1113 * (_1070.z + (-0.5));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = _1084 * 0.5;
        float _1121 = _1094 * 0.5;
        float _1122 = _1104 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1137 = (dot(vec3(_719, _720, _721), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1147 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3795 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1149 + 1.0))) + _1154) * _1117;
        float _1164 = _1085 * 0.5;
        float _1165 = _1095 * 0.5;
        float _1166 = _1105 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_719, _720, _721), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3806 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3817 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3828 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1191 + 1.0))) + _1196) * _1118;
        float _1206 = _1086 * 0.5;
        float _1207 = _1096 * 0.5;
        float _1208 = _1106 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_719, _720, _721), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3861 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1233 + 1.0))) + _1238) * _1119;
        _1255 = _1086;
        _1257 = _1085;
        _1258 = _1084;
        _1259 = _1096;
        _1260 = _1095;
        _1261 = _1094;
        _1262 = _1106;
        _1263 = _1105;
        _1264 = _1104;
        _1265 = _1119;
        _1266 = _1118;
        _1267 = _1117;
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
    }
    else
    {
        _1255 = _1256;
        _1257 = _1256;
        _1258 = _1256;
        _1259 = _1256;
        _1260 = _1256;
        _1261 = _1256;
        _1262 = _1256;
        _1263 = _1256;
        _1264 = _1256;
        _1265 = _1256;
        _1266 = _1256;
        _1267 = _1256;
        _1268 = 0.0;
        _1269 = 0.0;
        _1270 = 0.0;
    }
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1295 = fma(_955, cbModelParam._m0[30u].z, fma(_951, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947));
        float _1299 = fma(_955, cbModelParam._m0[31u].z, fma(_951, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947));
        float _1303 = fma(_955, cbModelParam._m0[32u].z, fma(_951, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947));
        float _1326 = _947 + _719;
        float _1327 = _951 + _720;
        float _1328 = _955 + _721;
        float _1338 = fma(_1328, cbModelParam._m0[30u].z, fma(_1327, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1326)) - _1295;
        float _1339 = fma(_1328, cbModelParam._m0[31u].z, fma(_1327, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1326)) - _1299;
        float _1340 = fma(_1328, cbModelParam._m0[32u].z, fma(_1327, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1326)) - _1303;
        float _1344 = inversesqrt(dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340)));
        float _1357 = ((_1344 * _1338) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1295 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1344 * _1339) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1299 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1344 * _1340) / cbModelParam._m0[35u].z) + ((((((_1303 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        float _1394 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1361.x + (-0.5));
        float _1396 = _1394 * (_1361.y + (-0.5));
        float _1397 = _1394 * (_1361.z + (-0.5));
        float _1404 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1368.x + (-0.5));
        float _1406 = _1404 * (_1368.y + (-0.5));
        float _1407 = _1404 * (_1368.z + (-0.5));
        float _1414 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1375.x + (-0.5));
        float _1416 = _1414 * (_1375.y + (-0.5));
        float _1417 = _1414 * (_1375.z + (-0.5));
        float _1424 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1382.x + (-0.5));
        float _1426 = _1424 * (_1382.y + (-0.5));
        float _1427 = _1424 * (_1382.z + (-0.5));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = _1395 * 0.5;
        float _1432 = _1405 * 0.5;
        float _1433 = _1415 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_719, _720, _721), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3924 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1458 + 1.0))) + _1463) * _1428;
        float _1473 = _1396 * 0.5;
        float _1474 = _1406 * 0.5;
        float _1475 = _1416 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_719, _720, _721), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _3957 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1500 + 1.0))) + _1505) * _1429;
        float _1515 = _1397 * 0.5;
        float _1516 = _1407 * 0.5;
        float _1517 = _1417 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_719, _720, _721), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _3990 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1542 + 1.0))) + _1547) * _1430;
        _1564 = _1397;
        _1565 = _1396;
        _1566 = _1395;
        _1567 = _1407;
        _1568 = _1406;
        _1569 = _1405;
        _1570 = _1417;
        _1571 = _1416;
        _1572 = _1415;
        _1573 = _1430;
        _1574 = _1429;
        _1575 = _1428;
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
    }
    else
    {
        _1564 = _1256;
        _1565 = _1256;
        _1566 = _1256;
        _1567 = _1256;
        _1568 = _1256;
        _1569 = _1256;
        _1570 = _1256;
        _1571 = _1256;
        _1572 = _1256;
        _1573 = _1256;
        _1574 = _1256;
        _1575 = _1256;
        _1576 = 0.0;
        _1577 = 0.0;
        _1578 = 0.0;
    }
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1268)) + _1268;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1269)) + _1269;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1270)) + _1270;
    float _1611 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1589, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1589, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1589, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1588));
    float _1632 = _892 * 0.5;
    float _1633 = _893 * 0.5;
    float _1634 = _894 * 0.5;
    float _1635 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1638 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1641 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1675;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1648 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1255, _1259, _1262, _1265));
        float _1652 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1257, _1260, _1263, _1266));
        float _1656 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1663 = dot(vec4(cbModelParam._m0[39u]), vec4(_1632, _1633, _1634, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1686;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1677 = dot(vec4(cbModelParam._m0[40u]), vec4(_1632, _1633, _1634, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1677) ? 0.0 : (isnan(0.0) ? _1677 : max(0.0, _1677))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1690 = (_1686 * cbModelParam._m0[1u].x) + (_1675 * (1.0 - cbModelParam._m0[1u].x));
    float _1700 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _722);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1700 : min(cbModelParam._m0[25u].z, _1700));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1750 = fma(_955, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _947)) + cbModelParam._m0[13u].w;
        float _1754 = fma(_955, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _947)) + cbModelParam._m0[14u].w;
        float _1758 = fma(_955, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _947)) + cbModelParam._m0[15u].w;
        float _1761 = fma(_894, cbModelParam._m0[13u].z, fma(_893, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _892));
        float _1764 = fma(_894, cbModelParam._m0[14u].z, fma(_893, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _892));
        float _1767 = fma(_894, cbModelParam._m0[15u].z, fma(_893, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _892));
        float _1795;
        if (_1761 > 0.0)
        {
            _1795 = abs((1.0 - _1750) / _1761);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1750 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1795 = frontier_phi_14_12_ladder;
        }
        float _1998;
        if (_1764 > 0.0)
        {
            _1998 = abs((1.0 - _1754) / _1764);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1754 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1998 = frontier_phi_23_19_ladder;
        }
        float _2252;
        if (_1767 > 0.0)
        {
            _2252 = abs((1.0 - _1758) / _1767);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1758 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2252 = frontier_phi_35_30_ladder;
        }
        float _2254 = isnan(_1998) ? _1795 : (isnan(_1795) ? _1998 : min(_1795, _1998));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1761) + _1750;
        float _2260 = (_2255 * _1764) + _1754;
        float _2261 = (_2255 * _1767) + _1758;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2264 = (-1.0) - _2262;
        float _2266 = _2262 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2261 > _2266) || ((_2261 < _2264) || ((_2260 > _2266) || ((_2260 < _2264) || ((_2259 < _2264) || (_2259 > _2266))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2261, cbModelParam._m0[9u].z, fma(_2260, cbModelParam._m0[9u].y, _2259 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2261, cbModelParam._m0[10u].z, fma(_2260, cbModelParam._m0[10u].y, _2259 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2261, cbModelParam._m0[11u].z, fma(_2260, cbModelParam._m0[11u].y, _2259 * cbModelParam._m0[11u].x))), _1701);
            frontier_phi_13_35_ladder = _2389.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2389.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2389.x * cbModelParam._m0[1u].y;
        }
        _1783 = frontier_phi_13_35_ladder_2;
        _1785 = frontier_phi_13_35_ladder_1;
        _1787 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_892, _893, _894), _1701);
        _1783 = _1771.x * cbModelParam._m0[1u].y;
        _1785 = _1771.y * cbModelParam._m0[1u].y;
        _1787 = _1771.z * cbModelParam._m0[1u].y;
    }
    float _1791 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _722);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1791 : min(cbModelParam._m0[25u].w, _1791));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1846 = fma(_955, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _947)) + cbModelParam._m0[21u].w;
        float _1850 = fma(_955, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _947)) + cbModelParam._m0[22u].w;
        float _1854 = fma(_955, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _947)) + cbModelParam._m0[23u].w;
        float _1857 = fma(_894, cbModelParam._m0[21u].z, fma(_893, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _892));
        float _1860 = fma(_894, cbModelParam._m0[22u].z, fma(_893, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _892));
        float _1863 = fma(_894, cbModelParam._m0[23u].z, fma(_893, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _892));
        float _2003;
        if (_1857 > 0.0)
        {
            _2003 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2003 = frontier_phi_25_21_ladder;
        }
        float _2279;
        if (_1860 > 0.0)
        {
            _2279 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2279 = frontier_phi_37_32_ladder;
        }
        float _2492;
        if (_1863 > 0.0)
        {
            _2492 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2492 = frontier_phi_46_43_ladder;
        }
        float _2494 = isnan(_2279) ? _2003 : (isnan(_2003) ? _2279 : min(_2003, _2279));
        float _2495 = isnan(_2492) ? _2494 : (isnan(_2494) ? _2492 : min(_2494, _2492));
        float _2499 = (_2495 * _1857) + _1846;
        float _2500 = (_2495 * _1860) + _1850;
        float _2501 = (_2495 * _1863) + _1854;
        float _2502 = _2495 * 9.9999997473787516355514526367188e-05;
        float _2503 = (-1.0) - _2502;
        float _2505 = _2502 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2501 > _2505) || ((_2501 < _2503) || ((_2500 > _2505) || ((_2500 < _2503) || ((_2499 < _2503) || (_2499 > _2505))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2700 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2501, cbModelParam._m0[17u].z, fma(_2500, cbModelParam._m0[17u].y, _2499 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2501, cbModelParam._m0[18u].z, fma(_2500, cbModelParam._m0[18u].y, _2499 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2501, cbModelParam._m0[19u].z, fma(_2500, cbModelParam._m0[19u].y, _2499 * cbModelParam._m0[19u].x))), _1792);
            frontier_phi_22_46_ladder = _2700.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2700.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2700.x * cbModelParam._m0[1u].z;
        }
        _1882 = frontier_phi_22_46_ladder_2;
        _1884 = frontier_phi_22_46_ladder_1;
        _1886 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_892, _893, _894), _1792);
        _1882 = _1866.x * cbModelParam._m0[1u].z;
        _1884 = _1866.y * cbModelParam._m0[1u].z;
        _1886 = _1866.z * cbModelParam._m0[1u].z;
    }
    float _1899 = (((_918 * _868) + _919) * _884) * ((cbModelParam._m0[1u].w * (_1882 - _1783)) + _1783);
    float _1901 = (((_918 * _870) + _919) * _884) * ((cbModelParam._m0[1u].w * (_1884 - _1785)) + _1785);
    float _1903 = (((_918 * _871) + _919) * _884) * ((cbModelParam._m0[1u].w * (_1886 - _1787)) + _1787);
    float _1906 = fma(_1903, cbSceneParam._m0[89u].z, fma(_1901, cbSceneParam._m0[89u].y, _1899 * cbSceneParam._m0[89u].x));
    float _1909 = fma(_1903, cbSceneParam._m0[90u].z, fma(_1901, cbSceneParam._m0[90u].y, _1899 * cbSceneParam._m0[90u].x));
    float _1912 = fma(_1903, cbSceneParam._m0[91u].z, fma(_1901, cbSceneParam._m0[91u].y, _1899 * cbSceneParam._m0[91u].x));
    uvec4 _1922 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1924 = _1922.x * 14u;
    uint _1925 = _1924 + 13u;
    float _1932 = _884 + (-1.0);
    float _1937 = (cbLight._m0[_1925].x * _1932) + 1.0;
    float _1938 = (cbLight._m0[_1925].y * _1932) + 1.0;
    float _1939 = (cbLight._m0[_1925].z * _1932) + 1.0;
    float _1940 = (cbLight._m0[_1925].w * _1932) + 1.0;
    uint _1941 = _1924 + 5u;
    float _1947 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
    uint _1951 = _1924 + 4u;
    float _1957 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
    uint _1961 = _1924 | 1u;
    float _1972 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_719, _720, _721));
    float _1975 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_719, _720, _721));
    float _4126 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _4137 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1980 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * 0.3183098733425140380859375;
    float _1982 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * 0.3183098733425140380859375;
    float _1989 = ((cbLight._m0[_1941].x * _1947) * _1982) + ((cbLight._m0[_1951].x * _1957) * _1980);
    float _1990 = ((_1947 * cbLight._m0[_1941].y) * _1982) + ((_1957 * cbLight._m0[_1951].y) * _1980);
    float _1991 = ((_1947 * cbLight._m0[_1941].z) * _1982) + ((_1957 * cbLight._m0[_1951].z) * _1980);
    uvec4 _1995 = floatBitsToUint(cbLight._m0[_1924 + 12u]);
    bool _1997 = _1995.x == 0u;
    float _2008;
    float _2010;
    float _2012;
    if (_1997)
    {
        _2008 = _1989;
        _2010 = _1990;
        _2012 = _1991;
    }
    else
    {
        uint _2016 = _1924 + 6u;
        float _2032 = (dot(vec3(cbLight._m0[_1924 + 2u].xyz), vec3(_719, _720, _721)) * 0.5) + 0.5;
        float _2033 = _2032 * _2032;
        float _4148 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2034 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2035 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2008 = (((cbLight._m0[_2016].x * 0.3183098733425140380859375) * _2034) * _2035) + _1989;
        _2010 = (((cbLight._m0[_2016].y * 0.3183098733425140380859375) * _2034) * _2035) + _1990;
        _2012 = (((cbLight._m0[_2016].z * 0.3183098733425140380859375) * _2034) * _2035) + _1991;
    }
    bool _2015 = _1995.y == 0u;
    float _2053;
    float _2055;
    float _2057;
    if (_2015)
    {
        _2053 = _2008;
        _2055 = _2010;
        _2057 = _2012;
    }
    else
    {
        uint _2223 = _1924 + 7u;
        float _2239 = (dot(vec3(cbLight._m0[_1924 + 3u].xyz), vec3(_719, _720, _721)) * 0.5) + 0.5;
        float _2240 = _2239 * _2239;
        float _4164 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2241 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2242 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
        _2053 = (((cbLight._m0[_2223].x * 0.3183098733425140380859375) * _2241) * _2242) + _2008;
        _2055 = (((cbLight._m0[_2223].y * 0.3183098733425140380859375) * _2241) * _2242) + _2010;
        _2057 = (((cbLight._m0[_2223].z * 0.3183098733425140380859375) * _2241) * _2242) + _2012;
    }
    uint _2060 = _1924 + 8u;
    float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1924].w)) * _722) * 0.949999988079071044921875);
    float _2074 = _2073 * _2073;
    float _2075 = cbLight._m0[_1924].x + _798;
    float _2076 = cbLight._m0[_1924].y + _799;
    float _2077 = cbLight._m0[_1924].z + _800;
    float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
    float _2082 = _2081 * _2075;
    float _2083 = _2081 * _2076;
    float _2084 = _2081 * _2077;
    float _2085 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_1924].xyz));
    float _4180 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _4191 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _2089 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _2090 = dot(vec3(_719, _720, _721), vec3(_2082, _2083, _2084));
    float _4202 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_2082, _2083, _2084));
    float _4213 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = _2074 * _2074;
    float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
    float _2110 = exp2(log2(1.0 - (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * 5.0);
    float _2111 = 0.959999978542327880859375 - _865;
    float _2113 = 0.959999978542327880859375 - _866;
    float _2114 = 0.959999978542327880859375 - _867;
    float _2121 = 1.0 - _2074;
    float _2132 = (0.5 / (((_2089 * ((_2088 * _2121) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2121) + _2074) * _2088))) * _2088;
    float _4224 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2134 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
    uint _2145 = _1924 + 9u;
    float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _722) * 0.949999988079071044921875);
    float _2157 = _2156 * _2156;
    float _2158 = cbLight._m0[_1961].x + _798;
    float _2159 = cbLight._m0[_1961].y + _799;
    float _2160 = cbLight._m0[_1961].z + _800;
    float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
    float _2165 = _2164 * _2158;
    float _2166 = _2164 * _2159;
    float _2167 = _2164 * _2160;
    float _2168 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_1961].xyz));
    float _4235 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _2172 = dot(vec3(_719, _720, _721), vec3(_2165, _2166, _2167));
    float _4246 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_2165, _2166, _2167));
    float _4257 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2157 * _2157;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * 5.0);
    float _2198 = 1.0 - _2157;
    float _2208 = (0.5 / (((_2089 * ((_2171 * _2198) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2198) + _2157) * _2171))) * _2171;
    float _4268 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    float _2220 = (((((_2191 * _2111) + _868) * cbLight._m0[_2145].x) * _2210) * _1947) + (((((_2110 * _2111) + _868) * cbLight._m0[_2060].x) * _2134) * _1957);
    float _2221 = (((((_2191 * _2113) + _870) * cbLight._m0[_2145].y) * _2210) * _1947) + (((((_2110 * _2113) + _870) * cbLight._m0[_2060].y) * _2134) * _1957);
    float _2222 = (((((_2191 * _2114) + _871) * cbLight._m0[_2145].z) * _2210) * _1947) + (((((_2110 * _2114) + _871) * cbLight._m0[_2060].z) * _2134) * _1957);
    float _2284;
    float _2286;
    float _2288;
    if (_1997)
    {
        _2284 = _2220;
        _2286 = _2221;
        _2288 = _2222;
    }
    else
    {
        uint _2290 = _1924 + 2u;
        uint _2294 = _1924 + 10u;
        float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _722) * 0.949999988079071044921875);
        float _2309 = _2308 * _2308;
        float _2310 = cbLight._m0[_2290].x + _798;
        float _2311 = cbLight._m0[_2290].y + _799;
        float _2312 = cbLight._m0[_2290].z + _800;
        float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
        float _2317 = _2316 * _2310;
        float _2318 = _2316 * _2311;
        float _2319 = _2316 * _2312;
        float _2320 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2290].xyz));
        float _4279 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2323 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2324 = dot(vec3(_719, _720, _721), vec3(_2317, _2318, _2319));
        float _4290 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2328 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2317, _2318, _2319));
        float _4301 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2332 = _2309 * _2309;
        float _2336 = ((_2327 * _2327) * (_2332 + (-1.0))) + 1.0;
        float _2343 = exp2(log2(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * 5.0);
        float _2350 = 1.0 - _2309;
        float _2360 = (0.5 / (((_2089 * ((_2323 * _2350) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2350) + _2309) * _2323))) * _2323;
        float _4312 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2362 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2332 / ((_2336 * _2336) * 3.141590118408203125));
        float _2363 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2284 = (((((_2343 * _2111) + _868) * cbLight._m0[_2294].x) * _2362) * _2363) + _2220;
        _2286 = (((((_2343 * _2113) + _870) * cbLight._m0[_2294].y) * _2362) * _2363) + _2221;
        _2288 = (((((_2343 * _2114) + _871) * cbLight._m0[_2294].z) * _2362) * _2363) + _2222;
    }
    float _2398;
    float _2400;
    float _2402;
    if (_2015)
    {
        _2398 = _2284;
        _2400 = _2286;
        _2402 = _2288;
    }
    else
    {
        uint _2409 = _1924 + 3u;
        uint _2413 = _1924 + 11u;
        float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _722) * 0.949999988079071044921875);
        float _2428 = _2427 * _2427;
        float _2429 = cbLight._m0[_2409].x + _798;
        float _2430 = cbLight._m0[_2409].y + _799;
        float _2431 = cbLight._m0[_2409].z + _800;
        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
        float _2436 = _2435 * _2429;
        float _2437 = _2435 * _2430;
        float _2438 = _2435 * _2431;
        float _2439 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2409].xyz));
        float _4328 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2443 = dot(vec3(_719, _720, _721), vec3(_2436, _2437, _2438));
        float _4339 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2447 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2436, _2437, _2438));
        float _4350 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2451 = _2428 * _2428;
        float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
        float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) * 5.0);
        float _2469 = 1.0 - _2428;
        float _2479 = (0.5 / (((_2089 * ((_2442 * _2469) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2469) + _2428) * _2442))) * _2442;
        float _4361 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2481 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
        float _2482 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
        _2398 = (((((_2462 * _2111) + _868) * cbLight._m0[_2413].x) * _2481) * _2482) + _2284;
        _2400 = (((((_2462 * _2113) + _870) * cbLight._m0[_2413].y) * _2481) * _2482) + _2286;
        _2402 = (((((_2462 * _2114) + _871) * cbLight._m0[_2413].z) * _2481) * _2482) + _2288;
    }
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    if (_1922.y == 0u)
    {
        float _2557 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2558 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2557;
        float _2559 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2557;
        float _2560 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2557;
        uvec4 _2572 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2573 = _2572.x;
        uint _2584 = uint((float(_2572.y) * floor(float(uint(cbSceneParam._m0[85u].y * _807) / _2573))) + floor(float(uint(cbSceneParam._m0[85u].x * _806) / _2573)));
        float _2594 = (log2(_2560 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2595 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        uint _2598 = uint(isnan(14.0) ? _2595 : (isnan(_2595) ? 14.0 : min(_2595, 14.0)));
        uvec4 _2603 = texelFetch(g_lightClusterGridBuffer, int(((_2598 << 2u) + (_2584 << 6u)) >> 2u));
        uint _2604 = _2603.x;
        uint _2605 = _2572.z;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        if (((((1u << ((_2605 >> 4u) & 15u)) + 4294967295u) & _2604) == 0u) || ((_2605 & 240u) == 0u))
        {
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
        }
        else
        {
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            uint _2856 = 0u;
            uint _2865;
            bool _2866;
            for (;;)
            {
                _2865 = texelFetch(g_lightClassification, int((((_2598 << 5u) + (_2584 << 9u)) + (_2856 << 2u)) >> 2u)).x;
                _2866 = _2865 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2866)
                {
                    frontier_phi_61_pred = _2850;
                    frontier_phi_61_pred_1 = _2855;
                    frontier_phi_61_pred_2 = _2854;
                    frontier_phi_61_pred_3 = _2853;
                    frontier_phi_61_pred_4 = _2852;
                    frontier_phi_61_pred_5 = _2851;
                }
                else
                {
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    uint _2980;
                    _2974 = _2850;
                    _2975 = _2851;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2854;
                    _2979 = _2855;
                    _2980 = _2865;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    for (;;)
                    {
                        uint _2984 = uint(findLSB(_2980)) + (_2856 << 5u);
                        uint _2981 = (_2980 + 4294967295u) & _2980;
                        uint _2986 = _2984 * 48u;
                        vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 3u)).x));
                        uint _3006 = (_2984 * 48u) + 4u;
                        vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 3u)).x));
                        uint _3025 = (_2984 * 48u) + 8u;
                        vec3 _3036 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3025)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 2u)).x));
                        float _3040 = _3000.x - _2558;
                        float _3041 = _3000.y - _2559;
                        float _3042 = _3000.z - _2560;
                        float _3043 = dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042));
                        float _3046 = inversesqrt(_3043);
                        float _3047 = _3046 * _3040;
                        float _3048 = _3046 * _3041;
                        float _3049 = _3046 * _3042;
                        float _3050 = dot(vec3(_825, _828, _831), vec3(_3047, _3048, _3049));
                        float _3055 = 1.0 - (_3043 * _3000.w);
                        float _4387 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3056 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3057 = sqrt(_3043) * _3019.w;
                        float _3060 = 1.39999997615814208984375 / (_3057 + 1.39999997615814208984375);
                        float _3061 = _3060 * _3060;
                        float _3064 = ((1.0 - _3061) * _3050) + _3061;
                        float _3067 = _3057 * _3057;
                        float _3071 = ((isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))) * _3056) / ((_3067 * 0.699999988079071044921875) + 1.0);
                        float _3075 = (-0.0) - _2558;
                        float _3076 = (-0.0) - _2559;
                        float _3077 = (-0.0) - _2560;
                        float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                        float _3082 = _3081 * _3075;
                        float _3083 = _3081 * _3076;
                        float _3084 = _3081 * _3077;
                        float _3092 = exp2(log2(1.0 / ((_3067 * 3.5) + 5.0)) * 0.25);
                        float _3093 = 1.0 - _900;
                        float _3100 = sqrt(1.0 - ((1.0 - (_3093 * _3093)) * (1.0 - (_3092 * _3092))));
                        float _3101 = _3100 * _3100;
                        float _3102 = _3101 * _3101;
                        float _3103 = _3082 + _3047;
                        float _3104 = _3083 + _3048;
                        float _3105 = _3084 + _3049;
                        float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                        float _3113 = dot(vec3(_825, _828, _831), vec3(_3082, _3083, _3084));
                        float _4403 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3116 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                        float _3117 = dot(vec3(_825, _828, _831), vec3(_3109 * _3103, _3109 * _3104, _3109 * _3105));
                        float _4414 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3120 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3124 = ((_3120 * _3120) * (_3102 + (-1.0))) + 1.0;
                        float _3125 = _3060 * _3101;
                        float _3126 = _3125 * _3125;
                        float _3129 = ((1.0 - _3126) * _3050) + _3126;
                        float _4425 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3131 = 1.0 - _3101;
                        float _3141 = (0.5 / (((_3130 * ((_3116 * _3131) + _3101)) + 9.9999999392252902907785028219223e-09) + (((_3130 * _3131) + _3101) * _3116))) * _3130;
                        float _4436 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3151 = (((_3102 * 3.1415927410125732421875) * (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) / ((_3124 * _3124) * ((_3067 * 2.1991131305694580078125) + 3.141590118408203125))) * _3056;
                        _2909 = (_3071 * _3019.x) + _2977;
                        _2910 = (_3071 * _3019.y) + _2978;
                        _2911 = (_3071 * _3019.z) + _2979;
                        _2906 = (_3151 * _3036.x) + _2974;
                        _2907 = (_3151 * _3036.y) + _2975;
                        _2908 = (_3151 * _3036.z) + _2976;
                        if (_2981 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2974 = _2906;
                            _2975 = _2907;
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2910;
                            _2979 = _2911;
                            _2980 = _2981;
                        }
                    }
                    frontier_phi_61_pred = _2906;
                    frontier_phi_61_pred_1 = _2911;
                    frontier_phi_61_pred_2 = _2910;
                    frontier_phi_61_pred_3 = _2909;
                    frontier_phi_61_pred_4 = _2908;
                    frontier_phi_61_pred_5 = _2907;
                }
                _2706 = frontier_phi_61_pred;
                _2716 = frontier_phi_61_pred_1;
                _2714 = frontier_phi_61_pred_2;
                _2712 = frontier_phi_61_pred_3;
                _2710 = frontier_phi_61_pred_4;
                _2708 = frontier_phi_61_pred_5;
                uint _2857 = _2856 + 1u;
                if (_2857 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2850 = _2706;
                    _2851 = _2708;
                    _2852 = _2710;
                    _2853 = _2712;
                    _2854 = _2714;
                    _2855 = _2716;
                    _2856 = _2857;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
        }
        uvec4 _2719 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2720 = _2719.z;
        uint _2722 = (_2720 >> 8u) & 15u;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        if (((4294967295u << _2722) & _2604) == 0u)
        {
            _2818 = _2705;
            _2820 = _2707;
            _2822 = _2709;
            _2824 = _2711;
            _2826 = _2713;
            _2828 = _2715;
        }
        else
        {
            float _2843 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
            float _2844 = _2843 * _2558;
            float _2845 = _2843 * _2559;
            float _2846 = _2843 * _2560;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2722 < ((_2720 >> 12u) & 15u))
            {
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2957 = _2705;
                float _2958 = _2707;
                float _2959 = _2709;
                float _2960 = _2711;
                float _2961 = _2713;
                float _2962 = _2715;
                uint _2963 = _2722;
                uint _2972;
                bool _2973;
                for (;;)
                {
                    _2972 = texelFetch(g_lightClassification, int((((_2598 << 5u) + (_2584 << 9u)) + (_2963 << 2u)) >> 2u)).x;
                    _2973 = _2972 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2973)
                    {
                        frontier_phi_67_pred = _2960;
                        frontier_phi_67_pred_1 = _2961;
                        frontier_phi_67_pred_2 = _2962;
                        frontier_phi_67_pred_3 = _2959;
                        frontier_phi_67_pred_4 = _2958;
                        frontier_phi_67_pred_5 = _2957;
                    }
                    else
                    {
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3169 = _2957;
                        float _3170 = _2958;
                        float _3171 = _2959;
                        float _3172 = _2960;
                        float _3173 = _2961;
                        float _3174 = _2962;
                        uint _3175 = _2972;
                        uint _3176;
                        vec4 _3201;
                        float _3202;
                        vec4 _3217;
                        vec3 _3229;
                        vec4 _3244;
                        vec4 _3260;
                        float _3306;
                        bool _3307;
                        for (;;)
                        {
                            uint _3186 = ((_2963 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3175));
                            _3176 = (_3175 + 4294967295u) & _3175;
                            uint _3188 = _3186 * 40u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            _3202 = _3201.w;
                            uint _3204 = (_3186 * 40u) + 4u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3219 = (_3186 * 40u) + 8u;
                            _3229 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x));
                            uint _3231 = (_3186 * 40u) + 16u;
                            _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3247 = (_3186 * 40u) + 20u;
                            _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3262 = (_3186 * 40u) + 24u;
                            vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3281 = (_3186 * 40u) + 28u;
                            vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            _3306 = fma(_2560, _3294.z, fma(_2559, _3294.y, _3294.x * _2558)) + _3294.w;
                            _3307 = !((fma(_2560, _3275.z, fma(_2559, _3275.y, _3275.x * _2558)) + _3275.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3307)
                            {
                                float _3334 = _3201.x - _2558;
                                float _3335 = _3201.y - _2559;
                                float _3336 = _3201.z - _2560;
                                float _3337 = dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336));
                                float _3340 = inversesqrt(_3337);
                                float _3341 = _3340 * _3334;
                                float _3342 = _3340 * _3335;
                                float _3343 = _3340 * _3336;
                                float _3347 = 1.0 - (_3337 / (_3202 * _3202));
                                float _4447 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3348 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3352 = sqrt(_3337) * _3217.w;
                                float _3354 = 1.39999997615814208984375 / (_3352 + 1.39999997615814208984375);
                                float _3355 = _3354 * _3354;
                                float _3358 = ((1.0 - _3355) * dot(vec3(_3341, _3342, _3343), vec3(_825, _828, _831))) + _3355;
                                float _3361 = _3352 * _3352;
                                float _3365 = (fma(_2560, _3244.z, fma(_2559, _3244.y, _3244.x * _2558)) + _3244.w) / _3306;
                                float _3366 = (fma(_2560, _3260.z, fma(_2559, _3260.y, _3260.x * _2558)) + _3260.w) / _3306;
                                float _3370 = 1.0 - dot(vec2(_3365, _3366), vec2(_3365, _3366));
                                float _4463 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3372 = _3371 * (((isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0))) * _3348) / ((_3361 * 0.699999988079071044921875) + 1.0));
                                float _3384 = exp2(log2(1.0 / ((_3361 * 3.5) + 5.0)) * 0.25);
                                float _3385 = 1.0 - _900;
                                float _3392 = sqrt(1.0 - ((1.0 - (_3385 * _3385)) * (1.0 - (_3384 * _3384))));
                                float _3393 = _3392 * _3392;
                                float _3394 = _3393 * _3393;
                                float _3395 = _3341 - _2844;
                                float _3396 = _3342 - _2845;
                                float _3397 = _3343 - _2846;
                                float _3401 = inversesqrt(dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397)));
                                float _3405 = dot(vec3(_825, _828, _831), vec3((-0.0) - _2844, (-0.0) - _2845, (-0.0) - _2846));
                                float _4474 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3408 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3409 = dot(vec3(_825, _828, _831), vec3(_3401 * _3395, _3401 * _3396, _3401 * _3397));
                                float _4485 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3412 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3416 = ((_3412 * _3412) * (_3394 + (-1.0))) + 1.0;
                                float _3417 = _3354 * _3393;
                                float _3418 = _3417 * _3417;
                                float _3424 = ((1.0 - _3418) * dot(vec3(_825, _828, _831), vec3(_3341, _3342, _3343))) + _3418;
                                float _4496 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3425 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3426 = 1.0 - _3393;
                                float _3436 = (0.5 / (((_3425 * ((_3408 * _3426) + _3393)) + 9.9999999392252902907785028219223e-09) + (((_3425 * _3426) + _3393) * _3408))) * _3425;
                                float _4507 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3446 = (_3371 * _3348) * (((_3394 * 3.1415927410125732421875) * (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) / ((_3416 * _3416) * ((_3361 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3446 * _3229.x;
                                frontier_phi_73_pred_1 = _3446 * _3229.y;
                                frontier_phi_73_pred_2 = _3372 * _3217.z;
                                frontier_phi_73_pred_3 = _3372 * _3217.y;
                                frontier_phi_73_pred_4 = _3372 * _3217.x;
                                frontier_phi_73_pred_5 = _3446 * _3229.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3450 = frontier_phi_73_pred;
                            _3451 = frontier_phi_73_pred_1;
                            _3455 = frontier_phi_73_pred_2;
                            _3454 = frontier_phi_73_pred_3;
                            _3453 = frontier_phi_73_pred_4;
                            _3452 = frontier_phi_73_pred_5;
                            _3159 = _3453 + _3172;
                            _3160 = _3454 + _3173;
                            _3161 = _3455 + _3174;
                            _3156 = _3450 + _3169;
                            _3157 = _3451 + _3170;
                            _3158 = _3452 + _3171;
                            if (_3176 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3176;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3159;
                        frontier_phi_67_pred_1 = _3160;
                        frontier_phi_67_pred_2 = _3161;
                        frontier_phi_67_pred_3 = _3158;
                        frontier_phi_67_pred_4 = _3157;
                        frontier_phi_67_pred_5 = _3156;
                    }
                    _2825 = frontier_phi_67_pred;
                    _2827 = frontier_phi_67_pred_1;
                    _2829 = frontier_phi_67_pred_2;
                    _2823 = frontier_phi_67_pred_3;
                    _2821 = frontier_phi_67_pred_4;
                    _2819 = frontier_phi_67_pred_5;
                    uint _2964 = _2963 + 1u;
                    if (_2964 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2957 = _2819;
                        _2958 = _2821;
                        _2959 = _2823;
                        _2960 = _2825;
                        _2961 = _2827;
                        _2962 = _2829;
                        _2963 = _2964;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2827;
                frontier_phi_55_56_ladder_1 = _2829;
                frontier_phi_55_56_ladder_2 = _2825;
                frontier_phi_55_56_ladder_3 = _2823;
                frontier_phi_55_56_ladder_4 = _2821;
                frontier_phi_55_56_ladder_5 = _2819;
            }
            else
            {
                frontier_phi_55_56_ladder = _2713;
                frontier_phi_55_56_ladder_1 = _2715;
                frontier_phi_55_56_ladder_2 = _2711;
                frontier_phi_55_56_ladder_3 = _2709;
                frontier_phi_55_56_ladder_4 = _2707;
                frontier_phi_55_56_ladder_5 = _2705;
            }
            _2818 = frontier_phi_55_56_ladder_5;
            _2820 = frontier_phi_55_56_ladder_4;
            _2822 = frontier_phi_55_56_ladder_3;
            _2824 = frontier_phi_55_56_ladder_2;
            _2826 = frontier_phi_55_56_ladder;
            _2828 = frontier_phi_55_56_ladder_1;
        }
        float _2833 = isnan(1.0) ? _884 : (isnan(_884) ? 1.0 : min(_884, 1.0));
        _2617 = (_2833 * _2824) + _2053;
        _2619 = (_2833 * _2826) + _2055;
        _2621 = (_2833 * _2828) + _2057;
        _2623 = ((_2818 * _868) * _2833) + _2398;
        _2625 = ((_2820 * _870) * _2833) + _2400;
        _2627 = ((_2822 * _871) * _2833) + _2402;
    }
    else
    {
        _2617 = _2053;
        _2619 = _2055;
        _2621 = _2057;
        _2623 = _2398;
        _2625 = _2400;
        _2627 = _2402;
    }
    float _4523 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4534 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4545 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    uint _2647 = _245 + 6u;
    float _2655 = _806 / cbSceneParam._m0[86u].x;
    float _2656 = _807 / cbSceneParam._m0[86u].y;
    vec4 _2670 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, (log2((isnan(cbSceneParam._m0[77u].w) ? _741 : (isnan(_741) ? cbSceneParam._m0[77u].w : min(_741, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2672 = _2670.x;
    float _2673 = _2670.y;
    float _2674 = _2670.z;
    float _2675 = _2670.w;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    if (_741 > cbSceneParam._m0[78u].w)
    {
        float _2730 = isnan(_741) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _741 : min(cbSceneParam._m0[80u].w, _741));
        float _2731 = _2730 / _741;
        float _2742 = _2731 * _791;
        float _2743 = _792 * _2731;
        float _2744 = (-0.0) - _2743;
        float _2746 = _2731 * _793;
        float _2748 = (cbSceneParam._m0[77u].w * _2744) / _2730;
        float _2749 = _2748 + cbSceneParam._m0[79u].w;
        float _2750 = cbSceneParam._m0[79u].w - _2743;
        float _2756 = sqrt(((_2742 * _2742) + (_2743 * _2743)) + (_2746 * _2746));
        float _2759 = (1.0 - (cbSceneParam._m0[77u].w / _2730)) * _2756;
        float _2764 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2766 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2919;
        if (abs((_2744 - _2748) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2919 = ((((_2749 > 0.0) ? exp2(_2764 * _2749) : (2.0 - exp2(_2766 * _2749))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2759;
        }
        else
        {
            float _2879 = 1.0 / cbSceneParam._m0[80u].x;
            float _2880 = isnan(_2750) ? _2749 : (isnan(_2749) ? _2750 : max(_2749, _2750));
            float _2881 = isnan(_2750) ? _2749 : (isnan(_2749) ? _2750 : min(_2749, _2750));
            float _2890 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : min(_2880, 0.0));
            float _2891 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : min(_2881, 0.0));
            _2919 = ((abs(_2756 / _2744) * cbSceneParam._m0[80u].y) * ((((_2890 - _2891) * 2.0) - ((exp2(_2764 * (isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0)))) - exp2(_2764 * (isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0))))) * _2879)) - ((exp2(_2766 * _2890) - exp2(_2766 * _2891)) * _2879))) + (_2759 * cbSceneParam._m0[80u].z);
        }
        vec4 _2921 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, 1.0), 0.0);
        float _2930 = exp2((_2919 * (-1.44269502162933349609375)) * (1.0 - _2921.w));
        float _2931 = log2(_2930);
        float _2947 = log2(_2675);
        _2768 = (exp2(_2947 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].x)) * _2921.x) / cbSceneParam._m0[78u].x)) + _2672;
        _2770 = (exp2(_2947 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].y)) * _2921.y) / cbSceneParam._m0[78u].y)) + _2673;
        _2772 = (exp2(_2947 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].z)) * _2921.z) / cbSceneParam._m0[78u].z)) + _2674;
        _2774 = _2930 * _2675;
    }
    else
    {
        _2768 = _2672;
        _2770 = _2673;
        _2772 = _2674;
        _2774 = _2675;
    }
    float _2786 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2787 = _2786 == 3.0;
    float _2788 = log2(_2774);
    float _2795 = exp2(_2788 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2617 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _884))) + ((_2623 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1690)) * cbPerFrame._m0[3u].x));
    float _2796 = exp2(_2788 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2619 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _884))) + ((_2625 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1690)) * cbPerFrame._m0[3u].x));
    float _2797 = exp2(_2788 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2621 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _884))) + ((_2627 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1690)) * cbPerFrame._m0[3u].x));
    float _2806 = (_2786 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2806 * (_2787 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2768)));
    SV_Target.y = _2806 * (_2787 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2770)));
    SV_Target.z = _2806 * (_2787 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2772)));
    SV_Target.w = cbInstanceData._m0[_2647].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2647].w;
}


