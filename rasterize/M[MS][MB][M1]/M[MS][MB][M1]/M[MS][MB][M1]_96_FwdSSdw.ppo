#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1169;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _354 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _371 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _354) * cbMtdParam._m0[24u].y) + _354) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3521 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _379 = (_372 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _380 = (_372 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _381 = (_372 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _399 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _429 = ((_399.z - _420) * _372) + _420;
    float _432 = ((((_399.x - _418) * _372) + _418) * 2.0) + (-1.0);
    float _434 = ((((_399.y - _419) * _372) + _419) * 2.0) + (-1.0);
    float _435 = dot(vec2(_432, _434), vec2(_432, _434));
    float _3532 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _440 = sqrt(1.0 - (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))));
    float _443 = fma(_440, _222, fma(_434, _229, _432 * _215));
    float _446 = fma(_440, _223, fma(_434, _230, _432 * _216));
    float _449 = fma(_440, _224, fma(_434, _231, _432 * _217));
    float _453 = inversesqrt(dot(vec3(_443, _446, _449), vec3(_443, _446, _449)));
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _497 = _495.x;
    float _498 = 1.0 - _497;
    float _504 = (cbMtdParam._m0[19u].x + dot(vec4(_453 * _443, _453 * _446, _453 * _449, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_497 - _498) * cbMtdParam._m0[24u].z) + _498) * cbMtdParam._m0[21u].z);
    float _3543 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _512 = (_505 * (cbMtdParam._m0[17u].x - _379)) + _379;
    float _513 = (_505 * (cbMtdParam._m0[17u].y - _380)) + _380;
    float _514 = (_505 * (cbMtdParam._m0[17u].z - _381)) + _381;
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _540 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _542 = _540.x;
    float _560 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _254) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _255) + cbTextureTilingScale._m0[9u].w)).x - _542) * _372) + _542;
    float _564 = ((_526.x - _560) * cbMtdParam._m0[19u].z) + _560;
    float _566 = _564 - (_564 * _505);
    vec4 _579 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _586 = (_579.x * 2.0) + (-1.0);
    float _587 = (_579.y * 2.0) + (-1.0);
    float _588 = dot(vec2(_586, _587), vec2(_586, _587));
    float _3554 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _596 = ((_579.z - _429) * _505) + _429;
    float _606 = ((sqrt(1.0 - (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) - _440) * _505) + _440;
    float _609 = (((_586 - _432) * _505) + _432) + (cbMtdParam._m0[21u].x * _432);
    float _610 = (((_587 - _434) * _505) + _434) + (cbMtdParam._m0[21u].x * _434);
    float _615 = cbMtdParam._m0[22u].x + _469.w;
    float _618 = fma(_606, _222, fma(_610, _229, _609 * _215));
    float _621 = fma(_606, _223, fma(_610, _230, _609 * _216));
    float _624 = fma(_606, _224, fma(_610, _231, _609 * _217));
    float _628 = inversesqrt(dot(vec3(_618, _621, _624), vec3(_618, _621, _624)));
    float _629 = _628 * _618;
    float _630 = _628 * _621;
    float _631 = _628 * _624;
    float _3565 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _632 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3587 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3598 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3609 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3620 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _637 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _651 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _702 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _692);
    float _703 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _692);
    float _704 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _692);
    float _708 = inversesqrt(dot(vec3(_702, _703, _704), vec3(_702, _703, _704)));
    float _709 = _702 * _708;
    float _710 = _703 * _708;
    float _711 = _704 * _708;
    float _717 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _718 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _736 = fma(_631, cbSceneParam._m0[5u].z, fma(_630, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _629));
    float _739 = fma(_631, cbSceneParam._m0[6u].z, fma(_630, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _629));
    float _742 = fma(_631, cbSceneParam._m0[7u].z, fma(_630, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _629));
    uint _756 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _762 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_756].x;
    float _763 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_756].y;
    float _764 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_756].z;
    float _3631 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _768 = 1.0 - _637;
    float _769 = _765 * _768;
    float _770 = _766 * _768;
    float _771 = _767 * _768;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _637;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _637;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _637;
    float _779 = _776 + 0.039999999105930328369140625;
    float _781 = _777 + 0.039999999105930328369140625;
    float _782 = _778 + 0.039999999105930328369140625;
    vec4 _791 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718));
    float _795 = ((isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * TEXCOORD_5.w) * _791.x;
    float _796 = dot(vec3(_629, _630, _631), vec3(_709, _710, _711));
    float _799 = _796 * 2.0;
    float _803 = (_799 * _629) - _709;
    float _804 = (_799 * _630) - _710;
    float _805 = (_799 * _631) - _711;
    float _809 = abs(dot(vec3(_709, _710, _711), vec3(_629, _630, _631)));
    float _3664 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _811 = sqrt(_632);
    float _824 = exp2((_811 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_811 * 3.0));
    float _830 = (1.0 - _824) * ((_811 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _831 = _824 * _811;
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1168;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _893 = fma(_867, cbModelParam._m0[26u].z, fma(_863, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859));
        float _897 = fma(_867, cbModelParam._m0[27u].z, fma(_863, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859));
        float _901 = fma(_867, cbModelParam._m0[28u].z, fma(_863, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859));
        float _926 = _859 + _629;
        float _927 = _863 + _630;
        float _928 = _867 + _631;
        float _938 = fma(_928, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926)) - _893;
        float _939 = fma(_928, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926)) - _897;
        float _940 = fma(_928, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926)) - _901;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_893 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_897 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[34u].z) + ((((((_901 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _996 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_962.x + (-0.5));
        float _998 = _996 * (_962.y + (-0.5));
        float _999 = _996 * (_962.z + (-0.5));
        float _1006 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_969.x + (-0.5));
        float _1008 = _1006 * (_969.y + (-0.5));
        float _1009 = _1006 * (_969.z + (-0.5));
        float _1016 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_976.x + (-0.5));
        float _1018 = _1016 * (_976.y + (-0.5));
        float _1019 = _1016 * (_976.z + (-0.5));
        float _1026 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_983.x + (-0.5));
        float _1028 = _1026 * (_983.y + (-0.5));
        float _1029 = _1026 * (_983.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1050 = (dot(vec3(_629, _630, _631), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1060 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3712 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1062 + 1.0))) + _1067) * _1030;
        float _1077 = _998 * 0.5;
        float _1078 = _1008 * 0.5;
        float _1079 = _1018 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_629, _630, _631), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3745 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1104 + 1.0))) + _1109) * _1031;
        float _1119 = _999 * 0.5;
        float _1120 = _1009 * 0.5;
        float _1121 = _1019 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_629, _630, _631), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3778 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1146 + 1.0))) + _1151) * _1032;
        _1168 = _999;
        _1170 = _998;
        _1171 = _997;
        _1172 = _1009;
        _1173 = _1008;
        _1174 = _1007;
        _1175 = _1019;
        _1176 = _1018;
        _1177 = _1017;
        _1178 = _1032;
        _1179 = _1031;
        _1180 = _1030;
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _1169;
        _1170 = _1169;
        _1171 = _1169;
        _1172 = _1169;
        _1173 = _1169;
        _1174 = _1169;
        _1175 = _1169;
        _1176 = _1169;
        _1177 = _1169;
        _1178 = _1169;
        _1179 = _1169;
        _1180 = _1169;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1208 = fma(_867, cbModelParam._m0[30u].z, fma(_863, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _859));
        float _1212 = fma(_867, cbModelParam._m0[31u].z, fma(_863, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _859));
        float _1216 = fma(_867, cbModelParam._m0[32u].z, fma(_863, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _859));
        float _1239 = _859 + _629;
        float _1240 = _863 + _630;
        float _1241 = _867 + _631;
        float _1251 = fma(_1241, cbModelParam._m0[30u].z, fma(_1240, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1239)) - _1208;
        float _1252 = fma(_1241, cbModelParam._m0[31u].z, fma(_1240, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1239)) - _1212;
        float _1253 = fma(_1241, cbModelParam._m0[32u].z, fma(_1240, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1239)) - _1216;
        float _1257 = inversesqrt(dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253)));
        float _1270 = ((_1257 * _1251) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1208 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1257 * _1252) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1212 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1257 * _1253) / cbModelParam._m0[35u].z) + ((((((_1216 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        float _1307 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1274.x + (-0.5));
        float _1309 = _1307 * (_1274.y + (-0.5));
        float _1310 = _1307 * (_1274.z + (-0.5));
        float _1317 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1281.x + (-0.5));
        float _1319 = _1317 * (_1281.y + (-0.5));
        float _1320 = _1317 * (_1281.z + (-0.5));
        float _1327 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1288.x + (-0.5));
        float _1329 = _1327 * (_1288.y + (-0.5));
        float _1330 = _1327 * (_1288.z + (-0.5));
        float _1337 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1295.x + (-0.5));
        float _1339 = _1337 * (_1295.y + (-0.5));
        float _1340 = _1337 * (_1295.z + (-0.5));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = _1308 * 0.5;
        float _1345 = _1318 * 0.5;
        float _1346 = _1328 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_629, _630, _631), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3841 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1371 + 1.0))) + _1376) * _1341;
        float _1386 = _1309 * 0.5;
        float _1387 = _1319 * 0.5;
        float _1388 = _1329 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_629, _630, _631), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3874 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1413 + 1.0))) + _1418) * _1342;
        float _1428 = _1310 * 0.5;
        float _1429 = _1320 * 0.5;
        float _1430 = _1330 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_629, _630, _631), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _3907 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1455 + 1.0))) + _1460) * _1343;
        _1477 = _1310;
        _1478 = _1309;
        _1479 = _1308;
        _1480 = _1320;
        _1481 = _1319;
        _1482 = _1318;
        _1483 = _1330;
        _1484 = _1329;
        _1485 = _1328;
        _1486 = _1343;
        _1487 = _1342;
        _1488 = _1341;
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1169;
        _1478 = _1169;
        _1479 = _1169;
        _1480 = _1169;
        _1481 = _1169;
        _1482 = _1169;
        _1483 = _1169;
        _1484 = _1169;
        _1485 = _1169;
        _1486 = _1169;
        _1487 = _1169;
        _1488 = _1169;
        _1489 = 0.0;
        _1490 = 0.0;
        _1491 = 0.0;
    }
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1181)) + _1181;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1182)) + _1182;
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1183)) + _1183;
    float _1524 = fma(_1503, cbSceneParam._m0[89u].z, fma(_1502, cbSceneParam._m0[89u].y, _1501 * cbSceneParam._m0[89u].x));
    float _1527 = fma(_1503, cbSceneParam._m0[90u].z, fma(_1502, cbSceneParam._m0[90u].y, _1501 * cbSceneParam._m0[90u].x));
    float _1530 = fma(_1503, cbSceneParam._m0[91u].z, fma(_1502, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1501));
    float _1545 = _803 * 0.5;
    float _1546 = _804 * 0.5;
    float _1547 = _805 * 0.5;
    float _1548 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1551 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1554 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1588;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1561 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1168, _1172, _1175, _1178));
        float _1565 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1569 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1576 = dot(vec4(cbModelParam._m0[39u]), vec4(_1545, _1546, _1547, 1.0));
        _1588 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1576) ? 0.0 : (isnan(0.0) ? _1576 : max(0.0, _1576))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1588 = 1.0;
    }
    float _1599;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1590 = dot(vec4(cbModelParam._m0[40u]), vec4(_1545, _1546, _1547, 1.0));
        _1599 = dot(vec3(isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1590) ? 0.0 : (isnan(0.0) ? _1590 : max(0.0, _1590))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1599 = 1.0;
    }
    float _1603 = (_1599 * cbModelParam._m0[1u].x) + (_1588 * (1.0 - cbModelParam._m0[1u].x));
    float _1613 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _632);
    float _1614 = isnan(_1613) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1613 : min(cbModelParam._m0[25u].z, _1613));
    float _1695;
    float _1697;
    float _1699;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1662 = fma(_867, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859)) + cbModelParam._m0[13u].w;
        float _1666 = fma(_867, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859)) + cbModelParam._m0[14u].w;
        float _1670 = fma(_867, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859)) + cbModelParam._m0[15u].w;
        float _1673 = fma(_805, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803));
        float _1676 = fma(_805, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803));
        float _1679 = fma(_805, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803));
        float _1707;
        if (_1673 > 0.0)
        {
            _1707 = abs((1.0 - _1662) / _1673);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1662 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1707 = frontier_phi_14_12_ladder;
        }
        float _1931;
        if (_1676 > 0.0)
        {
            _1931 = abs((1.0 - _1666) / _1676);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1666 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1931 = frontier_phi_23_19_ladder;
        }
        float _2188;
        if (_1679 > 0.0)
        {
            _2188 = abs((1.0 - _1670) / _1679);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1670 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2188 = frontier_phi_35_30_ladder;
        }
        float _2190 = isnan(_1931) ? _1707 : (isnan(_1707) ? _1931 : min(_1707, _1931));
        float _2191 = isnan(_2188) ? _2190 : (isnan(_2190) ? _2188 : min(_2190, _2188));
        float _2195 = (_2191 * _1673) + _1662;
        float _2196 = (_2191 * _1676) + _1666;
        float _2197 = (_2191 * _1679) + _1670;
        float _2198 = _2191 * 9.9999997473787516355514526367188e-05;
        float _2200 = (-1.0) - _2198;
        float _2202 = _2198 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2197 > _2202) || ((_2197 < _2200) || ((_2196 > _2202) || ((_2196 < _2200) || ((_2195 < _2200) || (_2195 > _2202))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2325 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2197, cbModelParam._m0[9u].z, fma(_2196, cbModelParam._m0[9u].y, _2195 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2197, cbModelParam._m0[10u].z, fma(_2196, cbModelParam._m0[10u].y, _2195 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2197, cbModelParam._m0[11u].z, fma(_2196, cbModelParam._m0[11u].y, _2195 * cbModelParam._m0[11u].x))), _1614);
            frontier_phi_13_35_ladder = _2325.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2325.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2325.x * cbModelParam._m0[1u].y;
        }
        _1695 = frontier_phi_13_35_ladder_2;
        _1697 = frontier_phi_13_35_ladder_1;
        _1699 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1683 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_803, _804, _805), _1614);
        _1695 = _1683.x * cbModelParam._m0[1u].y;
        _1697 = _1683.y * cbModelParam._m0[1u].y;
        _1699 = _1683.z * cbModelParam._m0[1u].y;
    }
    float _1703 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _632);
    float _1704 = isnan(_1703) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1703 : min(cbModelParam._m0[25u].w, _1703));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1758 = fma(_867, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859)) + cbModelParam._m0[21u].w;
        float _1762 = fma(_867, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859)) + cbModelParam._m0[22u].w;
        float _1766 = fma(_867, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859)) + cbModelParam._m0[23u].w;
        float _1769 = fma(_805, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803));
        float _1772 = fma(_805, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803));
        float _1775 = fma(_805, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803));
        float _1936;
        if (_1769 > 0.0)
        {
            _1936 = abs((1.0 - _1758) / _1769);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1758 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1936 = frontier_phi_25_21_ladder;
        }
        float _2215;
        if (_1772 > 0.0)
        {
            _2215 = abs((1.0 - _1762) / _1772);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1762 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2215 = frontier_phi_37_32_ladder;
        }
        float _2428;
        if (_1775 > 0.0)
        {
            _2428 = abs((1.0 - _1766) / _1775);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1766 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2428 = frontier_phi_46_43_ladder;
        }
        float _2430 = isnan(_2215) ? _1936 : (isnan(_1936) ? _2215 : min(_1936, _2215));
        float _2431 = isnan(_2428) ? _2430 : (isnan(_2430) ? _2428 : min(_2430, _2428));
        float _2435 = (_2431 * _1769) + _1758;
        float _2436 = (_2431 * _1772) + _1762;
        float _2437 = (_2431 * _1775) + _1766;
        float _2438 = _2431 * 9.9999997473787516355514526367188e-05;
        float _2439 = (-1.0) - _2438;
        float _2441 = _2438 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2437 > _2441) || ((_2437 < _2439) || ((_2436 > _2441) || ((_2436 < _2439) || ((_2435 < _2439) || (_2435 > _2441))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2636 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2437, cbModelParam._m0[17u].z, fma(_2436, cbModelParam._m0[17u].y, _2435 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2437, cbModelParam._m0[18u].z, fma(_2436, cbModelParam._m0[18u].y, _2435 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2437, cbModelParam._m0[19u].z, fma(_2436, cbModelParam._m0[19u].y, _2435 * cbModelParam._m0[19u].x))), _1704);
            frontier_phi_22_46_ladder = _2636.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2636.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2636.x * cbModelParam._m0[1u].z;
        }
        _1794 = frontier_phi_22_46_ladder_2;
        _1796 = frontier_phi_22_46_ladder_1;
        _1798 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_803, _804, _805), _1704);
        _1794 = _1778.x * cbModelParam._m0[1u].z;
        _1796 = _1778.y * cbModelParam._m0[1u].z;
        _1798 = _1778.z * cbModelParam._m0[1u].z;
    }
    float _1811 = (((_830 * _779) + _831) * _795) * ((cbModelParam._m0[1u].w * (_1794 - _1695)) + _1695);
    float _1813 = (((_830 * _781) + _831) * _795) * ((cbModelParam._m0[1u].w * (_1796 - _1697)) + _1697);
    float _1815 = (((_830 * _782) + _831) * _795) * ((cbModelParam._m0[1u].w * (_1798 - _1699)) + _1699);
    float _1818 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1813, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1813, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1813, cbSceneParam._m0[91u].y, _1811 * cbSceneParam._m0[91u].x));
    vec4 _1832 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_717, _718));
    float _1834 = _1832.w;
    float _1846 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1834);
    float _1847 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1834);
    float _1848 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1834);
    uvec4 _1852 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1854 = _1852.x * 14u;
    uint _1855 = _1854 + 13u;
    float _1862 = _795 + (-1.0);
    float _1867 = (cbLight._m0[_1855].x * _1862) + 1.0;
    float _1868 = (cbLight._m0[_1855].y * _1862) + 1.0;
    float _1869 = (cbLight._m0[_1855].z * _1862) + 1.0;
    float _1870 = (cbLight._m0[_1855].w * _1862) + 1.0;
    uint _1871 = _1854 + 5u;
    float _1877 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
    uint _1881 = _1854 + 4u;
    float _1890 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
    uint _1894 = _1854 | 1u;
    float _1905 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_629, _630, _631));
    float _1908 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_629, _630, _631));
    float _4043 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _4054 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1913 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1915 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.3183098733425140380859375;
    float _1922 = ((cbLight._m0[_1871].x * _1877) * _1915) + (((cbLight._m0[_1881].x * _1846) * _1890) * _1913);
    float _1923 = ((_1877 * cbLight._m0[_1871].y) * _1915) + (((cbLight._m0[_1881].y * _1847) * _1890) * _1913);
    float _1924 = ((_1877 * cbLight._m0[_1871].z) * _1915) + (((cbLight._m0[_1881].z * _1848) * _1890) * _1913);
    uvec4 _1928 = floatBitsToUint(cbLight._m0[_1854 + 12u]);
    bool _1930 = _1928.x == 0u;
    float _1941;
    float _1943;
    float _1945;
    if (_1930)
    {
        _1941 = _1922;
        _1943 = _1923;
        _1945 = _1924;
    }
    else
    {
        uint _1949 = _1854 + 6u;
        float _1965 = (dot(vec3(cbLight._m0[_1854 + 2u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _1966 = _1965 * _1965;
        float _4065 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1968 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _1941 = (((cbLight._m0[_1949].x * 0.3183098733425140380859375) * _1967) * _1968) + _1922;
        _1943 = (((cbLight._m0[_1949].y * 0.3183098733425140380859375) * _1967) * _1968) + _1923;
        _1945 = (((cbLight._m0[_1949].z * 0.3183098733425140380859375) * _1967) * _1968) + _1924;
    }
    bool _1948 = _1928.y == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1948)
    {
        _1986 = _1941;
        _1988 = _1943;
        _1990 = _1945;
    }
    else
    {
        uint _2159 = _1854 + 7u;
        float _2175 = (dot(vec3(cbLight._m0[_1854 + 3u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2176 = _2175 * _2175;
        float _4081 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2177 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2178 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _1986 = (((cbLight._m0[_2159].x * 0.3183098733425140380859375) * _2177) * _2178) + _1941;
        _1988 = (((cbLight._m0[_2159].y * 0.3183098733425140380859375) * _2177) * _2178) + _1943;
        _1990 = (((cbLight._m0[_2159].z * 0.3183098733425140380859375) * _2177) * _2178) + _1945;
    }
    uint _1993 = _1854 + 8u;
    float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1854].w)) * _632) * 0.949999988079071044921875);
    float _2007 = _2006 * _2006;
    float _2008 = cbLight._m0[_1854].x + _709;
    float _2009 = cbLight._m0[_1854].y + _710;
    float _2010 = cbLight._m0[_1854].z + _711;
    float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
    float _2015 = _2014 * _2008;
    float _2016 = _2014 * _2009;
    float _2017 = _2014 * _2010;
    float _2018 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1854].xyz));
    float _4097 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _4108 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2022 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2023 = dot(vec3(_629, _630, _631), vec3(_2015, _2016, _2017));
    float _4119 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_2015, _2016, _2017));
    float _4130 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2031 = _2007 * _2007;
    float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
    float _2043 = exp2(log2(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * 5.0);
    float _2044 = 0.959999978542327880859375 - _776;
    float _2046 = 0.959999978542327880859375 - _777;
    float _2047 = 0.959999978542327880859375 - _778;
    float _2054 = 1.0 - _2007;
    float _2065 = (0.5 / (((_2022 * ((_2021 * _2054) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2054) + _2007) * _2021))) * _2021;
    float _4141 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2067 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
    uint _2081 = _1854 + 9u;
    float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _632) * 0.949999988079071044921875);
    float _2093 = _2092 * _2092;
    float _2094 = cbLight._m0[_1894].x + _709;
    float _2095 = cbLight._m0[_1894].y + _710;
    float _2096 = cbLight._m0[_1894].z + _711;
    float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
    float _2101 = _2100 * _2094;
    float _2102 = _2100 * _2095;
    float _2103 = _2100 * _2096;
    float _2104 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1894].xyz));
    float _4152 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2108 = dot(vec3(_629, _630, _631), vec3(_2101, _2102, _2103));
    float _4163 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_2101, _2102, _2103));
    float _4174 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2093 * _2093;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2127 = exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0);
    float _2134 = 1.0 - _2093;
    float _2144 = (0.5 / (((_2022 * ((_2107 * _2134) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2134) + _2093) * _2107))) * _2107;
    float _4185 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2146 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    float _2156 = (((((_2127 * _2044) + _779) * cbLight._m0[_2081].x) * _2146) * _1877) + ((((cbLight._m0[_1993].x * _1846) * ((_2043 * _2044) + _779)) * _2067) * _1890);
    float _2157 = (((((_2127 * _2046) + _781) * cbLight._m0[_2081].y) * _2146) * _1877) + ((((cbLight._m0[_1993].y * _1847) * ((_2043 * _2046) + _781)) * _2067) * _1890);
    float _2158 = (((((_2127 * _2047) + _782) * cbLight._m0[_2081].z) * _2146) * _1877) + ((((cbLight._m0[_1993].z * _1848) * ((_2043 * _2047) + _782)) * _2067) * _1890);
    float _2220;
    float _2222;
    float _2224;
    if (_1930)
    {
        _2220 = _2156;
        _2222 = _2157;
        _2224 = _2158;
    }
    else
    {
        uint _2226 = _1854 + 2u;
        uint _2230 = _1854 + 10u;
        float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _632) * 0.949999988079071044921875);
        float _2245 = _2244 * _2244;
        float _2246 = cbLight._m0[_2226].x + _709;
        float _2247 = cbLight._m0[_2226].y + _710;
        float _2248 = cbLight._m0[_2226].z + _711;
        float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
        float _2253 = _2252 * _2246;
        float _2254 = _2252 * _2247;
        float _2255 = _2252 * _2248;
        float _2256 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2226].xyz));
        float _4196 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2260 = dot(vec3(_629, _630, _631), vec3(_2253, _2254, _2255));
        float _4207 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2263 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2264 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2253, _2254, _2255));
        float _4218 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2268 = _2245 * _2245;
        float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
        float _2279 = exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0);
        float _2286 = 1.0 - _2245;
        float _2296 = (0.5 / (((_2022 * ((_2259 * _2286) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2286) + _2245) * _2259))) * _2259;
        float _4229 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2298 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
        float _2299 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _2220 = (((((_2279 * _2044) + _779) * cbLight._m0[_2230].x) * _2298) * _2299) + _2156;
        _2222 = (((((_2279 * _2046) + _781) * cbLight._m0[_2230].y) * _2298) * _2299) + _2157;
        _2224 = (((((_2279 * _2047) + _782) * cbLight._m0[_2230].z) * _2298) * _2299) + _2158;
    }
    float _2334;
    float _2336;
    float _2338;
    if (_1948)
    {
        _2334 = _2220;
        _2336 = _2222;
        _2338 = _2224;
    }
    else
    {
        uint _2345 = _1854 + 3u;
        uint _2349 = _1854 + 11u;
        float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2345].w)) * _632) * 0.949999988079071044921875);
        float _2364 = _2363 * _2363;
        float _2365 = cbLight._m0[_2345].x + _709;
        float _2366 = cbLight._m0[_2345].y + _710;
        float _2367 = cbLight._m0[_2345].z + _711;
        float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
        float _2372 = _2371 * _2365;
        float _2373 = _2371 * _2366;
        float _2374 = _2371 * _2367;
        float _2375 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2345].xyz));
        float _4245 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2379 = dot(vec3(_629, _630, _631), vec3(_2372, _2373, _2374));
        float _4256 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2383 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_2372, _2373, _2374));
        float _4267 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2387 = _2364 * _2364;
        float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
        float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0);
        float _2405 = 1.0 - _2364;
        float _2415 = (0.5 / (((_2022 * ((_2378 * _2405) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2405) + _2364) * _2378))) * _2378;
        float _4278 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2417 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
        float _2418 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2334 = (((((_2398 * _2044) + _779) * cbLight._m0[_2349].x) * _2417) * _2418) + _2220;
        _2336 = (((((_2398 * _2046) + _781) * cbLight._m0[_2349].y) * _2417) * _2418) + _2222;
        _2338 = (((((_2398 * _2047) + _782) * cbLight._m0[_2349].z) * _2417) * _2418) + _2224;
    }
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    if (_1852.y == 0u)
    {
        float _2493 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2493;
        float _2495 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2493;
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2493;
        uvec4 _2508 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2509 = _2508.x;
        uint _2520 = uint((float(_2508.y) * floor(float(uint(cbSceneParam._m0[85u].y * _718) / _2509))) + floor(float(uint(cbSceneParam._m0[85u].x * _717) / _2509)));
        float _2530 = (log2(_2496 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2531 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        uint _2534 = uint(isnan(14.0) ? _2531 : (isnan(_2531) ? 14.0 : min(_2531, 14.0)));
        uvec4 _2539 = texelFetch(g_lightClusterGridBuffer, int(((_2534 << 2u) + (_2520 << 6u)) >> 2u));
        uint _2540 = _2539.x;
        uint _2541 = _2508.z;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        if (((((1u << ((_2541 >> 4u) & 15u)) + 4294967295u) & _2540) == 0u) || ((_2541 & 240u) == 0u))
        {
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
        }
        else
        {
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            uint _2792 = 0u;
            uint _2801;
            bool _2802;
            for (;;)
            {
                _2801 = texelFetch(g_lightClassification, int((((_2534 << 5u) + (_2520 << 9u)) + (_2792 << 2u)) >> 2u)).x;
                _2802 = _2801 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2802)
                {
                    frontier_phi_61_pred = _2786;
                    frontier_phi_61_pred_1 = _2791;
                    frontier_phi_61_pred_2 = _2790;
                    frontier_phi_61_pred_3 = _2789;
                    frontier_phi_61_pred_4 = _2788;
                    frontier_phi_61_pred_5 = _2787;
                }
                else
                {
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    uint _2916;
                    _2910 = _2786;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2801;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    for (;;)
                    {
                        uint _2920 = uint(findLSB(_2916)) + (_2792 << 5u);
                        uint _2917 = (_2916 + 4294967295u) & _2916;
                        uint _2922 = _2920 * 48u;
                        vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 3u)).x));
                        uint _2942 = (_2920 * 48u) + 4u;
                        vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 3u)).x));
                        uint _2961 = (_2920 * 48u) + 8u;
                        vec3 _2972 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2961)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 2u)).x));
                        float _2976 = _2936.x - _2494;
                        float _2977 = _2936.y - _2495;
                        float _2978 = _2936.z - _2496;
                        float _2979 = dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978));
                        float _2982 = inversesqrt(_2979);
                        float _2983 = _2982 * _2976;
                        float _2984 = _2982 * _2977;
                        float _2985 = _2982 * _2978;
                        float _2986 = dot(vec3(_736, _739, _742), vec3(_2983, _2984, _2985));
                        float _2991 = 1.0 - (_2979 * _2936.w);
                        float _4304 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2992 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _2993 = sqrt(_2979) * _2955.w;
                        float _2996 = 1.39999997615814208984375 / (_2993 + 1.39999997615814208984375);
                        float _2997 = _2996 * _2996;
                        float _3000 = ((1.0 - _2997) * _2986) + _2997;
                        float _3003 = _2993 * _2993;
                        float _3007 = ((isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0))) * _2992) / ((_3003 * 0.699999988079071044921875) + 1.0);
                        float _3011 = (-0.0) - _2494;
                        float _3012 = (-0.0) - _2495;
                        float _3013 = (-0.0) - _2496;
                        float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
                        float _3018 = _3017 * _3011;
                        float _3019 = _3017 * _3012;
                        float _3020 = _3017 * _3013;
                        float _3028 = exp2(log2(1.0 / ((_3003 * 3.5) + 5.0)) * 0.25);
                        float _3029 = 1.0 - _811;
                        float _3036 = sqrt(1.0 - ((1.0 - (_3029 * _3029)) * (1.0 - (_3028 * _3028))));
                        float _3037 = _3036 * _3036;
                        float _3038 = _3037 * _3037;
                        float _3039 = _3018 + _2983;
                        float _3040 = _3019 + _2984;
                        float _3041 = _3020 + _2985;
                        float _3045 = inversesqrt(dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041)));
                        float _3049 = dot(vec3(_736, _739, _742), vec3(_3018, _3019, _3020));
                        float _4320 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3052 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3053 = dot(vec3(_736, _739, _742), vec3(_3045 * _3039, _3045 * _3040, _3045 * _3041));
                        float _4331 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3056 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3060 = ((_3056 * _3056) * (_3038 + (-1.0))) + 1.0;
                        float _3061 = _2996 * _3037;
                        float _3062 = _3061 * _3061;
                        float _3065 = ((1.0 - _3062) * _2986) + _3062;
                        float _4342 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3066 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3067 = 1.0 - _3037;
                        float _3077 = (0.5 / (((_3066 * ((_3052 * _3067) + _3037)) + 9.9999999392252902907785028219223e-09) + (((_3066 * _3067) + _3037) * _3052))) * _3066;
                        float _4353 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3088 = (((_3038 * 3.1415927410125732421875) * (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) / ((_3060 * _3060) * ((_3003 * 2.1991131305694580078125) + 3.141590118408203125))) * _2992;
                        _2845 = (_3007 * _2955.x) + _2913;
                        _2846 = (_3007 * _2955.y) + _2914;
                        _2847 = (_3007 * _2955.z) + _2915;
                        _2842 = (_3088 * _2972.x) + _2910;
                        _2843 = (_3088 * _2972.y) + _2911;
                        _2844 = (_3088 * _2972.z) + _2912;
                        if (_2917 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2917;
                        }
                    }
                    frontier_phi_61_pred = _2842;
                    frontier_phi_61_pred_1 = _2847;
                    frontier_phi_61_pred_2 = _2846;
                    frontier_phi_61_pred_3 = _2845;
                    frontier_phi_61_pred_4 = _2844;
                    frontier_phi_61_pred_5 = _2843;
                }
                _2642 = frontier_phi_61_pred;
                _2652 = frontier_phi_61_pred_1;
                _2650 = frontier_phi_61_pred_2;
                _2648 = frontier_phi_61_pred_3;
                _2646 = frontier_phi_61_pred_4;
                _2644 = frontier_phi_61_pred_5;
                uint _2793 = _2792 + 1u;
                if (_2793 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2786 = _2642;
                    _2787 = _2644;
                    _2788 = _2646;
                    _2789 = _2648;
                    _2790 = _2650;
                    _2791 = _2652;
                    _2792 = _2793;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
        }
        uvec4 _2655 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2656 = _2655.z;
        uint _2658 = (_2656 >> 8u) & 15u;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        if (((4294967295u << _2658) & _2540) == 0u)
        {
            _2754 = _2641;
            _2756 = _2643;
            _2758 = _2645;
            _2760 = _2647;
            _2762 = _2649;
            _2764 = _2651;
        }
        else
        {
            float _2779 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
            float _2780 = _2779 * _2494;
            float _2781 = _2779 * _2495;
            float _2782 = _2779 * _2496;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2658 < ((_2656 >> 12u) & 15u))
            {
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2893 = _2641;
                float _2894 = _2643;
                float _2895 = _2645;
                float _2896 = _2647;
                float _2897 = _2649;
                float _2898 = _2651;
                uint _2899 = _2658;
                uint _2908;
                bool _2909;
                for (;;)
                {
                    _2908 = texelFetch(g_lightClassification, int((((_2534 << 5u) + (_2520 << 9u)) + (_2899 << 2u)) >> 2u)).x;
                    _2909 = _2908 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2909)
                    {
                        frontier_phi_67_pred = _2896;
                        frontier_phi_67_pred_1 = _2897;
                        frontier_phi_67_pred_2 = _2898;
                        frontier_phi_67_pred_3 = _2895;
                        frontier_phi_67_pred_4 = _2894;
                        frontier_phi_67_pred_5 = _2893;
                    }
                    else
                    {
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3106 = _2893;
                        float _3107 = _2894;
                        float _3108 = _2895;
                        float _3109 = _2896;
                        float _3110 = _2897;
                        float _3111 = _2898;
                        uint _3112 = _2908;
                        uint _3113;
                        vec4 _3138;
                        float _3139;
                        vec4 _3154;
                        vec3 _3166;
                        vec4 _3181;
                        vec4 _3197;
                        float _3243;
                        bool _3244;
                        for (;;)
                        {
                            uint _3123 = ((_2899 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3112));
                            _3113 = (_3112 + 4294967295u) & _3112;
                            uint _3125 = _3123 * 40u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            _3139 = _3138.w;
                            uint _3141 = (_3123 * 40u) + 4u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3156 = (_3123 * 40u) + 8u;
                            _3166 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x));
                            uint _3168 = (_3123 * 40u) + 16u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3184 = (_3123 * 40u) + 20u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3199 = (_3123 * 40u) + 24u;
                            vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3218 = (_3123 * 40u) + 28u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            _3243 = fma(_2496, _3231.z, fma(_2495, _3231.y, _3231.x * _2494)) + _3231.w;
                            _3244 = !((fma(_2496, _3212.z, fma(_2495, _3212.y, _3212.x * _2494)) + _3212.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3244)
                            {
                                float _3271 = _3138.x - _2494;
                                float _3272 = _3138.y - _2495;
                                float _3273 = _3138.z - _2496;
                                float _3274 = dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273));
                                float _3277 = inversesqrt(_3274);
                                float _3278 = _3277 * _3271;
                                float _3279 = _3277 * _3272;
                                float _3280 = _3277 * _3273;
                                float _3284 = 1.0 - (_3274 / (_3139 * _3139));
                                float _4364 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3289 = sqrt(_3274) * _3154.w;
                                float _3291 = 1.39999997615814208984375 / (_3289 + 1.39999997615814208984375);
                                float _3292 = _3291 * _3291;
                                float _3295 = ((1.0 - _3292) * dot(vec3(_3278, _3279, _3280), vec3(_736, _739, _742))) + _3292;
                                float _3298 = _3289 * _3289;
                                float _3302 = (fma(_2496, _3181.z, fma(_2495, _3181.y, _3181.x * _2494)) + _3181.w) / _3243;
                                float _3303 = (fma(_2496, _3197.z, fma(_2495, _3197.y, _3197.x * _2494)) + _3197.w) / _3243;
                                float _3307 = 1.0 - dot(vec2(_3302, _3303), vec2(_3302, _3303));
                                float _4380 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3308 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3309 = _3308 * (((isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * _3285) / ((_3298 * 0.699999988079071044921875) + 1.0));
                                float _3321 = exp2(log2(1.0 / ((_3298 * 3.5) + 5.0)) * 0.25);
                                float _3322 = 1.0 - _811;
                                float _3329 = sqrt(1.0 - ((1.0 - (_3322 * _3322)) * (1.0 - (_3321 * _3321))));
                                float _3330 = _3329 * _3329;
                                float _3331 = _3330 * _3330;
                                float _3332 = _3278 - _2780;
                                float _3333 = _3279 - _2781;
                                float _3334 = _3280 - _2782;
                                float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                                float _3342 = dot(vec3(_736, _739, _742), vec3((-0.0) - _2780, (-0.0) - _2781, (-0.0) - _2782));
                                float _4391 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3346 = dot(vec3(_736, _739, _742), vec3(_3338 * _3332, _3338 * _3333, _3338 * _3334));
                                float _4402 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3349 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3353 = ((_3349 * _3349) * (_3331 + (-1.0))) + 1.0;
                                float _3354 = _3291 * _3330;
                                float _3355 = _3354 * _3354;
                                float _3361 = ((1.0 - _3355) * dot(vec3(_736, _739, _742), vec3(_3278, _3279, _3280))) + _3355;
                                float _4413 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3363 = 1.0 - _3330;
                                float _3373 = (0.5 / (((_3362 * ((_3345 * _3363) + _3330)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3330) * _3345))) * _3362;
                                float _4424 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3383 = (_3308 * _3285) * (((_3331 * 3.1415927410125732421875) * (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) / ((_3353 * _3353) * ((_3298 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3383 * _3166.x;
                                frontier_phi_73_pred_1 = _3383 * _3166.y;
                                frontier_phi_73_pred_2 = _3309 * _3154.z;
                                frontier_phi_73_pred_3 = _3309 * _3154.y;
                                frontier_phi_73_pred_4 = _3309 * _3154.x;
                                frontier_phi_73_pred_5 = _3383 * _3166.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3387 = frontier_phi_73_pred;
                            _3388 = frontier_phi_73_pred_1;
                            _3392 = frontier_phi_73_pred_2;
                            _3391 = frontier_phi_73_pred_3;
                            _3390 = frontier_phi_73_pred_4;
                            _3389 = frontier_phi_73_pred_5;
                            _3096 = _3390 + _3109;
                            _3097 = _3391 + _3110;
                            _3098 = _3392 + _3111;
                            _3093 = _3387 + _3106;
                            _3094 = _3388 + _3107;
                            _3095 = _3389 + _3108;
                            if (_3113 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3113;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3096;
                        frontier_phi_67_pred_1 = _3097;
                        frontier_phi_67_pred_2 = _3098;
                        frontier_phi_67_pred_3 = _3095;
                        frontier_phi_67_pred_4 = _3094;
                        frontier_phi_67_pred_5 = _3093;
                    }
                    _2761 = frontier_phi_67_pred;
                    _2763 = frontier_phi_67_pred_1;
                    _2765 = frontier_phi_67_pred_2;
                    _2759 = frontier_phi_67_pred_3;
                    _2757 = frontier_phi_67_pred_4;
                    _2755 = frontier_phi_67_pred_5;
                    uint _2900 = _2899 + 1u;
                    if (_2900 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2893 = _2755;
                        _2894 = _2757;
                        _2895 = _2759;
                        _2896 = _2761;
                        _2897 = _2763;
                        _2898 = _2765;
                        _2899 = _2900;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2763;
                frontier_phi_55_56_ladder_1 = _2765;
                frontier_phi_55_56_ladder_2 = _2761;
                frontier_phi_55_56_ladder_3 = _2759;
                frontier_phi_55_56_ladder_4 = _2757;
                frontier_phi_55_56_ladder_5 = _2755;
            }
            else
            {
                frontier_phi_55_56_ladder = _2649;
                frontier_phi_55_56_ladder_1 = _2651;
                frontier_phi_55_56_ladder_2 = _2647;
                frontier_phi_55_56_ladder_3 = _2645;
                frontier_phi_55_56_ladder_4 = _2643;
                frontier_phi_55_56_ladder_5 = _2641;
            }
            _2754 = frontier_phi_55_56_ladder_5;
            _2756 = frontier_phi_55_56_ladder_4;
            _2758 = frontier_phi_55_56_ladder_3;
            _2760 = frontier_phi_55_56_ladder_2;
            _2762 = frontier_phi_55_56_ladder;
            _2764 = frontier_phi_55_56_ladder_1;
        }
        float _2769 = isnan(1.0) ? _795 : (isnan(_795) ? 1.0 : min(_795, 1.0));
        _2553 = (_2769 * _2760) + _1986;
        _2555 = (_2769 * _2762) + _1988;
        _2557 = (_2769 * _2764) + _1990;
        _2559 = ((_2754 * _779) * _2769) + _2334;
        _2561 = ((_2756 * _781) * _2769) + _2336;
        _2563 = ((_2758 * _782) * _2769) + _2338;
    }
    else
    {
        _2553 = _1986;
        _2555 = _1988;
        _2557 = _1990;
        _2559 = _2334;
        _2561 = _2336;
        _2563 = _2338;
    }
    float _4440 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4451 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4462 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    uint _2583 = _234 + 6u;
    float _2591 = _717 / cbSceneParam._m0[86u].x;
    float _2592 = _718 / cbSceneParam._m0[86u].y;
    vec4 _2606 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2591, _2592, (log2((isnan(cbSceneParam._m0[77u].w) ? _651 : (isnan(_651) ? cbSceneParam._m0[77u].w : min(_651, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2608 = _2606.x;
    float _2609 = _2606.y;
    float _2610 = _2606.z;
    float _2611 = _2606.w;
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    if (_651 > cbSceneParam._m0[78u].w)
    {
        float _2666 = isnan(_651) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _651 : min(cbSceneParam._m0[80u].w, _651));
        float _2667 = _2666 / _651;
        float _2678 = _2667 * _702;
        float _2679 = _703 * _2667;
        float _2680 = (-0.0) - _2679;
        float _2682 = _2667 * _704;
        float _2684 = (cbSceneParam._m0[77u].w * _2680) / _2666;
        float _2685 = _2684 + cbSceneParam._m0[79u].w;
        float _2686 = cbSceneParam._m0[79u].w - _2679;
        float _2692 = sqrt(((_2678 * _2678) + (_2679 * _2679)) + (_2682 * _2682));
        float _2695 = (1.0 - (cbSceneParam._m0[77u].w / _2666)) * _2692;
        float _2700 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2702 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2855;
        if (abs((_2680 - _2684) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2855 = ((((_2685 > 0.0) ? exp2(_2700 * _2685) : (2.0 - exp2(_2702 * _2685))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2695;
        }
        else
        {
            float _2815 = 1.0 / cbSceneParam._m0[80u].x;
            float _2816 = isnan(_2686) ? _2685 : (isnan(_2685) ? _2686 : max(_2685, _2686));
            float _2817 = isnan(_2686) ? _2685 : (isnan(_2685) ? _2686 : min(_2685, _2686));
            float _2826 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : min(_2816, 0.0));
            float _2827 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : min(_2817, 0.0));
            _2855 = ((abs(_2692 / _2680) * cbSceneParam._m0[80u].y) * ((((_2826 - _2827) * 2.0) - ((exp2(_2700 * (isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0)))) - exp2(_2700 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0))))) * _2815)) - ((exp2(_2702 * _2826) - exp2(_2702 * _2827)) * _2815))) + (_2695 * cbSceneParam._m0[80u].z);
        }
        vec4 _2857 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2591, _2592, 1.0), 0.0);
        float _2866 = exp2((_2855 * (-1.44269502162933349609375)) * (1.0 - _2857.w));
        float _2867 = log2(_2866);
        float _2883 = log2(_2611);
        _2704 = (exp2(_2883 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].x)) * _2857.x) / cbSceneParam._m0[78u].x)) + _2608;
        _2706 = (exp2(_2883 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].y)) * _2857.y) / cbSceneParam._m0[78u].y)) + _2609;
        _2708 = (exp2(_2883 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].z)) * _2857.z) / cbSceneParam._m0[78u].z)) + _2610;
        _2710 = _2866 * _2611;
    }
    else
    {
        _2704 = _2608;
        _2706 = _2609;
        _2708 = _2610;
        _2710 = _2611;
    }
    float _2722 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2723 = _2722 == 3.0;
    float _2724 = log2(_2710);
    float _2731 = exp2(_2724 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2553 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _795))) + ((_2559 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1603)) * cbPerFrame._m0[3u].x));
    float _2732 = exp2(_2724 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2555 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _795))) + ((_2561 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1603)) * cbPerFrame._m0[3u].x));
    float _2733 = exp2(_2724 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2557 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _795))) + ((_2563 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1603)) * cbPerFrame._m0[3u].x));
    float _2742 = (_2722 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2742 * (_2723 ? _2731 : (_2731 + (cbSceneParam._m0[72u].w * _2704)));
    SV_Target.y = _2742 * (_2723 ? _2732 : (_2732 + (cbSceneParam._m0[72u].w * _2706)));
    SV_Target.z = _2742 * (_2723 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2708)));
    SV_Target.w = cbInstanceData._m0[_2583].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2583].w;
}


