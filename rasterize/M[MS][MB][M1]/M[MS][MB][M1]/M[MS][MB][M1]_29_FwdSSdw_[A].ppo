#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1062;
float _3470;
float _3471;
float _3472;
float _3473;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _292 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _296 = _292.z;
    float _301 = (_292.x * 2.0) + (-1.0);
    float _303 = (_292.y * 2.0) + (-1.0);
    float _304 = dot(vec2(_301, _303), vec2(_301, _303));
    float _3482 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _310 = sqrt(1.0 - (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))));
    float _313 = fma(_310, _214, fma(_303, _221, _301 * _207));
    float _316 = fma(_310, _215, fma(_303, _222, _301 * _208));
    float _319 = fma(_310, _216, fma(_303, _223, _301 * _209));
    float _323 = inversesqrt(dot(vec3(_313, _316, _319), vec3(_313, _316, _319)));
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _361 = _359.x;
    float _362 = 1.0 - _361;
    float _369 = ((_361 - _362) * cbMtdParam._m0[24u].z) + _362;
    float _371 = (cbMtdParam._m0[19u].x + dot(vec4(_323 * _313, _323 * _316, _323 * _319, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_369 * cbMtdParam._m0[21u].z);
    float _3493 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _387 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_369 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3504 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _392 = ((_372 * (cbMtdParam._m0[17u].x - _272)) * _388) + _272;
    float _393 = ((_372 * (cbMtdParam._m0[17u].y - _273)) * _388) + _273;
    float _394 = ((_372 * (cbMtdParam._m0[17u].z - _274)) * _388) + _274;
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _409 = _407.x;
    float _412 = _409 - ((_409 * _372) * _388);
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _432 = (_425.x * 2.0) + (-1.0);
    float _433 = (_425.y * 2.0) + (-1.0);
    float _434 = dot(vec2(_432, _433), vec2(_432, _433));
    float _3515 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _443 = (((_425.z - _296) * _372) * _388) + _296;
    float _458 = (((cbMtdParam._m0[21u].x * _301) + ((_432 - _301) * _372)) * _388) + _301;
    float _459 = (((cbMtdParam._m0[21u].x * _303) + ((_433 - _303) * _372)) * _388) + _303;
    float _460 = (((sqrt(1.0 - (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) - _310) * _372) * _388) + _310;
    float _465 = cbMtdParam._m0[22u].x + _292.w;
    float _468 = fma(_460, _214, fma(_459, _221, _458 * _207));
    float _471 = fma(_460, _215, fma(_459, _222, _458 * _208));
    float _474 = fma(_460, _216, fma(_459, _223, _458 * _209));
    float _478 = inversesqrt(dot(vec3(_468, _471, _474), vec3(_468, _471, _474)));
    float _479 = _478 * _468;
    float _480 = _478 * _471;
    float _481 = _478 * _474;
    float _3526 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _482 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3548 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3559 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _3570 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3581 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _487 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _501 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _552 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _542);
    float _553 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _542);
    float _554 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _542);
    float _558 = inversesqrt(dot(vec3(_552, _553, _554), vec3(_552, _553, _554)));
    float _559 = _552 * _558;
    float _560 = _553 * _558;
    float _561 = _554 * _558;
    vec4 _566 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _568 = _566.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _743 = sqrt(((_552 * _552) + (_553 * _553)) + (_554 * _554));
        float _749 = (cbMatDynParam._m0[5u].x * _743) + cbMatDynParam._m0[5u].y;
        float _3592 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _754 = (cbMatDynParam._m0[5u].z * _743) + cbMatDynParam._m0[5u].w;
        float _3603 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) - _750)) + _750) < ((_568 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _580 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _581 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _601 = fma(_481, cbSceneParam._m0[5u].z, fma(_480, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _479));
    float _604 = fma(_481, cbSceneParam._m0[6u].z, fma(_480, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _479));
    float _607 = fma(_481, cbSceneParam._m0[7u].z, fma(_480, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _479));
    uint _620 = _226 + 9u;
    uint _621 = _620 + uint(cbMatDynParam._m0[0u].w);
    float _627 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) * cbInstanceData._m0[_621].x;
    float _628 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * cbInstanceData._m0[_621].y;
    float _629 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) * cbInstanceData._m0[_621].z;
    float _3614 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _3636 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _633 = 1.0 - _487;
    float _634 = _630 * _633;
    float _635 = _631 * _633;
    float _636 = _632 * _633;
    float _641 = (_630 + (-0.039999999105930328369140625)) * _487;
    float _642 = (_631 + (-0.039999999105930328369140625)) * _487;
    float _643 = (_632 + (-0.039999999105930328369140625)) * _487;
    float _644 = _641 + 0.039999999105930328369140625;
    float _646 = _642 + 0.039999999105930328369140625;
    float _647 = _643 + 0.039999999105930328369140625;
    vec4 _656 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _580, cbSceneParam._m0[86u].y * _581));
    float _660 = ((isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * TEXCOORD_5.w) * _656.x;
    float _661 = dot(vec3(_479, _480, _481), vec3(_559, _560, _561));
    float _664 = _661 * 2.0;
    float _668 = (_664 * _479) - _559;
    float _669 = (_664 * _480) - _560;
    float _670 = (_664 * _481) - _561;
    float _674 = abs(dot(vec3(_559, _560, _561), vec3(_479, _480, _481)));
    float _3647 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _676 = sqrt(_482);
    float _689 = exp2((_676 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_676 * 3.0));
    float _695 = (1.0 - _689) * ((_676 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _696 = _689 * _676;
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1061;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _786 = fma(_732, cbModelParam._m0[26u].z, fma(_728, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724));
        float _790 = fma(_732, cbModelParam._m0[27u].z, fma(_728, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724));
        float _794 = fma(_732, cbModelParam._m0[28u].z, fma(_728, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724));
        float _819 = _724 + _479;
        float _820 = _728 + _480;
        float _821 = _732 + _481;
        float _831 = fma(_821, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _819)) - _786;
        float _832 = fma(_821, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _819)) - _790;
        float _833 = fma(_821, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _819)) - _794;
        float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
        float _850 = ((_837 * _831) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_786 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_837 * _832) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_790 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_837 * _833) / cbModelParam._m0[34u].z) + ((((((_794 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        float _889 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_855.x + (-0.5));
        float _891 = _889 * (_855.y + (-0.5));
        float _892 = _889 * (_855.z + (-0.5));
        float _899 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_862.x + (-0.5));
        float _901 = _899 * (_862.y + (-0.5));
        float _902 = _899 * (_862.z + (-0.5));
        float _909 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_869.x + (-0.5));
        float _911 = _909 * (_869.y + (-0.5));
        float _912 = _909 * (_869.z + (-0.5));
        float _919 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_876.x + (-0.5));
        float _921 = _919 * (_876.y + (-0.5));
        float _922 = _919 * (_876.z + (-0.5));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = _890 * 0.5;
        float _927 = _900 * 0.5;
        float _928 = _910 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _943 = (dot(vec3(_479, _480, _481), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _953 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3695 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_955 + 1.0))) + _960) * _923;
        float _970 = _891 * 0.5;
        float _971 = _901 * 0.5;
        float _972 = _911 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_479, _480, _481), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3728 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_997 + 1.0))) + _1002) * _924;
        float _1012 = _892 * 0.5;
        float _1013 = _902 * 0.5;
        float _1014 = _912 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_479, _480, _481), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3761 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1039 + 1.0))) + _1044) * _925;
        _1061 = _892;
        _1063 = _891;
        _1064 = _890;
        _1065 = _902;
        _1066 = _901;
        _1067 = _900;
        _1068 = _912;
        _1069 = _911;
        _1070 = _910;
        _1071 = _925;
        _1072 = _924;
        _1073 = _923;
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
    }
    else
    {
        _1061 = _1062;
        _1063 = _1062;
        _1064 = _1062;
        _1065 = _1062;
        _1066 = _1062;
        _1067 = _1062;
        _1068 = _1062;
        _1069 = _1062;
        _1070 = _1062;
        _1071 = _1062;
        _1072 = _1062;
        _1073 = _1062;
        _1074 = 0.0;
        _1075 = 0.0;
        _1076 = 0.0;
    }
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1104 = fma(_732, cbModelParam._m0[30u].z, fma(_728, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _724));
        float _1108 = fma(_732, cbModelParam._m0[31u].z, fma(_728, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _724));
        float _1112 = fma(_732, cbModelParam._m0[32u].z, fma(_728, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _724));
        float _1135 = _724 + _479;
        float _1136 = _728 + _480;
        float _1137 = _732 + _481;
        float _1147 = fma(_1137, cbModelParam._m0[30u].z, fma(_1136, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1135)) - _1104;
        float _1148 = fma(_1137, cbModelParam._m0[31u].z, fma(_1136, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1135)) - _1108;
        float _1149 = fma(_1137, cbModelParam._m0[32u].z, fma(_1136, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1135)) - _1112;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1104 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1108 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[35u].z) + ((((((_1112 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1203 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1170.x + (-0.5));
        float _1205 = _1203 * (_1170.y + (-0.5));
        float _1206 = _1203 * (_1170.z + (-0.5));
        float _1213 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1177.x + (-0.5));
        float _1215 = _1213 * (_1177.y + (-0.5));
        float _1216 = _1213 * (_1177.z + (-0.5));
        float _1223 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1184.x + (-0.5));
        float _1225 = _1223 * (_1184.y + (-0.5));
        float _1226 = _1223 * (_1184.z + (-0.5));
        float _1233 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1191.x + (-0.5));
        float _1235 = _1233 * (_1191.y + (-0.5));
        float _1236 = _1233 * (_1191.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_479, _480, _481), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3824 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1267 + 1.0))) + _1272) * _1237;
        float _1282 = _1205 * 0.5;
        float _1283 = _1215 * 0.5;
        float _1284 = _1225 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_479, _480, _481), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3857 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1309 + 1.0))) + _1314) * _1238;
        float _1324 = _1206 * 0.5;
        float _1325 = _1216 * 0.5;
        float _1326 = _1226 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_479, _480, _481), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3890 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1351 + 1.0))) + _1356) * _1239;
        _1373 = _1206;
        _1374 = _1205;
        _1375 = _1204;
        _1376 = _1216;
        _1377 = _1215;
        _1378 = _1214;
        _1379 = _1226;
        _1380 = _1225;
        _1381 = _1224;
        _1382 = _1239;
        _1383 = _1238;
        _1384 = _1237;
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1062;
        _1374 = _1062;
        _1375 = _1062;
        _1376 = _1062;
        _1377 = _1062;
        _1378 = _1062;
        _1379 = _1062;
        _1380 = _1062;
        _1381 = _1062;
        _1382 = _1062;
        _1383 = _1062;
        _1384 = _1062;
        _1385 = 0.0;
        _1386 = 0.0;
        _1387 = 0.0;
    }
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1074)) + _1074;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1075)) + _1075;
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1076)) + _1076;
    float _1420 = fma(_1399, cbSceneParam._m0[89u].z, fma(_1398, cbSceneParam._m0[89u].y, _1397 * cbSceneParam._m0[89u].x));
    float _1423 = fma(_1399, cbSceneParam._m0[90u].z, fma(_1398, cbSceneParam._m0[90u].y, _1397 * cbSceneParam._m0[90u].x));
    float _1426 = fma(_1399, cbSceneParam._m0[91u].z, fma(_1398, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1397));
    float _1441 = _668 * 0.5;
    float _1442 = _669 * 0.5;
    float _1443 = _670 * 0.5;
    float _1444 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1447 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1450 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1484;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1457 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1061, _1065, _1068, _1071));
        float _1461 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1465 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1064, _1067, _1070, _1073));
        float _1472 = dot(vec4(cbModelParam._m0[39u]), vec4(_1441, _1442, _1443, 1.0));
        _1484 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1484 = 1.0;
    }
    float _1495;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1486 = dot(vec4(cbModelParam._m0[40u]), vec4(_1441, _1442, _1443, 1.0));
        _1495 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1486) ? 0.0 : (isnan(0.0) ? _1486 : max(0.0, _1486))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1495 = 1.0;
    }
    float _1499 = (_1495 * cbModelParam._m0[1u].x) + (_1484 * (1.0 - cbModelParam._m0[1u].x));
    float _1509 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _482);
    float _1510 = isnan(_1509) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1509 : min(cbModelParam._m0[25u].z, _1509));
    float _1591;
    float _1593;
    float _1595;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1558 = fma(_732, cbModelParam._m0[13u].z, fma(_728, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724)) + cbModelParam._m0[13u].w;
        float _1562 = fma(_732, cbModelParam._m0[14u].z, fma(_728, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724)) + cbModelParam._m0[14u].w;
        float _1566 = fma(_732, cbModelParam._m0[15u].z, fma(_728, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724)) + cbModelParam._m0[15u].w;
        float _1569 = fma(_670, cbModelParam._m0[13u].z, fma(_669, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _668));
        float _1572 = fma(_670, cbModelParam._m0[14u].z, fma(_669, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _668));
        float _1575 = fma(_670, cbModelParam._m0[15u].z, fma(_669, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _668));
        float _1603;
        if (_1569 > 0.0)
        {
            _1603 = abs((1.0 - _1558) / _1569);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1558 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1603 = frontier_phi_17_15_ladder;
        }
        float _1828;
        if (_1572 > 0.0)
        {
            _1828 = abs((1.0 - _1562) / _1572);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1562 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1828 = frontier_phi_26_22_ladder;
        }
        float _2085;
        if (_1575 > 0.0)
        {
            _2085 = abs((1.0 - _1566) / _1575);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1566 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2085 = frontier_phi_38_33_ladder;
        }
        float _2087 = isnan(_1828) ? _1603 : (isnan(_1603) ? _1828 : min(_1603, _1828));
        float _2088 = isnan(_2085) ? _2087 : (isnan(_2087) ? _2085 : min(_2087, _2085));
        float _2092 = (_2088 * _1569) + _1558;
        float _2093 = (_2088 * _1572) + _1562;
        float _2094 = (_2088 * _1575) + _1566;
        float _2095 = _2088 * 9.9999997473787516355514526367188e-05;
        float _2097 = (-1.0) - _2095;
        float _2099 = _2095 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2094 > _2099) || ((_2094 < _2097) || ((_2093 > _2099) || ((_2093 < _2097) || ((_2092 < _2097) || (_2092 > _2099))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2222 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2094, cbModelParam._m0[9u].z, fma(_2093, cbModelParam._m0[9u].y, _2092 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2094, cbModelParam._m0[10u].z, fma(_2093, cbModelParam._m0[10u].y, _2092 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2094, cbModelParam._m0[11u].z, fma(_2093, cbModelParam._m0[11u].y, _2092 * cbModelParam._m0[11u].x))), _1510);
            frontier_phi_16_38_ladder = _2222.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2222.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2222.x * cbModelParam._m0[1u].y;
        }
        _1591 = frontier_phi_16_38_ladder_2;
        _1593 = frontier_phi_16_38_ladder_1;
        _1595 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1579 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_668, _669, _670), _1510);
        _1591 = _1579.x * cbModelParam._m0[1u].y;
        _1593 = _1579.y * cbModelParam._m0[1u].y;
        _1595 = _1579.z * cbModelParam._m0[1u].y;
    }
    float _1599 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _482);
    float _1600 = isnan(_1599) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1599 : min(cbModelParam._m0[25u].w, _1599));
    float _1690;
    float _1692;
    float _1694;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1654 = fma(_732, cbModelParam._m0[21u].z, fma(_728, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724)) + cbModelParam._m0[21u].w;
        float _1658 = fma(_732, cbModelParam._m0[22u].z, fma(_728, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724)) + cbModelParam._m0[22u].w;
        float _1662 = fma(_732, cbModelParam._m0[23u].z, fma(_728, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724)) + cbModelParam._m0[23u].w;
        float _1665 = fma(_670, cbModelParam._m0[21u].z, fma(_669, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _668));
        float _1668 = fma(_670, cbModelParam._m0[22u].z, fma(_669, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _668));
        float _1671 = fma(_670, cbModelParam._m0[23u].z, fma(_669, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _668));
        float _1833;
        if (_1665 > 0.0)
        {
            _1833 = abs((1.0 - _1654) / _1665);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1654 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1833 = frontier_phi_28_24_ladder;
        }
        float _2112;
        if (_1668 > 0.0)
        {
            _2112 = abs((1.0 - _1658) / _1668);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1658 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2112 = frontier_phi_40_35_ladder;
        }
        float _2325;
        if (_1671 > 0.0)
        {
            _2325 = abs((1.0 - _1662) / _1671);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1662 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2325 = frontier_phi_49_46_ladder;
        }
        float _2327 = isnan(_2112) ? _1833 : (isnan(_1833) ? _2112 : min(_1833, _2112));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1665) + _1654;
        float _2333 = (_2328 * _1668) + _1658;
        float _2334 = (_2328 * _1671) + _1662;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2336 = (-1.0) - _2335;
        float _2338 = _2335 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2334 > _2338) || ((_2334 < _2336) || ((_2333 > _2338) || ((_2333 < _2336) || ((_2332 < _2336) || (_2332 > _2338))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2334, cbModelParam._m0[17u].z, fma(_2333, cbModelParam._m0[17u].y, _2332 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2334, cbModelParam._m0[18u].z, fma(_2333, cbModelParam._m0[18u].y, _2332 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2334, cbModelParam._m0[19u].z, fma(_2333, cbModelParam._m0[19u].y, _2332 * cbModelParam._m0[19u].x))), _1600);
            frontier_phi_25_49_ladder = _2533.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2533.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2533.x * cbModelParam._m0[1u].z;
        }
        _1690 = frontier_phi_25_49_ladder_2;
        _1692 = frontier_phi_25_49_ladder_1;
        _1694 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_668, _669, _670), _1600);
        _1690 = _1674.x * cbModelParam._m0[1u].z;
        _1692 = _1674.y * cbModelParam._m0[1u].z;
        _1694 = _1674.z * cbModelParam._m0[1u].z;
    }
    float _1707 = (((_695 * _644) + _696) * _660) * ((cbModelParam._m0[1u].w * (_1690 - _1591)) + _1591);
    float _1709 = (((_695 * _646) + _696) * _660) * ((cbModelParam._m0[1u].w * (_1692 - _1593)) + _1593);
    float _1711 = (((_695 * _647) + _696) * _660) * ((cbModelParam._m0[1u].w * (_1694 - _1595)) + _1595);
    float _1714 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1709, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1709, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1709, cbSceneParam._m0[91u].y, _1707 * cbSceneParam._m0[91u].x));
    vec4 _1728 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_580, _581));
    float _1730 = _1728.w;
    float _1742 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1730);
    float _1743 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1730);
    float _1744 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1730);
    uvec4 _1748 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1750 = _1748.x * 14u;
    uint _1751 = _1750 + 13u;
    float _1758 = _660 + (-1.0);
    float _1763 = (cbLight._m0[_1751].x * _1758) + 1.0;
    float _1764 = (cbLight._m0[_1751].y * _1758) + 1.0;
    float _1765 = (cbLight._m0[_1751].z * _1758) + 1.0;
    float _1766 = (cbLight._m0[_1751].w * _1758) + 1.0;
    uint _1767 = _1750 + 5u;
    float _1773 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
    uint _1777 = _1750 + 4u;
    float _1787 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
    uint _1791 = _1750 | 1u;
    float _1802 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_479, _480, _481));
    float _1805 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_479, _480, _481));
    float _4026 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _4037 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1810 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * 0.3183098733425140380859375;
    float _1812 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.3183098733425140380859375;
    float _1819 = ((cbLight._m0[_1767].x * _1773) * _1812) + (((cbLight._m0[_1777].x * _1742) * _1787) * _1810);
    float _1820 = ((_1773 * cbLight._m0[_1767].y) * _1812) + (((cbLight._m0[_1777].y * _1743) * _1787) * _1810);
    float _1821 = ((_1773 * cbLight._m0[_1767].z) * _1812) + (((cbLight._m0[_1777].z * _1744) * _1787) * _1810);
    uvec4 _1825 = floatBitsToUint(cbLight._m0[_1750 + 12u]);
    bool _1827 = _1825.x == 0u;
    float _1838;
    float _1840;
    float _1842;
    if (_1827)
    {
        _1838 = _1819;
        _1840 = _1820;
        _1842 = _1821;
    }
    else
    {
        uint _1846 = _1750 + 6u;
        float _1862 = (dot(vec3(cbLight._m0[_1750 + 2u].xyz), vec3(_479, _480, _481)) * 0.5) + 0.5;
        float _1863 = _1862 * _1862;
        float _4048 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1865 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _1838 = (((cbLight._m0[_1846].x * 0.3183098733425140380859375) * _1864) * _1865) + _1819;
        _1840 = (((cbLight._m0[_1846].y * 0.3183098733425140380859375) * _1864) * _1865) + _1820;
        _1842 = (((cbLight._m0[_1846].z * 0.3183098733425140380859375) * _1864) * _1865) + _1821;
    }
    bool _1845 = _1825.y == 0u;
    float _1883;
    float _1885;
    float _1887;
    if (_1845)
    {
        _1883 = _1838;
        _1885 = _1840;
        _1887 = _1842;
    }
    else
    {
        uint _2056 = _1750 + 7u;
        float _2072 = (dot(vec3(cbLight._m0[_1750 + 3u].xyz), vec3(_479, _480, _481)) * 0.5) + 0.5;
        float _2073 = _2072 * _2072;
        float _4064 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2074 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _2075 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _1883 = (((cbLight._m0[_2056].x * 0.3183098733425140380859375) * _2074) * _2075) + _1838;
        _1885 = (((cbLight._m0[_2056].y * 0.3183098733425140380859375) * _2074) * _2075) + _1840;
        _1887 = (((cbLight._m0[_2056].z * 0.3183098733425140380859375) * _2074) * _2075) + _1842;
    }
    uint _1890 = _1750 + 8u;
    float _1903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1750].w)) * _482) * 0.949999988079071044921875);
    float _1904 = _1903 * _1903;
    float _1905 = cbLight._m0[_1750].x + _559;
    float _1906 = cbLight._m0[_1750].y + _560;
    float _1907 = cbLight._m0[_1750].z + _561;
    float _1911 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
    float _1912 = _1911 * _1905;
    float _1913 = _1911 * _1906;
    float _1914 = _1911 * _1907;
    float _1915 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_1750].xyz));
    float _4080 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _1919 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _1920 = dot(vec3(_479, _480, _481), vec3(_1912, _1913, _1914));
    float _4102 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1923 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _1924 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_1912, _1913, _1914));
    float _4113 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1928 = _1904 * _1904;
    float _1932 = ((_1923 * _1923) * (_1928 + (-1.0))) + 1.0;
    float _1940 = exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0);
    float _1941 = 0.959999978542327880859375 - _641;
    float _1943 = 0.959999978542327880859375 - _642;
    float _1944 = 0.959999978542327880859375 - _643;
    float _1951 = 1.0 - _1904;
    float _1962 = (0.5 / (((_1919 * ((_1918 * _1951) + _1904)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _1951) + _1904) * _1918))) * _1918;
    float _4124 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1964 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1928 / ((_1932 * _1932) * 3.141590118408203125));
    uint _1978 = _1750 + 9u;
    float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1791].w)) * _482) * 0.949999988079071044921875);
    float _1990 = _1989 * _1989;
    float _1991 = cbLight._m0[_1791].x + _559;
    float _1992 = cbLight._m0[_1791].y + _560;
    float _1993 = cbLight._m0[_1791].z + _561;
    float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
    float _1998 = _1997 * _1991;
    float _1999 = _1997 * _1992;
    float _2000 = _1997 * _1993;
    float _2001 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_1791].xyz));
    float _4135 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _2005 = dot(vec3(_479, _480, _481), vec3(_1998, _1999, _2000));
    float _4146 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2009 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1998, _1999, _2000));
    float _4157 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2013 = _1990 * _1990;
    float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
    float _2024 = exp2(log2(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * 5.0);
    float _2031 = 1.0 - _1990;
    float _2041 = (0.5 / (((_1919 * ((_2004 * _2031) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2031) + _1990) * _2004))) * _2004;
    float _4168 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2043 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
    float _2053 = (((((_2024 * _1941) + _644) * cbLight._m0[_1978].x) * _2043) * _1773) + ((((cbLight._m0[_1890].x * _1742) * ((_1940 * _1941) + _644)) * _1964) * _1787);
    float _2054 = (((((_2024 * _1943) + _646) * cbLight._m0[_1978].y) * _2043) * _1773) + ((((cbLight._m0[_1890].y * _1743) * ((_1940 * _1943) + _646)) * _1964) * _1787);
    float _2055 = (((((_2024 * _1944) + _647) * cbLight._m0[_1978].z) * _2043) * _1773) + ((((cbLight._m0[_1890].z * _1744) * ((_1940 * _1944) + _647)) * _1964) * _1787);
    float _2117;
    float _2119;
    float _2121;
    if (_1827)
    {
        _2117 = _2053;
        _2119 = _2054;
        _2121 = _2055;
    }
    else
    {
        uint _2123 = _1750 + 2u;
        uint _2127 = _1750 + 10u;
        float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _482) * 0.949999988079071044921875);
        float _2142 = _2141 * _2141;
        float _2143 = cbLight._m0[_2123].x + _559;
        float _2144 = cbLight._m0[_2123].y + _560;
        float _2145 = cbLight._m0[_2123].z + _561;
        float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
        float _2150 = _2149 * _2143;
        float _2151 = _2149 * _2144;
        float _2152 = _2149 * _2145;
        float _2153 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_2123].xyz));
        float _4179 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2156 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2157 = dot(vec3(_479, _480, _481), vec3(_2150, _2151, _2152));
        float _4190 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2160 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2161 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2150, _2151, _2152));
        float _4201 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2165 = _2142 * _2142;
        float _2169 = ((_2160 * _2160) * (_2165 + (-1.0))) + 1.0;
        float _2176 = exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0);
        float _2183 = 1.0 - _2142;
        float _2193 = (0.5 / (((_1919 * ((_2156 * _2183) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2183) + _2142) * _2156))) * _2156;
        float _4212 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2195 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2165 / ((_2169 * _2169) * 3.141590118408203125));
        float _2196 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _2117 = (((((_2176 * _1941) + _644) * cbLight._m0[_2127].x) * _2195) * _2196) + _2053;
        _2119 = (((((_2176 * _1943) + _646) * cbLight._m0[_2127].y) * _2195) * _2196) + _2054;
        _2121 = (((((_2176 * _1944) + _647) * cbLight._m0[_2127].z) * _2195) * _2196) + _2055;
    }
    float _2231;
    float _2233;
    float _2235;
    if (_1845)
    {
        _2231 = _2117;
        _2233 = _2119;
        _2235 = _2121;
    }
    else
    {
        uint _2242 = _1750 + 3u;
        uint _2246 = _1750 + 11u;
        float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _482) * 0.949999988079071044921875);
        float _2261 = _2260 * _2260;
        float _2262 = cbLight._m0[_2242].x + _559;
        float _2263 = cbLight._m0[_2242].y + _560;
        float _2264 = cbLight._m0[_2242].z + _561;
        float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
        float _2269 = _2268 * _2262;
        float _2270 = _2268 * _2263;
        float _2271 = _2268 * _2264;
        float _2272 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_2242].xyz));
        float _4228 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2276 = dot(vec3(_479, _480, _481), vec3(_2269, _2270, _2271));
        float _4239 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2280 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2269, _2270, _2271));
        float _4250 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2284 = _2261 * _2261;
        float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
        float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * 5.0);
        float _2302 = 1.0 - _2261;
        float _2312 = (0.5 / (((_1919 * ((_2275 * _2302) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2302) + _2261) * _2275))) * _2275;
        float _4261 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2314 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
        float _2315 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _2231 = (((((_2295 * _1941) + _644) * cbLight._m0[_2246].x) * _2314) * _2315) + _2117;
        _2233 = (((((_2295 * _1943) + _646) * cbLight._m0[_2246].y) * _2314) * _2315) + _2119;
        _2235 = (((((_2295 * _1944) + _647) * cbLight._m0[_2246].z) * _2314) * _2315) + _2121;
    }
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    if (_1748.y == 0u)
    {
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2390;
        float _2392 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2390;
        float _2393 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2390;
        uvec4 _2405 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2406 = _2405.x;
        uint _2417 = uint((float(_2405.y) * floor(float(uint(cbSceneParam._m0[85u].y * _581) / _2406))) + floor(float(uint(cbSceneParam._m0[85u].x * _580) / _2406)));
        float _2427 = (log2(_2393 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2428 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        uint _2431 = uint(isnan(14.0) ? _2428 : (isnan(_2428) ? 14.0 : min(_2428, 14.0)));
        uvec4 _2436 = texelFetch(g_lightClusterGridBuffer, int(((_2431 << 2u) + (_2417 << 6u)) >> 2u));
        uint _2437 = _2436.x;
        uint _2438 = _2405.z;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        if (((((1u << ((_2438 >> 4u) & 15u)) + 4294967295u) & _2437) == 0u) || ((_2438 & 240u) == 0u))
        {
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
        }
        else
        {
            float _2539;
            float _2541;
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            uint _2697 = 0u;
            uint _2706;
            bool _2707;
            for (;;)
            {
                _2706 = texelFetch(g_lightClassification, int((((_2431 << 5u) + (_2417 << 9u)) + (_2697 << 2u)) >> 2u)).x;
                _2707 = _2706 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2707)
                {
                    frontier_phi_66_pred = _2691;
                    frontier_phi_66_pred_1 = _2696;
                    frontier_phi_66_pred_2 = _2695;
                    frontier_phi_66_pred_3 = _2694;
                    frontier_phi_66_pred_4 = _2693;
                    frontier_phi_66_pred_5 = _2692;
                }
                else
                {
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    uint _2842;
                    _2836 = _2691;
                    _2837 = _2692;
                    _2838 = _2693;
                    _2839 = _2694;
                    _2840 = _2695;
                    _2841 = _2696;
                    _2842 = _2706;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    for (;;)
                    {
                        uint _2846 = uint(findLSB(_2842)) + (_2697 << 5u);
                        uint _2843 = (_2842 + 4294967295u) & _2842;
                        uint _2848 = _2846 * 48u;
                        vec4 _2862 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2848)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 3u)).x));
                        uint _2868 = (_2846 * 48u) + 4u;
                        vec4 _2881 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2868)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 3u)).x));
                        uint _2887 = (_2846 * 48u) + 8u;
                        vec3 _2898 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2887)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 2u)).x));
                        float _2902 = _2862.x - _2391;
                        float _2903 = _2862.y - _2392;
                        float _2904 = _2862.z - _2393;
                        float _2905 = dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904));
                        float _2908 = inversesqrt(_2905);
                        float _2909 = _2908 * _2902;
                        float _2910 = _2908 * _2903;
                        float _2911 = _2908 * _2904;
                        float _2912 = dot(vec3(_601, _604, _607), vec3(_2909, _2910, _2911));
                        float _2917 = 1.0 - (_2905 * _2862.w);
                        float _4287 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2918 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _2919 = sqrt(_2905) * _2881.w;
                        float _2922 = 1.39999997615814208984375 / (_2919 + 1.39999997615814208984375);
                        float _2923 = _2922 * _2922;
                        float _2926 = ((1.0 - _2923) * _2912) + _2923;
                        float _2929 = _2919 * _2919;
                        float _2933 = ((isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0))) * _2918) / ((_2929 * 0.699999988079071044921875) + 1.0);
                        float _2937 = (-0.0) - _2391;
                        float _2938 = (-0.0) - _2392;
                        float _2939 = (-0.0) - _2393;
                        float _2943 = inversesqrt(dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939)));
                        float _2944 = _2943 * _2937;
                        float _2945 = _2943 * _2938;
                        float _2946 = _2943 * _2939;
                        float _2954 = exp2(log2(1.0 / ((_2929 * 3.5) + 5.0)) * 0.25);
                        float _2955 = 1.0 - _676;
                        float _2962 = sqrt(1.0 - ((1.0 - (_2955 * _2955)) * (1.0 - (_2954 * _2954))));
                        float _2963 = _2962 * _2962;
                        float _2964 = _2963 * _2963;
                        float _2965 = _2944 + _2909;
                        float _2966 = _2945 + _2910;
                        float _2967 = _2946 + _2911;
                        float _2971 = inversesqrt(dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967)));
                        float _2975 = dot(vec3(_601, _604, _607), vec3(_2944, _2945, _2946));
                        float _4303 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2978 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _2979 = dot(vec3(_601, _604, _607), vec3(_2971 * _2965, _2971 * _2966, _2971 * _2967));
                        float _4314 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2982 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _2986 = ((_2982 * _2982) * (_2964 + (-1.0))) + 1.0;
                        float _2987 = _2922 * _2963;
                        float _2988 = _2987 * _2987;
                        float _2991 = ((1.0 - _2988) * _2912) + _2988;
                        float _4325 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2992 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _2993 = 1.0 - _2963;
                        float _3003 = (0.5 / (((_2992 * ((_2978 * _2993) + _2963)) + 9.9999999392252902907785028219223e-09) + (((_2992 * _2993) + _2963) * _2978))) * _2992;
                        float _4336 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3014 = (((_2964 * 3.1415927410125732421875) * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) / ((_2986 * _2986) * ((_2929 * 2.1991131305694580078125) + 3.141590118408203125))) * _2918;
                        _2766 = (_2933 * _2881.x) + _2839;
                        _2767 = (_2933 * _2881.y) + _2840;
                        _2768 = (_2933 * _2881.z) + _2841;
                        _2763 = (_3014 * _2898.x) + _2836;
                        _2764 = (_3014 * _2898.y) + _2837;
                        _2765 = (_3014 * _2898.z) + _2838;
                        if (_2843 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2836 = _2763;
                            _2837 = _2764;
                            _2838 = _2765;
                            _2839 = _2766;
                            _2840 = _2767;
                            _2841 = _2768;
                            _2842 = _2843;
                        }
                    }
                    frontier_phi_66_pred = _2763;
                    frontier_phi_66_pred_1 = _2768;
                    frontier_phi_66_pred_2 = _2767;
                    frontier_phi_66_pred_3 = _2766;
                    frontier_phi_66_pred_4 = _2765;
                    frontier_phi_66_pred_5 = _2764;
                }
                _2539 = frontier_phi_66_pred;
                _2549 = frontier_phi_66_pred_1;
                _2547 = frontier_phi_66_pred_2;
                _2545 = frontier_phi_66_pred_3;
                _2543 = frontier_phi_66_pred_4;
                _2541 = frontier_phi_66_pred_5;
                uint _2698 = _2697 + 1u;
                if (_2698 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2691 = _2539;
                    _2692 = _2541;
                    _2693 = _2543;
                    _2694 = _2545;
                    _2695 = _2547;
                    _2696 = _2549;
                    _2697 = _2698;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
        }
        uvec4 _2552 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2553 = _2552.z;
        uint _2555 = (_2553 >> 8u) & 15u;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        if (((4294967295u << _2555) & _2437) == 0u)
        {
            _2659 = _2538;
            _2661 = _2540;
            _2663 = _2542;
            _2665 = _2544;
            _2667 = _2546;
            _2669 = _2548;
        }
        else
        {
            float _2684 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
            float _2685 = _2684 * _2391;
            float _2686 = _2684 * _2392;
            float _2687 = _2684 * _2393;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2555 < ((_2553 >> 12u) & 15u))
            {
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2670;
                float _2819 = _2538;
                float _2820 = _2540;
                float _2821 = _2542;
                float _2822 = _2544;
                float _2823 = _2546;
                float _2824 = _2548;
                uint _2825 = _2555;
                uint _2834;
                bool _2835;
                for (;;)
                {
                    _2834 = texelFetch(g_lightClassification, int((((_2431 << 5u) + (_2417 << 9u)) + (_2825 << 2u)) >> 2u)).x;
                    _2835 = _2834 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2835)
                    {
                        frontier_phi_77_pred = _2824;
                        frontier_phi_77_pred_1 = _2823;
                        frontier_phi_77_pred_2 = _2822;
                        frontier_phi_77_pred_3 = _2821;
                        frontier_phi_77_pred_4 = _2820;
                        frontier_phi_77_pred_5 = _2819;
                    }
                    else
                    {
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3041 = _2819;
                        float _3042 = _2820;
                        float _3043 = _2821;
                        float _3044 = _2822;
                        float _3045 = _2823;
                        float _3046 = _2824;
                        uint _3047 = _2834;
                        uint _3048;
                        vec4 _3073;
                        float _3074;
                        vec4 _3089;
                        vec3 _3101;
                        vec4 _3117;
                        vec4 _3133;
                        float _3179;
                        bool _3180;
                        for (;;)
                        {
                            uint _3058 = ((_2825 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3047));
                            _3048 = (_3047 + 4294967295u) & _3047;
                            uint _3060 = _3058 * 40u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            _3074 = _3073.w;
                            uint _3076 = (_3058 * 40u) + 4u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3091 = (_3058 * 40u) + 8u;
                            _3101 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x));
                            uint _3104 = (_3058 * 40u) + 16u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3120 = (_3058 * 40u) + 20u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3135 = (_3058 * 40u) + 24u;
                            vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3154 = (_3058 * 40u) + 28u;
                            vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            _3179 = fma(_2393, _3167.z, fma(_2392, _3167.y, _3167.x * _2391)) + _3167.w;
                            _3180 = !((fma(_2393, _3148.z, fma(_2392, _3148.y, _3148.x * _2391)) + _3148.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3180)
                            {
                                float _3207 = _3073.x - _2391;
                                float _3208 = _3073.y - _2392;
                                float _3209 = _3073.z - _2393;
                                float _3210 = dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209));
                                float _3213 = inversesqrt(_3210);
                                float _3214 = _3213 * _3207;
                                float _3215 = _3213 * _3208;
                                float _3216 = _3213 * _3209;
                                float _3220 = 1.0 - (_3210 / (_3074 * _3074));
                                float _4347 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3221 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3225 = sqrt(_3210) * _3089.w;
                                float _3227 = 1.39999997615814208984375 / (_3225 + 1.39999997615814208984375);
                                float _3228 = _3227 * _3227;
                                float _3231 = ((1.0 - _3228) * dot(vec3(_3214, _3215, _3216), vec3(_601, _604, _607))) + _3228;
                                float _3234 = _3225 * _3225;
                                float _3238 = (fma(_2393, _3117.z, fma(_2392, _3117.y, _3117.x * _2391)) + _3117.w) / _3179;
                                float _3239 = (fma(_2393, _3133.z, fma(_2392, _3133.y, _3133.x * _2391)) + _3133.w) / _3179;
                                float _3243 = 1.0 - dot(vec2(_3238, _3239), vec2(_3238, _3239));
                                float _4363 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3244 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3245 = _3244 * (((isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0))) * _3221) / ((_3234 * 0.699999988079071044921875) + 1.0));
                                float _3257 = exp2(log2(1.0 / ((_3234 * 3.5) + 5.0)) * 0.25);
                                float _3258 = 1.0 - _676;
                                float _3265 = sqrt(1.0 - ((1.0 - (_3258 * _3258)) * (1.0 - (_3257 * _3257))));
                                float _3266 = _3265 * _3265;
                                float _3267 = _3266 * _3266;
                                float _3268 = _3214 - _2685;
                                float _3269 = _3215 - _2686;
                                float _3270 = _3216 - _2687;
                                float _3274 = inversesqrt(dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270)));
                                float _3278 = dot(vec3(_601, _604, _607), vec3((-0.0) - _2685, (-0.0) - _2686, (-0.0) - _2687));
                                float _4374 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3281 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3282 = dot(vec3(_601, _604, _607), vec3(_3274 * _3268, _3274 * _3269, _3274 * _3270));
                                float _4385 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3285 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3289 = ((_3285 * _3285) * (_3267 + (-1.0))) + 1.0;
                                float _3290 = _3227 * _3266;
                                float _3291 = _3290 * _3290;
                                float _3297 = ((1.0 - _3291) * dot(vec3(_601, _604, _607), vec3(_3214, _3215, _3216))) + _3291;
                                float _4396 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3299 = 1.0 - _3266;
                                float _3309 = (0.5 / (((_3298 * ((_3281 * _3299) + _3266)) + 9.9999999392252902907785028219223e-09) + (((_3298 * _3299) + _3266) * _3281))) * _3298;
                                float _4407 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3319 = (_3244 * _3221) * (((_3267 * 3.1415927410125732421875) * (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) / ((_3289 * _3289) * ((_3234 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3245 * _3089.y;
                                frontier_phi_83_pred_1 = _3245 * _3089.x;
                                frontier_phi_83_pred_2 = _3319 * _3101.z;
                                frontier_phi_83_pred_3 = _3319 * _3101.y;
                                frontier_phi_83_pred_4 = _3319 * _3101.x;
                                frontier_phi_83_pred_5 = _3245 * _3089.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3327 = frontier_phi_83_pred;
                            _3326 = frontier_phi_83_pred_1;
                            _3325 = frontier_phi_83_pred_2;
                            _3324 = frontier_phi_83_pred_3;
                            _3323 = frontier_phi_83_pred_4;
                            _3328 = frontier_phi_83_pred_5;
                            _3031 = _3326 + _3044;
                            _3032 = _3327 + _3045;
                            _3033 = _3328 + _3046;
                            _3028 = _3323 + _3041;
                            _3029 = _3324 + _3042;
                            _3030 = _3325 + _3043;
                            if (_3048 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3048;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3033;
                        frontier_phi_77_pred_1 = _3032;
                        frontier_phi_77_pred_2 = _3031;
                        frontier_phi_77_pred_3 = _3030;
                        frontier_phi_77_pred_4 = _3029;
                        frontier_phi_77_pred_5 = _3028;
                    }
                    _2670 = frontier_phi_77_pred;
                    _2668 = frontier_phi_77_pred_1;
                    _2666 = frontier_phi_77_pred_2;
                    _2664 = frontier_phi_77_pred_3;
                    _2662 = frontier_phi_77_pred_4;
                    _2660 = frontier_phi_77_pred_5;
                    uint _2826 = _2825 + 1u;
                    if (_2826 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2819 = _2660;
                        _2820 = _2662;
                        _2821 = _2664;
                        _2822 = _2666;
                        _2823 = _2668;
                        _2824 = _2670;
                        _2825 = _2826;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2664;
                frontier_phi_58_59_ladder_1 = _2670;
                frontier_phi_58_59_ladder_2 = _2668;
                frontier_phi_58_59_ladder_3 = _2666;
                frontier_phi_58_59_ladder_4 = _2662;
                frontier_phi_58_59_ladder_5 = _2660;
            }
            else
            {
                frontier_phi_58_59_ladder = _2542;
                frontier_phi_58_59_ladder_1 = _2548;
                frontier_phi_58_59_ladder_2 = _2546;
                frontier_phi_58_59_ladder_3 = _2544;
                frontier_phi_58_59_ladder_4 = _2540;
                frontier_phi_58_59_ladder_5 = _2538;
            }
            _2659 = frontier_phi_58_59_ladder_5;
            _2661 = frontier_phi_58_59_ladder_4;
            _2663 = frontier_phi_58_59_ladder;
            _2665 = frontier_phi_58_59_ladder_3;
            _2667 = frontier_phi_58_59_ladder_2;
            _2669 = frontier_phi_58_59_ladder_1;
        }
        float _2674 = isnan(1.0) ? _660 : (isnan(_660) ? 1.0 : min(_660, 1.0));
        _2450 = (_2674 * _2665) + _1883;
        _2452 = (_2674 * _2667) + _1885;
        _2454 = (_2674 * _2669) + _1887;
        _2456 = ((_2659 * _644) * _2674) + _2231;
        _2458 = ((_2661 * _646) * _2674) + _2233;
        _2460 = ((_2663 * _647) * _2674) + _2235;
    }
    else
    {
        _2450 = _1883;
        _2452 = _1885;
        _2454 = _1887;
        _2456 = _2231;
        _2458 = _2233;
        _2460 = _2235;
    }
    float _4423 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4434 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4445 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _2477 = ((isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2450 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _660))) + ((_2456 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1499)) * cbPerFrame._m0[3u].x);
    float _2478 = ((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2452 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _660))) + ((_2458 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1499)) * cbPerFrame._m0[3u].x);
    float _2479 = ((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2454 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _660))) + ((_2460 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1499)) * cbPerFrame._m0[3u].x);
    uint _2480 = _226 + 6u;
    float _2488 = _580 / cbSceneParam._m0[86u].x;
    float _2489 = _581 / cbSceneParam._m0[86u].y;
    vec4 _2503 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2488, _2489, (log2((isnan(cbSceneParam._m0[77u].w) ? _501 : (isnan(_501) ? cbSceneParam._m0[77u].w : min(_501, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2505 = _2503.x;
    float _2506 = _2503.y;
    float _2507 = _2503.z;
    float _2508 = _2503.w;
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    if (_501 > cbSceneParam._m0[78u].w)
    {
        float _2563 = isnan(_501) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _501 : min(cbSceneParam._m0[80u].w, _501));
        float _2564 = _2563 / _501;
        float _2575 = _2564 * _552;
        float _2576 = _553 * _2564;
        float _2577 = (-0.0) - _2576;
        float _2579 = _2564 * _554;
        float _2581 = (cbSceneParam._m0[77u].w * _2577) / _2563;
        float _2582 = _2581 + cbSceneParam._m0[79u].w;
        float _2583 = cbSceneParam._m0[79u].w - _2576;
        float _2589 = sqrt(((_2575 * _2575) + (_2576 * _2576)) + (_2579 * _2579));
        float _2592 = (1.0 - (cbSceneParam._m0[77u].w / _2563)) * _2589;
        float _2597 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2599 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2776;
        if (abs((_2577 - _2581) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2776 = ((((_2582 > 0.0) ? exp2(_2597 * _2582) : (2.0 - exp2(_2599 * _2582))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2592;
        }
        else
        {
            float _2720 = 1.0 / cbSceneParam._m0[80u].x;
            float _2721 = isnan(_2583) ? _2582 : (isnan(_2582) ? _2583 : max(_2582, _2583));
            float _2722 = isnan(_2583) ? _2582 : (isnan(_2582) ? _2583 : min(_2582, _2583));
            float _2731 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : min(_2721, 0.0));
            float _2732 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : min(_2722, 0.0));
            _2776 = ((abs(_2589 / _2577) * cbSceneParam._m0[80u].y) * ((((_2731 - _2732) * 2.0) - ((exp2(_2597 * (isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0)))) - exp2(_2597 * (isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0))))) * _2720)) - ((exp2(_2599 * _2731) - exp2(_2599 * _2732)) * _2720))) + (_2592 * cbSceneParam._m0[80u].z);
        }
        vec4 _2778 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2488, _2489, 1.0), 0.0);
        float _2787 = exp2((_2776 * (-1.44269502162933349609375)) * (1.0 - _2778.w));
        float _2788 = log2(_2787);
        float _2804 = log2(_2508);
        _2601 = (exp2(_2804 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2788 * cbSceneParam._m0[78u].x)) * _2778.x) / cbSceneParam._m0[78u].x)) + _2505;
        _2603 = (exp2(_2804 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2788 * cbSceneParam._m0[78u].y)) * _2778.y) / cbSceneParam._m0[78u].y)) + _2506;
        _2605 = (exp2(_2804 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2788 * cbSceneParam._m0[78u].z)) * _2778.z) / cbSceneParam._m0[78u].z)) + _2507;
        _2607 = _2787 * _2508;
    }
    else
    {
        _2601 = _2505;
        _2603 = _2506;
        _2605 = _2507;
        _2607 = _2508;
    }
    bool _2814;
    vec4 _2617;
    vec4 _2639;
    float _2641;
    float _2645;
    float _2646;
    float _2647;
    float _2648;
    bool _2658;
    for (;;)
    {
        _2617 = cbMatDynParam._m0[0u];
        float _2619 = roundEven(_2617.y);
        bool _2620 = _2619 == 3.0;
        float _2621 = log2(_2607);
        float _2628 = exp2(_2621 * cbSceneParam._m0[78u].x) * _2477;
        float _2629 = exp2(_2621 * cbSceneParam._m0[78u].y) * _2478;
        float _2630 = exp2(_2621 * cbSceneParam._m0[78u].z) * _2479;
        float _2637 = _568 + (-0.5);
        _2639 = cbMtdParam._m0[1u];
        _2641 = _2639.y * _2637;
        float _2644 = (_2619 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2645 = _2644 * (_2620 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2601)));
        _2646 = _2644 * (_2620 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2603)));
        _2647 = _2644 * (_2620 ? _2630 : (_2630 + (cbSceneParam._m0[72u].w * _2605)));
        _2648 = _2637 * 0.999000012874603271484375;
        _2658 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2658)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2648) < 0.5)
            {
                _2814 = true;
                break;
            }
        }
        uint _2755 = _620 + uint(_2617.w);
        if ((cbInstanceData._m0[_2755].w < 1.0) && ((cbInstanceData._m0[_2755].w + _2648) < 0.5))
        {
            _2814 = true;
            break;
        }
        if ((_2641 + 1.0) < _2639.x)
        {
            _2814 = true;
            break;
        }
        _2814 = false;
        break;
    }
    float _3019;
    if (_2814)
    {
        discard_state = true;
        _3019 = 0.0;
    }
    else
    {
        _3019 = cbInstanceData._m0[_2480].w;
    }
    SV_Target.x = _2645;
    SV_Target.y = _2646;
    SV_Target.z = _2647;
    SV_Target.w = _3019;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2480].w;
    discard_exit();
}


