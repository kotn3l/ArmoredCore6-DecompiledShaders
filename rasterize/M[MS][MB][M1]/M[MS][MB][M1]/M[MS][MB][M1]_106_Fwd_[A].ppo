#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1438;
float _3818;
float _3819;
float _3820;
float _3821;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3830 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3841 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3852 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].y) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3863 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _439 = (_432 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _440 = (_432 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _441 = (_432 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _445 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _439;
    float _448 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _440;
    float _451 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _441;
    float _458 = ((_439 - _445) * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) + _445;
    float _459 = ((_440 - _448) * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) + _448;
    float _460 = ((_441 - _451) * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) + _451;
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    float _535 = ((_505.z - _526) * _432) + _526;
    float _538 = ((((_505.x - _524) * _432) + _524) * 2.0) + (-1.0);
    float _539 = ((((_505.y - _525) * _432) + _525) * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3874 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))));
    float _548 = _538 + ((((_478.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _549 = _539 + ((((_478.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _552 = fma(_545, _250, fma(_549, _257, _548 * _243));
    float _555 = fma(_545, _251, fma(_549, _258, _548 * _244));
    float _558 = fma(_545, _252, fma(_549, _259, _548 * _245));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _604 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _606 = _604.x;
    float _607 = 1.0 - _606;
    float _613 = (cbMtdParam._m0[19u].x + dot(vec4(_562 * _552, _562 * _555, _562 * _558, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_606 - _607) * cbMtdParam._m0[24u].z) + _607) * cbMtdParam._m0[21u].z);
    float _3885 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _616 = (-0.0) - cbMtdParam._m0[24u].x;
    float _618 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _618 : (isnan(_618) ? 1.0 : min(_618, 1.0));
    float _626 = _614 - ((_614 * TEXCOORD_8.x) * _619);
    float _627 = _614 - ((_614 * TEXCOORD_8.y) * _619);
    float _628 = _614 - ((_614 * TEXCOORD_8.z) * _619);
    float _635 = (_626 * (cbMtdParam._m0[17u].x - _458)) + _458;
    float _636 = (_627 * (cbMtdParam._m0[17u].y - _459)) + _459;
    float _637 = (_628 * (cbMtdParam._m0[17u].z - _460)) + _460;
    vec4 _649 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _651 = _649.x;
    float _652 = 1.0 - _651;
    float _678 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_651 - _652) * cbMtdParam._m0[24u].w) + _652) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3906 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _679 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _687 = ((((cbMtdParam._m0[10u].x - _635) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _679) + _635;
    float _688 = ((((cbMtdParam._m0[10u].y - _636) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _679) + _636;
    float _689 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _637)) * _679) + _637;
    vec4 _715 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _717 = _715.x;
    float _735 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _300) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _301) + cbTextureTilingScale._m0[9u].w)).x - _717) * _432) + _717;
    float _739 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _735) * cbMtdParam._m0[19u].z) + _735;
    float _741 = _739 - (_739 * _626);
    float _743 = _741 - (_741 * _679);
    float _748 = (((_478.z - _535) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _535;
    vec4 _762 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _769 = (_762.x * 2.0) + (-1.0);
    float _770 = (_762.y * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _3917 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _779 = ((_762.z - _748) * _626) + _748;
    float _782 = ((cbMtdParam._m0[23u].y - _779) * _679) + _779;
    vec4 _801 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _807 = (_801.x * 2.0) + (-1.0);
    float _808 = (_801.y * 2.0) + (-1.0);
    float _809 = dot(vec2(_807, _808), vec2(_807, _808));
    float _3928 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _824 = ((sqrt(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) - _545) * _628) + _545;
    float _827 = (((_769 - _548) * _626) + _548) + (cbMtdParam._m0[21u].x * _548);
    float _828 = (((_770 - _549) * _627) + _549) + (cbMtdParam._m0[21u].x * _549);
    float _839 = (((_807 - _827) + (_827 * cbMtdParam._m0[22u].z)) * _679) + _827;
    float _840 = (((_808 - _828) + (_828 * cbMtdParam._m0[22u].z)) * _679) + _828;
    float _841 = (_679 * (sqrt(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) - _824)) + _824;
    float _845 = cbMtdParam._m0[22u].x + _578.w;
    float _848 = fma(_841, _250, fma(_840, _257, _839 * _243));
    float _851 = fma(_841, _251, fma(_840, _258, _839 * _244));
    float _854 = fma(_841, _252, fma(_840, _259, _839 * _245));
    float _858 = inversesqrt(dot(vec3(_848, _851, _854), vec3(_848, _851, _854)));
    float _859 = _858 * _848;
    float _860 = _858 * _851;
    float _861 = _858 * _854;
    float _3939 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _862 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _3961 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3972 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _3983 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3994 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _867 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _881 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _931 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _921);
    float _932 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _921);
    float _933 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _921);
    float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
    float _938 = _931 * _937;
    float _939 = _932 * _937;
    float _940 = _933 * _937;
    vec4 _945 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _947 = _945.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1119 = sqrt(((_931 * _931) + (_932 * _932)) + (_933 * _933));
        float _1125 = (cbMatDynParam._m0[5u].x * _1119) + cbMatDynParam._m0[5u].y;
        float _4005 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1130 = (cbMatDynParam._m0[5u].z * _1119) + cbMatDynParam._m0[5u].w;
        float _4016 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) - _1126)) + _1126) < ((_947 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _958 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _959 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _977 = fma(_861, cbSceneParam._m0[5u].z, fma(_860, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _859));
    float _980 = fma(_861, cbSceneParam._m0[6u].z, fma(_860, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _859));
    float _983 = fma(_861, cbSceneParam._m0[7u].z, fma(_860, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _859));
    uint _996 = _281 + 9u;
    uint _997 = _996 + uint(cbMatDynParam._m0[0u].w);
    float _1003 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * cbInstanceData._m0[_997].x;
    float _1004 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * cbInstanceData._m0[_997].y;
    float _1005 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * cbInstanceData._m0[_997].z;
    float _4027 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _4049 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _1009 = 1.0 - _867;
    float _1010 = _1006 * _1009;
    float _1011 = _1007 * _1009;
    float _1012 = _1008 * _1009;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _867;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _867;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _867;
    float _1020 = _1017 + 0.039999999105930328369140625;
    float _1022 = _1018 + 0.039999999105930328369140625;
    float _1023 = _1019 + 0.039999999105930328369140625;
    vec4 _1032 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _958, cbSceneParam._m0[86u].y * _959));
    float _1036 = ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * TEXCOORD_5.w) * _1032.x;
    float _1037 = dot(vec3(_859, _860, _861), vec3(_938, _939, _940));
    float _1040 = _1037 * 2.0;
    float _1044 = (_1040 * _859) - _938;
    float _1045 = (_1040 * _860) - _939;
    float _1046 = (_1040 * _861) - _940;
    float _1050 = abs(dot(vec3(_938, _939, _940), vec3(_859, _860, _861)));
    float _4060 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1052 = sqrt(_862);
    float _1065 = exp2((_1052 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1052 * 3.0));
    float _1071 = (1.0 - _1065) * ((_1052 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1072 = _1065 * _1052;
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1437;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1162 = fma(_1108, cbModelParam._m0[26u].z, fma(_1104, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1100));
        float _1166 = fma(_1108, cbModelParam._m0[27u].z, fma(_1104, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1100));
        float _1170 = fma(_1108, cbModelParam._m0[28u].z, fma(_1104, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1100));
        float _1195 = _1100 + _859;
        float _1196 = _1104 + _860;
        float _1197 = _1108 + _861;
        float _1207 = fma(_1197, cbModelParam._m0[26u].z, fma(_1196, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1195)) - _1162;
        float _1208 = fma(_1197, cbModelParam._m0[27u].z, fma(_1196, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1195)) - _1166;
        float _1209 = fma(_1197, cbModelParam._m0[28u].z, fma(_1196, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1195)) - _1170;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1162 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1166 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[34u].z) + ((((((_1170 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1265 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1231.x + (-0.5));
        float _1267 = _1265 * (_1231.y + (-0.5));
        float _1268 = _1265 * (_1231.z + (-0.5));
        float _1275 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1238.x + (-0.5));
        float _1277 = _1275 * (_1238.y + (-0.5));
        float _1278 = _1275 * (_1238.z + (-0.5));
        float _1285 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1245.x + (-0.5));
        float _1287 = _1285 * (_1245.y + (-0.5));
        float _1288 = _1285 * (_1245.z + (-0.5));
        float _1295 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1252.x + (-0.5));
        float _1297 = _1295 * (_1252.y + (-0.5));
        float _1298 = _1295 * (_1252.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1319 = (dot(vec3(_859, _860, _861), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1329 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4108 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1331 + 1.0))) + _1336) * _1299;
        float _1346 = _1267 * 0.5;
        float _1347 = _1277 * 0.5;
        float _1348 = _1287 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_859, _860, _861), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4141 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1373 + 1.0))) + _1378) * _1300;
        float _1388 = _1268 * 0.5;
        float _1389 = _1278 * 0.5;
        float _1390 = _1288 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_859, _860, _861), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4174 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1415 + 1.0))) + _1420) * _1301;
        _1437 = _1268;
        _1439 = _1267;
        _1440 = _1266;
        _1441 = _1278;
        _1442 = _1277;
        _1443 = _1276;
        _1444 = _1288;
        _1445 = _1287;
        _1446 = _1286;
        _1447 = _1301;
        _1448 = _1300;
        _1449 = _1299;
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1438;
        _1439 = _1438;
        _1440 = _1438;
        _1441 = _1438;
        _1442 = _1438;
        _1443 = _1438;
        _1444 = _1438;
        _1445 = _1438;
        _1446 = _1438;
        _1447 = _1438;
        _1448 = _1438;
        _1449 = _1438;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1480 = fma(_1108, cbModelParam._m0[30u].z, fma(_1104, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1100));
        float _1484 = fma(_1108, cbModelParam._m0[31u].z, fma(_1104, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1100));
        float _1488 = fma(_1108, cbModelParam._m0[32u].z, fma(_1104, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1100));
        float _1511 = _1100 + _859;
        float _1512 = _1104 + _860;
        float _1513 = _1108 + _861;
        float _1523 = fma(_1513, cbModelParam._m0[30u].z, fma(_1512, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1511)) - _1480;
        float _1524 = fma(_1513, cbModelParam._m0[31u].z, fma(_1512, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1511)) - _1484;
        float _1525 = fma(_1513, cbModelParam._m0[32u].z, fma(_1512, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1511)) - _1488;
        float _1529 = inversesqrt(dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525)));
        float _1542 = ((_1529 * _1523) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1480 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1543 = ((_1529 * _1524) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1484 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1544 = ((_1529 * _1525) / cbModelParam._m0[35u].z) + ((((((_1488 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        float _1579 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1546.x + (-0.5));
        float _1581 = _1579 * (_1546.y + (-0.5));
        float _1582 = _1579 * (_1546.z + (-0.5));
        float _1589 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1553.x + (-0.5));
        float _1591 = _1589 * (_1553.y + (-0.5));
        float _1592 = _1589 * (_1553.z + (-0.5));
        float _1599 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1560.x + (-0.5));
        float _1601 = _1599 * (_1560.y + (-0.5));
        float _1602 = _1599 * (_1560.z + (-0.5));
        float _1609 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1567.x + (-0.5));
        float _1611 = _1609 * (_1567.y + (-0.5));
        float _1612 = _1609 * (_1567.z + (-0.5));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = _1580 * 0.5;
        float _1617 = _1590 * 0.5;
        float _1618 = _1600 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_859, _860, _861), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4237 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1643 + 1.0))) + _1648) * _1613;
        float _1658 = _1581 * 0.5;
        float _1659 = _1591 * 0.5;
        float _1660 = _1601 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_859, _860, _861), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4270 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1685 + 1.0))) + _1690) * _1614;
        float _1700 = _1582 * 0.5;
        float _1701 = _1592 * 0.5;
        float _1702 = _1602 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_859, _860, _861), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4303 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1727 + 1.0))) + _1732) * _1615;
        _1749 = _1582;
        _1750 = _1581;
        _1751 = _1580;
        _1752 = _1592;
        _1753 = _1591;
        _1754 = _1590;
        _1755 = _1602;
        _1756 = _1601;
        _1757 = _1600;
        _1758 = _1615;
        _1759 = _1614;
        _1760 = _1613;
        _1761 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
        _1762 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
        _1763 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
    }
    else
    {
        _1749 = _1438;
        _1750 = _1438;
        _1751 = _1438;
        _1752 = _1438;
        _1753 = _1438;
        _1754 = _1438;
        _1755 = _1438;
        _1756 = _1438;
        _1757 = _1438;
        _1758 = _1438;
        _1759 = _1438;
        _1760 = _1438;
        _1761 = 0.0;
        _1762 = 0.0;
        _1763 = 0.0;
    }
    float _1773 = (cbModelParam._m0[1u].x * (_1761 - _1450)) + _1450;
    float _1774 = (cbModelParam._m0[1u].x * (_1762 - _1451)) + _1451;
    float _1775 = (cbModelParam._m0[1u].x * (_1763 - _1452)) + _1452;
    float _1796 = fma(_1775, cbSceneParam._m0[89u].z, fma(_1774, cbSceneParam._m0[89u].y, _1773 * cbSceneParam._m0[89u].x));
    float _1799 = fma(_1775, cbSceneParam._m0[90u].z, fma(_1774, cbSceneParam._m0[90u].y, _1773 * cbSceneParam._m0[90u].x));
    float _1802 = fma(_1775, cbSceneParam._m0[91u].z, fma(_1774, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1773));
    float _1817 = _1044 * 0.5;
    float _1818 = _1045 * 0.5;
    float _1819 = _1046 * 0.5;
    float _1820 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1751, _1754, _1757, _1760));
    float _1823 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1750, _1753, _1756, _1759));
    float _1826 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1749, _1752, _1755, _1758));
    float _1860;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1833 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1437, _1441, _1444, _1447));
        float _1837 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1841 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1440, _1443, _1446, _1449));
        float _1848 = dot(vec4(cbModelParam._m0[39u]), vec4(_1817, _1818, _1819, 1.0));
        _1860 = dot(vec3(isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1848) ? 0.0 : (isnan(0.0) ? _1848 : max(0.0, _1848))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1860 = 1.0;
    }
    float _1871;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1862 = dot(vec4(cbModelParam._m0[40u]), vec4(_1817, _1818, _1819, 1.0));
        _1871 = dot(vec3(isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1862) ? 0.0 : (isnan(0.0) ? _1862 : max(0.0, _1862))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1871 = 1.0;
    }
    float _1875 = (_1871 * cbModelParam._m0[1u].x) + (_1860 * (1.0 - cbModelParam._m0[1u].x));
    float _1885 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _862);
    float _1886 = isnan(_1885) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1885 : min(cbModelParam._m0[25u].z, _1885));
    float _1967;
    float _1969;
    float _1971;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1934 = fma(_1108, cbModelParam._m0[13u].z, fma(_1104, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1100)) + cbModelParam._m0[13u].w;
        float _1938 = fma(_1108, cbModelParam._m0[14u].z, fma(_1104, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1100)) + cbModelParam._m0[14u].w;
        float _1942 = fma(_1108, cbModelParam._m0[15u].z, fma(_1104, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1100)) + cbModelParam._m0[15u].w;
        float _1945 = fma(_1046, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044));
        float _1948 = fma(_1046, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044));
        float _1951 = fma(_1046, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044));
        float _1979;
        if (_1945 > 0.0)
        {
            _1979 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1979 = frontier_phi_17_15_ladder;
        }
        float _2182;
        if (_1948 > 0.0)
        {
            _2182 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2182 = frontier_phi_26_22_ladder;
        }
        float _2436;
        if (_1951 > 0.0)
        {
            _2436 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2436 = frontier_phi_38_33_ladder;
        }
        float _2438 = isnan(_2182) ? _1979 : (isnan(_1979) ? _2182 : min(_1979, _2182));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1945) + _1934;
        float _2444 = (_2439 * _1948) + _1938;
        float _2445 = (_2439 * _1951) + _1942;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2446;
        float _2450 = _2446 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 > _2450) || ((_2444 < _2448) || ((_2443 < _2448) || (_2443 > _2450))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2445, cbModelParam._m0[9u].z, fma(_2444, cbModelParam._m0[9u].y, _2443 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2445, cbModelParam._m0[10u].z, fma(_2444, cbModelParam._m0[10u].y, _2443 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2445, cbModelParam._m0[11u].z, fma(_2444, cbModelParam._m0[11u].y, _2443 * cbModelParam._m0[11u].x))), _1886);
            frontier_phi_16_38_ladder = _2573.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2573.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2573.x * cbModelParam._m0[1u].y;
        }
        _1967 = frontier_phi_16_38_ladder_2;
        _1969 = frontier_phi_16_38_ladder_1;
        _1971 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1955 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1044, _1045, _1046), _1886);
        _1967 = _1955.x * cbModelParam._m0[1u].y;
        _1969 = _1955.y * cbModelParam._m0[1u].y;
        _1971 = _1955.z * cbModelParam._m0[1u].y;
    }
    float _1975 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _862);
    float _1976 = isnan(_1975) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1975 : min(cbModelParam._m0[25u].w, _1975));
    float _2066;
    float _2068;
    float _2070;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2030 = fma(_1108, cbModelParam._m0[21u].z, fma(_1104, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1100)) + cbModelParam._m0[21u].w;
        float _2034 = fma(_1108, cbModelParam._m0[22u].z, fma(_1104, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1100)) + cbModelParam._m0[22u].w;
        float _2038 = fma(_1108, cbModelParam._m0[23u].z, fma(_1104, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1100)) + cbModelParam._m0[23u].w;
        float _2041 = fma(_1046, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044));
        float _2044 = fma(_1046, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044));
        float _2047 = fma(_1046, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044));
        float _2187;
        if (_2041 > 0.0)
        {
            _2187 = abs((1.0 - _2030) / _2041);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2030 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2187 = frontier_phi_28_24_ladder;
        }
        float _2463;
        if (_2044 > 0.0)
        {
            _2463 = abs((1.0 - _2034) / _2044);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2034 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2463 = frontier_phi_40_35_ladder;
        }
        float _2676;
        if (_2047 > 0.0)
        {
            _2676 = abs((1.0 - _2038) / _2047);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2038 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2676 = frontier_phi_49_46_ladder;
        }
        float _2678 = isnan(_2463) ? _2187 : (isnan(_2187) ? _2463 : min(_2187, _2463));
        float _2679 = isnan(_2676) ? _2678 : (isnan(_2678) ? _2676 : min(_2678, _2676));
        float _2683 = (_2679 * _2041) + _2030;
        float _2684 = (_2679 * _2044) + _2034;
        float _2685 = (_2679 * _2047) + _2038;
        float _2686 = _2679 * 9.9999997473787516355514526367188e-05;
        float _2687 = (-1.0) - _2686;
        float _2689 = _2686 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2685 > _2689) || ((_2685 < _2687) || ((_2684 > _2689) || ((_2684 < _2687) || ((_2683 < _2687) || (_2683 > _2689))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2685, cbModelParam._m0[17u].z, fma(_2684, cbModelParam._m0[17u].y, _2683 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2685, cbModelParam._m0[18u].z, fma(_2684, cbModelParam._m0[18u].y, _2683 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2685, cbModelParam._m0[19u].z, fma(_2684, cbModelParam._m0[19u].y, _2683 * cbModelParam._m0[19u].x))), _1976);
            frontier_phi_25_49_ladder = _2884.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2884.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2884.x * cbModelParam._m0[1u].z;
        }
        _2066 = frontier_phi_25_49_ladder_2;
        _2068 = frontier_phi_25_49_ladder_1;
        _2070 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2050 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1044, _1045, _1046), _1976);
        _2066 = _2050.x * cbModelParam._m0[1u].z;
        _2068 = _2050.y * cbModelParam._m0[1u].z;
        _2070 = _2050.z * cbModelParam._m0[1u].z;
    }
    float _2083 = (((_1071 * _1020) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2066 - _1967)) + _1967);
    float _2085 = (((_1071 * _1022) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2068 - _1969)) + _1969);
    float _2087 = (((_1071 * _1023) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2070 - _1971)) + _1971);
    float _2090 = fma(_2087, cbSceneParam._m0[89u].z, fma(_2085, cbSceneParam._m0[89u].y, _2083 * cbSceneParam._m0[89u].x));
    float _2093 = fma(_2087, cbSceneParam._m0[90u].z, fma(_2085, cbSceneParam._m0[90u].y, _2083 * cbSceneParam._m0[90u].x));
    float _2096 = fma(_2087, cbSceneParam._m0[91u].z, fma(_2085, cbSceneParam._m0[91u].y, _2083 * cbSceneParam._m0[91u].x));
    uvec4 _2106 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2108 = _2106.x * 14u;
    uint _2109 = _2108 + 13u;
    float _2116 = _1036 + (-1.0);
    float _2121 = (cbLight._m0[_2109].x * _2116) + 1.0;
    float _2122 = (cbLight._m0[_2109].y * _2116) + 1.0;
    float _2123 = (cbLight._m0[_2109].z * _2116) + 1.0;
    float _2124 = (cbLight._m0[_2109].w * _2116) + 1.0;
    uint _2125 = _2108 + 5u;
    float _2131 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
    uint _2135 = _2108 + 4u;
    float _2141 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    uint _2145 = _2108 | 1u;
    float _2156 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_859, _860, _861));
    float _2159 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_859, _860, _861));
    float _4439 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _4450 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2164 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * 0.3183098733425140380859375;
    float _2166 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * 0.3183098733425140380859375;
    float _2173 = ((cbLight._m0[_2125].x * _2131) * _2166) + ((cbLight._m0[_2135].x * _2141) * _2164);
    float _2174 = ((_2131 * cbLight._m0[_2125].y) * _2166) + ((_2141 * cbLight._m0[_2135].y) * _2164);
    float _2175 = ((_2131 * cbLight._m0[_2125].z) * _2166) + ((_2141 * cbLight._m0[_2135].z) * _2164);
    uvec4 _2179 = floatBitsToUint(cbLight._m0[_2108 + 12u]);
    bool _2181 = _2179.x == 0u;
    float _2192;
    float _2194;
    float _2196;
    if (_2181)
    {
        _2192 = _2173;
        _2194 = _2174;
        _2196 = _2175;
    }
    else
    {
        uint _2200 = _2108 + 6u;
        float _2216 = (dot(vec3(cbLight._m0[_2108 + 2u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2217 = _2216 * _2216;
        float _4461 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2218 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2219 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2192 = (((cbLight._m0[_2200].x * 0.3183098733425140380859375) * _2218) * _2219) + _2173;
        _2194 = (((cbLight._m0[_2200].y * 0.3183098733425140380859375) * _2218) * _2219) + _2174;
        _2196 = (((cbLight._m0[_2200].z * 0.3183098733425140380859375) * _2218) * _2219) + _2175;
    }
    bool _2199 = _2179.y == 0u;
    float _2237;
    float _2239;
    float _2241;
    if (_2199)
    {
        _2237 = _2192;
        _2239 = _2194;
        _2241 = _2196;
    }
    else
    {
        uint _2407 = _2108 + 7u;
        float _2423 = (dot(vec3(cbLight._m0[_2108 + 3u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2424 = _2423 * _2423;
        float _4477 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2425 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2426 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2237 = (((cbLight._m0[_2407].x * 0.3183098733425140380859375) * _2425) * _2426) + _2192;
        _2239 = (((cbLight._m0[_2407].y * 0.3183098733425140380859375) * _2425) * _2426) + _2194;
        _2241 = (((cbLight._m0[_2407].z * 0.3183098733425140380859375) * _2425) * _2426) + _2196;
    }
    uint _2244 = _2108 + 8u;
    float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _862) * 0.949999988079071044921875);
    float _2258 = _2257 * _2257;
    float _2259 = cbLight._m0[_2108].x + _938;
    float _2260 = cbLight._m0[_2108].y + _939;
    float _2261 = cbLight._m0[_2108].z + _940;
    float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
    float _2266 = _2265 * _2259;
    float _2267 = _2265 * _2260;
    float _2268 = _2265 * _2261;
    float _2269 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2108].xyz));
    float _4493 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _4504 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _2273 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2274 = dot(vec3(_859, _860, _861), vec3(_2266, _2267, _2268));
    float _4515 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2278 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2266, _2267, _2268));
    float _4526 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2282 = _2258 * _2258;
    float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
    float _2294 = exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0);
    float _2295 = 0.959999978542327880859375 - _1017;
    float _2297 = 0.959999978542327880859375 - _1018;
    float _2298 = 0.959999978542327880859375 - _1019;
    float _2305 = 1.0 - _2258;
    float _2316 = (0.5 / (((_2273 * ((_2272 * _2305) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2305) + _2258) * _2272))) * _2272;
    float _4537 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2318 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
    uint _2329 = _2108 + 9u;
    float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _862) * 0.949999988079071044921875);
    float _2341 = _2340 * _2340;
    float _2342 = cbLight._m0[_2145].x + _938;
    float _2343 = cbLight._m0[_2145].y + _939;
    float _2344 = cbLight._m0[_2145].z + _940;
    float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
    float _2349 = _2348 * _2342;
    float _2350 = _2348 * _2343;
    float _2351 = _2348 * _2344;
    float _2352 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2145].xyz));
    float _4548 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2356 = dot(vec3(_859, _860, _861), vec3(_2349, _2350, _2351));
    float _4559 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2360 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2349, _2350, _2351));
    float _4570 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2364 = _2341 * _2341;
    float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
    float _2375 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
    float _2382 = 1.0 - _2341;
    float _2392 = (0.5 / (((_2273 * ((_2355 * _2382) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2382) + _2341) * _2355))) * _2355;
    float _4581 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2394 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
    float _2404 = (((((_2375 * _2295) + _1020) * cbLight._m0[_2329].x) * _2394) * _2131) + (((((_2294 * _2295) + _1020) * cbLight._m0[_2244].x) * _2318) * _2141);
    float _2405 = (((((_2375 * _2297) + _1022) * cbLight._m0[_2329].y) * _2394) * _2131) + (((((_2294 * _2297) + _1022) * cbLight._m0[_2244].y) * _2318) * _2141);
    float _2406 = (((((_2375 * _2298) + _1023) * cbLight._m0[_2329].z) * _2394) * _2131) + (((((_2294 * _2298) + _1023) * cbLight._m0[_2244].z) * _2318) * _2141);
    float _2468;
    float _2470;
    float _2472;
    if (_2181)
    {
        _2468 = _2404;
        _2470 = _2405;
        _2472 = _2406;
    }
    else
    {
        uint _2474 = _2108 + 2u;
        uint _2478 = _2108 + 10u;
        float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _862) * 0.949999988079071044921875);
        float _2493 = _2492 * _2492;
        float _2494 = cbLight._m0[_2474].x + _938;
        float _2495 = cbLight._m0[_2474].y + _939;
        float _2496 = cbLight._m0[_2474].z + _940;
        float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
        float _2501 = _2500 * _2494;
        float _2502 = _2500 * _2495;
        float _2503 = _2500 * _2496;
        float _2504 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2474].xyz));
        float _4592 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2508 = dot(vec3(_859, _860, _861), vec3(_2501, _2502, _2503));
        float _4603 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2512 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2501, _2502, _2503));
        float _4614 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2516 = _2493 * _2493;
        float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
        float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
        float _2534 = 1.0 - _2493;
        float _2544 = (0.5 / (((_2273 * ((_2507 * _2534) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2534) + _2493) * _2507))) * _2507;
        float _4625 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2546 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
        float _2547 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2468 = (((((_2527 * _2295) + _1020) * cbLight._m0[_2478].x) * _2546) * _2547) + _2404;
        _2470 = (((((_2527 * _2297) + _1022) * cbLight._m0[_2478].y) * _2546) * _2547) + _2405;
        _2472 = (((((_2527 * _2298) + _1023) * cbLight._m0[_2478].z) * _2546) * _2547) + _2406;
    }
    float _2582;
    float _2584;
    float _2586;
    if (_2199)
    {
        _2582 = _2468;
        _2584 = _2470;
        _2586 = _2472;
    }
    else
    {
        uint _2593 = _2108 + 3u;
        uint _2597 = _2108 + 11u;
        float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2593].w)) * _862) * 0.949999988079071044921875);
        float _2612 = _2611 * _2611;
        float _2613 = cbLight._m0[_2593].x + _938;
        float _2614 = cbLight._m0[_2593].y + _939;
        float _2615 = cbLight._m0[_2593].z + _940;
        float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
        float _2620 = _2619 * _2613;
        float _2621 = _2619 * _2614;
        float _2622 = _2619 * _2615;
        float _2623 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2593].xyz));
        float _4641 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2627 = dot(vec3(_859, _860, _861), vec3(_2620, _2621, _2622));
        float _4652 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2631 = dot(vec3(cbLight._m0[_2593].xyz), vec3(_2620, _2621, _2622));
        float _4663 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2635 = _2612 * _2612;
        float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
        float _2646 = exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0);
        float _2653 = 1.0 - _2612;
        float _2663 = (0.5 / (((_2273 * ((_2626 * _2653) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2653) + _2612) * _2626))) * _2626;
        float _4674 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2665 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
        float _2666 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2582 = (((((_2646 * _2295) + _1020) * cbLight._m0[_2597].x) * _2665) * _2666) + _2468;
        _2584 = (((((_2646 * _2297) + _1022) * cbLight._m0[_2597].y) * _2665) * _2666) + _2470;
        _2586 = (((((_2646 * _2298) + _1023) * cbLight._m0[_2597].z) * _2665) * _2666) + _2472;
    }
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    if (_2106.y == 0u)
    {
        float _2741 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2742 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2741;
        float _2743 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2741;
        float _2744 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2741;
        uvec4 _2756 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2757 = _2756.x;
        uint _2768 = uint((float(_2756.y) * floor(float(uint(cbSceneParam._m0[85u].y * _959) / _2757))) + floor(float(uint(cbSceneParam._m0[85u].x * _958) / _2757)));
        float _2778 = (log2(_2744 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2779 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        uint _2782 = uint(isnan(14.0) ? _2779 : (isnan(_2779) ? 14.0 : min(_2779, 14.0)));
        uvec4 _2787 = texelFetch(g_lightClusterGridBuffer, int(((_2782 << 2u) + (_2768 << 6u)) >> 2u));
        uint _2788 = _2787.x;
        uint _2789 = _2756.z;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        if (((((1u << ((_2789 >> 4u) & 15u)) + 4294967295u) & _2788) == 0u) || ((_2789 & 240u) == 0u))
        {
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
        }
        else
        {
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            uint _3047 = 0u;
            uint _3056;
            bool _3057;
            for (;;)
            {
                _3056 = texelFetch(g_lightClassification, int((((_2782 << 5u) + (_2768 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                _3057 = _3056 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3057)
                {
                    frontier_phi_66_pred = _3041;
                    frontier_phi_66_pred_1 = _3046;
                    frontier_phi_66_pred_2 = _3045;
                    frontier_phi_66_pred_3 = _3044;
                    frontier_phi_66_pred_4 = _3043;
                    frontier_phi_66_pred_5 = _3042;
                }
                else
                {
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    uint _3192;
                    _3186 = _3041;
                    _3187 = _3042;
                    _3188 = _3043;
                    _3189 = _3044;
                    _3190 = _3045;
                    _3191 = _3046;
                    _3192 = _3056;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    for (;;)
                    {
                        uint _3196 = uint(findLSB(_3192)) + (_3047 << 5u);
                        uint _3193 = (_3192 + 4294967295u) & _3192;
                        uint _3198 = _3196 * 48u;
                        vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 3u)).x));
                        uint _3218 = (_3196 * 48u) + 4u;
                        vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3218)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 3u)).x));
                        uint _3237 = (_3196 * 48u) + 8u;
                        vec3 _3248 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x));
                        float _3252 = _3212.x - _2742;
                        float _3253 = _3212.y - _2743;
                        float _3254 = _3212.z - _2744;
                        float _3255 = dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254));
                        float _3258 = inversesqrt(_3255);
                        float _3259 = _3258 * _3252;
                        float _3260 = _3258 * _3253;
                        float _3261 = _3258 * _3254;
                        float _3262 = dot(vec3(_977, _980, _983), vec3(_3259, _3260, _3261));
                        float _3267 = 1.0 - (_3255 * _3212.w);
                        float _4700 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3268 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3269 = sqrt(_3255) * _3231.w;
                        float _3272 = 1.39999997615814208984375 / (_3269 + 1.39999997615814208984375);
                        float _3273 = _3272 * _3272;
                        float _3276 = ((1.0 - _3273) * _3262) + _3273;
                        float _3279 = _3269 * _3269;
                        float _3283 = ((isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0))) * _3268) / ((_3279 * 0.699999988079071044921875) + 1.0);
                        float _3287 = (-0.0) - _2742;
                        float _3288 = (-0.0) - _2743;
                        float _3289 = (-0.0) - _2744;
                        float _3293 = inversesqrt(dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289)));
                        float _3294 = _3293 * _3287;
                        float _3295 = _3293 * _3288;
                        float _3296 = _3293 * _3289;
                        float _3304 = exp2(log2(1.0 / ((_3279 * 3.5) + 5.0)) * 0.25);
                        float _3305 = 1.0 - _1052;
                        float _3312 = sqrt(1.0 - ((1.0 - (_3305 * _3305)) * (1.0 - (_3304 * _3304))));
                        float _3313 = _3312 * _3312;
                        float _3314 = _3313 * _3313;
                        float _3315 = _3294 + _3259;
                        float _3316 = _3295 + _3260;
                        float _3317 = _3296 + _3261;
                        float _3321 = inversesqrt(dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317)));
                        float _3325 = dot(vec3(_977, _980, _983), vec3(_3294, _3295, _3296));
                        float _4716 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3328 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3329 = dot(vec3(_977, _980, _983), vec3(_3321 * _3315, _3321 * _3316, _3321 * _3317));
                        float _4727 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3332 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3336 = ((_3332 * _3332) * (_3314 + (-1.0))) + 1.0;
                        float _3337 = _3272 * _3313;
                        float _3338 = _3337 * _3337;
                        float _3341 = ((1.0 - _3338) * _3262) + _3338;
                        float _4738 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3342 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3343 = 1.0 - _3313;
                        float _3353 = (0.5 / (((_3342 * ((_3328 * _3343) + _3313)) + 9.9999999392252902907785028219223e-09) + (((_3342 * _3343) + _3313) * _3328))) * _3342;
                        float _4749 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3364 = (((_3314 * 3.1415927410125732421875) * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) / ((_3336 * _3336) * ((_3279 * 2.1991131305694580078125) + 3.141590118408203125))) * _3268;
                        _3116 = (_3283 * _3231.x) + _3189;
                        _3117 = (_3283 * _3231.y) + _3190;
                        _3118 = (_3283 * _3231.z) + _3191;
                        _3113 = (_3364 * _3248.x) + _3186;
                        _3114 = (_3364 * _3248.y) + _3187;
                        _3115 = (_3364 * _3248.z) + _3188;
                        if (_3193 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3186 = _3113;
                            _3187 = _3114;
                            _3188 = _3115;
                            _3189 = _3116;
                            _3190 = _3117;
                            _3191 = _3118;
                            _3192 = _3193;
                        }
                    }
                    frontier_phi_66_pred = _3113;
                    frontier_phi_66_pred_1 = _3118;
                    frontier_phi_66_pred_2 = _3117;
                    frontier_phi_66_pred_3 = _3116;
                    frontier_phi_66_pred_4 = _3115;
                    frontier_phi_66_pred_5 = _3114;
                }
                _2890 = frontier_phi_66_pred;
                _2900 = frontier_phi_66_pred_1;
                _2898 = frontier_phi_66_pred_2;
                _2896 = frontier_phi_66_pred_3;
                _2894 = frontier_phi_66_pred_4;
                _2892 = frontier_phi_66_pred_5;
                uint _3048 = _3047 + 1u;
                if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3041 = _2890;
                    _3042 = _2892;
                    _3043 = _2894;
                    _3044 = _2896;
                    _3045 = _2898;
                    _3046 = _2900;
                    _3047 = _3048;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
        }
        uvec4 _2903 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2904 = _2903.z;
        uint _2906 = (_2904 >> 8u) & 15u;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        if (((4294967295u << _2906) & _2788) == 0u)
        {
            _3009 = _2889;
            _3011 = _2891;
            _3013 = _2893;
            _3015 = _2895;
            _3017 = _2897;
            _3019 = _2899;
        }
        else
        {
            float _3034 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
            float _3035 = _3034 * _2742;
            float _3036 = _3034 * _2743;
            float _3037 = _3034 * _2744;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2906 < ((_2904 >> 12u) & 15u))
            {
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3169 = _2889;
                float _3170 = _2891;
                float _3171 = _2893;
                float _3172 = _2895;
                float _3173 = _2897;
                float _3174 = _2899;
                uint _3175 = _2906;
                uint _3184;
                bool _3185;
                for (;;)
                {
                    _3184 = texelFetch(g_lightClassification, int((((_2782 << 5u) + (_2768 << 9u)) + (_3175 << 2u)) >> 2u)).x;
                    _3185 = _3184 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3185)
                    {
                        frontier_phi_77_pred = _3174;
                        frontier_phi_77_pred_1 = _3173;
                        frontier_phi_77_pred_2 = _3172;
                        frontier_phi_77_pred_3 = _3171;
                        frontier_phi_77_pred_4 = _3170;
                        frontier_phi_77_pred_5 = _3169;
                    }
                    else
                    {
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3391 = _3169;
                        float _3392 = _3170;
                        float _3393 = _3171;
                        float _3394 = _3172;
                        float _3395 = _3173;
                        float _3396 = _3174;
                        uint _3397 = _3184;
                        uint _3398;
                        vec4 _3423;
                        float _3424;
                        vec4 _3439;
                        vec3 _3451;
                        vec4 _3466;
                        vec4 _3481;
                        float _3527;
                        bool _3528;
                        for (;;)
                        {
                            uint _3408 = ((_3175 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3397));
                            _3398 = (_3397 + 4294967295u) & _3397;
                            uint _3410 = _3408 * 40u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            _3424 = _3423.w;
                            uint _3426 = (_3408 * 40u) + 4u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3441 = (_3408 * 40u) + 8u;
                            _3451 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x));
                            uint _3453 = (_3408 * 40u) + 16u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3408 * 40u) + 20u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3408 * 40u) + 24u;
                            vec4 _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3502 = (_3408 * 40u) + 28u;
                            vec4 _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            _3527 = fma(_2744, _3515.z, fma(_2743, _3515.y, _3515.x * _2742)) + _3515.w;
                            _3528 = !((fma(_2744, _3496.z, fma(_2743, _3496.y, _3496.x * _2742)) + _3496.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3528)
                            {
                                float _3555 = _3423.x - _2742;
                                float _3556 = _3423.y - _2743;
                                float _3557 = _3423.z - _2744;
                                float _3558 = dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557));
                                float _3561 = inversesqrt(_3558);
                                float _3562 = _3561 * _3555;
                                float _3563 = _3561 * _3556;
                                float _3564 = _3561 * _3557;
                                float _3568 = 1.0 - (_3558 / (_3424 * _3424));
                                float _4760 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3573 = sqrt(_3558) * _3439.w;
                                float _3575 = 1.39999997615814208984375 / (_3573 + 1.39999997615814208984375);
                                float _3576 = _3575 * _3575;
                                float _3579 = ((1.0 - _3576) * dot(vec3(_3562, _3563, _3564), vec3(_977, _980, _983))) + _3576;
                                float _3582 = _3573 * _3573;
                                float _3586 = (fma(_2744, _3466.z, fma(_2743, _3466.y, _3466.x * _2742)) + _3466.w) / _3527;
                                float _3587 = (fma(_2744, _3481.z, fma(_2743, _3481.y, _3481.x * _2742)) + _3481.w) / _3527;
                                float _3591 = 1.0 - dot(vec2(_3586, _3587), vec2(_3586, _3587));
                                float _4776 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3593 = _3592 * (((isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0))) * _3569) / ((_3582 * 0.699999988079071044921875) + 1.0));
                                float _3605 = exp2(log2(1.0 / ((_3582 * 3.5) + 5.0)) * 0.25);
                                float _3606 = 1.0 - _1052;
                                float _3613 = sqrt(1.0 - ((1.0 - (_3606 * _3606)) * (1.0 - (_3605 * _3605))));
                                float _3614 = _3613 * _3613;
                                float _3615 = _3614 * _3614;
                                float _3616 = _3562 - _3035;
                                float _3617 = _3563 - _3036;
                                float _3618 = _3564 - _3037;
                                float _3622 = inversesqrt(dot(vec3(_3616, _3617, _3618), vec3(_3616, _3617, _3618)));
                                float _3626 = dot(vec3(_977, _980, _983), vec3((-0.0) - _3035, (-0.0) - _3036, (-0.0) - _3037));
                                float _4787 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3629 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3630 = dot(vec3(_977, _980, _983), vec3(_3622 * _3616, _3622 * _3617, _3622 * _3618));
                                float _4798 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3633 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3637 = ((_3633 * _3633) * (_3615 + (-1.0))) + 1.0;
                                float _3638 = _3575 * _3614;
                                float _3639 = _3638 * _3638;
                                float _3645 = ((1.0 - _3639) * dot(vec3(_977, _980, _983), vec3(_3562, _3563, _3564))) + _3639;
                                float _4809 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3647 = 1.0 - _3614;
                                float _3657 = (0.5 / (((_3646 * ((_3629 * _3647) + _3614)) + 9.9999999392252902907785028219223e-09) + (((_3646 * _3647) + _3614) * _3629))) * _3646;
                                float _4820 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3667 = (_3592 * _3569) * (((_3615 * 3.1415927410125732421875) * (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) / ((_3637 * _3637) * ((_3582 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3593 * _3439.y;
                                frontier_phi_83_pred_1 = _3593 * _3439.x;
                                frontier_phi_83_pred_2 = _3667 * _3451.z;
                                frontier_phi_83_pred_3 = _3667 * _3451.y;
                                frontier_phi_83_pred_4 = _3667 * _3451.x;
                                frontier_phi_83_pred_5 = _3593 * _3439.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3675 = frontier_phi_83_pred;
                            _3674 = frontier_phi_83_pred_1;
                            _3673 = frontier_phi_83_pred_2;
                            _3672 = frontier_phi_83_pred_3;
                            _3671 = frontier_phi_83_pred_4;
                            _3676 = frontier_phi_83_pred_5;
                            _3381 = _3674 + _3394;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            if (_3398 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3398;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3383;
                        frontier_phi_77_pred_1 = _3382;
                        frontier_phi_77_pred_2 = _3381;
                        frontier_phi_77_pred_3 = _3380;
                        frontier_phi_77_pred_4 = _3379;
                        frontier_phi_77_pred_5 = _3378;
                    }
                    _3020 = frontier_phi_77_pred;
                    _3018 = frontier_phi_77_pred_1;
                    _3016 = frontier_phi_77_pred_2;
                    _3014 = frontier_phi_77_pred_3;
                    _3012 = frontier_phi_77_pred_4;
                    _3010 = frontier_phi_77_pred_5;
                    uint _3176 = _3175 + 1u;
                    if (_3176 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3169 = _3010;
                        _3170 = _3012;
                        _3171 = _3014;
                        _3172 = _3016;
                        _3173 = _3018;
                        _3174 = _3020;
                        _3175 = _3176;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3014;
                frontier_phi_58_59_ladder_1 = _3020;
                frontier_phi_58_59_ladder_2 = _3018;
                frontier_phi_58_59_ladder_3 = _3016;
                frontier_phi_58_59_ladder_4 = _3012;
                frontier_phi_58_59_ladder_5 = _3010;
            }
            else
            {
                frontier_phi_58_59_ladder = _2893;
                frontier_phi_58_59_ladder_1 = _2899;
                frontier_phi_58_59_ladder_2 = _2897;
                frontier_phi_58_59_ladder_3 = _2895;
                frontier_phi_58_59_ladder_4 = _2891;
                frontier_phi_58_59_ladder_5 = _2889;
            }
            _3009 = frontier_phi_58_59_ladder_5;
            _3011 = frontier_phi_58_59_ladder_4;
            _3013 = frontier_phi_58_59_ladder;
            _3015 = frontier_phi_58_59_ladder_3;
            _3017 = frontier_phi_58_59_ladder_2;
            _3019 = frontier_phi_58_59_ladder_1;
        }
        float _3024 = isnan(1.0) ? _1036 : (isnan(_1036) ? 1.0 : min(_1036, 1.0));
        _2801 = (_3024 * _3015) + _2237;
        _2803 = (_3024 * _3017) + _2239;
        _2805 = (_3024 * _3019) + _2241;
        _2807 = ((_3009 * _1020) * _3024) + _2582;
        _2809 = ((_3011 * _1022) * _3024) + _2584;
        _2811 = ((_3013 * _1023) * _3024) + _2586;
    }
    else
    {
        _2801 = _2237;
        _2803 = _2239;
        _2805 = _2241;
        _2807 = _2582;
        _2809 = _2584;
        _2811 = _2586;
    }
    float _4836 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _4847 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4858 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _2828 = ((isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2801 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1036))) + ((_2807 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1875)) * cbPerFrame._m0[3u].x);
    float _2829 = ((isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2803 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1036))) + ((_2809 + ((isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0))) * _1875)) * cbPerFrame._m0[3u].x);
    float _2830 = ((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2805 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1036))) + ((_2811 + ((isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))) * _1875)) * cbPerFrame._m0[3u].x);
    uint _2831 = _281 + 6u;
    float _2839 = _958 / cbSceneParam._m0[86u].x;
    float _2840 = _959 / cbSceneParam._m0[86u].y;
    vec4 _2854 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2839, _2840, (log2((isnan(cbSceneParam._m0[77u].w) ? _881 : (isnan(_881) ? cbSceneParam._m0[77u].w : min(_881, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2856 = _2854.x;
    float _2857 = _2854.y;
    float _2858 = _2854.z;
    float _2859 = _2854.w;
    float _2951;
    float _2953;
    float _2955;
    float _2957;
    if (_881 > cbSceneParam._m0[78u].w)
    {
        float _2914 = isnan(_881) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _881 : min(cbSceneParam._m0[80u].w, _881));
        float _2915 = _2914 / _881;
        float _2926 = _2915 * _931;
        float _2927 = _932 * _2915;
        float _2928 = (-0.0) - _2927;
        float _2929 = _2915 * _933;
        float _2931 = (cbSceneParam._m0[77u].w * _2928) / _2914;
        float _2932 = _2931 + cbSceneParam._m0[79u].w;
        float _2933 = cbSceneParam._m0[79u].w - _2927;
        float _2939 = sqrt(((_2926 * _2926) + (_2927 * _2927)) + (_2929 * _2929));
        float _2942 = (1.0 - (cbSceneParam._m0[77u].w / _2914)) * _2939;
        float _2947 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2949 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3126;
        if (abs((_2928 - _2931) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3126 = ((((_2932 > 0.0) ? exp2(_2947 * _2932) : (2.0 - exp2(_2949 * _2932))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2942;
        }
        else
        {
            float _3070 = 1.0 / cbSceneParam._m0[80u].x;
            float _3071 = isnan(_2933) ? _2932 : (isnan(_2932) ? _2933 : max(_2932, _2933));
            float _3072 = isnan(_2933) ? _2932 : (isnan(_2932) ? _2933 : min(_2932, _2933));
            float _3081 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : min(_3071, 0.0));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            _3126 = ((abs(_2939 / _2928) * cbSceneParam._m0[80u].y) * ((((_3081 - _3082) * 2.0) - ((exp2(_2947 * (isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0)))) - exp2(_2947 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))))) * _3070)) - ((exp2(_2949 * _3081) - exp2(_2949 * _3082)) * _3070))) + (_2942 * cbSceneParam._m0[80u].z);
        }
        vec4 _3128 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2839, _2840, 1.0), 0.0);
        float _3137 = exp2((_3126 * (-1.44269502162933349609375)) * (1.0 - _3128.w));
        float _3138 = log2(_3137);
        float _3154 = log2(_2859);
        _2951 = (exp2(_3154 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3138 * cbSceneParam._m0[78u].x)) * _3128.x) / cbSceneParam._m0[78u].x)) + _2856;
        _2953 = (exp2(_3154 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3138 * cbSceneParam._m0[78u].y)) * _3128.y) / cbSceneParam._m0[78u].y)) + _2857;
        _2955 = (exp2(_3154 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3138 * cbSceneParam._m0[78u].z)) * _3128.z) / cbSceneParam._m0[78u].z)) + _2858;
        _2957 = _3137 * _2859;
    }
    else
    {
        _2951 = _2856;
        _2953 = _2857;
        _2955 = _2858;
        _2957 = _2859;
    }
    bool _3164;
    vec4 _2967;
    vec4 _2989;
    float _2991;
    float _2995;
    float _2996;
    float _2997;
    float _2998;
    bool _3008;
    for (;;)
    {
        _2967 = cbMatDynParam._m0[0u];
        float _2969 = roundEven(_2967.y);
        bool _2970 = _2969 == 3.0;
        float _2971 = log2(_2957);
        float _2978 = exp2(_2971 * cbSceneParam._m0[78u].x) * _2828;
        float _2979 = exp2(_2971 * cbSceneParam._m0[78u].y) * _2829;
        float _2980 = exp2(_2971 * cbSceneParam._m0[78u].z) * _2830;
        float _2987 = _947 + (-0.5);
        _2989 = cbMtdParam._m0[1u];
        _2991 = _2989.y * _2987;
        float _2994 = (_2969 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2995 = _2994 * (_2970 ? _2978 : (_2978 + (cbSceneParam._m0[72u].w * _2951)));
        _2996 = _2994 * (_2970 ? _2979 : (_2979 + (cbSceneParam._m0[72u].w * _2953)));
        _2997 = _2994 * (_2970 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2955)));
        _2998 = _2987 * 0.999000012874603271484375;
        _3008 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3008)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _2998) < 0.5)
            {
                _3164 = true;
                break;
            }
        }
        uint _3105 = _996 + uint(_2967.w);
        if ((cbInstanceData._m0[_3105].w < 1.0) && ((cbInstanceData._m0[_3105].w + _2998) < 0.5))
        {
            _3164 = true;
            break;
        }
        if ((_2991 + 1.0) < _2989.x)
        {
            _3164 = true;
            break;
        }
        _3164 = false;
        break;
    }
    float _3369;
    if (_3164)
    {
        discard_state = true;
        _3369 = 0.0;
    }
    else
    {
        _3369 = cbInstanceData._m0[_2831].w;
    }
    SV_Target.x = _2995;
    SV_Target.y = _2996;
    SV_Target.z = _2997;
    SV_Target.w = _3369;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2831].w;
    discard_exit();
}


