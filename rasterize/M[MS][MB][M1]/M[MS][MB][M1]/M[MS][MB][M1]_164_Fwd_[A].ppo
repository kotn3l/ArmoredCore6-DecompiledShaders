#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1502;
float _3880;
float _3881;
float _3882;
float _3883;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3892 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3903 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3914 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].y) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3925 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _443 = (_436 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _444 = (_436 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _445 = (_436 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _449 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _443;
    float _452 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _444;
    float _455 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _445;
    float _462 = ((_443 - _449) * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) + _449;
    float _463 = ((_444 - _452) * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) + _452;
    float _464 = ((_445 - _455) * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) + _455;
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _304) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _305) + cbTextureTilingScale._m0[14u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _547 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _549 = _547.x;
    float _550 = _547.y;
    float _551 = _547.z;
    float _560 = ((_530.z - _551) * _436) + _551;
    float _563 = ((((_530.x - _549) * _436) + _549) * 2.0) + (-1.0);
    float _564 = ((((_530.y - _550) * _436) + _550) * 2.0) + (-1.0);
    float _565 = dot(vec2(_563, _564), vec2(_563, _564));
    float _3936 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))));
    vec4 _590 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _602 = (_563 + ((((_503.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_590.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _603 = (_564 + ((((_503.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_590.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _606 = fma(_570, _254, fma(_603, _261, _602 * _247));
    float _609 = fma(_570, _255, fma(_603, _262, _602 * _248));
    float _612 = fma(_570, _256, fma(_603, _263, _602 * _249));
    float _616 = inversesqrt(dot(vec3(_606, _609, _612), vec3(_606, _609, _612)));
    vec4 _643 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _645 = _643.x;
    float _646 = 1.0 - _645;
    float _650 = ((_645 - _646) * cbMtdParam._m0[24u].z) + _646;
    float _652 = (cbMtdParam._m0[19u].x + dot(vec4(_616 * _606, _616 * _609, _616 * _612, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_650 * cbMtdParam._m0[21u].z);
    float _3947 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _653 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _655 = (-0.0) - cbMtdParam._m0[24u].x;
    float _657 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _657 : (isnan(_657) ? 1.0 : min(_657, 1.0));
    float _665 = _653 - ((_653 * TEXCOORD_8.x) * _658);
    float _666 = _653 - ((_653 * TEXCOORD_8.y) * _658);
    float _667 = _653 - ((_653 * TEXCOORD_8.z) * _658);
    float _674 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _678 = ((isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : min(_674, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _686 = (_678 - (((_650 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _678))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3978 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _687 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _691 = ((_665 * ((_483.x * cbMtdParam._m0[18u].x) - _462)) * _687) + _462;
    float _692 = ((_666 * ((_483.y * cbMtdParam._m0[18u].y) - _463)) * _687) + _463;
    float _693 = ((_667 * ((_483.z * cbMtdParam._m0[18u].z) - _464)) * _687) + _464;
    vec4 _705 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _707 = _705.x;
    float _708 = 1.0 - _707;
    float _733 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_707 - _708) * cbMtdParam._m0[24u].w) + _708) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3989 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _734 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _742 = ((((cbMtdParam._m0[10u].x - _691) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _734) + _691;
    float _743 = ((((cbMtdParam._m0[10u].y - _692) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _734) + _692;
    float _744 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _693)) * _734) + _693;
    vec4 _770 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _772 = _770.x;
    float _790 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _772) * _436) + _772;
    float _794 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _790) * cbMtdParam._m0[19u].z) + _790;
    float _797 = _794 - ((_687 * _665) * _794);
    float _799 = _797 - (_797 * _734);
    float _804 = (((_503.z - _560) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _560;
    float _808 = ((_590.z - _804) * cbMtdParam._m0[19u].w) + _804;
    vec4 _822 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _829 = (_822.x * 2.0) + (-1.0);
    float _830 = (_822.y * 2.0) + (-1.0);
    float _831 = dot(vec2(_829, _830), vec2(_829, _830));
    float _4000 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _840 = (((_822.z - _808) * _665) * _687) + _808;
    float _843 = ((cbMtdParam._m0[23u].y - _840) * _734) + _840;
    vec4 _864 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _870 = (_864.x * 2.0) + (-1.0);
    float _871 = (_864.y * 2.0) + (-1.0);
    float _872 = dot(vec2(_870, _871), vec2(_870, _871));
    float _4011 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _892 = (((cbMtdParam._m0[21u].x * _602) + ((_829 - _602) * _665)) * _687) + _602;
    float _893 = (((cbMtdParam._m0[21u].x * _603) + ((_830 - _603) * _666)) * _687) + _603;
    float _894 = (((sqrt(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) - _570) * _667) * _687) + _570;
    float _905 = (((_870 - _892) + (_892 * cbMtdParam._m0[22u].z)) * _734) + _892;
    float _906 = (((_871 - _893) + (_893 * cbMtdParam._m0[22u].z)) * _734) + _893;
    float _907 = ((sqrt(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) - _894) * _734) + _894;
    float _909 = cbMtdParam._m0[22u].x + _590.w;
    float _912 = fma(_907, _254, fma(_906, _261, _905 * _247));
    float _915 = fma(_907, _255, fma(_906, _262, _905 * _248));
    float _918 = fma(_907, _256, fma(_906, _263, _905 * _249));
    float _922 = inversesqrt(dot(vec3(_912, _915, _918), vec3(_912, _915, _918)));
    float _923 = _922 * _912;
    float _924 = _922 * _915;
    float _925 = _922 * _918;
    float _4022 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _926 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _4044 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4055 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4066 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4077 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _931 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _945 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _995 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _985);
    float _996 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _985);
    float _997 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _985);
    float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
    float _1002 = _995 * _1001;
    float _1003 = _996 * _1001;
    float _1004 = _997 * _1001;
    vec4 _1009 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1011 = _1009.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1183 = sqrt(((_995 * _995) + (_996 * _996)) + (_997 * _997));
        float _1189 = (cbMatDynParam._m0[5u].x * _1183) + cbMatDynParam._m0[5u].y;
        float _4088 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1194 = (cbMatDynParam._m0[5u].z * _1183) + cbMatDynParam._m0[5u].w;
        float _4099 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) - _1190)) + _1190) < ((_1011 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1022 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1023 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1041 = fma(_925, cbSceneParam._m0[5u].z, fma(_924, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _923));
    float _1044 = fma(_925, cbSceneParam._m0[6u].z, fma(_924, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _923));
    float _1047 = fma(_925, cbSceneParam._m0[7u].z, fma(_924, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _923));
    uint _1060 = _285 + 9u;
    uint _1061 = _1060 + uint(cbMatDynParam._m0[0u].w);
    float _1067 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * cbInstanceData._m0[_1061].x;
    float _1068 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * cbInstanceData._m0[_1061].y;
    float _1069 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * cbInstanceData._m0[_1061].z;
    float _4110 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _4121 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _1073 = 1.0 - _931;
    float _1074 = _1070 * _1073;
    float _1075 = _1071 * _1073;
    float _1076 = _1072 * _1073;
    float _1081 = (_1070 + (-0.039999999105930328369140625)) * _931;
    float _1082 = (_1071 + (-0.039999999105930328369140625)) * _931;
    float _1083 = (_1072 + (-0.039999999105930328369140625)) * _931;
    float _1084 = _1081 + 0.039999999105930328369140625;
    float _1086 = _1082 + 0.039999999105930328369140625;
    float _1087 = _1083 + 0.039999999105930328369140625;
    vec4 _1096 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1022, cbSceneParam._m0[86u].y * _1023));
    float _1100 = ((isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * TEXCOORD_5.w) * _1096.x;
    float _1101 = dot(vec3(_923, _924, _925), vec3(_1002, _1003, _1004));
    float _1104 = _1101 * 2.0;
    float _1108 = (_1104 * _923) - _1002;
    float _1109 = (_1104 * _924) - _1003;
    float _1110 = (_1104 * _925) - _1004;
    float _1114 = abs(dot(vec3(_1002, _1003, _1004), vec3(_923, _924, _925)));
    float _4143 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1116 = sqrt(_926);
    float _1129 = exp2((_1116 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1116 * 3.0));
    float _1135 = (1.0 - _1129) * ((_1116 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1136 = _1129 * _1116;
    float _1164 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1501;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1226 = fma(_1172, cbModelParam._m0[26u].z, fma(_1168, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1164));
        float _1230 = fma(_1172, cbModelParam._m0[27u].z, fma(_1168, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1164));
        float _1234 = fma(_1172, cbModelParam._m0[28u].z, fma(_1168, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1164));
        float _1259 = _1164 + _923;
        float _1260 = _1168 + _924;
        float _1261 = _1172 + _925;
        float _1271 = fma(_1261, cbModelParam._m0[26u].z, fma(_1260, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1259)) - _1226;
        float _1272 = fma(_1261, cbModelParam._m0[27u].z, fma(_1260, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1259)) - _1230;
        float _1273 = fma(_1261, cbModelParam._m0[28u].z, fma(_1260, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1259)) - _1234;
        float _1277 = inversesqrt(dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273)));
        float _1290 = ((_1277 * _1271) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1226 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1277 * _1272) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1230 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1277 * _1273) / cbModelParam._m0[34u].z) + ((((((_1234 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        float _1329 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1295.x + (-0.5));
        float _1331 = _1329 * (_1295.y + (-0.5));
        float _1332 = _1329 * (_1295.z + (-0.5));
        float _1339 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1302.x + (-0.5));
        float _1341 = _1339 * (_1302.y + (-0.5));
        float _1342 = _1339 * (_1302.z + (-0.5));
        float _1349 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1309.x + (-0.5));
        float _1351 = _1349 * (_1309.y + (-0.5));
        float _1352 = _1349 * (_1309.z + (-0.5));
        float _1359 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1316.x + (-0.5));
        float _1361 = _1359 * (_1316.y + (-0.5));
        float _1362 = _1359 * (_1316.z + (-0.5));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = _1330 * 0.5;
        float _1367 = _1340 * 0.5;
        float _1368 = _1350 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1383 = (dot(vec3(_923, _924, _925), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1393 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4191 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1395 + 1.0))) + _1400) * _1363;
        float _1410 = _1331 * 0.5;
        float _1411 = _1341 * 0.5;
        float _1412 = _1351 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_923, _924, _925), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4224 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1437 + 1.0))) + _1442) * _1364;
        float _1452 = _1332 * 0.5;
        float _1453 = _1342 * 0.5;
        float _1454 = _1352 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_923, _924, _925), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4257 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1479 + 1.0))) + _1484) * _1365;
        _1501 = _1332;
        _1503 = _1331;
        _1504 = _1330;
        _1505 = _1342;
        _1506 = _1341;
        _1507 = _1340;
        _1508 = _1352;
        _1509 = _1351;
        _1510 = _1350;
        _1511 = _1365;
        _1512 = _1364;
        _1513 = _1363;
        _1514 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1515 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1516 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
    }
    else
    {
        _1501 = _1502;
        _1503 = _1502;
        _1504 = _1502;
        _1505 = _1502;
        _1506 = _1502;
        _1507 = _1502;
        _1508 = _1502;
        _1509 = _1502;
        _1510 = _1502;
        _1511 = _1502;
        _1512 = _1502;
        _1513 = _1502;
        _1514 = 0.0;
        _1515 = 0.0;
        _1516 = 0.0;
    }
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1544 = fma(_1172, cbModelParam._m0[30u].z, fma(_1168, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1164));
        float _1548 = fma(_1172, cbModelParam._m0[31u].z, fma(_1168, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1164));
        float _1552 = fma(_1172, cbModelParam._m0[32u].z, fma(_1168, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1164));
        float _1575 = _1164 + _923;
        float _1576 = _1168 + _924;
        float _1577 = _1172 + _925;
        float _1587 = fma(_1577, cbModelParam._m0[30u].z, fma(_1576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1575)) - _1544;
        float _1588 = fma(_1577, cbModelParam._m0[31u].z, fma(_1576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1575)) - _1548;
        float _1589 = fma(_1577, cbModelParam._m0[32u].z, fma(_1576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1575)) - _1552;
        float _1593 = inversesqrt(dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589)));
        float _1606 = ((_1593 * _1587) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1544 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1607 = ((_1593 * _1588) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1548 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1608 = ((_1593 * _1589) / cbModelParam._m0[35u].z) + ((((((_1552 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1624 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1631 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        float _1643 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1610.x + (-0.5));
        float _1645 = _1643 * (_1610.y + (-0.5));
        float _1646 = _1643 * (_1610.z + (-0.5));
        float _1653 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1617.x + (-0.5));
        float _1655 = _1653 * (_1617.y + (-0.5));
        float _1656 = _1653 * (_1617.z + (-0.5));
        float _1663 = exp2((_1624.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1624.x + (-0.5));
        float _1665 = _1663 * (_1624.y + (-0.5));
        float _1666 = _1663 * (_1624.z + (-0.5));
        float _1673 = exp2((_1631.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1631.x + (-0.5));
        float _1675 = _1673 * (_1631.y + (-0.5));
        float _1676 = _1673 * (_1631.z + (-0.5));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = _1644 * 0.5;
        float _1681 = _1654 * 0.5;
        float _1682 = _1664 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_923, _924, _925), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4320 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1707 + 1.0))) + _1712) * _1677;
        float _1722 = _1645 * 0.5;
        float _1723 = _1655 * 0.5;
        float _1724 = _1665 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_923, _924, _925), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4331 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4342 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4353 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_1749 + 1.0))) + _1754) * _1678;
        float _1764 = _1646 * 0.5;
        float _1765 = _1656 * 0.5;
        float _1766 = _1666 * 0.5;
        float _1767 = dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766));
        float _1772 = (_1767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1767);
        float _1780 = (dot(vec3(_923, _924, _925), vec3(_1772 * _1764, _1772 * _1765, _1772 * _1766)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1789 = sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1791 = _1790 * 2.0;
        float _1795 = (1.0 - _1790) / (_1790 + 1.0);
        float _4386 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1805 = ((((1.0 - _1796) * (_1791 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1791 + 1.0))) + _1796) * _1679;
        _1813 = _1646;
        _1814 = _1645;
        _1815 = _1644;
        _1816 = _1656;
        _1817 = _1655;
        _1818 = _1654;
        _1819 = _1666;
        _1820 = _1665;
        _1821 = _1664;
        _1822 = _1679;
        _1823 = _1678;
        _1824 = _1677;
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)));
    }
    else
    {
        _1813 = _1502;
        _1814 = _1502;
        _1815 = _1502;
        _1816 = _1502;
        _1817 = _1502;
        _1818 = _1502;
        _1819 = _1502;
        _1820 = _1502;
        _1821 = _1502;
        _1822 = _1502;
        _1823 = _1502;
        _1824 = _1502;
        _1825 = 0.0;
        _1826 = 0.0;
        _1827 = 0.0;
    }
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1514)) + _1514;
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1515)) + _1515;
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1516)) + _1516;
    float _1860 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1838, cbSceneParam._m0[89u].y, _1837 * cbSceneParam._m0[89u].x));
    float _1863 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1838, cbSceneParam._m0[90u].y, _1837 * cbSceneParam._m0[90u].x));
    float _1866 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1838, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1837));
    float _1881 = _1108 * 0.5;
    float _1882 = _1109 * 0.5;
    float _1883 = _1110 * 0.5;
    float _1884 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1887 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1890 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1924;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1897 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1501, _1505, _1508, _1511));
        float _1901 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1503, _1506, _1509, _1512));
        float _1905 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1504, _1507, _1510, _1513));
        float _1912 = dot(vec4(cbModelParam._m0[39u]), vec4(_1881, _1882, _1883, 1.0));
        _1924 = dot(vec3(isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1912) ? 0.0 : (isnan(0.0) ? _1912 : max(0.0, _1912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1924 = 1.0;
    }
    float _1935;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1926 = dot(vec4(cbModelParam._m0[40u]), vec4(_1881, _1882, _1883, 1.0));
        _1935 = dot(vec3(isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1926) ? 0.0 : (isnan(0.0) ? _1926 : max(0.0, _1926))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1935 = 1.0;
    }
    float _1939 = (_1935 * cbModelParam._m0[1u].x) + (_1924 * (1.0 - cbModelParam._m0[1u].x));
    float _1949 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _926);
    float _1950 = isnan(_1949) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1949 : min(cbModelParam._m0[25u].z, _1949));
    float _2030;
    float _2032;
    float _2034;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1997 = fma(_1172, cbModelParam._m0[13u].z, fma(_1168, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1164)) + cbModelParam._m0[13u].w;
        float _2001 = fma(_1172, cbModelParam._m0[14u].z, fma(_1168, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1164)) + cbModelParam._m0[14u].w;
        float _2005 = fma(_1172, cbModelParam._m0[15u].z, fma(_1168, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1164)) + cbModelParam._m0[15u].w;
        float _2008 = fma(_1110, cbModelParam._m0[13u].z, fma(_1109, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1108));
        float _2011 = fma(_1110, cbModelParam._m0[14u].z, fma(_1109, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1108));
        float _2014 = fma(_1110, cbModelParam._m0[15u].z, fma(_1109, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1108));
        float _2042;
        if (_2008 > 0.0)
        {
            _2042 = abs((1.0 - _1997) / _2008);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1997 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2042 = frontier_phi_17_15_ladder;
        }
        float _2244;
        if (_2011 > 0.0)
        {
            _2244 = abs((1.0 - _2001) / _2011);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2001 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2244 = frontier_phi_26_22_ladder;
        }
        float _2498;
        if (_2014 > 0.0)
        {
            _2498 = abs((1.0 - _2005) / _2014);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2005 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2498 = frontier_phi_38_33_ladder;
        }
        float _2500 = isnan(_2244) ? _2042 : (isnan(_2042) ? _2244 : min(_2042, _2244));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _2008) + _1997;
        float _2506 = (_2501 * _2011) + _2001;
        float _2507 = (_2501 * _2014) + _2005;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2510 = (-1.0) - _2508;
        float _2512 = _2508 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2507 > _2512) || ((_2507 < _2510) || ((_2506 > _2512) || ((_2506 < _2510) || ((_2505 < _2510) || (_2505 > _2512))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2507, cbModelParam._m0[9u].z, fma(_2506, cbModelParam._m0[9u].y, _2505 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2507, cbModelParam._m0[10u].z, fma(_2506, cbModelParam._m0[10u].y, _2505 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2507, cbModelParam._m0[11u].z, fma(_2506, cbModelParam._m0[11u].y, _2505 * cbModelParam._m0[11u].x))), _1950);
            frontier_phi_16_38_ladder = _2635.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2635.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2635.x * cbModelParam._m0[1u].y;
        }
        _2030 = frontier_phi_16_38_ladder_2;
        _2032 = frontier_phi_16_38_ladder_1;
        _2034 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1108, _1109, _1110), _1950);
        _2030 = _2018.x * cbModelParam._m0[1u].y;
        _2032 = _2018.y * cbModelParam._m0[1u].y;
        _2034 = _2018.z * cbModelParam._m0[1u].y;
    }
    float _2038 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _926);
    float _2039 = isnan(_2038) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2038 : min(cbModelParam._m0[25u].w, _2038));
    float _2128;
    float _2130;
    float _2132;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2092 = fma(_1172, cbModelParam._m0[21u].z, fma(_1168, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1164)) + cbModelParam._m0[21u].w;
        float _2096 = fma(_1172, cbModelParam._m0[22u].z, fma(_1168, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1164)) + cbModelParam._m0[22u].w;
        float _2100 = fma(_1172, cbModelParam._m0[23u].z, fma(_1168, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1164)) + cbModelParam._m0[23u].w;
        float _2103 = fma(_1110, cbModelParam._m0[21u].z, fma(_1109, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1108));
        float _2106 = fma(_1110, cbModelParam._m0[22u].z, fma(_1109, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1108));
        float _2109 = fma(_1110, cbModelParam._m0[23u].z, fma(_1109, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1108));
        float _2249;
        if (_2103 > 0.0)
        {
            _2249 = abs((1.0 - _2092) / _2103);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2092 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2249 = frontier_phi_28_24_ladder;
        }
        float _2525;
        if (_2106 > 0.0)
        {
            _2525 = abs((1.0 - _2096) / _2106);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2096 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2525 = frontier_phi_40_35_ladder;
        }
        float _2738;
        if (_2109 > 0.0)
        {
            _2738 = abs((1.0 - _2100) / _2109);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2100 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2738 = frontier_phi_49_46_ladder;
        }
        float _2740 = isnan(_2525) ? _2249 : (isnan(_2249) ? _2525 : min(_2249, _2525));
        float _2741 = isnan(_2738) ? _2740 : (isnan(_2740) ? _2738 : min(_2740, _2738));
        float _2745 = (_2741 * _2103) + _2092;
        float _2746 = (_2741 * _2106) + _2096;
        float _2747 = (_2741 * _2109) + _2100;
        float _2748 = _2741 * 9.9999997473787516355514526367188e-05;
        float _2749 = (-1.0) - _2748;
        float _2751 = _2748 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2747 > _2751) || ((_2747 < _2749) || ((_2746 > _2751) || ((_2746 < _2749) || ((_2745 < _2749) || (_2745 > _2751))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2747, cbModelParam._m0[17u].z, fma(_2746, cbModelParam._m0[17u].y, _2745 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2747, cbModelParam._m0[18u].z, fma(_2746, cbModelParam._m0[18u].y, _2745 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2747, cbModelParam._m0[19u].z, fma(_2746, cbModelParam._m0[19u].y, _2745 * cbModelParam._m0[19u].x))), _2039);
            frontier_phi_25_49_ladder = _2946.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2946.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2946.x * cbModelParam._m0[1u].z;
        }
        _2128 = frontier_phi_25_49_ladder_2;
        _2130 = frontier_phi_25_49_ladder_1;
        _2132 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2112 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1108, _1109, _1110), _2039);
        _2128 = _2112.x * cbModelParam._m0[1u].z;
        _2130 = _2112.y * cbModelParam._m0[1u].z;
        _2132 = _2112.z * cbModelParam._m0[1u].z;
    }
    float _2145 = (((_1135 * _1084) + _1136) * _1100) * ((cbModelParam._m0[1u].w * (_2128 - _2030)) + _2030);
    float _2147 = (((_1135 * _1086) + _1136) * _1100) * ((cbModelParam._m0[1u].w * (_2130 - _2032)) + _2032);
    float _2149 = (((_1135 * _1087) + _1136) * _1100) * ((cbModelParam._m0[1u].w * (_2132 - _2034)) + _2034);
    float _2152 = fma(_2149, cbSceneParam._m0[89u].z, fma(_2147, cbSceneParam._m0[89u].y, _2145 * cbSceneParam._m0[89u].x));
    float _2155 = fma(_2149, cbSceneParam._m0[90u].z, fma(_2147, cbSceneParam._m0[90u].y, _2145 * cbSceneParam._m0[90u].x));
    float _2158 = fma(_2149, cbSceneParam._m0[91u].z, fma(_2147, cbSceneParam._m0[91u].y, _2145 * cbSceneParam._m0[91u].x));
    uvec4 _2168 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2170 = _2168.x * 14u;
    uint _2171 = _2170 + 13u;
    float _2178 = _1100 + (-1.0);
    float _2183 = (cbLight._m0[_2171].x * _2178) + 1.0;
    float _2184 = (cbLight._m0[_2171].y * _2178) + 1.0;
    float _2185 = (cbLight._m0[_2171].z * _2178) + 1.0;
    float _2186 = (cbLight._m0[_2171].w * _2178) + 1.0;
    uint _2187 = _2170 + 5u;
    float _2193 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2197 = _2170 + 4u;
    float _2203 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2207 = _2170 | 1u;
    float _2218 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_923, _924, _925));
    float _2221 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_923, _924, _925));
    float _4522 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _4533 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2226 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * 0.3183098733425140380859375;
    float _2228 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * 0.3183098733425140380859375;
    float _2235 = ((cbLight._m0[_2187].x * _2193) * _2228) + ((cbLight._m0[_2197].x * _2203) * _2226);
    float _2236 = ((_2193 * cbLight._m0[_2187].y) * _2228) + ((_2203 * cbLight._m0[_2197].y) * _2226);
    float _2237 = ((_2193 * cbLight._m0[_2187].z) * _2228) + ((_2203 * cbLight._m0[_2197].z) * _2226);
    uvec4 _2241 = floatBitsToUint(cbLight._m0[_2170 + 12u]);
    bool _2243 = _2241.x == 0u;
    float _2254;
    float _2256;
    float _2258;
    if (_2243)
    {
        _2254 = _2235;
        _2256 = _2236;
        _2258 = _2237;
    }
    else
    {
        uint _2262 = _2170 + 6u;
        float _2278 = (dot(vec3(cbLight._m0[_2170 + 2u].xyz), vec3(_923, _924, _925)) * 0.5) + 0.5;
        float _2279 = _2278 * _2278;
        float _4544 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2280 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2281 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2254 = (((cbLight._m0[_2262].x * 0.3183098733425140380859375) * _2280) * _2281) + _2235;
        _2256 = (((cbLight._m0[_2262].y * 0.3183098733425140380859375) * _2280) * _2281) + _2236;
        _2258 = (((cbLight._m0[_2262].z * 0.3183098733425140380859375) * _2280) * _2281) + _2237;
    }
    bool _2261 = _2241.y == 0u;
    float _2299;
    float _2301;
    float _2303;
    if (_2261)
    {
        _2299 = _2254;
        _2301 = _2256;
        _2303 = _2258;
    }
    else
    {
        uint _2469 = _2170 + 7u;
        float _2485 = (dot(vec3(cbLight._m0[_2170 + 3u].xyz), vec3(_923, _924, _925)) * 0.5) + 0.5;
        float _2486 = _2485 * _2485;
        float _4560 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2487 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2488 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2299 = (((cbLight._m0[_2469].x * 0.3183098733425140380859375) * _2487) * _2488) + _2254;
        _2301 = (((cbLight._m0[_2469].y * 0.3183098733425140380859375) * _2487) * _2488) + _2256;
        _2303 = (((cbLight._m0[_2469].z * 0.3183098733425140380859375) * _2487) * _2488) + _2258;
    }
    uint _2306 = _2170 + 8u;
    float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _926) * 0.949999988079071044921875);
    float _2320 = _2319 * _2319;
    float _2321 = cbLight._m0[_2170].x + _1002;
    float _2322 = cbLight._m0[_2170].y + _1003;
    float _2323 = cbLight._m0[_2170].z + _1004;
    float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
    float _2328 = _2327 * _2321;
    float _2329 = _2327 * _2322;
    float _2330 = _2327 * _2323;
    float _2331 = dot(vec3(_923, _924, _925), vec3(cbLight._m0[_2170].xyz));
    float _4576 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _4587 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _2335 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2336 = dot(vec3(_923, _924, _925), vec3(_2328, _2329, _2330));
    float _4598 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2340 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2328, _2329, _2330));
    float _4609 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2344 = _2320 * _2320;
    float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
    float _2356 = exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0);
    float _2357 = 0.959999978542327880859375 - _1081;
    float _2359 = 0.959999978542327880859375 - _1082;
    float _2360 = 0.959999978542327880859375 - _1083;
    float _2367 = 1.0 - _2320;
    float _2378 = (0.5 / (((_2335 * ((_2334 * _2367) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2367) + _2320) * _2334))) * _2334;
    float _4620 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2380 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
    uint _2391 = _2170 + 9u;
    float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _926) * 0.949999988079071044921875);
    float _2403 = _2402 * _2402;
    float _2404 = cbLight._m0[_2207].x + _1002;
    float _2405 = cbLight._m0[_2207].y + _1003;
    float _2406 = cbLight._m0[_2207].z + _1004;
    float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
    float _2411 = _2410 * _2404;
    float _2412 = _2410 * _2405;
    float _2413 = _2410 * _2406;
    float _2414 = dot(vec3(_923, _924, _925), vec3(cbLight._m0[_2207].xyz));
    float _4631 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
    float _2418 = dot(vec3(_923, _924, _925), vec3(_2411, _2412, _2413));
    float _4642 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _2422 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2411, _2412, _2413));
    float _4653 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2426 = _2403 * _2403;
    float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
    float _2437 = exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0);
    float _2444 = 1.0 - _2403;
    float _2454 = (0.5 / (((_2335 * ((_2417 * _2444) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2444) + _2403) * _2417))) * _2417;
    float _4664 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2456 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
    float _2466 = (((((_2437 * _2357) + _1084) * cbLight._m0[_2391].x) * _2456) * _2193) + (((((_2356 * _2357) + _1084) * cbLight._m0[_2306].x) * _2380) * _2203);
    float _2467 = (((((_2437 * _2359) + _1086) * cbLight._m0[_2391].y) * _2456) * _2193) + (((((_2356 * _2359) + _1086) * cbLight._m0[_2306].y) * _2380) * _2203);
    float _2468 = (((((_2437 * _2360) + _1087) * cbLight._m0[_2391].z) * _2456) * _2193) + (((((_2356 * _2360) + _1087) * cbLight._m0[_2306].z) * _2380) * _2203);
    float _2530;
    float _2532;
    float _2534;
    if (_2243)
    {
        _2530 = _2466;
        _2532 = _2467;
        _2534 = _2468;
    }
    else
    {
        uint _2536 = _2170 + 2u;
        uint _2540 = _2170 + 10u;
        float _2554 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2536].w)) * _926) * 0.949999988079071044921875);
        float _2555 = _2554 * _2554;
        float _2556 = cbLight._m0[_2536].x + _1002;
        float _2557 = cbLight._m0[_2536].y + _1003;
        float _2558 = cbLight._m0[_2536].z + _1004;
        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
        float _2563 = _2562 * _2556;
        float _2564 = _2562 * _2557;
        float _2565 = _2562 * _2558;
        float _2566 = dot(vec3(_923, _924, _925), vec3(cbLight._m0[_2536].xyz));
        float _4675 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2570 = dot(vec3(_923, _924, _925), vec3(_2563, _2564, _2565));
        float _4686 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2574 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_2563, _2564, _2565));
        float _4697 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2578 = _2555 * _2555;
        float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
        float _2589 = exp2(log2(1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * 5.0);
        float _2596 = 1.0 - _2555;
        float _2606 = (0.5 / (((_2335 * ((_2569 * _2596) + _2555)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2596) + _2555) * _2569))) * _2569;
        float _4708 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2608 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
        float _2609 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2530 = (((((_2589 * _2357) + _1084) * cbLight._m0[_2540].x) * _2608) * _2609) + _2466;
        _2532 = (((((_2589 * _2359) + _1086) * cbLight._m0[_2540].y) * _2608) * _2609) + _2467;
        _2534 = (((((_2589 * _2360) + _1087) * cbLight._m0[_2540].z) * _2608) * _2609) + _2468;
    }
    float _2644;
    float _2646;
    float _2648;
    if (_2261)
    {
        _2644 = _2530;
        _2646 = _2532;
        _2648 = _2534;
    }
    else
    {
        uint _2655 = _2170 + 3u;
        uint _2659 = _2170 + 11u;
        float _2673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2655].w)) * _926) * 0.949999988079071044921875);
        float _2674 = _2673 * _2673;
        float _2675 = cbLight._m0[_2655].x + _1002;
        float _2676 = cbLight._m0[_2655].y + _1003;
        float _2677 = cbLight._m0[_2655].z + _1004;
        float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
        float _2682 = _2681 * _2675;
        float _2683 = _2681 * _2676;
        float _2684 = _2681 * _2677;
        float _2685 = dot(vec3(_923, _924, _925), vec3(cbLight._m0[_2655].xyz));
        float _4724 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2689 = dot(vec3(_923, _924, _925), vec3(_2682, _2683, _2684));
        float _4735 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2693 = dot(vec3(cbLight._m0[_2655].xyz), vec3(_2682, _2683, _2684));
        float _4746 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2697 = _2674 * _2674;
        float _2701 = ((_2692 * _2692) * (_2697 + (-1.0))) + 1.0;
        float _2708 = exp2(log2(1.0 - (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) * 5.0);
        float _2715 = 1.0 - _2674;
        float _2725 = (0.5 / (((_2335 * ((_2688 * _2715) + _2674)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2715) + _2674) * _2688))) * _2688;
        float _4757 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2727 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2697 / ((_2701 * _2701) * 3.141590118408203125));
        float _2728 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2644 = (((((_2708 * _2357) + _1084) * cbLight._m0[_2659].x) * _2727) * _2728) + _2530;
        _2646 = (((((_2708 * _2359) + _1086) * cbLight._m0[_2659].y) * _2727) * _2728) + _2532;
        _2648 = (((((_2708 * _2360) + _1087) * cbLight._m0[_2659].z) * _2727) * _2728) + _2534;
    }
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    if (_2168.y == 0u)
    {
        float _2803 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2804 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2803;
        float _2805 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2803;
        float _2806 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2803;
        uvec4 _2818 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2819 = _2818.x;
        uint _2830 = uint((float(_2818.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1023) / _2819))) + floor(float(uint(cbSceneParam._m0[85u].x * _1022) / _2819)));
        float _2840 = (log2(_2806 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2841 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        uint _2844 = uint(isnan(14.0) ? _2841 : (isnan(_2841) ? 14.0 : min(_2841, 14.0)));
        uvec4 _2849 = texelFetch(g_lightClusterGridBuffer, int(((_2844 << 2u) + (_2830 << 6u)) >> 2u));
        uint _2850 = _2849.x;
        uint _2851 = _2818.z;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        if (((((1u << ((_2851 >> 4u) & 15u)) + 4294967295u) & _2850) == 0u) || ((_2851 & 240u) == 0u))
        {
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
        }
        else
        {
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            uint _3109 = 0u;
            uint _3118;
            bool _3119;
            for (;;)
            {
                _3118 = texelFetch(g_lightClassification, int((((_2844 << 5u) + (_2830 << 9u)) + (_3109 << 2u)) >> 2u)).x;
                _3119 = _3118 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3119)
                {
                    frontier_phi_66_pred = _3103;
                    frontier_phi_66_pred_1 = _3108;
                    frontier_phi_66_pred_2 = _3107;
                    frontier_phi_66_pred_3 = _3106;
                    frontier_phi_66_pred_4 = _3105;
                    frontier_phi_66_pred_5 = _3104;
                }
                else
                {
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    uint _3254;
                    _3248 = _3103;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3118;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    for (;;)
                    {
                        uint _3258 = uint(findLSB(_3254)) + (_3109 << 5u);
                        uint _3255 = (_3254 + 4294967295u) & _3254;
                        uint _3260 = _3258 * 48u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 3u)).x));
                        uint _3280 = (_3258 * 48u) + 4u;
                        vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 3u)).x));
                        uint _3299 = (_3258 * 48u) + 8u;
                        vec3 _3310 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x));
                        float _3314 = _3274.x - _2804;
                        float _3315 = _3274.y - _2805;
                        float _3316 = _3274.z - _2806;
                        float _3317 = dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316));
                        float _3320 = inversesqrt(_3317);
                        float _3321 = _3320 * _3314;
                        float _3322 = _3320 * _3315;
                        float _3323 = _3320 * _3316;
                        float _3324 = dot(vec3(_1041, _1044, _1047), vec3(_3321, _3322, _3323));
                        float _3329 = 1.0 - (_3317 * _3274.w);
                        float _4783 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3330 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3331 = sqrt(_3317) * _3293.w;
                        float _3334 = 1.39999997615814208984375 / (_3331 + 1.39999997615814208984375);
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3324) + _3335;
                        float _3341 = _3331 * _3331;
                        float _3345 = ((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) * _3330) / ((_3341 * 0.699999988079071044921875) + 1.0);
                        float _3349 = (-0.0) - _2804;
                        float _3350 = (-0.0) - _2805;
                        float _3351 = (-0.0) - _2806;
                        float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                        float _3356 = _3355 * _3349;
                        float _3357 = _3355 * _3350;
                        float _3358 = _3355 * _3351;
                        float _3366 = exp2(log2(1.0 / ((_3341 * 3.5) + 5.0)) * 0.25);
                        float _3367 = 1.0 - _1116;
                        float _3374 = sqrt(1.0 - ((1.0 - (_3367 * _3367)) * (1.0 - (_3366 * _3366))));
                        float _3375 = _3374 * _3374;
                        float _3376 = _3375 * _3375;
                        float _3377 = _3356 + _3321;
                        float _3378 = _3357 + _3322;
                        float _3379 = _3358 + _3323;
                        float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                        float _3387 = dot(vec3(_1041, _1044, _1047), vec3(_3356, _3357, _3358));
                        float _4799 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3390 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3391 = dot(vec3(_1041, _1044, _1047), vec3(_3383 * _3377, _3383 * _3378, _3383 * _3379));
                        float _4810 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3398 = ((_3394 * _3394) * (_3376 + (-1.0))) + 1.0;
                        float _3399 = _3334 * _3375;
                        float _3400 = _3399 * _3399;
                        float _3403 = ((1.0 - _3400) * _3324) + _3400;
                        float _4821 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3404 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3405 = 1.0 - _3375;
                        float _3415 = (0.5 / (((_3404 * ((_3390 * _3405) + _3375)) + 9.9999999392252902907785028219223e-09) + (((_3404 * _3405) + _3375) * _3390))) * _3404;
                        float _4832 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3426 = (((_3376 * 3.1415927410125732421875) * (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) / ((_3398 * _3398) * ((_3341 * 2.1991131305694580078125) + 3.141590118408203125))) * _3330;
                        _3178 = (_3345 * _3293.x) + _3251;
                        _3179 = (_3345 * _3293.y) + _3252;
                        _3180 = (_3345 * _3293.z) + _3253;
                        _3175 = (_3426 * _3310.x) + _3248;
                        _3176 = (_3426 * _3310.y) + _3249;
                        _3177 = (_3426 * _3310.z) + _3250;
                        if (_3255 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3248 = _3175;
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3255;
                        }
                    }
                    frontier_phi_66_pred = _3175;
                    frontier_phi_66_pred_1 = _3180;
                    frontier_phi_66_pred_2 = _3179;
                    frontier_phi_66_pred_3 = _3178;
                    frontier_phi_66_pred_4 = _3177;
                    frontier_phi_66_pred_5 = _3176;
                }
                _2952 = frontier_phi_66_pred;
                _2962 = frontier_phi_66_pred_1;
                _2960 = frontier_phi_66_pred_2;
                _2958 = frontier_phi_66_pred_3;
                _2956 = frontier_phi_66_pred_4;
                _2954 = frontier_phi_66_pred_5;
                uint _3110 = _3109 + 1u;
                if (_3110 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3103 = _2952;
                    _3104 = _2954;
                    _3105 = _2956;
                    _3106 = _2958;
                    _3107 = _2960;
                    _3108 = _2962;
                    _3109 = _3110;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
        }
        uvec4 _2965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2966 = _2965.z;
        uint _2968 = (_2966 >> 8u) & 15u;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        if (((4294967295u << _2968) & _2850) == 0u)
        {
            _3071 = _2951;
            _3073 = _2953;
            _3075 = _2955;
            _3077 = _2957;
            _3079 = _2959;
            _3081 = _2961;
        }
        else
        {
            float _3096 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
            float _3097 = _3096 * _2804;
            float _3098 = _3096 * _2805;
            float _3099 = _3096 * _2806;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2968 < ((_2966 >> 12u) & 15u))
            {
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3231 = _2951;
                float _3232 = _2953;
                float _3233 = _2955;
                float _3234 = _2957;
                float _3235 = _2959;
                float _3236 = _2961;
                uint _3237 = _2968;
                uint _3246;
                bool _3247;
                for (;;)
                {
                    _3246 = texelFetch(g_lightClassification, int((((_2844 << 5u) + (_2830 << 9u)) + (_3237 << 2u)) >> 2u)).x;
                    _3247 = _3246 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3247)
                    {
                        frontier_phi_77_pred = _3236;
                        frontier_phi_77_pred_1 = _3235;
                        frontier_phi_77_pred_2 = _3234;
                        frontier_phi_77_pred_3 = _3233;
                        frontier_phi_77_pred_4 = _3232;
                        frontier_phi_77_pred_5 = _3231;
                    }
                    else
                    {
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3453 = _3231;
                        float _3454 = _3232;
                        float _3455 = _3233;
                        float _3456 = _3234;
                        float _3457 = _3235;
                        float _3458 = _3236;
                        uint _3459 = _3246;
                        uint _3460;
                        vec4 _3485;
                        float _3486;
                        vec4 _3501;
                        vec3 _3513;
                        vec4 _3528;
                        vec4 _3543;
                        float _3589;
                        bool _3590;
                        for (;;)
                        {
                            uint _3470 = ((_3237 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3459));
                            _3460 = (_3459 + 4294967295u) & _3459;
                            uint _3472 = _3470 * 40u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            _3486 = _3485.w;
                            uint _3488 = (_3470 * 40u) + 4u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3503 = (_3470 * 40u) + 8u;
                            _3513 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x));
                            uint _3515 = (_3470 * 40u) + 16u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3470 * 40u) + 20u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3545 = (_3470 * 40u) + 24u;
                            vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3564 = (_3470 * 40u) + 28u;
                            vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            _3589 = fma(_2806, _3577.z, fma(_2805, _3577.y, _3577.x * _2804)) + _3577.w;
                            _3590 = !((fma(_2806, _3558.z, fma(_2805, _3558.y, _3558.x * _2804)) + _3558.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3590)
                            {
                                float _3617 = _3485.x - _2804;
                                float _3618 = _3485.y - _2805;
                                float _3619 = _3485.z - _2806;
                                float _3620 = dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619));
                                float _3623 = inversesqrt(_3620);
                                float _3624 = _3623 * _3617;
                                float _3625 = _3623 * _3618;
                                float _3626 = _3623 * _3619;
                                float _3630 = 1.0 - (_3620 / (_3486 * _3486));
                                float _4843 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3635 = sqrt(_3620) * _3501.w;
                                float _3637 = 1.39999997615814208984375 / (_3635 + 1.39999997615814208984375);
                                float _3638 = _3637 * _3637;
                                float _3641 = ((1.0 - _3638) * dot(vec3(_3624, _3625, _3626), vec3(_1041, _1044, _1047))) + _3638;
                                float _3644 = _3635 * _3635;
                                float _3648 = (fma(_2806, _3528.z, fma(_2805, _3528.y, _3528.x * _2804)) + _3528.w) / _3589;
                                float _3649 = (fma(_2806, _3543.z, fma(_2805, _3543.y, _3543.x * _2804)) + _3543.w) / _3589;
                                float _3653 = 1.0 - dot(vec2(_3648, _3649), vec2(_3648, _3649));
                                float _4859 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3654 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3655 = _3654 * (((isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0))) * _3631) / ((_3644 * 0.699999988079071044921875) + 1.0));
                                float _3667 = exp2(log2(1.0 / ((_3644 * 3.5) + 5.0)) * 0.25);
                                float _3668 = 1.0 - _1116;
                                float _3675 = sqrt(1.0 - ((1.0 - (_3668 * _3668)) * (1.0 - (_3667 * _3667))));
                                float _3676 = _3675 * _3675;
                                float _3677 = _3676 * _3676;
                                float _3678 = _3624 - _3097;
                                float _3679 = _3625 - _3098;
                                float _3680 = _3626 - _3099;
                                float _3684 = inversesqrt(dot(vec3(_3678, _3679, _3680), vec3(_3678, _3679, _3680)));
                                float _3688 = dot(vec3(_1041, _1044, _1047), vec3((-0.0) - _3097, (-0.0) - _3098, (-0.0) - _3099));
                                float _4870 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3691 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3692 = dot(vec3(_1041, _1044, _1047), vec3(_3684 * _3678, _3684 * _3679, _3684 * _3680));
                                float _4881 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3695 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3699 = ((_3695 * _3695) * (_3677 + (-1.0))) + 1.0;
                                float _3700 = _3637 * _3676;
                                float _3701 = _3700 * _3700;
                                float _3707 = ((1.0 - _3701) * dot(vec3(_1041, _1044, _1047), vec3(_3624, _3625, _3626))) + _3701;
                                float _4892 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3709 = 1.0 - _3676;
                                float _3719 = (0.5 / (((_3708 * ((_3691 * _3709) + _3676)) + 9.9999999392252902907785028219223e-09) + (((_3708 * _3709) + _3676) * _3691))) * _3708;
                                float _4903 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3729 = (_3654 * _3631) * (((_3677 * 3.1415927410125732421875) * (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0)))) / ((_3699 * _3699) * ((_3644 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3655 * _3501.y;
                                frontier_phi_83_pred_1 = _3655 * _3501.x;
                                frontier_phi_83_pred_2 = _3729 * _3513.z;
                                frontier_phi_83_pred_3 = _3729 * _3513.y;
                                frontier_phi_83_pred_4 = _3729 * _3513.x;
                                frontier_phi_83_pred_5 = _3655 * _3501.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3737 = frontier_phi_83_pred;
                            _3736 = frontier_phi_83_pred_1;
                            _3735 = frontier_phi_83_pred_2;
                            _3734 = frontier_phi_83_pred_3;
                            _3733 = frontier_phi_83_pred_4;
                            _3738 = frontier_phi_83_pred_5;
                            _3443 = _3736 + _3456;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            _3440 = _3733 + _3453;
                            _3441 = _3734 + _3454;
                            _3442 = _3735 + _3455;
                            if (_3460 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3460;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3445;
                        frontier_phi_77_pred_1 = _3444;
                        frontier_phi_77_pred_2 = _3443;
                        frontier_phi_77_pred_3 = _3442;
                        frontier_phi_77_pred_4 = _3441;
                        frontier_phi_77_pred_5 = _3440;
                    }
                    _3082 = frontier_phi_77_pred;
                    _3080 = frontier_phi_77_pred_1;
                    _3078 = frontier_phi_77_pred_2;
                    _3076 = frontier_phi_77_pred_3;
                    _3074 = frontier_phi_77_pred_4;
                    _3072 = frontier_phi_77_pred_5;
                    uint _3238 = _3237 + 1u;
                    if (_3238 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3231 = _3072;
                        _3232 = _3074;
                        _3233 = _3076;
                        _3234 = _3078;
                        _3235 = _3080;
                        _3236 = _3082;
                        _3237 = _3238;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3076;
                frontier_phi_58_59_ladder_1 = _3082;
                frontier_phi_58_59_ladder_2 = _3080;
                frontier_phi_58_59_ladder_3 = _3078;
                frontier_phi_58_59_ladder_4 = _3074;
                frontier_phi_58_59_ladder_5 = _3072;
            }
            else
            {
                frontier_phi_58_59_ladder = _2955;
                frontier_phi_58_59_ladder_1 = _2961;
                frontier_phi_58_59_ladder_2 = _2959;
                frontier_phi_58_59_ladder_3 = _2957;
                frontier_phi_58_59_ladder_4 = _2953;
                frontier_phi_58_59_ladder_5 = _2951;
            }
            _3071 = frontier_phi_58_59_ladder_5;
            _3073 = frontier_phi_58_59_ladder_4;
            _3075 = frontier_phi_58_59_ladder;
            _3077 = frontier_phi_58_59_ladder_3;
            _3079 = frontier_phi_58_59_ladder_2;
            _3081 = frontier_phi_58_59_ladder_1;
        }
        float _3086 = isnan(1.0) ? _1100 : (isnan(_1100) ? 1.0 : min(_1100, 1.0));
        _2863 = (_3086 * _3077) + _2299;
        _2865 = (_3086 * _3079) + _2301;
        _2867 = (_3086 * _3081) + _2303;
        _2869 = ((_3071 * _1084) * _3086) + _2644;
        _2871 = ((_3073 * _1086) * _3086) + _2646;
        _2873 = ((_3075 * _1087) * _3086) + _2648;
    }
    else
    {
        _2863 = _2299;
        _2865 = _2301;
        _2867 = _2303;
        _2869 = _2644;
        _2871 = _2646;
        _2873 = _2648;
    }
    float _4919 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _4930 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _4941 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _2890 = ((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2863 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1100))) + ((_2869 + ((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    float _2891 = ((isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2865 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1100))) + ((_2871 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    float _2892 = ((isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2867 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1100))) + ((_2873 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    uint _2893 = _285 + 6u;
    float _2901 = _1022 / cbSceneParam._m0[86u].x;
    float _2902 = _1023 / cbSceneParam._m0[86u].y;
    vec4 _2916 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2901, _2902, (log2((isnan(cbSceneParam._m0[77u].w) ? _945 : (isnan(_945) ? cbSceneParam._m0[77u].w : min(_945, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2918 = _2916.x;
    float _2919 = _2916.y;
    float _2920 = _2916.z;
    float _2921 = _2916.w;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    if (_945 > cbSceneParam._m0[78u].w)
    {
        float _2976 = isnan(_945) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _945 : min(cbSceneParam._m0[80u].w, _945));
        float _2977 = _2976 / _945;
        float _2988 = _2977 * _995;
        float _2989 = _996 * _2977;
        float _2990 = (-0.0) - _2989;
        float _2991 = _2977 * _997;
        float _2993 = (cbSceneParam._m0[77u].w * _2990) / _2976;
        float _2994 = _2993 + cbSceneParam._m0[79u].w;
        float _2995 = cbSceneParam._m0[79u].w - _2989;
        float _3001 = sqrt(((_2988 * _2988) + (_2989 * _2989)) + (_2991 * _2991));
        float _3004 = (1.0 - (cbSceneParam._m0[77u].w / _2976)) * _3001;
        float _3009 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3011 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3188;
        if (abs((_2990 - _2993) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3188 = ((((_2994 > 0.0) ? exp2(_3009 * _2994) : (2.0 - exp2(_3011 * _2994))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3004;
        }
        else
        {
            float _3132 = 1.0 / cbSceneParam._m0[80u].x;
            float _3133 = isnan(_2995) ? _2994 : (isnan(_2994) ? _2995 : max(_2994, _2995));
            float _3134 = isnan(_2995) ? _2994 : (isnan(_2994) ? _2995 : min(_2994, _2995));
            float _3143 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : min(_3133, 0.0));
            float _3144 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : min(_3134, 0.0));
            _3188 = ((abs(_3001 / _2990) * cbSceneParam._m0[80u].y) * ((((_3143 - _3144) * 2.0) - ((exp2(_3009 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0)))) - exp2(_3009 * (isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0))))) * _3132)) - ((exp2(_3011 * _3143) - exp2(_3011 * _3144)) * _3132))) + (_3004 * cbSceneParam._m0[80u].z);
        }
        vec4 _3190 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2901, _2902, 1.0), 0.0);
        float _3199 = exp2((_3188 * (-1.44269502162933349609375)) * (1.0 - _3190.w));
        float _3200 = log2(_3199);
        float _3216 = log2(_2921);
        _3013 = (exp2(_3216 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].x)) * _3190.x) / cbSceneParam._m0[78u].x)) + _2918;
        _3015 = (exp2(_3216 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].y)) * _3190.y) / cbSceneParam._m0[78u].y)) + _2919;
        _3017 = (exp2(_3216 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].z)) * _3190.z) / cbSceneParam._m0[78u].z)) + _2920;
        _3019 = _3199 * _2921;
    }
    else
    {
        _3013 = _2918;
        _3015 = _2919;
        _3017 = _2920;
        _3019 = _2921;
    }
    bool _3226;
    vec4 _3029;
    vec4 _3051;
    float _3053;
    float _3057;
    float _3058;
    float _3059;
    float _3060;
    bool _3070;
    for (;;)
    {
        _3029 = cbMatDynParam._m0[0u];
        float _3031 = roundEven(_3029.y);
        bool _3032 = _3031 == 3.0;
        float _3033 = log2(_3019);
        float _3040 = exp2(_3033 * cbSceneParam._m0[78u].x) * _2890;
        float _3041 = exp2(_3033 * cbSceneParam._m0[78u].y) * _2891;
        float _3042 = exp2(_3033 * cbSceneParam._m0[78u].z) * _2892;
        float _3049 = _1011 + (-0.5);
        _3051 = cbMtdParam._m0[1u];
        _3053 = _3051.y * _3049;
        float _3056 = (_3031 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3057 = _3056 * (_3032 ? _3040 : (_3040 + (cbSceneParam._m0[72u].w * _3013)));
        _3058 = _3056 * (_3032 ? _3041 : (_3041 + (cbSceneParam._m0[72u].w * _3015)));
        _3059 = _3056 * (_3032 ? _3042 : (_3042 + (cbSceneParam._m0[72u].w * _3017)));
        _3060 = _3049 * 0.999000012874603271484375;
        _3070 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3070)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3060) < 0.5)
            {
                _3226 = true;
                break;
            }
        }
        uint _3167 = _1060 + uint(_3029.w);
        if ((cbInstanceData._m0[_3167].w < 1.0) && ((cbInstanceData._m0[_3167].w + _3060) < 0.5))
        {
            _3226 = true;
            break;
        }
        if ((_3053 + 1.0) < _3051.x)
        {
            _3226 = true;
            break;
        }
        _3226 = false;
        break;
    }
    float _3431;
    if (_3226)
    {
        discard_state = true;
        _3431 = 0.0;
    }
    else
    {
        _3431 = cbInstanceData._m0[_2893].w;
    }
    SV_Target.x = _3057;
    SV_Target.y = _3058;
    SV_Target.z = _3059;
    SV_Target.w = _3431;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2893].w;
    discard_exit();
}


