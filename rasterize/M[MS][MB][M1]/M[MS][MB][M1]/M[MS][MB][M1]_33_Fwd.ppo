#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1150;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    uint _235 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _235 + 1u;
    uint _244 = _235 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_235].x * cbInstanceData._m0[_235].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _304 = _300.z;
    float _309 = (_300.x * 2.0) + (-1.0);
    float _311 = (_300.y * 2.0) + (-1.0);
    float _312 = dot(vec2(_309, _311), vec2(_309, _311));
    float _3479 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))));
    float _321 = fma(_318, _223, fma(_311, _230, _309 * _216));
    float _324 = fma(_318, _224, fma(_311, _231, _309 * _217));
    float _327 = fma(_318, _225, fma(_311, _232, _309 * _218));
    float _331 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _369 = _367.x;
    float _370 = 1.0 - _369;
    float _377 = ((_369 - _370) * cbMtdParam._m0[24u].z) + _370;
    float _379 = (cbMtdParam._m0[19u].x + dot(vec4(_331 * _321, _331 * _324, _331 * _327, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_377 * cbMtdParam._m0[21u].z);
    float _3490 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _382 = (-0.0) - cbMtdParam._m0[24u].x;
    float _384 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _385 = isnan(1.0) ? _384 : (isnan(_384) ? 1.0 : min(_384, 1.0));
    float _392 = _380 - ((_380 * TEXCOORD_8.x) * _385);
    float _393 = _380 - ((_380 * TEXCOORD_8.y) * _385);
    float _394 = _380 - ((_380 * TEXCOORD_8.z) * _385);
    float _401 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _405 = ((isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : min(_401, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _413 = (_405 - (((_377 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _405))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3521 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _418 = ((_392 * (cbMtdParam._m0[17u].x - _280)) * _414) + _280;
    float _419 = ((_393 * (cbMtdParam._m0[17u].y - _281)) * _414) + _281;
    float _420 = ((_394 * (cbMtdParam._m0[17u].z - _282)) * _414) + _282;
    vec4 _432 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _254) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _255) + cbTextureTilingScale._m0[19u].w));
    float _434 = _432.x;
    float _435 = 1.0 - _434;
    float _464 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_434 - _435) * cbMtdParam._m0[24u].w) + _435) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3532 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _473 = ((((cbMtdParam._m0[10u].x - _418) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _465) + _418;
    float _474 = ((((cbMtdParam._m0[10u].y - _419) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _465) + _419;
    float _475 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _420)) * _465) + _420;
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _490 = _488.x;
    float _493 = _490 - ((_490 * _392) * _414);
    float _495 = _493 - (_493 * _465);
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _516 = (_509.x * 2.0) + (-1.0);
    float _517 = (_509.y * 2.0) + (-1.0);
    float _518 = dot(vec2(_516, _517), vec2(_516, _517));
    float _3543 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _527 = (((_509.z - _304) * _392) * _414) + _304;
    float _530 = ((cbMtdParam._m0[23u].y - _527) * _465) + _527;
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _254) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _255) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _555 = (_549.x * 2.0) + (-1.0);
    float _556 = (_549.y * 2.0) + (-1.0);
    float _557 = dot(vec2(_555, _556), vec2(_555, _556));
    float _3554 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _577 = (((cbMtdParam._m0[21u].x * _309) + ((_516 - _309) * _392)) * _414) + _309;
    float _578 = (((cbMtdParam._m0[21u].x * _311) + ((_517 - _311) * _393)) * _414) + _311;
    float _579 = (((sqrt(1.0 - (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) - _318) * _394) * _414) + _318;
    float _590 = (((_555 - _577) + (_577 * cbMtdParam._m0[22u].z)) * _465) + _577;
    float _591 = (((_556 - _578) + (_578 * cbMtdParam._m0[22u].z)) * _465) + _578;
    float _592 = ((sqrt(1.0 - (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) - _579) * _465) + _579;
    float _594 = cbMtdParam._m0[22u].x + _300.w;
    float _597 = fma(_592, _223, fma(_591, _230, _590 * _216));
    float _600 = fma(_592, _224, fma(_591, _231, _590 * _217));
    float _603 = fma(_592, _225, fma(_591, _232, _590 * _218));
    float _607 = inversesqrt(dot(vec3(_597, _600, _603), vec3(_597, _600, _603)));
    float _608 = _607 * _597;
    float _609 = _607 * _600;
    float _610 = _607 * _603;
    float _3565 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _611 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3587 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3598 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3609 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3620 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _616 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _630 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _680 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _670);
    float _681 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _670);
    float _682 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _670);
    float _686 = inversesqrt(dot(vec3(_680, _681, _682), vec3(_680, _681, _682)));
    float _687 = _680 * _686;
    float _688 = _681 * _686;
    float _689 = _682 * _686;
    float _695 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _696 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _717 = fma(_610, cbSceneParam._m0[5u].z, fma(_609, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _608));
    float _720 = fma(_610, cbSceneParam._m0[6u].z, fma(_609, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _608));
    float _723 = fma(_610, cbSceneParam._m0[7u].z, fma(_609, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _608));
    uint _737 = (_235 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _743 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_737].x;
    float _744 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_737].y;
    float _745 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_737].z;
    float _3631 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _749 = 1.0 - _616;
    float _750 = _746 * _749;
    float _751 = _747 * _749;
    float _752 = _748 * _749;
    float _757 = (_746 + (-0.039999999105930328369140625)) * _616;
    float _758 = (_747 + (-0.039999999105930328369140625)) * _616;
    float _759 = (_748 + (-0.039999999105930328369140625)) * _616;
    float _760 = _757 + 0.039999999105930328369140625;
    float _762 = _758 + 0.039999999105930328369140625;
    float _763 = _759 + 0.039999999105930328369140625;
    vec4 _772 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _695, cbSceneParam._m0[86u].y * _696));
    float _776 = ((isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * TEXCOORD_5.w) * _772.x;
    float _777 = dot(vec3(_608, _609, _610), vec3(_687, _688, _689));
    float _780 = _777 * 2.0;
    float _784 = (_780 * _608) - _687;
    float _785 = (_780 * _609) - _688;
    float _786 = (_780 * _610) - _689;
    float _790 = abs(dot(vec3(_687, _688, _689), vec3(_608, _609, _610)));
    float _3664 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _792 = sqrt(_611);
    float _805 = exp2((_792 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_792 * 3.0));
    float _811 = (1.0 - _805) * ((_792 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _812 = _805 * _792;
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1149;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _874 = fma(_848, cbModelParam._m0[26u].z, fma(_844, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _840));
        float _878 = fma(_848, cbModelParam._m0[27u].z, fma(_844, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _840));
        float _882 = fma(_848, cbModelParam._m0[28u].z, fma(_844, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _840));
        float _907 = _840 + _608;
        float _908 = _844 + _609;
        float _909 = _848 + _610;
        float _919 = fma(_909, cbModelParam._m0[26u].z, fma(_908, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _907)) - _874;
        float _920 = fma(_909, cbModelParam._m0[27u].z, fma(_908, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _907)) - _878;
        float _921 = fma(_909, cbModelParam._m0[28u].z, fma(_908, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _907)) - _882;
        float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
        float _938 = ((_925 * _919) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_874 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_925 * _920) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_878 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_925 * _921) / cbModelParam._m0[34u].z) + ((((((_882 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        float _977 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_943.x + (-0.5));
        float _979 = _977 * (_943.y + (-0.5));
        float _980 = _977 * (_943.z + (-0.5));
        float _987 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_950.x + (-0.5));
        float _989 = _987 * (_950.y + (-0.5));
        float _990 = _987 * (_950.z + (-0.5));
        float _997 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_957.x + (-0.5));
        float _999 = _997 * (_957.y + (-0.5));
        float _1000 = _997 * (_957.z + (-0.5));
        float _1007 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_964.x + (-0.5));
        float _1009 = _1007 * (_964.y + (-0.5));
        float _1010 = _1007 * (_964.z + (-0.5));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = _978 * 0.5;
        float _1015 = _988 * 0.5;
        float _1016 = _998 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1031 = (dot(vec3(_608, _609, _610), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1041 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3712 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1043 + 1.0))) + _1048) * _1011;
        float _1058 = _979 * 0.5;
        float _1059 = _989 * 0.5;
        float _1060 = _999 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_608, _609, _610), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3745 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1085 + 1.0))) + _1090) * _1012;
        float _1100 = _980 * 0.5;
        float _1101 = _990 * 0.5;
        float _1102 = _1000 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_608, _609, _610), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3778 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1127 + 1.0))) + _1132) * _1013;
        _1149 = _980;
        _1151 = _979;
        _1152 = _978;
        _1153 = _990;
        _1154 = _989;
        _1155 = _988;
        _1156 = _1000;
        _1157 = _999;
        _1158 = _998;
        _1159 = _1013;
        _1160 = _1012;
        _1161 = _1011;
        _1162 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1163 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
    }
    else
    {
        _1149 = _1150;
        _1151 = _1150;
        _1152 = _1150;
        _1153 = _1150;
        _1154 = _1150;
        _1155 = _1150;
        _1156 = _1150;
        _1157 = _1150;
        _1158 = _1150;
        _1159 = _1150;
        _1160 = _1150;
        _1161 = _1150;
        _1162 = 0.0;
        _1163 = 0.0;
        _1164 = 0.0;
    }
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1189 = fma(_848, cbModelParam._m0[30u].z, fma(_844, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _840));
        float _1193 = fma(_848, cbModelParam._m0[31u].z, fma(_844, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _840));
        float _1197 = fma(_848, cbModelParam._m0[32u].z, fma(_844, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _840));
        float _1220 = _840 + _608;
        float _1221 = _844 + _609;
        float _1222 = _848 + _610;
        float _1232 = fma(_1222, cbModelParam._m0[30u].z, fma(_1221, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1220)) - _1189;
        float _1233 = fma(_1222, cbModelParam._m0[31u].z, fma(_1221, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1220)) - _1193;
        float _1234 = fma(_1222, cbModelParam._m0[32u].z, fma(_1221, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1220)) - _1197;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1189 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1193 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[35u].z) + ((((((_1197 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1288 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1255.x + (-0.5));
        float _1290 = _1288 * (_1255.y + (-0.5));
        float _1291 = _1288 * (_1255.z + (-0.5));
        float _1298 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1262.x + (-0.5));
        float _1300 = _1298 * (_1262.y + (-0.5));
        float _1301 = _1298 * (_1262.z + (-0.5));
        float _1308 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1269.x + (-0.5));
        float _1310 = _1308 * (_1269.y + (-0.5));
        float _1311 = _1308 * (_1269.z + (-0.5));
        float _1318 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1276.x + (-0.5));
        float _1320 = _1318 * (_1276.y + (-0.5));
        float _1321 = _1318 * (_1276.z + (-0.5));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = _1289 * 0.5;
        float _1326 = _1299 * 0.5;
        float _1327 = _1309 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_608, _609, _610), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _3841 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1352 + 1.0))) + _1357) * _1322;
        float _1367 = _1290 * 0.5;
        float _1368 = _1300 * 0.5;
        float _1369 = _1310 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_608, _609, _610), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _3874 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1394 + 1.0))) + _1399) * _1323;
        float _1409 = _1291 * 0.5;
        float _1410 = _1301 * 0.5;
        float _1411 = _1311 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_608, _609, _610), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _3907 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1436 + 1.0))) + _1441) * _1324;
        _1458 = _1291;
        _1459 = _1290;
        _1460 = _1289;
        _1461 = _1301;
        _1462 = _1300;
        _1463 = _1299;
        _1464 = _1311;
        _1465 = _1310;
        _1466 = _1309;
        _1467 = _1324;
        _1468 = _1323;
        _1469 = _1322;
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
    }
    else
    {
        _1458 = _1150;
        _1459 = _1150;
        _1460 = _1150;
        _1461 = _1150;
        _1462 = _1150;
        _1463 = _1150;
        _1464 = _1150;
        _1465 = _1150;
        _1466 = _1150;
        _1467 = _1150;
        _1468 = _1150;
        _1469 = _1150;
        _1470 = 0.0;
        _1471 = 0.0;
        _1472 = 0.0;
    }
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1162)) + _1162;
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1163)) + _1163;
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1164)) + _1164;
    float _1505 = fma(_1484, cbSceneParam._m0[89u].z, fma(_1483, cbSceneParam._m0[89u].y, _1482 * cbSceneParam._m0[89u].x));
    float _1508 = fma(_1484, cbSceneParam._m0[90u].z, fma(_1483, cbSceneParam._m0[90u].y, _1482 * cbSceneParam._m0[90u].x));
    float _1511 = fma(_1484, cbSceneParam._m0[91u].z, fma(_1483, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1482));
    float _1526 = _784 * 0.5;
    float _1527 = _785 * 0.5;
    float _1528 = _786 * 0.5;
    float _1529 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1532 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1535 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1569;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1542 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1149, _1153, _1156, _1159));
        float _1546 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1151, _1154, _1157, _1160));
        float _1550 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1152, _1155, _1158, _1161));
        float _1557 = dot(vec4(cbModelParam._m0[39u]), vec4(_1526, _1527, _1528, 1.0));
        _1569 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1569 = 1.0;
    }
    float _1580;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1571 = dot(vec4(cbModelParam._m0[40u]), vec4(_1526, _1527, _1528, 1.0));
        _1580 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1571) ? 0.0 : (isnan(0.0) ? _1571 : max(0.0, _1571))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1580 = 1.0;
    }
    float _1584 = (_1580 * cbModelParam._m0[1u].x) + (_1569 * (1.0 - cbModelParam._m0[1u].x));
    float _1594 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _611);
    float _1595 = isnan(_1594) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1594 : min(cbModelParam._m0[25u].z, _1594));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1643 = fma(_848, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _840)) + cbModelParam._m0[13u].w;
        float _1647 = fma(_848, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _840)) + cbModelParam._m0[14u].w;
        float _1651 = fma(_848, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _840)) + cbModelParam._m0[15u].w;
        float _1654 = fma(_786, cbModelParam._m0[13u].z, fma(_785, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _784));
        float _1657 = fma(_786, cbModelParam._m0[14u].z, fma(_785, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _784));
        float _1660 = fma(_786, cbModelParam._m0[15u].z, fma(_785, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _784));
        float _1688;
        if (_1654 > 0.0)
        {
            _1688 = abs((1.0 - _1643) / _1654);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1643 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1688 = frontier_phi_14_12_ladder;
        }
        float _1892;
        if (_1657 > 0.0)
        {
            _1892 = abs((1.0 - _1647) / _1657);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1647 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1892 = frontier_phi_23_19_ladder;
        }
        float _2146;
        if (_1660 > 0.0)
        {
            _2146 = abs((1.0 - _1651) / _1660);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1651 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2146 = frontier_phi_35_30_ladder;
        }
        float _2148 = isnan(_1892) ? _1688 : (isnan(_1688) ? _1892 : min(_1688, _1892));
        float _2149 = isnan(_2146) ? _2148 : (isnan(_2148) ? _2146 : min(_2148, _2146));
        float _2153 = (_2149 * _1654) + _1643;
        float _2154 = (_2149 * _1657) + _1647;
        float _2155 = (_2149 * _1660) + _1651;
        float _2156 = _2149 * 9.9999997473787516355514526367188e-05;
        float _2158 = (-1.0) - _2156;
        float _2160 = _2156 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2155 > _2160) || ((_2155 < _2158) || ((_2154 > _2160) || ((_2154 < _2158) || ((_2153 < _2158) || (_2153 > _2160))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2283 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2155, cbModelParam._m0[9u].z, fma(_2154, cbModelParam._m0[9u].y, _2153 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2155, cbModelParam._m0[10u].z, fma(_2154, cbModelParam._m0[10u].y, _2153 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2155, cbModelParam._m0[11u].z, fma(_2154, cbModelParam._m0[11u].y, _2153 * cbModelParam._m0[11u].x))), _1595);
            frontier_phi_13_35_ladder = _2283.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2283.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2283.x * cbModelParam._m0[1u].y;
        }
        _1676 = frontier_phi_13_35_ladder_2;
        _1678 = frontier_phi_13_35_ladder_1;
        _1680 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_784, _785, _786), _1595);
        _1676 = _1664.x * cbModelParam._m0[1u].y;
        _1678 = _1664.y * cbModelParam._m0[1u].y;
        _1680 = _1664.z * cbModelParam._m0[1u].y;
    }
    float _1684 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _611);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1684 : min(cbModelParam._m0[25u].w, _1684));
    float _1775;
    float _1777;
    float _1779;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1739 = fma(_848, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _840)) + cbModelParam._m0[21u].w;
        float _1743 = fma(_848, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _840)) + cbModelParam._m0[22u].w;
        float _1747 = fma(_848, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _840)) + cbModelParam._m0[23u].w;
        float _1750 = fma(_786, cbModelParam._m0[21u].z, fma(_785, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _784));
        float _1753 = fma(_786, cbModelParam._m0[22u].z, fma(_785, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _784));
        float _1756 = fma(_786, cbModelParam._m0[23u].z, fma(_785, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _784));
        float _1897;
        if (_1750 > 0.0)
        {
            _1897 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1897 = frontier_phi_25_21_ladder;
        }
        float _2173;
        if (_1753 > 0.0)
        {
            _2173 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2173 = frontier_phi_37_32_ladder;
        }
        float _2386;
        if (_1756 > 0.0)
        {
            _2386 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2386 = frontier_phi_46_43_ladder;
        }
        float _2388 = isnan(_2173) ? _1897 : (isnan(_1897) ? _2173 : min(_1897, _2173));
        float _2389 = isnan(_2386) ? _2388 : (isnan(_2388) ? _2386 : min(_2388, _2386));
        float _2393 = (_2389 * _1750) + _1739;
        float _2394 = (_2389 * _1753) + _1743;
        float _2395 = (_2389 * _1756) + _1747;
        float _2396 = _2389 * 9.9999997473787516355514526367188e-05;
        float _2397 = (-1.0) - _2396;
        float _2399 = _2396 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2395 > _2399) || ((_2395 < _2397) || ((_2394 > _2399) || ((_2394 < _2397) || ((_2393 < _2397) || (_2393 > _2399))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2594 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2395, cbModelParam._m0[17u].z, fma(_2394, cbModelParam._m0[17u].y, _2393 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2395, cbModelParam._m0[18u].z, fma(_2394, cbModelParam._m0[18u].y, _2393 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2395, cbModelParam._m0[19u].z, fma(_2394, cbModelParam._m0[19u].y, _2393 * cbModelParam._m0[19u].x))), _1685);
            frontier_phi_22_46_ladder = _2594.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2594.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2594.x * cbModelParam._m0[1u].z;
        }
        _1775 = frontier_phi_22_46_ladder_2;
        _1777 = frontier_phi_22_46_ladder_1;
        _1779 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_784, _785, _786), _1685);
        _1775 = _1759.x * cbModelParam._m0[1u].z;
        _1777 = _1759.y * cbModelParam._m0[1u].z;
        _1779 = _1759.z * cbModelParam._m0[1u].z;
    }
    float _1792 = (((_811 * _760) + _812) * _776) * ((cbModelParam._m0[1u].w * (_1775 - _1676)) + _1676);
    float _1794 = (((_811 * _762) + _812) * _776) * ((cbModelParam._m0[1u].w * (_1777 - _1678)) + _1678);
    float _1796 = (((_811 * _763) + _812) * _776) * ((cbModelParam._m0[1u].w * (_1779 - _1680)) + _1680);
    float _1799 = fma(_1796, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1792 * cbSceneParam._m0[89u].x));
    float _1802 = fma(_1796, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1792 * cbSceneParam._m0[90u].x));
    float _1805 = fma(_1796, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, _1792 * cbSceneParam._m0[91u].x));
    uvec4 _1815 = floatBitsToUint(cbInstanceData._m0[_235 + 5u]);
    uint _1817 = _1815.x * 14u;
    uint _1818 = _1817 + 13u;
    float _1825 = _776 + (-1.0);
    float _1830 = (cbLight._m0[_1818].x * _1825) + 1.0;
    float _1831 = (cbLight._m0[_1818].y * _1825) + 1.0;
    float _1832 = (cbLight._m0[_1818].z * _1825) + 1.0;
    float _1833 = (cbLight._m0[_1818].w * _1825) + 1.0;
    uint _1834 = _1817 + 5u;
    float _1840 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
    uint _1844 = _1817 + 4u;
    float _1851 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1855 = _1817 | 1u;
    float _1866 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_608, _609, _610));
    float _1869 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_608, _609, _610));
    float _4043 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _4054 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1874 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1876 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.3183098733425140380859375;
    float _1883 = ((cbLight._m0[_1834].x * _1840) * _1876) + ((cbLight._m0[_1844].x * _1851) * _1874);
    float _1884 = ((_1840 * cbLight._m0[_1834].y) * _1876) + ((_1851 * cbLight._m0[_1844].y) * _1874);
    float _1885 = ((_1840 * cbLight._m0[_1834].z) * _1876) + ((_1851 * cbLight._m0[_1844].z) * _1874);
    uvec4 _1889 = floatBitsToUint(cbLight._m0[_1817 + 12u]);
    bool _1891 = _1889.x == 0u;
    float _1902;
    float _1904;
    float _1906;
    if (_1891)
    {
        _1902 = _1883;
        _1904 = _1884;
        _1906 = _1885;
    }
    else
    {
        uint _1910 = _1817 + 6u;
        float _1926 = (dot(vec3(cbLight._m0[_1817 + 2u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _1927 = _1926 * _1926;
        float _4065 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1928 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1929 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _1902 = (((cbLight._m0[_1910].x * 0.3183098733425140380859375) * _1928) * _1929) + _1883;
        _1904 = (((cbLight._m0[_1910].y * 0.3183098733425140380859375) * _1928) * _1929) + _1884;
        _1906 = (((cbLight._m0[_1910].z * 0.3183098733425140380859375) * _1928) * _1929) + _1885;
    }
    bool _1909 = _1889.y == 0u;
    float _1947;
    float _1949;
    float _1951;
    if (_1909)
    {
        _1947 = _1902;
        _1949 = _1904;
        _1951 = _1906;
    }
    else
    {
        uint _2117 = _1817 + 7u;
        float _2133 = (dot(vec3(cbLight._m0[_1817 + 3u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _2134 = _2133 * _2133;
        float _4081 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2135 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2136 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _1947 = (((cbLight._m0[_2117].x * 0.3183098733425140380859375) * _2135) * _2136) + _1902;
        _1949 = (((cbLight._m0[_2117].y * 0.3183098733425140380859375) * _2135) * _2136) + _1904;
        _1951 = (((cbLight._m0[_2117].z * 0.3183098733425140380859375) * _2135) * _2136) + _1906;
    }
    uint _1954 = _1817 + 8u;
    float _1967 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1817].w)) * _611) * 0.949999988079071044921875);
    float _1968 = _1967 * _1967;
    float _1969 = cbLight._m0[_1817].x + _687;
    float _1970 = cbLight._m0[_1817].y + _688;
    float _1971 = cbLight._m0[_1817].z + _689;
    float _1975 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
    float _1976 = _1975 * _1969;
    float _1977 = _1975 * _1970;
    float _1978 = _1975 * _1971;
    float _1979 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_1817].xyz));
    float _4097 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _4108 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _1983 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _1984 = dot(vec3(_608, _609, _610), vec3(_1976, _1977, _1978));
    float _4119 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _1988 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_1976, _1977, _1978));
    float _4130 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1992 = _1968 * _1968;
    float _1996 = ((_1987 * _1987) * (_1992 + (-1.0))) + 1.0;
    float _2004 = exp2(log2(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * 5.0);
    float _2005 = 0.959999978542327880859375 - _757;
    float _2007 = 0.959999978542327880859375 - _758;
    float _2008 = 0.959999978542327880859375 - _759;
    float _2015 = 1.0 - _1968;
    float _2026 = (0.5 / (((_1983 * ((_1982 * _2015) + _1968)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2015) + _1968) * _1982))) * _1982;
    float _4141 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2028 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1992 / ((_1996 * _1996) * 3.141590118408203125));
    uint _2039 = _1817 + 9u;
    float _2050 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1855].w)) * _611) * 0.949999988079071044921875);
    float _2051 = _2050 * _2050;
    float _2052 = cbLight._m0[_1855].x + _687;
    float _2053 = cbLight._m0[_1855].y + _688;
    float _2054 = cbLight._m0[_1855].z + _689;
    float _2058 = inversesqrt(dot(vec3(_2052, _2053, _2054), vec3(_2052, _2053, _2054)));
    float _2059 = _2058 * _2052;
    float _2060 = _2058 * _2053;
    float _2061 = _2058 * _2054;
    float _2062 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_1855].xyz));
    float _4152 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2065 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2066 = dot(vec3(_608, _609, _610), vec3(_2059, _2060, _2061));
    float _4163 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2070 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_2059, _2060, _2061));
    float _4174 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2074 = _2051 * _2051;
    float _2078 = ((_2069 * _2069) * (_2074 + (-1.0))) + 1.0;
    float _2085 = exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0);
    float _2092 = 1.0 - _2051;
    float _2102 = (0.5 / (((_1983 * ((_2065 * _2092) + _2051)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2092) + _2051) * _2065))) * _2065;
    float _4185 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2104 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2074 / ((_2078 * _2078) * 3.141590118408203125));
    float _2114 = (((((_2085 * _2005) + _760) * cbLight._m0[_2039].x) * _2104) * _1840) + (((((_2004 * _2005) + _760) * cbLight._m0[_1954].x) * _2028) * _1851);
    float _2115 = (((((_2085 * _2007) + _762) * cbLight._m0[_2039].y) * _2104) * _1840) + (((((_2004 * _2007) + _762) * cbLight._m0[_1954].y) * _2028) * _1851);
    float _2116 = (((((_2085 * _2008) + _763) * cbLight._m0[_2039].z) * _2104) * _1840) + (((((_2004 * _2008) + _763) * cbLight._m0[_1954].z) * _2028) * _1851);
    float _2178;
    float _2180;
    float _2182;
    if (_1891)
    {
        _2178 = _2114;
        _2180 = _2115;
        _2182 = _2116;
    }
    else
    {
        uint _2184 = _1817 + 2u;
        uint _2188 = _1817 + 10u;
        float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _611) * 0.949999988079071044921875);
        float _2203 = _2202 * _2202;
        float _2204 = cbLight._m0[_2184].x + _687;
        float _2205 = cbLight._m0[_2184].y + _688;
        float _2206 = cbLight._m0[_2184].z + _689;
        float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
        float _2211 = _2210 * _2204;
        float _2212 = _2210 * _2205;
        float _2213 = _2210 * _2206;
        float _2214 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2184].xyz));
        float _4196 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2217 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2218 = dot(vec3(_608, _609, _610), vec3(_2211, _2212, _2213));
        float _4207 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2222 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2211, _2212, _2213));
        float _4218 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2226 = _2203 * _2203;
        float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
        float _2237 = exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0);
        float _2244 = 1.0 - _2203;
        float _2254 = (0.5 / (((_1983 * ((_2217 * _2244) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2244) + _2203) * _2217))) * _2217;
        float _4229 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2256 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
        float _2257 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2178 = (((((_2237 * _2005) + _760) * cbLight._m0[_2188].x) * _2256) * _2257) + _2114;
        _2180 = (((((_2237 * _2007) + _762) * cbLight._m0[_2188].y) * _2256) * _2257) + _2115;
        _2182 = (((((_2237 * _2008) + _763) * cbLight._m0[_2188].z) * _2256) * _2257) + _2116;
    }
    float _2292;
    float _2294;
    float _2296;
    if (_1909)
    {
        _2292 = _2178;
        _2294 = _2180;
        _2296 = _2182;
    }
    else
    {
        uint _2303 = _1817 + 3u;
        uint _2307 = _1817 + 11u;
        float _2321 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2303].w)) * _611) * 0.949999988079071044921875);
        float _2322 = _2321 * _2321;
        float _2323 = cbLight._m0[_2303].x + _687;
        float _2324 = cbLight._m0[_2303].y + _688;
        float _2325 = cbLight._m0[_2303].z + _689;
        float _2329 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
        float _2330 = _2329 * _2323;
        float _2331 = _2329 * _2324;
        float _2332 = _2329 * _2325;
        float _2333 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2303].xyz));
        float _4245 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2336 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2337 = dot(vec3(_608, _609, _610), vec3(_2330, _2331, _2332));
        float _4256 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2340 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2341 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_2330, _2331, _2332));
        float _4267 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2345 = _2322 * _2322;
        float _2349 = ((_2340 * _2340) * (_2345 + (-1.0))) + 1.0;
        float _2356 = exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0);
        float _2363 = 1.0 - _2322;
        float _2373 = (0.5 / (((_1983 * ((_2336 * _2363) + _2322)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2363) + _2322) * _2336))) * _2336;
        float _4278 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2375 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2345 / ((_2349 * _2349) * 3.141590118408203125));
        float _2376 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _2292 = (((((_2356 * _2005) + _760) * cbLight._m0[_2307].x) * _2375) * _2376) + _2178;
        _2294 = (((((_2356 * _2007) + _762) * cbLight._m0[_2307].y) * _2375) * _2376) + _2180;
        _2296 = (((((_2356 * _2008) + _763) * cbLight._m0[_2307].z) * _2375) * _2376) + _2182;
    }
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    if (_1815.y == 0u)
    {
        float _2451 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2451;
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2451;
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2451;
        uvec4 _2466 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2467 = _2466.x;
        uint _2478 = uint((float(_2466.y) * floor(float(uint(cbSceneParam._m0[85u].y * _696) / _2467))) + floor(float(uint(cbSceneParam._m0[85u].x * _695) / _2467)));
        float _2488 = (log2(_2454 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2489 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        uint _2492 = uint(isnan(14.0) ? _2489 : (isnan(_2489) ? 14.0 : min(_2489, 14.0)));
        uvec4 _2497 = texelFetch(g_lightClusterGridBuffer, int(((_2492 << 2u) + (_2478 << 6u)) >> 2u));
        uint _2498 = _2497.x;
        uint _2499 = _2466.z;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        if (((((1u << ((_2499 >> 4u) & 15u)) + 4294967295u) & _2498) == 0u) || ((_2499 & 240u) == 0u))
        {
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
        }
        else
        {
            float _2600;
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2610;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            uint _2749 = 0u;
            uint _2758;
            bool _2759;
            for (;;)
            {
                _2758 = texelFetch(g_lightClassification, int((((_2492 << 5u) + (_2478 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                _2759 = _2758 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2759)
                {
                    frontier_phi_61_pred = _2743;
                    frontier_phi_61_pred_1 = _2748;
                    frontier_phi_61_pred_2 = _2747;
                    frontier_phi_61_pred_3 = _2746;
                    frontier_phi_61_pred_4 = _2745;
                    frontier_phi_61_pred_5 = _2744;
                }
                else
                {
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    uint _2873;
                    _2867 = _2743;
                    _2868 = _2744;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2748;
                    _2873 = _2758;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    for (;;)
                    {
                        uint _2877 = uint(findLSB(_2873)) + (_2749 << 5u);
                        uint _2874 = (_2873 + 4294967295u) & _2873;
                        uint _2879 = _2877 * 48u;
                        vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2879)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 3u)).x));
                        uint _2899 = (_2877 * 48u) + 4u;
                        vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2899)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 3u)).x));
                        uint _2918 = (_2877 * 48u) + 8u;
                        vec3 _2929 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x));
                        float _2933 = _2893.x - _2452;
                        float _2934 = _2893.y - _2453;
                        float _2935 = _2893.z - _2454;
                        float _2936 = dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935));
                        float _2939 = inversesqrt(_2936);
                        float _2940 = _2939 * _2933;
                        float _2941 = _2939 * _2934;
                        float _2942 = _2939 * _2935;
                        float _2943 = dot(vec3(_717, _720, _723), vec3(_2940, _2941, _2942));
                        float _2948 = 1.0 - (_2936 * _2893.w);
                        float _4304 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2949 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _2950 = sqrt(_2936) * _2912.w;
                        float _2953 = 1.39999997615814208984375 / (_2950 + 1.39999997615814208984375);
                        float _2954 = _2953 * _2953;
                        float _2957 = ((1.0 - _2954) * _2943) + _2954;
                        float _2960 = _2950 * _2950;
                        float _2964 = ((isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))) * _2949) / ((_2960 * 0.699999988079071044921875) + 1.0);
                        float _2968 = (-0.0) - _2452;
                        float _2969 = (-0.0) - _2453;
                        float _2970 = (-0.0) - _2454;
                        float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
                        float _2975 = _2974 * _2968;
                        float _2976 = _2974 * _2969;
                        float _2977 = _2974 * _2970;
                        float _2985 = exp2(log2(1.0 / ((_2960 * 3.5) + 5.0)) * 0.25);
                        float _2986 = 1.0 - _792;
                        float _2993 = sqrt(1.0 - ((1.0 - (_2986 * _2986)) * (1.0 - (_2985 * _2985))));
                        float _2994 = _2993 * _2993;
                        float _2995 = _2994 * _2994;
                        float _2996 = _2975 + _2940;
                        float _2997 = _2976 + _2941;
                        float _2998 = _2977 + _2942;
                        float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
                        float _3006 = dot(vec3(_717, _720, _723), vec3(_2975, _2976, _2977));
                        float _4320 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3009 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3010 = dot(vec3(_717, _720, _723), vec3(_3002 * _2996, _3002 * _2997, _3002 * _2998));
                        float _4331 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3013 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3017 = ((_3013 * _3013) * (_2995 + (-1.0))) + 1.0;
                        float _3018 = _2953 * _2994;
                        float _3019 = _3018 * _3018;
                        float _3022 = ((1.0 - _3019) * _2943) + _3019;
                        float _4342 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3023 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3024 = 1.0 - _2994;
                        float _3034 = (0.5 / (((_3023 * ((_3009 * _3024) + _2994)) + 9.9999999392252902907785028219223e-09) + (((_3023 * _3024) + _2994) * _3009))) * _3023;
                        float _4353 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3045 = (((_2995 * 3.1415927410125732421875) * (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) / ((_3017 * _3017) * ((_2960 * 2.1991131305694580078125) + 3.141590118408203125))) * _2949;
                        _2802 = (_2964 * _2912.x) + _2870;
                        _2803 = (_2964 * _2912.y) + _2871;
                        _2804 = (_2964 * _2912.z) + _2872;
                        _2799 = (_3045 * _2929.x) + _2867;
                        _2800 = (_3045 * _2929.y) + _2868;
                        _2801 = (_3045 * _2929.z) + _2869;
                        if (_2874 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2804;
                            _2873 = _2874;
                        }
                    }
                    frontier_phi_61_pred = _2799;
                    frontier_phi_61_pred_1 = _2804;
                    frontier_phi_61_pred_2 = _2803;
                    frontier_phi_61_pred_3 = _2802;
                    frontier_phi_61_pred_4 = _2801;
                    frontier_phi_61_pred_5 = _2800;
                }
                _2600 = frontier_phi_61_pred;
                _2610 = frontier_phi_61_pred_1;
                _2608 = frontier_phi_61_pred_2;
                _2606 = frontier_phi_61_pred_3;
                _2604 = frontier_phi_61_pred_4;
                _2602 = frontier_phi_61_pred_5;
                uint _2750 = _2749 + 1u;
                if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2743 = _2600;
                    _2744 = _2602;
                    _2745 = _2604;
                    _2746 = _2606;
                    _2747 = _2608;
                    _2748 = _2610;
                    _2749 = _2750;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
        }
        uvec4 _2613 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2614 = _2613.z;
        uint _2616 = (_2614 >> 8u) & 15u;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        if (((4294967295u << _2616) & _2498) == 0u)
        {
            _2711 = _2599;
            _2713 = _2601;
            _2715 = _2603;
            _2717 = _2605;
            _2719 = _2607;
            _2721 = _2609;
        }
        else
        {
            float _2736 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
            float _2737 = _2736 * _2452;
            float _2738 = _2736 * _2453;
            float _2739 = _2736 * _2454;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2616 < ((_2614 >> 12u) & 15u))
            {
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2850 = _2599;
                float _2851 = _2601;
                float _2852 = _2603;
                float _2853 = _2605;
                float _2854 = _2607;
                float _2855 = _2609;
                uint _2856 = _2616;
                uint _2865;
                bool _2866;
                for (;;)
                {
                    _2865 = texelFetch(g_lightClassification, int((((_2492 << 5u) + (_2478 << 9u)) + (_2856 << 2u)) >> 2u)).x;
                    _2866 = _2865 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2866)
                    {
                        frontier_phi_67_pred = _2853;
                        frontier_phi_67_pred_1 = _2854;
                        frontier_phi_67_pred_2 = _2855;
                        frontier_phi_67_pred_3 = _2852;
                        frontier_phi_67_pred_4 = _2851;
                        frontier_phi_67_pred_5 = _2850;
                    }
                    else
                    {
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3063 = _2850;
                        float _3064 = _2851;
                        float _3065 = _2852;
                        float _3066 = _2853;
                        float _3067 = _2854;
                        float _3068 = _2855;
                        uint _3069 = _2865;
                        uint _3070;
                        vec4 _3095;
                        float _3096;
                        vec4 _3111;
                        vec3 _3123;
                        vec4 _3139;
                        vec4 _3155;
                        float _3201;
                        bool _3202;
                        for (;;)
                        {
                            uint _3080 = ((_2856 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3069));
                            _3070 = (_3069 + 4294967295u) & _3069;
                            uint _3082 = _3080 * 40u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            _3096 = _3095.w;
                            uint _3098 = (_3080 * 40u) + 4u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3113 = (_3080 * 40u) + 8u;
                            _3123 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x));
                            uint _3126 = (_3080 * 40u) + 16u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3142 = (_3080 * 40u) + 20u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3157 = (_3080 * 40u) + 24u;
                            vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3176 = (_3080 * 40u) + 28u;
                            vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            _3201 = fma(_2454, _3189.z, fma(_2453, _3189.y, _3189.x * _2452)) + _3189.w;
                            _3202 = !((fma(_2454, _3170.z, fma(_2453, _3170.y, _3170.x * _2452)) + _3170.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3202)
                            {
                                float _3229 = _3095.x - _2452;
                                float _3230 = _3095.y - _2453;
                                float _3231 = _3095.z - _2454;
                                float _3232 = dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231));
                                float _3235 = inversesqrt(_3232);
                                float _3236 = _3235 * _3229;
                                float _3237 = _3235 * _3230;
                                float _3238 = _3235 * _3231;
                                float _3242 = 1.0 - (_3232 / (_3096 * _3096));
                                float _4364 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3243 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3247 = sqrt(_3232) * _3111.w;
                                float _3249 = 1.39999997615814208984375 / (_3247 + 1.39999997615814208984375);
                                float _3250 = _3249 * _3249;
                                float _3253 = ((1.0 - _3250) * dot(vec3(_3236, _3237, _3238), vec3(_717, _720, _723))) + _3250;
                                float _3256 = _3247 * _3247;
                                float _3260 = (fma(_2454, _3139.z, fma(_2453, _3139.y, _3139.x * _2452)) + _3139.w) / _3201;
                                float _3261 = (fma(_2454, _3155.z, fma(_2453, _3155.y, _3155.x * _2452)) + _3155.w) / _3201;
                                float _3265 = 1.0 - dot(vec2(_3260, _3261), vec2(_3260, _3261));
                                float _4380 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3267 = _3266 * (((isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))) * _3243) / ((_3256 * 0.699999988079071044921875) + 1.0));
                                float _3279 = exp2(log2(1.0 / ((_3256 * 3.5) + 5.0)) * 0.25);
                                float _3280 = 1.0 - _792;
                                float _3287 = sqrt(1.0 - ((1.0 - (_3280 * _3280)) * (1.0 - (_3279 * _3279))));
                                float _3288 = _3287 * _3287;
                                float _3289 = _3288 * _3288;
                                float _3290 = _3236 - _2737;
                                float _3291 = _3237 - _2738;
                                float _3292 = _3238 - _2739;
                                float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                                float _3300 = dot(vec3(_717, _720, _723), vec3((-0.0) - _2737, (-0.0) - _2738, (-0.0) - _2739));
                                float _4391 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3304 = dot(vec3(_717, _720, _723), vec3(_3296 * _3290, _3296 * _3291, _3296 * _3292));
                                float _4402 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3307 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3311 = ((_3307 * _3307) * (_3289 + (-1.0))) + 1.0;
                                float _3312 = _3249 * _3288;
                                float _3313 = _3312 * _3312;
                                float _3319 = ((1.0 - _3313) * dot(vec3(_717, _720, _723), vec3(_3236, _3237, _3238))) + _3313;
                                float _4413 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3321 = 1.0 - _3288;
                                float _3331 = (0.5 / (((_3320 * ((_3303 * _3321) + _3288)) + 9.9999999392252902907785028219223e-09) + (((_3320 * _3321) + _3288) * _3303))) * _3320;
                                float _4424 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3341 = (_3266 * _3243) * (((_3289 * 3.1415927410125732421875) * (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) / ((_3311 * _3311) * ((_3256 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3341 * _3123.x;
                                frontier_phi_73_pred_1 = _3341 * _3123.y;
                                frontier_phi_73_pred_2 = _3267 * _3111.z;
                                frontier_phi_73_pred_3 = _3267 * _3111.y;
                                frontier_phi_73_pred_4 = _3267 * _3111.x;
                                frontier_phi_73_pred_5 = _3341 * _3123.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3345 = frontier_phi_73_pred;
                            _3346 = frontier_phi_73_pred_1;
                            _3350 = frontier_phi_73_pred_2;
                            _3349 = frontier_phi_73_pred_3;
                            _3348 = frontier_phi_73_pred_4;
                            _3347 = frontier_phi_73_pred_5;
                            _3053 = _3348 + _3066;
                            _3054 = _3349 + _3067;
                            _3055 = _3350 + _3068;
                            _3050 = _3345 + _3063;
                            _3051 = _3346 + _3064;
                            _3052 = _3347 + _3065;
                            if (_3070 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3070;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3053;
                        frontier_phi_67_pred_1 = _3054;
                        frontier_phi_67_pred_2 = _3055;
                        frontier_phi_67_pred_3 = _3052;
                        frontier_phi_67_pred_4 = _3051;
                        frontier_phi_67_pred_5 = _3050;
                    }
                    _2718 = frontier_phi_67_pred;
                    _2720 = frontier_phi_67_pred_1;
                    _2722 = frontier_phi_67_pred_2;
                    _2716 = frontier_phi_67_pred_3;
                    _2714 = frontier_phi_67_pred_4;
                    _2712 = frontier_phi_67_pred_5;
                    uint _2857 = _2856 + 1u;
                    if (_2857 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2850 = _2712;
                        _2851 = _2714;
                        _2852 = _2716;
                        _2853 = _2718;
                        _2854 = _2720;
                        _2855 = _2722;
                        _2856 = _2857;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2720;
                frontier_phi_55_56_ladder_1 = _2722;
                frontier_phi_55_56_ladder_2 = _2718;
                frontier_phi_55_56_ladder_3 = _2716;
                frontier_phi_55_56_ladder_4 = _2714;
                frontier_phi_55_56_ladder_5 = _2712;
            }
            else
            {
                frontier_phi_55_56_ladder = _2607;
                frontier_phi_55_56_ladder_1 = _2609;
                frontier_phi_55_56_ladder_2 = _2605;
                frontier_phi_55_56_ladder_3 = _2603;
                frontier_phi_55_56_ladder_4 = _2601;
                frontier_phi_55_56_ladder_5 = _2599;
            }
            _2711 = frontier_phi_55_56_ladder_5;
            _2713 = frontier_phi_55_56_ladder_4;
            _2715 = frontier_phi_55_56_ladder_3;
            _2717 = frontier_phi_55_56_ladder_2;
            _2719 = frontier_phi_55_56_ladder;
            _2721 = frontier_phi_55_56_ladder_1;
        }
        float _2726 = isnan(1.0) ? _776 : (isnan(_776) ? 1.0 : min(_776, 1.0));
        _2511 = (_2726 * _2717) + _1947;
        _2513 = (_2726 * _2719) + _1949;
        _2515 = (_2726 * _2721) + _1951;
        _2517 = ((_2711 * _760) * _2726) + _2292;
        _2519 = ((_2713 * _762) * _2726) + _2294;
        _2521 = ((_2715 * _763) * _2726) + _2296;
    }
    else
    {
        _2511 = _1947;
        _2513 = _1949;
        _2515 = _1951;
        _2517 = _2292;
        _2519 = _2294;
        _2521 = _2296;
    }
    float _4440 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _4451 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4462 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    uint _2541 = _235 + 6u;
    float _2549 = _695 / cbSceneParam._m0[86u].x;
    float _2550 = _696 / cbSceneParam._m0[86u].y;
    vec4 _2564 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2549, _2550, (log2((isnan(cbSceneParam._m0[77u].w) ? _630 : (isnan(_630) ? cbSceneParam._m0[77u].w : min(_630, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2566 = _2564.x;
    float _2567 = _2564.y;
    float _2568 = _2564.z;
    float _2569 = _2564.w;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    if (_630 > cbSceneParam._m0[78u].w)
    {
        float _2624 = isnan(_630) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _630 : min(cbSceneParam._m0[80u].w, _630));
        float _2625 = _2624 / _630;
        float _2636 = _2625 * _680;
        float _2637 = _681 * _2625;
        float _2638 = (-0.0) - _2637;
        float _2639 = _2625 * _682;
        float _2641 = (cbSceneParam._m0[77u].w * _2638) / _2624;
        float _2642 = _2641 + cbSceneParam._m0[79u].w;
        float _2643 = cbSceneParam._m0[79u].w - _2637;
        float _2649 = sqrt(((_2636 * _2636) + (_2637 * _2637)) + (_2639 * _2639));
        float _2652 = (1.0 - (cbSceneParam._m0[77u].w / _2624)) * _2649;
        float _2657 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2659 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2812;
        if (abs((_2638 - _2641) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2812 = ((((_2642 > 0.0) ? exp2(_2657 * _2642) : (2.0 - exp2(_2659 * _2642))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2652;
        }
        else
        {
            float _2772 = 1.0 / cbSceneParam._m0[80u].x;
            float _2773 = isnan(_2643) ? _2642 : (isnan(_2642) ? _2643 : max(_2642, _2643));
            float _2774 = isnan(_2643) ? _2642 : (isnan(_2642) ? _2643 : min(_2642, _2643));
            float _2783 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : min(_2773, 0.0));
            float _2784 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : min(_2774, 0.0));
            _2812 = ((abs(_2649 / _2638) * cbSceneParam._m0[80u].y) * ((((_2783 - _2784) * 2.0) - ((exp2(_2657 * (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0)))) - exp2(_2657 * (isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0))))) * _2772)) - ((exp2(_2659 * _2783) - exp2(_2659 * _2784)) * _2772))) + (_2652 * cbSceneParam._m0[80u].z);
        }
        vec4 _2814 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2549, _2550, 1.0), 0.0);
        float _2823 = exp2((_2812 * (-1.44269502162933349609375)) * (1.0 - _2814.w));
        float _2824 = log2(_2823);
        float _2840 = log2(_2569);
        _2661 = (exp2(_2840 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].x)) * _2814.x) / cbSceneParam._m0[78u].x)) + _2566;
        _2663 = (exp2(_2840 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].y)) * _2814.y) / cbSceneParam._m0[78u].y)) + _2567;
        _2665 = (exp2(_2840 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].z)) * _2814.z) / cbSceneParam._m0[78u].z)) + _2568;
        _2667 = _2823 * _2569;
    }
    else
    {
        _2661 = _2566;
        _2663 = _2567;
        _2665 = _2568;
        _2667 = _2569;
    }
    float _2679 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2680 = _2679 == 3.0;
    float _2681 = log2(_2667);
    float _2688 = exp2(_2681 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2511 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _776))) + ((_2517 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1584)) * cbPerFrame._m0[3u].x));
    float _2689 = exp2(_2681 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2513 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _776))) + ((_2519 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1584)) * cbPerFrame._m0[3u].x));
    float _2690 = exp2(_2681 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2515 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _776))) + ((_2521 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1584)) * cbPerFrame._m0[3u].x));
    float _2699 = (_2679 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2699 * (_2680 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2661)));
    SV_Target.y = _2699 * (_2680 ? _2689 : (_2689 + (cbSceneParam._m0[72u].w * _2663)));
    SV_Target.z = _2699 * (_2680 ? _2690 : (_2690 + (cbSceneParam._m0[72u].w * _2665)));
    SV_Target.w = cbInstanceData._m0[_2541].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2541].w;
}


