#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1460;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3808 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3819 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3830 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3841 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) + _453;
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _549 = _545.z;
    float _558 = ((_528.z - _549) * _434) + _549;
    float _561 = ((((_528.x - _547) * _434) + _547) * 2.0) + (-1.0);
    float _562 = ((((_528.y - _548) * _434) + _548) * 2.0) + (-1.0);
    float _563 = dot(vec2(_561, _562), vec2(_561, _562));
    float _3852 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _600 = (_561 + ((((_501.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_588.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _601 = (_562 + ((((_501.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_588.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _604 = fma(_568, _252, fma(_601, _259, _600 * _245));
    float _607 = fma(_568, _253, fma(_601, _260, _600 * _246));
    float _610 = fma(_568, _254, fma(_601, _261, _600 * _247));
    float _614 = inversesqrt(dot(vec3(_604, _607, _610), vec3(_604, _607, _610)));
    vec4 _641 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _643 = _641.x;
    float _644 = 1.0 - _643;
    float _648 = ((_643 - _644) * cbMtdParam._m0[24u].z) + _644;
    float _650 = (cbMtdParam._m0[19u].x + dot(vec4(_614 * _604, _614 * _607, _614 * _610, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_648 * cbMtdParam._m0[21u].z);
    float _3863 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _651 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _653 = (-0.0) - cbMtdParam._m0[24u].x;
    float _655 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _655 : (isnan(_655) ? 1.0 : min(_655, 1.0));
    float _663 = _651 - ((_651 * TEXCOORD_8.x) * _656);
    float _664 = _651 - ((_651 * TEXCOORD_8.y) * _656);
    float _665 = _651 - ((_651 * TEXCOORD_8.z) * _656);
    float _672 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _676 = ((isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : min(_672, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _684 = (_676 - (((_648 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _676))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3894 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _689 = ((_663 * ((_481.x * cbMtdParam._m0[18u].x) - _460)) * _685) + _460;
    float _690 = ((_664 * ((_481.y * cbMtdParam._m0[18u].y) - _461)) * _685) + _461;
    float _691 = ((_665 * ((_481.z * cbMtdParam._m0[18u].z) - _462)) * _685) + _462;
    vec4 _703 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _705 = _703.x;
    float _706 = 1.0 - _705;
    float _731 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_705 - _706) * cbMtdParam._m0[24u].w) + _706) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3905 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _732 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _740 = ((((cbMtdParam._m0[10u].x - _689) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _732) + _689;
    float _741 = ((((cbMtdParam._m0[10u].y - _690) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _732) + _690;
    float _742 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _691)) * _732) + _691;
    vec4 _768 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _770 = _768.x;
    float _788 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _770) * _434) + _770;
    float _792 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _788) * cbMtdParam._m0[19u].z) + _788;
    float _795 = _792 - ((_685 * _663) * _792);
    float _797 = _795 - (_795 * _732);
    float _802 = (((_501.z - _558) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _558;
    float _806 = ((_588.z - _802) * cbMtdParam._m0[19u].w) + _802;
    vec4 _820 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _827 = (_820.x * 2.0) + (-1.0);
    float _828 = (_820.y * 2.0) + (-1.0);
    float _829 = dot(vec2(_827, _828), vec2(_827, _828));
    float _3916 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _838 = (((_820.z - _806) * _663) * _685) + _806;
    float _841 = ((cbMtdParam._m0[23u].y - _838) * _732) + _838;
    vec4 _862 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _868 = (_862.x * 2.0) + (-1.0);
    float _869 = (_862.y * 2.0) + (-1.0);
    float _870 = dot(vec2(_868, _869), vec2(_868, _869));
    float _3927 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _890 = (((cbMtdParam._m0[21u].x * _600) + ((_827 - _600) * _663)) * _685) + _600;
    float _891 = (((cbMtdParam._m0[21u].x * _601) + ((_828 - _601) * _664)) * _685) + _601;
    float _892 = (((sqrt(1.0 - (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) - _568) * _665) * _685) + _568;
    float _903 = (((_868 - _890) + (_890 * cbMtdParam._m0[22u].z)) * _732) + _890;
    float _904 = (((_869 - _891) + (_891 * cbMtdParam._m0[22u].z)) * _732) + _891;
    float _905 = ((sqrt(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) - _892) * _732) + _892;
    float _907 = cbMtdParam._m0[22u].x + _588.w;
    float _910 = fma(_905, _252, fma(_904, _259, _903 * _245));
    float _913 = fma(_905, _253, fma(_904, _260, _903 * _246));
    float _916 = fma(_905, _254, fma(_904, _261, _903 * _247));
    float _920 = inversesqrt(dot(vec3(_910, _913, _916), vec3(_910, _913, _916)));
    float _921 = _920 * _910;
    float _922 = _920 * _913;
    float _923 = _920 * _916;
    float _3938 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _924 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _3960 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _3971 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3982 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3993 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _929 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _943 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _993 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _983);
    float _994 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _983);
    float _995 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _983);
    float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
    float _1000 = _993 * _999;
    float _1001 = _994 * _999;
    float _1002 = _995 * _999;
    float _1008 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1009 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1027 = fma(_923, cbSceneParam._m0[5u].z, fma(_922, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _921));
    float _1030 = fma(_923, cbSceneParam._m0[6u].z, fma(_922, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _921));
    float _1033 = fma(_923, cbSceneParam._m0[7u].z, fma(_922, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _921));
    uint _1047 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1053 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * cbInstanceData._m0[_1047].x;
    float _1054 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * cbInstanceData._m0[_1047].y;
    float _1055 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * cbInstanceData._m0[_1047].z;
    float _4004 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1057 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1058 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1059 = 1.0 - _929;
    float _1060 = _1056 * _1059;
    float _1061 = _1057 * _1059;
    float _1062 = _1058 * _1059;
    float _1067 = (_1056 + (-0.039999999105930328369140625)) * _929;
    float _1068 = (_1057 + (-0.039999999105930328369140625)) * _929;
    float _1069 = (_1058 + (-0.039999999105930328369140625)) * _929;
    float _1070 = _1067 + 0.039999999105930328369140625;
    float _1072 = _1068 + 0.039999999105930328369140625;
    float _1073 = _1069 + 0.039999999105930328369140625;
    vec4 _1082 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1008, cbSceneParam._m0[86u].y * _1009));
    float _1086 = ((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * TEXCOORD_5.w) * _1082.x;
    float _1087 = dot(vec3(_921, _922, _923), vec3(_1000, _1001, _1002));
    float _1090 = _1087 * 2.0;
    float _1094 = (_1090 * _921) - _1000;
    float _1095 = (_1090 * _922) - _1001;
    float _1096 = (_1090 * _923) - _1002;
    float _1100 = abs(dot(vec3(_1000, _1001, _1002), vec3(_921, _922, _923)));
    float _4037 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1102 = sqrt(_924);
    float _1115 = exp2((_1102 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1102 * 3.0));
    float _1121 = (1.0 - _1115) * ((_1102 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1122 = _1115 * _1102;
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1158 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1459;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1184 = fma(_1158, cbModelParam._m0[26u].z, fma(_1154, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1150));
        float _1188 = fma(_1158, cbModelParam._m0[27u].z, fma(_1154, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1150));
        float _1192 = fma(_1158, cbModelParam._m0[28u].z, fma(_1154, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1150));
        float _1217 = _1150 + _921;
        float _1218 = _1154 + _922;
        float _1219 = _1158 + _923;
        float _1229 = fma(_1219, cbModelParam._m0[26u].z, fma(_1218, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1217)) - _1184;
        float _1230 = fma(_1219, cbModelParam._m0[27u].z, fma(_1218, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1217)) - _1188;
        float _1231 = fma(_1219, cbModelParam._m0[28u].z, fma(_1218, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1217)) - _1192;
        float _1235 = inversesqrt(dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231)));
        float _1248 = ((_1235 * _1229) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1184 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1235 * _1230) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1188 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1235 * _1231) / cbModelParam._m0[34u].z) + ((((((_1192 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        float _1287 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1253.x + (-0.5));
        float _1289 = _1287 * (_1253.y + (-0.5));
        float _1290 = _1287 * (_1253.z + (-0.5));
        float _1297 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1260.x + (-0.5));
        float _1299 = _1297 * (_1260.y + (-0.5));
        float _1300 = _1297 * (_1260.z + (-0.5));
        float _1307 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1267.x + (-0.5));
        float _1309 = _1307 * (_1267.y + (-0.5));
        float _1310 = _1307 * (_1267.z + (-0.5));
        float _1317 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1274.x + (-0.5));
        float _1319 = _1317 * (_1274.y + (-0.5));
        float _1320 = _1317 * (_1274.z + (-0.5));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = _1288 * 0.5;
        float _1325 = _1298 * 0.5;
        float _1326 = _1308 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1341 = (dot(vec3(_921, _922, _923), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1351 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4085 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1353 + 1.0))) + _1358) * _1321;
        float _1368 = _1289 * 0.5;
        float _1369 = _1299 * 0.5;
        float _1370 = _1309 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_921, _922, _923), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4118 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1395 + 1.0))) + _1400) * _1322;
        float _1410 = _1290 * 0.5;
        float _1411 = _1300 * 0.5;
        float _1412 = _1310 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_921, _922, _923), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4151 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1437 + 1.0))) + _1442) * _1323;
        _1459 = _1290;
        _1461 = _1289;
        _1462 = _1288;
        _1463 = _1300;
        _1464 = _1299;
        _1465 = _1298;
        _1466 = _1310;
        _1467 = _1309;
        _1468 = _1308;
        _1469 = _1323;
        _1470 = _1322;
        _1471 = _1321;
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1473 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
    }
    else
    {
        _1459 = _1460;
        _1461 = _1460;
        _1462 = _1460;
        _1463 = _1460;
        _1464 = _1460;
        _1465 = _1460;
        _1466 = _1460;
        _1467 = _1460;
        _1468 = _1460;
        _1469 = _1460;
        _1470 = _1460;
        _1471 = _1460;
        _1472 = 0.0;
        _1473 = 0.0;
        _1474 = 0.0;
    }
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1499 = fma(_1158, cbModelParam._m0[30u].z, fma(_1154, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1150));
        float _1503 = fma(_1158, cbModelParam._m0[31u].z, fma(_1154, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1150));
        float _1507 = fma(_1158, cbModelParam._m0[32u].z, fma(_1154, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1150));
        float _1530 = _1150 + _921;
        float _1531 = _1154 + _922;
        float _1532 = _1158 + _923;
        float _1542 = fma(_1532, cbModelParam._m0[30u].z, fma(_1531, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1530)) - _1499;
        float _1543 = fma(_1532, cbModelParam._m0[31u].z, fma(_1531, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1530)) - _1503;
        float _1544 = fma(_1532, cbModelParam._m0[32u].z, fma(_1531, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1530)) - _1507;
        float _1548 = inversesqrt(dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544)));
        float _1561 = ((_1548 * _1542) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1499 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1562 = ((_1548 * _1543) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1503 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1548 * _1544) / cbModelParam._m0[35u].z) + ((((((_1507 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        float _1598 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1565.x + (-0.5));
        float _1600 = _1598 * (_1565.y + (-0.5));
        float _1601 = _1598 * (_1565.z + (-0.5));
        float _1608 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1572.x + (-0.5));
        float _1610 = _1608 * (_1572.y + (-0.5));
        float _1611 = _1608 * (_1572.z + (-0.5));
        float _1618 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1579.x + (-0.5));
        float _1620 = _1618 * (_1579.y + (-0.5));
        float _1621 = _1618 * (_1579.z + (-0.5));
        float _1628 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1586.x + (-0.5));
        float _1630 = _1628 * (_1586.y + (-0.5));
        float _1631 = _1628 * (_1586.z + (-0.5));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = _1599 * 0.5;
        float _1636 = _1609 * 0.5;
        float _1637 = _1619 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_921, _922, _923), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4214 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1662 + 1.0))) + _1667) * _1632;
        float _1677 = _1600 * 0.5;
        float _1678 = _1610 * 0.5;
        float _1679 = _1620 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_921, _922, _923), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4247 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1704 + 1.0))) + _1709) * _1633;
        float _1719 = _1601 * 0.5;
        float _1720 = _1611 * 0.5;
        float _1721 = _1621 * 0.5;
        float _1722 = dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721));
        float _1727 = (_1722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1722);
        float _1735 = (dot(vec3(_921, _922, _923), vec3(_1727 * _1719, _1727 * _1720, _1727 * _1721)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1744 = sqrt(((_1720 * _1720) + (_1719 * _1719)) + (_1721 * _1721)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1746 = _1745 * 2.0;
        float _1750 = (1.0 - _1745) / (_1745 + 1.0);
        float _4280 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1760 = ((((1.0 - _1751) * (_1746 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1746 + 1.0))) + _1751) * _1634;
        _1768 = _1601;
        _1769 = _1600;
        _1770 = _1599;
        _1771 = _1611;
        _1772 = _1610;
        _1773 = _1609;
        _1774 = _1621;
        _1775 = _1620;
        _1776 = _1619;
        _1777 = _1634;
        _1778 = _1633;
        _1779 = _1632;
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)));
    }
    else
    {
        _1768 = _1460;
        _1769 = _1460;
        _1770 = _1460;
        _1771 = _1460;
        _1772 = _1460;
        _1773 = _1460;
        _1774 = _1460;
        _1775 = _1460;
        _1776 = _1460;
        _1777 = _1460;
        _1778 = _1460;
        _1779 = _1460;
        _1780 = 0.0;
        _1781 = 0.0;
        _1782 = 0.0;
    }
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1472)) + _1472;
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1473)) + _1473;
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1474)) + _1474;
    float _1815 = fma(_1794, cbSceneParam._m0[89u].z, fma(_1793, cbSceneParam._m0[89u].y, _1792 * cbSceneParam._m0[89u].x));
    float _1818 = fma(_1794, cbSceneParam._m0[90u].z, fma(_1793, cbSceneParam._m0[90u].y, _1792 * cbSceneParam._m0[90u].x));
    float _1821 = fma(_1794, cbSceneParam._m0[91u].z, fma(_1793, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1792));
    float _1836 = _1094 * 0.5;
    float _1837 = _1095 * 0.5;
    float _1838 = _1096 * 0.5;
    float _1839 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1842 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1845 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1879;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1852 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1459, _1463, _1466, _1469));
        float _1856 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1461, _1464, _1467, _1470));
        float _1860 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1462, _1465, _1468, _1471));
        float _1867 = dot(vec4(cbModelParam._m0[39u]), vec4(_1836, _1837, _1838, 1.0));
        _1879 = dot(vec3(isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1867) ? 0.0 : (isnan(0.0) ? _1867 : max(0.0, _1867))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1879 = 1.0;
    }
    float _1890;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1881 = dot(vec4(cbModelParam._m0[40u]), vec4(_1836, _1837, _1838, 1.0));
        _1890 = dot(vec3(isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1881) ? 0.0 : (isnan(0.0) ? _1881 : max(0.0, _1881))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1890 = 1.0;
    }
    float _1894 = (_1890 * cbModelParam._m0[1u].x) + (_1879 * (1.0 - cbModelParam._m0[1u].x));
    float _1904 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _924);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1904 : min(cbModelParam._m0[25u].z, _1904));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1952 = fma(_1158, cbModelParam._m0[13u].z, fma(_1154, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1150)) + cbModelParam._m0[13u].w;
        float _1956 = fma(_1158, cbModelParam._m0[14u].z, fma(_1154, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1150)) + cbModelParam._m0[14u].w;
        float _1960 = fma(_1158, cbModelParam._m0[15u].z, fma(_1154, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1150)) + cbModelParam._m0[15u].w;
        float _1963 = fma(_1096, cbModelParam._m0[13u].z, fma(_1095, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1094));
        float _1966 = fma(_1096, cbModelParam._m0[14u].z, fma(_1095, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1094));
        float _1969 = fma(_1096, cbModelParam._m0[15u].z, fma(_1095, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1094));
        float _1997;
        if (_1963 > 0.0)
        {
            _1997 = abs((1.0 - _1952) / _1963);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1952 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1997 = frontier_phi_14_12_ladder;
        }
        float _2220;
        if (_1966 > 0.0)
        {
            _2220 = abs((1.0 - _1956) / _1966);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1956 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2220 = frontier_phi_23_19_ladder;
        }
        float _2477;
        if (_1969 > 0.0)
        {
            _2477 = abs((1.0 - _1960) / _1969);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1960 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2477 = frontier_phi_35_30_ladder;
        }
        float _2479 = isnan(_2220) ? _1997 : (isnan(_1997) ? _2220 : min(_1997, _2220));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1963) + _1952;
        float _2485 = (_2480 * _1966) + _1956;
        float _2486 = (_2480 * _1969) + _1960;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2489 = (-1.0) - _2487;
        float _2491 = _2487 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2486 > _2491) || ((_2486 < _2489) || ((_2485 > _2491) || ((_2485 < _2489) || ((_2484 < _2489) || (_2484 > _2491))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2486, cbModelParam._m0[9u].z, fma(_2485, cbModelParam._m0[9u].y, _2484 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2486, cbModelParam._m0[10u].z, fma(_2485, cbModelParam._m0[10u].y, _2484 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2486, cbModelParam._m0[11u].z, fma(_2485, cbModelParam._m0[11u].y, _2484 * cbModelParam._m0[11u].x))), _1905);
            frontier_phi_13_35_ladder = _2614.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2614.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2614.x * cbModelParam._m0[1u].y;
        }
        _1985 = frontier_phi_13_35_ladder_2;
        _1987 = frontier_phi_13_35_ladder_1;
        _1989 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1094, _1095, _1096), _1905);
        _1985 = _1973.x * cbModelParam._m0[1u].y;
        _1987 = _1973.y * cbModelParam._m0[1u].y;
        _1989 = _1973.z * cbModelParam._m0[1u].y;
    }
    float _1993 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _924);
    float _1994 = isnan(_1993) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1993 : min(cbModelParam._m0[25u].w, _1993));
    float _2083;
    float _2085;
    float _2087;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2047 = fma(_1158, cbModelParam._m0[21u].z, fma(_1154, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1150)) + cbModelParam._m0[21u].w;
        float _2051 = fma(_1158, cbModelParam._m0[22u].z, fma(_1154, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1150)) + cbModelParam._m0[22u].w;
        float _2055 = fma(_1158, cbModelParam._m0[23u].z, fma(_1154, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1150)) + cbModelParam._m0[23u].w;
        float _2058 = fma(_1096, cbModelParam._m0[21u].z, fma(_1095, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1094));
        float _2061 = fma(_1096, cbModelParam._m0[22u].z, fma(_1095, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1094));
        float _2064 = fma(_1096, cbModelParam._m0[23u].z, fma(_1095, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1094));
        float _2225;
        if (_2058 > 0.0)
        {
            _2225 = abs((1.0 - _2047) / _2058);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2047 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2225 = frontier_phi_25_21_ladder;
        }
        float _2504;
        if (_2061 > 0.0)
        {
            _2504 = abs((1.0 - _2051) / _2061);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2051 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2504 = frontier_phi_37_32_ladder;
        }
        float _2717;
        if (_2064 > 0.0)
        {
            _2717 = abs((1.0 - _2055) / _2064);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2055 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2717 = frontier_phi_46_43_ladder;
        }
        float _2719 = isnan(_2504) ? _2225 : (isnan(_2225) ? _2504 : min(_2225, _2504));
        float _2720 = isnan(_2717) ? _2719 : (isnan(_2719) ? _2717 : min(_2719, _2717));
        float _2724 = (_2720 * _2058) + _2047;
        float _2725 = (_2720 * _2061) + _2051;
        float _2726 = (_2720 * _2064) + _2055;
        float _2727 = _2720 * 9.9999997473787516355514526367188e-05;
        float _2728 = (-1.0) - _2727;
        float _2730 = _2727 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2726 > _2730) || ((_2726 < _2728) || ((_2725 > _2730) || ((_2725 < _2728) || ((_2724 < _2728) || (_2724 > _2730))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2726, cbModelParam._m0[17u].z, fma(_2725, cbModelParam._m0[17u].y, _2724 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2726, cbModelParam._m0[18u].z, fma(_2725, cbModelParam._m0[18u].y, _2724 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2726, cbModelParam._m0[19u].z, fma(_2725, cbModelParam._m0[19u].y, _2724 * cbModelParam._m0[19u].x))), _1994);
            frontier_phi_22_46_ladder = _2925.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2925.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2925.x * cbModelParam._m0[1u].z;
        }
        _2083 = frontier_phi_22_46_ladder_2;
        _2085 = frontier_phi_22_46_ladder_1;
        _2087 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2067 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1094, _1095, _1096), _1994);
        _2083 = _2067.x * cbModelParam._m0[1u].z;
        _2085 = _2067.y * cbModelParam._m0[1u].z;
        _2087 = _2067.z * cbModelParam._m0[1u].z;
    }
    float _2100 = (((_1121 * _1070) + _1122) * _1086) * ((cbModelParam._m0[1u].w * (_2083 - _1985)) + _1985);
    float _2102 = (((_1121 * _1072) + _1122) * _1086) * ((cbModelParam._m0[1u].w * (_2085 - _1987)) + _1987);
    float _2104 = (((_1121 * _1073) + _1122) * _1086) * ((cbModelParam._m0[1u].w * (_2087 - _1989)) + _1989);
    float _2107 = fma(_2104, cbSceneParam._m0[89u].z, fma(_2102, cbSceneParam._m0[89u].y, _2100 * cbSceneParam._m0[89u].x));
    float _2110 = fma(_2104, cbSceneParam._m0[90u].z, fma(_2102, cbSceneParam._m0[90u].y, _2100 * cbSceneParam._m0[90u].x));
    float _2113 = fma(_2104, cbSceneParam._m0[91u].z, fma(_2102, cbSceneParam._m0[91u].y, _2100 * cbSceneParam._m0[91u].x));
    vec4 _2121 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1008, _1009));
    float _2123 = _2121.w;
    float _2135 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2123);
    float _2136 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2123);
    float _2137 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2123);
    uvec4 _2141 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2143 = _2141.x * 14u;
    uint _2144 = _2143 + 13u;
    float _2151 = _1086 + (-1.0);
    float _2156 = (cbLight._m0[_2144].x * _2151) + 1.0;
    float _2157 = (cbLight._m0[_2144].y * _2151) + 1.0;
    float _2158 = (cbLight._m0[_2144].z * _2151) + 1.0;
    float _2159 = (cbLight._m0[_2144].w * _2151) + 1.0;
    uint _2160 = _2143 + 5u;
    float _2166 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2170 = _2143 + 4u;
    float _2179 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
    uint _2183 = _2143 | 1u;
    float _2194 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_921, _922, _923));
    float _2197 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_921, _922, _923));
    float _4416 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _4427 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2202 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * 0.3183098733425140380859375;
    float _2204 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * 0.3183098733425140380859375;
    float _2211 = ((cbLight._m0[_2160].x * _2166) * _2204) + (((cbLight._m0[_2170].x * _2135) * _2179) * _2202);
    float _2212 = ((_2166 * cbLight._m0[_2160].y) * _2204) + (((cbLight._m0[_2170].y * _2136) * _2179) * _2202);
    float _2213 = ((_2166 * cbLight._m0[_2160].z) * _2204) + (((cbLight._m0[_2170].z * _2137) * _2179) * _2202);
    uvec4 _2217 = floatBitsToUint(cbLight._m0[_2143 + 12u]);
    bool _2219 = _2217.x == 0u;
    float _2230;
    float _2232;
    float _2234;
    if (_2219)
    {
        _2230 = _2211;
        _2232 = _2212;
        _2234 = _2213;
    }
    else
    {
        uint _2238 = _2143 + 6u;
        float _2254 = (dot(vec3(cbLight._m0[_2143 + 2u].xyz), vec3(_921, _922, _923)) * 0.5) + 0.5;
        float _2255 = _2254 * _2254;
        float _4438 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2256 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2257 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2230 = (((cbLight._m0[_2238].x * 0.3183098733425140380859375) * _2256) * _2257) + _2211;
        _2232 = (((cbLight._m0[_2238].y * 0.3183098733425140380859375) * _2256) * _2257) + _2212;
        _2234 = (((cbLight._m0[_2238].z * 0.3183098733425140380859375) * _2256) * _2257) + _2213;
    }
    bool _2237 = _2217.y == 0u;
    float _2275;
    float _2277;
    float _2279;
    if (_2237)
    {
        _2275 = _2230;
        _2277 = _2232;
        _2279 = _2234;
    }
    else
    {
        uint _2448 = _2143 + 7u;
        float _2464 = (dot(vec3(cbLight._m0[_2143 + 3u].xyz), vec3(_921, _922, _923)) * 0.5) + 0.5;
        float _2465 = _2464 * _2464;
        float _4454 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2466 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2467 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2275 = (((cbLight._m0[_2448].x * 0.3183098733425140380859375) * _2466) * _2467) + _2230;
        _2277 = (((cbLight._m0[_2448].y * 0.3183098733425140380859375) * _2466) * _2467) + _2232;
        _2279 = (((cbLight._m0[_2448].z * 0.3183098733425140380859375) * _2466) * _2467) + _2234;
    }
    uint _2282 = _2143 + 8u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _924) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_2143].x + _1000;
    float _2298 = cbLight._m0[_2143].y + _1001;
    float _2299 = cbLight._m0[_2143].z + _1002;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2143].xyz));
    float _4470 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _4481 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _2311 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2312 = dot(vec3(_921, _922, _923), vec3(_2304, _2305, _2306));
    float _4492 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2304, _2305, _2306));
    float _4503 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2296 * _2296;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2332 = exp2(log2(1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * 5.0);
    float _2333 = 0.959999978542327880859375 - _1067;
    float _2335 = 0.959999978542327880859375 - _1068;
    float _2336 = 0.959999978542327880859375 - _1069;
    float _2343 = 1.0 - _2296;
    float _2354 = (0.5 / (((_2311 * ((_2310 * _2343) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2343) + _2296) * _2310))) * _2310;
    float _4514 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2356 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    uint _2370 = _2143 + 9u;
    float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _924) * 0.949999988079071044921875);
    float _2382 = _2381 * _2381;
    float _2383 = cbLight._m0[_2183].x + _1000;
    float _2384 = cbLight._m0[_2183].y + _1001;
    float _2385 = cbLight._m0[_2183].z + _1002;
    float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
    float _2390 = _2389 * _2383;
    float _2391 = _2389 * _2384;
    float _2392 = _2389 * _2385;
    float _2393 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2183].xyz));
    float _4525 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _2397 = dot(vec3(_921, _922, _923), vec3(_2390, _2391, _2392));
    float _4536 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2401 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2390, _2391, _2392));
    float _4547 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2405 = _2382 * _2382;
    float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
    float _2416 = exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0);
    float _2423 = 1.0 - _2382;
    float _2433 = (0.5 / (((_2311 * ((_2396 * _2423) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2423) + _2382) * _2396))) * _2396;
    float _4558 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2435 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
    float _2445 = (((((_2416 * _2333) + _1070) * cbLight._m0[_2370].x) * _2435) * _2166) + ((((cbLight._m0[_2282].x * _2135) * ((_2332 * _2333) + _1070)) * _2356) * _2179);
    float _2446 = (((((_2416 * _2335) + _1072) * cbLight._m0[_2370].y) * _2435) * _2166) + ((((cbLight._m0[_2282].y * _2136) * ((_2332 * _2335) + _1072)) * _2356) * _2179);
    float _2447 = (((((_2416 * _2336) + _1073) * cbLight._m0[_2370].z) * _2435) * _2166) + ((((cbLight._m0[_2282].z * _2137) * ((_2332 * _2336) + _1073)) * _2356) * _2179);
    float _2509;
    float _2511;
    float _2513;
    if (_2219)
    {
        _2509 = _2445;
        _2511 = _2446;
        _2513 = _2447;
    }
    else
    {
        uint _2515 = _2143 + 2u;
        uint _2519 = _2143 + 10u;
        float _2533 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2515].w)) * _924) * 0.949999988079071044921875);
        float _2534 = _2533 * _2533;
        float _2535 = cbLight._m0[_2515].x + _1000;
        float _2536 = cbLight._m0[_2515].y + _1001;
        float _2537 = cbLight._m0[_2515].z + _1002;
        float _2541 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
        float _2542 = _2541 * _2535;
        float _2543 = _2541 * _2536;
        float _2544 = _2541 * _2537;
        float _2545 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2515].xyz));
        float _4569 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2549 = dot(vec3(_921, _922, _923), vec3(_2542, _2543, _2544));
        float _4580 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2553 = dot(vec3(cbLight._m0[_2515].xyz), vec3(_2542, _2543, _2544));
        float _4591 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2557 = _2534 * _2534;
        float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
        float _2568 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
        float _2575 = 1.0 - _2534;
        float _2585 = (0.5 / (((_2311 * ((_2548 * _2575) + _2534)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2575) + _2534) * _2548))) * _2548;
        float _4602 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2587 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
        float _2588 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2509 = (((((_2568 * _2333) + _1070) * cbLight._m0[_2519].x) * _2587) * _2588) + _2445;
        _2511 = (((((_2568 * _2335) + _1072) * cbLight._m0[_2519].y) * _2587) * _2588) + _2446;
        _2513 = (((((_2568 * _2336) + _1073) * cbLight._m0[_2519].z) * _2587) * _2588) + _2447;
    }
    float _2623;
    float _2625;
    float _2627;
    if (_2237)
    {
        _2623 = _2509;
        _2625 = _2511;
        _2627 = _2513;
    }
    else
    {
        uint _2634 = _2143 + 3u;
        uint _2638 = _2143 + 11u;
        float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2634].w)) * _924) * 0.949999988079071044921875);
        float _2653 = _2652 * _2652;
        float _2654 = cbLight._m0[_2634].x + _1000;
        float _2655 = cbLight._m0[_2634].y + _1001;
        float _2656 = cbLight._m0[_2634].z + _1002;
        float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
        float _2661 = _2660 * _2654;
        float _2662 = _2660 * _2655;
        float _2663 = _2660 * _2656;
        float _2664 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2634].xyz));
        float _4618 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2668 = dot(vec3(_921, _922, _923), vec3(_2661, _2662, _2663));
        float _4629 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2672 = dot(vec3(cbLight._m0[_2634].xyz), vec3(_2661, _2662, _2663));
        float _4640 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2676 = _2653 * _2653;
        float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
        float _2687 = exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0);
        float _2694 = 1.0 - _2653;
        float _2704 = (0.5 / (((_2311 * ((_2667 * _2694) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2694) + _2653) * _2667))) * _2667;
        float _4651 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2706 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
        float _2707 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2623 = (((((_2687 * _2333) + _1070) * cbLight._m0[_2638].x) * _2706) * _2707) + _2509;
        _2625 = (((((_2687 * _2335) + _1072) * cbLight._m0[_2638].y) * _2706) * _2707) + _2511;
        _2627 = (((((_2687 * _2336) + _1073) * cbLight._m0[_2638].z) * _2706) * _2707) + _2513;
    }
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    if (_2141.y == 0u)
    {
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2783 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2782;
        float _2784 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2782;
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2782;
        uvec4 _2797 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2798 = _2797.x;
        uint _2809 = uint((float(_2797.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1009) / _2798))) + floor(float(uint(cbSceneParam._m0[85u].x * _1008) / _2798)));
        float _2819 = (log2(_2785 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2820 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        uint _2823 = uint(isnan(14.0) ? _2820 : (isnan(_2820) ? 14.0 : min(_2820, 14.0)));
        uvec4 _2828 = texelFetch(g_lightClusterGridBuffer, int(((_2823 << 2u) + (_2809 << 6u)) >> 2u));
        uint _2829 = _2828.x;
        uint _2830 = _2797.z;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        if (((((1u << ((_2830 >> 4u) & 15u)) + 4294967295u) & _2829) == 0u) || ((_2830 & 240u) == 0u))
        {
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
        }
        else
        {
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            uint _3080 = 0u;
            uint _3089;
            bool _3090;
            for (;;)
            {
                _3089 = texelFetch(g_lightClassification, int((((_2823 << 5u) + (_2809 << 9u)) + (_3080 << 2u)) >> 2u)).x;
                _3090 = _3089 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3090)
                {
                    frontier_phi_61_pred = _3074;
                    frontier_phi_61_pred_1 = _3079;
                    frontier_phi_61_pred_2 = _3078;
                    frontier_phi_61_pred_3 = _3077;
                    frontier_phi_61_pred_4 = _3076;
                    frontier_phi_61_pred_5 = _3075;
                }
                else
                {
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    uint _3204;
                    _3198 = _3074;
                    _3199 = _3075;
                    _3200 = _3076;
                    _3201 = _3077;
                    _3202 = _3078;
                    _3203 = _3079;
                    _3204 = _3089;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    for (;;)
                    {
                        uint _3208 = uint(findLSB(_3204)) + (_3080 << 5u);
                        uint _3205 = (_3204 + 4294967295u) & _3204;
                        uint _3210 = _3208 * 48u;
                        vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3210)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 3u)).x));
                        uint _3230 = (_3208 * 48u) + 4u;
                        vec4 _3243 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3230)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 3u)).x));
                        uint _3249 = (_3208 * 48u) + 8u;
                        vec3 _3260 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3249)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 2u)).x));
                        float _3264 = _3224.x - _2783;
                        float _3265 = _3224.y - _2784;
                        float _3266 = _3224.z - _2785;
                        float _3267 = dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266));
                        float _3270 = inversesqrt(_3267);
                        float _3271 = _3270 * _3264;
                        float _3272 = _3270 * _3265;
                        float _3273 = _3270 * _3266;
                        float _3274 = dot(vec3(_1027, _1030, _1033), vec3(_3271, _3272, _3273));
                        float _3279 = 1.0 - (_3267 * _3224.w);
                        float _4677 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3280 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3281 = sqrt(_3267) * _3243.w;
                        float _3284 = 1.39999997615814208984375 / (_3281 + 1.39999997615814208984375);
                        float _3285 = _3284 * _3284;
                        float _3288 = ((1.0 - _3285) * _3274) + _3285;
                        float _3291 = _3281 * _3281;
                        float _3295 = ((isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0))) * _3280) / ((_3291 * 0.699999988079071044921875) + 1.0);
                        float _3299 = (-0.0) - _2783;
                        float _3300 = (-0.0) - _2784;
                        float _3301 = (-0.0) - _2785;
                        float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                        float _3306 = _3305 * _3299;
                        float _3307 = _3305 * _3300;
                        float _3308 = _3305 * _3301;
                        float _3316 = exp2(log2(1.0 / ((_3291 * 3.5) + 5.0)) * 0.25);
                        float _3317 = 1.0 - _1102;
                        float _3324 = sqrt(1.0 - ((1.0 - (_3317 * _3317)) * (1.0 - (_3316 * _3316))));
                        float _3325 = _3324 * _3324;
                        float _3326 = _3325 * _3325;
                        float _3327 = _3306 + _3271;
                        float _3328 = _3307 + _3272;
                        float _3329 = _3308 + _3273;
                        float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                        float _3337 = dot(vec3(_1027, _1030, _1033), vec3(_3306, _3307, _3308));
                        float _4693 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3340 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3341 = dot(vec3(_1027, _1030, _1033), vec3(_3333 * _3327, _3333 * _3328, _3333 * _3329));
                        float _4704 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3344 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3348 = ((_3344 * _3344) * (_3326 + (-1.0))) + 1.0;
                        float _3349 = _3284 * _3325;
                        float _3350 = _3349 * _3349;
                        float _3353 = ((1.0 - _3350) * _3274) + _3350;
                        float _4715 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3354 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3355 = 1.0 - _3325;
                        float _3365 = (0.5 / (((_3354 * ((_3340 * _3355) + _3325)) + 9.9999999392252902907785028219223e-09) + (((_3354 * _3355) + _3325) * _3340))) * _3354;
                        float _4726 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3376 = (((_3326 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3348 * _3348) * ((_3291 * 2.1991131305694580078125) + 3.141590118408203125))) * _3280;
                        _3133 = (_3295 * _3243.x) + _3201;
                        _3134 = (_3295 * _3243.y) + _3202;
                        _3135 = (_3295 * _3243.z) + _3203;
                        _3130 = (_3376 * _3260.x) + _3198;
                        _3131 = (_3376 * _3260.y) + _3199;
                        _3132 = (_3376 * _3260.z) + _3200;
                        if (_3205 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3198 = _3130;
                            _3199 = _3131;
                            _3200 = _3132;
                            _3201 = _3133;
                            _3202 = _3134;
                            _3203 = _3135;
                            _3204 = _3205;
                        }
                    }
                    frontier_phi_61_pred = _3130;
                    frontier_phi_61_pred_1 = _3135;
                    frontier_phi_61_pred_2 = _3134;
                    frontier_phi_61_pred_3 = _3133;
                    frontier_phi_61_pred_4 = _3132;
                    frontier_phi_61_pred_5 = _3131;
                }
                _2931 = frontier_phi_61_pred;
                _2941 = frontier_phi_61_pred_1;
                _2939 = frontier_phi_61_pred_2;
                _2937 = frontier_phi_61_pred_3;
                _2935 = frontier_phi_61_pred_4;
                _2933 = frontier_phi_61_pred_5;
                uint _3081 = _3080 + 1u;
                if (_3081 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3074 = _2931;
                    _3075 = _2933;
                    _3076 = _2935;
                    _3077 = _2937;
                    _3078 = _2939;
                    _3079 = _2941;
                    _3080 = _3081;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
        }
        uvec4 _2944 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2945 = _2944.z;
        uint _2947 = (_2945 >> 8u) & 15u;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        if (((4294967295u << _2947) & _2829) == 0u)
        {
            _3042 = _2930;
            _3044 = _2932;
            _3046 = _2934;
            _3048 = _2936;
            _3050 = _2938;
            _3052 = _2940;
        }
        else
        {
            float _3067 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
            float _3068 = _3067 * _2783;
            float _3069 = _3067 * _2784;
            float _3070 = _3067 * _2785;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2947 < ((_2945 >> 12u) & 15u))
            {
                float _3043;
                float _3045;
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3181 = _2930;
                float _3182 = _2932;
                float _3183 = _2934;
                float _3184 = _2936;
                float _3185 = _2938;
                float _3186 = _2940;
                uint _3187 = _2947;
                uint _3196;
                bool _3197;
                for (;;)
                {
                    _3196 = texelFetch(g_lightClassification, int((((_2823 << 5u) + (_2809 << 9u)) + (_3187 << 2u)) >> 2u)).x;
                    _3197 = _3196 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3197)
                    {
                        frontier_phi_67_pred = _3184;
                        frontier_phi_67_pred_1 = _3185;
                        frontier_phi_67_pred_2 = _3186;
                        frontier_phi_67_pred_3 = _3183;
                        frontier_phi_67_pred_4 = _3182;
                        frontier_phi_67_pred_5 = _3181;
                    }
                    else
                    {
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3394 = _3181;
                        float _3395 = _3182;
                        float _3396 = _3183;
                        float _3397 = _3184;
                        float _3398 = _3185;
                        float _3399 = _3186;
                        uint _3400 = _3196;
                        uint _3401;
                        vec4 _3426;
                        float _3427;
                        vec4 _3442;
                        vec3 _3454;
                        vec4 _3469;
                        vec4 _3484;
                        float _3530;
                        bool _3531;
                        for (;;)
                        {
                            uint _3411 = ((_3187 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3400));
                            _3401 = (_3400 + 4294967295u) & _3400;
                            uint _3413 = _3411 * 40u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            _3427 = _3426.w;
                            uint _3429 = (_3411 * 40u) + 4u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3444 = (_3411 * 40u) + 8u;
                            _3454 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x));
                            uint _3456 = (_3411 * 40u) + 16u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3471 = (_3411 * 40u) + 20u;
                            _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3486 = (_3411 * 40u) + 24u;
                            vec4 _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            uint _3505 = (_3411 * 40u) + 28u;
                            vec4 _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            _3530 = fma(_2785, _3518.z, fma(_2784, _3518.y, _3518.x * _2783)) + _3518.w;
                            _3531 = !((fma(_2785, _3499.z, fma(_2784, _3499.y, _3499.x * _2783)) + _3499.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3531)
                            {
                                float _3558 = _3426.x - _2783;
                                float _3559 = _3426.y - _2784;
                                float _3560 = _3426.z - _2785;
                                float _3561 = dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560));
                                float _3564 = inversesqrt(_3561);
                                float _3565 = _3564 * _3558;
                                float _3566 = _3564 * _3559;
                                float _3567 = _3564 * _3560;
                                float _3571 = 1.0 - (_3561 / (_3427 * _3427));
                                float _4737 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3572 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3576 = sqrt(_3561) * _3442.w;
                                float _3578 = 1.39999997615814208984375 / (_3576 + 1.39999997615814208984375);
                                float _3579 = _3578 * _3578;
                                float _3582 = ((1.0 - _3579) * dot(vec3(_3565, _3566, _3567), vec3(_1027, _1030, _1033))) + _3579;
                                float _3585 = _3576 * _3576;
                                float _3589 = (fma(_2785, _3469.z, fma(_2784, _3469.y, _3469.x * _2783)) + _3469.w) / _3530;
                                float _3590 = (fma(_2785, _3484.z, fma(_2784, _3484.y, _3484.x * _2783)) + _3484.w) / _3530;
                                float _3594 = 1.0 - dot(vec2(_3589, _3590), vec2(_3589, _3590));
                                float _4753 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3595 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3596 = _3595 * (((isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0))) * _3572) / ((_3585 * 0.699999988079071044921875) + 1.0));
                                float _3608 = exp2(log2(1.0 / ((_3585 * 3.5) + 5.0)) * 0.25);
                                float _3609 = 1.0 - _1102;
                                float _3616 = sqrt(1.0 - ((1.0 - (_3609 * _3609)) * (1.0 - (_3608 * _3608))));
                                float _3617 = _3616 * _3616;
                                float _3618 = _3617 * _3617;
                                float _3619 = _3565 - _3068;
                                float _3620 = _3566 - _3069;
                                float _3621 = _3567 - _3070;
                                float _3625 = inversesqrt(dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621)));
                                float _3629 = dot(vec3(_1027, _1030, _1033), vec3((-0.0) - _3068, (-0.0) - _3069, (-0.0) - _3070));
                                float _4764 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3632 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3633 = dot(vec3(_1027, _1030, _1033), vec3(_3625 * _3619, _3625 * _3620, _3625 * _3621));
                                float _4775 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3636 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3640 = ((_3636 * _3636) * (_3618 + (-1.0))) + 1.0;
                                float _3641 = _3578 * _3617;
                                float _3642 = _3641 * _3641;
                                float _3648 = ((1.0 - _3642) * dot(vec3(_1027, _1030, _1033), vec3(_3565, _3566, _3567))) + _3642;
                                float _4786 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3649 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3650 = 1.0 - _3617;
                                float _3660 = (0.5 / (((_3649 * ((_3632 * _3650) + _3617)) + 9.9999999392252902907785028219223e-09) + (((_3649 * _3650) + _3617) * _3632))) * _3649;
                                float _4797 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3670 = (_3595 * _3572) * (((_3618 * 3.1415927410125732421875) * (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) / ((_3640 * _3640) * ((_3585 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3670 * _3454.x;
                                frontier_phi_73_pred_1 = _3670 * _3454.y;
                                frontier_phi_73_pred_2 = _3596 * _3442.z;
                                frontier_phi_73_pred_3 = _3596 * _3442.y;
                                frontier_phi_73_pred_4 = _3596 * _3442.x;
                                frontier_phi_73_pred_5 = _3670 * _3454.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3674 = frontier_phi_73_pred;
                            _3675 = frontier_phi_73_pred_1;
                            _3679 = frontier_phi_73_pred_2;
                            _3678 = frontier_phi_73_pred_3;
                            _3677 = frontier_phi_73_pred_4;
                            _3676 = frontier_phi_73_pred_5;
                            _3384 = _3677 + _3397;
                            _3385 = _3678 + _3398;
                            _3386 = _3679 + _3399;
                            _3381 = _3674 + _3394;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            if (_3401 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3401;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3384;
                        frontier_phi_67_pred_1 = _3385;
                        frontier_phi_67_pred_2 = _3386;
                        frontier_phi_67_pred_3 = _3383;
                        frontier_phi_67_pred_4 = _3382;
                        frontier_phi_67_pred_5 = _3381;
                    }
                    _3049 = frontier_phi_67_pred;
                    _3051 = frontier_phi_67_pred_1;
                    _3053 = frontier_phi_67_pred_2;
                    _3047 = frontier_phi_67_pred_3;
                    _3045 = frontier_phi_67_pred_4;
                    _3043 = frontier_phi_67_pred_5;
                    uint _3188 = _3187 + 1u;
                    if (_3188 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3181 = _3043;
                        _3182 = _3045;
                        _3183 = _3047;
                        _3184 = _3049;
                        _3185 = _3051;
                        _3186 = _3053;
                        _3187 = _3188;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3051;
                frontier_phi_55_56_ladder_1 = _3053;
                frontier_phi_55_56_ladder_2 = _3049;
                frontier_phi_55_56_ladder_3 = _3047;
                frontier_phi_55_56_ladder_4 = _3045;
                frontier_phi_55_56_ladder_5 = _3043;
            }
            else
            {
                frontier_phi_55_56_ladder = _2938;
                frontier_phi_55_56_ladder_1 = _2940;
                frontier_phi_55_56_ladder_2 = _2936;
                frontier_phi_55_56_ladder_3 = _2934;
                frontier_phi_55_56_ladder_4 = _2932;
                frontier_phi_55_56_ladder_5 = _2930;
            }
            _3042 = frontier_phi_55_56_ladder_5;
            _3044 = frontier_phi_55_56_ladder_4;
            _3046 = frontier_phi_55_56_ladder_3;
            _3048 = frontier_phi_55_56_ladder_2;
            _3050 = frontier_phi_55_56_ladder;
            _3052 = frontier_phi_55_56_ladder_1;
        }
        float _3057 = isnan(1.0) ? _1086 : (isnan(_1086) ? 1.0 : min(_1086, 1.0));
        _2842 = (_3057 * _3048) + _2275;
        _2844 = (_3057 * _3050) + _2277;
        _2846 = (_3057 * _3052) + _2279;
        _2848 = ((_3042 * _1070) * _3057) + _2623;
        _2850 = ((_3044 * _1072) * _3057) + _2625;
        _2852 = ((_3046 * _1073) * _3057) + _2627;
    }
    else
    {
        _2842 = _2275;
        _2844 = _2277;
        _2846 = _2279;
        _2848 = _2623;
        _2850 = _2625;
        _2852 = _2627;
    }
    float _4813 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _4824 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _4835 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    uint _2872 = _283 + 6u;
    float _2880 = _1008 / cbSceneParam._m0[86u].x;
    float _2881 = _1009 / cbSceneParam._m0[86u].y;
    vec4 _2895 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, (log2((isnan(cbSceneParam._m0[77u].w) ? _943 : (isnan(_943) ? cbSceneParam._m0[77u].w : min(_943, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2897 = _2895.x;
    float _2898 = _2895.y;
    float _2899 = _2895.z;
    float _2900 = _2895.w;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    if (_943 > cbSceneParam._m0[78u].w)
    {
        float _2955 = isnan(_943) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _943 : min(cbSceneParam._m0[80u].w, _943));
        float _2956 = _2955 / _943;
        float _2967 = _2956 * _993;
        float _2968 = _994 * _2956;
        float _2969 = (-0.0) - _2968;
        float _2970 = _2956 * _995;
        float _2972 = (cbSceneParam._m0[77u].w * _2969) / _2955;
        float _2973 = _2972 + cbSceneParam._m0[79u].w;
        float _2974 = cbSceneParam._m0[79u].w - _2968;
        float _2980 = sqrt(((_2967 * _2967) + (_2968 * _2968)) + (_2970 * _2970));
        float _2983 = (1.0 - (cbSceneParam._m0[77u].w / _2955)) * _2980;
        float _2988 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2990 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3143;
        if (abs((_2969 - _2972) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3143 = ((((_2973 > 0.0) ? exp2(_2988 * _2973) : (2.0 - exp2(_2990 * _2973))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2983;
        }
        else
        {
            float _3103 = 1.0 / cbSceneParam._m0[80u].x;
            float _3104 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : max(_2973, _2974));
            float _3105 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : min(_2973, _2974));
            float _3114 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : min(_3104, 0.0));
            float _3115 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : min(_3105, 0.0));
            _3143 = ((abs(_2980 / _2969) * cbSceneParam._m0[80u].y) * ((((_3114 - _3115) * 2.0) - ((exp2(_2988 * (isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0)))) - exp2(_2988 * (isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))))) * _3103)) - ((exp2(_2990 * _3114) - exp2(_2990 * _3115)) * _3103))) + (_2983 * cbSceneParam._m0[80u].z);
        }
        vec4 _3145 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, 1.0), 0.0);
        float _3154 = exp2((_3143 * (-1.44269502162933349609375)) * (1.0 - _3145.w));
        float _3155 = log2(_3154);
        float _3171 = log2(_2900);
        _2992 = (exp2(_3171 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3155 * cbSceneParam._m0[78u].x)) * _3145.x) / cbSceneParam._m0[78u].x)) + _2897;
        _2994 = (exp2(_3171 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3155 * cbSceneParam._m0[78u].y)) * _3145.y) / cbSceneParam._m0[78u].y)) + _2898;
        _2996 = (exp2(_3171 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3155 * cbSceneParam._m0[78u].z)) * _3145.z) / cbSceneParam._m0[78u].z)) + _2899;
        _2998 = _3154 * _2900;
    }
    else
    {
        _2992 = _2897;
        _2994 = _2898;
        _2996 = _2899;
        _2998 = _2900;
    }
    float _3010 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3011 = _3010 == 3.0;
    float _3012 = log2(_2998);
    float _3019 = exp2(_3012 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2842 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1086))) + ((_2848 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1894)) * cbPerFrame._m0[3u].x));
    float _3020 = exp2(_3012 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2844 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1086))) + ((_2850 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1894)) * cbPerFrame._m0[3u].x));
    float _3021 = exp2(_3012 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2846 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1086))) + ((_2852 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1894)) * cbPerFrame._m0[3u].x));
    float _3030 = (_3010 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3030 * (_3011 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2992)));
    SV_Target.y = _3030 * (_3011 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2994)));
    SV_Target.z = _3030 * (_3011 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2996)));
    SV_Target.w = cbInstanceData._m0[_2872].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2872].w;
}


