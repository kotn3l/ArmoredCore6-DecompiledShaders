#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1157;
float _3539;
float _3540;
float _3541;
float _3542;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3551 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3562 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3573 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _261 = _256 + 1u;
    uint _265 = _256 + 2u;
    float _274 = sqrt(((cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x));
    float _275 = _274 * TEXCOORD.z;
    float _276 = _274 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _275) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _317 = _312.x * cbMtdParam._m0[9u].x;
    float _318 = _312.y * cbMtdParam._m0[9u].y;
    float _319 = _312.z * cbMtdParam._m0[9u].z;
    float _323 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _289.x) * _317;
    float _326 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _289.y) * _318;
    float _329 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _289.z) * _319;
    float _336 = ((_317 - _323) * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) + _323;
    float _337 = ((_318 - _326) * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) + _326;
    float _338 = ((_319 - _329) * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) + _329;
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _275) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _276) + cbTextureTilingScale._m0[20u].w));
    vec4 _382 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _386 = _382.z;
    float _390 = (_382.x * 2.0) + (-1.0);
    float _391 = (_382.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3584 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _397 = sqrt(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))));
    float _402 = _390 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_356.x * 2.0) + (-1.0)));
    float _403 = _391 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_356.y * 2.0) + (-1.0)));
    float _406 = fma(_397, _223, fma(_403, _230, _402 * _216));
    float _409 = fma(_397, _224, fma(_403, _231, _402 * _217));
    float _412 = fma(_397, _225, fma(_403, _232, _402 * _218));
    float _416 = inversesqrt(dot(vec3(_406, _409, _412), vec3(_406, _409, _412)));
    vec4 _452 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _275) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _276) + cbTextureTilingScale._m0[11u].w));
    float _454 = _452.x;
    float _455 = 1.0 - _454;
    float _462 = ((_454 - _455) * cbMtdParam._m0[24u].z) + _455;
    float _464 = (cbMtdParam._m0[19u].x + dot(vec4(_416 * _406, _416 * _409, _416 * _412, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_462 * cbMtdParam._m0[21u].z);
    float _3595 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _480 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_462 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3606 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _485 = ((_465 * (cbMtdParam._m0[17u].x - _336)) * _481) + _336;
    float _486 = ((_465 * (cbMtdParam._m0[17u].y - _337)) * _481) + _337;
    float _487 = ((_465 * (cbMtdParam._m0[17u].z - _338)) * _481) + _338;
    vec4 _500 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _502 = _500.x;
    float _505 = _502 - ((_502 * _465) * _481);
    float _510 = (((_356.z - _386) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _386;
    vec4 _523 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _275) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _276) + cbTextureTilingScale._m0[15u].w));
    float _530 = (_523.x * 2.0) + (-1.0);
    float _531 = (_523.y * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3617 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _541 = (((_523.z - _510) * _465) * _481) + _510;
    float _556 = (((cbMtdParam._m0[21u].x * _402) + ((_530 - _402) * _465)) * _481) + _402;
    float _557 = (((cbMtdParam._m0[21u].x * _403) + ((_531 - _403) * _465)) * _481) + _403;
    float _558 = (((sqrt(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) - _397) * _465) * _481) + _397;
    float _560 = cbMtdParam._m0[22u].x + _382.w;
    float _563 = fma(_558, _223, fma(_557, _230, _556 * _216));
    float _566 = fma(_558, _224, fma(_557, _231, _556 * _217));
    float _569 = fma(_558, _225, fma(_557, _232, _556 * _218));
    float _573 = inversesqrt(dot(vec3(_563, _566, _569), vec3(_563, _566, _569)));
    float _574 = _573 * _563;
    float _575 = _573 * _566;
    float _576 = _573 * _569;
    float _3628 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _577 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3650 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3661 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3672 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3683 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _582 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _596 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _647 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _637);
    float _648 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _637);
    float _649 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _637);
    float _653 = inversesqrt(dot(vec3(_647, _648, _649), vec3(_647, _648, _649)));
    float _654 = _647 * _653;
    float _655 = _648 * _653;
    float _656 = _649 * _653;
    vec4 _661 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _663 = _661.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _838 = sqrt(((_647 * _647) + (_648 * _648)) + (_649 * _649));
        float _844 = (cbMatDynParam._m0[5u].x * _838) + cbMatDynParam._m0[5u].y;
        float _3694 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _849 = (cbMatDynParam._m0[5u].z * _838) + cbMatDynParam._m0[5u].w;
        float _3705 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) - _845)) + _845) < ((_663 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _675 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _676 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _696 = fma(_576, cbSceneParam._m0[5u].z, fma(_575, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _574));
    float _699 = fma(_576, cbSceneParam._m0[6u].z, fma(_575, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _574));
    float _702 = fma(_576, cbSceneParam._m0[7u].z, fma(_575, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _574));
    uint _715 = _256 + 9u;
    uint _716 = _715 + uint(cbMatDynParam._m0[0u].w);
    float _722 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) * cbInstanceData._m0[_716].x;
    float _723 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_716].y;
    float _724 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_716].z;
    float _3716 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _3727 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _3738 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _728 = 1.0 - _582;
    float _729 = _725 * _728;
    float _730 = _726 * _728;
    float _731 = _727 * _728;
    float _736 = (_725 + (-0.039999999105930328369140625)) * _582;
    float _737 = (_726 + (-0.039999999105930328369140625)) * _582;
    float _738 = (_727 + (-0.039999999105930328369140625)) * _582;
    float _739 = _736 + 0.039999999105930328369140625;
    float _741 = _737 + 0.039999999105930328369140625;
    float _742 = _738 + 0.039999999105930328369140625;
    vec4 _751 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _675, cbSceneParam._m0[86u].y * _676));
    float _755 = ((isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * TEXCOORD_5.w) * _751.x;
    float _756 = dot(vec3(_574, _575, _576), vec3(_654, _655, _656));
    float _759 = _756 * 2.0;
    float _763 = (_759 * _574) - _654;
    float _764 = (_759 * _575) - _655;
    float _765 = (_759 * _576) - _656;
    float _769 = abs(dot(vec3(_654, _655, _656), vec3(_574, _575, _576)));
    float _3749 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _771 = sqrt(_577);
    float _784 = exp2((_771 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_771 * 3.0));
    float _790 = (1.0 - _784) * ((_771 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _791 = _784 * _771;
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1156;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _881 = fma(_827, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _819));
        float _885 = fma(_827, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _819));
        float _889 = fma(_827, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _819));
        float _914 = _819 + _574;
        float _915 = _823 + _575;
        float _916 = _827 + _576;
        float _926 = fma(_916, cbModelParam._m0[26u].z, fma(_915, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914)) - _881;
        float _927 = fma(_916, cbModelParam._m0[27u].z, fma(_915, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914)) - _885;
        float _928 = fma(_916, cbModelParam._m0[28u].z, fma(_915, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914)) - _889;
        float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
        float _945 = ((_932 * _926) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_881 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_932 * _927) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_885 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_932 * _928) / cbModelParam._m0[34u].z) + ((((((_889 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        float _984 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_950.x + (-0.5));
        float _986 = _984 * (_950.y + (-0.5));
        float _987 = _984 * (_950.z + (-0.5));
        float _994 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_957.x + (-0.5));
        float _996 = _994 * (_957.y + (-0.5));
        float _997 = _994 * (_957.z + (-0.5));
        float _1004 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_964.x + (-0.5));
        float _1006 = _1004 * (_964.y + (-0.5));
        float _1007 = _1004 * (_964.z + (-0.5));
        float _1014 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_971.x + (-0.5));
        float _1016 = _1014 * (_971.y + (-0.5));
        float _1017 = _1014 * (_971.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1038 = (dot(vec3(_574, _575, _576), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1048 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3797 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1050 + 1.0))) + _1055) * _1018;
        float _1065 = _986 * 0.5;
        float _1066 = _996 * 0.5;
        float _1067 = _1006 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_574, _575, _576), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3830 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1092 + 1.0))) + _1097) * _1019;
        float _1107 = _987 * 0.5;
        float _1108 = _997 * 0.5;
        float _1109 = _1007 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_574, _575, _576), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3863 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1134 + 1.0))) + _1139) * _1020;
        _1156 = _987;
        _1158 = _986;
        _1159 = _985;
        _1160 = _997;
        _1161 = _996;
        _1162 = _995;
        _1163 = _1007;
        _1164 = _1006;
        _1165 = _1005;
        _1166 = _1020;
        _1167 = _1019;
        _1168 = _1018;
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _1157;
        _1158 = _1157;
        _1159 = _1157;
        _1160 = _1157;
        _1161 = _1157;
        _1162 = _1157;
        _1163 = _1157;
        _1164 = _1157;
        _1165 = _1157;
        _1166 = _1157;
        _1167 = _1157;
        _1168 = _1157;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1199 = fma(_827, cbModelParam._m0[30u].z, fma(_823, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _819));
        float _1203 = fma(_827, cbModelParam._m0[31u].z, fma(_823, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _819));
        float _1207 = fma(_827, cbModelParam._m0[32u].z, fma(_823, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _819));
        float _1230 = _819 + _574;
        float _1231 = _823 + _575;
        float _1232 = _827 + _576;
        float _1242 = fma(_1232, cbModelParam._m0[30u].z, fma(_1231, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1230)) - _1199;
        float _1243 = fma(_1232, cbModelParam._m0[31u].z, fma(_1231, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1230)) - _1203;
        float _1244 = fma(_1232, cbModelParam._m0[32u].z, fma(_1231, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1230)) - _1207;
        float _1248 = inversesqrt(dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244)));
        float _1261 = ((_1248 * _1242) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1199 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1248 * _1243) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1203 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1248 * _1244) / cbModelParam._m0[35u].z) + ((((((_1207 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1298 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1265.x + (-0.5));
        float _1300 = _1298 * (_1265.y + (-0.5));
        float _1301 = _1298 * (_1265.z + (-0.5));
        float _1308 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1272.x + (-0.5));
        float _1310 = _1308 * (_1272.y + (-0.5));
        float _1311 = _1308 * (_1272.z + (-0.5));
        float _1318 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1279.x + (-0.5));
        float _1320 = _1318 * (_1279.y + (-0.5));
        float _1321 = _1318 * (_1279.z + (-0.5));
        float _1328 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1286.x + (-0.5));
        float _1330 = _1328 * (_1286.y + (-0.5));
        float _1331 = _1328 * (_1286.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_574, _575, _576), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3926 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1362 + 1.0))) + _1367) * _1332;
        float _1377 = _1300 * 0.5;
        float _1378 = _1310 * 0.5;
        float _1379 = _1320 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_574, _575, _576), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _3959 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1404 + 1.0))) + _1409) * _1333;
        float _1419 = _1301 * 0.5;
        float _1420 = _1311 * 0.5;
        float _1421 = _1321 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_574, _575, _576), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _3992 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1446 + 1.0))) + _1451) * _1334;
        _1468 = _1301;
        _1469 = _1300;
        _1470 = _1299;
        _1471 = _1311;
        _1472 = _1310;
        _1473 = _1309;
        _1474 = _1321;
        _1475 = _1320;
        _1476 = _1319;
        _1477 = _1334;
        _1478 = _1333;
        _1479 = _1332;
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
    }
    else
    {
        _1468 = _1157;
        _1469 = _1157;
        _1470 = _1157;
        _1471 = _1157;
        _1472 = _1157;
        _1473 = _1157;
        _1474 = _1157;
        _1475 = _1157;
        _1476 = _1157;
        _1477 = _1157;
        _1478 = _1157;
        _1479 = _1157;
        _1480 = 0.0;
        _1481 = 0.0;
        _1482 = 0.0;
    }
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1169)) + _1169;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1170)) + _1170;
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1171)) + _1171;
    float _1515 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1492));
    float _1536 = _763 * 0.5;
    float _1537 = _764 * 0.5;
    float _1538 = _765 * 0.5;
    float _1539 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1542 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1545 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1579;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1552 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1156, _1160, _1163, _1166));
        float _1556 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1560 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1159, _1162, _1165, _1168));
        float _1567 = dot(vec4(cbModelParam._m0[39u]), vec4(_1536, _1537, _1538, 1.0));
        _1579 = dot(vec3(isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1567) ? 0.0 : (isnan(0.0) ? _1567 : max(0.0, _1567))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1579 = 1.0;
    }
    float _1590;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1581 = dot(vec4(cbModelParam._m0[40u]), vec4(_1536, _1537, _1538, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1594 = (_1590 * cbModelParam._m0[1u].x) + (_1579 * (1.0 - cbModelParam._m0[1u].x));
    float _1604 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _577);
    float _1605 = isnan(_1604) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1604 : min(cbModelParam._m0[25u].z, _1604));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1653 = fma(_827, cbModelParam._m0[13u].z, fma(_823, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819)) + cbModelParam._m0[13u].w;
        float _1657 = fma(_827, cbModelParam._m0[14u].z, fma(_823, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819)) + cbModelParam._m0[14u].w;
        float _1661 = fma(_827, cbModelParam._m0[15u].z, fma(_823, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819)) + cbModelParam._m0[15u].w;
        float _1664 = fma(_765, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763));
        float _1667 = fma(_765, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763));
        float _1670 = fma(_765, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763));
        float _1698;
        if (_1664 > 0.0)
        {
            _1698 = abs((1.0 - _1653) / _1664);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1653 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1698 = frontier_phi_17_15_ladder;
        }
        float _1902;
        if (_1667 > 0.0)
        {
            _1902 = abs((1.0 - _1657) / _1667);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1657 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1902 = frontier_phi_26_22_ladder;
        }
        float _2156;
        if (_1670 > 0.0)
        {
            _2156 = abs((1.0 - _1661) / _1670);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1661 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2156 = frontier_phi_38_33_ladder;
        }
        float _2158 = isnan(_1902) ? _1698 : (isnan(_1698) ? _1902 : min(_1698, _1902));
        float _2159 = isnan(_2156) ? _2158 : (isnan(_2158) ? _2156 : min(_2158, _2156));
        float _2163 = (_2159 * _1664) + _1653;
        float _2164 = (_2159 * _1667) + _1657;
        float _2165 = (_2159 * _1670) + _1661;
        float _2166 = _2159 * 9.9999997473787516355514526367188e-05;
        float _2168 = (-1.0) - _2166;
        float _2170 = _2166 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2165 > _2170) || ((_2165 < _2168) || ((_2164 > _2170) || ((_2164 < _2168) || ((_2163 < _2168) || (_2163 > _2170))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2293 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2165, cbModelParam._m0[9u].z, fma(_2164, cbModelParam._m0[9u].y, _2163 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2165, cbModelParam._m0[10u].z, fma(_2164, cbModelParam._m0[10u].y, _2163 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2165, cbModelParam._m0[11u].z, fma(_2164, cbModelParam._m0[11u].y, _2163 * cbModelParam._m0[11u].x))), _1605);
            frontier_phi_16_38_ladder = _2293.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2293.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2293.x * cbModelParam._m0[1u].y;
        }
        _1686 = frontier_phi_16_38_ladder_2;
        _1688 = frontier_phi_16_38_ladder_1;
        _1690 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_763, _764, _765), _1605);
        _1686 = _1674.x * cbModelParam._m0[1u].y;
        _1688 = _1674.y * cbModelParam._m0[1u].y;
        _1690 = _1674.z * cbModelParam._m0[1u].y;
    }
    float _1694 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _577);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1694 : min(cbModelParam._m0[25u].w, _1694));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1749 = fma(_827, cbModelParam._m0[21u].z, fma(_823, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819)) + cbModelParam._m0[21u].w;
        float _1753 = fma(_827, cbModelParam._m0[22u].z, fma(_823, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819)) + cbModelParam._m0[22u].w;
        float _1757 = fma(_827, cbModelParam._m0[23u].z, fma(_823, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819)) + cbModelParam._m0[23u].w;
        float _1760 = fma(_765, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763));
        float _1763 = fma(_765, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763));
        float _1766 = fma(_765, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763));
        float _1907;
        if (_1760 > 0.0)
        {
            _1907 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1907 = frontier_phi_28_24_ladder;
        }
        float _2183;
        if (_1763 > 0.0)
        {
            _2183 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2183 = frontier_phi_40_35_ladder;
        }
        float _2396;
        if (_1766 > 0.0)
        {
            _2396 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2396 = frontier_phi_49_46_ladder;
        }
        float _2398 = isnan(_2183) ? _1907 : (isnan(_1907) ? _2183 : min(_1907, _2183));
        float _2399 = isnan(_2396) ? _2398 : (isnan(_2398) ? _2396 : min(_2398, _2396));
        float _2403 = (_2399 * _1760) + _1749;
        float _2404 = (_2399 * _1763) + _1753;
        float _2405 = (_2399 * _1766) + _1757;
        float _2406 = _2399 * 9.9999997473787516355514526367188e-05;
        float _2407 = (-1.0) - _2406;
        float _2409 = _2406 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2405 > _2409) || ((_2405 < _2407) || ((_2404 > _2409) || ((_2404 < _2407) || ((_2403 < _2407) || (_2403 > _2409))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2405, cbModelParam._m0[17u].z, fma(_2404, cbModelParam._m0[17u].y, _2403 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2405, cbModelParam._m0[18u].z, fma(_2404, cbModelParam._m0[18u].y, _2403 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2405, cbModelParam._m0[19u].z, fma(_2404, cbModelParam._m0[19u].y, _2403 * cbModelParam._m0[19u].x))), _1695);
            frontier_phi_25_49_ladder = _2604.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2604.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2604.x * cbModelParam._m0[1u].z;
        }
        _1785 = frontier_phi_25_49_ladder_2;
        _1787 = frontier_phi_25_49_ladder_1;
        _1789 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_763, _764, _765), _1695);
        _1785 = _1769.x * cbModelParam._m0[1u].z;
        _1787 = _1769.y * cbModelParam._m0[1u].z;
        _1789 = _1769.z * cbModelParam._m0[1u].z;
    }
    float _1802 = (((_790 * _739) + _791) * _755) * ((cbModelParam._m0[1u].w * (_1785 - _1686)) + _1686);
    float _1804 = (((_790 * _741) + _791) * _755) * ((cbModelParam._m0[1u].w * (_1787 - _1688)) + _1688);
    float _1806 = (((_790 * _742) + _791) * _755) * ((cbModelParam._m0[1u].w * (_1789 - _1690)) + _1690);
    float _1809 = fma(_1806, cbSceneParam._m0[89u].z, fma(_1804, cbSceneParam._m0[89u].y, _1802 * cbSceneParam._m0[89u].x));
    float _1812 = fma(_1806, cbSceneParam._m0[90u].z, fma(_1804, cbSceneParam._m0[90u].y, _1802 * cbSceneParam._m0[90u].x));
    float _1815 = fma(_1806, cbSceneParam._m0[91u].z, fma(_1804, cbSceneParam._m0[91u].y, _1802 * cbSceneParam._m0[91u].x));
    uvec4 _1825 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _1827 = _1825.x * 14u;
    uint _1828 = _1827 + 13u;
    float _1835 = _755 + (-1.0);
    float _1840 = (cbLight._m0[_1828].x * _1835) + 1.0;
    float _1841 = (cbLight._m0[_1828].y * _1835) + 1.0;
    float _1842 = (cbLight._m0[_1828].z * _1835) + 1.0;
    float _1843 = (cbLight._m0[_1828].w * _1835) + 1.0;
    uint _1844 = _1827 + 5u;
    float _1850 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
    uint _1854 = _1827 + 4u;
    float _1861 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
    uint _1865 = _1827 | 1u;
    float _1876 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_574, _575, _576));
    float _1879 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_574, _575, _576));
    float _4128 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _4139 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1884 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.3183098733425140380859375;
    float _1886 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * 0.3183098733425140380859375;
    float _1893 = ((cbLight._m0[_1844].x * _1850) * _1886) + ((cbLight._m0[_1854].x * _1861) * _1884);
    float _1894 = ((_1850 * cbLight._m0[_1844].y) * _1886) + ((_1861 * cbLight._m0[_1854].y) * _1884);
    float _1895 = ((_1850 * cbLight._m0[_1844].z) * _1886) + ((_1861 * cbLight._m0[_1854].z) * _1884);
    uvec4 _1899 = floatBitsToUint(cbLight._m0[_1827 + 12u]);
    bool _1901 = _1899.x == 0u;
    float _1912;
    float _1914;
    float _1916;
    if (_1901)
    {
        _1912 = _1893;
        _1914 = _1894;
        _1916 = _1895;
    }
    else
    {
        uint _1920 = _1827 + 6u;
        float _1936 = (dot(vec3(cbLight._m0[_1827 + 2u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _1937 = _1936 * _1936;
        float _4150 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1938 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1939 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _1912 = (((cbLight._m0[_1920].x * 0.3183098733425140380859375) * _1938) * _1939) + _1893;
        _1914 = (((cbLight._m0[_1920].y * 0.3183098733425140380859375) * _1938) * _1939) + _1894;
        _1916 = (((cbLight._m0[_1920].z * 0.3183098733425140380859375) * _1938) * _1939) + _1895;
    }
    bool _1919 = _1899.y == 0u;
    float _1957;
    float _1959;
    float _1961;
    if (_1919)
    {
        _1957 = _1912;
        _1959 = _1914;
        _1961 = _1916;
    }
    else
    {
        uint _2127 = _1827 + 7u;
        float _2143 = (dot(vec3(cbLight._m0[_1827 + 3u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _2144 = _2143 * _2143;
        float _4166 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2145 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2146 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _1957 = (((cbLight._m0[_2127].x * 0.3183098733425140380859375) * _2145) * _2146) + _1912;
        _1959 = (((cbLight._m0[_2127].y * 0.3183098733425140380859375) * _2145) * _2146) + _1914;
        _1961 = (((cbLight._m0[_2127].z * 0.3183098733425140380859375) * _2145) * _2146) + _1916;
    }
    uint _1964 = _1827 + 8u;
    float _1977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1827].w)) * _577) * 0.949999988079071044921875);
    float _1978 = _1977 * _1977;
    float _1979 = cbLight._m0[_1827].x + _654;
    float _1980 = cbLight._m0[_1827].y + _655;
    float _1981 = cbLight._m0[_1827].z + _656;
    float _1985 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
    float _1986 = _1985 * _1979;
    float _1987 = _1985 * _1980;
    float _1988 = _1985 * _1981;
    float _1989 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_1827].xyz));
    float _4182 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _4193 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _1993 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _1994 = dot(vec3(_574, _575, _576), vec3(_1986, _1987, _1988));
    float _4204 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _1998 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_1986, _1987, _1988));
    float _4215 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2002 = _1978 * _1978;
    float _2006 = ((_1997 * _1997) * (_2002 + (-1.0))) + 1.0;
    float _2014 = exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0);
    float _2015 = 0.959999978542327880859375 - _736;
    float _2017 = 0.959999978542327880859375 - _737;
    float _2018 = 0.959999978542327880859375 - _738;
    float _2025 = 1.0 - _1978;
    float _2036 = (0.5 / (((_1993 * ((_1992 * _2025) + _1978)) + 9.9999999392252902907785028219223e-09) + (((_1993 * _2025) + _1978) * _1992))) * _1992;
    float _4226 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2038 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2002 / ((_2006 * _2006) * 3.141590118408203125));
    uint _2049 = _1827 + 9u;
    float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1865].w)) * _577) * 0.949999988079071044921875);
    float _2061 = _2060 * _2060;
    float _2062 = cbLight._m0[_1865].x + _654;
    float _2063 = cbLight._m0[_1865].y + _655;
    float _2064 = cbLight._m0[_1865].z + _656;
    float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
    float _2069 = _2068 * _2062;
    float _2070 = _2068 * _2063;
    float _2071 = _2068 * _2064;
    float _2072 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_1865].xyz));
    float _4237 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _2076 = dot(vec3(_574, _575, _576), vec3(_2069, _2070, _2071));
    float _4248 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_2069, _2070, _2071));
    float _4259 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2061 * _2061;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2095 = exp2(log2(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * 5.0);
    float _2102 = 1.0 - _2061;
    float _2112 = (0.5 / (((_1993 * ((_2075 * _2102) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_1993 * _2102) + _2061) * _2075))) * _2075;
    float _4270 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    float _2124 = (((((_2095 * _2015) + _739) * cbLight._m0[_2049].x) * _2114) * _1850) + (((((_2014 * _2015) + _739) * cbLight._m0[_1964].x) * _2038) * _1861);
    float _2125 = (((((_2095 * _2017) + _741) * cbLight._m0[_2049].y) * _2114) * _1850) + (((((_2014 * _2017) + _741) * cbLight._m0[_1964].y) * _2038) * _1861);
    float _2126 = (((((_2095 * _2018) + _742) * cbLight._m0[_2049].z) * _2114) * _1850) + (((((_2014 * _2018) + _742) * cbLight._m0[_1964].z) * _2038) * _1861);
    float _2188;
    float _2190;
    float _2192;
    if (_1901)
    {
        _2188 = _2124;
        _2190 = _2125;
        _2192 = _2126;
    }
    else
    {
        uint _2194 = _1827 + 2u;
        uint _2198 = _1827 + 10u;
        float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2194].w)) * _577) * 0.949999988079071044921875);
        float _2213 = _2212 * _2212;
        float _2214 = cbLight._m0[_2194].x + _654;
        float _2215 = cbLight._m0[_2194].y + _655;
        float _2216 = cbLight._m0[_2194].z + _656;
        float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
        float _2221 = _2220 * _2214;
        float _2222 = _2220 * _2215;
        float _2223 = _2220 * _2216;
        float _2224 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2194].xyz));
        float _4281 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2228 = dot(vec3(_574, _575, _576), vec3(_2221, _2222, _2223));
        float _4292 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2232 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_2221, _2222, _2223));
        float _4303 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2236 = _2213 * _2213;
        float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
        float _2247 = exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0);
        float _2254 = 1.0 - _2213;
        float _2264 = (0.5 / (((_1993 * ((_2227 * _2254) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_1993 * _2254) + _2213) * _2227))) * _2227;
        float _4314 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2266 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
        float _2267 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2188 = (((((_2247 * _2015) + _739) * cbLight._m0[_2198].x) * _2266) * _2267) + _2124;
        _2190 = (((((_2247 * _2017) + _741) * cbLight._m0[_2198].y) * _2266) * _2267) + _2125;
        _2192 = (((((_2247 * _2018) + _742) * cbLight._m0[_2198].z) * _2266) * _2267) + _2126;
    }
    float _2302;
    float _2304;
    float _2306;
    if (_1919)
    {
        _2302 = _2188;
        _2304 = _2190;
        _2306 = _2192;
    }
    else
    {
        uint _2313 = _1827 + 3u;
        uint _2317 = _1827 + 11u;
        float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _577) * 0.949999988079071044921875);
        float _2332 = _2331 * _2331;
        float _2333 = cbLight._m0[_2313].x + _654;
        float _2334 = cbLight._m0[_2313].y + _655;
        float _2335 = cbLight._m0[_2313].z + _656;
        float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
        float _2340 = _2339 * _2333;
        float _2341 = _2339 * _2334;
        float _2342 = _2339 * _2335;
        float _2343 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2313].xyz));
        float _4330 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2347 = dot(vec3(_574, _575, _576), vec3(_2340, _2341, _2342));
        float _4341 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2351 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2340, _2341, _2342));
        float _4352 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2355 = _2332 * _2332;
        float _2359 = ((_2350 * _2350) * (_2355 + (-1.0))) + 1.0;
        float _2366 = exp2(log2(1.0 - (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) * 5.0);
        float _2373 = 1.0 - _2332;
        float _2383 = (0.5 / (((_1993 * ((_2346 * _2373) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_1993 * _2373) + _2332) * _2346))) * _2346;
        float _4363 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2385 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2355 / ((_2359 * _2359) * 3.141590118408203125));
        float _2386 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _2302 = (((((_2366 * _2015) + _739) * cbLight._m0[_2317].x) * _2385) * _2386) + _2188;
        _2304 = (((((_2366 * _2017) + _741) * cbLight._m0[_2317].y) * _2385) * _2386) + _2190;
        _2306 = (((((_2366 * _2018) + _742) * cbLight._m0[_2317].z) * _2385) * _2386) + _2192;
    }
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    if (_1825.y == 0u)
    {
        float _2461 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2462 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2461;
        float _2463 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2461;
        float _2464 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2461;
        uvec4 _2476 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2477 = _2476.x;
        uint _2488 = uint((float(_2476.y) * floor(float(uint(cbSceneParam._m0[85u].y * _676) / _2477))) + floor(float(uint(cbSceneParam._m0[85u].x * _675) / _2477)));
        float _2498 = (log2(_2464 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2499 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        uint _2502 = uint(isnan(14.0) ? _2499 : (isnan(_2499) ? 14.0 : min(_2499, 14.0)));
        uvec4 _2507 = texelFetch(g_lightClusterGridBuffer, int(((_2502 << 2u) + (_2488 << 6u)) >> 2u));
        uint _2508 = _2507.x;
        uint _2509 = _2476.z;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        if (((((1u << ((_2509 >> 4u) & 15u)) + 4294967295u) & _2508) == 0u) || ((_2509 & 240u) == 0u))
        {
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
        }
        else
        {
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            uint _2768 = 0u;
            uint _2777;
            bool _2778;
            for (;;)
            {
                _2777 = texelFetch(g_lightClassification, int((((_2502 << 5u) + (_2488 << 9u)) + (_2768 << 2u)) >> 2u)).x;
                _2778 = _2777 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2778)
                {
                    frontier_phi_66_pred = _2762;
                    frontier_phi_66_pred_1 = _2767;
                    frontier_phi_66_pred_2 = _2766;
                    frontier_phi_66_pred_3 = _2765;
                    frontier_phi_66_pred_4 = _2764;
                    frontier_phi_66_pred_5 = _2763;
                }
                else
                {
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    uint _2913;
                    _2907 = _2762;
                    _2908 = _2763;
                    _2909 = _2764;
                    _2910 = _2765;
                    _2911 = _2766;
                    _2912 = _2767;
                    _2913 = _2777;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    for (;;)
                    {
                        uint _2917 = uint(findLSB(_2913)) + (_2768 << 5u);
                        uint _2914 = (_2913 + 4294967295u) & _2913;
                        uint _2919 = _2917 * 48u;
                        vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 3u)).x));
                        uint _2939 = (_2917 * 48u) + 4u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 3u)).x));
                        uint _2958 = (_2917 * 48u) + 8u;
                        vec3 _2969 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x));
                        float _2973 = _2933.x - _2462;
                        float _2974 = _2933.y - _2463;
                        float _2975 = _2933.z - _2464;
                        float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                        float _2979 = inversesqrt(_2976);
                        float _2980 = _2979 * _2973;
                        float _2981 = _2979 * _2974;
                        float _2982 = _2979 * _2975;
                        float _2983 = dot(vec3(_696, _699, _702), vec3(_2980, _2981, _2982));
                        float _2988 = 1.0 - (_2976 * _2933.w);
                        float _4389 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                        float _2990 = sqrt(_2976) * _2952.w;
                        float _2993 = 1.39999997615814208984375 / (_2990 + 1.39999997615814208984375);
                        float _2994 = _2993 * _2993;
                        float _2997 = ((1.0 - _2994) * _2983) + _2994;
                        float _3000 = _2990 * _2990;
                        float _3004 = ((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2989) / ((_3000 * 0.699999988079071044921875) + 1.0);
                        float _3008 = (-0.0) - _2462;
                        float _3009 = (-0.0) - _2463;
                        float _3010 = (-0.0) - _2464;
                        float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                        float _3015 = _3014 * _3008;
                        float _3016 = _3014 * _3009;
                        float _3017 = _3014 * _3010;
                        float _3025 = exp2(log2(1.0 / ((_3000 * 3.5) + 5.0)) * 0.25);
                        float _3026 = 1.0 - _771;
                        float _3033 = sqrt(1.0 - ((1.0 - (_3026 * _3026)) * (1.0 - (_3025 * _3025))));
                        float _3034 = _3033 * _3033;
                        float _3035 = _3034 * _3034;
                        float _3036 = _3015 + _2980;
                        float _3037 = _3016 + _2981;
                        float _3038 = _3017 + _2982;
                        float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                        float _3046 = dot(vec3(_696, _699, _702), vec3(_3015, _3016, _3017));
                        float _4405 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3049 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                        float _3050 = dot(vec3(_696, _699, _702), vec3(_3042 * _3036, _3042 * _3037, _3042 * _3038));
                        float _4416 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3053 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                        float _3057 = ((_3053 * _3053) * (_3035 + (-1.0))) + 1.0;
                        float _3058 = _2993 * _3034;
                        float _3059 = _3058 * _3058;
                        float _3062 = ((1.0 - _3059) * _2983) + _3059;
                        float _4427 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3063 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3064 = 1.0 - _3034;
                        float _3074 = (0.5 / (((_3063 * ((_3049 * _3064) + _3034)) + 9.9999999392252902907785028219223e-09) + (((_3063 * _3064) + _3034) * _3049))) * _3063;
                        float _4438 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3085 = (((_3035 * 3.1415927410125732421875) * (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) / ((_3057 * _3057) * ((_3000 * 2.1991131305694580078125) + 3.141590118408203125))) * _2989;
                        _2837 = (_3004 * _2952.x) + _2910;
                        _2838 = (_3004 * _2952.y) + _2911;
                        _2839 = (_3004 * _2952.z) + _2912;
                        _2834 = (_3085 * _2969.x) + _2907;
                        _2835 = (_3085 * _2969.y) + _2908;
                        _2836 = (_3085 * _2969.z) + _2909;
                        if (_2914 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2907 = _2834;
                            _2908 = _2835;
                            _2909 = _2836;
                            _2910 = _2837;
                            _2911 = _2838;
                            _2912 = _2839;
                            _2913 = _2914;
                        }
                    }
                    frontier_phi_66_pred = _2834;
                    frontier_phi_66_pred_1 = _2839;
                    frontier_phi_66_pred_2 = _2838;
                    frontier_phi_66_pred_3 = _2837;
                    frontier_phi_66_pred_4 = _2836;
                    frontier_phi_66_pred_5 = _2835;
                }
                _2610 = frontier_phi_66_pred;
                _2620 = frontier_phi_66_pred_1;
                _2618 = frontier_phi_66_pred_2;
                _2616 = frontier_phi_66_pred_3;
                _2614 = frontier_phi_66_pred_4;
                _2612 = frontier_phi_66_pred_5;
                uint _2769 = _2768 + 1u;
                if (_2769 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2762 = _2610;
                    _2763 = _2612;
                    _2764 = _2614;
                    _2765 = _2616;
                    _2766 = _2618;
                    _2767 = _2620;
                    _2768 = _2769;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
        }
        uvec4 _2623 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2624 = _2623.z;
        uint _2626 = (_2624 >> 8u) & 15u;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        if (((4294967295u << _2626) & _2508) == 0u)
        {
            _2730 = _2609;
            _2732 = _2611;
            _2734 = _2613;
            _2736 = _2615;
            _2738 = _2617;
            _2740 = _2619;
        }
        else
        {
            float _2755 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
            float _2756 = _2755 * _2462;
            float _2757 = _2755 * _2463;
            float _2758 = _2755 * _2464;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2626 < ((_2624 >> 12u) & 15u))
            {
                float _2731;
                float _2733;
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2890 = _2609;
                float _2891 = _2611;
                float _2892 = _2613;
                float _2893 = _2615;
                float _2894 = _2617;
                float _2895 = _2619;
                uint _2896 = _2626;
                uint _2905;
                bool _2906;
                for (;;)
                {
                    _2905 = texelFetch(g_lightClassification, int((((_2502 << 5u) + (_2488 << 9u)) + (_2896 << 2u)) >> 2u)).x;
                    _2906 = _2905 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2906)
                    {
                        frontier_phi_77_pred = _2895;
                        frontier_phi_77_pred_1 = _2894;
                        frontier_phi_77_pred_2 = _2893;
                        frontier_phi_77_pred_3 = _2892;
                        frontier_phi_77_pred_4 = _2891;
                        frontier_phi_77_pred_5 = _2890;
                    }
                    else
                    {
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3112 = _2890;
                        float _3113 = _2891;
                        float _3114 = _2892;
                        float _3115 = _2893;
                        float _3116 = _2894;
                        float _3117 = _2895;
                        uint _3118 = _2905;
                        uint _3119;
                        vec4 _3144;
                        float _3145;
                        vec4 _3160;
                        vec3 _3172;
                        vec4 _3187;
                        vec4 _3202;
                        float _3248;
                        bool _3249;
                        for (;;)
                        {
                            uint _3129 = ((_2896 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3118));
                            _3119 = (_3118 + 4294967295u) & _3118;
                            uint _3131 = _3129 * 40u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            _3145 = _3144.w;
                            uint _3147 = (_3129 * 40u) + 4u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3162 = (_3129 * 40u) + 8u;
                            _3172 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x));
                            uint _3174 = (_3129 * 40u) + 16u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3189 = (_3129 * 40u) + 20u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3204 = (_3129 * 40u) + 24u;
                            vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3223 = (_3129 * 40u) + 28u;
                            vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            _3248 = fma(_2464, _3236.z, fma(_2463, _3236.y, _3236.x * _2462)) + _3236.w;
                            _3249 = !((fma(_2464, _3217.z, fma(_2463, _3217.y, _3217.x * _2462)) + _3217.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3249)
                            {
                                float _3276 = _3144.x - _2462;
                                float _3277 = _3144.y - _2463;
                                float _3278 = _3144.z - _2464;
                                float _3279 = dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278));
                                float _3282 = inversesqrt(_3279);
                                float _3283 = _3282 * _3276;
                                float _3284 = _3282 * _3277;
                                float _3285 = _3282 * _3278;
                                float _3289 = 1.0 - (_3279 / (_3145 * _3145));
                                float _4449 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3294 = sqrt(_3279) * _3160.w;
                                float _3296 = 1.39999997615814208984375 / (_3294 + 1.39999997615814208984375);
                                float _3297 = _3296 * _3296;
                                float _3300 = ((1.0 - _3297) * dot(vec3(_3283, _3284, _3285), vec3(_696, _699, _702))) + _3297;
                                float _3303 = _3294 * _3294;
                                float _3307 = (fma(_2464, _3187.z, fma(_2463, _3187.y, _3187.x * _2462)) + _3187.w) / _3248;
                                float _3308 = (fma(_2464, _3202.z, fma(_2463, _3202.y, _3202.x * _2462)) + _3202.w) / _3248;
                                float _3312 = 1.0 - dot(vec2(_3307, _3308), vec2(_3307, _3308));
                                float _4465 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                                float _3314 = _3313 * (((isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0))) * _3290) / ((_3303 * 0.699999988079071044921875) + 1.0));
                                float _3326 = exp2(log2(1.0 / ((_3303 * 3.5) + 5.0)) * 0.25);
                                float _3327 = 1.0 - _771;
                                float _3334 = sqrt(1.0 - ((1.0 - (_3327 * _3327)) * (1.0 - (_3326 * _3326))));
                                float _3335 = _3334 * _3334;
                                float _3336 = _3335 * _3335;
                                float _3337 = _3283 - _2756;
                                float _3338 = _3284 - _2757;
                                float _3339 = _3285 - _2758;
                                float _3343 = inversesqrt(dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339)));
                                float _3347 = dot(vec3(_696, _699, _702), vec3((-0.0) - _2756, (-0.0) - _2757, (-0.0) - _2758));
                                float _4476 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3350 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3351 = dot(vec3(_696, _699, _702), vec3(_3343 * _3337, _3343 * _3338, _3343 * _3339));
                                float _4487 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3354 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3358 = ((_3354 * _3354) * (_3336 + (-1.0))) + 1.0;
                                float _3359 = _3296 * _3335;
                                float _3360 = _3359 * _3359;
                                float _3366 = ((1.0 - _3360) * dot(vec3(_696, _699, _702), vec3(_3283, _3284, _3285))) + _3360;
                                float _4498 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3367 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3368 = 1.0 - _3335;
                                float _3378 = (0.5 / (((_3367 * ((_3350 * _3368) + _3335)) + 9.9999999392252902907785028219223e-09) + (((_3367 * _3368) + _3335) * _3350))) * _3367;
                                float _4509 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3388 = (_3313 * _3290) * (((_3336 * 3.1415927410125732421875) * (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) / ((_3358 * _3358) * ((_3303 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3314 * _3160.y;
                                frontier_phi_83_pred_1 = _3314 * _3160.x;
                                frontier_phi_83_pred_2 = _3388 * _3172.z;
                                frontier_phi_83_pred_3 = _3388 * _3172.y;
                                frontier_phi_83_pred_4 = _3388 * _3172.x;
                                frontier_phi_83_pred_5 = _3314 * _3160.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3396 = frontier_phi_83_pred;
                            _3395 = frontier_phi_83_pred_1;
                            _3394 = frontier_phi_83_pred_2;
                            _3393 = frontier_phi_83_pred_3;
                            _3392 = frontier_phi_83_pred_4;
                            _3397 = frontier_phi_83_pred_5;
                            _3102 = _3395 + _3115;
                            _3103 = _3396 + _3116;
                            _3104 = _3397 + _3117;
                            _3099 = _3392 + _3112;
                            _3100 = _3393 + _3113;
                            _3101 = _3394 + _3114;
                            if (_3119 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3119;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3104;
                        frontier_phi_77_pred_1 = _3103;
                        frontier_phi_77_pred_2 = _3102;
                        frontier_phi_77_pred_3 = _3101;
                        frontier_phi_77_pred_4 = _3100;
                        frontier_phi_77_pred_5 = _3099;
                    }
                    _2741 = frontier_phi_77_pred;
                    _2739 = frontier_phi_77_pred_1;
                    _2737 = frontier_phi_77_pred_2;
                    _2735 = frontier_phi_77_pred_3;
                    _2733 = frontier_phi_77_pred_4;
                    _2731 = frontier_phi_77_pred_5;
                    uint _2897 = _2896 + 1u;
                    if (_2897 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2890 = _2731;
                        _2891 = _2733;
                        _2892 = _2735;
                        _2893 = _2737;
                        _2894 = _2739;
                        _2895 = _2741;
                        _2896 = _2897;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2735;
                frontier_phi_58_59_ladder_1 = _2741;
                frontier_phi_58_59_ladder_2 = _2739;
                frontier_phi_58_59_ladder_3 = _2737;
                frontier_phi_58_59_ladder_4 = _2733;
                frontier_phi_58_59_ladder_5 = _2731;
            }
            else
            {
                frontier_phi_58_59_ladder = _2613;
                frontier_phi_58_59_ladder_1 = _2619;
                frontier_phi_58_59_ladder_2 = _2617;
                frontier_phi_58_59_ladder_3 = _2615;
                frontier_phi_58_59_ladder_4 = _2611;
                frontier_phi_58_59_ladder_5 = _2609;
            }
            _2730 = frontier_phi_58_59_ladder_5;
            _2732 = frontier_phi_58_59_ladder_4;
            _2734 = frontier_phi_58_59_ladder;
            _2736 = frontier_phi_58_59_ladder_3;
            _2738 = frontier_phi_58_59_ladder_2;
            _2740 = frontier_phi_58_59_ladder_1;
        }
        float _2745 = isnan(1.0) ? _755 : (isnan(_755) ? 1.0 : min(_755, 1.0));
        _2521 = (_2745 * _2736) + _1957;
        _2523 = (_2745 * _2738) + _1959;
        _2525 = (_2745 * _2740) + _1961;
        _2527 = ((_2730 * _739) * _2745) + _2302;
        _2529 = ((_2732 * _741) * _2745) + _2304;
        _2531 = ((_2734 * _742) * _2745) + _2306;
    }
    else
    {
        _2521 = _1957;
        _2523 = _1959;
        _2525 = _1961;
        _2527 = _2302;
        _2529 = _2304;
        _2531 = _2306;
    }
    float _4525 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4536 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4547 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _2548 = ((isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2521 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _755))) + ((_2527 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    float _2549 = ((isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2523 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _755))) + ((_2529 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    float _2550 = ((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2525 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _755))) + ((_2531 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    uint _2551 = _256 + 6u;
    float _2559 = _675 / cbSceneParam._m0[86u].x;
    float _2560 = _676 / cbSceneParam._m0[86u].y;
    vec4 _2574 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2559, _2560, (log2((isnan(cbSceneParam._m0[77u].w) ? _596 : (isnan(_596) ? cbSceneParam._m0[77u].w : min(_596, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2576 = _2574.x;
    float _2577 = _2574.y;
    float _2578 = _2574.z;
    float _2579 = _2574.w;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    if (_596 > cbSceneParam._m0[78u].w)
    {
        float _2634 = isnan(_596) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _596 : min(cbSceneParam._m0[80u].w, _596));
        float _2635 = _2634 / _596;
        float _2646 = _2635 * _647;
        float _2647 = _648 * _2635;
        float _2648 = (-0.0) - _2647;
        float _2650 = _2635 * _649;
        float _2652 = (cbSceneParam._m0[77u].w * _2648) / _2634;
        float _2653 = _2652 + cbSceneParam._m0[79u].w;
        float _2654 = cbSceneParam._m0[79u].w - _2647;
        float _2660 = sqrt(((_2646 * _2646) + (_2647 * _2647)) + (_2650 * _2650));
        float _2663 = (1.0 - (cbSceneParam._m0[77u].w / _2634)) * _2660;
        float _2668 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2670 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2847;
        if (abs((_2648 - _2652) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2847 = ((((_2653 > 0.0) ? exp2(_2668 * _2653) : (2.0 - exp2(_2670 * _2653))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2663;
        }
        else
        {
            float _2791 = 1.0 / cbSceneParam._m0[80u].x;
            float _2792 = isnan(_2654) ? _2653 : (isnan(_2653) ? _2654 : max(_2653, _2654));
            float _2793 = isnan(_2654) ? _2653 : (isnan(_2653) ? _2654 : min(_2653, _2654));
            float _2802 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : min(_2792, 0.0));
            float _2803 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : min(_2793, 0.0));
            _2847 = ((abs(_2660 / _2648) * cbSceneParam._m0[80u].y) * ((((_2802 - _2803) * 2.0) - ((exp2(_2668 * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0)))) - exp2(_2668 * (isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0))))) * _2791)) - ((exp2(_2670 * _2802) - exp2(_2670 * _2803)) * _2791))) + (_2663 * cbSceneParam._m0[80u].z);
        }
        vec4 _2849 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2559, _2560, 1.0), 0.0);
        float _2858 = exp2((_2847 * (-1.44269502162933349609375)) * (1.0 - _2849.w));
        float _2859 = log2(_2858);
        float _2875 = log2(_2579);
        _2672 = (exp2(_2875 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].x)) * _2849.x) / cbSceneParam._m0[78u].x)) + _2576;
        _2674 = (exp2(_2875 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].y)) * _2849.y) / cbSceneParam._m0[78u].y)) + _2577;
        _2676 = (exp2(_2875 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].z)) * _2849.z) / cbSceneParam._m0[78u].z)) + _2578;
        _2678 = _2858 * _2579;
    }
    else
    {
        _2672 = _2576;
        _2674 = _2577;
        _2676 = _2578;
        _2678 = _2579;
    }
    bool _2885;
    vec4 _2688;
    vec4 _2710;
    float _2712;
    float _2716;
    float _2717;
    float _2718;
    float _2719;
    bool _2729;
    for (;;)
    {
        _2688 = cbMatDynParam._m0[0u];
        float _2690 = roundEven(_2688.y);
        bool _2691 = _2690 == 3.0;
        float _2692 = log2(_2678);
        float _2699 = exp2(_2692 * cbSceneParam._m0[78u].x) * _2548;
        float _2700 = exp2(_2692 * cbSceneParam._m0[78u].y) * _2549;
        float _2701 = exp2(_2692 * cbSceneParam._m0[78u].z) * _2550;
        float _2708 = _663 + (-0.5);
        _2710 = cbMtdParam._m0[1u];
        _2712 = _2710.y * _2708;
        float _2715 = (_2690 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2716 = _2715 * (_2691 ? _2699 : (_2699 + (cbSceneParam._m0[72u].w * _2672)));
        _2717 = _2715 * (_2691 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2674)));
        _2718 = _2715 * (_2691 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2676)));
        _2719 = _2708 * 0.999000012874603271484375;
        _2729 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2729)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _2719) < 0.5)
            {
                _2885 = true;
                break;
            }
        }
        uint _2826 = _715 + uint(_2688.w);
        if ((cbInstanceData._m0[_2826].w < 1.0) && ((cbInstanceData._m0[_2826].w + _2719) < 0.5))
        {
            _2885 = true;
            break;
        }
        if ((_2712 + 1.0) < _2710.x)
        {
            _2885 = true;
            break;
        }
        _2885 = false;
        break;
    }
    float _3090;
    if (_2885)
    {
        discard_state = true;
        _3090 = 0.0;
    }
    else
    {
        _3090 = cbInstanceData._m0[_2551].w;
    }
    SV_Target.x = _2716;
    SV_Target.y = _2717;
    SV_Target.z = _2718;
    SV_Target.w = _3090;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2551].w;
    discard_exit();
}


