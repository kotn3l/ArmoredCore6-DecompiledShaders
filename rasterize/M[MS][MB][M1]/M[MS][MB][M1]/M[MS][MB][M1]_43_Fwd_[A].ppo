#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1262;
float _3642;
float _3643;
float _3644;
float _3645;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3654 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3665 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3676 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _290) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _291) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _332 = _327.x * cbMtdParam._m0[9u].x;
    float _333 = _327.y * cbMtdParam._m0[9u].y;
    float _334 = _327.z * cbMtdParam._m0[9u].z;
    float _338 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _304.x) * _332;
    float _341 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _304.y) * _333;
    float _344 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _304.z) * _334;
    float _351 = ((_332 - _338) * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) + _338;
    float _352 = ((_333 - _341) * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) + _341;
    float _353 = ((_334 - _344) * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) + _344;
    vec4 _372 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _290) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _291) + cbTextureTilingScale._m0[14u].w));
    vec4 _392 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _422 = _418.z;
    float _426 = (_418.x * 2.0) + (-1.0);
    float _427 = (_418.y * 2.0) + (-1.0);
    float _428 = dot(vec2(_426, _427), vec2(_426, _427));
    float _3687 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _433 = sqrt(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))));
    float _438 = _426 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_392.x * 2.0) + (-1.0)));
    float _439 = _427 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_392.y * 2.0) + (-1.0)));
    vec4 _456 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _458 = _456.x;
    float _459 = 1.0 - _458;
    float _468 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _471 = ((isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : min(_468, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _480 = (_471 - ((((((_458 - _459) * cbMtdParam._m0[24u].z) + _459) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _471))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3708 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _488 = (_481 * ((_372.x * cbMtdParam._m0[18u].x) - _351)) + _351;
    float _489 = (_481 * ((_372.y * cbMtdParam._m0[18u].y) - _352)) + _352;
    float _490 = (_481 * ((_372.z * cbMtdParam._m0[18u].z) - _353)) + _353;
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _505 = _503.x;
    float _506 = 1.0 - _505;
    float _533 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_505 - _506) * cbMtdParam._m0[24u].w) + _506) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3719 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _542 = ((((cbMtdParam._m0[10u].x - _488) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _534) + _488;
    float _543 = ((((cbMtdParam._m0[10u].y - _489) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _534) + _489;
    float _544 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _490)) * _534) + _490;
    vec4 _557 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _559 = _557.x;
    float _561 = _559 - (_559 * _481);
    float _563 = _561 - (_561 * _534);
    float _568 = (((_392.z - _422) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _422;
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _589 = (_582.x * 2.0) + (-1.0);
    float _590 = (_582.y * 2.0) + (-1.0);
    float _591 = dot(vec2(_589, _590), vec2(_589, _590));
    float _3730 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _599 = (_481 * (_582.z - _568)) + _568;
    float _602 = ((cbMtdParam._m0[23u].y - _599) * _534) + _599;
    vec4 _624 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _630 = (_624.x * 2.0) + (-1.0);
    float _631 = (_624.y * 2.0) + (-1.0);
    float _632 = dot(vec2(_630, _631), vec2(_630, _631));
    float _3741 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _649 = (((_589 - _438) + (cbMtdParam._m0[21u].x * _438)) * _481) + _438;
    float _650 = (((_590 - _439) + (cbMtdParam._m0[21u].x * _439)) * _481) + _439;
    float _651 = (_481 * (sqrt(1.0 - (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) - _433)) + _433;
    float _662 = (((_630 - _649) + (_649 * cbMtdParam._m0[22u].z)) * _534) + _649;
    float _663 = (((_631 - _650) + (_650 * cbMtdParam._m0[22u].z)) * _534) + _650;
    float _664 = ((sqrt(1.0 - (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) - _651) * _534) + _651;
    float _666 = cbMtdParam._m0[22u].x + _418.w;
    float _669 = fma(_664, _239 * NORMAL.x, fma(_663, _246 * TANGENT.x, (_232 * _224) * _662));
    float _672 = fma(_664, _239 * NORMAL.y, fma(_663, _246 * TANGENT.y, (_232 * _225) * _662));
    float _675 = fma(_664, _239 * NORMAL.z, fma(_663, _246 * TANGENT.z, (_232 * _226) * _662));
    float _679 = inversesqrt(dot(vec3(_669, _672, _675), vec3(_669, _672, _675)));
    float _680 = _679 * _669;
    float _681 = _679 * _672;
    float _682 = _679 * _675;
    float _3752 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _683 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3774 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3785 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3796 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3807 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _688 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _702 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _752 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _742);
    float _753 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _742);
    float _754 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _742);
    float _758 = inversesqrt(dot(vec3(_752, _753, _754), vec3(_752, _753, _754)));
    float _759 = _752 * _758;
    float _760 = _753 * _758;
    float _761 = _754 * _758;
    vec4 _766 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _768 = _766.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _943 = sqrt(((_752 * _752) + (_753 * _753)) + (_754 * _754));
        float _949 = (cbMatDynParam._m0[5u].x * _943) + cbMatDynParam._m0[5u].y;
        float _3818 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _954 = (cbMatDynParam._m0[5u].z * _943) + cbMatDynParam._m0[5u].w;
        float _3829 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) - _950)) + _950) < ((_768 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _780 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _781 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _801 = fma(_682, cbSceneParam._m0[5u].z, fma(_681, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _680));
    float _804 = fma(_682, cbSceneParam._m0[6u].z, fma(_681, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _680));
    float _807 = fma(_682, cbSceneParam._m0[7u].z, fma(_681, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _680));
    uint _820 = _271 + 9u;
    uint _821 = _820 + uint(cbMatDynParam._m0[0u].w);
    float _827 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_821].x;
    float _828 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_821].y;
    float _829 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_821].z;
    float _3840 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _833 = 1.0 - _688;
    float _834 = _830 * _833;
    float _835 = _831 * _833;
    float _836 = _832 * _833;
    float _841 = (_830 + (-0.039999999105930328369140625)) * _688;
    float _842 = (_831 + (-0.039999999105930328369140625)) * _688;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _688;
    float _844 = _841 + 0.039999999105930328369140625;
    float _846 = _842 + 0.039999999105930328369140625;
    float _847 = _843 + 0.039999999105930328369140625;
    vec4 _856 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _780, cbSceneParam._m0[86u].y * _781));
    float _860 = ((isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * TEXCOORD_5.w) * _856.x;
    float _861 = dot(vec3(_680, _681, _682), vec3(_759, _760, _761));
    float _864 = _861 * 2.0;
    float _868 = (_864 * _680) - _759;
    float _869 = (_864 * _681) - _760;
    float _870 = (_864 * _682) - _761;
    float _874 = abs(dot(vec3(_759, _760, _761), vec3(_680, _681, _682)));
    float _3873 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _876 = sqrt(_683);
    float _889 = exp2((_876 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_876 * 3.0));
    float _895 = (1.0 - _889) * ((_876 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _896 = _889 * _876;
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1261;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _986 = fma(_932, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924));
        float _990 = fma(_932, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924));
        float _994 = fma(_932, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924));
        float _1019 = _924 + _680;
        float _1020 = _928 + _681;
        float _1021 = _932 + _682;
        float _1031 = fma(_1021, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1019)) - _986;
        float _1032 = fma(_1021, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1019)) - _990;
        float _1033 = fma(_1021, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1019)) - _994;
        float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
        float _1050 = ((_1037 * _1031) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_986 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1037 * _1032) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_990 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1037 * _1033) / cbModelParam._m0[34u].z) + ((((((_994 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        float _1089 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1055.x + (-0.5));
        float _1091 = _1089 * (_1055.y + (-0.5));
        float _1092 = _1089 * (_1055.z + (-0.5));
        float _1099 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1062.x + (-0.5));
        float _1101 = _1099 * (_1062.y + (-0.5));
        float _1102 = _1099 * (_1062.z + (-0.5));
        float _1109 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1069.x + (-0.5));
        float _1111 = _1109 * (_1069.y + (-0.5));
        float _1112 = _1109 * (_1069.z + (-0.5));
        float _1119 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1076.x + (-0.5));
        float _1121 = _1119 * (_1076.y + (-0.5));
        float _1122 = _1119 * (_1076.z + (-0.5));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = _1090 * 0.5;
        float _1127 = _1100 * 0.5;
        float _1128 = _1110 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1143 = (dot(vec3(_680, _681, _682), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1153 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3921 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1155 + 1.0))) + _1160) * _1123;
        float _1170 = _1091 * 0.5;
        float _1171 = _1101 * 0.5;
        float _1172 = _1111 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_680, _681, _682), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3954 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1197 + 1.0))) + _1202) * _1124;
        float _1212 = _1092 * 0.5;
        float _1213 = _1102 * 0.5;
        float _1214 = _1112 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_680, _681, _682), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3987 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1239 + 1.0))) + _1244) * _1125;
        _1261 = _1092;
        _1263 = _1091;
        _1264 = _1090;
        _1265 = _1102;
        _1266 = _1101;
        _1267 = _1100;
        _1268 = _1112;
        _1269 = _1111;
        _1270 = _1110;
        _1271 = _1125;
        _1272 = _1124;
        _1273 = _1123;
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
    }
    else
    {
        _1261 = _1262;
        _1263 = _1262;
        _1264 = _1262;
        _1265 = _1262;
        _1266 = _1262;
        _1267 = _1262;
        _1268 = _1262;
        _1269 = _1262;
        _1270 = _1262;
        _1271 = _1262;
        _1272 = _1262;
        _1273 = _1262;
        _1274 = 0.0;
        _1275 = 0.0;
        _1276 = 0.0;
    }
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1304 = fma(_932, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924));
        float _1308 = fma(_932, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924));
        float _1312 = fma(_932, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924));
        float _1335 = _924 + _680;
        float _1336 = _928 + _681;
        float _1337 = _932 + _682;
        float _1347 = fma(_1337, cbModelParam._m0[30u].z, fma(_1336, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1335)) - _1304;
        float _1348 = fma(_1337, cbModelParam._m0[31u].z, fma(_1336, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1335)) - _1308;
        float _1349 = fma(_1337, cbModelParam._m0[32u].z, fma(_1336, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1335)) - _1312;
        float _1353 = inversesqrt(dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349)));
        float _1366 = ((_1353 * _1347) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1304 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1353 * _1348) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1308 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1353 * _1349) / cbModelParam._m0[35u].z) + ((((((_1312 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        float _1403 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1370.x + (-0.5));
        float _1405 = _1403 * (_1370.y + (-0.5));
        float _1406 = _1403 * (_1370.z + (-0.5));
        float _1413 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1377.x + (-0.5));
        float _1415 = _1413 * (_1377.y + (-0.5));
        float _1416 = _1413 * (_1377.z + (-0.5));
        float _1423 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1384.x + (-0.5));
        float _1425 = _1423 * (_1384.y + (-0.5));
        float _1426 = _1423 * (_1384.z + (-0.5));
        float _1433 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1391.x + (-0.5));
        float _1435 = _1433 * (_1391.y + (-0.5));
        float _1436 = _1433 * (_1391.z + (-0.5));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = _1404 * 0.5;
        float _1441 = _1414 * 0.5;
        float _1442 = _1424 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_680, _681, _682), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4050 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1467 + 1.0))) + _1472) * _1437;
        float _1482 = _1405 * 0.5;
        float _1483 = _1415 * 0.5;
        float _1484 = _1425 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_680, _681, _682), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4083 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1509 + 1.0))) + _1514) * _1438;
        float _1524 = _1406 * 0.5;
        float _1525 = _1416 * 0.5;
        float _1526 = _1426 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_680, _681, _682), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4116 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1551 + 1.0))) + _1556) * _1439;
        _1573 = _1406;
        _1574 = _1405;
        _1575 = _1404;
        _1576 = _1416;
        _1577 = _1415;
        _1578 = _1414;
        _1579 = _1426;
        _1580 = _1425;
        _1581 = _1424;
        _1582 = _1439;
        _1583 = _1438;
        _1584 = _1437;
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
    }
    else
    {
        _1573 = _1262;
        _1574 = _1262;
        _1575 = _1262;
        _1576 = _1262;
        _1577 = _1262;
        _1578 = _1262;
        _1579 = _1262;
        _1580 = _1262;
        _1581 = _1262;
        _1582 = _1262;
        _1583 = _1262;
        _1584 = _1262;
        _1585 = 0.0;
        _1586 = 0.0;
        _1587 = 0.0;
    }
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1274)) + _1274;
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1275)) + _1275;
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1276)) + _1276;
    float _1620 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1598, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1598, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1598, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1597));
    float _1641 = _868 * 0.5;
    float _1642 = _869 * 0.5;
    float _1643 = _870 * 0.5;
    float _1644 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1647 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1650 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1684;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1657 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1261, _1265, _1268, _1271));
        float _1661 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1263, _1266, _1269, _1272));
        float _1665 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1672 = dot(vec4(cbModelParam._m0[39u]), vec4(_1641, _1642, _1643, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1672) ? 0.0 : (isnan(0.0) ? _1672 : max(0.0, _1672))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1695;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1686 = dot(vec4(cbModelParam._m0[40u]), vec4(_1641, _1642, _1643, 1.0));
        _1695 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1695 = 1.0;
    }
    float _1699 = (_1695 * cbModelParam._m0[1u].x) + (_1684 * (1.0 - cbModelParam._m0[1u].x));
    float _1709 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _683);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1709 : min(cbModelParam._m0[25u].z, _1709));
    float _1790;
    float _1792;
    float _1794;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1757 = fma(_932, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _924)) + cbModelParam._m0[13u].w;
        float _1761 = fma(_932, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _924)) + cbModelParam._m0[14u].w;
        float _1765 = fma(_932, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _924)) + cbModelParam._m0[15u].w;
        float _1768 = fma(_870, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868));
        float _1771 = fma(_870, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868));
        float _1774 = fma(_870, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868));
        float _1802;
        if (_1768 > 0.0)
        {
            _1802 = abs((1.0 - _1757) / _1768);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1757 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1802 = frontier_phi_17_15_ladder;
        }
        float _2005;
        if (_1771 > 0.0)
        {
            _2005 = abs((1.0 - _1761) / _1771);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1761 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2005 = frontier_phi_26_22_ladder;
        }
        float _2259;
        if (_1774 > 0.0)
        {
            _2259 = abs((1.0 - _1765) / _1774);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1765 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2259 = frontier_phi_38_33_ladder;
        }
        float _2261 = isnan(_2005) ? _1802 : (isnan(_1802) ? _2005 : min(_1802, _2005));
        float _2262 = isnan(_2259) ? _2261 : (isnan(_2261) ? _2259 : min(_2261, _2259));
        float _2266 = (_2262 * _1768) + _1757;
        float _2267 = (_2262 * _1771) + _1761;
        float _2268 = (_2262 * _1774) + _1765;
        float _2269 = _2262 * 9.9999997473787516355514526367188e-05;
        float _2271 = (-1.0) - _2269;
        float _2273 = _2269 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2268 > _2273) || ((_2268 < _2271) || ((_2267 > _2273) || ((_2267 < _2271) || ((_2266 < _2271) || (_2266 > _2273))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2268, cbModelParam._m0[9u].z, fma(_2267, cbModelParam._m0[9u].y, _2266 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2268, cbModelParam._m0[10u].z, fma(_2267, cbModelParam._m0[10u].y, _2266 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2268, cbModelParam._m0[11u].z, fma(_2267, cbModelParam._m0[11u].y, _2266 * cbModelParam._m0[11u].x))), _1710);
            frontier_phi_16_38_ladder = _2396.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2396.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2396.x * cbModelParam._m0[1u].y;
        }
        _1790 = frontier_phi_16_38_ladder_2;
        _1792 = frontier_phi_16_38_ladder_1;
        _1794 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_868, _869, _870), _1710);
        _1790 = _1778.x * cbModelParam._m0[1u].y;
        _1792 = _1778.y * cbModelParam._m0[1u].y;
        _1794 = _1778.z * cbModelParam._m0[1u].y;
    }
    float _1798 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _683);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1798 : min(cbModelParam._m0[25u].w, _1798));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1852 = fma(_932, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _924)) + cbModelParam._m0[21u].w;
        float _1856 = fma(_932, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _924)) + cbModelParam._m0[22u].w;
        float _1860 = fma(_932, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _924)) + cbModelParam._m0[23u].w;
        float _1863 = fma(_870, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868));
        float _1866 = fma(_870, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868));
        float _1869 = fma(_870, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868));
        float _2010;
        if (_1863 > 0.0)
        {
            _2010 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2010 = frontier_phi_28_24_ladder;
        }
        float _2286;
        if (_1866 > 0.0)
        {
            _2286 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2286 = frontier_phi_40_35_ladder;
        }
        float _2499;
        if (_1869 > 0.0)
        {
            _2499 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2499 = frontier_phi_49_46_ladder;
        }
        float _2501 = isnan(_2286) ? _2010 : (isnan(_2010) ? _2286 : min(_2010, _2286));
        float _2502 = isnan(_2499) ? _2501 : (isnan(_2501) ? _2499 : min(_2501, _2499));
        float _2506 = (_2502 * _1863) + _1852;
        float _2507 = (_2502 * _1866) + _1856;
        float _2508 = (_2502 * _1869) + _1860;
        float _2509 = _2502 * 9.9999997473787516355514526367188e-05;
        float _2510 = (-1.0) - _2509;
        float _2512 = _2509 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2508 > _2512) || ((_2508 < _2510) || ((_2507 > _2512) || ((_2507 < _2510) || ((_2506 < _2510) || (_2506 > _2512))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2508, cbModelParam._m0[17u].z, fma(_2507, cbModelParam._m0[17u].y, _2506 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2508, cbModelParam._m0[18u].z, fma(_2507, cbModelParam._m0[18u].y, _2506 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2508, cbModelParam._m0[19u].z, fma(_2507, cbModelParam._m0[19u].y, _2506 * cbModelParam._m0[19u].x))), _1799);
            frontier_phi_25_49_ladder = _2707.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2707.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2707.x * cbModelParam._m0[1u].z;
        }
        _1888 = frontier_phi_25_49_ladder_2;
        _1890 = frontier_phi_25_49_ladder_1;
        _1892 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_868, _869, _870), _1799);
        _1888 = _1872.x * cbModelParam._m0[1u].z;
        _1890 = _1872.y * cbModelParam._m0[1u].z;
        _1892 = _1872.z * cbModelParam._m0[1u].z;
    }
    float _1905 = (((_895 * _844) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1888 - _1790)) + _1790);
    float _1907 = (((_895 * _846) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1890 - _1792)) + _1792);
    float _1909 = (((_895 * _847) + _896) * _860) * ((cbModelParam._m0[1u].w * (_1892 - _1794)) + _1794);
    float _1912 = fma(_1909, cbSceneParam._m0[89u].z, fma(_1907, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1915 = fma(_1909, cbSceneParam._m0[90u].z, fma(_1907, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1918 = fma(_1909, cbSceneParam._m0[91u].z, fma(_1907, cbSceneParam._m0[91u].y, _1905 * cbSceneParam._m0[91u].x));
    uvec4 _1928 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _1930 = _1928.x * 14u;
    uint _1931 = _1930 + 13u;
    float _1938 = _860 + (-1.0);
    float _1943 = (cbLight._m0[_1931].x * _1938) + 1.0;
    float _1944 = (cbLight._m0[_1931].y * _1938) + 1.0;
    float _1945 = (cbLight._m0[_1931].z * _1938) + 1.0;
    float _1946 = (cbLight._m0[_1931].w * _1938) + 1.0;
    uint _1947 = _1930 + 5u;
    float _1953 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
    uint _1957 = _1930 + 4u;
    float _1964 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1968 = _1930 | 1u;
    float _1979 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_680, _681, _682));
    float _1982 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_680, _681, _682));
    float _4252 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _4263 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1987 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * 0.3183098733425140380859375;
    float _1989 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * 0.3183098733425140380859375;
    float _1996 = ((cbLight._m0[_1947].x * _1953) * _1989) + ((cbLight._m0[_1957].x * _1964) * _1987);
    float _1997 = ((_1953 * cbLight._m0[_1947].y) * _1989) + ((_1964 * cbLight._m0[_1957].y) * _1987);
    float _1998 = ((_1953 * cbLight._m0[_1947].z) * _1989) + ((_1964 * cbLight._m0[_1957].z) * _1987);
    uvec4 _2002 = floatBitsToUint(cbLight._m0[_1930 + 12u]);
    bool _2004 = _2002.x == 0u;
    float _2015;
    float _2017;
    float _2019;
    if (_2004)
    {
        _2015 = _1996;
        _2017 = _1997;
        _2019 = _1998;
    }
    else
    {
        uint _2023 = _1930 + 6u;
        float _2039 = (dot(vec3(cbLight._m0[_1930 + 2u].xyz), vec3(_680, _681, _682)) * 0.5) + 0.5;
        float _2040 = _2039 * _2039;
        float _4274 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2041 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2042 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2015 = (((cbLight._m0[_2023].x * 0.3183098733425140380859375) * _2041) * _2042) + _1996;
        _2017 = (((cbLight._m0[_2023].y * 0.3183098733425140380859375) * _2041) * _2042) + _1997;
        _2019 = (((cbLight._m0[_2023].z * 0.3183098733425140380859375) * _2041) * _2042) + _1998;
    }
    bool _2022 = _2002.y == 0u;
    float _2060;
    float _2062;
    float _2064;
    if (_2022)
    {
        _2060 = _2015;
        _2062 = _2017;
        _2064 = _2019;
    }
    else
    {
        uint _2230 = _1930 + 7u;
        float _2246 = (dot(vec3(cbLight._m0[_1930 + 3u].xyz), vec3(_680, _681, _682)) * 0.5) + 0.5;
        float _2247 = _2246 * _2246;
        float _4290 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2248 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2249 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2060 = (((cbLight._m0[_2230].x * 0.3183098733425140380859375) * _2248) * _2249) + _2015;
        _2062 = (((cbLight._m0[_2230].y * 0.3183098733425140380859375) * _2248) * _2249) + _2017;
        _2064 = (((cbLight._m0[_2230].z * 0.3183098733425140380859375) * _2248) * _2249) + _2019;
    }
    uint _2067 = _1930 + 8u;
    float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _683) * 0.949999988079071044921875);
    float _2081 = _2080 * _2080;
    float _2082 = cbLight._m0[_1930].x + _759;
    float _2083 = cbLight._m0[_1930].y + _760;
    float _2084 = cbLight._m0[_1930].z + _761;
    float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
    float _2089 = _2088 * _2082;
    float _2090 = _2088 * _2083;
    float _2091 = _2088 * _2084;
    float _2092 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_1930].xyz));
    float _4306 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _4317 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2096 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2097 = dot(vec3(_680, _681, _682), vec3(_2089, _2090, _2091));
    float _4328 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _2101 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2089, _2090, _2091));
    float _4339 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2105 = _2081 * _2081;
    float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
    float _2117 = exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0);
    float _2118 = 0.959999978542327880859375 - _841;
    float _2120 = 0.959999978542327880859375 - _842;
    float _2121 = 0.959999978542327880859375 - _843;
    float _2128 = 1.0 - _2081;
    float _2139 = (0.5 / (((_2096 * ((_2095 * _2128) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2128) + _2081) * _2095))) * _2095;
    float _4350 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
    uint _2152 = _1930 + 9u;
    float _2163 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _683) * 0.949999988079071044921875);
    float _2164 = _2163 * _2163;
    float _2165 = cbLight._m0[_1968].x + _759;
    float _2166 = cbLight._m0[_1968].y + _760;
    float _2167 = cbLight._m0[_1968].z + _761;
    float _2171 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
    float _2172 = _2171 * _2165;
    float _2173 = _2171 * _2166;
    float _2174 = _2171 * _2167;
    float _2175 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_1968].xyz));
    float _4361 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2179 = dot(vec3(_680, _681, _682), vec3(_2172, _2173, _2174));
    float _4372 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _2183 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_2172, _2173, _2174));
    float _4383 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2187 = _2164 * _2164;
    float _2191 = ((_2182 * _2182) * (_2187 + (-1.0))) + 1.0;
    float _2198 = exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0);
    float _2205 = 1.0 - _2164;
    float _2215 = (0.5 / (((_2096 * ((_2178 * _2205) + _2164)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2205) + _2164) * _2178))) * _2178;
    float _4394 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2217 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2187 / ((_2191 * _2191) * 3.141590118408203125));
    float _2227 = (((((_2198 * _2118) + _844) * cbLight._m0[_2152].x) * _2217) * _1953) + (((((_2117 * _2118) + _844) * cbLight._m0[_2067].x) * _2141) * _1964);
    float _2228 = (((((_2198 * _2120) + _846) * cbLight._m0[_2152].y) * _2217) * _1953) + (((((_2117 * _2120) + _846) * cbLight._m0[_2067].y) * _2141) * _1964);
    float _2229 = (((((_2198 * _2121) + _847) * cbLight._m0[_2152].z) * _2217) * _1953) + (((((_2117 * _2121) + _847) * cbLight._m0[_2067].z) * _2141) * _1964);
    float _2291;
    float _2293;
    float _2295;
    if (_2004)
    {
        _2291 = _2227;
        _2293 = _2228;
        _2295 = _2229;
    }
    else
    {
        uint _2297 = _1930 + 2u;
        uint _2301 = _1930 + 10u;
        float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _683) * 0.949999988079071044921875);
        float _2316 = _2315 * _2315;
        float _2317 = cbLight._m0[_2297].x + _759;
        float _2318 = cbLight._m0[_2297].y + _760;
        float _2319 = cbLight._m0[_2297].z + _761;
        float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
        float _2324 = _2323 * _2317;
        float _2325 = _2323 * _2318;
        float _2326 = _2323 * _2319;
        float _2327 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2297].xyz));
        float _4405 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2331 = dot(vec3(_680, _681, _682), vec3(_2324, _2325, _2326));
        float _4416 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2335 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2324, _2325, _2326));
        float _4427 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2339 = _2316 * _2316;
        float _2343 = ((_2334 * _2334) * (_2339 + (-1.0))) + 1.0;
        float _2350 = exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0);
        float _2357 = 1.0 - _2316;
        float _2367 = (0.5 / (((_2096 * ((_2330 * _2357) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2357) + _2316) * _2330))) * _2330;
        float _4438 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2369 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2339 / ((_2343 * _2343) * 3.141590118408203125));
        float _2370 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2291 = (((((_2350 * _2118) + _844) * cbLight._m0[_2301].x) * _2369) * _2370) + _2227;
        _2293 = (((((_2350 * _2120) + _846) * cbLight._m0[_2301].y) * _2369) * _2370) + _2228;
        _2295 = (((((_2350 * _2121) + _847) * cbLight._m0[_2301].z) * _2369) * _2370) + _2229;
    }
    float _2405;
    float _2407;
    float _2409;
    if (_2022)
    {
        _2405 = _2291;
        _2407 = _2293;
        _2409 = _2295;
    }
    else
    {
        uint _2416 = _1930 + 3u;
        uint _2420 = _1930 + 11u;
        float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _683) * 0.949999988079071044921875);
        float _2435 = _2434 * _2434;
        float _2436 = cbLight._m0[_2416].x + _759;
        float _2437 = cbLight._m0[_2416].y + _760;
        float _2438 = cbLight._m0[_2416].z + _761;
        float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
        float _2443 = _2442 * _2436;
        float _2444 = _2442 * _2437;
        float _2445 = _2442 * _2438;
        float _2446 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2416].xyz));
        float _4454 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2450 = dot(vec3(_680, _681, _682), vec3(_2443, _2444, _2445));
        float _4465 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2454 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2443, _2444, _2445));
        float _4476 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2458 = _2435 * _2435;
        float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
        float _2469 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
        float _2476 = 1.0 - _2435;
        float _2486 = (0.5 / (((_2096 * ((_2449 * _2476) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2476) + _2435) * _2449))) * _2449;
        float _4487 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2488 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
        float _2489 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2405 = (((((_2469 * _2118) + _844) * cbLight._m0[_2420].x) * _2488) * _2489) + _2291;
        _2407 = (((((_2469 * _2120) + _846) * cbLight._m0[_2420].y) * _2488) * _2489) + _2293;
        _2409 = (((((_2469 * _2121) + _847) * cbLight._m0[_2420].z) * _2488) * _2489) + _2295;
    }
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    if (_1928.y == 0u)
    {
        float _2564 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2565 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2564;
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2564;
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2564;
        uvec4 _2579 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2580 = _2579.x;
        uint _2591 = uint((float(_2579.y) * floor(float(uint(cbSceneParam._m0[85u].y * _781) / _2580))) + floor(float(uint(cbSceneParam._m0[85u].x * _780) / _2580)));
        float _2601 = (log2(_2567 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2602 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        uint _2605 = uint(isnan(14.0) ? _2602 : (isnan(_2602) ? 14.0 : min(_2602, 14.0)));
        uvec4 _2610 = texelFetch(g_lightClusterGridBuffer, int(((_2605 << 2u) + (_2591 << 6u)) >> 2u));
        uint _2611 = _2610.x;
        uint _2612 = _2579.z;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        if (((((1u << ((_2612 >> 4u) & 15u)) + 4294967295u) & _2611) == 0u) || ((_2612 & 240u) == 0u))
        {
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
        }
        else
        {
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            uint _2871 = 0u;
            uint _2880;
            bool _2881;
            for (;;)
            {
                _2880 = texelFetch(g_lightClassification, int((((_2605 << 5u) + (_2591 << 9u)) + (_2871 << 2u)) >> 2u)).x;
                _2881 = _2880 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2881)
                {
                    frontier_phi_66_pred = _2865;
                    frontier_phi_66_pred_1 = _2870;
                    frontier_phi_66_pred_2 = _2869;
                    frontier_phi_66_pred_3 = _2868;
                    frontier_phi_66_pred_4 = _2867;
                    frontier_phi_66_pred_5 = _2866;
                }
                else
                {
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    uint _3016;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2870;
                    _3016 = _2880;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    for (;;)
                    {
                        uint _3020 = uint(findLSB(_3016)) + (_2871 << 5u);
                        uint _3017 = (_3016 + 4294967295u) & _3016;
                        uint _3022 = _3020 * 48u;
                        vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 3u)).x));
                        uint _3042 = (_3020 * 48u) + 4u;
                        vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3042)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 3u)).x));
                        uint _3061 = (_3020 * 48u) + 8u;
                        vec3 _3072 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x));
                        float _3076 = _3036.x - _2565;
                        float _3077 = _3036.y - _2566;
                        float _3078 = _3036.z - _2567;
                        float _3079 = dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078));
                        float _3082 = inversesqrt(_3079);
                        float _3083 = _3082 * _3076;
                        float _3084 = _3082 * _3077;
                        float _3085 = _3082 * _3078;
                        float _3086 = dot(vec3(_801, _804, _807), vec3(_3083, _3084, _3085));
                        float _3091 = 1.0 - (_3079 * _3036.w);
                        float _4513 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3092 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3093 = sqrt(_3079) * _3055.w;
                        float _3096 = 1.39999997615814208984375 / (_3093 + 1.39999997615814208984375);
                        float _3097 = _3096 * _3096;
                        float _3100 = ((1.0 - _3097) * _3086) + _3097;
                        float _3103 = _3093 * _3093;
                        float _3107 = ((isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0))) * _3092) / ((_3103 * 0.699999988079071044921875) + 1.0);
                        float _3111 = (-0.0) - _2565;
                        float _3112 = (-0.0) - _2566;
                        float _3113 = (-0.0) - _2567;
                        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                        float _3118 = _3117 * _3111;
                        float _3119 = _3117 * _3112;
                        float _3120 = _3117 * _3113;
                        float _3128 = exp2(log2(1.0 / ((_3103 * 3.5) + 5.0)) * 0.25);
                        float _3129 = 1.0 - _876;
                        float _3136 = sqrt(1.0 - ((1.0 - (_3129 * _3129)) * (1.0 - (_3128 * _3128))));
                        float _3137 = _3136 * _3136;
                        float _3138 = _3137 * _3137;
                        float _3139 = _3118 + _3083;
                        float _3140 = _3119 + _3084;
                        float _3141 = _3120 + _3085;
                        float _3145 = inversesqrt(dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141)));
                        float _3149 = dot(vec3(_801, _804, _807), vec3(_3118, _3119, _3120));
                        float _4529 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3152 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3153 = dot(vec3(_801, _804, _807), vec3(_3145 * _3139, _3145 * _3140, _3145 * _3141));
                        float _4540 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3156 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3160 = ((_3156 * _3156) * (_3138 + (-1.0))) + 1.0;
                        float _3161 = _3096 * _3137;
                        float _3162 = _3161 * _3161;
                        float _3165 = ((1.0 - _3162) * _3086) + _3162;
                        float _4551 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3166 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                        float _3167 = 1.0 - _3137;
                        float _3177 = (0.5 / (((_3166 * ((_3152 * _3167) + _3137)) + 9.9999999392252902907785028219223e-09) + (((_3166 * _3167) + _3137) * _3152))) * _3166;
                        float _4562 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3188 = (((_3138 * 3.1415927410125732421875) * (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) / ((_3160 * _3160) * ((_3103 * 2.1991131305694580078125) + 3.141590118408203125))) * _3092;
                        _2940 = (_3107 * _3055.x) + _3013;
                        _2941 = (_3107 * _3055.y) + _3014;
                        _2942 = (_3107 * _3055.z) + _3015;
                        _2937 = (_3188 * _3072.x) + _3010;
                        _2938 = (_3188 * _3072.y) + _3011;
                        _2939 = (_3188 * _3072.z) + _3012;
                        if (_3017 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3010 = _2937;
                            _3011 = _2938;
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _2941;
                            _3015 = _2942;
                            _3016 = _3017;
                        }
                    }
                    frontier_phi_66_pred = _2937;
                    frontier_phi_66_pred_1 = _2942;
                    frontier_phi_66_pred_2 = _2941;
                    frontier_phi_66_pred_3 = _2940;
                    frontier_phi_66_pred_4 = _2939;
                    frontier_phi_66_pred_5 = _2938;
                }
                _2713 = frontier_phi_66_pred;
                _2723 = frontier_phi_66_pred_1;
                _2721 = frontier_phi_66_pred_2;
                _2719 = frontier_phi_66_pred_3;
                _2717 = frontier_phi_66_pred_4;
                _2715 = frontier_phi_66_pred_5;
                uint _2872 = _2871 + 1u;
                if (_2872 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2865 = _2713;
                    _2866 = _2715;
                    _2867 = _2717;
                    _2868 = _2719;
                    _2869 = _2721;
                    _2870 = _2723;
                    _2871 = _2872;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
        }
        uvec4 _2726 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2727 = _2726.z;
        uint _2729 = (_2727 >> 8u) & 15u;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        if (((4294967295u << _2729) & _2611) == 0u)
        {
            _2833 = _2712;
            _2835 = _2714;
            _2837 = _2716;
            _2839 = _2718;
            _2841 = _2720;
            _2843 = _2722;
        }
        else
        {
            float _2858 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
            float _2859 = _2858 * _2565;
            float _2860 = _2858 * _2566;
            float _2861 = _2858 * _2567;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2729 < ((_2727 >> 12u) & 15u))
            {
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2993 = _2712;
                float _2994 = _2714;
                float _2995 = _2716;
                float _2996 = _2718;
                float _2997 = _2720;
                float _2998 = _2722;
                uint _2999 = _2729;
                uint _3008;
                bool _3009;
                for (;;)
                {
                    _3008 = texelFetch(g_lightClassification, int((((_2605 << 5u) + (_2591 << 9u)) + (_2999 << 2u)) >> 2u)).x;
                    _3009 = _3008 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3009)
                    {
                        frontier_phi_77_pred = _2998;
                        frontier_phi_77_pred_1 = _2997;
                        frontier_phi_77_pred_2 = _2996;
                        frontier_phi_77_pred_3 = _2995;
                        frontier_phi_77_pred_4 = _2994;
                        frontier_phi_77_pred_5 = _2993;
                    }
                    else
                    {
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3215 = _2993;
                        float _3216 = _2994;
                        float _3217 = _2995;
                        float _3218 = _2996;
                        float _3219 = _2997;
                        float _3220 = _2998;
                        uint _3221 = _3008;
                        uint _3222;
                        vec4 _3247;
                        float _3248;
                        vec4 _3263;
                        vec3 _3275;
                        vec4 _3290;
                        vec4 _3305;
                        float _3351;
                        bool _3352;
                        for (;;)
                        {
                            uint _3232 = ((_2999 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3221));
                            _3222 = (_3221 + 4294967295u) & _3221;
                            uint _3234 = _3232 * 40u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            _3248 = _3247.w;
                            uint _3250 = (_3232 * 40u) + 4u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3265 = (_3232 * 40u) + 8u;
                            _3275 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x));
                            uint _3277 = (_3232 * 40u) + 16u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            uint _3292 = (_3232 * 40u) + 20u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3307 = (_3232 * 40u) + 24u;
                            vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3326 = (_3232 * 40u) + 28u;
                            vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            _3351 = fma(_2567, _3339.z, fma(_2566, _3339.y, _3339.x * _2565)) + _3339.w;
                            _3352 = !((fma(_2567, _3320.z, fma(_2566, _3320.y, _3320.x * _2565)) + _3320.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3352)
                            {
                                float _3379 = _3247.x - _2565;
                                float _3380 = _3247.y - _2566;
                                float _3381 = _3247.z - _2567;
                                float _3382 = dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381));
                                float _3385 = inversesqrt(_3382);
                                float _3386 = _3385 * _3379;
                                float _3387 = _3385 * _3380;
                                float _3388 = _3385 * _3381;
                                float _3392 = 1.0 - (_3382 / (_3248 * _3248));
                                float _4573 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3393 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3397 = sqrt(_3382) * _3263.w;
                                float _3399 = 1.39999997615814208984375 / (_3397 + 1.39999997615814208984375);
                                float _3400 = _3399 * _3399;
                                float _3403 = ((1.0 - _3400) * dot(vec3(_3386, _3387, _3388), vec3(_801, _804, _807))) + _3400;
                                float _3406 = _3397 * _3397;
                                float _3410 = (fma(_2567, _3290.z, fma(_2566, _3290.y, _3290.x * _2565)) + _3290.w) / _3351;
                                float _3411 = (fma(_2567, _3305.z, fma(_2566, _3305.y, _3305.x * _2565)) + _3305.w) / _3351;
                                float _3415 = 1.0 - dot(vec2(_3410, _3411), vec2(_3410, _3411));
                                float _4589 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3417 = _3416 * (((isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0))) * _3393) / ((_3406 * 0.699999988079071044921875) + 1.0));
                                float _3429 = exp2(log2(1.0 / ((_3406 * 3.5) + 5.0)) * 0.25);
                                float _3430 = 1.0 - _876;
                                float _3437 = sqrt(1.0 - ((1.0 - (_3430 * _3430)) * (1.0 - (_3429 * _3429))));
                                float _3438 = _3437 * _3437;
                                float _3439 = _3438 * _3438;
                                float _3440 = _3386 - _2859;
                                float _3441 = _3387 - _2860;
                                float _3442 = _3388 - _2861;
                                float _3446 = inversesqrt(dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442)));
                                float _3450 = dot(vec3(_801, _804, _807), vec3((-0.0) - _2859, (-0.0) - _2860, (-0.0) - _2861));
                                float _4600 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3453 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3454 = dot(vec3(_801, _804, _807), vec3(_3446 * _3440, _3446 * _3441, _3446 * _3442));
                                float _4611 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3457 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3461 = ((_3457 * _3457) * (_3439 + (-1.0))) + 1.0;
                                float _3462 = _3399 * _3438;
                                float _3463 = _3462 * _3462;
                                float _3469 = ((1.0 - _3463) * dot(vec3(_801, _804, _807), vec3(_3386, _3387, _3388))) + _3463;
                                float _4622 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3471 = 1.0 - _3438;
                                float _3481 = (0.5 / (((_3470 * ((_3453 * _3471) + _3438)) + 9.9999999392252902907785028219223e-09) + (((_3470 * _3471) + _3438) * _3453))) * _3470;
                                float _4633 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3491 = (_3416 * _3393) * (((_3439 * 3.1415927410125732421875) * (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) / ((_3461 * _3461) * ((_3406 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3417 * _3263.y;
                                frontier_phi_83_pred_1 = _3417 * _3263.x;
                                frontier_phi_83_pred_2 = _3491 * _3275.z;
                                frontier_phi_83_pred_3 = _3491 * _3275.y;
                                frontier_phi_83_pred_4 = _3491 * _3275.x;
                                frontier_phi_83_pred_5 = _3417 * _3263.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3499 = frontier_phi_83_pred;
                            _3498 = frontier_phi_83_pred_1;
                            _3497 = frontier_phi_83_pred_2;
                            _3496 = frontier_phi_83_pred_3;
                            _3495 = frontier_phi_83_pred_4;
                            _3500 = frontier_phi_83_pred_5;
                            _3205 = _3498 + _3218;
                            _3206 = _3499 + _3219;
                            _3207 = _3500 + _3220;
                            _3202 = _3495 + _3215;
                            _3203 = _3496 + _3216;
                            _3204 = _3497 + _3217;
                            if (_3222 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3222;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3207;
                        frontier_phi_77_pred_1 = _3206;
                        frontier_phi_77_pred_2 = _3205;
                        frontier_phi_77_pred_3 = _3204;
                        frontier_phi_77_pred_4 = _3203;
                        frontier_phi_77_pred_5 = _3202;
                    }
                    _2844 = frontier_phi_77_pred;
                    _2842 = frontier_phi_77_pred_1;
                    _2840 = frontier_phi_77_pred_2;
                    _2838 = frontier_phi_77_pred_3;
                    _2836 = frontier_phi_77_pred_4;
                    _2834 = frontier_phi_77_pred_5;
                    uint _3000 = _2999 + 1u;
                    if (_3000 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2993 = _2834;
                        _2994 = _2836;
                        _2995 = _2838;
                        _2996 = _2840;
                        _2997 = _2842;
                        _2998 = _2844;
                        _2999 = _3000;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2838;
                frontier_phi_58_59_ladder_1 = _2844;
                frontier_phi_58_59_ladder_2 = _2842;
                frontier_phi_58_59_ladder_3 = _2840;
                frontier_phi_58_59_ladder_4 = _2836;
                frontier_phi_58_59_ladder_5 = _2834;
            }
            else
            {
                frontier_phi_58_59_ladder = _2716;
                frontier_phi_58_59_ladder_1 = _2722;
                frontier_phi_58_59_ladder_2 = _2720;
                frontier_phi_58_59_ladder_3 = _2718;
                frontier_phi_58_59_ladder_4 = _2714;
                frontier_phi_58_59_ladder_5 = _2712;
            }
            _2833 = frontier_phi_58_59_ladder_5;
            _2835 = frontier_phi_58_59_ladder_4;
            _2837 = frontier_phi_58_59_ladder;
            _2839 = frontier_phi_58_59_ladder_3;
            _2841 = frontier_phi_58_59_ladder_2;
            _2843 = frontier_phi_58_59_ladder_1;
        }
        float _2848 = isnan(1.0) ? _860 : (isnan(_860) ? 1.0 : min(_860, 1.0));
        _2624 = (_2848 * _2839) + _2060;
        _2626 = (_2848 * _2841) + _2062;
        _2628 = (_2848 * _2843) + _2064;
        _2630 = ((_2833 * _844) * _2848) + _2405;
        _2632 = ((_2835 * _846) * _2848) + _2407;
        _2634 = ((_2837 * _847) * _2848) + _2409;
    }
    else
    {
        _2624 = _2060;
        _2626 = _2062;
        _2628 = _2064;
        _2630 = _2405;
        _2632 = _2407;
        _2634 = _2409;
    }
    float _4649 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4660 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4671 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _2651 = ((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2624 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _860))) + ((_2630 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    float _2652 = ((isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2626 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _860))) + ((_2632 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    float _2653 = ((isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2628 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _860))) + ((_2634 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    uint _2654 = _271 + 6u;
    float _2662 = _780 / cbSceneParam._m0[86u].x;
    float _2663 = _781 / cbSceneParam._m0[86u].y;
    vec4 _2677 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2662, _2663, (log2((isnan(cbSceneParam._m0[77u].w) ? _702 : (isnan(_702) ? cbSceneParam._m0[77u].w : min(_702, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2679 = _2677.x;
    float _2680 = _2677.y;
    float _2681 = _2677.z;
    float _2682 = _2677.w;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    if (_702 > cbSceneParam._m0[78u].w)
    {
        float _2737 = isnan(_702) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _702 : min(cbSceneParam._m0[80u].w, _702));
        float _2738 = _2737 / _702;
        float _2749 = _2738 * _752;
        float _2750 = _753 * _2738;
        float _2751 = (-0.0) - _2750;
        float _2753 = _2738 * _754;
        float _2755 = (cbSceneParam._m0[77u].w * _2751) / _2737;
        float _2756 = _2755 + cbSceneParam._m0[79u].w;
        float _2757 = cbSceneParam._m0[79u].w - _2750;
        float _2763 = sqrt(((_2749 * _2749) + (_2750 * _2750)) + (_2753 * _2753));
        float _2766 = (1.0 - (cbSceneParam._m0[77u].w / _2737)) * _2763;
        float _2771 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2773 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2950;
        if (abs((_2751 - _2755) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2950 = ((((_2756 > 0.0) ? exp2(_2771 * _2756) : (2.0 - exp2(_2773 * _2756))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2766;
        }
        else
        {
            float _2894 = 1.0 / cbSceneParam._m0[80u].x;
            float _2895 = isnan(_2757) ? _2756 : (isnan(_2756) ? _2757 : max(_2756, _2757));
            float _2896 = isnan(_2757) ? _2756 : (isnan(_2756) ? _2757 : min(_2756, _2757));
            float _2905 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : min(_2895, 0.0));
            float _2906 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : min(_2896, 0.0));
            _2950 = ((abs(_2763 / _2751) * cbSceneParam._m0[80u].y) * ((((_2905 - _2906) * 2.0) - ((exp2(_2771 * (isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0)))) - exp2(_2771 * (isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0))))) * _2894)) - ((exp2(_2773 * _2905) - exp2(_2773 * _2906)) * _2894))) + (_2766 * cbSceneParam._m0[80u].z);
        }
        vec4 _2952 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2662, _2663, 1.0), 0.0);
        float _2961 = exp2((_2950 * (-1.44269502162933349609375)) * (1.0 - _2952.w));
        float _2962 = log2(_2961);
        float _2978 = log2(_2682);
        _2775 = (exp2(_2978 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2962 * cbSceneParam._m0[78u].x)) * _2952.x) / cbSceneParam._m0[78u].x)) + _2679;
        _2777 = (exp2(_2978 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2962 * cbSceneParam._m0[78u].y)) * _2952.y) / cbSceneParam._m0[78u].y)) + _2680;
        _2779 = (exp2(_2978 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2962 * cbSceneParam._m0[78u].z)) * _2952.z) / cbSceneParam._m0[78u].z)) + _2681;
        _2781 = _2961 * _2682;
    }
    else
    {
        _2775 = _2679;
        _2777 = _2680;
        _2779 = _2681;
        _2781 = _2682;
    }
    bool _2988;
    vec4 _2791;
    vec4 _2813;
    float _2815;
    float _2819;
    float _2820;
    float _2821;
    float _2822;
    bool _2832;
    for (;;)
    {
        _2791 = cbMatDynParam._m0[0u];
        float _2793 = roundEven(_2791.y);
        bool _2794 = _2793 == 3.0;
        float _2795 = log2(_2781);
        float _2802 = exp2(_2795 * cbSceneParam._m0[78u].x) * _2651;
        float _2803 = exp2(_2795 * cbSceneParam._m0[78u].y) * _2652;
        float _2804 = exp2(_2795 * cbSceneParam._m0[78u].z) * _2653;
        float _2811 = _768 + (-0.5);
        _2813 = cbMtdParam._m0[1u];
        _2815 = _2813.y * _2811;
        float _2818 = (_2793 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2819 = _2818 * (_2794 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2775)));
        _2820 = _2818 * (_2794 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2777)));
        _2821 = _2818 * (_2794 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2779)));
        _2822 = _2811 * 0.999000012874603271484375;
        _2832 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2832)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _2822) < 0.5)
            {
                _2988 = true;
                break;
            }
        }
        uint _2929 = _820 + uint(_2791.w);
        if ((cbInstanceData._m0[_2929].w < 1.0) && ((cbInstanceData._m0[_2929].w + _2822) < 0.5))
        {
            _2988 = true;
            break;
        }
        if ((_2815 + 1.0) < _2813.x)
        {
            _2988 = true;
            break;
        }
        _2988 = false;
        break;
    }
    float _3193;
    if (_2988)
    {
        discard_state = true;
        _3193 = 0.0;
    }
    else
    {
        _3193 = cbInstanceData._m0[_2654].w;
    }
    SV_Target.x = _2819;
    SV_Target.y = _2820;
    SV_Target.z = _2821;
    SV_Target.w = _3193;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2654].w;
    discard_exit();
}


