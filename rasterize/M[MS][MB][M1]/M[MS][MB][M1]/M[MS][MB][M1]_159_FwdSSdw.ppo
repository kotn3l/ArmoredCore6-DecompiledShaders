#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1344;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].y) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3693 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _397 = (_390 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _398 = (_390 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _399 = (_390 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _457 = _455.x;
    float _458 = _455.y;
    float _459 = _455.z;
    float _468 = ((_438.z - _459) * _390) + _459;
    float _471 = ((((_438.x - _457) * _390) + _457) * 2.0) + (-1.0);
    float _473 = ((((_438.y - _458) * _390) + _458) * 2.0) + (-1.0);
    float _474 = dot(vec2(_471, _473), vec2(_471, _473));
    float _3704 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _479 = sqrt(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))));
    float _482 = fma(_479, _241, fma(_473, _248, _471 * _234));
    float _485 = fma(_479, _242, fma(_473, _249, _471 * _235));
    float _488 = fma(_479, _243, fma(_473, _250, _471 * _236));
    float _492 = inversesqrt(dot(vec3(_482, _485, _488), vec3(_482, _485, _488)));
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _536 = _534.x;
    float _537 = 1.0 - _536;
    float _541 = ((_536 - _537) * cbMtdParam._m0[24u].z) + _537;
    float _543 = (cbMtdParam._m0[19u].x + dot(vec4(_492 * _482, _492 * _485, _492 * _488, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_541 * cbMtdParam._m0[21u].z);
    float _3715 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _546 = (-0.0) - cbMtdParam._m0[24u].x;
    float _548 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _548 : (isnan(_548) ? 1.0 : min(_548, 1.0));
    float _556 = _544 - ((_544 * TEXCOORD_8.x) * _549);
    float _557 = _544 - ((_544 * TEXCOORD_8.y) * _549);
    float _558 = _544 - ((_544 * TEXCOORD_8.z) * _549);
    float _565 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _569 = ((isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : min(_565, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _577 = (_569 - (((_541 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _569))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3746 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _582 = ((_556 * ((_418.x * cbMtdParam._m0[18u].x) - _397)) * _578) + _397;
    float _583 = ((_557 * ((_418.y * cbMtdParam._m0[18u].y) - _398)) * _578) + _398;
    float _584 = ((_558 * ((_418.z * cbMtdParam._m0[18u].z) - _399)) * _578) + _399;
    vec4 _596 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _598 = _596.x;
    float _599 = 1.0 - _598;
    float _626 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_598 - _599) * cbMtdParam._m0[24u].w) + _599) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3757 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _627 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _635 = ((((cbMtdParam._m0[10u].x - _582) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _627) + _582;
    float _636 = ((((cbMtdParam._m0[10u].y - _583) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _627) + _583;
    float _637 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _584)) * _627) + _584;
    vec4 _663 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _665 = _663.x;
    float _683 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _665) * _390) + _665;
    float _687 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _683) * cbMtdParam._m0[19u].z) + _683;
    float _690 = _687 - ((_578 * _556) * _687);
    float _692 = _690 - (_690 * _627);
    vec4 _706 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _713 = (_706.x * 2.0) + (-1.0);
    float _714 = (_706.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _3768 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _724 = (((_706.z - _468) * _556) * _578) + _468;
    float _727 = ((cbMtdParam._m0[23u].y - _724) * _627) + _724;
    vec4 _746 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _752 = (_746.x * 2.0) + (-1.0);
    float _753 = (_746.y * 2.0) + (-1.0);
    float _754 = dot(vec2(_752, _753), vec2(_752, _753));
    float _3779 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _774 = (((cbMtdParam._m0[21u].x * _471) + ((_713 - _471) * _556)) * _578) + _471;
    float _775 = (((cbMtdParam._m0[21u].x * _473) + ((_714 - _473) * _557)) * _578) + _473;
    float _776 = (((sqrt(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) - _479) * _558) * _578) + _479;
    float _787 = (((_752 - _774) + (_774 * cbMtdParam._m0[22u].z)) * _627) + _774;
    float _788 = (((_753 - _775) + (_775 * cbMtdParam._m0[22u].z)) * _627) + _775;
    float _789 = ((sqrt(1.0 - (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) - _776) * _627) + _776;
    float _791 = cbMtdParam._m0[22u].x + _508.w;
    float _794 = fma(_789, _241, fma(_788, _248, _787 * _234));
    float _797 = fma(_789, _242, fma(_788, _249, _787 * _235));
    float _800 = fma(_789, _243, fma(_788, _250, _787 * _236));
    float _804 = inversesqrt(dot(vec3(_794, _797, _800), vec3(_794, _797, _800)));
    float _805 = _804 * _794;
    float _806 = _804 * _797;
    float _807 = _804 * _800;
    float _3790 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _808 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _3801 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _3812 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3823 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3834 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3845 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _813 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _827 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _877 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _867);
    float _878 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _867);
    float _879 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _867);
    float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
    float _884 = _877 * _883;
    float _885 = _878 * _883;
    float _886 = _879 * _883;
    float _892 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _893 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _911 = fma(_807, cbSceneParam._m0[5u].z, fma(_806, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _805));
    float _914 = fma(_807, cbSceneParam._m0[6u].z, fma(_806, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _805));
    float _917 = fma(_807, cbSceneParam._m0[7u].z, fma(_806, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _805));
    uint _931 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _937 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_931].x;
    float _938 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * cbInstanceData._m0[_931].y;
    float _939 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_931].z;
    float _3856 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _943 = 1.0 - _813;
    float _944 = _940 * _943;
    float _945 = _941 * _943;
    float _946 = _942 * _943;
    float _951 = (_940 + (-0.039999999105930328369140625)) * _813;
    float _952 = (_941 + (-0.039999999105930328369140625)) * _813;
    float _953 = (_942 + (-0.039999999105930328369140625)) * _813;
    float _954 = _951 + 0.039999999105930328369140625;
    float _956 = _952 + 0.039999999105930328369140625;
    float _957 = _953 + 0.039999999105930328369140625;
    vec4 _966 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _892, cbSceneParam._m0[86u].y * _893));
    float _970 = ((isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * TEXCOORD_5.w) * _966.x;
    float _971 = dot(vec3(_805, _806, _807), vec3(_884, _885, _886));
    float _974 = _971 * 2.0;
    float _978 = (_974 * _805) - _884;
    float _979 = (_974 * _806) - _885;
    float _980 = (_974 * _807) - _886;
    float _984 = abs(dot(vec3(_884, _885, _886), vec3(_805, _806, _807)));
    float _3889 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _986 = sqrt(_808);
    float _999 = exp2((_986 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_986 * 3.0));
    float _1005 = (1.0 - _999) * ((_986 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1006 = _999 * _986;
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1343;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1068 = fma(_1042, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1034));
        float _1072 = fma(_1042, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1034));
        float _1076 = fma(_1042, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1034));
        float _1101 = _1034 + _805;
        float _1102 = _1038 + _806;
        float _1103 = _1042 + _807;
        float _1113 = fma(_1103, cbModelParam._m0[26u].z, fma(_1102, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101)) - _1068;
        float _1114 = fma(_1103, cbModelParam._m0[27u].z, fma(_1102, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101)) - _1072;
        float _1115 = fma(_1103, cbModelParam._m0[28u].z, fma(_1102, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101)) - _1076;
        float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
        float _1132 = ((_1119 * _1113) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1068 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1119 * _1114) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1072 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1119 * _1115) / cbModelParam._m0[34u].z) + ((((((_1076 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        float _1171 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1137.x + (-0.5));
        float _1173 = _1171 * (_1137.y + (-0.5));
        float _1174 = _1171 * (_1137.z + (-0.5));
        float _1181 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1144.x + (-0.5));
        float _1183 = _1181 * (_1144.y + (-0.5));
        float _1184 = _1181 * (_1144.z + (-0.5));
        float _1191 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1151.x + (-0.5));
        float _1193 = _1191 * (_1151.y + (-0.5));
        float _1194 = _1191 * (_1151.z + (-0.5));
        float _1201 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1158.x + (-0.5));
        float _1203 = _1201 * (_1158.y + (-0.5));
        float _1204 = _1201 * (_1158.z + (-0.5));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = _1172 * 0.5;
        float _1209 = _1182 * 0.5;
        float _1210 = _1192 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1225 = (dot(vec3(_805, _806, _807), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1235 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3937 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1237 + 1.0))) + _1242) * _1205;
        float _1252 = _1173 * 0.5;
        float _1253 = _1183 * 0.5;
        float _1254 = _1193 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_805, _806, _807), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3970 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1279 + 1.0))) + _1284) * _1206;
        float _1294 = _1174 * 0.5;
        float _1295 = _1184 * 0.5;
        float _1296 = _1194 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_805, _806, _807), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4003 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1321 + 1.0))) + _1326) * _1207;
        _1343 = _1174;
        _1345 = _1173;
        _1346 = _1172;
        _1347 = _1184;
        _1348 = _1183;
        _1349 = _1182;
        _1350 = _1194;
        _1351 = _1193;
        _1352 = _1192;
        _1353 = _1207;
        _1354 = _1206;
        _1355 = _1205;
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1344;
        _1345 = _1344;
        _1346 = _1344;
        _1347 = _1344;
        _1348 = _1344;
        _1349 = _1344;
        _1350 = _1344;
        _1351 = _1344;
        _1352 = _1344;
        _1353 = _1344;
        _1354 = _1344;
        _1355 = _1344;
        _1356 = 0.0;
        _1357 = 0.0;
        _1358 = 0.0;
    }
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1383 = fma(_1042, cbModelParam._m0[30u].z, fma(_1038, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1034));
        float _1387 = fma(_1042, cbModelParam._m0[31u].z, fma(_1038, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1034));
        float _1391 = fma(_1042, cbModelParam._m0[32u].z, fma(_1038, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1034));
        float _1414 = _1034 + _805;
        float _1415 = _1038 + _806;
        float _1416 = _1042 + _807;
        float _1426 = fma(_1416, cbModelParam._m0[30u].z, fma(_1415, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1414)) - _1383;
        float _1427 = fma(_1416, cbModelParam._m0[31u].z, fma(_1415, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1414)) - _1387;
        float _1428 = fma(_1416, cbModelParam._m0[32u].z, fma(_1415, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1414)) - _1391;
        float _1432 = inversesqrt(dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428)));
        float _1445 = ((_1432 * _1426) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1383 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1446 = ((_1432 * _1427) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1387 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1447 = ((_1432 * _1428) / cbModelParam._m0[35u].z) + ((((((_1391 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        float _1482 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1449.x + (-0.5));
        float _1484 = _1482 * (_1449.y + (-0.5));
        float _1485 = _1482 * (_1449.z + (-0.5));
        float _1492 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1456.x + (-0.5));
        float _1494 = _1492 * (_1456.y + (-0.5));
        float _1495 = _1492 * (_1456.z + (-0.5));
        float _1502 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1463.x + (-0.5));
        float _1504 = _1502 * (_1463.y + (-0.5));
        float _1505 = _1502 * (_1463.z + (-0.5));
        float _1512 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1470.x + (-0.5));
        float _1514 = _1512 * (_1470.y + (-0.5));
        float _1515 = _1512 * (_1470.z + (-0.5));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = _1483 * 0.5;
        float _1520 = _1493 * 0.5;
        float _1521 = _1503 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_805, _806, _807), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4066 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1546 + 1.0))) + _1551) * _1516;
        float _1561 = _1484 * 0.5;
        float _1562 = _1494 * 0.5;
        float _1563 = _1504 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_805, _806, _807), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4099 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1588 + 1.0))) + _1593) * _1517;
        float _1603 = _1485 * 0.5;
        float _1604 = _1495 * 0.5;
        float _1605 = _1505 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_805, _806, _807), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4132 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1630 + 1.0))) + _1635) * _1518;
        _1652 = _1485;
        _1653 = _1484;
        _1654 = _1483;
        _1655 = _1495;
        _1656 = _1494;
        _1657 = _1493;
        _1658 = _1505;
        _1659 = _1504;
        _1660 = _1503;
        _1661 = _1518;
        _1662 = _1517;
        _1663 = _1516;
        _1664 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
    }
    else
    {
        _1652 = _1344;
        _1653 = _1344;
        _1654 = _1344;
        _1655 = _1344;
        _1656 = _1344;
        _1657 = _1344;
        _1658 = _1344;
        _1659 = _1344;
        _1660 = _1344;
        _1661 = _1344;
        _1662 = _1344;
        _1663 = _1344;
        _1664 = 0.0;
        _1665 = 0.0;
        _1666 = 0.0;
    }
    float _1676 = (cbModelParam._m0[1u].x * (_1664 - _1356)) + _1356;
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1357)) + _1357;
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1358)) + _1358;
    float _1699 = fma(_1678, cbSceneParam._m0[89u].z, fma(_1677, cbSceneParam._m0[89u].y, _1676 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1678, cbSceneParam._m0[90u].z, fma(_1677, cbSceneParam._m0[90u].y, _1676 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1678, cbSceneParam._m0[91u].z, fma(_1677, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1676));
    float _1720 = _978 * 0.5;
    float _1721 = _979 * 0.5;
    float _1722 = _980 * 0.5;
    float _1723 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1726 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1729 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1652, _1655, _1658, _1661));
    float _1763;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1736 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1343, _1347, _1350, _1353));
        float _1740 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1345, _1348, _1351, _1354));
        float _1744 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1346, _1349, _1352, _1355));
        float _1751 = dot(vec4(cbModelParam._m0[39u]), vec4(_1720, _1721, _1722, 1.0));
        _1763 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1751) ? 0.0 : (isnan(0.0) ? _1751 : max(0.0, _1751))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1763 = 1.0;
    }
    float _1774;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1765 = dot(vec4(cbModelParam._m0[40u]), vec4(_1720, _1721, _1722, 1.0));
        _1774 = dot(vec3(isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1765) ? 0.0 : (isnan(0.0) ? _1765 : max(0.0, _1765))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1774 = 1.0;
    }
    float _1778 = (_1774 * cbModelParam._m0[1u].x) + (_1763 * (1.0 - cbModelParam._m0[1u].x));
    float _1788 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _808);
    float _1789 = isnan(_1788) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1788 : min(cbModelParam._m0[25u].z, _1788));
    float _1869;
    float _1871;
    float _1873;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1836 = fma(_1042, cbModelParam._m0[13u].z, fma(_1038, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1034)) + cbModelParam._m0[13u].w;
        float _1840 = fma(_1042, cbModelParam._m0[14u].z, fma(_1038, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1034)) + cbModelParam._m0[14u].w;
        float _1844 = fma(_1042, cbModelParam._m0[15u].z, fma(_1038, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1034)) + cbModelParam._m0[15u].w;
        float _1847 = fma(_980, cbModelParam._m0[13u].z, fma(_979, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978));
        float _1850 = fma(_980, cbModelParam._m0[14u].z, fma(_979, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978));
        float _1853 = fma(_980, cbModelParam._m0[15u].z, fma(_979, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978));
        float _1881;
        if (_1847 > 0.0)
        {
            _1881 = abs((1.0 - _1836) / _1847);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1836 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1881 = frontier_phi_14_12_ladder;
        }
        float _2104;
        if (_1850 > 0.0)
        {
            _2104 = abs((1.0 - _1840) / _1850);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1840 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2104 = frontier_phi_23_19_ladder;
        }
        float _2361;
        if (_1853 > 0.0)
        {
            _2361 = abs((1.0 - _1844) / _1853);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1844 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2361 = frontier_phi_35_30_ladder;
        }
        float _2363 = isnan(_2104) ? _1881 : (isnan(_1881) ? _2104 : min(_1881, _2104));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1847) + _1836;
        float _2369 = (_2364 * _1850) + _1840;
        float _2370 = (_2364 * _1853) + _1844;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2373 = (-1.0) - _2371;
        float _2375 = _2371 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2370 > _2375) || ((_2370 < _2373) || ((_2369 > _2375) || ((_2369 < _2373) || ((_2368 < _2373) || (_2368 > _2375))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2498 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2370, cbModelParam._m0[9u].z, fma(_2369, cbModelParam._m0[9u].y, _2368 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2370, cbModelParam._m0[10u].z, fma(_2369, cbModelParam._m0[10u].y, _2368 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2370, cbModelParam._m0[11u].z, fma(_2369, cbModelParam._m0[11u].y, _2368 * cbModelParam._m0[11u].x))), _1789);
            frontier_phi_13_35_ladder = _2498.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2498.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2498.x * cbModelParam._m0[1u].y;
        }
        _1869 = frontier_phi_13_35_ladder_2;
        _1871 = frontier_phi_13_35_ladder_1;
        _1873 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1857 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_978, _979, _980), _1789);
        _1869 = _1857.x * cbModelParam._m0[1u].y;
        _1871 = _1857.y * cbModelParam._m0[1u].y;
        _1873 = _1857.z * cbModelParam._m0[1u].y;
    }
    float _1877 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _808);
    float _1878 = isnan(_1877) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1877 : min(cbModelParam._m0[25u].w, _1877));
    float _1967;
    float _1969;
    float _1971;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1931 = fma(_1042, cbModelParam._m0[21u].z, fma(_1038, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1034)) + cbModelParam._m0[21u].w;
        float _1935 = fma(_1042, cbModelParam._m0[22u].z, fma(_1038, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1034)) + cbModelParam._m0[22u].w;
        float _1939 = fma(_1042, cbModelParam._m0[23u].z, fma(_1038, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1034)) + cbModelParam._m0[23u].w;
        float _1942 = fma(_980, cbModelParam._m0[21u].z, fma(_979, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978));
        float _1945 = fma(_980, cbModelParam._m0[22u].z, fma(_979, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978));
        float _1948 = fma(_980, cbModelParam._m0[23u].z, fma(_979, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978));
        float _2109;
        if (_1942 > 0.0)
        {
            _2109 = abs((1.0 - _1931) / _1942);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1931 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2109 = frontier_phi_25_21_ladder;
        }
        float _2388;
        if (_1945 > 0.0)
        {
            _2388 = abs((1.0 - _1935) / _1945);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1935 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2388 = frontier_phi_37_32_ladder;
        }
        float _2601;
        if (_1948 > 0.0)
        {
            _2601 = abs((1.0 - _1939) / _1948);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1939 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2601 = frontier_phi_46_43_ladder;
        }
        float _2603 = isnan(_2388) ? _2109 : (isnan(_2109) ? _2388 : min(_2109, _2388));
        float _2604 = isnan(_2601) ? _2603 : (isnan(_2603) ? _2601 : min(_2603, _2601));
        float _2608 = (_2604 * _1942) + _1931;
        float _2609 = (_2604 * _1945) + _1935;
        float _2610 = (_2604 * _1948) + _1939;
        float _2611 = _2604 * 9.9999997473787516355514526367188e-05;
        float _2612 = (-1.0) - _2611;
        float _2614 = _2611 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2610 > _2614) || ((_2610 < _2612) || ((_2609 > _2614) || ((_2609 < _2612) || ((_2608 < _2612) || (_2608 > _2614))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2809 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2610, cbModelParam._m0[17u].z, fma(_2609, cbModelParam._m0[17u].y, _2608 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2610, cbModelParam._m0[18u].z, fma(_2609, cbModelParam._m0[18u].y, _2608 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2610, cbModelParam._m0[19u].z, fma(_2609, cbModelParam._m0[19u].y, _2608 * cbModelParam._m0[19u].x))), _1878);
            frontier_phi_22_46_ladder = _2809.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2809.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2809.x * cbModelParam._m0[1u].z;
        }
        _1967 = frontier_phi_22_46_ladder_2;
        _1969 = frontier_phi_22_46_ladder_1;
        _1971 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1951 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_978, _979, _980), _1878);
        _1967 = _1951.x * cbModelParam._m0[1u].z;
        _1969 = _1951.y * cbModelParam._m0[1u].z;
        _1971 = _1951.z * cbModelParam._m0[1u].z;
    }
    float _1984 = (((_1005 * _954) + _1006) * _970) * ((cbModelParam._m0[1u].w * (_1967 - _1869)) + _1869);
    float _1986 = (((_1005 * _956) + _1006) * _970) * ((cbModelParam._m0[1u].w * (_1969 - _1871)) + _1871);
    float _1988 = (((_1005 * _957) + _1006) * _970) * ((cbModelParam._m0[1u].w * (_1971 - _1873)) + _1873);
    float _1991 = fma(_1988, cbSceneParam._m0[89u].z, fma(_1986, cbSceneParam._m0[89u].y, _1984 * cbSceneParam._m0[89u].x));
    float _1994 = fma(_1988, cbSceneParam._m0[90u].z, fma(_1986, cbSceneParam._m0[90u].y, _1984 * cbSceneParam._m0[90u].x));
    float _1997 = fma(_1988, cbSceneParam._m0[91u].z, fma(_1986, cbSceneParam._m0[91u].y, _1984 * cbSceneParam._m0[91u].x));
    vec4 _2005 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_892, _893));
    float _2007 = _2005.w;
    float _2019 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2007);
    float _2020 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2007);
    float _2021 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2007);
    uvec4 _2025 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2027 = _2025.x * 14u;
    uint _2028 = _2027 + 13u;
    float _2035 = _970 + (-1.0);
    float _2040 = (cbLight._m0[_2028].x * _2035) + 1.0;
    float _2041 = (cbLight._m0[_2028].y * _2035) + 1.0;
    float _2042 = (cbLight._m0[_2028].z * _2035) + 1.0;
    float _2043 = (cbLight._m0[_2028].w * _2035) + 1.0;
    uint _2044 = _2027 + 5u;
    float _2050 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
    uint _2054 = _2027 + 4u;
    float _2063 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
    uint _2067 = _2027 | 1u;
    float _2078 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_805, _806, _807));
    float _2081 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_805, _806, _807));
    float _4268 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _4279 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2086 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.3183098733425140380859375;
    float _2088 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * 0.3183098733425140380859375;
    float _2095 = ((cbLight._m0[_2044].x * _2050) * _2088) + (((cbLight._m0[_2054].x * _2019) * _2063) * _2086);
    float _2096 = ((_2050 * cbLight._m0[_2044].y) * _2088) + (((cbLight._m0[_2054].y * _2020) * _2063) * _2086);
    float _2097 = ((_2050 * cbLight._m0[_2044].z) * _2088) + (((cbLight._m0[_2054].z * _2021) * _2063) * _2086);
    uvec4 _2101 = floatBitsToUint(cbLight._m0[_2027 + 12u]);
    bool _2103 = _2101.x == 0u;
    float _2114;
    float _2116;
    float _2118;
    if (_2103)
    {
        _2114 = _2095;
        _2116 = _2096;
        _2118 = _2097;
    }
    else
    {
        uint _2122 = _2027 + 6u;
        float _2138 = (dot(vec3(cbLight._m0[_2027 + 2u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2139 = _2138 * _2138;
        float _4290 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2141 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2114 = (((cbLight._m0[_2122].x * 0.3183098733425140380859375) * _2140) * _2141) + _2095;
        _2116 = (((cbLight._m0[_2122].y * 0.3183098733425140380859375) * _2140) * _2141) + _2096;
        _2118 = (((cbLight._m0[_2122].z * 0.3183098733425140380859375) * _2140) * _2141) + _2097;
    }
    bool _2121 = _2101.y == 0u;
    float _2159;
    float _2161;
    float _2163;
    if (_2121)
    {
        _2159 = _2114;
        _2161 = _2116;
        _2163 = _2118;
    }
    else
    {
        uint _2332 = _2027 + 7u;
        float _2348 = (dot(vec3(cbLight._m0[_2027 + 3u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2349 = _2348 * _2348;
        float _4306 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2350 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2351 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2159 = (((cbLight._m0[_2332].x * 0.3183098733425140380859375) * _2350) * _2351) + _2114;
        _2161 = (((cbLight._m0[_2332].y * 0.3183098733425140380859375) * _2350) * _2351) + _2116;
        _2163 = (((cbLight._m0[_2332].z * 0.3183098733425140380859375) * _2350) * _2351) + _2118;
    }
    uint _2166 = _2027 + 8u;
    float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _808) * 0.949999988079071044921875);
    float _2180 = _2179 * _2179;
    float _2181 = cbLight._m0[_2027].x + _884;
    float _2182 = cbLight._m0[_2027].y + _885;
    float _2183 = cbLight._m0[_2027].z + _886;
    float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
    float _2188 = _2187 * _2181;
    float _2189 = _2187 * _2182;
    float _2190 = _2187 * _2183;
    float _2191 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2027].xyz));
    float _4322 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _4333 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _2195 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2196 = dot(vec3(_805, _806, _807), vec3(_2188, _2189, _2190));
    float _4344 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2200 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2188, _2189, _2190));
    float _4355 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2204 = _2180 * _2180;
    float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
    float _2216 = exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0);
    float _2217 = 0.959999978542327880859375 - _951;
    float _2219 = 0.959999978542327880859375 - _952;
    float _2220 = 0.959999978542327880859375 - _953;
    float _2227 = 1.0 - _2180;
    float _2238 = (0.5 / (((_2195 * ((_2194 * _2227) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2227) + _2180) * _2194))) * _2194;
    float _4366 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
    uint _2254 = _2027 + 9u;
    float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _808) * 0.949999988079071044921875);
    float _2266 = _2265 * _2265;
    float _2267 = cbLight._m0[_2067].x + _884;
    float _2268 = cbLight._m0[_2067].y + _885;
    float _2269 = cbLight._m0[_2067].z + _886;
    float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
    float _2274 = _2273 * _2267;
    float _2275 = _2273 * _2268;
    float _2276 = _2273 * _2269;
    float _2277 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2067].xyz));
    float _4377 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2281 = dot(vec3(_805, _806, _807), vec3(_2274, _2275, _2276));
    float _4388 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _2285 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2274, _2275, _2276));
    float _4399 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2289 = _2266 * _2266;
    float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
    float _2300 = exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0);
    float _2307 = 1.0 - _2266;
    float _2317 = (0.5 / (((_2195 * ((_2280 * _2307) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2307) + _2266) * _2280))) * _2280;
    float _4410 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
    float _2329 = (((((_2300 * _2217) + _954) * cbLight._m0[_2254].x) * _2319) * _2050) + ((((cbLight._m0[_2166].x * _2019) * ((_2216 * _2217) + _954)) * _2240) * _2063);
    float _2330 = (((((_2300 * _2219) + _956) * cbLight._m0[_2254].y) * _2319) * _2050) + ((((cbLight._m0[_2166].y * _2020) * ((_2216 * _2219) + _956)) * _2240) * _2063);
    float _2331 = (((((_2300 * _2220) + _957) * cbLight._m0[_2254].z) * _2319) * _2050) + ((((cbLight._m0[_2166].z * _2021) * ((_2216 * _2220) + _957)) * _2240) * _2063);
    float _2393;
    float _2395;
    float _2397;
    if (_2103)
    {
        _2393 = _2329;
        _2395 = _2330;
        _2397 = _2331;
    }
    else
    {
        uint _2399 = _2027 + 2u;
        uint _2403 = _2027 + 10u;
        float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2399].w)) * _808) * 0.949999988079071044921875);
        float _2418 = _2417 * _2417;
        float _2419 = cbLight._m0[_2399].x + _884;
        float _2420 = cbLight._m0[_2399].y + _885;
        float _2421 = cbLight._m0[_2399].z + _886;
        float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
        float _2426 = _2425 * _2419;
        float _2427 = _2425 * _2420;
        float _2428 = _2425 * _2421;
        float _2429 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2399].xyz));
        float _4421 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2433 = dot(vec3(_805, _806, _807), vec3(_2426, _2427, _2428));
        float _4432 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2437 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_2426, _2427, _2428));
        float _4443 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2441 = _2418 * _2418;
        float _2445 = ((_2436 * _2436) * (_2441 + (-1.0))) + 1.0;
        float _2452 = exp2(log2(1.0 - (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) * 5.0);
        float _2459 = 1.0 - _2418;
        float _2469 = (0.5 / (((_2195 * ((_2432 * _2459) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2459) + _2418) * _2432))) * _2432;
        float _4454 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2471 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2441 / ((_2445 * _2445) * 3.141590118408203125));
        float _2472 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2393 = (((((_2452 * _2217) + _954) * cbLight._m0[_2403].x) * _2471) * _2472) + _2329;
        _2395 = (((((_2452 * _2219) + _956) * cbLight._m0[_2403].y) * _2471) * _2472) + _2330;
        _2397 = (((((_2452 * _2220) + _957) * cbLight._m0[_2403].z) * _2471) * _2472) + _2331;
    }
    float _2507;
    float _2509;
    float _2511;
    if (_2121)
    {
        _2507 = _2393;
        _2509 = _2395;
        _2511 = _2397;
    }
    else
    {
        uint _2518 = _2027 + 3u;
        uint _2522 = _2027 + 11u;
        float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2518].w)) * _808) * 0.949999988079071044921875);
        float _2537 = _2536 * _2536;
        float _2538 = cbLight._m0[_2518].x + _884;
        float _2539 = cbLight._m0[_2518].y + _885;
        float _2540 = cbLight._m0[_2518].z + _886;
        float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
        float _2545 = _2544 * _2538;
        float _2546 = _2544 * _2539;
        float _2547 = _2544 * _2540;
        float _2548 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2518].xyz));
        float _4470 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2552 = dot(vec3(_805, _806, _807), vec3(_2545, _2546, _2547));
        float _4481 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2556 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_2545, _2546, _2547));
        float _4492 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2560 = _2537 * _2537;
        float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
        float _2571 = exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0);
        float _2578 = 1.0 - _2537;
        float _2588 = (0.5 / (((_2195 * ((_2551 * _2578) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2578) + _2537) * _2551))) * _2551;
        float _4503 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2590 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
        float _2591 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2507 = (((((_2571 * _2217) + _954) * cbLight._m0[_2522].x) * _2590) * _2591) + _2393;
        _2509 = (((((_2571 * _2219) + _956) * cbLight._m0[_2522].y) * _2590) * _2591) + _2395;
        _2511 = (((((_2571 * _2220) + _957) * cbLight._m0[_2522].z) * _2590) * _2591) + _2397;
    }
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    if (_2025.y == 0u)
    {
        float _2666 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2667 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2666;
        float _2668 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2666;
        float _2669 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2666;
        uvec4 _2681 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2682 = _2681.x;
        uint _2693 = uint((float(_2681.y) * floor(float(uint(cbSceneParam._m0[85u].y * _893) / _2682))) + floor(float(uint(cbSceneParam._m0[85u].x * _892) / _2682)));
        float _2703 = (log2(_2669 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2704 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        uint _2707 = uint(isnan(14.0) ? _2704 : (isnan(_2704) ? 14.0 : min(_2704, 14.0)));
        uvec4 _2712 = texelFetch(g_lightClusterGridBuffer, int(((_2707 << 2u) + (_2693 << 6u)) >> 2u));
        uint _2713 = _2712.x;
        uint _2714 = _2681.z;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        if (((((1u << ((_2714 >> 4u) & 15u)) + 4294967295u) & _2713) == 0u) || ((_2714 & 240u) == 0u))
        {
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
        }
        else
        {
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            uint _2964 = 0u;
            uint _2973;
            bool _2974;
            for (;;)
            {
                _2973 = texelFetch(g_lightClassification, int((((_2707 << 5u) + (_2693 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                _2974 = _2973 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2974)
                {
                    frontier_phi_61_pred = _2958;
                    frontier_phi_61_pred_1 = _2963;
                    frontier_phi_61_pred_2 = _2962;
                    frontier_phi_61_pred_3 = _2961;
                    frontier_phi_61_pred_4 = _2960;
                    frontier_phi_61_pred_5 = _2959;
                }
                else
                {
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    uint _3088;
                    _3082 = _2958;
                    _3083 = _2959;
                    _3084 = _2960;
                    _3085 = _2961;
                    _3086 = _2962;
                    _3087 = _2963;
                    _3088 = _2973;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    for (;;)
                    {
                        uint _3092 = uint(findLSB(_3088)) + (_2964 << 5u);
                        uint _3089 = (_3088 + 4294967295u) & _3088;
                        uint _3094 = _3092 * 48u;
                        vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3094)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 3u)).x));
                        uint _3114 = (_3092 * 48u) + 4u;
                        vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3114)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 3u)).x));
                        uint _3133 = (_3092 * 48u) + 8u;
                        vec3 _3144 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x));
                        float _3148 = _3108.x - _2667;
                        float _3149 = _3108.y - _2668;
                        float _3150 = _3108.z - _2669;
                        float _3151 = dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150));
                        float _3154 = inversesqrt(_3151);
                        float _3155 = _3154 * _3148;
                        float _3156 = _3154 * _3149;
                        float _3157 = _3154 * _3150;
                        float _3158 = dot(vec3(_911, _914, _917), vec3(_3155, _3156, _3157));
                        float _3163 = 1.0 - (_3151 * _3108.w);
                        float _4529 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3164 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3165 = sqrt(_3151) * _3127.w;
                        float _3168 = 1.39999997615814208984375 / (_3165 + 1.39999997615814208984375);
                        float _3169 = _3168 * _3168;
                        float _3172 = ((1.0 - _3169) * _3158) + _3169;
                        float _3175 = _3165 * _3165;
                        float _3179 = ((isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))) * _3164) / ((_3175 * 0.699999988079071044921875) + 1.0);
                        float _3183 = (-0.0) - _2667;
                        float _3184 = (-0.0) - _2668;
                        float _3185 = (-0.0) - _2669;
                        float _3189 = inversesqrt(dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185)));
                        float _3190 = _3189 * _3183;
                        float _3191 = _3189 * _3184;
                        float _3192 = _3189 * _3185;
                        float _3200 = exp2(log2(1.0 / ((_3175 * 3.5) + 5.0)) * 0.25);
                        float _3201 = 1.0 - _986;
                        float _3208 = sqrt(1.0 - ((1.0 - (_3201 * _3201)) * (1.0 - (_3200 * _3200))));
                        float _3209 = _3208 * _3208;
                        float _3210 = _3209 * _3209;
                        float _3211 = _3190 + _3155;
                        float _3212 = _3191 + _3156;
                        float _3213 = _3192 + _3157;
                        float _3217 = inversesqrt(dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213)));
                        float _3221 = dot(vec3(_911, _914, _917), vec3(_3190, _3191, _3192));
                        float _4545 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3224 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3225 = dot(vec3(_911, _914, _917), vec3(_3217 * _3211, _3217 * _3212, _3217 * _3213));
                        float _4556 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3228 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3232 = ((_3228 * _3228) * (_3210 + (-1.0))) + 1.0;
                        float _3233 = _3168 * _3209;
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3158) + _3234;
                        float _4567 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3238 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3239 = 1.0 - _3209;
                        float _3249 = (0.5 / (((_3238 * ((_3224 * _3239) + _3209)) + 9.9999999392252902907785028219223e-09) + (((_3238 * _3239) + _3209) * _3224))) * _3238;
                        float _4578 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3260 = (((_3210 * 3.1415927410125732421875) * (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) / ((_3232 * _3232) * ((_3175 * 2.1991131305694580078125) + 3.141590118408203125))) * _3164;
                        _3017 = (_3179 * _3127.x) + _3085;
                        _3018 = (_3179 * _3127.y) + _3086;
                        _3019 = (_3179 * _3127.z) + _3087;
                        _3014 = (_3260 * _3144.x) + _3082;
                        _3015 = (_3260 * _3144.y) + _3083;
                        _3016 = (_3260 * _3144.z) + _3084;
                        if (_3089 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3082 = _3014;
                            _3083 = _3015;
                            _3084 = _3016;
                            _3085 = _3017;
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3089;
                        }
                    }
                    frontier_phi_61_pred = _3014;
                    frontier_phi_61_pred_1 = _3019;
                    frontier_phi_61_pred_2 = _3018;
                    frontier_phi_61_pred_3 = _3017;
                    frontier_phi_61_pred_4 = _3016;
                    frontier_phi_61_pred_5 = _3015;
                }
                _2815 = frontier_phi_61_pred;
                _2825 = frontier_phi_61_pred_1;
                _2823 = frontier_phi_61_pred_2;
                _2821 = frontier_phi_61_pred_3;
                _2819 = frontier_phi_61_pred_4;
                _2817 = frontier_phi_61_pred_5;
                uint _2965 = _2964 + 1u;
                if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2958 = _2815;
                    _2959 = _2817;
                    _2960 = _2819;
                    _2961 = _2821;
                    _2962 = _2823;
                    _2963 = _2825;
                    _2964 = _2965;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
        }
        uvec4 _2828 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2829 = _2828.z;
        uint _2831 = (_2829 >> 8u) & 15u;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((4294967295u << _2831) & _2713) == 0u)
        {
            _2926 = _2814;
            _2928 = _2816;
            _2930 = _2818;
            _2932 = _2820;
            _2934 = _2822;
            _2936 = _2824;
        }
        else
        {
            float _2951 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
            float _2952 = _2951 * _2667;
            float _2953 = _2951 * _2668;
            float _2954 = _2951 * _2669;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2831 < ((_2829 >> 12u) & 15u))
            {
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _3065 = _2814;
                float _3066 = _2816;
                float _3067 = _2818;
                float _3068 = _2820;
                float _3069 = _2822;
                float _3070 = _2824;
                uint _3071 = _2831;
                uint _3080;
                bool _3081;
                for (;;)
                {
                    _3080 = texelFetch(g_lightClassification, int((((_2707 << 5u) + (_2693 << 9u)) + (_3071 << 2u)) >> 2u)).x;
                    _3081 = _3080 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3081)
                    {
                        frontier_phi_67_pred = _3068;
                        frontier_phi_67_pred_1 = _3069;
                        frontier_phi_67_pred_2 = _3070;
                        frontier_phi_67_pred_3 = _3067;
                        frontier_phi_67_pred_4 = _3066;
                        frontier_phi_67_pred_5 = _3065;
                    }
                    else
                    {
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3278 = _3065;
                        float _3279 = _3066;
                        float _3280 = _3067;
                        float _3281 = _3068;
                        float _3282 = _3069;
                        float _3283 = _3070;
                        uint _3284 = _3080;
                        uint _3285;
                        vec4 _3310;
                        float _3311;
                        vec4 _3326;
                        vec3 _3338;
                        vec4 _3353;
                        vec4 _3369;
                        float _3415;
                        bool _3416;
                        for (;;)
                        {
                            uint _3295 = ((_3071 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3284));
                            _3285 = (_3284 + 4294967295u) & _3284;
                            uint _3297 = _3295 * 40u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3311 = _3310.w;
                            uint _3313 = (_3295 * 40u) + 4u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3295 * 40u) + 8u;
                            _3338 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x));
                            uint _3340 = (_3295 * 40u) + 16u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3356 = (_3295 * 40u) + 20u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3371 = (_3295 * 40u) + 24u;
                            vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3390 = (_3295 * 40u) + 28u;
                            vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3415 = fma(_2669, _3403.z, fma(_2668, _3403.y, _3403.x * _2667)) + _3403.w;
                            _3416 = !((fma(_2669, _3384.z, fma(_2668, _3384.y, _3384.x * _2667)) + _3384.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3416)
                            {
                                float _3443 = _3310.x - _2667;
                                float _3444 = _3310.y - _2668;
                                float _3445 = _3310.z - _2669;
                                float _3446 = dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445));
                                float _3449 = inversesqrt(_3446);
                                float _3450 = _3449 * _3443;
                                float _3451 = _3449 * _3444;
                                float _3452 = _3449 * _3445;
                                float _3456 = 1.0 - (_3446 / (_3311 * _3311));
                                float _4589 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3461 = sqrt(_3446) * _3326.w;
                                float _3463 = 1.39999997615814208984375 / (_3461 + 1.39999997615814208984375);
                                float _3464 = _3463 * _3463;
                                float _3467 = ((1.0 - _3464) * dot(vec3(_3450, _3451, _3452), vec3(_911, _914, _917))) + _3464;
                                float _3470 = _3461 * _3461;
                                float _3474 = (fma(_2669, _3353.z, fma(_2668, _3353.y, _3353.x * _2667)) + _3353.w) / _3415;
                                float _3475 = (fma(_2669, _3369.z, fma(_2668, _3369.y, _3369.x * _2667)) + _3369.w) / _3415;
                                float _3479 = 1.0 - dot(vec2(_3474, _3475), vec2(_3474, _3475));
                                float _4605 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3481 = _3480 * (((isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0))) * _3457) / ((_3470 * 0.699999988079071044921875) + 1.0));
                                float _3493 = exp2(log2(1.0 / ((_3470 * 3.5) + 5.0)) * 0.25);
                                float _3494 = 1.0 - _986;
                                float _3501 = sqrt(1.0 - ((1.0 - (_3494 * _3494)) * (1.0 - (_3493 * _3493))));
                                float _3502 = _3501 * _3501;
                                float _3503 = _3502 * _3502;
                                float _3504 = _3450 - _2952;
                                float _3505 = _3451 - _2953;
                                float _3506 = _3452 - _2954;
                                float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                                float _3514 = dot(vec3(_911, _914, _917), vec3((-0.0) - _2952, (-0.0) - _2953, (-0.0) - _2954));
                                float _4616 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3517 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3518 = dot(vec3(_911, _914, _917), vec3(_3510 * _3504, _3510 * _3505, _3510 * _3506));
                                float _4627 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3521 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3525 = ((_3521 * _3521) * (_3503 + (-1.0))) + 1.0;
                                float _3526 = _3463 * _3502;
                                float _3527 = _3526 * _3526;
                                float _3533 = ((1.0 - _3527) * dot(vec3(_911, _914, _917), vec3(_3450, _3451, _3452))) + _3527;
                                float _4638 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3534 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3535 = 1.0 - _3502;
                                float _3545 = (0.5 / (((_3534 * ((_3517 * _3535) + _3502)) + 9.9999999392252902907785028219223e-09) + (((_3534 * _3535) + _3502) * _3517))) * _3534;
                                float _4649 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3555 = (_3480 * _3457) * (((_3503 * 3.1415927410125732421875) * (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) / ((_3525 * _3525) * ((_3470 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3555 * _3338.x;
                                frontier_phi_73_pred_1 = _3555 * _3338.y;
                                frontier_phi_73_pred_2 = _3481 * _3326.z;
                                frontier_phi_73_pred_3 = _3481 * _3326.y;
                                frontier_phi_73_pred_4 = _3481 * _3326.x;
                                frontier_phi_73_pred_5 = _3555 * _3338.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3559 = frontier_phi_73_pred;
                            _3560 = frontier_phi_73_pred_1;
                            _3564 = frontier_phi_73_pred_2;
                            _3563 = frontier_phi_73_pred_3;
                            _3562 = frontier_phi_73_pred_4;
                            _3561 = frontier_phi_73_pred_5;
                            _3268 = _3562 + _3281;
                            _3269 = _3563 + _3282;
                            _3270 = _3564 + _3283;
                            _3265 = _3559 + _3278;
                            _3266 = _3560 + _3279;
                            _3267 = _3561 + _3280;
                            if (_3285 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3285;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3268;
                        frontier_phi_67_pred_1 = _3269;
                        frontier_phi_67_pred_2 = _3270;
                        frontier_phi_67_pred_3 = _3267;
                        frontier_phi_67_pred_4 = _3266;
                        frontier_phi_67_pred_5 = _3265;
                    }
                    _2933 = frontier_phi_67_pred;
                    _2935 = frontier_phi_67_pred_1;
                    _2937 = frontier_phi_67_pred_2;
                    _2931 = frontier_phi_67_pred_3;
                    _2929 = frontier_phi_67_pred_4;
                    _2927 = frontier_phi_67_pred_5;
                    uint _3072 = _3071 + 1u;
                    if (_3072 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3065 = _2927;
                        _3066 = _2929;
                        _3067 = _2931;
                        _3068 = _2933;
                        _3069 = _2935;
                        _3070 = _2937;
                        _3071 = _3072;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2935;
                frontier_phi_55_56_ladder_1 = _2937;
                frontier_phi_55_56_ladder_2 = _2933;
                frontier_phi_55_56_ladder_3 = _2931;
                frontier_phi_55_56_ladder_4 = _2929;
                frontier_phi_55_56_ladder_5 = _2927;
            }
            else
            {
                frontier_phi_55_56_ladder = _2822;
                frontier_phi_55_56_ladder_1 = _2824;
                frontier_phi_55_56_ladder_2 = _2820;
                frontier_phi_55_56_ladder_3 = _2818;
                frontier_phi_55_56_ladder_4 = _2816;
                frontier_phi_55_56_ladder_5 = _2814;
            }
            _2926 = frontier_phi_55_56_ladder_5;
            _2928 = frontier_phi_55_56_ladder_4;
            _2930 = frontier_phi_55_56_ladder_3;
            _2932 = frontier_phi_55_56_ladder_2;
            _2934 = frontier_phi_55_56_ladder;
            _2936 = frontier_phi_55_56_ladder_1;
        }
        float _2941 = isnan(1.0) ? _970 : (isnan(_970) ? 1.0 : min(_970, 1.0));
        _2726 = (_2941 * _2932) + _2159;
        _2728 = (_2941 * _2934) + _2161;
        _2730 = (_2941 * _2936) + _2163;
        _2732 = ((_2926 * _954) * _2941) + _2507;
        _2734 = ((_2928 * _956) * _2941) + _2509;
        _2736 = ((_2930 * _957) * _2941) + _2511;
    }
    else
    {
        _2726 = _2159;
        _2728 = _2161;
        _2730 = _2163;
        _2732 = _2507;
        _2734 = _2509;
        _2736 = _2511;
    }
    float _4665 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4676 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _4687 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    uint _2756 = _253 + 6u;
    float _2764 = _892 / cbSceneParam._m0[86u].x;
    float _2765 = _893 / cbSceneParam._m0[86u].y;
    vec4 _2779 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2764, _2765, (log2((isnan(cbSceneParam._m0[77u].w) ? _827 : (isnan(_827) ? cbSceneParam._m0[77u].w : min(_827, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2781 = _2779.x;
    float _2782 = _2779.y;
    float _2783 = _2779.z;
    float _2784 = _2779.w;
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    if (_827 > cbSceneParam._m0[78u].w)
    {
        float _2839 = isnan(_827) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _827 : min(cbSceneParam._m0[80u].w, _827));
        float _2840 = _2839 / _827;
        float _2851 = _2840 * _877;
        float _2852 = _878 * _2840;
        float _2853 = (-0.0) - _2852;
        float _2854 = _2840 * _879;
        float _2856 = (cbSceneParam._m0[77u].w * _2853) / _2839;
        float _2857 = _2856 + cbSceneParam._m0[79u].w;
        float _2858 = cbSceneParam._m0[79u].w - _2852;
        float _2864 = sqrt(((_2851 * _2851) + (_2852 * _2852)) + (_2854 * _2854));
        float _2867 = (1.0 - (cbSceneParam._m0[77u].w / _2839)) * _2864;
        float _2872 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2874 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3027;
        if (abs((_2853 - _2856) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3027 = ((((_2857 > 0.0) ? exp2(_2872 * _2857) : (2.0 - exp2(_2874 * _2857))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2867;
        }
        else
        {
            float _2987 = 1.0 / cbSceneParam._m0[80u].x;
            float _2988 = isnan(_2858) ? _2857 : (isnan(_2857) ? _2858 : max(_2857, _2858));
            float _2989 = isnan(_2858) ? _2857 : (isnan(_2857) ? _2858 : min(_2857, _2858));
            float _2998 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : min(_2988, 0.0));
            float _2999 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : min(_2989, 0.0));
            _3027 = ((abs(_2864 / _2853) * cbSceneParam._m0[80u].y) * ((((_2998 - _2999) * 2.0) - ((exp2(_2872 * (isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0)))) - exp2(_2872 * (isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))))) * _2987)) - ((exp2(_2874 * _2998) - exp2(_2874 * _2999)) * _2987))) + (_2867 * cbSceneParam._m0[80u].z);
        }
        vec4 _3029 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2764, _2765, 1.0), 0.0);
        float _3038 = exp2((_3027 * (-1.44269502162933349609375)) * (1.0 - _3029.w));
        float _3039 = log2(_3038);
        float _3055 = log2(_2784);
        _2876 = (exp2(_3055 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].x)) * _3029.x) / cbSceneParam._m0[78u].x)) + _2781;
        _2878 = (exp2(_3055 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].y)) * _3029.y) / cbSceneParam._m0[78u].y)) + _2782;
        _2880 = (exp2(_3055 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].z)) * _3029.z) / cbSceneParam._m0[78u].z)) + _2783;
        _2882 = _3038 * _2784;
    }
    else
    {
        _2876 = _2781;
        _2878 = _2782;
        _2880 = _2783;
        _2882 = _2784;
    }
    float _2894 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2895 = _2894 == 3.0;
    float _2896 = log2(_2882);
    float _2903 = exp2(_2896 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2726 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _970))) + ((_2732 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1778)) * cbPerFrame._m0[3u].x));
    float _2904 = exp2(_2896 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2728 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _970))) + ((_2734 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1778)) * cbPerFrame._m0[3u].x));
    float _2905 = exp2(_2896 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2730 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _970))) + ((_2736 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1778)) * cbPerFrame._m0[3u].x));
    float _2914 = (_2894 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2914 * (_2895 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2876)));
    SV_Target.y = _2914 * (_2895 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2878)));
    SV_Target.z = _2914 * (_2895 ? _2905 : (_2905 + (cbSceneParam._m0[72u].w * _2880)));
    SV_Target.w = cbInstanceData._m0[_2756].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2756].w;
}


