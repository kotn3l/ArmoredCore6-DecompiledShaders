#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1141;
float _3548;
float _3549;
float _3550;
float _3551;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _360 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _360) * cbMtdParam._m0[24u].y) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3560 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _385 = (_378 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _386 = (_378 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _387 = (_378 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _442 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _444 = _442.x;
    float _445 = _442.y;
    float _446 = _442.z;
    float _455 = ((_425.z - _446) * _378) + _446;
    float _458 = ((((_425.x - _444) * _378) + _444) * 2.0) + (-1.0);
    float _459 = ((((_425.y - _445) * _378) + _445) * 2.0) + (-1.0);
    float _460 = dot(vec2(_458, _459), vec2(_458, _459));
    float _3571 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _465 = sqrt(1.0 - (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))));
    float _470 = _458 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_400.x * 2.0) + (-1.0)));
    float _471 = _459 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_400.y * 2.0) + (-1.0)));
    vec4 _484 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _514 = _512.x;
    float _532 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _514) * _378) + _514;
    float _536 = ((_498.x - _532) * cbMtdParam._m0[19u].z) + _532;
    float _541 = (((_400.z - _455) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _455;
    float _546 = cbMtdParam._m0[22u].x + _484.w;
    float _549 = fma(_465, _227 * NORMAL.x, fma(_471, _234 * TANGENT.x, (_220 * _212) * _470));
    float _552 = fma(_465, _227 * NORMAL.y, fma(_471, _234 * TANGENT.y, (_220 * _213) * _470));
    float _555 = fma(_465, _227 * NORMAL.z, fma(_471, _234 * TANGENT.z, (_220 * _214) * _470));
    float _559 = inversesqrt(dot(vec3(_549, _552, _555), vec3(_549, _552, _555)));
    float _560 = _559 * _549;
    float _561 = _559 * _552;
    float _562 = _559 * _555;
    float _3582 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _563 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _3593 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3604 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3615 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3626 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3637 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _568 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _582 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _633 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _623);
    float _634 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _623);
    float _635 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _623);
    float _639 = inversesqrt(dot(vec3(_633, _634, _635), vec3(_633, _634, _635)));
    float _640 = _633 * _639;
    float _641 = _634 * _639;
    float _642 = _635 * _639;
    vec4 _647 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _649 = _647.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _821 = sqrt(((_633 * _633) + (_634 * _634)) + (_635 * _635));
        float _827 = (cbMatDynParam._m0[5u].x * _821) + cbMatDynParam._m0[5u].y;
        float _3648 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _832 = (cbMatDynParam._m0[5u].z * _821) + cbMatDynParam._m0[5u].w;
        float _3659 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) - _828)) + _828) < ((_649 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _660 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _661 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _679 = fma(_562, cbSceneParam._m0[5u].z, fma(_561, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _560));
    float _682 = fma(_562, cbSceneParam._m0[6u].z, fma(_561, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _560));
    float _685 = fma(_562, cbSceneParam._m0[7u].z, fma(_561, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _560));
    uint _698 = _240 + 9u;
    uint _699 = _698 + uint(cbMatDynParam._m0[0u].w);
    float _705 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_699].x;
    float _706 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * cbInstanceData._m0[_699].y;
    float _707 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) * cbInstanceData._m0[_699].z;
    float _3670 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _3692 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _711 = 1.0 - _568;
    float _712 = _708 * _711;
    float _713 = _709 * _711;
    float _714 = _710 * _711;
    float _719 = (_708 + (-0.039999999105930328369140625)) * _568;
    float _720 = (_709 + (-0.039999999105930328369140625)) * _568;
    float _721 = (_710 + (-0.039999999105930328369140625)) * _568;
    float _722 = _719 + 0.039999999105930328369140625;
    float _724 = _720 + 0.039999999105930328369140625;
    float _725 = _721 + 0.039999999105930328369140625;
    vec4 _734 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661));
    float _738 = ((isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * TEXCOORD_5.w) * _734.x;
    float _739 = dot(vec3(_560, _561, _562), vec3(_640, _641, _642));
    float _742 = _739 * 2.0;
    float _746 = (_742 * _560) - _640;
    float _747 = (_742 * _561) - _641;
    float _748 = (_742 * _562) - _642;
    float _752 = abs(dot(vec3(_640, _641, _642), vec3(_560, _561, _562)));
    float _3703 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _754 = sqrt(_563);
    float _767 = exp2((_754 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_754 * 3.0));
    float _773 = (1.0 - _767) * ((_754 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _774 = _767 * _754;
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1140;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _865 = fma(_810, cbModelParam._m0[26u].z, fma(_806, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802));
        float _869 = fma(_810, cbModelParam._m0[27u].z, fma(_806, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802));
        float _873 = fma(_810, cbModelParam._m0[28u].z, fma(_806, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802));
        float _898 = _802 + _560;
        float _899 = _806 + _561;
        float _900 = _810 + _562;
        float _910 = fma(_900, cbModelParam._m0[26u].z, fma(_899, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _898)) - _865;
        float _911 = fma(_900, cbModelParam._m0[27u].z, fma(_899, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _898)) - _869;
        float _912 = fma(_900, cbModelParam._m0[28u].z, fma(_899, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _898)) - _873;
        float _916 = inversesqrt(dot(vec3(_910, _911, _912), vec3(_910, _911, _912)));
        float _929 = ((_916 * _910) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_865 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_916 * _911) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_869 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_916 * _912) / cbModelParam._m0[34u].z) + ((((((_873 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        float _968 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_934.x + (-0.5));
        float _970 = _968 * (_934.y + (-0.5));
        float _971 = _968 * (_934.z + (-0.5));
        float _978 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_941.x + (-0.5));
        float _980 = _978 * (_941.y + (-0.5));
        float _981 = _978 * (_941.z + (-0.5));
        float _988 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_948.x + (-0.5));
        float _990 = _988 * (_948.y + (-0.5));
        float _991 = _988 * (_948.z + (-0.5));
        float _998 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_955.x + (-0.5));
        float _1000 = _998 * (_955.y + (-0.5));
        float _1001 = _998 * (_955.z + (-0.5));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = _969 * 0.5;
        float _1006 = _979 * 0.5;
        float _1007 = _989 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1022 = (dot(vec3(_560, _561, _562), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1032 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3751 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1034 + 1.0))) + _1039) * _1002;
        float _1049 = _970 * 0.5;
        float _1050 = _980 * 0.5;
        float _1051 = _990 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1065 = (dot(vec3(_560, _561, _562), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1074 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _3784 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1076 + 1.0))) + _1081) * _1003;
        float _1091 = _971 * 0.5;
        float _1092 = _981 * 0.5;
        float _1093 = _991 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_560, _561, _562), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3817 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1118 + 1.0))) + _1123) * _1004;
        _1140 = _971;
        _1142 = _970;
        _1143 = _969;
        _1144 = _981;
        _1145 = _980;
        _1146 = _979;
        _1147 = _991;
        _1148 = _990;
        _1149 = _989;
        _1150 = _1004;
        _1151 = _1003;
        _1152 = _1002;
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
    }
    else
    {
        _1140 = _1141;
        _1142 = _1141;
        _1143 = _1141;
        _1144 = _1141;
        _1145 = _1141;
        _1146 = _1141;
        _1147 = _1141;
        _1148 = _1141;
        _1149 = _1141;
        _1150 = _1141;
        _1151 = _1141;
        _1152 = _1141;
        _1153 = 0.0;
        _1154 = 0.0;
        _1155 = 0.0;
    }
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1183 = fma(_810, cbModelParam._m0[30u].z, fma(_806, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _802));
        float _1187 = fma(_810, cbModelParam._m0[31u].z, fma(_806, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _802));
        float _1191 = fma(_810, cbModelParam._m0[32u].z, fma(_806, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _802));
        float _1214 = _802 + _560;
        float _1215 = _806 + _561;
        float _1216 = _810 + _562;
        float _1226 = fma(_1216, cbModelParam._m0[30u].z, fma(_1215, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1214)) - _1183;
        float _1227 = fma(_1216, cbModelParam._m0[31u].z, fma(_1215, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1214)) - _1187;
        float _1228 = fma(_1216, cbModelParam._m0[32u].z, fma(_1215, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1214)) - _1191;
        float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
        float _1245 = ((_1232 * _1226) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1183 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1232 * _1227) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1187 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1232 * _1228) / cbModelParam._m0[35u].z) + ((((((_1191 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        float _1282 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1249.x + (-0.5));
        float _1284 = _1282 * (_1249.y + (-0.5));
        float _1285 = _1282 * (_1249.z + (-0.5));
        float _1292 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1256.x + (-0.5));
        float _1294 = _1292 * (_1256.y + (-0.5));
        float _1295 = _1292 * (_1256.z + (-0.5));
        float _1302 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1263.x + (-0.5));
        float _1304 = _1302 * (_1263.y + (-0.5));
        float _1305 = _1302 * (_1263.z + (-0.5));
        float _1312 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1270.x + (-0.5));
        float _1314 = _1312 * (_1270.y + (-0.5));
        float _1315 = _1312 * (_1270.z + (-0.5));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = _1283 * 0.5;
        float _1320 = _1293 * 0.5;
        float _1321 = _1303 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_560, _561, _562), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3880 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1346 + 1.0))) + _1351) * _1316;
        float _1361 = _1284 * 0.5;
        float _1362 = _1294 * 0.5;
        float _1363 = _1304 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_560, _561, _562), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3913 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1388 + 1.0))) + _1393) * _1317;
        float _1403 = _1285 * 0.5;
        float _1404 = _1295 * 0.5;
        float _1405 = _1305 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_560, _561, _562), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3946 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1430 + 1.0))) + _1435) * _1318;
        _1452 = _1285;
        _1453 = _1284;
        _1454 = _1283;
        _1455 = _1295;
        _1456 = _1294;
        _1457 = _1293;
        _1458 = _1305;
        _1459 = _1304;
        _1460 = _1303;
        _1461 = _1318;
        _1462 = _1317;
        _1463 = _1316;
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1466 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
    }
    else
    {
        _1452 = _1141;
        _1453 = _1141;
        _1454 = _1141;
        _1455 = _1141;
        _1456 = _1141;
        _1457 = _1141;
        _1458 = _1141;
        _1459 = _1141;
        _1460 = _1141;
        _1461 = _1141;
        _1462 = _1141;
        _1463 = _1141;
        _1464 = 0.0;
        _1465 = 0.0;
        _1466 = 0.0;
    }
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1153)) + _1153;
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1154)) + _1154;
    float _1478 = (cbModelParam._m0[1u].x * (_1466 - _1155)) + _1155;
    float _1499 = fma(_1478, cbSceneParam._m0[89u].z, fma(_1477, cbSceneParam._m0[89u].y, _1476 * cbSceneParam._m0[89u].x));
    float _1502 = fma(_1478, cbSceneParam._m0[90u].z, fma(_1477, cbSceneParam._m0[90u].y, _1476 * cbSceneParam._m0[90u].x));
    float _1505 = fma(_1478, cbSceneParam._m0[91u].z, fma(_1477, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1476));
    float _1520 = _746 * 0.5;
    float _1521 = _747 * 0.5;
    float _1522 = _748 * 0.5;
    float _1523 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1454, _1457, _1460, _1463));
    float _1526 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1529 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1563;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1536 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1140, _1144, _1147, _1150));
        float _1540 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1142, _1145, _1148, _1151));
        float _1544 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1143, _1146, _1149, _1152));
        float _1551 = dot(vec4(cbModelParam._m0[39u]), vec4(_1520, _1521, _1522, 1.0));
        _1563 = dot(vec3(isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1551) ? 0.0 : (isnan(0.0) ? _1551 : max(0.0, _1551))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1563 = 1.0;
    }
    float _1574;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1565 = dot(vec4(cbModelParam._m0[40u]), vec4(_1520, _1521, _1522, 1.0));
        _1574 = dot(vec3(isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1565) ? 0.0 : (isnan(0.0) ? _1565 : max(0.0, _1565))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1574 = 1.0;
    }
    float _1578 = (_1574 * cbModelParam._m0[1u].x) + (_1563 * (1.0 - cbModelParam._m0[1u].x));
    float _1588 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _563);
    float _1589 = isnan(_1588) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1588 : min(cbModelParam._m0[25u].z, _1588));
    float _1671;
    float _1673;
    float _1675;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1638 = fma(_810, cbModelParam._m0[13u].z, fma(_806, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _802)) + cbModelParam._m0[13u].w;
        float _1642 = fma(_810, cbModelParam._m0[14u].z, fma(_806, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _802)) + cbModelParam._m0[14u].w;
        float _1646 = fma(_810, cbModelParam._m0[15u].z, fma(_806, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _802)) + cbModelParam._m0[15u].w;
        float _1649 = fma(_748, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746));
        float _1652 = fma(_748, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746));
        float _1655 = fma(_748, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746));
        float _1683;
        if (_1649 > 0.0)
        {
            _1683 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1683 = frontier_phi_17_15_ladder;
        }
        float _1908;
        if (_1652 > 0.0)
        {
            _1908 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1908 = frontier_phi_26_22_ladder;
        }
        float _2165;
        if (_1655 > 0.0)
        {
            _2165 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2165 = frontier_phi_38_33_ladder;
        }
        float _2167 = isnan(_1908) ? _1683 : (isnan(_1683) ? _1908 : min(_1683, _1908));
        float _2168 = isnan(_2165) ? _2167 : (isnan(_2167) ? _2165 : min(_2167, _2165));
        float _2172 = (_2168 * _1649) + _1638;
        float _2173 = (_2168 * _1652) + _1642;
        float _2174 = (_2168 * _1655) + _1646;
        float _2175 = _2168 * 9.9999997473787516355514526367188e-05;
        float _2177 = (-1.0) - _2175;
        float _2179 = _2175 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2174 > _2179) || ((_2174 < _2177) || ((_2173 > _2179) || ((_2173 < _2177) || ((_2172 < _2177) || (_2172 > _2179))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2302 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2174, cbModelParam._m0[9u].z, fma(_2173, cbModelParam._m0[9u].y, _2172 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2174, cbModelParam._m0[10u].z, fma(_2173, cbModelParam._m0[10u].y, _2172 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2174, cbModelParam._m0[11u].z, fma(_2173, cbModelParam._m0[11u].y, _2172 * cbModelParam._m0[11u].x))), _1589);
            frontier_phi_16_38_ladder = _2302.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2302.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2302.x * cbModelParam._m0[1u].y;
        }
        _1671 = frontier_phi_16_38_ladder_2;
        _1673 = frontier_phi_16_38_ladder_1;
        _1675 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_746, _747, _748), _1589);
        _1671 = _1659.x * cbModelParam._m0[1u].y;
        _1673 = _1659.y * cbModelParam._m0[1u].y;
        _1675 = _1659.z * cbModelParam._m0[1u].y;
    }
    float _1679 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _563);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1679 : min(cbModelParam._m0[25u].w, _1679));
    float _1771;
    float _1773;
    float _1775;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1735 = fma(_810, cbModelParam._m0[21u].z, fma(_806, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _802)) + cbModelParam._m0[21u].w;
        float _1739 = fma(_810, cbModelParam._m0[22u].z, fma(_806, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _802)) + cbModelParam._m0[22u].w;
        float _1743 = fma(_810, cbModelParam._m0[23u].z, fma(_806, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _802)) + cbModelParam._m0[23u].w;
        float _1746 = fma(_748, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746));
        float _1749 = fma(_748, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746));
        float _1752 = fma(_748, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746));
        float _1913;
        if (_1746 > 0.0)
        {
            _1913 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1913 = frontier_phi_28_24_ladder;
        }
        float _2192;
        if (_1749 > 0.0)
        {
            _2192 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2192 = frontier_phi_40_35_ladder;
        }
        float _2405;
        if (_1752 > 0.0)
        {
            _2405 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2405 = frontier_phi_49_46_ladder;
        }
        float _2407 = isnan(_2192) ? _1913 : (isnan(_1913) ? _2192 : min(_1913, _2192));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1746) + _1735;
        float _2413 = (_2408 * _1749) + _1739;
        float _2414 = (_2408 * _1752) + _1743;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2416 = (-1.0) - _2415;
        float _2418 = _2415 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2414 > _2418) || ((_2414 < _2416) || ((_2413 > _2418) || ((_2413 < _2416) || ((_2412 < _2416) || (_2412 > _2418))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2613 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2414, cbModelParam._m0[17u].z, fma(_2413, cbModelParam._m0[17u].y, _2412 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2414, cbModelParam._m0[18u].z, fma(_2413, cbModelParam._m0[18u].y, _2412 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2414, cbModelParam._m0[19u].z, fma(_2413, cbModelParam._m0[19u].y, _2412 * cbModelParam._m0[19u].x))), _1680);
            frontier_phi_25_49_ladder = _2613.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2613.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2613.x * cbModelParam._m0[1u].z;
        }
        _1771 = frontier_phi_25_49_ladder_2;
        _1773 = frontier_phi_25_49_ladder_1;
        _1775 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_746, _747, _748), _1680);
        _1771 = _1755.x * cbModelParam._m0[1u].z;
        _1773 = _1755.y * cbModelParam._m0[1u].z;
        _1775 = _1755.z * cbModelParam._m0[1u].z;
    }
    float _1788 = (((_773 * _722) + _774) * _738) * ((cbModelParam._m0[1u].w * (_1771 - _1671)) + _1671);
    float _1790 = (((_773 * _724) + _774) * _738) * ((cbModelParam._m0[1u].w * (_1773 - _1673)) + _1673);
    float _1792 = (((_773 * _725) + _774) * _738) * ((cbModelParam._m0[1u].w * (_1775 - _1675)) + _1675);
    float _1795 = fma(_1792, cbSceneParam._m0[89u].z, fma(_1790, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1798 = fma(_1792, cbSceneParam._m0[90u].z, fma(_1790, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1801 = fma(_1792, cbSceneParam._m0[91u].z, fma(_1790, cbSceneParam._m0[91u].y, _1788 * cbSceneParam._m0[91u].x));
    vec4 _1809 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_660, _661));
    float _1811 = _1809.w;
    float _1823 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1811);
    float _1824 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1811);
    float _1825 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1811);
    uvec4 _1829 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1831 = _1829.x * 14u;
    uint _1832 = _1831 + 13u;
    float _1839 = _738 + (-1.0);
    float _1844 = (cbLight._m0[_1832].x * _1839) + 1.0;
    float _1845 = (cbLight._m0[_1832].y * _1839) + 1.0;
    float _1846 = (cbLight._m0[_1832].z * _1839) + 1.0;
    float _1847 = (cbLight._m0[_1832].w * _1839) + 1.0;
    uint _1848 = _1831 + 5u;
    float _1854 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
    uint _1858 = _1831 + 4u;
    float _1867 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
    uint _1871 = _1831 | 1u;
    float _1882 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_560, _561, _562));
    float _1885 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_560, _561, _562));
    float _4082 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _4093 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1890 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * 0.3183098733425140380859375;
    float _1892 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.3183098733425140380859375;
    float _1899 = ((cbLight._m0[_1848].x * _1854) * _1892) + (((cbLight._m0[_1858].x * _1823) * _1867) * _1890);
    float _1900 = ((_1854 * cbLight._m0[_1848].y) * _1892) + (((cbLight._m0[_1858].y * _1824) * _1867) * _1890);
    float _1901 = ((_1854 * cbLight._m0[_1848].z) * _1892) + (((cbLight._m0[_1858].z * _1825) * _1867) * _1890);
    uvec4 _1905 = floatBitsToUint(cbLight._m0[_1831 + 12u]);
    bool _1907 = _1905.x == 0u;
    float _1918;
    float _1920;
    float _1922;
    if (_1907)
    {
        _1918 = _1899;
        _1920 = _1900;
        _1922 = _1901;
    }
    else
    {
        uint _1926 = _1831 + 6u;
        float _1942 = (dot(vec3(cbLight._m0[_1831 + 2u].xyz), vec3(_560, _561, _562)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _4104 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1945 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _1918 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1899;
        _1920 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1900;
        _1922 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1901;
    }
    bool _1925 = _1905.y == 0u;
    float _1963;
    float _1965;
    float _1967;
    if (_1925)
    {
        _1963 = _1918;
        _1965 = _1920;
        _1967 = _1922;
    }
    else
    {
        uint _2136 = _1831 + 7u;
        float _2152 = (dot(vec3(cbLight._m0[_1831 + 3u].xyz), vec3(_560, _561, _562)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _4120 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2155 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _1963 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _1918;
        _1965 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _1920;
        _1967 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _1922;
    }
    uint _1970 = _1831 + 8u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1831].w)) * _563) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1831].x + _640;
    float _1986 = cbLight._m0[_1831].y + _641;
    float _1987 = cbLight._m0[_1831].z + _642;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_1831].xyz));
    float _4136 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _4147 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _1999 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _2000 = dot(vec3(_560, _561, _562), vec3(_1992, _1993, _1994));
    float _4158 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _2004 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_1992, _1993, _1994));
    float _4169 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2008 = _1984 * _1984;
    float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
    float _2020 = exp2(log2(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * 5.0);
    float _2021 = 0.959999978542327880859375 - _719;
    float _2023 = 0.959999978542327880859375 - _720;
    float _2024 = 0.959999978542327880859375 - _721;
    float _2031 = 1.0 - _1984;
    float _2042 = (0.5 / (((_1999 * ((_1998 * _2031) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2031) + _1984) * _1998))) * _1998;
    float _4180 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
    uint _2058 = _1831 + 9u;
    float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _563) * 0.949999988079071044921875);
    float _2070 = _2069 * _2069;
    float _2071 = cbLight._m0[_1871].x + _640;
    float _2072 = cbLight._m0[_1871].y + _641;
    float _2073 = cbLight._m0[_1871].z + _642;
    float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
    float _2078 = _2077 * _2071;
    float _2079 = _2077 * _2072;
    float _2080 = _2077 * _2073;
    float _2081 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_1871].xyz));
    float _4191 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _2085 = dot(vec3(_560, _561, _562), vec3(_2078, _2079, _2080));
    float _4202 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2078, _2079, _2080));
    float _4213 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2070 * _2070;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2104 = exp2(log2(1.0 - (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * 5.0);
    float _2111 = 1.0 - _2070;
    float _2121 = (0.5 / (((_1999 * ((_2084 * _2111) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2111) + _2070) * _2084))) * _2084;
    float _4224 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2123 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    float _2133 = (((((_2104 * _2021) + _722) * cbLight._m0[_2058].x) * _2123) * _1854) + ((((cbLight._m0[_1970].x * _1823) * ((_2020 * _2021) + _722)) * _2044) * _1867);
    float _2134 = (((((_2104 * _2023) + _724) * cbLight._m0[_2058].y) * _2123) * _1854) + ((((cbLight._m0[_1970].y * _1824) * ((_2020 * _2023) + _724)) * _2044) * _1867);
    float _2135 = (((((_2104 * _2024) + _725) * cbLight._m0[_2058].z) * _2123) * _1854) + ((((cbLight._m0[_1970].z * _1825) * ((_2020 * _2024) + _725)) * _2044) * _1867);
    float _2197;
    float _2199;
    float _2201;
    if (_1907)
    {
        _2197 = _2133;
        _2199 = _2134;
        _2201 = _2135;
    }
    else
    {
        uint _2203 = _1831 + 2u;
        uint _2207 = _1831 + 10u;
        float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _563) * 0.949999988079071044921875);
        float _2222 = _2221 * _2221;
        float _2223 = cbLight._m0[_2203].x + _640;
        float _2224 = cbLight._m0[_2203].y + _641;
        float _2225 = cbLight._m0[_2203].z + _642;
        float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
        float _2230 = _2229 * _2223;
        float _2231 = _2229 * _2224;
        float _2232 = _2229 * _2225;
        float _2233 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2203].xyz));
        float _4235 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2237 = dot(vec3(_560, _561, _562), vec3(_2230, _2231, _2232));
        float _4246 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2240 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2241 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2230, _2231, _2232));
        float _4257 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2245 = _2222 * _2222;
        float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
        float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * 5.0);
        float _2263 = 1.0 - _2222;
        float _2273 = (0.5 / (((_1999 * ((_2236 * _2263) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2263) + _2222) * _2236))) * _2236;
        float _4268 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2275 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
        float _2276 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _2197 = (((((_2256 * _2021) + _722) * cbLight._m0[_2207].x) * _2275) * _2276) + _2133;
        _2199 = (((((_2256 * _2023) + _724) * cbLight._m0[_2207].y) * _2275) * _2276) + _2134;
        _2201 = (((((_2256 * _2024) + _725) * cbLight._m0[_2207].z) * _2275) * _2276) + _2135;
    }
    float _2311;
    float _2313;
    float _2315;
    if (_1925)
    {
        _2311 = _2197;
        _2313 = _2199;
        _2315 = _2201;
    }
    else
    {
        uint _2322 = _1831 + 3u;
        uint _2326 = _1831 + 11u;
        float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _563) * 0.949999988079071044921875);
        float _2341 = _2340 * _2340;
        float _2342 = cbLight._m0[_2322].x + _640;
        float _2343 = cbLight._m0[_2322].y + _641;
        float _2344 = cbLight._m0[_2322].z + _642;
        float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
        float _2349 = _2348 * _2342;
        float _2350 = _2348 * _2343;
        float _2351 = _2348 * _2344;
        float _2352 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2322].xyz));
        float _4284 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2356 = dot(vec3(_560, _561, _562), vec3(_2349, _2350, _2351));
        float _4295 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2360 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2349, _2350, _2351));
        float _4306 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2364 = _2341 * _2341;
        float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
        float _2375 = exp2(log2(1.0 - (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) * 5.0);
        float _2382 = 1.0 - _2341;
        float _2392 = (0.5 / (((_1999 * ((_2355 * _2382) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2382) + _2341) * _2355))) * _2355;
        float _4317 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2394 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
        float _2395 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _2311 = (((((_2375 * _2021) + _722) * cbLight._m0[_2326].x) * _2394) * _2395) + _2197;
        _2313 = (((((_2375 * _2023) + _724) * cbLight._m0[_2326].y) * _2394) * _2395) + _2199;
        _2315 = (((((_2375 * _2024) + _725) * cbLight._m0[_2326].z) * _2394) * _2395) + _2201;
    }
    float _2530;
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    if (_1829.y == 0u)
    {
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2470;
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2470;
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2470;
        uvec4 _2485 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2486 = _2485.x;
        uint _2497 = uint((float(_2485.y) * floor(float(uint(cbSceneParam._m0[85u].y * _661) / _2486))) + floor(float(uint(cbSceneParam._m0[85u].x * _660) / _2486)));
        float _2507 = (log2(_2473 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2508 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        uint _2511 = uint(isnan(14.0) ? _2508 : (isnan(_2508) ? 14.0 : min(_2508, 14.0)));
        uvec4 _2516 = texelFetch(g_lightClusterGridBuffer, int(((_2511 << 2u) + (_2497 << 6u)) >> 2u));
        uint _2517 = _2516.x;
        uint _2518 = _2485.z;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        if (((((1u << ((_2518 >> 4u) & 15u)) + 4294967295u) & _2517) == 0u) || ((_2518 & 240u) == 0u))
        {
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
        }
        else
        {
            float _2619;
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            uint _2777 = 0u;
            uint _2786;
            bool _2787;
            for (;;)
            {
                _2786 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2777 << 2u)) >> 2u)).x;
                _2787 = _2786 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2787)
                {
                    frontier_phi_66_pred = _2771;
                    frontier_phi_66_pred_1 = _2776;
                    frontier_phi_66_pred_2 = _2775;
                    frontier_phi_66_pred_3 = _2774;
                    frontier_phi_66_pred_4 = _2773;
                    frontier_phi_66_pred_5 = _2772;
                }
                else
                {
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    uint _2922;
                    _2916 = _2771;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2774;
                    _2920 = _2775;
                    _2921 = _2776;
                    _2922 = _2786;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    for (;;)
                    {
                        uint _2926 = uint(findLSB(_2922)) + (_2777 << 5u);
                        uint _2923 = (_2922 + 4294967295u) & _2922;
                        uint _2928 = _2926 * 48u;
                        vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2948 = (_2926 * 48u) + 4u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 3u)).x));
                        uint _2967 = (_2926 * 48u) + 8u;
                        vec3 _2978 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x));
                        float _2982 = _2942.x - _2471;
                        float _2983 = _2942.y - _2472;
                        float _2984 = _2942.z - _2473;
                        float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                        float _2988 = inversesqrt(_2985);
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2992 = dot(vec3(_679, _682, _685), vec3(_2989, _2990, _2991));
                        float _2997 = 1.0 - (_2985 * _2942.w);
                        float _4343 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _2998 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _2999 = sqrt(_2985) * _2961.w;
                        float _3002 = 1.39999997615814208984375 / (_2999 + 1.39999997615814208984375);
                        float _3003 = _3002 * _3002;
                        float _3006 = ((1.0 - _3003) * _2992) + _3003;
                        float _3009 = _2999 * _2999;
                        float _3013 = ((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2998) / ((_3009 * 0.699999988079071044921875) + 1.0);
                        float _3017 = (-0.0) - _2471;
                        float _3018 = (-0.0) - _2472;
                        float _3019 = (-0.0) - _2473;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3024 = _3023 * _3017;
                        float _3025 = _3023 * _3018;
                        float _3026 = _3023 * _3019;
                        float _3034 = exp2(log2(1.0 / ((_3009 * 3.5) + 5.0)) * 0.25);
                        float _3035 = 1.0 - _754;
                        float _3042 = sqrt(1.0 - ((1.0 - (_3035 * _3035)) * (1.0 - (_3034 * _3034))));
                        float _3043 = _3042 * _3042;
                        float _3044 = _3043 * _3043;
                        float _3045 = _3024 + _2989;
                        float _3046 = _3025 + _2990;
                        float _3047 = _3026 + _2991;
                        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                        float _3055 = dot(vec3(_679, _682, _685), vec3(_3024, _3025, _3026));
                        float _4359 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3058 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3059 = dot(vec3(_679, _682, _685), vec3(_3051 * _3045, _3051 * _3046, _3051 * _3047));
                        float _4370 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3062 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _3066 = ((_3062 * _3062) * (_3044 + (-1.0))) + 1.0;
                        float _3067 = _3002 * _3043;
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _2992) + _3068;
                        float _4381 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3072 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3073 = 1.0 - _3043;
                        float _3083 = (0.5 / (((_3072 * ((_3058 * _3073) + _3043)) + 9.9999999392252902907785028219223e-09) + (((_3072 * _3073) + _3043) * _3058))) * _3072;
                        float _4392 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3094 = (((_3044 * 3.1415927410125732421875) * (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) / ((_3066 * _3066) * ((_3009 * 2.1991131305694580078125) + 3.141590118408203125))) * _2998;
                        _2846 = (_3013 * _2961.x) + _2919;
                        _2847 = (_3013 * _2961.y) + _2920;
                        _2848 = (_3013 * _2961.z) + _2921;
                        _2843 = (_3094 * _2978.x) + _2916;
                        _2844 = (_3094 * _2978.y) + _2917;
                        _2845 = (_3094 * _2978.z) + _2918;
                        if (_2923 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2916 = _2843;
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2846;
                            _2920 = _2847;
                            _2921 = _2848;
                            _2922 = _2923;
                        }
                    }
                    frontier_phi_66_pred = _2843;
                    frontier_phi_66_pred_1 = _2848;
                    frontier_phi_66_pred_2 = _2847;
                    frontier_phi_66_pred_3 = _2846;
                    frontier_phi_66_pred_4 = _2845;
                    frontier_phi_66_pred_5 = _2844;
                }
                _2619 = frontier_phi_66_pred;
                _2629 = frontier_phi_66_pred_1;
                _2627 = frontier_phi_66_pred_2;
                _2625 = frontier_phi_66_pred_3;
                _2623 = frontier_phi_66_pred_4;
                _2621 = frontier_phi_66_pred_5;
                uint _2778 = _2777 + 1u;
                if (_2778 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2771 = _2619;
                    _2772 = _2621;
                    _2773 = _2623;
                    _2774 = _2625;
                    _2775 = _2627;
                    _2776 = _2629;
                    _2777 = _2778;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
        }
        uvec4 _2632 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2633 = _2632.z;
        uint _2635 = (_2633 >> 8u) & 15u;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        if (((4294967295u << _2635) & _2517) == 0u)
        {
            _2739 = _2618;
            _2741 = _2620;
            _2743 = _2622;
            _2745 = _2624;
            _2747 = _2626;
            _2749 = _2628;
        }
        else
        {
            float _2764 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
            float _2765 = _2764 * _2471;
            float _2766 = _2764 * _2472;
            float _2767 = _2764 * _2473;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2635 < ((_2633 >> 12u) & 15u))
            {
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2899 = _2618;
                float _2900 = _2620;
                float _2901 = _2622;
                float _2902 = _2624;
                float _2903 = _2626;
                float _2904 = _2628;
                uint _2905 = _2635;
                uint _2914;
                bool _2915;
                for (;;)
                {
                    _2914 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2905 << 2u)) >> 2u)).x;
                    _2915 = _2914 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2915)
                    {
                        frontier_phi_77_pred = _2904;
                        frontier_phi_77_pred_1 = _2903;
                        frontier_phi_77_pred_2 = _2902;
                        frontier_phi_77_pred_3 = _2901;
                        frontier_phi_77_pred_4 = _2900;
                        frontier_phi_77_pred_5 = _2899;
                    }
                    else
                    {
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3121 = _2899;
                        float _3122 = _2900;
                        float _3123 = _2901;
                        float _3124 = _2902;
                        float _3125 = _2903;
                        float _3126 = _2904;
                        uint _3127 = _2914;
                        uint _3128;
                        vec4 _3153;
                        float _3154;
                        vec4 _3169;
                        vec3 _3181;
                        vec4 _3196;
                        vec4 _3211;
                        float _3257;
                        bool _3258;
                        for (;;)
                        {
                            uint _3138 = ((_2905 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3127));
                            _3128 = (_3127 + 4294967295u) & _3127;
                            uint _3140 = _3138 * 40u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            _3154 = _3153.w;
                            uint _3156 = (_3138 * 40u) + 4u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3138 * 40u) + 8u;
                            _3181 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x));
                            uint _3183 = (_3138 * 40u) + 16u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3198 = (_3138 * 40u) + 20u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3213 = (_3138 * 40u) + 24u;
                            vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3232 = (_3138 * 40u) + 28u;
                            vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            _3257 = fma(_2473, _3245.z, fma(_2472, _3245.y, _3245.x * _2471)) + _3245.w;
                            _3258 = !((fma(_2473, _3226.z, fma(_2472, _3226.y, _3226.x * _2471)) + _3226.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3258)
                            {
                                float _3285 = _3153.x - _2471;
                                float _3286 = _3153.y - _2472;
                                float _3287 = _3153.z - _2473;
                                float _3288 = dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287));
                                float _3291 = inversesqrt(_3288);
                                float _3292 = _3291 * _3285;
                                float _3293 = _3291 * _3286;
                                float _3294 = _3291 * _3287;
                                float _3298 = 1.0 - (_3288 / (_3154 * _3154));
                                float _4403 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3299 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3303 = sqrt(_3288) * _3169.w;
                                float _3305 = 1.39999997615814208984375 / (_3303 + 1.39999997615814208984375);
                                float _3306 = _3305 * _3305;
                                float _3309 = ((1.0 - _3306) * dot(vec3(_3292, _3293, _3294), vec3(_679, _682, _685))) + _3306;
                                float _3312 = _3303 * _3303;
                                float _3316 = (fma(_2473, _3196.z, fma(_2472, _3196.y, _3196.x * _2471)) + _3196.w) / _3257;
                                float _3317 = (fma(_2473, _3211.z, fma(_2472, _3211.y, _3211.x * _2471)) + _3211.w) / _3257;
                                float _3321 = 1.0 - dot(vec2(_3316, _3317), vec2(_3316, _3317));
                                float _4419 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3322 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3323 = _3322 * (((isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0))) * _3299) / ((_3312 * 0.699999988079071044921875) + 1.0));
                                float _3335 = exp2(log2(1.0 / ((_3312 * 3.5) + 5.0)) * 0.25);
                                float _3336 = 1.0 - _754;
                                float _3343 = sqrt(1.0 - ((1.0 - (_3336 * _3336)) * (1.0 - (_3335 * _3335))));
                                float _3344 = _3343 * _3343;
                                float _3345 = _3344 * _3344;
                                float _3346 = _3292 - _2765;
                                float _3347 = _3293 - _2766;
                                float _3348 = _3294 - _2767;
                                float _3352 = inversesqrt(dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348)));
                                float _3356 = dot(vec3(_679, _682, _685), vec3((-0.0) - _2765, (-0.0) - _2766, (-0.0) - _2767));
                                float _4430 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3359 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3360 = dot(vec3(_679, _682, _685), vec3(_3352 * _3346, _3352 * _3347, _3352 * _3348));
                                float _4441 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3363 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3367 = ((_3363 * _3363) * (_3345 + (-1.0))) + 1.0;
                                float _3368 = _3305 * _3344;
                                float _3369 = _3368 * _3368;
                                float _3375 = ((1.0 - _3369) * dot(vec3(_679, _682, _685), vec3(_3292, _3293, _3294))) + _3369;
                                float _4452 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3376 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3377 = 1.0 - _3344;
                                float _3387 = (0.5 / (((_3376 * ((_3359 * _3377) + _3344)) + 9.9999999392252902907785028219223e-09) + (((_3376 * _3377) + _3344) * _3359))) * _3376;
                                float _4463 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3397 = (_3322 * _3299) * (((_3345 * 3.1415927410125732421875) * (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) / ((_3367 * _3367) * ((_3312 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3323 * _3169.y;
                                frontier_phi_83_pred_1 = _3323 * _3169.x;
                                frontier_phi_83_pred_2 = _3397 * _3181.z;
                                frontier_phi_83_pred_3 = _3397 * _3181.y;
                                frontier_phi_83_pred_4 = _3397 * _3181.x;
                                frontier_phi_83_pred_5 = _3323 * _3169.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3405 = frontier_phi_83_pred;
                            _3404 = frontier_phi_83_pred_1;
                            _3403 = frontier_phi_83_pred_2;
                            _3402 = frontier_phi_83_pred_3;
                            _3401 = frontier_phi_83_pred_4;
                            _3406 = frontier_phi_83_pred_5;
                            _3111 = _3404 + _3124;
                            _3112 = _3405 + _3125;
                            _3113 = _3406 + _3126;
                            _3108 = _3401 + _3121;
                            _3109 = _3402 + _3122;
                            _3110 = _3403 + _3123;
                            if (_3128 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3128;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3113;
                        frontier_phi_77_pred_1 = _3112;
                        frontier_phi_77_pred_2 = _3111;
                        frontier_phi_77_pred_3 = _3110;
                        frontier_phi_77_pred_4 = _3109;
                        frontier_phi_77_pred_5 = _3108;
                    }
                    _2750 = frontier_phi_77_pred;
                    _2748 = frontier_phi_77_pred_1;
                    _2746 = frontier_phi_77_pred_2;
                    _2744 = frontier_phi_77_pred_3;
                    _2742 = frontier_phi_77_pred_4;
                    _2740 = frontier_phi_77_pred_5;
                    uint _2906 = _2905 + 1u;
                    if (_2906 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2899 = _2740;
                        _2900 = _2742;
                        _2901 = _2744;
                        _2902 = _2746;
                        _2903 = _2748;
                        _2904 = _2750;
                        _2905 = _2906;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2744;
                frontier_phi_58_59_ladder_1 = _2750;
                frontier_phi_58_59_ladder_2 = _2748;
                frontier_phi_58_59_ladder_3 = _2746;
                frontier_phi_58_59_ladder_4 = _2742;
                frontier_phi_58_59_ladder_5 = _2740;
            }
            else
            {
                frontier_phi_58_59_ladder = _2622;
                frontier_phi_58_59_ladder_1 = _2628;
                frontier_phi_58_59_ladder_2 = _2626;
                frontier_phi_58_59_ladder_3 = _2624;
                frontier_phi_58_59_ladder_4 = _2620;
                frontier_phi_58_59_ladder_5 = _2618;
            }
            _2739 = frontier_phi_58_59_ladder_5;
            _2741 = frontier_phi_58_59_ladder_4;
            _2743 = frontier_phi_58_59_ladder;
            _2745 = frontier_phi_58_59_ladder_3;
            _2747 = frontier_phi_58_59_ladder_2;
            _2749 = frontier_phi_58_59_ladder_1;
        }
        float _2754 = isnan(1.0) ? _738 : (isnan(_738) ? 1.0 : min(_738, 1.0));
        _2530 = (_2754 * _2745) + _1963;
        _2532 = (_2754 * _2747) + _1965;
        _2534 = (_2754 * _2749) + _1967;
        _2536 = ((_2739 * _722) * _2754) + _2311;
        _2538 = ((_2741 * _724) * _2754) + _2313;
        _2540 = ((_2743 * _725) * _2754) + _2315;
    }
    else
    {
        _2530 = _1963;
        _2532 = _1965;
        _2534 = _1967;
        _2536 = _2311;
        _2538 = _2313;
        _2540 = _2315;
    }
    float _4479 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4490 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4501 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _2557 = ((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2530 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _738))) + ((_2536 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1578)) * cbPerFrame._m0[3u].x);
    float _2558 = ((isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2532 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _738))) + ((_2538 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1578)) * cbPerFrame._m0[3u].x);
    float _2559 = ((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2534 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _738))) + ((_2540 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1578)) * cbPerFrame._m0[3u].x);
    uint _2560 = _240 + 6u;
    float _2568 = _660 / cbSceneParam._m0[86u].x;
    float _2569 = _661 / cbSceneParam._m0[86u].y;
    vec4 _2583 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2568, _2569, (log2((isnan(cbSceneParam._m0[77u].w) ? _582 : (isnan(_582) ? cbSceneParam._m0[77u].w : min(_582, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2585 = _2583.x;
    float _2586 = _2583.y;
    float _2587 = _2583.z;
    float _2588 = _2583.w;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    if (_582 > cbSceneParam._m0[78u].w)
    {
        float _2643 = isnan(_582) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _582 : min(cbSceneParam._m0[80u].w, _582));
        float _2644 = _2643 / _582;
        float _2655 = _2644 * _633;
        float _2656 = _634 * _2644;
        float _2657 = (-0.0) - _2656;
        float _2659 = _2644 * _635;
        float _2661 = (cbSceneParam._m0[77u].w * _2657) / _2643;
        float _2662 = _2661 + cbSceneParam._m0[79u].w;
        float _2663 = cbSceneParam._m0[79u].w - _2656;
        float _2669 = sqrt(((_2655 * _2655) + (_2656 * _2656)) + (_2659 * _2659));
        float _2672 = (1.0 - (cbSceneParam._m0[77u].w / _2643)) * _2669;
        float _2677 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2679 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2856;
        if (abs((_2657 - _2661) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2856 = ((((_2662 > 0.0) ? exp2(_2677 * _2662) : (2.0 - exp2(_2679 * _2662))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2672;
        }
        else
        {
            float _2800 = 1.0 / cbSceneParam._m0[80u].x;
            float _2801 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : max(_2662, _2663));
            float _2802 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : min(_2662, _2663));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            _2856 = ((abs(_2669 / _2657) * cbSceneParam._m0[80u].y) * ((((_2811 - _2812) * 2.0) - ((exp2(_2677 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0)))) - exp2(_2677 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))))) * _2800)) - ((exp2(_2679 * _2811) - exp2(_2679 * _2812)) * _2800))) + (_2672 * cbSceneParam._m0[80u].z);
        }
        vec4 _2858 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2568, _2569, 1.0), 0.0);
        float _2867 = exp2((_2856 * (-1.44269502162933349609375)) * (1.0 - _2858.w));
        float _2868 = log2(_2867);
        float _2884 = log2(_2588);
        _2681 = (exp2(_2884 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].x)) * _2858.x) / cbSceneParam._m0[78u].x)) + _2585;
        _2683 = (exp2(_2884 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].y)) * _2858.y) / cbSceneParam._m0[78u].y)) + _2586;
        _2685 = (exp2(_2884 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].z)) * _2858.z) / cbSceneParam._m0[78u].z)) + _2587;
        _2687 = _2867 * _2588;
    }
    else
    {
        _2681 = _2585;
        _2683 = _2586;
        _2685 = _2587;
        _2687 = _2588;
    }
    bool _2894;
    vec4 _2697;
    vec4 _2719;
    float _2721;
    float _2725;
    float _2726;
    float _2727;
    float _2728;
    bool _2738;
    for (;;)
    {
        _2697 = cbMatDynParam._m0[0u];
        float _2699 = roundEven(_2697.y);
        bool _2700 = _2699 == 3.0;
        float _2701 = log2(_2687);
        float _2708 = exp2(_2701 * cbSceneParam._m0[78u].x) * _2557;
        float _2709 = exp2(_2701 * cbSceneParam._m0[78u].y) * _2558;
        float _2710 = exp2(_2701 * cbSceneParam._m0[78u].z) * _2559;
        float _2717 = _649 + (-0.5);
        _2719 = cbMtdParam._m0[1u];
        _2721 = _2719.y * _2717;
        float _2724 = (_2699 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2725 = _2724 * (_2700 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2681)));
        _2726 = _2724 * (_2700 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2683)));
        _2727 = _2724 * (_2700 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2685)));
        _2728 = _2717 * 0.999000012874603271484375;
        _2738 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2738)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2728) < 0.5)
            {
                _2894 = true;
                break;
            }
        }
        uint _2835 = _698 + uint(_2697.w);
        if ((cbInstanceData._m0[_2835].w < 1.0) && ((cbInstanceData._m0[_2835].w + _2728) < 0.5))
        {
            _2894 = true;
            break;
        }
        if ((_2721 + 1.0) < _2719.x)
        {
            _2894 = true;
            break;
        }
        _2894 = false;
        break;
    }
    float _3099;
    if (_2894)
    {
        discard_state = true;
        _3099 = 0.0;
    }
    else
    {
        _3099 = cbInstanceData._m0[_2560].w;
    }
    SV_Target.x = _2725;
    SV_Target.y = _2726;
    SV_Target.z = _2727;
    SV_Target.w = _3099;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2560].w;
    discard_exit();
}


